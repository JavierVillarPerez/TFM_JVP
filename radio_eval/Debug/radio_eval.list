
radio_eval.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b05c  0800b05c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b064  0800b064  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000208  0800b274  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800b274  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f604  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004989  00000000  00000000  0003f834  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019e8  00000000  00000000  000441c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c0  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c19  00000000  00000000  00047368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014ae3  00000000  00000000  00060f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009104f  00000000  00000000  00075a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106ab3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006220  00000000  00000000  00106b30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ace0 	.word	0x0800ace0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	0800ace0 	.word	0x0800ace0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 ff55 	bl	80022b4 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fead 	bl	8002174 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 ff47 	bl	80022b4 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 ff3d 	bl	80022b4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fecf 	bl	80021ec <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fec5 	bl	80021ec <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fc6d 	bl	8000d58 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fbef 	bl	8000c6c <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fc5f 	bl	8000d58 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fc55 	bl	8000d58 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fbfd 	bl	8000cbc <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fbf3 	bl	8000cbc <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	1c08      	adds	r0, r1, #0
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	; (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	fffffee9 	.word	0xfffffee9
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f83c 	bl	8000590 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			; (mov r8, r8)

08000524 <__aeabi_f2uiz>:
 8000524:	219e      	movs	r1, #158	; 0x9e
 8000526:	b510      	push	{r4, lr}
 8000528:	05c9      	lsls	r1, r1, #23
 800052a:	1c04      	adds	r4, r0, #0
 800052c:	f7ff ffd0 	bl	80004d0 <__aeabi_fcmpge>
 8000530:	2800      	cmp	r0, #0
 8000532:	d103      	bne.n	800053c <__aeabi_f2uiz+0x18>
 8000534:	1c20      	adds	r0, r4, #0
 8000536:	f000 ff55 	bl	80013e4 <__aeabi_f2iz>
 800053a:	bd10      	pop	{r4, pc}
 800053c:	219e      	movs	r1, #158	; 0x9e
 800053e:	1c20      	adds	r0, r4, #0
 8000540:	05c9      	lsls	r1, r1, #23
 8000542:	f000 fd8b 	bl	800105c <__aeabi_fsub>
 8000546:	f000 ff4d 	bl	80013e4 <__aeabi_f2iz>
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	061b      	lsls	r3, r3, #24
 800054e:	469c      	mov	ip, r3
 8000550:	4460      	add	r0, ip
 8000552:	e7f2      	b.n	800053a <__aeabi_f2uiz+0x16>

08000554 <__aeabi_d2uiz>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	2200      	movs	r2, #0
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <__aeabi_d2uiz+0x38>)
 800055a:	0004      	movs	r4, r0
 800055c:	000d      	movs	r5, r1
 800055e:	f7ff ff7d 	bl	800045c <__aeabi_dcmpge>
 8000562:	2800      	cmp	r0, #0
 8000564:	d104      	bne.n	8000570 <__aeabi_d2uiz+0x1c>
 8000566:	0020      	movs	r0, r4
 8000568:	0029      	movs	r1, r5
 800056a:	f002 fcc5 	bl	8002ef8 <__aeabi_d2iz>
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <__aeabi_d2uiz+0x38>)
 8000572:	2200      	movs	r2, #0
 8000574:	0020      	movs	r0, r4
 8000576:	0029      	movs	r1, r5
 8000578:	f002 f976 	bl	8002868 <__aeabi_dsub>
 800057c:	f002 fcbc 	bl	8002ef8 <__aeabi_d2iz>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	469c      	mov	ip, r3
 8000586:	4460      	add	r0, ip
 8000588:	e7f1      	b.n	800056e <__aeabi_d2uiz+0x1a>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	41e00000 	.word	0x41e00000

08000590 <__udivmoddi4>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	464f      	mov	r7, r9
 8000594:	4646      	mov	r6, r8
 8000596:	46d6      	mov	lr, sl
 8000598:	b5c0      	push	{r6, r7, lr}
 800059a:	0004      	movs	r4, r0
 800059c:	b082      	sub	sp, #8
 800059e:	000d      	movs	r5, r1
 80005a0:	4691      	mov	r9, r2
 80005a2:	4698      	mov	r8, r3
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d82f      	bhi.n	8000608 <__udivmoddi4+0x78>
 80005a8:	d02c      	beq.n	8000604 <__udivmoddi4+0x74>
 80005aa:	4641      	mov	r1, r8
 80005ac:	4648      	mov	r0, r9
 80005ae:	f002 fd63 	bl	8003078 <__clzdi2>
 80005b2:	0029      	movs	r1, r5
 80005b4:	0006      	movs	r6, r0
 80005b6:	0020      	movs	r0, r4
 80005b8:	f002 fd5e 	bl	8003078 <__clzdi2>
 80005bc:	1a33      	subs	r3, r6, r0
 80005be:	469c      	mov	ip, r3
 80005c0:	3b20      	subs	r3, #32
 80005c2:	469a      	mov	sl, r3
 80005c4:	d500      	bpl.n	80005c8 <__udivmoddi4+0x38>
 80005c6:	e076      	b.n	80006b6 <__udivmoddi4+0x126>
 80005c8:	464b      	mov	r3, r9
 80005ca:	4652      	mov	r2, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001f      	movs	r7, r3
 80005d0:	464b      	mov	r3, r9
 80005d2:	4662      	mov	r2, ip
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001e      	movs	r6, r3
 80005d8:	42af      	cmp	r7, r5
 80005da:	d828      	bhi.n	800062e <__udivmoddi4+0x9e>
 80005dc:	d025      	beq.n	800062a <__udivmoddi4+0x9a>
 80005de:	4653      	mov	r3, sl
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5a>
 80005e8:	e07b      	b.n	80006e2 <__udivmoddi4+0x152>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	4652      	mov	r2, sl
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4662      	mov	r2, ip
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e018      	b.n	8000636 <__udivmoddi4+0xa6>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9d0      	bls.n	80005aa <__udivmoddi4+0x1a>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8a>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b002      	add	sp, #8
 8000620:	bc1c      	pop	{r2, r3, r4}
 8000622:	4690      	mov	r8, r2
 8000624:	4699      	mov	r9, r3
 8000626:	46a2      	mov	sl, r4
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	42a3      	cmp	r3, r4
 800062c:	d9d7      	bls.n	80005de <__udivmoddi4+0x4e>
 800062e:	2200      	movs	r2, #0
 8000630:	2300      	movs	r3, #0
 8000632:	9200      	str	r2, [sp, #0]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	4663      	mov	r3, ip
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0e9      	beq.n	8000610 <__udivmoddi4+0x80>
 800063c:	07fb      	lsls	r3, r7, #31
 800063e:	4698      	mov	r8, r3
 8000640:	4641      	mov	r1, r8
 8000642:	0872      	lsrs	r2, r6, #1
 8000644:	430a      	orrs	r2, r1
 8000646:	087b      	lsrs	r3, r7, #1
 8000648:	4666      	mov	r6, ip
 800064a:	e00e      	b.n	800066a <__udivmoddi4+0xda>
 800064c:	42ab      	cmp	r3, r5
 800064e:	d101      	bne.n	8000654 <__udivmoddi4+0xc4>
 8000650:	42a2      	cmp	r2, r4
 8000652:	d80c      	bhi.n	800066e <__udivmoddi4+0xde>
 8000654:	1aa4      	subs	r4, r4, r2
 8000656:	419d      	sbcs	r5, r3
 8000658:	2001      	movs	r0, #1
 800065a:	1924      	adds	r4, r4, r4
 800065c:	416d      	adcs	r5, r5
 800065e:	2100      	movs	r1, #0
 8000660:	3e01      	subs	r6, #1
 8000662:	1824      	adds	r4, r4, r0
 8000664:	414d      	adcs	r5, r1
 8000666:	2e00      	cmp	r6, #0
 8000668:	d006      	beq.n	8000678 <__udivmoddi4+0xe8>
 800066a:	42ab      	cmp	r3, r5
 800066c:	d9ee      	bls.n	800064c <__udivmoddi4+0xbc>
 800066e:	3e01      	subs	r6, #1
 8000670:	1924      	adds	r4, r4, r4
 8000672:	416d      	adcs	r5, r5
 8000674:	2e00      	cmp	r6, #0
 8000676:	d1f8      	bne.n	800066a <__udivmoddi4+0xda>
 8000678:	9800      	ldr	r0, [sp, #0]
 800067a:	9901      	ldr	r1, [sp, #4]
 800067c:	4653      	mov	r3, sl
 800067e:	1900      	adds	r0, r0, r4
 8000680:	4169      	adcs	r1, r5
 8000682:	2b00      	cmp	r3, #0
 8000684:	db23      	blt.n	80006ce <__udivmoddi4+0x13e>
 8000686:	002b      	movs	r3, r5
 8000688:	4652      	mov	r2, sl
 800068a:	40d3      	lsrs	r3, r2
 800068c:	002a      	movs	r2, r5
 800068e:	4664      	mov	r4, ip
 8000690:	40e2      	lsrs	r2, r4
 8000692:	001c      	movs	r4, r3
 8000694:	4653      	mov	r3, sl
 8000696:	0015      	movs	r5, r2
 8000698:	2b00      	cmp	r3, #0
 800069a:	db2d      	blt.n	80006f8 <__udivmoddi4+0x168>
 800069c:	0026      	movs	r6, r4
 800069e:	4657      	mov	r7, sl
 80006a0:	40be      	lsls	r6, r7
 80006a2:	0033      	movs	r3, r6
 80006a4:	0026      	movs	r6, r4
 80006a6:	4667      	mov	r7, ip
 80006a8:	40be      	lsls	r6, r7
 80006aa:	0032      	movs	r2, r6
 80006ac:	1a80      	subs	r0, r0, r2
 80006ae:	4199      	sbcs	r1, r3
 80006b0:	9000      	str	r0, [sp, #0]
 80006b2:	9101      	str	r1, [sp, #4]
 80006b4:	e7ac      	b.n	8000610 <__udivmoddi4+0x80>
 80006b6:	4662      	mov	r2, ip
 80006b8:	2320      	movs	r3, #32
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	464a      	mov	r2, r9
 80006be:	40da      	lsrs	r2, r3
 80006c0:	4661      	mov	r1, ip
 80006c2:	0013      	movs	r3, r2
 80006c4:	4642      	mov	r2, r8
 80006c6:	408a      	lsls	r2, r1
 80006c8:	0017      	movs	r7, r2
 80006ca:	431f      	orrs	r7, r3
 80006cc:	e780      	b.n	80005d0 <__udivmoddi4+0x40>
 80006ce:	4662      	mov	r2, ip
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	002a      	movs	r2, r5
 80006d6:	4666      	mov	r6, ip
 80006d8:	409a      	lsls	r2, r3
 80006da:	0023      	movs	r3, r4
 80006dc:	40f3      	lsrs	r3, r6
 80006de:	4313      	orrs	r3, r2
 80006e0:	e7d4      	b.n	800068c <__udivmoddi4+0xfc>
 80006e2:	4662      	mov	r2, ip
 80006e4:	2320      	movs	r3, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	9100      	str	r1, [sp, #0]
 80006ee:	9201      	str	r2, [sp, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	40da      	lsrs	r2, r3
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	e780      	b.n	80005fa <__udivmoddi4+0x6a>
 80006f8:	2320      	movs	r3, #32
 80006fa:	4662      	mov	r2, ip
 80006fc:	0026      	movs	r6, r4
 80006fe:	1a9b      	subs	r3, r3, r2
 8000700:	40de      	lsrs	r6, r3
 8000702:	002f      	movs	r7, r5
 8000704:	46b0      	mov	r8, r6
 8000706:	4666      	mov	r6, ip
 8000708:	40b7      	lsls	r7, r6
 800070a:	4646      	mov	r6, r8
 800070c:	003b      	movs	r3, r7
 800070e:	4333      	orrs	r3, r6
 8000710:	e7c8      	b.n	80006a4 <__udivmoddi4+0x114>
 8000712:	46c0      	nop			; (mov r8, r8)

08000714 <__aeabi_fadd>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	4647      	mov	r7, r8
 8000718:	46ce      	mov	lr, r9
 800071a:	0243      	lsls	r3, r0, #9
 800071c:	0a5b      	lsrs	r3, r3, #9
 800071e:	0044      	lsls	r4, r0, #1
 8000720:	0fc2      	lsrs	r2, r0, #31
 8000722:	469c      	mov	ip, r3
 8000724:	0048      	lsls	r0, r1, #1
 8000726:	00dd      	lsls	r5, r3, #3
 8000728:	024b      	lsls	r3, r1, #9
 800072a:	0e24      	lsrs	r4, r4, #24
 800072c:	0a5b      	lsrs	r3, r3, #9
 800072e:	0e00      	lsrs	r0, r0, #24
 8000730:	b580      	push	{r7, lr}
 8000732:	4698      	mov	r8, r3
 8000734:	0026      	movs	r6, r4
 8000736:	4691      	mov	r9, r2
 8000738:	0fc9      	lsrs	r1, r1, #31
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	1a27      	subs	r7, r4, r0
 800073e:	428a      	cmp	r2, r1
 8000740:	d029      	beq.n	8000796 <__aeabi_fadd+0x82>
 8000742:	2f00      	cmp	r7, #0
 8000744:	dd15      	ble.n	8000772 <__aeabi_fadd+0x5e>
 8000746:	2800      	cmp	r0, #0
 8000748:	d14a      	bne.n	80007e0 <__aeabi_fadd+0xcc>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x3c>
 800074e:	e095      	b.n	800087c <__aeabi_fadd+0x168>
 8000750:	08ed      	lsrs	r5, r5, #3
 8000752:	2cff      	cmp	r4, #255	; 0xff
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x44>
 8000756:	e088      	b.n	800086a <__aeabi_fadd+0x156>
 8000758:	026b      	lsls	r3, r5, #9
 800075a:	0a5b      	lsrs	r3, r3, #9
 800075c:	b2e6      	uxtb	r6, r4
 800075e:	025b      	lsls	r3, r3, #9
 8000760:	05f6      	lsls	r6, r6, #23
 8000762:	0a58      	lsrs	r0, r3, #9
 8000764:	4330      	orrs	r0, r6
 8000766:	07d2      	lsls	r2, r2, #31
 8000768:	4310      	orrs	r0, r2
 800076a:	bc0c      	pop	{r2, r3}
 800076c:	4690      	mov	r8, r2
 800076e:	4699      	mov	r9, r3
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000772:	2f00      	cmp	r7, #0
 8000774:	d000      	beq.n	8000778 <__aeabi_fadd+0x64>
 8000776:	e087      	b.n	8000888 <__aeabi_fadd+0x174>
 8000778:	1c60      	adds	r0, r4, #1
 800077a:	b2c0      	uxtb	r0, r0
 800077c:	2801      	cmp	r0, #1
 800077e:	dc00      	bgt.n	8000782 <__aeabi_fadd+0x6e>
 8000780:	e0b6      	b.n	80008f0 <__aeabi_fadd+0x1dc>
 8000782:	1aee      	subs	r6, r5, r3
 8000784:	0172      	lsls	r2, r6, #5
 8000786:	d500      	bpl.n	800078a <__aeabi_fadd+0x76>
 8000788:	e0c5      	b.n	8000916 <__aeabi_fadd+0x202>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d13d      	bne.n	800080a <__aeabi_fadd+0xf6>
 800078e:	2200      	movs	r2, #0
 8000790:	2600      	movs	r6, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e7e3      	b.n	800075e <__aeabi_fadd+0x4a>
 8000796:	2f00      	cmp	r7, #0
 8000798:	dc00      	bgt.n	800079c <__aeabi_fadd+0x88>
 800079a:	e096      	b.n	80008ca <__aeabi_fadd+0x1b6>
 800079c:	2800      	cmp	r0, #0
 800079e:	d05d      	beq.n	800085c <__aeabi_fadd+0x148>
 80007a0:	2cff      	cmp	r4, #255	; 0xff
 80007a2:	d060      	beq.n	8000866 <__aeabi_fadd+0x152>
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	04d2      	lsls	r2, r2, #19
 80007a8:	4313      	orrs	r3, r2
 80007aa:	2f1b      	cmp	r7, #27
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_fadd+0x9c>
 80007ae:	e0ec      	b.n	800098a <__aeabi_fadd+0x276>
 80007b0:	2220      	movs	r2, #32
 80007b2:	1bd2      	subs	r2, r2, r7
 80007b4:	0018      	movs	r0, r3
 80007b6:	4093      	lsls	r3, r2
 80007b8:	40f8      	lsrs	r0, r7
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	4193      	sbcs	r3, r2
 80007be:	4303      	orrs	r3, r0
 80007c0:	18ed      	adds	r5, r5, r3
 80007c2:	016b      	lsls	r3, r5, #5
 80007c4:	d57b      	bpl.n	80008be <__aeabi_fadd+0x1aa>
 80007c6:	3401      	adds	r4, #1
 80007c8:	2cff      	cmp	r4, #255	; 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0xba>
 80007cc:	e0b7      	b.n	800093e <__aeabi_fadd+0x22a>
 80007ce:	2201      	movs	r2, #1
 80007d0:	2607      	movs	r6, #7
 80007d2:	402a      	ands	r2, r5
 80007d4:	086b      	lsrs	r3, r5, #1
 80007d6:	4d9a      	ldr	r5, [pc, #616]	; (8000a40 <__aeabi_fadd+0x32c>)
 80007d8:	401d      	ands	r5, r3
 80007da:	4315      	orrs	r5, r2
 80007dc:	402e      	ands	r6, r5
 80007de:	e029      	b.n	8000834 <__aeabi_fadd+0x120>
 80007e0:	2cff      	cmp	r4, #255	; 0xff
 80007e2:	d0b5      	beq.n	8000750 <__aeabi_fadd+0x3c>
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	04d2      	lsls	r2, r2, #19
 80007e8:	4313      	orrs	r3, r2
 80007ea:	2f1b      	cmp	r7, #27
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_fadd+0xdc>
 80007ee:	e0b2      	b.n	8000956 <__aeabi_fadd+0x242>
 80007f0:	2220      	movs	r2, #32
 80007f2:	1bd2      	subs	r2, r2, r7
 80007f4:	0019      	movs	r1, r3
 80007f6:	4093      	lsls	r3, r2
 80007f8:	40f9      	lsrs	r1, r7
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	4193      	sbcs	r3, r2
 80007fe:	430b      	orrs	r3, r1
 8000800:	1aed      	subs	r5, r5, r3
 8000802:	016b      	lsls	r3, r5, #5
 8000804:	d55b      	bpl.n	80008be <__aeabi_fadd+0x1aa>
 8000806:	01ad      	lsls	r5, r5, #6
 8000808:	09ae      	lsrs	r6, r5, #6
 800080a:	0030      	movs	r0, r6
 800080c:	f002 fc16 	bl	800303c <__clzsi2>
 8000810:	3805      	subs	r0, #5
 8000812:	4086      	lsls	r6, r0
 8000814:	4284      	cmp	r4, r0
 8000816:	dc65      	bgt.n	80008e4 <__aeabi_fadd+0x1d0>
 8000818:	1b04      	subs	r4, r0, r4
 800081a:	0033      	movs	r3, r6
 800081c:	2020      	movs	r0, #32
 800081e:	3401      	adds	r4, #1
 8000820:	40e3      	lsrs	r3, r4
 8000822:	1b04      	subs	r4, r0, r4
 8000824:	40a6      	lsls	r6, r4
 8000826:	1e75      	subs	r5, r6, #1
 8000828:	41ae      	sbcs	r6, r5
 800082a:	4333      	orrs	r3, r6
 800082c:	2607      	movs	r6, #7
 800082e:	001d      	movs	r5, r3
 8000830:	2400      	movs	r4, #0
 8000832:	401e      	ands	r6, r3
 8000834:	2201      	movs	r2, #1
 8000836:	464b      	mov	r3, r9
 8000838:	401a      	ands	r2, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d004      	beq.n	8000848 <__aeabi_fadd+0x134>
 800083e:	230f      	movs	r3, #15
 8000840:	402b      	ands	r3, r5
 8000842:	2b04      	cmp	r3, #4
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x134>
 8000846:	3504      	adds	r5, #4
 8000848:	016b      	lsls	r3, r5, #5
 800084a:	d400      	bmi.n	800084e <__aeabi_fadd+0x13a>
 800084c:	e780      	b.n	8000750 <__aeabi_fadd+0x3c>
 800084e:	3401      	adds	r4, #1
 8000850:	b2e6      	uxtb	r6, r4
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d12f      	bne.n	80008b6 <__aeabi_fadd+0x1a2>
 8000856:	26ff      	movs	r6, #255	; 0xff
 8000858:	2300      	movs	r3, #0
 800085a:	e780      	b.n	800075e <__aeabi_fadd+0x4a>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d152      	bne.n	8000906 <__aeabi_fadd+0x1f2>
 8000860:	2cff      	cmp	r4, #255	; 0xff
 8000862:	d000      	beq.n	8000866 <__aeabi_fadd+0x152>
 8000864:	e774      	b.n	8000750 <__aeabi_fadd+0x3c>
 8000866:	000a      	movs	r2, r1
 8000868:	08ed      	lsrs	r5, r5, #3
 800086a:	2d00      	cmp	r5, #0
 800086c:	d0f3      	beq.n	8000856 <__aeabi_fadd+0x142>
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	03db      	lsls	r3, r3, #15
 8000872:	432b      	orrs	r3, r5
 8000874:	025b      	lsls	r3, r3, #9
 8000876:	0a5b      	lsrs	r3, r3, #9
 8000878:	26ff      	movs	r6, #255	; 0xff
 800087a:	e770      	b.n	800075e <__aeabi_fadd+0x4a>
 800087c:	3f01      	subs	r7, #1
 800087e:	2f00      	cmp	r7, #0
 8000880:	d0be      	beq.n	8000800 <__aeabi_fadd+0xec>
 8000882:	2cff      	cmp	r4, #255	; 0xff
 8000884:	d1b1      	bne.n	80007ea <__aeabi_fadd+0xd6>
 8000886:	e763      	b.n	8000750 <__aeabi_fadd+0x3c>
 8000888:	2c00      	cmp	r4, #0
 800088a:	d047      	beq.n	800091c <__aeabi_fadd+0x208>
 800088c:	28ff      	cmp	r0, #255	; 0xff
 800088e:	d069      	beq.n	8000964 <__aeabi_fadd+0x250>
 8000890:	2480      	movs	r4, #128	; 0x80
 8000892:	04e4      	lsls	r4, r4, #19
 8000894:	427a      	negs	r2, r7
 8000896:	4325      	orrs	r5, r4
 8000898:	2a1b      	cmp	r2, #27
 800089a:	dd00      	ble.n	800089e <__aeabi_fadd+0x18a>
 800089c:	e0c5      	b.n	8000a2a <__aeabi_fadd+0x316>
 800089e:	002c      	movs	r4, r5
 80008a0:	2620      	movs	r6, #32
 80008a2:	40d4      	lsrs	r4, r2
 80008a4:	1ab2      	subs	r2, r6, r2
 80008a6:	4095      	lsls	r5, r2
 80008a8:	1e6a      	subs	r2, r5, #1
 80008aa:	4195      	sbcs	r5, r2
 80008ac:	4325      	orrs	r5, r4
 80008ae:	1b5d      	subs	r5, r3, r5
 80008b0:	0004      	movs	r4, r0
 80008b2:	4689      	mov	r9, r1
 80008b4:	e7a5      	b.n	8000802 <__aeabi_fadd+0xee>
 80008b6:	01ab      	lsls	r3, r5, #6
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	e750      	b.n	800075e <__aeabi_fadd+0x4a>
 80008bc:	2400      	movs	r4, #0
 80008be:	2201      	movs	r2, #1
 80008c0:	464b      	mov	r3, r9
 80008c2:	401a      	ands	r2, r3
 80008c4:	076b      	lsls	r3, r5, #29
 80008c6:	d1ba      	bne.n	800083e <__aeabi_fadd+0x12a>
 80008c8:	e742      	b.n	8000750 <__aeabi_fadd+0x3c>
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d13b      	bne.n	8000946 <__aeabi_fadd+0x232>
 80008ce:	3401      	adds	r4, #1
 80008d0:	b2e0      	uxtb	r0, r4
 80008d2:	2801      	cmp	r0, #1
 80008d4:	dd4a      	ble.n	800096c <__aeabi_fadd+0x258>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d0bd      	beq.n	8000856 <__aeabi_fadd+0x142>
 80008da:	2607      	movs	r6, #7
 80008dc:	18ed      	adds	r5, r5, r3
 80008de:	086d      	lsrs	r5, r5, #1
 80008e0:	402e      	ands	r6, r5
 80008e2:	e7a7      	b.n	8000834 <__aeabi_fadd+0x120>
 80008e4:	2307      	movs	r3, #7
 80008e6:	4d57      	ldr	r5, [pc, #348]	; (8000a44 <__aeabi_fadd+0x330>)
 80008e8:	1a24      	subs	r4, r4, r0
 80008ea:	4035      	ands	r5, r6
 80008ec:	401e      	ands	r6, r3
 80008ee:	e7a1      	b.n	8000834 <__aeabi_fadd+0x120>
 80008f0:	2c00      	cmp	r4, #0
 80008f2:	d11b      	bne.n	800092c <__aeabi_fadd+0x218>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d16e      	bne.n	80009d6 <__aeabi_fadd+0x2c2>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x1ea>
 80008fc:	e09a      	b.n	8000a34 <__aeabi_fadd+0x320>
 80008fe:	000a      	movs	r2, r1
 8000900:	001d      	movs	r5, r3
 8000902:	003c      	movs	r4, r7
 8000904:	e724      	b.n	8000750 <__aeabi_fadd+0x3c>
 8000906:	3f01      	subs	r7, #1
 8000908:	2f00      	cmp	r7, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fadd+0x1fa>
 800090c:	e758      	b.n	80007c0 <__aeabi_fadd+0xac>
 800090e:	2cff      	cmp	r4, #255	; 0xff
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x200>
 8000912:	e74a      	b.n	80007aa <__aeabi_fadd+0x96>
 8000914:	e7a7      	b.n	8000866 <__aeabi_fadd+0x152>
 8000916:	1b5e      	subs	r6, r3, r5
 8000918:	4689      	mov	r9, r1
 800091a:	e776      	b.n	800080a <__aeabi_fadd+0xf6>
 800091c:	2d00      	cmp	r5, #0
 800091e:	d11c      	bne.n	800095a <__aeabi_fadd+0x246>
 8000920:	000a      	movs	r2, r1
 8000922:	28ff      	cmp	r0, #255	; 0xff
 8000924:	d01f      	beq.n	8000966 <__aeabi_fadd+0x252>
 8000926:	0004      	movs	r4, r0
 8000928:	001d      	movs	r5, r3
 800092a:	e711      	b.n	8000750 <__aeabi_fadd+0x3c>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15d      	bne.n	80009ec <__aeabi_fadd+0x2d8>
 8000930:	2b00      	cmp	r3, #0
 8000932:	d117      	bne.n	8000964 <__aeabi_fadd+0x250>
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	2200      	movs	r2, #0
 8000938:	03db      	lsls	r3, r3, #15
 800093a:	26ff      	movs	r6, #255	; 0xff
 800093c:	e70f      	b.n	800075e <__aeabi_fadd+0x4a>
 800093e:	000a      	movs	r2, r1
 8000940:	26ff      	movs	r6, #255	; 0xff
 8000942:	2300      	movs	r3, #0
 8000944:	e70b      	b.n	800075e <__aeabi_fadd+0x4a>
 8000946:	2c00      	cmp	r4, #0
 8000948:	d121      	bne.n	800098e <__aeabi_fadd+0x27a>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d166      	bne.n	8000a1c <__aeabi_fadd+0x308>
 800094e:	28ff      	cmp	r0, #255	; 0xff
 8000950:	d1e9      	bne.n	8000926 <__aeabi_fadd+0x212>
 8000952:	001d      	movs	r5, r3
 8000954:	e787      	b.n	8000866 <__aeabi_fadd+0x152>
 8000956:	2301      	movs	r3, #1
 8000958:	e752      	b.n	8000800 <__aeabi_fadd+0xec>
 800095a:	1c7a      	adds	r2, r7, #1
 800095c:	d0a7      	beq.n	80008ae <__aeabi_fadd+0x19a>
 800095e:	43fa      	mvns	r2, r7
 8000960:	28ff      	cmp	r0, #255	; 0xff
 8000962:	d199      	bne.n	8000898 <__aeabi_fadd+0x184>
 8000964:	000a      	movs	r2, r1
 8000966:	001d      	movs	r5, r3
 8000968:	24ff      	movs	r4, #255	; 0xff
 800096a:	e6f1      	b.n	8000750 <__aeabi_fadd+0x3c>
 800096c:	2e00      	cmp	r6, #0
 800096e:	d121      	bne.n	80009b4 <__aeabi_fadd+0x2a0>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d04f      	beq.n	8000a14 <__aeabi_fadd+0x300>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d04c      	beq.n	8000a12 <__aeabi_fadd+0x2fe>
 8000978:	18ed      	adds	r5, r5, r3
 800097a:	016b      	lsls	r3, r5, #5
 800097c:	d59e      	bpl.n	80008bc <__aeabi_fadd+0x1a8>
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <__aeabi_fadd+0x330>)
 8000980:	3607      	adds	r6, #7
 8000982:	402e      	ands	r6, r5
 8000984:	2401      	movs	r4, #1
 8000986:	401d      	ands	r5, r3
 8000988:	e754      	b.n	8000834 <__aeabi_fadd+0x120>
 800098a:	2301      	movs	r3, #1
 800098c:	e718      	b.n	80007c0 <__aeabi_fadd+0xac>
 800098e:	28ff      	cmp	r0, #255	; 0xff
 8000990:	d0df      	beq.n	8000952 <__aeabi_fadd+0x23e>
 8000992:	2480      	movs	r4, #128	; 0x80
 8000994:	04e4      	lsls	r4, r4, #19
 8000996:	427f      	negs	r7, r7
 8000998:	4325      	orrs	r5, r4
 800099a:	2f1b      	cmp	r7, #27
 800099c:	dc4d      	bgt.n	8000a3a <__aeabi_fadd+0x326>
 800099e:	2620      	movs	r6, #32
 80009a0:	1bf6      	subs	r6, r6, r7
 80009a2:	002c      	movs	r4, r5
 80009a4:	40b5      	lsls	r5, r6
 80009a6:	40fc      	lsrs	r4, r7
 80009a8:	1e6a      	subs	r2, r5, #1
 80009aa:	4195      	sbcs	r5, r2
 80009ac:	4325      	orrs	r5, r4
 80009ae:	18ed      	adds	r5, r5, r3
 80009b0:	0004      	movs	r4, r0
 80009b2:	e706      	b.n	80007c2 <__aeabi_fadd+0xae>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d0cc      	beq.n	8000952 <__aeabi_fadd+0x23e>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fadd+0x2aa>
 80009bc:	e753      	b.n	8000866 <__aeabi_fadd+0x152>
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	4660      	mov	r0, ip
 80009c2:	03c9      	lsls	r1, r1, #15
 80009c4:	4208      	tst	r0, r1
 80009c6:	d003      	beq.n	80009d0 <__aeabi_fadd+0x2bc>
 80009c8:	4640      	mov	r0, r8
 80009ca:	4208      	tst	r0, r1
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fadd+0x2bc>
 80009ce:	001d      	movs	r5, r3
 80009d0:	2101      	movs	r1, #1
 80009d2:	4011      	ands	r1, r2
 80009d4:	e747      	b.n	8000866 <__aeabi_fadd+0x152>
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x2c8>
 80009da:	e6b9      	b.n	8000750 <__aeabi_fadd+0x3c>
 80009dc:	1aea      	subs	r2, r5, r3
 80009de:	0150      	lsls	r0, r2, #5
 80009e0:	d525      	bpl.n	8000a2e <__aeabi_fadd+0x31a>
 80009e2:	2607      	movs	r6, #7
 80009e4:	1b5d      	subs	r5, r3, r5
 80009e6:	402e      	ands	r6, r5
 80009e8:	4689      	mov	r9, r1
 80009ea:	e723      	b.n	8000834 <__aeabi_fadd+0x120>
 80009ec:	24ff      	movs	r4, #255	; 0xff
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fadd+0x2e0>
 80009f2:	e6ad      	b.n	8000750 <__aeabi_fadd+0x3c>
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	4660      	mov	r0, ip
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	4210      	tst	r0, r2
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fadd+0x2f4>
 80009fe:	4640      	mov	r0, r8
 8000a00:	4210      	tst	r0, r2
 8000a02:	d101      	bne.n	8000a08 <__aeabi_fadd+0x2f4>
 8000a04:	001d      	movs	r5, r3
 8000a06:	4689      	mov	r9, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	464b      	mov	r3, r9
 8000a0c:	24ff      	movs	r4, #255	; 0xff
 8000a0e:	401a      	ands	r2, r3
 8000a10:	e69e      	b.n	8000750 <__aeabi_fadd+0x3c>
 8000a12:	002b      	movs	r3, r5
 8000a14:	08dd      	lsrs	r5, r3, #3
 8000a16:	000a      	movs	r2, r1
 8000a18:	2400      	movs	r4, #0
 8000a1a:	e69d      	b.n	8000758 <__aeabi_fadd+0x44>
 8000a1c:	1c7a      	adds	r2, r7, #1
 8000a1e:	d0c6      	beq.n	80009ae <__aeabi_fadd+0x29a>
 8000a20:	43ff      	mvns	r7, r7
 8000a22:	28ff      	cmp	r0, #255	; 0xff
 8000a24:	d1b9      	bne.n	800099a <__aeabi_fadd+0x286>
 8000a26:	001d      	movs	r5, r3
 8000a28:	e71d      	b.n	8000866 <__aeabi_fadd+0x152>
 8000a2a:	2501      	movs	r5, #1
 8000a2c:	e73f      	b.n	80008ae <__aeabi_fadd+0x19a>
 8000a2e:	1e15      	subs	r5, r2, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fadd+0x320>
 8000a32:	e744      	b.n	80008be <__aeabi_fadd+0x1aa>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2300      	movs	r3, #0
 8000a38:	e691      	b.n	800075e <__aeabi_fadd+0x4a>
 8000a3a:	2501      	movs	r5, #1
 8000a3c:	e7b7      	b.n	80009ae <__aeabi_fadd+0x29a>
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	7dffffff 	.word	0x7dffffff
 8000a44:	fbffffff 	.word	0xfbffffff

08000a48 <__aeabi_fdiv>:
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4a:	4657      	mov	r7, sl
 8000a4c:	464e      	mov	r6, r9
 8000a4e:	4645      	mov	r5, r8
 8000a50:	46de      	mov	lr, fp
 8000a52:	0244      	lsls	r4, r0, #9
 8000a54:	b5e0      	push	{r5, r6, r7, lr}
 8000a56:	0046      	lsls	r6, r0, #1
 8000a58:	4688      	mov	r8, r1
 8000a5a:	0a64      	lsrs	r4, r4, #9
 8000a5c:	0e36      	lsrs	r6, r6, #24
 8000a5e:	0fc7      	lsrs	r7, r0, #31
 8000a60:	2e00      	cmp	r6, #0
 8000a62:	d063      	beq.n	8000b2c <__aeabi_fdiv+0xe4>
 8000a64:	2eff      	cmp	r6, #255	; 0xff
 8000a66:	d024      	beq.n	8000ab2 <__aeabi_fdiv+0x6a>
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	00e4      	lsls	r4, r4, #3
 8000a6c:	04db      	lsls	r3, r3, #19
 8000a6e:	431c      	orrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	4699      	mov	r9, r3
 8000a74:	469b      	mov	fp, r3
 8000a76:	3e7f      	subs	r6, #127	; 0x7f
 8000a78:	4643      	mov	r3, r8
 8000a7a:	4642      	mov	r2, r8
 8000a7c:	025d      	lsls	r5, r3, #9
 8000a7e:	0fd2      	lsrs	r2, r2, #31
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	0a6d      	lsrs	r5, r5, #9
 8000a84:	0e1b      	lsrs	r3, r3, #24
 8000a86:	4690      	mov	r8, r2
 8000a88:	4692      	mov	sl, r2
 8000a8a:	d065      	beq.n	8000b58 <__aeabi_fdiv+0x110>
 8000a8c:	2bff      	cmp	r3, #255	; 0xff
 8000a8e:	d055      	beq.n	8000b3c <__aeabi_fdiv+0xf4>
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	2100      	movs	r1, #0
 8000a94:	00ed      	lsls	r5, r5, #3
 8000a96:	04d2      	lsls	r2, r2, #19
 8000a98:	3b7f      	subs	r3, #127	; 0x7f
 8000a9a:	4315      	orrs	r5, r2
 8000a9c:	1af6      	subs	r6, r6, r3
 8000a9e:	4643      	mov	r3, r8
 8000aa0:	464a      	mov	r2, r9
 8000aa2:	407b      	eors	r3, r7
 8000aa4:	2a0f      	cmp	r2, #15
 8000aa6:	d900      	bls.n	8000aaa <__aeabi_fdiv+0x62>
 8000aa8:	e08d      	b.n	8000bc6 <__aeabi_fdiv+0x17e>
 8000aaa:	486d      	ldr	r0, [pc, #436]	; (8000c60 <__aeabi_fdiv+0x218>)
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	5882      	ldr	r2, [r0, r2]
 8000ab0:	4697      	mov	pc, r2
 8000ab2:	2c00      	cmp	r4, #0
 8000ab4:	d154      	bne.n	8000b60 <__aeabi_fdiv+0x118>
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	4699      	mov	r9, r3
 8000aba:	3b06      	subs	r3, #6
 8000abc:	26ff      	movs	r6, #255	; 0xff
 8000abe:	469b      	mov	fp, r3
 8000ac0:	e7da      	b.n	8000a78 <__aeabi_fdiv+0x30>
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	2902      	cmp	r1, #2
 8000ac8:	d01b      	beq.n	8000b02 <__aeabi_fdiv+0xba>
 8000aca:	2903      	cmp	r1, #3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fdiv+0x88>
 8000ace:	e0bf      	b.n	8000c50 <__aeabi_fdiv+0x208>
 8000ad0:	2901      	cmp	r1, #1
 8000ad2:	d028      	beq.n	8000b26 <__aeabi_fdiv+0xde>
 8000ad4:	0030      	movs	r0, r6
 8000ad6:	307f      	adds	r0, #127	; 0x7f
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	dd20      	ble.n	8000b1e <__aeabi_fdiv+0xd6>
 8000adc:	076a      	lsls	r2, r5, #29
 8000ade:	d004      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	402a      	ands	r2, r5
 8000ae4:	2a04      	cmp	r2, #4
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fdiv+0xa2>
 8000ae8:	3504      	adds	r5, #4
 8000aea:	012a      	lsls	r2, r5, #4
 8000aec:	d503      	bpl.n	8000af6 <__aeabi_fdiv+0xae>
 8000aee:	0030      	movs	r0, r6
 8000af0:	4a5c      	ldr	r2, [pc, #368]	; (8000c64 <__aeabi_fdiv+0x21c>)
 8000af2:	3080      	adds	r0, #128	; 0x80
 8000af4:	4015      	ands	r5, r2
 8000af6:	28fe      	cmp	r0, #254	; 0xfe
 8000af8:	dc03      	bgt.n	8000b02 <__aeabi_fdiv+0xba>
 8000afa:	01ac      	lsls	r4, r5, #6
 8000afc:	0a64      	lsrs	r4, r4, #9
 8000afe:	b2c2      	uxtb	r2, r0
 8000b00:	e001      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000b02:	22ff      	movs	r2, #255	; 0xff
 8000b04:	2400      	movs	r4, #0
 8000b06:	0264      	lsls	r4, r4, #9
 8000b08:	05d2      	lsls	r2, r2, #23
 8000b0a:	0a60      	lsrs	r0, r4, #9
 8000b0c:	07db      	lsls	r3, r3, #31
 8000b0e:	4310      	orrs	r0, r2
 8000b10:	4318      	orrs	r0, r3
 8000b12:	bc3c      	pop	{r2, r3, r4, r5}
 8000b14:	4690      	mov	r8, r2
 8000b16:	4699      	mov	r9, r3
 8000b18:	46a2      	mov	sl, r4
 8000b1a:	46ab      	mov	fp, r5
 8000b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b1e:	2201      	movs	r2, #1
 8000b20:	1a10      	subs	r0, r2, r0
 8000b22:	281b      	cmp	r0, #27
 8000b24:	dd7c      	ble.n	8000c20 <__aeabi_fdiv+0x1d8>
 8000b26:	2200      	movs	r2, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	e7ec      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d11d      	bne.n	8000b6c <__aeabi_fdiv+0x124>
 8000b30:	2304      	movs	r3, #4
 8000b32:	4699      	mov	r9, r3
 8000b34:	3b03      	subs	r3, #3
 8000b36:	2600      	movs	r6, #0
 8000b38:	469b      	mov	fp, r3
 8000b3a:	e79d      	b.n	8000a78 <__aeabi_fdiv+0x30>
 8000b3c:	3eff      	subs	r6, #255	; 0xff
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d120      	bne.n	8000b84 <__aeabi_fdiv+0x13c>
 8000b42:	2102      	movs	r1, #2
 8000b44:	4643      	mov	r3, r8
 8000b46:	464a      	mov	r2, r9
 8000b48:	407b      	eors	r3, r7
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	2a0f      	cmp	r2, #15
 8000b4e:	d8d8      	bhi.n	8000b02 <__aeabi_fdiv+0xba>
 8000b50:	4845      	ldr	r0, [pc, #276]	; (8000c68 <__aeabi_fdiv+0x220>)
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	5882      	ldr	r2, [r0, r2]
 8000b56:	4697      	mov	pc, r2
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d119      	bne.n	8000b90 <__aeabi_fdiv+0x148>
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	e7f1      	b.n	8000b44 <__aeabi_fdiv+0xfc>
 8000b60:	230c      	movs	r3, #12
 8000b62:	4699      	mov	r9, r3
 8000b64:	3b09      	subs	r3, #9
 8000b66:	26ff      	movs	r6, #255	; 0xff
 8000b68:	469b      	mov	fp, r3
 8000b6a:	e785      	b.n	8000a78 <__aeabi_fdiv+0x30>
 8000b6c:	0020      	movs	r0, r4
 8000b6e:	f002 fa65 	bl	800303c <__clzsi2>
 8000b72:	2676      	movs	r6, #118	; 0x76
 8000b74:	1f43      	subs	r3, r0, #5
 8000b76:	409c      	lsls	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	4276      	negs	r6, r6
 8000b7c:	1a36      	subs	r6, r6, r0
 8000b7e:	4699      	mov	r9, r3
 8000b80:	469b      	mov	fp, r3
 8000b82:	e779      	b.n	8000a78 <__aeabi_fdiv+0x30>
 8000b84:	464a      	mov	r2, r9
 8000b86:	2303      	movs	r3, #3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	4691      	mov	r9, r2
 8000b8c:	2103      	movs	r1, #3
 8000b8e:	e786      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000b90:	0028      	movs	r0, r5
 8000b92:	f002 fa53 	bl	800303c <__clzsi2>
 8000b96:	1f43      	subs	r3, r0, #5
 8000b98:	1836      	adds	r6, r6, r0
 8000b9a:	409d      	lsls	r5, r3
 8000b9c:	3676      	adds	r6, #118	; 0x76
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	e77d      	b.n	8000a9e <__aeabi_fdiv+0x56>
 8000ba2:	2480      	movs	r4, #128	; 0x80
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	03e4      	lsls	r4, r4, #15
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	e7ac      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000bac:	2500      	movs	r5, #0
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	03db      	lsls	r3, r3, #15
 8000bb2:	421c      	tst	r4, r3
 8000bb4:	d028      	beq.n	8000c08 <__aeabi_fdiv+0x1c0>
 8000bb6:	421d      	tst	r5, r3
 8000bb8:	d126      	bne.n	8000c08 <__aeabi_fdiv+0x1c0>
 8000bba:	432b      	orrs	r3, r5
 8000bbc:	025c      	lsls	r4, r3, #9
 8000bbe:	0a64      	lsrs	r4, r4, #9
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	e79f      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000bc6:	0162      	lsls	r2, r4, #5
 8000bc8:	016c      	lsls	r4, r5, #5
 8000bca:	42a2      	cmp	r2, r4
 8000bcc:	d224      	bcs.n	8000c18 <__aeabi_fdiv+0x1d0>
 8000bce:	211b      	movs	r1, #27
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	3e01      	subs	r6, #1
 8000bd4:	2701      	movs	r7, #1
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	006d      	lsls	r5, r5, #1
 8000bda:	0052      	lsls	r2, r2, #1
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	db01      	blt.n	8000be4 <__aeabi_fdiv+0x19c>
 8000be0:	4294      	cmp	r4, r2
 8000be2:	d801      	bhi.n	8000be8 <__aeabi_fdiv+0x1a0>
 8000be4:	1b12      	subs	r2, r2, r4
 8000be6:	433d      	orrs	r5, r7
 8000be8:	3901      	subs	r1, #1
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d1f3      	bne.n	8000bd6 <__aeabi_fdiv+0x18e>
 8000bee:	0014      	movs	r4, r2
 8000bf0:	1e62      	subs	r2, r4, #1
 8000bf2:	4194      	sbcs	r4, r2
 8000bf4:	4325      	orrs	r5, r4
 8000bf6:	e76d      	b.n	8000ad4 <__aeabi_fdiv+0x8c>
 8000bf8:	46ba      	mov	sl, r7
 8000bfa:	4659      	mov	r1, fp
 8000bfc:	0025      	movs	r5, r4
 8000bfe:	4653      	mov	r3, sl
 8000c00:	2902      	cmp	r1, #2
 8000c02:	d000      	beq.n	8000c06 <__aeabi_fdiv+0x1be>
 8000c04:	e761      	b.n	8000aca <__aeabi_fdiv+0x82>
 8000c06:	e77c      	b.n	8000b02 <__aeabi_fdiv+0xba>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	03db      	lsls	r3, r3, #15
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	0264      	lsls	r4, r4, #9
 8000c10:	0a64      	lsrs	r4, r4, #9
 8000c12:	003b      	movs	r3, r7
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	e776      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000c18:	1b12      	subs	r2, r2, r4
 8000c1a:	211a      	movs	r1, #26
 8000c1c:	2501      	movs	r5, #1
 8000c1e:	e7d9      	b.n	8000bd4 <__aeabi_fdiv+0x18c>
 8000c20:	369e      	adds	r6, #158	; 0x9e
 8000c22:	002a      	movs	r2, r5
 8000c24:	40b5      	lsls	r5, r6
 8000c26:	002c      	movs	r4, r5
 8000c28:	40c2      	lsrs	r2, r0
 8000c2a:	1e65      	subs	r5, r4, #1
 8000c2c:	41ac      	sbcs	r4, r5
 8000c2e:	4314      	orrs	r4, r2
 8000c30:	0762      	lsls	r2, r4, #29
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fdiv+0x1f6>
 8000c34:	220f      	movs	r2, #15
 8000c36:	4022      	ands	r2, r4
 8000c38:	2a04      	cmp	r2, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fdiv+0x1f6>
 8000c3c:	3404      	adds	r4, #4
 8000c3e:	0162      	lsls	r2, r4, #5
 8000c40:	d403      	bmi.n	8000c4a <__aeabi_fdiv+0x202>
 8000c42:	01a4      	lsls	r4, r4, #6
 8000c44:	0a64      	lsrs	r4, r4, #9
 8000c46:	2200      	movs	r2, #0
 8000c48:	e75d      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	e75a      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000c50:	2480      	movs	r4, #128	; 0x80
 8000c52:	03e4      	lsls	r4, r4, #15
 8000c54:	432c      	orrs	r4, r5
 8000c56:	0264      	lsls	r4, r4, #9
 8000c58:	0a64      	lsrs	r4, r4, #9
 8000c5a:	22ff      	movs	r2, #255	; 0xff
 8000c5c:	e753      	b.n	8000b06 <__aeabi_fdiv+0xbe>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	0800ad0c 	.word	0x0800ad0c
 8000c64:	f7ffffff 	.word	0xf7ffffff
 8000c68:	0800ad4c 	.word	0x0800ad4c

08000c6c <__eqsf2>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	0042      	lsls	r2, r0, #1
 8000c70:	024e      	lsls	r6, r1, #9
 8000c72:	004c      	lsls	r4, r1, #1
 8000c74:	0245      	lsls	r5, r0, #9
 8000c76:	0a6d      	lsrs	r5, r5, #9
 8000c78:	0e12      	lsrs	r2, r2, #24
 8000c7a:	0fc3      	lsrs	r3, r0, #31
 8000c7c:	0a76      	lsrs	r6, r6, #9
 8000c7e:	0e24      	lsrs	r4, r4, #24
 8000c80:	0fc9      	lsrs	r1, r1, #31
 8000c82:	2aff      	cmp	r2, #255	; 0xff
 8000c84:	d00f      	beq.n	8000ca6 <__eqsf2+0x3a>
 8000c86:	2cff      	cmp	r4, #255	; 0xff
 8000c88:	d011      	beq.n	8000cae <__eqsf2+0x42>
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	42a2      	cmp	r2, r4
 8000c8e:	d000      	beq.n	8000c92 <__eqsf2+0x26>
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
 8000c92:	42b5      	cmp	r5, r6
 8000c94:	d1fc      	bne.n	8000c90 <__eqsf2+0x24>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d00d      	beq.n	8000cb6 <__eqsf2+0x4a>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d1f8      	bne.n	8000c90 <__eqsf2+0x24>
 8000c9e:	0028      	movs	r0, r5
 8000ca0:	1e45      	subs	r5, r0, #1
 8000ca2:	41a8      	sbcs	r0, r5
 8000ca4:	e7f4      	b.n	8000c90 <__eqsf2+0x24>
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d1f1      	bne.n	8000c90 <__eqsf2+0x24>
 8000cac:	e7eb      	b.n	8000c86 <__eqsf2+0x1a>
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d1ed      	bne.n	8000c90 <__eqsf2+0x24>
 8000cb4:	e7e9      	b.n	8000c8a <__eqsf2+0x1e>
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e7ea      	b.n	8000c90 <__eqsf2+0x24>
 8000cba:	46c0      	nop			; (mov r8, r8)

08000cbc <__gesf2>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	004a      	lsls	r2, r1, #1
 8000cc0:	024e      	lsls	r6, r1, #9
 8000cc2:	0245      	lsls	r5, r0, #9
 8000cc4:	0044      	lsls	r4, r0, #1
 8000cc6:	0a6d      	lsrs	r5, r5, #9
 8000cc8:	0e24      	lsrs	r4, r4, #24
 8000cca:	0fc3      	lsrs	r3, r0, #31
 8000ccc:	0a76      	lsrs	r6, r6, #9
 8000cce:	0e12      	lsrs	r2, r2, #24
 8000cd0:	0fc9      	lsrs	r1, r1, #31
 8000cd2:	2cff      	cmp	r4, #255	; 0xff
 8000cd4:	d015      	beq.n	8000d02 <__gesf2+0x46>
 8000cd6:	2aff      	cmp	r2, #255	; 0xff
 8000cd8:	d00e      	beq.n	8000cf8 <__gesf2+0x3c>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d115      	bne.n	8000d0a <__gesf2+0x4e>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d101      	bne.n	8000ce6 <__gesf2+0x2a>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d01c      	beq.n	8000d20 <__gesf2+0x64>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d014      	beq.n	8000d14 <__gesf2+0x58>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d027      	beq.n	8000d3e <__gesf2+0x82>
 8000cee:	2002      	movs	r0, #2
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4018      	ands	r0, r3
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d0ee      	beq.n	8000cda <__gesf2+0x1e>
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	4240      	negs	r0, r0
 8000d00:	e7f9      	b.n	8000cf6 <__gesf2+0x3a>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d1fa      	bne.n	8000cfc <__gesf2+0x40>
 8000d06:	2aff      	cmp	r2, #255	; 0xff
 8000d08:	d00e      	beq.n	8000d28 <__gesf2+0x6c>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d10e      	bne.n	8000d2c <__gesf2+0x70>
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d0ed      	beq.n	8000cee <__gesf2+0x32>
 8000d12:	e00b      	b.n	8000d2c <__gesf2+0x70>
 8000d14:	2301      	movs	r3, #1
 8000d16:	3901      	subs	r1, #1
 8000d18:	4399      	bics	r1, r3
 8000d1a:	0008      	movs	r0, r1
 8000d1c:	3001      	adds	r0, #1
 8000d1e:	e7ea      	b.n	8000cf6 <__gesf2+0x3a>
 8000d20:	2000      	movs	r0, #0
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0e7      	beq.n	8000cf6 <__gesf2+0x3a>
 8000d26:	e7e2      	b.n	8000cee <__gesf2+0x32>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d1e7      	bne.n	8000cfc <__gesf2+0x40>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d1de      	bne.n	8000cee <__gesf2+0x32>
 8000d30:	4294      	cmp	r4, r2
 8000d32:	dd05      	ble.n	8000d40 <__gesf2+0x84>
 8000d34:	2102      	movs	r1, #2
 8000d36:	1e58      	subs	r0, r3, #1
 8000d38:	4008      	ands	r0, r1
 8000d3a:	3801      	subs	r0, #1
 8000d3c:	e7db      	b.n	8000cf6 <__gesf2+0x3a>
 8000d3e:	2400      	movs	r4, #0
 8000d40:	42a2      	cmp	r2, r4
 8000d42:	dc04      	bgt.n	8000d4e <__gesf2+0x92>
 8000d44:	42b5      	cmp	r5, r6
 8000d46:	d8d2      	bhi.n	8000cee <__gesf2+0x32>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	42b5      	cmp	r5, r6
 8000d4c:	d2d3      	bcs.n	8000cf6 <__gesf2+0x3a>
 8000d4e:	1e58      	subs	r0, r3, #1
 8000d50:	2301      	movs	r3, #1
 8000d52:	4398      	bics	r0, r3
 8000d54:	3001      	adds	r0, #1
 8000d56:	e7ce      	b.n	8000cf6 <__gesf2+0x3a>

08000d58 <__lesf2>:
 8000d58:	b530      	push	{r4, r5, lr}
 8000d5a:	0042      	lsls	r2, r0, #1
 8000d5c:	0244      	lsls	r4, r0, #9
 8000d5e:	024d      	lsls	r5, r1, #9
 8000d60:	0fc3      	lsrs	r3, r0, #31
 8000d62:	0048      	lsls	r0, r1, #1
 8000d64:	0a64      	lsrs	r4, r4, #9
 8000d66:	0e12      	lsrs	r2, r2, #24
 8000d68:	0a6d      	lsrs	r5, r5, #9
 8000d6a:	0e00      	lsrs	r0, r0, #24
 8000d6c:	0fc9      	lsrs	r1, r1, #31
 8000d6e:	2aff      	cmp	r2, #255	; 0xff
 8000d70:	d012      	beq.n	8000d98 <__lesf2+0x40>
 8000d72:	28ff      	cmp	r0, #255	; 0xff
 8000d74:	d00c      	beq.n	8000d90 <__lesf2+0x38>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d112      	bne.n	8000da0 <__lesf2+0x48>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d119      	bne.n	8000db2 <__lesf2+0x5a>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d117      	bne.n	8000db2 <__lesf2+0x5a>
 8000d82:	2c00      	cmp	r4, #0
 8000d84:	d02b      	beq.n	8000dde <__lesf2+0x86>
 8000d86:	2002      	movs	r0, #2
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4018      	ands	r0, r3
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e026      	b.n	8000dde <__lesf2+0x86>
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d0f0      	beq.n	8000d76 <__lesf2+0x1e>
 8000d94:	2002      	movs	r0, #2
 8000d96:	e022      	b.n	8000dde <__lesf2+0x86>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d1fb      	bne.n	8000d94 <__lesf2+0x3c>
 8000d9c:	28ff      	cmp	r0, #255	; 0xff
 8000d9e:	d01f      	beq.n	8000de0 <__lesf2+0x88>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d11f      	bne.n	8000de4 <__lesf2+0x8c>
 8000da4:	2d00      	cmp	r5, #0
 8000da6:	d11d      	bne.n	8000de4 <__lesf2+0x8c>
 8000da8:	2002      	movs	r0, #2
 8000daa:	3b01      	subs	r3, #1
 8000dac:	4018      	ands	r0, r3
 8000dae:	3801      	subs	r0, #1
 8000db0:	e015      	b.n	8000dde <__lesf2+0x86>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	d00e      	beq.n	8000dd4 <__lesf2+0x7c>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d1e5      	bne.n	8000d86 <__lesf2+0x2e>
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	dc04      	bgt.n	8000dca <__lesf2+0x72>
 8000dc0:	42ac      	cmp	r4, r5
 8000dc2:	d8e0      	bhi.n	8000d86 <__lesf2+0x2e>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	42ac      	cmp	r4, r5
 8000dc8:	d209      	bcs.n	8000dde <__lesf2+0x86>
 8000dca:	1e58      	subs	r0, r3, #1
 8000dcc:	2301      	movs	r3, #1
 8000dce:	4398      	bics	r0, r3
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	e004      	b.n	8000dde <__lesf2+0x86>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	3901      	subs	r1, #1
 8000dd8:	4399      	bics	r1, r3
 8000dda:	0008      	movs	r0, r1
 8000ddc:	3001      	adds	r0, #1
 8000dde:	bd30      	pop	{r4, r5, pc}
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d1d7      	bne.n	8000d94 <__lesf2+0x3c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1ce      	bne.n	8000d86 <__lesf2+0x2e>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	dde7      	ble.n	8000dbc <__lesf2+0x64>
 8000dec:	2102      	movs	r1, #2
 8000dee:	1e58      	subs	r0, r3, #1
 8000df0:	4008      	ands	r0, r1
 8000df2:	3801      	subs	r0, #1
 8000df4:	e7f3      	b.n	8000dde <__lesf2+0x86>
 8000df6:	46c0      	nop			; (mov r8, r8)

08000df8 <__aeabi_fmul>:
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	464e      	mov	r6, r9
 8000dfc:	4657      	mov	r7, sl
 8000dfe:	4645      	mov	r5, r8
 8000e00:	46de      	mov	lr, fp
 8000e02:	b5e0      	push	{r5, r6, r7, lr}
 8000e04:	0243      	lsls	r3, r0, #9
 8000e06:	0a5b      	lsrs	r3, r3, #9
 8000e08:	0045      	lsls	r5, r0, #1
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	1c0f      	adds	r7, r1, #0
 8000e0e:	4699      	mov	r9, r3
 8000e10:	0e2d      	lsrs	r5, r5, #24
 8000e12:	0fc6      	lsrs	r6, r0, #31
 8000e14:	2d00      	cmp	r5, #0
 8000e16:	d057      	beq.n	8000ec8 <__aeabi_fmul+0xd0>
 8000e18:	2dff      	cmp	r5, #255	; 0xff
 8000e1a:	d024      	beq.n	8000e66 <__aeabi_fmul+0x6e>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	04c0      	lsls	r0, r0, #19
 8000e22:	4318      	orrs	r0, r3
 8000e24:	2300      	movs	r3, #0
 8000e26:	4681      	mov	r9, r0
 8000e28:	469a      	mov	sl, r3
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	3d7f      	subs	r5, #127	; 0x7f
 8000e2e:	027c      	lsls	r4, r7, #9
 8000e30:	007a      	lsls	r2, r7, #1
 8000e32:	0ffb      	lsrs	r3, r7, #31
 8000e34:	0a64      	lsrs	r4, r4, #9
 8000e36:	0e12      	lsrs	r2, r2, #24
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d023      	beq.n	8000e84 <__aeabi_fmul+0x8c>
 8000e3c:	2aff      	cmp	r2, #255	; 0xff
 8000e3e:	d04b      	beq.n	8000ed8 <__aeabi_fmul+0xe0>
 8000e40:	00e3      	lsls	r3, r4, #3
 8000e42:	2480      	movs	r4, #128	; 0x80
 8000e44:	2000      	movs	r0, #0
 8000e46:	04e4      	lsls	r4, r4, #19
 8000e48:	3a7f      	subs	r2, #127	; 0x7f
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	18ad      	adds	r5, r5, r2
 8000e4e:	1c6b      	adds	r3, r5, #1
 8000e50:	4647      	mov	r7, r8
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	4653      	mov	r3, sl
 8000e56:	4077      	eors	r7, r6
 8000e58:	003a      	movs	r2, r7
 8000e5a:	2b0f      	cmp	r3, #15
 8000e5c:	d848      	bhi.n	8000ef0 <__aeabi_fmul+0xf8>
 8000e5e:	497d      	ldr	r1, [pc, #500]	; (8001054 <__aeabi_fmul+0x25c>)
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	58cb      	ldr	r3, [r1, r3]
 8000e64:	469f      	mov	pc, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_fmul+0x74>
 8000e6a:	e085      	b.n	8000f78 <__aeabi_fmul+0x180>
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	469a      	mov	sl, r3
 8000e70:	3b06      	subs	r3, #6
 8000e72:	469b      	mov	fp, r3
 8000e74:	027c      	lsls	r4, r7, #9
 8000e76:	007a      	lsls	r2, r7, #1
 8000e78:	0ffb      	lsrs	r3, r7, #31
 8000e7a:	25ff      	movs	r5, #255	; 0xff
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	4698      	mov	r8, r3
 8000e82:	d1db      	bne.n	8000e3c <__aeabi_fmul+0x44>
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	d000      	beq.n	8000e8a <__aeabi_fmul+0x92>
 8000e88:	e090      	b.n	8000fac <__aeabi_fmul+0x1b4>
 8000e8a:	4652      	mov	r2, sl
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	4692      	mov	sl, r2
 8000e92:	2001      	movs	r0, #1
 8000e94:	e7db      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000e96:	464c      	mov	r4, r9
 8000e98:	4658      	mov	r0, fp
 8000e9a:	0017      	movs	r7, r2
 8000e9c:	2802      	cmp	r0, #2
 8000e9e:	d024      	beq.n	8000eea <__aeabi_fmul+0xf2>
 8000ea0:	2803      	cmp	r0, #3
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fmul+0xae>
 8000ea4:	e0cf      	b.n	8001046 <__aeabi_fmul+0x24e>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2801      	cmp	r0, #1
 8000eac:	d14d      	bne.n	8000f4a <__aeabi_fmul+0x152>
 8000eae:	0258      	lsls	r0, r3, #9
 8000eb0:	05d2      	lsls	r2, r2, #23
 8000eb2:	0a40      	lsrs	r0, r0, #9
 8000eb4:	07ff      	lsls	r7, r7, #31
 8000eb6:	4310      	orrs	r0, r2
 8000eb8:	4338      	orrs	r0, r7
 8000eba:	b003      	add	sp, #12
 8000ebc:	bc3c      	pop	{r2, r3, r4, r5}
 8000ebe:	4690      	mov	r8, r2
 8000ec0:	4699      	mov	r9, r3
 8000ec2:	46a2      	mov	sl, r4
 8000ec4:	46ab      	mov	fp, r5
 8000ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d15b      	bne.n	8000f84 <__aeabi_fmul+0x18c>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	469b      	mov	fp, r3
 8000ed6:	e7aa      	b.n	8000e2e <__aeabi_fmul+0x36>
 8000ed8:	35ff      	adds	r5, #255	; 0xff
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d160      	bne.n	8000fa0 <__aeabi_fmul+0x1a8>
 8000ede:	4652      	mov	r2, sl
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	4692      	mov	sl, r2
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	e7b1      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000eea:	22ff      	movs	r2, #255	; 0xff
 8000eec:	2300      	movs	r3, #0
 8000eee:	e7de      	b.n	8000eae <__aeabi_fmul+0xb6>
 8000ef0:	464b      	mov	r3, r9
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	469c      	mov	ip, r3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	0426      	lsls	r6, r4, #16
 8000efa:	0c36      	lsrs	r6, r6, #16
 8000efc:	0418      	lsls	r0, r3, #16
 8000efe:	4661      	mov	r1, ip
 8000f00:	0033      	movs	r3, r6
 8000f02:	0c22      	lsrs	r2, r4, #16
 8000f04:	4664      	mov	r4, ip
 8000f06:	0c00      	lsrs	r0, r0, #16
 8000f08:	4343      	muls	r3, r0
 8000f0a:	434e      	muls	r6, r1
 8000f0c:	4350      	muls	r0, r2
 8000f0e:	4354      	muls	r4, r2
 8000f10:	1980      	adds	r0, r0, r6
 8000f12:	0c1a      	lsrs	r2, r3, #16
 8000f14:	1812      	adds	r2, r2, r0
 8000f16:	4296      	cmp	r6, r2
 8000f18:	d903      	bls.n	8000f22 <__aeabi_fmul+0x12a>
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4464      	add	r4, ip
 8000f22:	041b      	lsls	r3, r3, #16
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	0410      	lsls	r0, r2, #16
 8000f28:	18c0      	adds	r0, r0, r3
 8000f2a:	0183      	lsls	r3, r0, #6
 8000f2c:	1e5e      	subs	r6, r3, #1
 8000f2e:	41b3      	sbcs	r3, r6
 8000f30:	0e80      	lsrs	r0, r0, #26
 8000f32:	4318      	orrs	r0, r3
 8000f34:	0c13      	lsrs	r3, r2, #16
 8000f36:	191b      	adds	r3, r3, r4
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	4303      	orrs	r3, r0
 8000f3c:	001c      	movs	r4, r3
 8000f3e:	0123      	lsls	r3, r4, #4
 8000f40:	d579      	bpl.n	8001036 <__aeabi_fmul+0x23e>
 8000f42:	2301      	movs	r3, #1
 8000f44:	0862      	lsrs	r2, r4, #1
 8000f46:	401c      	ands	r4, r3
 8000f48:	4314      	orrs	r4, r2
 8000f4a:	9a01      	ldr	r2, [sp, #4]
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	dd4d      	ble.n	8000fee <__aeabi_fmul+0x1f6>
 8000f52:	0763      	lsls	r3, r4, #29
 8000f54:	d004      	beq.n	8000f60 <__aeabi_fmul+0x168>
 8000f56:	230f      	movs	r3, #15
 8000f58:	4023      	ands	r3, r4
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fmul+0x168>
 8000f5e:	3404      	adds	r4, #4
 8000f60:	0123      	lsls	r3, r4, #4
 8000f62:	d503      	bpl.n	8000f6c <__aeabi_fmul+0x174>
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <__aeabi_fmul+0x260>)
 8000f66:	9a01      	ldr	r2, [sp, #4]
 8000f68:	401c      	ands	r4, r3
 8000f6a:	3280      	adds	r2, #128	; 0x80
 8000f6c:	2afe      	cmp	r2, #254	; 0xfe
 8000f6e:	dcbc      	bgt.n	8000eea <__aeabi_fmul+0xf2>
 8000f70:	01a3      	lsls	r3, r4, #6
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	e79a      	b.n	8000eae <__aeabi_fmul+0xb6>
 8000f78:	230c      	movs	r3, #12
 8000f7a:	469a      	mov	sl, r3
 8000f7c:	3b09      	subs	r3, #9
 8000f7e:	25ff      	movs	r5, #255	; 0xff
 8000f80:	469b      	mov	fp, r3
 8000f82:	e754      	b.n	8000e2e <__aeabi_fmul+0x36>
 8000f84:	0018      	movs	r0, r3
 8000f86:	f002 f859 	bl	800303c <__clzsi2>
 8000f8a:	464a      	mov	r2, r9
 8000f8c:	1f43      	subs	r3, r0, #5
 8000f8e:	2576      	movs	r5, #118	; 0x76
 8000f90:	409a      	lsls	r2, r3
 8000f92:	2300      	movs	r3, #0
 8000f94:	426d      	negs	r5, r5
 8000f96:	4691      	mov	r9, r2
 8000f98:	1a2d      	subs	r5, r5, r0
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	469b      	mov	fp, r3
 8000f9e:	e746      	b.n	8000e2e <__aeabi_fmul+0x36>
 8000fa0:	4652      	mov	r2, sl
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	4692      	mov	sl, r2
 8000fa8:	2003      	movs	r0, #3
 8000faa:	e750      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000fac:	0020      	movs	r0, r4
 8000fae:	f002 f845 	bl	800303c <__clzsi2>
 8000fb2:	1f43      	subs	r3, r0, #5
 8000fb4:	1a2d      	subs	r5, r5, r0
 8000fb6:	409c      	lsls	r4, r3
 8000fb8:	3d76      	subs	r5, #118	; 0x76
 8000fba:	2000      	movs	r0, #0
 8000fbc:	e747      	b.n	8000e4e <__aeabi_fmul+0x56>
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	2700      	movs	r7, #0
 8000fc2:	03db      	lsls	r3, r3, #15
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	e772      	b.n	8000eae <__aeabi_fmul+0xb6>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	e766      	b.n	8000e9a <__aeabi_fmul+0xa2>
 8000fcc:	464c      	mov	r4, r9
 8000fce:	0032      	movs	r2, r6
 8000fd0:	4658      	mov	r0, fp
 8000fd2:	e762      	b.n	8000e9a <__aeabi_fmul+0xa2>
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	464a      	mov	r2, r9
 8000fd8:	03db      	lsls	r3, r3, #15
 8000fda:	421a      	tst	r2, r3
 8000fdc:	d022      	beq.n	8001024 <__aeabi_fmul+0x22c>
 8000fde:	421c      	tst	r4, r3
 8000fe0:	d120      	bne.n	8001024 <__aeabi_fmul+0x22c>
 8000fe2:	4323      	orrs	r3, r4
 8000fe4:	025b      	lsls	r3, r3, #9
 8000fe6:	0a5b      	lsrs	r3, r3, #9
 8000fe8:	4647      	mov	r7, r8
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	e75f      	b.n	8000eae <__aeabi_fmul+0xb6>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	1a9a      	subs	r2, r3, r2
 8000ff2:	2a1b      	cmp	r2, #27
 8000ff4:	dc21      	bgt.n	800103a <__aeabi_fmul+0x242>
 8000ff6:	0023      	movs	r3, r4
 8000ff8:	9901      	ldr	r1, [sp, #4]
 8000ffa:	40d3      	lsrs	r3, r2
 8000ffc:	319e      	adds	r1, #158	; 0x9e
 8000ffe:	408c      	lsls	r4, r1
 8001000:	001a      	movs	r2, r3
 8001002:	0023      	movs	r3, r4
 8001004:	1e5c      	subs	r4, r3, #1
 8001006:	41a3      	sbcs	r3, r4
 8001008:	4313      	orrs	r3, r2
 800100a:	075a      	lsls	r2, r3, #29
 800100c:	d004      	beq.n	8001018 <__aeabi_fmul+0x220>
 800100e:	220f      	movs	r2, #15
 8001010:	401a      	ands	r2, r3
 8001012:	2a04      	cmp	r2, #4
 8001014:	d000      	beq.n	8001018 <__aeabi_fmul+0x220>
 8001016:	3304      	adds	r3, #4
 8001018:	015a      	lsls	r2, r3, #5
 800101a:	d411      	bmi.n	8001040 <__aeabi_fmul+0x248>
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	0a5b      	lsrs	r3, r3, #9
 8001020:	2200      	movs	r2, #0
 8001022:	e744      	b.n	8000eae <__aeabi_fmul+0xb6>
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	464a      	mov	r2, r9
 8001028:	03db      	lsls	r3, r3, #15
 800102a:	4313      	orrs	r3, r2
 800102c:	025b      	lsls	r3, r3, #9
 800102e:	0a5b      	lsrs	r3, r3, #9
 8001030:	0037      	movs	r7, r6
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	e73b      	b.n	8000eae <__aeabi_fmul+0xb6>
 8001036:	9501      	str	r5, [sp, #4]
 8001038:	e787      	b.n	8000f4a <__aeabi_fmul+0x152>
 800103a:	2200      	movs	r2, #0
 800103c:	2300      	movs	r3, #0
 800103e:	e736      	b.n	8000eae <__aeabi_fmul+0xb6>
 8001040:	2201      	movs	r2, #1
 8001042:	2300      	movs	r3, #0
 8001044:	e733      	b.n	8000eae <__aeabi_fmul+0xb6>
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	03db      	lsls	r3, r3, #15
 800104a:	4323      	orrs	r3, r4
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	0a5b      	lsrs	r3, r3, #9
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	e72c      	b.n	8000eae <__aeabi_fmul+0xb6>
 8001054:	0800ad8c 	.word	0x0800ad8c
 8001058:	f7ffffff 	.word	0xf7ffffff

0800105c <__aeabi_fsub>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	4647      	mov	r7, r8
 8001060:	46ce      	mov	lr, r9
 8001062:	0044      	lsls	r4, r0, #1
 8001064:	0fc2      	lsrs	r2, r0, #31
 8001066:	b580      	push	{r7, lr}
 8001068:	0247      	lsls	r7, r0, #9
 800106a:	0248      	lsls	r0, r1, #9
 800106c:	0a40      	lsrs	r0, r0, #9
 800106e:	4684      	mov	ip, r0
 8001070:	4666      	mov	r6, ip
 8001072:	0048      	lsls	r0, r1, #1
 8001074:	0a7f      	lsrs	r7, r7, #9
 8001076:	0e24      	lsrs	r4, r4, #24
 8001078:	00f6      	lsls	r6, r6, #3
 800107a:	0025      	movs	r5, r4
 800107c:	4690      	mov	r8, r2
 800107e:	00fb      	lsls	r3, r7, #3
 8001080:	0e00      	lsrs	r0, r0, #24
 8001082:	0fc9      	lsrs	r1, r1, #31
 8001084:	46b1      	mov	r9, r6
 8001086:	28ff      	cmp	r0, #255	; 0xff
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x30>
 800108a:	e085      	b.n	8001198 <__aeabi_fsub+0x13c>
 800108c:	2601      	movs	r6, #1
 800108e:	4071      	eors	r1, r6
 8001090:	1a26      	subs	r6, r4, r0
 8001092:	4291      	cmp	r1, r2
 8001094:	d057      	beq.n	8001146 <__aeabi_fsub+0xea>
 8001096:	2e00      	cmp	r6, #0
 8001098:	dd43      	ble.n	8001122 <__aeabi_fsub+0xc6>
 800109a:	2800      	cmp	r0, #0
 800109c:	d000      	beq.n	80010a0 <__aeabi_fsub+0x44>
 800109e:	e07f      	b.n	80011a0 <__aeabi_fsub+0x144>
 80010a0:	4649      	mov	r1, r9
 80010a2:	2900      	cmp	r1, #0
 80010a4:	d100      	bne.n	80010a8 <__aeabi_fsub+0x4c>
 80010a6:	e0aa      	b.n	80011fe <__aeabi_fsub+0x1a2>
 80010a8:	3e01      	subs	r6, #1
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x54>
 80010ae:	e0f7      	b.n	80012a0 <__aeabi_fsub+0x244>
 80010b0:	1a5b      	subs	r3, r3, r1
 80010b2:	015a      	lsls	r2, r3, #5
 80010b4:	d400      	bmi.n	80010b8 <__aeabi_fsub+0x5c>
 80010b6:	e08b      	b.n	80011d0 <__aeabi_fsub+0x174>
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	099c      	lsrs	r4, r3, #6
 80010bc:	0020      	movs	r0, r4
 80010be:	f001 ffbd 	bl	800303c <__clzsi2>
 80010c2:	3805      	subs	r0, #5
 80010c4:	4084      	lsls	r4, r0
 80010c6:	4285      	cmp	r5, r0
 80010c8:	dd00      	ble.n	80010cc <__aeabi_fsub+0x70>
 80010ca:	e0d3      	b.n	8001274 <__aeabi_fsub+0x218>
 80010cc:	1b45      	subs	r5, r0, r5
 80010ce:	0023      	movs	r3, r4
 80010d0:	2020      	movs	r0, #32
 80010d2:	3501      	adds	r5, #1
 80010d4:	40eb      	lsrs	r3, r5
 80010d6:	1b45      	subs	r5, r0, r5
 80010d8:	40ac      	lsls	r4, r5
 80010da:	1e62      	subs	r2, r4, #1
 80010dc:	4194      	sbcs	r4, r2
 80010de:	4323      	orrs	r3, r4
 80010e0:	2407      	movs	r4, #7
 80010e2:	2500      	movs	r5, #0
 80010e4:	401c      	ands	r4, r3
 80010e6:	2201      	movs	r2, #1
 80010e8:	4641      	mov	r1, r8
 80010ea:	400a      	ands	r2, r1
 80010ec:	2c00      	cmp	r4, #0
 80010ee:	d004      	beq.n	80010fa <__aeabi_fsub+0x9e>
 80010f0:	210f      	movs	r1, #15
 80010f2:	4019      	ands	r1, r3
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d000      	beq.n	80010fa <__aeabi_fsub+0x9e>
 80010f8:	3304      	adds	r3, #4
 80010fa:	0159      	lsls	r1, r3, #5
 80010fc:	d400      	bmi.n	8001100 <__aeabi_fsub+0xa4>
 80010fe:	e080      	b.n	8001202 <__aeabi_fsub+0x1a6>
 8001100:	3501      	adds	r5, #1
 8001102:	b2ec      	uxtb	r4, r5
 8001104:	2dff      	cmp	r5, #255	; 0xff
 8001106:	d000      	beq.n	800110a <__aeabi_fsub+0xae>
 8001108:	e0a3      	b.n	8001252 <__aeabi_fsub+0x1f6>
 800110a:	24ff      	movs	r4, #255	; 0xff
 800110c:	2300      	movs	r3, #0
 800110e:	025b      	lsls	r3, r3, #9
 8001110:	05e4      	lsls	r4, r4, #23
 8001112:	0a58      	lsrs	r0, r3, #9
 8001114:	07d2      	lsls	r2, r2, #31
 8001116:	4320      	orrs	r0, r4
 8001118:	4310      	orrs	r0, r2
 800111a:	bc0c      	pop	{r2, r3}
 800111c:	4690      	mov	r8, r2
 800111e:	4699      	mov	r9, r3
 8001120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001122:	2e00      	cmp	r6, #0
 8001124:	d174      	bne.n	8001210 <__aeabi_fsub+0x1b4>
 8001126:	1c60      	adds	r0, r4, #1
 8001128:	b2c0      	uxtb	r0, r0
 800112a:	2801      	cmp	r0, #1
 800112c:	dc00      	bgt.n	8001130 <__aeabi_fsub+0xd4>
 800112e:	e0a7      	b.n	8001280 <__aeabi_fsub+0x224>
 8001130:	464a      	mov	r2, r9
 8001132:	1a9c      	subs	r4, r3, r2
 8001134:	0162      	lsls	r2, r4, #5
 8001136:	d500      	bpl.n	800113a <__aeabi_fsub+0xde>
 8001138:	e0b6      	b.n	80012a8 <__aeabi_fsub+0x24c>
 800113a:	2c00      	cmp	r4, #0
 800113c:	d1be      	bne.n	80010bc <__aeabi_fsub+0x60>
 800113e:	2200      	movs	r2, #0
 8001140:	2400      	movs	r4, #0
 8001142:	2300      	movs	r3, #0
 8001144:	e7e3      	b.n	800110e <__aeabi_fsub+0xb2>
 8001146:	2e00      	cmp	r6, #0
 8001148:	dc00      	bgt.n	800114c <__aeabi_fsub+0xf0>
 800114a:	e085      	b.n	8001258 <__aeabi_fsub+0x1fc>
 800114c:	2800      	cmp	r0, #0
 800114e:	d046      	beq.n	80011de <__aeabi_fsub+0x182>
 8001150:	2cff      	cmp	r4, #255	; 0xff
 8001152:	d049      	beq.n	80011e8 <__aeabi_fsub+0x18c>
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	4648      	mov	r0, r9
 8001158:	04d2      	lsls	r2, r2, #19
 800115a:	4310      	orrs	r0, r2
 800115c:	4681      	mov	r9, r0
 800115e:	2201      	movs	r2, #1
 8001160:	2e1b      	cmp	r6, #27
 8001162:	dc09      	bgt.n	8001178 <__aeabi_fsub+0x11c>
 8001164:	2020      	movs	r0, #32
 8001166:	464c      	mov	r4, r9
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	4084      	lsls	r4, r0
 800116c:	464a      	mov	r2, r9
 800116e:	0020      	movs	r0, r4
 8001170:	40f2      	lsrs	r2, r6
 8001172:	1e44      	subs	r4, r0, #1
 8001174:	41a0      	sbcs	r0, r4
 8001176:	4302      	orrs	r2, r0
 8001178:	189b      	adds	r3, r3, r2
 800117a:	015a      	lsls	r2, r3, #5
 800117c:	d528      	bpl.n	80011d0 <__aeabi_fsub+0x174>
 800117e:	3501      	adds	r5, #1
 8001180:	2dff      	cmp	r5, #255	; 0xff
 8001182:	d100      	bne.n	8001186 <__aeabi_fsub+0x12a>
 8001184:	e0a8      	b.n	80012d8 <__aeabi_fsub+0x27c>
 8001186:	2201      	movs	r2, #1
 8001188:	2407      	movs	r4, #7
 800118a:	4994      	ldr	r1, [pc, #592]	; (80013dc <__aeabi_fsub+0x380>)
 800118c:	401a      	ands	r2, r3
 800118e:	085b      	lsrs	r3, r3, #1
 8001190:	400b      	ands	r3, r1
 8001192:	4313      	orrs	r3, r2
 8001194:	401c      	ands	r4, r3
 8001196:	e7a6      	b.n	80010e6 <__aeabi_fsub+0x8a>
 8001198:	2e00      	cmp	r6, #0
 800119a:	d000      	beq.n	800119e <__aeabi_fsub+0x142>
 800119c:	e778      	b.n	8001090 <__aeabi_fsub+0x34>
 800119e:	e775      	b.n	800108c <__aeabi_fsub+0x30>
 80011a0:	2cff      	cmp	r4, #255	; 0xff
 80011a2:	d054      	beq.n	800124e <__aeabi_fsub+0x1f2>
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	4649      	mov	r1, r9
 80011a8:	04d2      	lsls	r2, r2, #19
 80011aa:	4311      	orrs	r1, r2
 80011ac:	4689      	mov	r9, r1
 80011ae:	2201      	movs	r2, #1
 80011b0:	2e1b      	cmp	r6, #27
 80011b2:	dc09      	bgt.n	80011c8 <__aeabi_fsub+0x16c>
 80011b4:	2120      	movs	r1, #32
 80011b6:	4648      	mov	r0, r9
 80011b8:	1b89      	subs	r1, r1, r6
 80011ba:	4088      	lsls	r0, r1
 80011bc:	464a      	mov	r2, r9
 80011be:	0001      	movs	r1, r0
 80011c0:	40f2      	lsrs	r2, r6
 80011c2:	1e48      	subs	r0, r1, #1
 80011c4:	4181      	sbcs	r1, r0
 80011c6:	430a      	orrs	r2, r1
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	015a      	lsls	r2, r3, #5
 80011cc:	d500      	bpl.n	80011d0 <__aeabi_fsub+0x174>
 80011ce:	e773      	b.n	80010b8 <__aeabi_fsub+0x5c>
 80011d0:	2201      	movs	r2, #1
 80011d2:	4641      	mov	r1, r8
 80011d4:	400a      	ands	r2, r1
 80011d6:	0759      	lsls	r1, r3, #29
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x180>
 80011da:	e789      	b.n	80010f0 <__aeabi_fsub+0x94>
 80011dc:	e011      	b.n	8001202 <__aeabi_fsub+0x1a6>
 80011de:	4648      	mov	r0, r9
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d158      	bne.n	8001296 <__aeabi_fsub+0x23a>
 80011e4:	2cff      	cmp	r4, #255	; 0xff
 80011e6:	d10c      	bne.n	8001202 <__aeabi_fsub+0x1a6>
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_fsub+0x194>
 80011ee:	e78c      	b.n	800110a <__aeabi_fsub+0xae>
 80011f0:	2080      	movs	r0, #128	; 0x80
 80011f2:	03c0      	lsls	r0, r0, #15
 80011f4:	4303      	orrs	r3, r0
 80011f6:	025b      	lsls	r3, r3, #9
 80011f8:	0a5b      	lsrs	r3, r3, #9
 80011fa:	24ff      	movs	r4, #255	; 0xff
 80011fc:	e787      	b.n	800110e <__aeabi_fsub+0xb2>
 80011fe:	2cff      	cmp	r4, #255	; 0xff
 8001200:	d025      	beq.n	800124e <__aeabi_fsub+0x1f2>
 8001202:	08db      	lsrs	r3, r3, #3
 8001204:	2dff      	cmp	r5, #255	; 0xff
 8001206:	d0f0      	beq.n	80011ea <__aeabi_fsub+0x18e>
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	0a5b      	lsrs	r3, r3, #9
 800120c:	b2ec      	uxtb	r4, r5
 800120e:	e77e      	b.n	800110e <__aeabi_fsub+0xb2>
 8001210:	2c00      	cmp	r4, #0
 8001212:	d04d      	beq.n	80012b0 <__aeabi_fsub+0x254>
 8001214:	28ff      	cmp	r0, #255	; 0xff
 8001216:	d018      	beq.n	800124a <__aeabi_fsub+0x1ee>
 8001218:	2480      	movs	r4, #128	; 0x80
 800121a:	04e4      	lsls	r4, r4, #19
 800121c:	4272      	negs	r2, r6
 800121e:	4323      	orrs	r3, r4
 8001220:	2a1b      	cmp	r2, #27
 8001222:	dd00      	ble.n	8001226 <__aeabi_fsub+0x1ca>
 8001224:	e0c4      	b.n	80013b0 <__aeabi_fsub+0x354>
 8001226:	001c      	movs	r4, r3
 8001228:	2520      	movs	r5, #32
 800122a:	40d4      	lsrs	r4, r2
 800122c:	1aaa      	subs	r2, r5, r2
 800122e:	4093      	lsls	r3, r2
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	4193      	sbcs	r3, r2
 8001234:	4323      	orrs	r3, r4
 8001236:	464a      	mov	r2, r9
 8001238:	0005      	movs	r5, r0
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	4688      	mov	r8, r1
 800123e:	e738      	b.n	80010b2 <__aeabi_fsub+0x56>
 8001240:	1c72      	adds	r2, r6, #1
 8001242:	d0f8      	beq.n	8001236 <__aeabi_fsub+0x1da>
 8001244:	43f2      	mvns	r2, r6
 8001246:	28ff      	cmp	r0, #255	; 0xff
 8001248:	d1ea      	bne.n	8001220 <__aeabi_fsub+0x1c4>
 800124a:	000a      	movs	r2, r1
 800124c:	464b      	mov	r3, r9
 800124e:	25ff      	movs	r5, #255	; 0xff
 8001250:	e7d7      	b.n	8001202 <__aeabi_fsub+0x1a6>
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	0a5b      	lsrs	r3, r3, #9
 8001256:	e75a      	b.n	800110e <__aeabi_fsub+0xb2>
 8001258:	2e00      	cmp	r6, #0
 800125a:	d141      	bne.n	80012e0 <__aeabi_fsub+0x284>
 800125c:	1c65      	adds	r5, r4, #1
 800125e:	b2e9      	uxtb	r1, r5
 8001260:	2901      	cmp	r1, #1
 8001262:	dd45      	ble.n	80012f0 <__aeabi_fsub+0x294>
 8001264:	2dff      	cmp	r5, #255	; 0xff
 8001266:	d100      	bne.n	800126a <__aeabi_fsub+0x20e>
 8001268:	e74f      	b.n	800110a <__aeabi_fsub+0xae>
 800126a:	2407      	movs	r4, #7
 800126c:	444b      	add	r3, r9
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	401c      	ands	r4, r3
 8001272:	e738      	b.n	80010e6 <__aeabi_fsub+0x8a>
 8001274:	2207      	movs	r2, #7
 8001276:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <__aeabi_fsub+0x384>)
 8001278:	1a2d      	subs	r5, r5, r0
 800127a:	4023      	ands	r3, r4
 800127c:	4014      	ands	r4, r2
 800127e:	e732      	b.n	80010e6 <__aeabi_fsub+0x8a>
 8001280:	2c00      	cmp	r4, #0
 8001282:	d11d      	bne.n	80012c0 <__aeabi_fsub+0x264>
 8001284:	2b00      	cmp	r3, #0
 8001286:	d17a      	bne.n	800137e <__aeabi_fsub+0x322>
 8001288:	464b      	mov	r3, r9
 800128a:	2b00      	cmp	r3, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_fsub+0x234>
 800128e:	e091      	b.n	80013b4 <__aeabi_fsub+0x358>
 8001290:	000a      	movs	r2, r1
 8001292:	2500      	movs	r5, #0
 8001294:	e7b5      	b.n	8001202 <__aeabi_fsub+0x1a6>
 8001296:	3e01      	subs	r6, #1
 8001298:	2e00      	cmp	r6, #0
 800129a:	d119      	bne.n	80012d0 <__aeabi_fsub+0x274>
 800129c:	444b      	add	r3, r9
 800129e:	e76c      	b.n	800117a <__aeabi_fsub+0x11e>
 80012a0:	2cff      	cmp	r4, #255	; 0xff
 80012a2:	d184      	bne.n	80011ae <__aeabi_fsub+0x152>
 80012a4:	25ff      	movs	r5, #255	; 0xff
 80012a6:	e7ac      	b.n	8001202 <__aeabi_fsub+0x1a6>
 80012a8:	464a      	mov	r2, r9
 80012aa:	4688      	mov	r8, r1
 80012ac:	1ad4      	subs	r4, r2, r3
 80012ae:	e705      	b.n	80010bc <__aeabi_fsub+0x60>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1c5      	bne.n	8001240 <__aeabi_fsub+0x1e4>
 80012b4:	000a      	movs	r2, r1
 80012b6:	28ff      	cmp	r0, #255	; 0xff
 80012b8:	d0c8      	beq.n	800124c <__aeabi_fsub+0x1f0>
 80012ba:	0005      	movs	r5, r0
 80012bc:	464b      	mov	r3, r9
 80012be:	e7a0      	b.n	8001202 <__aeabi_fsub+0x1a6>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d149      	bne.n	8001358 <__aeabi_fsub+0x2fc>
 80012c4:	464b      	mov	r3, r9
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d077      	beq.n	80013ba <__aeabi_fsub+0x35e>
 80012ca:	000a      	movs	r2, r1
 80012cc:	25ff      	movs	r5, #255	; 0xff
 80012ce:	e798      	b.n	8001202 <__aeabi_fsub+0x1a6>
 80012d0:	2cff      	cmp	r4, #255	; 0xff
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x27a>
 80012d4:	e743      	b.n	800115e <__aeabi_fsub+0x102>
 80012d6:	e787      	b.n	80011e8 <__aeabi_fsub+0x18c>
 80012d8:	000a      	movs	r2, r1
 80012da:	24ff      	movs	r4, #255	; 0xff
 80012dc:	2300      	movs	r3, #0
 80012de:	e716      	b.n	800110e <__aeabi_fsub+0xb2>
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d115      	bne.n	8001310 <__aeabi_fsub+0x2b4>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d157      	bne.n	8001398 <__aeabi_fsub+0x33c>
 80012e8:	28ff      	cmp	r0, #255	; 0xff
 80012ea:	d1e6      	bne.n	80012ba <__aeabi_fsub+0x25e>
 80012ec:	464b      	mov	r3, r9
 80012ee:	e77b      	b.n	80011e8 <__aeabi_fsub+0x18c>
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d120      	bne.n	8001336 <__aeabi_fsub+0x2da>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d057      	beq.n	80013a8 <__aeabi_fsub+0x34c>
 80012f8:	4649      	mov	r1, r9
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d053      	beq.n	80013a6 <__aeabi_fsub+0x34a>
 80012fe:	444b      	add	r3, r9
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	d568      	bpl.n	80013d6 <__aeabi_fsub+0x37a>
 8001304:	2407      	movs	r4, #7
 8001306:	4a36      	ldr	r2, [pc, #216]	; (80013e0 <__aeabi_fsub+0x384>)
 8001308:	401c      	ands	r4, r3
 800130a:	2501      	movs	r5, #1
 800130c:	4013      	ands	r3, r2
 800130e:	e6ea      	b.n	80010e6 <__aeabi_fsub+0x8a>
 8001310:	28ff      	cmp	r0, #255	; 0xff
 8001312:	d0eb      	beq.n	80012ec <__aeabi_fsub+0x290>
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	04d2      	lsls	r2, r2, #19
 8001318:	4276      	negs	r6, r6
 800131a:	4313      	orrs	r3, r2
 800131c:	2e1b      	cmp	r6, #27
 800131e:	dc53      	bgt.n	80013c8 <__aeabi_fsub+0x36c>
 8001320:	2520      	movs	r5, #32
 8001322:	1bad      	subs	r5, r5, r6
 8001324:	001a      	movs	r2, r3
 8001326:	40ab      	lsls	r3, r5
 8001328:	40f2      	lsrs	r2, r6
 800132a:	1e5c      	subs	r4, r3, #1
 800132c:	41a3      	sbcs	r3, r4
 800132e:	4313      	orrs	r3, r2
 8001330:	444b      	add	r3, r9
 8001332:	0005      	movs	r5, r0
 8001334:	e721      	b.n	800117a <__aeabi_fsub+0x11e>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0d8      	beq.n	80012ec <__aeabi_fsub+0x290>
 800133a:	4649      	mov	r1, r9
 800133c:	2900      	cmp	r1, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_fsub+0x2e6>
 8001340:	e752      	b.n	80011e8 <__aeabi_fsub+0x18c>
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	03c9      	lsls	r1, r1, #15
 8001346:	420f      	tst	r7, r1
 8001348:	d100      	bne.n	800134c <__aeabi_fsub+0x2f0>
 800134a:	e74d      	b.n	80011e8 <__aeabi_fsub+0x18c>
 800134c:	4660      	mov	r0, ip
 800134e:	4208      	tst	r0, r1
 8001350:	d000      	beq.n	8001354 <__aeabi_fsub+0x2f8>
 8001352:	e749      	b.n	80011e8 <__aeabi_fsub+0x18c>
 8001354:	464b      	mov	r3, r9
 8001356:	e747      	b.n	80011e8 <__aeabi_fsub+0x18c>
 8001358:	4648      	mov	r0, r9
 800135a:	25ff      	movs	r5, #255	; 0xff
 800135c:	2800      	cmp	r0, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x306>
 8001360:	e74f      	b.n	8001202 <__aeabi_fsub+0x1a6>
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	03d2      	lsls	r2, r2, #15
 8001366:	4217      	tst	r7, r2
 8001368:	d004      	beq.n	8001374 <__aeabi_fsub+0x318>
 800136a:	4660      	mov	r0, ip
 800136c:	4210      	tst	r0, r2
 800136e:	d101      	bne.n	8001374 <__aeabi_fsub+0x318>
 8001370:	464b      	mov	r3, r9
 8001372:	4688      	mov	r8, r1
 8001374:	2201      	movs	r2, #1
 8001376:	4641      	mov	r1, r8
 8001378:	25ff      	movs	r5, #255	; 0xff
 800137a:	400a      	ands	r2, r1
 800137c:	e741      	b.n	8001202 <__aeabi_fsub+0x1a6>
 800137e:	4648      	mov	r0, r9
 8001380:	2800      	cmp	r0, #0
 8001382:	d01f      	beq.n	80013c4 <__aeabi_fsub+0x368>
 8001384:	1a1a      	subs	r2, r3, r0
 8001386:	0150      	lsls	r0, r2, #5
 8001388:	d520      	bpl.n	80013cc <__aeabi_fsub+0x370>
 800138a:	464a      	mov	r2, r9
 800138c:	2407      	movs	r4, #7
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	401c      	ands	r4, r3
 8001392:	4688      	mov	r8, r1
 8001394:	2500      	movs	r5, #0
 8001396:	e6a6      	b.n	80010e6 <__aeabi_fsub+0x8a>
 8001398:	1c74      	adds	r4, r6, #1
 800139a:	d0c9      	beq.n	8001330 <__aeabi_fsub+0x2d4>
 800139c:	43f6      	mvns	r6, r6
 800139e:	28ff      	cmp	r0, #255	; 0xff
 80013a0:	d1bc      	bne.n	800131c <__aeabi_fsub+0x2c0>
 80013a2:	464b      	mov	r3, r9
 80013a4:	e720      	b.n	80011e8 <__aeabi_fsub+0x18c>
 80013a6:	4699      	mov	r9, r3
 80013a8:	464b      	mov	r3, r9
 80013aa:	2500      	movs	r5, #0
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	e72b      	b.n	8001208 <__aeabi_fsub+0x1ac>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e740      	b.n	8001236 <__aeabi_fsub+0x1da>
 80013b4:	2200      	movs	r2, #0
 80013b6:	2300      	movs	r3, #0
 80013b8:	e6a9      	b.n	800110e <__aeabi_fsub+0xb2>
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	2200      	movs	r2, #0
 80013be:	03db      	lsls	r3, r3, #15
 80013c0:	24ff      	movs	r4, #255	; 0xff
 80013c2:	e6a4      	b.n	800110e <__aeabi_fsub+0xb2>
 80013c4:	2500      	movs	r5, #0
 80013c6:	e71c      	b.n	8001202 <__aeabi_fsub+0x1a6>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e7b1      	b.n	8001330 <__aeabi_fsub+0x2d4>
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d0f1      	beq.n	80013b4 <__aeabi_fsub+0x358>
 80013d0:	0013      	movs	r3, r2
 80013d2:	2500      	movs	r5, #0
 80013d4:	e6fc      	b.n	80011d0 <__aeabi_fsub+0x174>
 80013d6:	2500      	movs	r5, #0
 80013d8:	e6fa      	b.n	80011d0 <__aeabi_fsub+0x174>
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	7dffffff 	.word	0x7dffffff
 80013e0:	fbffffff 	.word	0xfbffffff

080013e4 <__aeabi_f2iz>:
 80013e4:	0241      	lsls	r1, r0, #9
 80013e6:	0042      	lsls	r2, r0, #1
 80013e8:	0fc3      	lsrs	r3, r0, #31
 80013ea:	0a49      	lsrs	r1, r1, #9
 80013ec:	0e12      	lsrs	r2, r2, #24
 80013ee:	2000      	movs	r0, #0
 80013f0:	2a7e      	cmp	r2, #126	; 0x7e
 80013f2:	d90d      	bls.n	8001410 <__aeabi_f2iz+0x2c>
 80013f4:	2a9d      	cmp	r2, #157	; 0x9d
 80013f6:	d80c      	bhi.n	8001412 <__aeabi_f2iz+0x2e>
 80013f8:	2080      	movs	r0, #128	; 0x80
 80013fa:	0400      	lsls	r0, r0, #16
 80013fc:	4301      	orrs	r1, r0
 80013fe:	2a95      	cmp	r2, #149	; 0x95
 8001400:	dc0a      	bgt.n	8001418 <__aeabi_f2iz+0x34>
 8001402:	2096      	movs	r0, #150	; 0x96
 8001404:	1a82      	subs	r2, r0, r2
 8001406:	40d1      	lsrs	r1, r2
 8001408:	4248      	negs	r0, r1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_f2iz+0x2c>
 800140e:	0008      	movs	r0, r1
 8001410:	4770      	bx	lr
 8001412:	4a03      	ldr	r2, [pc, #12]	; (8001420 <__aeabi_f2iz+0x3c>)
 8001414:	1898      	adds	r0, r3, r2
 8001416:	e7fb      	b.n	8001410 <__aeabi_f2iz+0x2c>
 8001418:	3a96      	subs	r2, #150	; 0x96
 800141a:	4091      	lsls	r1, r2
 800141c:	e7f4      	b.n	8001408 <__aeabi_f2iz+0x24>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	7fffffff 	.word	0x7fffffff

08001424 <__aeabi_i2f>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	2800      	cmp	r0, #0
 8001428:	d03d      	beq.n	80014a6 <__aeabi_i2f+0x82>
 800142a:	17c3      	asrs	r3, r0, #31
 800142c:	18c5      	adds	r5, r0, r3
 800142e:	405d      	eors	r5, r3
 8001430:	0fc4      	lsrs	r4, r0, #31
 8001432:	0028      	movs	r0, r5
 8001434:	f001 fe02 	bl	800303c <__clzsi2>
 8001438:	229e      	movs	r2, #158	; 0x9e
 800143a:	1a12      	subs	r2, r2, r0
 800143c:	2a96      	cmp	r2, #150	; 0x96
 800143e:	dc07      	bgt.n	8001450 <__aeabi_i2f+0x2c>
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	2808      	cmp	r0, #8
 8001444:	dd33      	ble.n	80014ae <__aeabi_i2f+0x8a>
 8001446:	3808      	subs	r0, #8
 8001448:	4085      	lsls	r5, r0
 800144a:	0268      	lsls	r0, r5, #9
 800144c:	0a40      	lsrs	r0, r0, #9
 800144e:	e023      	b.n	8001498 <__aeabi_i2f+0x74>
 8001450:	2a99      	cmp	r2, #153	; 0x99
 8001452:	dd0b      	ble.n	800146c <__aeabi_i2f+0x48>
 8001454:	2305      	movs	r3, #5
 8001456:	0029      	movs	r1, r5
 8001458:	1a1b      	subs	r3, r3, r0
 800145a:	40d9      	lsrs	r1, r3
 800145c:	0003      	movs	r3, r0
 800145e:	331b      	adds	r3, #27
 8001460:	409d      	lsls	r5, r3
 8001462:	002b      	movs	r3, r5
 8001464:	1e5d      	subs	r5, r3, #1
 8001466:	41ab      	sbcs	r3, r5
 8001468:	4319      	orrs	r1, r3
 800146a:	000d      	movs	r5, r1
 800146c:	2805      	cmp	r0, #5
 800146e:	dd01      	ble.n	8001474 <__aeabi_i2f+0x50>
 8001470:	1f43      	subs	r3, r0, #5
 8001472:	409d      	lsls	r5, r3
 8001474:	002b      	movs	r3, r5
 8001476:	490f      	ldr	r1, [pc, #60]	; (80014b4 <__aeabi_i2f+0x90>)
 8001478:	400b      	ands	r3, r1
 800147a:	076e      	lsls	r6, r5, #29
 800147c:	d009      	beq.n	8001492 <__aeabi_i2f+0x6e>
 800147e:	260f      	movs	r6, #15
 8001480:	4035      	ands	r5, r6
 8001482:	2d04      	cmp	r5, #4
 8001484:	d005      	beq.n	8001492 <__aeabi_i2f+0x6e>
 8001486:	3304      	adds	r3, #4
 8001488:	015d      	lsls	r5, r3, #5
 800148a:	d502      	bpl.n	8001492 <__aeabi_i2f+0x6e>
 800148c:	229f      	movs	r2, #159	; 0x9f
 800148e:	400b      	ands	r3, r1
 8001490:	1a12      	subs	r2, r2, r0
 8001492:	019b      	lsls	r3, r3, #6
 8001494:	0a58      	lsrs	r0, r3, #9
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	0240      	lsls	r0, r0, #9
 800149a:	05d2      	lsls	r2, r2, #23
 800149c:	0a40      	lsrs	r0, r0, #9
 800149e:	07e4      	lsls	r4, r4, #31
 80014a0:	4310      	orrs	r0, r2
 80014a2:	4320      	orrs	r0, r4
 80014a4:	bd70      	pop	{r4, r5, r6, pc}
 80014a6:	2400      	movs	r4, #0
 80014a8:	2200      	movs	r2, #0
 80014aa:	2000      	movs	r0, #0
 80014ac:	e7f4      	b.n	8001498 <__aeabi_i2f+0x74>
 80014ae:	0268      	lsls	r0, r5, #9
 80014b0:	0a40      	lsrs	r0, r0, #9
 80014b2:	e7f1      	b.n	8001498 <__aeabi_i2f+0x74>
 80014b4:	fbffffff 	.word	0xfbffffff

080014b8 <__aeabi_ui2f>:
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	1e04      	subs	r4, r0, #0
 80014bc:	d034      	beq.n	8001528 <__aeabi_ui2f+0x70>
 80014be:	f001 fdbd 	bl	800303c <__clzsi2>
 80014c2:	229e      	movs	r2, #158	; 0x9e
 80014c4:	1a12      	subs	r2, r2, r0
 80014c6:	2a96      	cmp	r2, #150	; 0x96
 80014c8:	dc07      	bgt.n	80014da <__aeabi_ui2f+0x22>
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	2808      	cmp	r0, #8
 80014ce:	dd2e      	ble.n	800152e <__aeabi_ui2f+0x76>
 80014d0:	3808      	subs	r0, #8
 80014d2:	4084      	lsls	r4, r0
 80014d4:	0260      	lsls	r0, r4, #9
 80014d6:	0a40      	lsrs	r0, r0, #9
 80014d8:	e021      	b.n	800151e <__aeabi_ui2f+0x66>
 80014da:	2a99      	cmp	r2, #153	; 0x99
 80014dc:	dd09      	ble.n	80014f2 <__aeabi_ui2f+0x3a>
 80014de:	0003      	movs	r3, r0
 80014e0:	0021      	movs	r1, r4
 80014e2:	331b      	adds	r3, #27
 80014e4:	4099      	lsls	r1, r3
 80014e6:	1e4b      	subs	r3, r1, #1
 80014e8:	4199      	sbcs	r1, r3
 80014ea:	2305      	movs	r3, #5
 80014ec:	1a1b      	subs	r3, r3, r0
 80014ee:	40dc      	lsrs	r4, r3
 80014f0:	430c      	orrs	r4, r1
 80014f2:	2805      	cmp	r0, #5
 80014f4:	dd01      	ble.n	80014fa <__aeabi_ui2f+0x42>
 80014f6:	1f43      	subs	r3, r0, #5
 80014f8:	409c      	lsls	r4, r3
 80014fa:	0023      	movs	r3, r4
 80014fc:	490d      	ldr	r1, [pc, #52]	; (8001534 <__aeabi_ui2f+0x7c>)
 80014fe:	400b      	ands	r3, r1
 8001500:	0765      	lsls	r5, r4, #29
 8001502:	d009      	beq.n	8001518 <__aeabi_ui2f+0x60>
 8001504:	250f      	movs	r5, #15
 8001506:	402c      	ands	r4, r5
 8001508:	2c04      	cmp	r4, #4
 800150a:	d005      	beq.n	8001518 <__aeabi_ui2f+0x60>
 800150c:	3304      	adds	r3, #4
 800150e:	015c      	lsls	r4, r3, #5
 8001510:	d502      	bpl.n	8001518 <__aeabi_ui2f+0x60>
 8001512:	229f      	movs	r2, #159	; 0x9f
 8001514:	400b      	ands	r3, r1
 8001516:	1a12      	subs	r2, r2, r0
 8001518:	019b      	lsls	r3, r3, #6
 800151a:	0a58      	lsrs	r0, r3, #9
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	0240      	lsls	r0, r0, #9
 8001520:	05d2      	lsls	r2, r2, #23
 8001522:	0a40      	lsrs	r0, r0, #9
 8001524:	4310      	orrs	r0, r2
 8001526:	bd70      	pop	{r4, r5, r6, pc}
 8001528:	2200      	movs	r2, #0
 800152a:	2000      	movs	r0, #0
 800152c:	e7f7      	b.n	800151e <__aeabi_ui2f+0x66>
 800152e:	0260      	lsls	r0, r4, #9
 8001530:	0a40      	lsrs	r0, r0, #9
 8001532:	e7f4      	b.n	800151e <__aeabi_ui2f+0x66>
 8001534:	fbffffff 	.word	0xfbffffff

08001538 <__aeabi_dadd>:
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	464f      	mov	r7, r9
 800153c:	4646      	mov	r6, r8
 800153e:	46d6      	mov	lr, sl
 8001540:	000c      	movs	r4, r1
 8001542:	0309      	lsls	r1, r1, #12
 8001544:	b5c0      	push	{r6, r7, lr}
 8001546:	0a49      	lsrs	r1, r1, #9
 8001548:	0f47      	lsrs	r7, r0, #29
 800154a:	005e      	lsls	r6, r3, #1
 800154c:	4339      	orrs	r1, r7
 800154e:	031f      	lsls	r7, r3, #12
 8001550:	0fdb      	lsrs	r3, r3, #31
 8001552:	469c      	mov	ip, r3
 8001554:	0065      	lsls	r5, r4, #1
 8001556:	0a7b      	lsrs	r3, r7, #9
 8001558:	0f57      	lsrs	r7, r2, #29
 800155a:	431f      	orrs	r7, r3
 800155c:	0d6d      	lsrs	r5, r5, #21
 800155e:	0fe4      	lsrs	r4, r4, #31
 8001560:	0d76      	lsrs	r6, r6, #21
 8001562:	46a1      	mov	r9, r4
 8001564:	00c0      	lsls	r0, r0, #3
 8001566:	46b8      	mov	r8, r7
 8001568:	00d2      	lsls	r2, r2, #3
 800156a:	1bab      	subs	r3, r5, r6
 800156c:	4564      	cmp	r4, ip
 800156e:	d07b      	beq.n	8001668 <__aeabi_dadd+0x130>
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd5f      	ble.n	8001634 <__aeabi_dadd+0xfc>
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x42>
 8001578:	e0a4      	b.n	80016c4 <__aeabi_dadd+0x18c>
 800157a:	003e      	movs	r6, r7
 800157c:	4316      	orrs	r6, r2
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x4a>
 8001580:	e112      	b.n	80017a8 <__aeabi_dadd+0x270>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2e00      	cmp	r6, #0
 8001586:	d000      	beq.n	800158a <__aeabi_dadd+0x52>
 8001588:	e19e      	b.n	80018c8 <__aeabi_dadd+0x390>
 800158a:	1a87      	subs	r7, r0, r2
 800158c:	4643      	mov	r3, r8
 800158e:	42b8      	cmp	r0, r7
 8001590:	4180      	sbcs	r0, r0
 8001592:	2501      	movs	r5, #1
 8001594:	1ac9      	subs	r1, r1, r3
 8001596:	4240      	negs	r0, r0
 8001598:	1a09      	subs	r1, r1, r0
 800159a:	020b      	lsls	r3, r1, #8
 800159c:	d400      	bmi.n	80015a0 <__aeabi_dadd+0x68>
 800159e:	e131      	b.n	8001804 <__aeabi_dadd+0x2cc>
 80015a0:	0249      	lsls	r1, r1, #9
 80015a2:	0a4e      	lsrs	r6, r1, #9
 80015a4:	2e00      	cmp	r6, #0
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x72>
 80015a8:	e16e      	b.n	8001888 <__aeabi_dadd+0x350>
 80015aa:	0030      	movs	r0, r6
 80015ac:	f001 fd46 	bl	800303c <__clzsi2>
 80015b0:	0003      	movs	r3, r0
 80015b2:	3b08      	subs	r3, #8
 80015b4:	2b1f      	cmp	r3, #31
 80015b6:	dd00      	ble.n	80015ba <__aeabi_dadd+0x82>
 80015b8:	e161      	b.n	800187e <__aeabi_dadd+0x346>
 80015ba:	2220      	movs	r2, #32
 80015bc:	0039      	movs	r1, r7
 80015be:	1ad2      	subs	r2, r2, r3
 80015c0:	409e      	lsls	r6, r3
 80015c2:	40d1      	lsrs	r1, r2
 80015c4:	409f      	lsls	r7, r3
 80015c6:	430e      	orrs	r6, r1
 80015c8:	429d      	cmp	r5, r3
 80015ca:	dd00      	ble.n	80015ce <__aeabi_dadd+0x96>
 80015cc:	e151      	b.n	8001872 <__aeabi_dadd+0x33a>
 80015ce:	1b5d      	subs	r5, r3, r5
 80015d0:	1c6b      	adds	r3, r5, #1
 80015d2:	2b1f      	cmp	r3, #31
 80015d4:	dd00      	ble.n	80015d8 <__aeabi_dadd+0xa0>
 80015d6:	e17c      	b.n	80018d2 <__aeabi_dadd+0x39a>
 80015d8:	2120      	movs	r1, #32
 80015da:	1ac9      	subs	r1, r1, r3
 80015dc:	003d      	movs	r5, r7
 80015de:	0030      	movs	r0, r6
 80015e0:	408f      	lsls	r7, r1
 80015e2:	4088      	lsls	r0, r1
 80015e4:	40dd      	lsrs	r5, r3
 80015e6:	1e79      	subs	r1, r7, #1
 80015e8:	418f      	sbcs	r7, r1
 80015ea:	0031      	movs	r1, r6
 80015ec:	2207      	movs	r2, #7
 80015ee:	4328      	orrs	r0, r5
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	2500      	movs	r5, #0
 80015f4:	4307      	orrs	r7, r0
 80015f6:	403a      	ands	r2, r7
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	d009      	beq.n	8001610 <__aeabi_dadd+0xd8>
 80015fc:	230f      	movs	r3, #15
 80015fe:	403b      	ands	r3, r7
 8001600:	2b04      	cmp	r3, #4
 8001602:	d005      	beq.n	8001610 <__aeabi_dadd+0xd8>
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	42bb      	cmp	r3, r7
 8001608:	41bf      	sbcs	r7, r7
 800160a:	427f      	negs	r7, r7
 800160c:	19c9      	adds	r1, r1, r7
 800160e:	001f      	movs	r7, r3
 8001610:	020b      	lsls	r3, r1, #8
 8001612:	d400      	bmi.n	8001616 <__aeabi_dadd+0xde>
 8001614:	e226      	b.n	8001a64 <__aeabi_dadd+0x52c>
 8001616:	1c6a      	adds	r2, r5, #1
 8001618:	4bc6      	ldr	r3, [pc, #792]	; (8001934 <__aeabi_dadd+0x3fc>)
 800161a:	0555      	lsls	r5, r2, #21
 800161c:	0d6d      	lsrs	r5, r5, #21
 800161e:	429a      	cmp	r2, r3
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0xec>
 8001622:	e106      	b.n	8001832 <__aeabi_dadd+0x2fa>
 8001624:	4ac4      	ldr	r2, [pc, #784]	; (8001938 <__aeabi_dadd+0x400>)
 8001626:	08ff      	lsrs	r7, r7, #3
 8001628:	400a      	ands	r2, r1
 800162a:	0753      	lsls	r3, r2, #29
 800162c:	0252      	lsls	r2, r2, #9
 800162e:	433b      	orrs	r3, r7
 8001630:	0b12      	lsrs	r2, r2, #12
 8001632:	e08e      	b.n	8001752 <__aeabi_dadd+0x21a>
 8001634:	2b00      	cmp	r3, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x102>
 8001638:	e0b8      	b.n	80017ac <__aeabi_dadd+0x274>
 800163a:	1c6b      	adds	r3, r5, #1
 800163c:	055b      	lsls	r3, r3, #21
 800163e:	0d5b      	lsrs	r3, r3, #21
 8001640:	2b01      	cmp	r3, #1
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dadd+0x10e>
 8001644:	e130      	b.n	80018a8 <__aeabi_dadd+0x370>
 8001646:	1a87      	subs	r7, r0, r2
 8001648:	4643      	mov	r3, r8
 800164a:	42b8      	cmp	r0, r7
 800164c:	41b6      	sbcs	r6, r6
 800164e:	1acb      	subs	r3, r1, r3
 8001650:	4276      	negs	r6, r6
 8001652:	1b9e      	subs	r6, r3, r6
 8001654:	0233      	lsls	r3, r6, #8
 8001656:	d500      	bpl.n	800165a <__aeabi_dadd+0x122>
 8001658:	e14c      	b.n	80018f4 <__aeabi_dadd+0x3bc>
 800165a:	003b      	movs	r3, r7
 800165c:	4333      	orrs	r3, r6
 800165e:	d1a1      	bne.n	80015a4 <__aeabi_dadd+0x6c>
 8001660:	2200      	movs	r2, #0
 8001662:	2400      	movs	r4, #0
 8001664:	2500      	movs	r5, #0
 8001666:	e070      	b.n	800174a <__aeabi_dadd+0x212>
 8001668:	2b00      	cmp	r3, #0
 800166a:	dc00      	bgt.n	800166e <__aeabi_dadd+0x136>
 800166c:	e0e5      	b.n	800183a <__aeabi_dadd+0x302>
 800166e:	2e00      	cmp	r6, #0
 8001670:	d100      	bne.n	8001674 <__aeabi_dadd+0x13c>
 8001672:	e083      	b.n	800177c <__aeabi_dadd+0x244>
 8001674:	4eaf      	ldr	r6, [pc, #700]	; (8001934 <__aeabi_dadd+0x3fc>)
 8001676:	42b5      	cmp	r5, r6
 8001678:	d060      	beq.n	800173c <__aeabi_dadd+0x204>
 800167a:	2680      	movs	r6, #128	; 0x80
 800167c:	0436      	lsls	r6, r6, #16
 800167e:	4337      	orrs	r7, r6
 8001680:	46b8      	mov	r8, r7
 8001682:	2b38      	cmp	r3, #56	; 0x38
 8001684:	dc00      	bgt.n	8001688 <__aeabi_dadd+0x150>
 8001686:	e13e      	b.n	8001906 <__aeabi_dadd+0x3ce>
 8001688:	4643      	mov	r3, r8
 800168a:	4313      	orrs	r3, r2
 800168c:	001f      	movs	r7, r3
 800168e:	1e7a      	subs	r2, r7, #1
 8001690:	4197      	sbcs	r7, r2
 8001692:	183f      	adds	r7, r7, r0
 8001694:	4287      	cmp	r7, r0
 8001696:	4180      	sbcs	r0, r0
 8001698:	4240      	negs	r0, r0
 800169a:	1809      	adds	r1, r1, r0
 800169c:	020b      	lsls	r3, r1, #8
 800169e:	d400      	bmi.n	80016a2 <__aeabi_dadd+0x16a>
 80016a0:	e0b0      	b.n	8001804 <__aeabi_dadd+0x2cc>
 80016a2:	4ba4      	ldr	r3, [pc, #656]	; (8001934 <__aeabi_dadd+0x3fc>)
 80016a4:	3501      	adds	r5, #1
 80016a6:	429d      	cmp	r5, r3
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x174>
 80016aa:	e0c3      	b.n	8001834 <__aeabi_dadd+0x2fc>
 80016ac:	4aa2      	ldr	r2, [pc, #648]	; (8001938 <__aeabi_dadd+0x400>)
 80016ae:	087b      	lsrs	r3, r7, #1
 80016b0:	400a      	ands	r2, r1
 80016b2:	2101      	movs	r1, #1
 80016b4:	400f      	ands	r7, r1
 80016b6:	431f      	orrs	r7, r3
 80016b8:	0851      	lsrs	r1, r2, #1
 80016ba:	07d3      	lsls	r3, r2, #31
 80016bc:	2207      	movs	r2, #7
 80016be:	431f      	orrs	r7, r3
 80016c0:	403a      	ands	r2, r7
 80016c2:	e799      	b.n	80015f8 <__aeabi_dadd+0xc0>
 80016c4:	4e9b      	ldr	r6, [pc, #620]	; (8001934 <__aeabi_dadd+0x3fc>)
 80016c6:	42b5      	cmp	r5, r6
 80016c8:	d038      	beq.n	800173c <__aeabi_dadd+0x204>
 80016ca:	2680      	movs	r6, #128	; 0x80
 80016cc:	0436      	lsls	r6, r6, #16
 80016ce:	4337      	orrs	r7, r6
 80016d0:	46b8      	mov	r8, r7
 80016d2:	2b38      	cmp	r3, #56	; 0x38
 80016d4:	dd00      	ble.n	80016d8 <__aeabi_dadd+0x1a0>
 80016d6:	e0dc      	b.n	8001892 <__aeabi_dadd+0x35a>
 80016d8:	2b1f      	cmp	r3, #31
 80016da:	dc00      	bgt.n	80016de <__aeabi_dadd+0x1a6>
 80016dc:	e130      	b.n	8001940 <__aeabi_dadd+0x408>
 80016de:	001e      	movs	r6, r3
 80016e0:	4647      	mov	r7, r8
 80016e2:	3e20      	subs	r6, #32
 80016e4:	40f7      	lsrs	r7, r6
 80016e6:	46bc      	mov	ip, r7
 80016e8:	2b20      	cmp	r3, #32
 80016ea:	d004      	beq.n	80016f6 <__aeabi_dadd+0x1be>
 80016ec:	2640      	movs	r6, #64	; 0x40
 80016ee:	1af3      	subs	r3, r6, r3
 80016f0:	4646      	mov	r6, r8
 80016f2:	409e      	lsls	r6, r3
 80016f4:	4332      	orrs	r2, r6
 80016f6:	0017      	movs	r7, r2
 80016f8:	4663      	mov	r3, ip
 80016fa:	1e7a      	subs	r2, r7, #1
 80016fc:	4197      	sbcs	r7, r2
 80016fe:	431f      	orrs	r7, r3
 8001700:	e0cc      	b.n	800189c <__aeabi_dadd+0x364>
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <__aeabi_dadd+0x1d0>
 8001706:	e204      	b.n	8001b12 <__aeabi_dadd+0x5da>
 8001708:	4643      	mov	r3, r8
 800170a:	4313      	orrs	r3, r2
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x1d8>
 800170e:	e159      	b.n	80019c4 <__aeabi_dadd+0x48c>
 8001710:	074b      	lsls	r3, r1, #29
 8001712:	08c0      	lsrs	r0, r0, #3
 8001714:	4318      	orrs	r0, r3
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	08c9      	lsrs	r1, r1, #3
 800171a:	031b      	lsls	r3, r3, #12
 800171c:	4219      	tst	r1, r3
 800171e:	d008      	beq.n	8001732 <__aeabi_dadd+0x1fa>
 8001720:	4645      	mov	r5, r8
 8001722:	08ed      	lsrs	r5, r5, #3
 8001724:	421d      	tst	r5, r3
 8001726:	d104      	bne.n	8001732 <__aeabi_dadd+0x1fa>
 8001728:	4643      	mov	r3, r8
 800172a:	08d0      	lsrs	r0, r2, #3
 800172c:	0759      	lsls	r1, r3, #29
 800172e:	4308      	orrs	r0, r1
 8001730:	0029      	movs	r1, r5
 8001732:	0f42      	lsrs	r2, r0, #29
 8001734:	00c9      	lsls	r1, r1, #3
 8001736:	4d7f      	ldr	r5, [pc, #508]	; (8001934 <__aeabi_dadd+0x3fc>)
 8001738:	4311      	orrs	r1, r2
 800173a:	00c0      	lsls	r0, r0, #3
 800173c:	074b      	lsls	r3, r1, #29
 800173e:	08ca      	lsrs	r2, r1, #3
 8001740:	497c      	ldr	r1, [pc, #496]	; (8001934 <__aeabi_dadd+0x3fc>)
 8001742:	08c0      	lsrs	r0, r0, #3
 8001744:	4303      	orrs	r3, r0
 8001746:	428d      	cmp	r5, r1
 8001748:	d068      	beq.n	800181c <__aeabi_dadd+0x2e4>
 800174a:	0312      	lsls	r2, r2, #12
 800174c:	056d      	lsls	r5, r5, #21
 800174e:	0b12      	lsrs	r2, r2, #12
 8001750:	0d6d      	lsrs	r5, r5, #21
 8001752:	2100      	movs	r1, #0
 8001754:	0312      	lsls	r2, r2, #12
 8001756:	0018      	movs	r0, r3
 8001758:	0b13      	lsrs	r3, r2, #12
 800175a:	0d0a      	lsrs	r2, r1, #20
 800175c:	0512      	lsls	r2, r2, #20
 800175e:	431a      	orrs	r2, r3
 8001760:	4b76      	ldr	r3, [pc, #472]	; (800193c <__aeabi_dadd+0x404>)
 8001762:	052d      	lsls	r5, r5, #20
 8001764:	4013      	ands	r3, r2
 8001766:	432b      	orrs	r3, r5
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	07e4      	lsls	r4, r4, #31
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	4323      	orrs	r3, r4
 8001770:	0019      	movs	r1, r3
 8001772:	bc1c      	pop	{r2, r3, r4}
 8001774:	4690      	mov	r8, r2
 8001776:	4699      	mov	r9, r3
 8001778:	46a2      	mov	sl, r4
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	003e      	movs	r6, r7
 800177e:	4316      	orrs	r6, r2
 8001780:	d012      	beq.n	80017a8 <__aeabi_dadd+0x270>
 8001782:	1e5e      	subs	r6, r3, #1
 8001784:	2e00      	cmp	r6, #0
 8001786:	d000      	beq.n	800178a <__aeabi_dadd+0x252>
 8001788:	e100      	b.n	800198c <__aeabi_dadd+0x454>
 800178a:	1887      	adds	r7, r0, r2
 800178c:	4287      	cmp	r7, r0
 800178e:	4180      	sbcs	r0, r0
 8001790:	4441      	add	r1, r8
 8001792:	4240      	negs	r0, r0
 8001794:	1809      	adds	r1, r1, r0
 8001796:	2501      	movs	r5, #1
 8001798:	020b      	lsls	r3, r1, #8
 800179a:	d533      	bpl.n	8001804 <__aeabi_dadd+0x2cc>
 800179c:	2502      	movs	r5, #2
 800179e:	e785      	b.n	80016ac <__aeabi_dadd+0x174>
 80017a0:	4664      	mov	r4, ip
 80017a2:	0033      	movs	r3, r6
 80017a4:	4641      	mov	r1, r8
 80017a6:	0010      	movs	r0, r2
 80017a8:	001d      	movs	r5, r3
 80017aa:	e7c7      	b.n	800173c <__aeabi_dadd+0x204>
 80017ac:	2d00      	cmp	r5, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x27a>
 80017b0:	e0da      	b.n	8001968 <__aeabi_dadd+0x430>
 80017b2:	000c      	movs	r4, r1
 80017b4:	4304      	orrs	r4, r0
 80017b6:	d0f3      	beq.n	80017a0 <__aeabi_dadd+0x268>
 80017b8:	1c5c      	adds	r4, r3, #1
 80017ba:	d100      	bne.n	80017be <__aeabi_dadd+0x286>
 80017bc:	e19f      	b.n	8001afe <__aeabi_dadd+0x5c6>
 80017be:	4c5d      	ldr	r4, [pc, #372]	; (8001934 <__aeabi_dadd+0x3fc>)
 80017c0:	42a6      	cmp	r6, r4
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dadd+0x28e>
 80017c4:	e12f      	b.n	8001a26 <__aeabi_dadd+0x4ee>
 80017c6:	43db      	mvns	r3, r3
 80017c8:	2b38      	cmp	r3, #56	; 0x38
 80017ca:	dd00      	ble.n	80017ce <__aeabi_dadd+0x296>
 80017cc:	e166      	b.n	8001a9c <__aeabi_dadd+0x564>
 80017ce:	2b1f      	cmp	r3, #31
 80017d0:	dd00      	ble.n	80017d4 <__aeabi_dadd+0x29c>
 80017d2:	e183      	b.n	8001adc <__aeabi_dadd+0x5a4>
 80017d4:	2420      	movs	r4, #32
 80017d6:	0005      	movs	r5, r0
 80017d8:	1ae4      	subs	r4, r4, r3
 80017da:	000f      	movs	r7, r1
 80017dc:	40dd      	lsrs	r5, r3
 80017de:	40d9      	lsrs	r1, r3
 80017e0:	40a0      	lsls	r0, r4
 80017e2:	4643      	mov	r3, r8
 80017e4:	40a7      	lsls	r7, r4
 80017e6:	1a5b      	subs	r3, r3, r1
 80017e8:	1e44      	subs	r4, r0, #1
 80017ea:	41a0      	sbcs	r0, r4
 80017ec:	4698      	mov	r8, r3
 80017ee:	432f      	orrs	r7, r5
 80017f0:	4338      	orrs	r0, r7
 80017f2:	1a17      	subs	r7, r2, r0
 80017f4:	42ba      	cmp	r2, r7
 80017f6:	4192      	sbcs	r2, r2
 80017f8:	4643      	mov	r3, r8
 80017fa:	4252      	negs	r2, r2
 80017fc:	1a99      	subs	r1, r3, r2
 80017fe:	4664      	mov	r4, ip
 8001800:	0035      	movs	r5, r6
 8001802:	e6ca      	b.n	800159a <__aeabi_dadd+0x62>
 8001804:	2207      	movs	r2, #7
 8001806:	403a      	ands	r2, r7
 8001808:	2a00      	cmp	r2, #0
 800180a:	d000      	beq.n	800180e <__aeabi_dadd+0x2d6>
 800180c:	e6f6      	b.n	80015fc <__aeabi_dadd+0xc4>
 800180e:	074b      	lsls	r3, r1, #29
 8001810:	08ca      	lsrs	r2, r1, #3
 8001812:	4948      	ldr	r1, [pc, #288]	; (8001934 <__aeabi_dadd+0x3fc>)
 8001814:	08ff      	lsrs	r7, r7, #3
 8001816:	433b      	orrs	r3, r7
 8001818:	428d      	cmp	r5, r1
 800181a:	d196      	bne.n	800174a <__aeabi_dadd+0x212>
 800181c:	0019      	movs	r1, r3
 800181e:	4311      	orrs	r1, r2
 8001820:	d100      	bne.n	8001824 <__aeabi_dadd+0x2ec>
 8001822:	e19e      	b.n	8001b62 <__aeabi_dadd+0x62a>
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0309      	lsls	r1, r1, #12
 8001828:	430a      	orrs	r2, r1
 800182a:	0312      	lsls	r2, r2, #12
 800182c:	0b12      	lsrs	r2, r2, #12
 800182e:	4d41      	ldr	r5, [pc, #260]	; (8001934 <__aeabi_dadd+0x3fc>)
 8001830:	e78f      	b.n	8001752 <__aeabi_dadd+0x21a>
 8001832:	0015      	movs	r5, r2
 8001834:	2200      	movs	r2, #0
 8001836:	2300      	movs	r3, #0
 8001838:	e78b      	b.n	8001752 <__aeabi_dadd+0x21a>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d000      	beq.n	8001840 <__aeabi_dadd+0x308>
 800183e:	e0c7      	b.n	80019d0 <__aeabi_dadd+0x498>
 8001840:	1c6b      	adds	r3, r5, #1
 8001842:	055f      	lsls	r7, r3, #21
 8001844:	0d7f      	lsrs	r7, r7, #21
 8001846:	2f01      	cmp	r7, #1
 8001848:	dc00      	bgt.n	800184c <__aeabi_dadd+0x314>
 800184a:	e0f1      	b.n	8001a30 <__aeabi_dadd+0x4f8>
 800184c:	4d39      	ldr	r5, [pc, #228]	; (8001934 <__aeabi_dadd+0x3fc>)
 800184e:	42ab      	cmp	r3, r5
 8001850:	d100      	bne.n	8001854 <__aeabi_dadd+0x31c>
 8001852:	e0b9      	b.n	80019c8 <__aeabi_dadd+0x490>
 8001854:	1885      	adds	r5, r0, r2
 8001856:	000a      	movs	r2, r1
 8001858:	4285      	cmp	r5, r0
 800185a:	4189      	sbcs	r1, r1
 800185c:	4442      	add	r2, r8
 800185e:	4249      	negs	r1, r1
 8001860:	1851      	adds	r1, r2, r1
 8001862:	2207      	movs	r2, #7
 8001864:	07cf      	lsls	r7, r1, #31
 8001866:	086d      	lsrs	r5, r5, #1
 8001868:	432f      	orrs	r7, r5
 800186a:	0849      	lsrs	r1, r1, #1
 800186c:	403a      	ands	r2, r7
 800186e:	001d      	movs	r5, r3
 8001870:	e6c2      	b.n	80015f8 <__aeabi_dadd+0xc0>
 8001872:	2207      	movs	r2, #7
 8001874:	4930      	ldr	r1, [pc, #192]	; (8001938 <__aeabi_dadd+0x400>)
 8001876:	1aed      	subs	r5, r5, r3
 8001878:	4031      	ands	r1, r6
 800187a:	403a      	ands	r2, r7
 800187c:	e6bc      	b.n	80015f8 <__aeabi_dadd+0xc0>
 800187e:	003e      	movs	r6, r7
 8001880:	3828      	subs	r0, #40	; 0x28
 8001882:	4086      	lsls	r6, r0
 8001884:	2700      	movs	r7, #0
 8001886:	e69f      	b.n	80015c8 <__aeabi_dadd+0x90>
 8001888:	0038      	movs	r0, r7
 800188a:	f001 fbd7 	bl	800303c <__clzsi2>
 800188e:	3020      	adds	r0, #32
 8001890:	e68e      	b.n	80015b0 <__aeabi_dadd+0x78>
 8001892:	4643      	mov	r3, r8
 8001894:	4313      	orrs	r3, r2
 8001896:	001f      	movs	r7, r3
 8001898:	1e7a      	subs	r2, r7, #1
 800189a:	4197      	sbcs	r7, r2
 800189c:	1bc7      	subs	r7, r0, r7
 800189e:	42b8      	cmp	r0, r7
 80018a0:	4180      	sbcs	r0, r0
 80018a2:	4240      	negs	r0, r0
 80018a4:	1a09      	subs	r1, r1, r0
 80018a6:	e678      	b.n	800159a <__aeabi_dadd+0x62>
 80018a8:	000e      	movs	r6, r1
 80018aa:	003b      	movs	r3, r7
 80018ac:	4306      	orrs	r6, r0
 80018ae:	4313      	orrs	r3, r2
 80018b0:	2d00      	cmp	r5, #0
 80018b2:	d161      	bne.n	8001978 <__aeabi_dadd+0x440>
 80018b4:	2e00      	cmp	r6, #0
 80018b6:	d000      	beq.n	80018ba <__aeabi_dadd+0x382>
 80018b8:	e0f4      	b.n	8001aa4 <__aeabi_dadd+0x56c>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dadd+0x388>
 80018be:	e11b      	b.n	8001af8 <__aeabi_dadd+0x5c0>
 80018c0:	4664      	mov	r4, ip
 80018c2:	0039      	movs	r1, r7
 80018c4:	0010      	movs	r0, r2
 80018c6:	e739      	b.n	800173c <__aeabi_dadd+0x204>
 80018c8:	4f1a      	ldr	r7, [pc, #104]	; (8001934 <__aeabi_dadd+0x3fc>)
 80018ca:	42bb      	cmp	r3, r7
 80018cc:	d07a      	beq.n	80019c4 <__aeabi_dadd+0x48c>
 80018ce:	0033      	movs	r3, r6
 80018d0:	e6ff      	b.n	80016d2 <__aeabi_dadd+0x19a>
 80018d2:	0030      	movs	r0, r6
 80018d4:	3d1f      	subs	r5, #31
 80018d6:	40e8      	lsrs	r0, r5
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d003      	beq.n	80018e4 <__aeabi_dadd+0x3ac>
 80018dc:	2140      	movs	r1, #64	; 0x40
 80018de:	1acb      	subs	r3, r1, r3
 80018e0:	409e      	lsls	r6, r3
 80018e2:	4337      	orrs	r7, r6
 80018e4:	1e7b      	subs	r3, r7, #1
 80018e6:	419f      	sbcs	r7, r3
 80018e8:	2207      	movs	r2, #7
 80018ea:	4307      	orrs	r7, r0
 80018ec:	403a      	ands	r2, r7
 80018ee:	2100      	movs	r1, #0
 80018f0:	2500      	movs	r5, #0
 80018f2:	e789      	b.n	8001808 <__aeabi_dadd+0x2d0>
 80018f4:	1a17      	subs	r7, r2, r0
 80018f6:	4643      	mov	r3, r8
 80018f8:	42ba      	cmp	r2, r7
 80018fa:	41b6      	sbcs	r6, r6
 80018fc:	1a59      	subs	r1, r3, r1
 80018fe:	4276      	negs	r6, r6
 8001900:	1b8e      	subs	r6, r1, r6
 8001902:	4664      	mov	r4, ip
 8001904:	e64e      	b.n	80015a4 <__aeabi_dadd+0x6c>
 8001906:	2b1f      	cmp	r3, #31
 8001908:	dd00      	ble.n	800190c <__aeabi_dadd+0x3d4>
 800190a:	e0ad      	b.n	8001a68 <__aeabi_dadd+0x530>
 800190c:	2620      	movs	r6, #32
 800190e:	4647      	mov	r7, r8
 8001910:	1af6      	subs	r6, r6, r3
 8001912:	40b7      	lsls	r7, r6
 8001914:	46b9      	mov	r9, r7
 8001916:	0017      	movs	r7, r2
 8001918:	46b2      	mov	sl, r6
 800191a:	40df      	lsrs	r7, r3
 800191c:	464e      	mov	r6, r9
 800191e:	433e      	orrs	r6, r7
 8001920:	0037      	movs	r7, r6
 8001922:	4656      	mov	r6, sl
 8001924:	40b2      	lsls	r2, r6
 8001926:	1e56      	subs	r6, r2, #1
 8001928:	41b2      	sbcs	r2, r6
 800192a:	4317      	orrs	r7, r2
 800192c:	4642      	mov	r2, r8
 800192e:	40da      	lsrs	r2, r3
 8001930:	1889      	adds	r1, r1, r2
 8001932:	e6ae      	b.n	8001692 <__aeabi_dadd+0x15a>
 8001934:	000007ff 	.word	0x000007ff
 8001938:	ff7fffff 	.word	0xff7fffff
 800193c:	800fffff 	.word	0x800fffff
 8001940:	2620      	movs	r6, #32
 8001942:	4647      	mov	r7, r8
 8001944:	1af6      	subs	r6, r6, r3
 8001946:	40b7      	lsls	r7, r6
 8001948:	46b9      	mov	r9, r7
 800194a:	0017      	movs	r7, r2
 800194c:	46b2      	mov	sl, r6
 800194e:	40df      	lsrs	r7, r3
 8001950:	464e      	mov	r6, r9
 8001952:	433e      	orrs	r6, r7
 8001954:	0037      	movs	r7, r6
 8001956:	4656      	mov	r6, sl
 8001958:	40b2      	lsls	r2, r6
 800195a:	1e56      	subs	r6, r2, #1
 800195c:	41b2      	sbcs	r2, r6
 800195e:	4317      	orrs	r7, r2
 8001960:	4642      	mov	r2, r8
 8001962:	40da      	lsrs	r2, r3
 8001964:	1a89      	subs	r1, r1, r2
 8001966:	e799      	b.n	800189c <__aeabi_dadd+0x364>
 8001968:	4c7f      	ldr	r4, [pc, #508]	; (8001b68 <__aeabi_dadd+0x630>)
 800196a:	42a6      	cmp	r6, r4
 800196c:	d05b      	beq.n	8001a26 <__aeabi_dadd+0x4ee>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0424      	lsls	r4, r4, #16
 8001972:	425b      	negs	r3, r3
 8001974:	4321      	orrs	r1, r4
 8001976:	e727      	b.n	80017c8 <__aeabi_dadd+0x290>
 8001978:	2e00      	cmp	r6, #0
 800197a:	d10c      	bne.n	8001996 <__aeabi_dadd+0x45e>
 800197c:	2b00      	cmp	r3, #0
 800197e:	d100      	bne.n	8001982 <__aeabi_dadd+0x44a>
 8001980:	e0cb      	b.n	8001b1a <__aeabi_dadd+0x5e2>
 8001982:	4664      	mov	r4, ip
 8001984:	0039      	movs	r1, r7
 8001986:	0010      	movs	r0, r2
 8001988:	4d77      	ldr	r5, [pc, #476]	; (8001b68 <__aeabi_dadd+0x630>)
 800198a:	e6d7      	b.n	800173c <__aeabi_dadd+0x204>
 800198c:	4f76      	ldr	r7, [pc, #472]	; (8001b68 <__aeabi_dadd+0x630>)
 800198e:	42bb      	cmp	r3, r7
 8001990:	d018      	beq.n	80019c4 <__aeabi_dadd+0x48c>
 8001992:	0033      	movs	r3, r6
 8001994:	e675      	b.n	8001682 <__aeabi_dadd+0x14a>
 8001996:	2b00      	cmp	r3, #0
 8001998:	d014      	beq.n	80019c4 <__aeabi_dadd+0x48c>
 800199a:	074b      	lsls	r3, r1, #29
 800199c:	08c0      	lsrs	r0, r0, #3
 800199e:	4318      	orrs	r0, r3
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	08c9      	lsrs	r1, r1, #3
 80019a4:	031b      	lsls	r3, r3, #12
 80019a6:	4219      	tst	r1, r3
 80019a8:	d007      	beq.n	80019ba <__aeabi_dadd+0x482>
 80019aa:	08fc      	lsrs	r4, r7, #3
 80019ac:	421c      	tst	r4, r3
 80019ae:	d104      	bne.n	80019ba <__aeabi_dadd+0x482>
 80019b0:	0779      	lsls	r1, r7, #29
 80019b2:	08d0      	lsrs	r0, r2, #3
 80019b4:	4308      	orrs	r0, r1
 80019b6:	46e1      	mov	r9, ip
 80019b8:	0021      	movs	r1, r4
 80019ba:	464c      	mov	r4, r9
 80019bc:	0f42      	lsrs	r2, r0, #29
 80019be:	00c9      	lsls	r1, r1, #3
 80019c0:	4311      	orrs	r1, r2
 80019c2:	00c0      	lsls	r0, r0, #3
 80019c4:	4d68      	ldr	r5, [pc, #416]	; (8001b68 <__aeabi_dadd+0x630>)
 80019c6:	e6b9      	b.n	800173c <__aeabi_dadd+0x204>
 80019c8:	001d      	movs	r5, r3
 80019ca:	2200      	movs	r2, #0
 80019cc:	2300      	movs	r3, #0
 80019ce:	e6c0      	b.n	8001752 <__aeabi_dadd+0x21a>
 80019d0:	2d00      	cmp	r5, #0
 80019d2:	d15b      	bne.n	8001a8c <__aeabi_dadd+0x554>
 80019d4:	000d      	movs	r5, r1
 80019d6:	4305      	orrs	r5, r0
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x4a4>
 80019da:	e6e2      	b.n	80017a2 <__aeabi_dadd+0x26a>
 80019dc:	1c5d      	adds	r5, r3, #1
 80019de:	d100      	bne.n	80019e2 <__aeabi_dadd+0x4aa>
 80019e0:	e0b0      	b.n	8001b44 <__aeabi_dadd+0x60c>
 80019e2:	4d61      	ldr	r5, [pc, #388]	; (8001b68 <__aeabi_dadd+0x630>)
 80019e4:	42ae      	cmp	r6, r5
 80019e6:	d01f      	beq.n	8001a28 <__aeabi_dadd+0x4f0>
 80019e8:	43db      	mvns	r3, r3
 80019ea:	2b38      	cmp	r3, #56	; 0x38
 80019ec:	dc71      	bgt.n	8001ad2 <__aeabi_dadd+0x59a>
 80019ee:	2b1f      	cmp	r3, #31
 80019f0:	dd00      	ble.n	80019f4 <__aeabi_dadd+0x4bc>
 80019f2:	e096      	b.n	8001b22 <__aeabi_dadd+0x5ea>
 80019f4:	2520      	movs	r5, #32
 80019f6:	000f      	movs	r7, r1
 80019f8:	1aed      	subs	r5, r5, r3
 80019fa:	40af      	lsls	r7, r5
 80019fc:	46b9      	mov	r9, r7
 80019fe:	0007      	movs	r7, r0
 8001a00:	46aa      	mov	sl, r5
 8001a02:	40df      	lsrs	r7, r3
 8001a04:	464d      	mov	r5, r9
 8001a06:	433d      	orrs	r5, r7
 8001a08:	002f      	movs	r7, r5
 8001a0a:	4655      	mov	r5, sl
 8001a0c:	40a8      	lsls	r0, r5
 8001a0e:	40d9      	lsrs	r1, r3
 8001a10:	1e45      	subs	r5, r0, #1
 8001a12:	41a8      	sbcs	r0, r5
 8001a14:	4488      	add	r8, r1
 8001a16:	4307      	orrs	r7, r0
 8001a18:	18bf      	adds	r7, r7, r2
 8001a1a:	4297      	cmp	r7, r2
 8001a1c:	4192      	sbcs	r2, r2
 8001a1e:	4251      	negs	r1, r2
 8001a20:	4441      	add	r1, r8
 8001a22:	0035      	movs	r5, r6
 8001a24:	e63a      	b.n	800169c <__aeabi_dadd+0x164>
 8001a26:	4664      	mov	r4, ip
 8001a28:	0035      	movs	r5, r6
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	0010      	movs	r0, r2
 8001a2e:	e685      	b.n	800173c <__aeabi_dadd+0x204>
 8001a30:	000b      	movs	r3, r1
 8001a32:	4303      	orrs	r3, r0
 8001a34:	2d00      	cmp	r5, #0
 8001a36:	d000      	beq.n	8001a3a <__aeabi_dadd+0x502>
 8001a38:	e663      	b.n	8001702 <__aeabi_dadd+0x1ca>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f5      	beq.n	8001a2a <__aeabi_dadd+0x4f2>
 8001a3e:	4643      	mov	r3, r8
 8001a40:	4313      	orrs	r3, r2
 8001a42:	d100      	bne.n	8001a46 <__aeabi_dadd+0x50e>
 8001a44:	e67a      	b.n	800173c <__aeabi_dadd+0x204>
 8001a46:	1887      	adds	r7, r0, r2
 8001a48:	4287      	cmp	r7, r0
 8001a4a:	4180      	sbcs	r0, r0
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	4441      	add	r1, r8
 8001a50:	4240      	negs	r0, r0
 8001a52:	1809      	adds	r1, r1, r0
 8001a54:	403a      	ands	r2, r7
 8001a56:	020b      	lsls	r3, r1, #8
 8001a58:	d400      	bmi.n	8001a5c <__aeabi_dadd+0x524>
 8001a5a:	e6d5      	b.n	8001808 <__aeabi_dadd+0x2d0>
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <__aeabi_dadd+0x634>)
 8001a5e:	3501      	adds	r5, #1
 8001a60:	4019      	ands	r1, r3
 8001a62:	e5c9      	b.n	80015f8 <__aeabi_dadd+0xc0>
 8001a64:	0038      	movs	r0, r7
 8001a66:	e669      	b.n	800173c <__aeabi_dadd+0x204>
 8001a68:	001e      	movs	r6, r3
 8001a6a:	4647      	mov	r7, r8
 8001a6c:	3e20      	subs	r6, #32
 8001a6e:	40f7      	lsrs	r7, r6
 8001a70:	46bc      	mov	ip, r7
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d004      	beq.n	8001a80 <__aeabi_dadd+0x548>
 8001a76:	2640      	movs	r6, #64	; 0x40
 8001a78:	1af3      	subs	r3, r6, r3
 8001a7a:	4646      	mov	r6, r8
 8001a7c:	409e      	lsls	r6, r3
 8001a7e:	4332      	orrs	r2, r6
 8001a80:	0017      	movs	r7, r2
 8001a82:	4663      	mov	r3, ip
 8001a84:	1e7a      	subs	r2, r7, #1
 8001a86:	4197      	sbcs	r7, r2
 8001a88:	431f      	orrs	r7, r3
 8001a8a:	e602      	b.n	8001692 <__aeabi_dadd+0x15a>
 8001a8c:	4d36      	ldr	r5, [pc, #216]	; (8001b68 <__aeabi_dadd+0x630>)
 8001a8e:	42ae      	cmp	r6, r5
 8001a90:	d0ca      	beq.n	8001a28 <__aeabi_dadd+0x4f0>
 8001a92:	2580      	movs	r5, #128	; 0x80
 8001a94:	042d      	lsls	r5, r5, #16
 8001a96:	425b      	negs	r3, r3
 8001a98:	4329      	orrs	r1, r5
 8001a9a:	e7a6      	b.n	80019ea <__aeabi_dadd+0x4b2>
 8001a9c:	4308      	orrs	r0, r1
 8001a9e:	1e41      	subs	r1, r0, #1
 8001aa0:	4188      	sbcs	r0, r1
 8001aa2:	e6a6      	b.n	80017f2 <__aeabi_dadd+0x2ba>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x572>
 8001aa8:	e648      	b.n	800173c <__aeabi_dadd+0x204>
 8001aaa:	1a87      	subs	r7, r0, r2
 8001aac:	4643      	mov	r3, r8
 8001aae:	42b8      	cmp	r0, r7
 8001ab0:	41b6      	sbcs	r6, r6
 8001ab2:	1acb      	subs	r3, r1, r3
 8001ab4:	4276      	negs	r6, r6
 8001ab6:	1b9e      	subs	r6, r3, r6
 8001ab8:	0233      	lsls	r3, r6, #8
 8001aba:	d54b      	bpl.n	8001b54 <__aeabi_dadd+0x61c>
 8001abc:	1a17      	subs	r7, r2, r0
 8001abe:	4643      	mov	r3, r8
 8001ac0:	42ba      	cmp	r2, r7
 8001ac2:	4192      	sbcs	r2, r2
 8001ac4:	1a59      	subs	r1, r3, r1
 8001ac6:	4252      	negs	r2, r2
 8001ac8:	1a89      	subs	r1, r1, r2
 8001aca:	2207      	movs	r2, #7
 8001acc:	4664      	mov	r4, ip
 8001ace:	403a      	ands	r2, r7
 8001ad0:	e592      	b.n	80015f8 <__aeabi_dadd+0xc0>
 8001ad2:	4301      	orrs	r1, r0
 8001ad4:	000f      	movs	r7, r1
 8001ad6:	1e79      	subs	r1, r7, #1
 8001ad8:	418f      	sbcs	r7, r1
 8001ada:	e79d      	b.n	8001a18 <__aeabi_dadd+0x4e0>
 8001adc:	001c      	movs	r4, r3
 8001ade:	000f      	movs	r7, r1
 8001ae0:	3c20      	subs	r4, #32
 8001ae2:	40e7      	lsrs	r7, r4
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d003      	beq.n	8001af0 <__aeabi_dadd+0x5b8>
 8001ae8:	2440      	movs	r4, #64	; 0x40
 8001aea:	1ae3      	subs	r3, r4, r3
 8001aec:	4099      	lsls	r1, r3
 8001aee:	4308      	orrs	r0, r1
 8001af0:	1e41      	subs	r1, r0, #1
 8001af2:	4188      	sbcs	r0, r1
 8001af4:	4338      	orrs	r0, r7
 8001af6:	e67c      	b.n	80017f2 <__aeabi_dadd+0x2ba>
 8001af8:	2200      	movs	r2, #0
 8001afa:	2400      	movs	r4, #0
 8001afc:	e625      	b.n	800174a <__aeabi_dadd+0x212>
 8001afe:	1a17      	subs	r7, r2, r0
 8001b00:	4643      	mov	r3, r8
 8001b02:	42ba      	cmp	r2, r7
 8001b04:	4192      	sbcs	r2, r2
 8001b06:	1a59      	subs	r1, r3, r1
 8001b08:	4252      	negs	r2, r2
 8001b0a:	1a89      	subs	r1, r1, r2
 8001b0c:	4664      	mov	r4, ip
 8001b0e:	0035      	movs	r5, r6
 8001b10:	e543      	b.n	800159a <__aeabi_dadd+0x62>
 8001b12:	4641      	mov	r1, r8
 8001b14:	0010      	movs	r0, r2
 8001b16:	4d14      	ldr	r5, [pc, #80]	; (8001b68 <__aeabi_dadd+0x630>)
 8001b18:	e610      	b.n	800173c <__aeabi_dadd+0x204>
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	0312      	lsls	r2, r2, #12
 8001b20:	e680      	b.n	8001824 <__aeabi_dadd+0x2ec>
 8001b22:	001d      	movs	r5, r3
 8001b24:	000f      	movs	r7, r1
 8001b26:	3d20      	subs	r5, #32
 8001b28:	40ef      	lsrs	r7, r5
 8001b2a:	46bc      	mov	ip, r7
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d003      	beq.n	8001b38 <__aeabi_dadd+0x600>
 8001b30:	2540      	movs	r5, #64	; 0x40
 8001b32:	1aeb      	subs	r3, r5, r3
 8001b34:	4099      	lsls	r1, r3
 8001b36:	4308      	orrs	r0, r1
 8001b38:	0007      	movs	r7, r0
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	1e78      	subs	r0, r7, #1
 8001b3e:	4187      	sbcs	r7, r0
 8001b40:	431f      	orrs	r7, r3
 8001b42:	e769      	b.n	8001a18 <__aeabi_dadd+0x4e0>
 8001b44:	1887      	adds	r7, r0, r2
 8001b46:	4297      	cmp	r7, r2
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	4441      	add	r1, r8
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	18c9      	adds	r1, r1, r3
 8001b50:	0035      	movs	r5, r6
 8001b52:	e5a3      	b.n	800169c <__aeabi_dadd+0x164>
 8001b54:	003b      	movs	r3, r7
 8001b56:	4333      	orrs	r3, r6
 8001b58:	d0ce      	beq.n	8001af8 <__aeabi_dadd+0x5c0>
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	0031      	movs	r1, r6
 8001b5e:	403a      	ands	r2, r7
 8001b60:	e652      	b.n	8001808 <__aeabi_dadd+0x2d0>
 8001b62:	2300      	movs	r3, #0
 8001b64:	001a      	movs	r2, r3
 8001b66:	e5f4      	b.n	8001752 <__aeabi_dadd+0x21a>
 8001b68:	000007ff 	.word	0x000007ff
 8001b6c:	ff7fffff 	.word	0xff7fffff

08001b70 <__aeabi_ddiv>:
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	4657      	mov	r7, sl
 8001b74:	46de      	mov	lr, fp
 8001b76:	464e      	mov	r6, r9
 8001b78:	4645      	mov	r5, r8
 8001b7a:	b5e0      	push	{r5, r6, r7, lr}
 8001b7c:	4683      	mov	fp, r0
 8001b7e:	0007      	movs	r7, r0
 8001b80:	030e      	lsls	r6, r1, #12
 8001b82:	0048      	lsls	r0, r1, #1
 8001b84:	b085      	sub	sp, #20
 8001b86:	4692      	mov	sl, r2
 8001b88:	001c      	movs	r4, r3
 8001b8a:	0b36      	lsrs	r6, r6, #12
 8001b8c:	0d40      	lsrs	r0, r0, #21
 8001b8e:	0fcd      	lsrs	r5, r1, #31
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x26>
 8001b94:	e09d      	b.n	8001cd2 <__aeabi_ddiv+0x162>
 8001b96:	4b95      	ldr	r3, [pc, #596]	; (8001dec <__aeabi_ddiv+0x27c>)
 8001b98:	4298      	cmp	r0, r3
 8001b9a:	d039      	beq.n	8001c10 <__aeabi_ddiv+0xa0>
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	00f6      	lsls	r6, r6, #3
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	431e      	orrs	r6, r3
 8001ba4:	4a92      	ldr	r2, [pc, #584]	; (8001df0 <__aeabi_ddiv+0x280>)
 8001ba6:	0f7b      	lsrs	r3, r7, #29
 8001ba8:	4333      	orrs	r3, r6
 8001baa:	4699      	mov	r9, r3
 8001bac:	4694      	mov	ip, r2
 8001bae:	0003      	movs	r3, r0
 8001bb0:	4463      	add	r3, ip
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2600      	movs	r6, #0
 8001bb8:	00ff      	lsls	r7, r7, #3
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	0323      	lsls	r3, r4, #12
 8001bbe:	0b1b      	lsrs	r3, r3, #12
 8001bc0:	4698      	mov	r8, r3
 8001bc2:	0063      	lsls	r3, r4, #1
 8001bc4:	0fe4      	lsrs	r4, r4, #31
 8001bc6:	4652      	mov	r2, sl
 8001bc8:	0d5b      	lsrs	r3, r3, #21
 8001bca:	9401      	str	r4, [sp, #4]
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_ddiv+0x60>
 8001bce:	e0b3      	b.n	8001d38 <__aeabi_ddiv+0x1c8>
 8001bd0:	4986      	ldr	r1, [pc, #536]	; (8001dec <__aeabi_ddiv+0x27c>)
 8001bd2:	428b      	cmp	r3, r1
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_ddiv+0x68>
 8001bd6:	e09e      	b.n	8001d16 <__aeabi_ddiv+0x1a6>
 8001bd8:	4642      	mov	r2, r8
 8001bda:	00d1      	lsls	r1, r2, #3
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	0412      	lsls	r2, r2, #16
 8001be0:	430a      	orrs	r2, r1
 8001be2:	4651      	mov	r1, sl
 8001be4:	0f49      	lsrs	r1, r1, #29
 8001be6:	4311      	orrs	r1, r2
 8001be8:	468b      	mov	fp, r1
 8001bea:	4981      	ldr	r1, [pc, #516]	; (8001df0 <__aeabi_ddiv+0x280>)
 8001bec:	4652      	mov	r2, sl
 8001bee:	468c      	mov	ip, r1
 8001bf0:	9900      	ldr	r1, [sp, #0]
 8001bf2:	4463      	add	r3, ip
 8001bf4:	1acb      	subs	r3, r1, r3
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	00d2      	lsls	r2, r2, #3
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	002b      	movs	r3, r5
 8001bfe:	4063      	eors	r3, r4
 8001c00:	469a      	mov	sl, r3
 8001c02:	2e0f      	cmp	r6, #15
 8001c04:	d900      	bls.n	8001c08 <__aeabi_ddiv+0x98>
 8001c06:	e105      	b.n	8001e14 <__aeabi_ddiv+0x2a4>
 8001c08:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <__aeabi_ddiv+0x284>)
 8001c0a:	00b6      	lsls	r6, r6, #2
 8001c0c:	599b      	ldr	r3, [r3, r6]
 8001c0e:	469f      	mov	pc, r3
 8001c10:	465b      	mov	r3, fp
 8001c12:	4333      	orrs	r3, r6
 8001c14:	4699      	mov	r9, r3
 8001c16:	d000      	beq.n	8001c1a <__aeabi_ddiv+0xaa>
 8001c18:	e0b8      	b.n	8001d8c <__aeabi_ddiv+0x21c>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	2608      	movs	r6, #8
 8001c1e:	2700      	movs	r7, #0
 8001c20:	9000      	str	r0, [sp, #0]
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	e7ca      	b.n	8001bbc <__aeabi_ddiv+0x4c>
 8001c26:	46cb      	mov	fp, r9
 8001c28:	003a      	movs	r2, r7
 8001c2a:	9902      	ldr	r1, [sp, #8]
 8001c2c:	9501      	str	r5, [sp, #4]
 8001c2e:	9b01      	ldr	r3, [sp, #4]
 8001c30:	469a      	mov	sl, r3
 8001c32:	2902      	cmp	r1, #2
 8001c34:	d027      	beq.n	8001c86 <__aeabi_ddiv+0x116>
 8001c36:	2903      	cmp	r1, #3
 8001c38:	d100      	bne.n	8001c3c <__aeabi_ddiv+0xcc>
 8001c3a:	e280      	b.n	800213e <__aeabi_ddiv+0x5ce>
 8001c3c:	2901      	cmp	r1, #1
 8001c3e:	d044      	beq.n	8001cca <__aeabi_ddiv+0x15a>
 8001c40:	496d      	ldr	r1, [pc, #436]	; (8001df8 <__aeabi_ddiv+0x288>)
 8001c42:	9b00      	ldr	r3, [sp, #0]
 8001c44:	468c      	mov	ip, r1
 8001c46:	4463      	add	r3, ip
 8001c48:	001c      	movs	r4, r3
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dd38      	ble.n	8001cc0 <__aeabi_ddiv+0x150>
 8001c4e:	0753      	lsls	r3, r2, #29
 8001c50:	d000      	beq.n	8001c54 <__aeabi_ddiv+0xe4>
 8001c52:	e213      	b.n	800207c <__aeabi_ddiv+0x50c>
 8001c54:	08d2      	lsrs	r2, r2, #3
 8001c56:	465b      	mov	r3, fp
 8001c58:	01db      	lsls	r3, r3, #7
 8001c5a:	d509      	bpl.n	8001c70 <__aeabi_ddiv+0x100>
 8001c5c:	4659      	mov	r1, fp
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <__aeabi_ddiv+0x28c>)
 8001c60:	4019      	ands	r1, r3
 8001c62:	468b      	mov	fp, r1
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	00c9      	lsls	r1, r1, #3
 8001c68:	468c      	mov	ip, r1
 8001c6a:	9b00      	ldr	r3, [sp, #0]
 8001c6c:	4463      	add	r3, ip
 8001c6e:	001c      	movs	r4, r3
 8001c70:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <__aeabi_ddiv+0x290>)
 8001c72:	429c      	cmp	r4, r3
 8001c74:	dc07      	bgt.n	8001c86 <__aeabi_ddiv+0x116>
 8001c76:	465b      	mov	r3, fp
 8001c78:	0564      	lsls	r4, r4, #21
 8001c7a:	075f      	lsls	r7, r3, #29
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	4317      	orrs	r7, r2
 8001c80:	0b1b      	lsrs	r3, r3, #12
 8001c82:	0d62      	lsrs	r2, r4, #21
 8001c84:	e002      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2700      	movs	r7, #0
 8001c8a:	4a58      	ldr	r2, [pc, #352]	; (8001dec <__aeabi_ddiv+0x27c>)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	031b      	lsls	r3, r3, #12
 8001c90:	0b1c      	lsrs	r4, r3, #12
 8001c92:	0d0b      	lsrs	r3, r1, #20
 8001c94:	051b      	lsls	r3, r3, #20
 8001c96:	4323      	orrs	r3, r4
 8001c98:	0514      	lsls	r4, r2, #20
 8001c9a:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <__aeabi_ddiv+0x294>)
 8001c9c:	0038      	movs	r0, r7
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	431c      	orrs	r4, r3
 8001ca2:	4653      	mov	r3, sl
 8001ca4:	0064      	lsls	r4, r4, #1
 8001ca6:	07db      	lsls	r3, r3, #31
 8001ca8:	0864      	lsrs	r4, r4, #1
 8001caa:	431c      	orrs	r4, r3
 8001cac:	0021      	movs	r1, r4
 8001cae:	b005      	add	sp, #20
 8001cb0:	bc3c      	pop	{r2, r3, r4, r5}
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	46a2      	mov	sl, r4
 8001cb8:	46ab      	mov	fp, r5
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4252      	negs	r2, r2
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	1b1b      	subs	r3, r3, r4
 8001cc4:	2b38      	cmp	r3, #56	; 0x38
 8001cc6:	dc00      	bgt.n	8001cca <__aeabi_ddiv+0x15a>
 8001cc8:	e1ad      	b.n	8002026 <__aeabi_ddiv+0x4b6>
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2700      	movs	r7, #0
 8001cd0:	e7dc      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 8001cd2:	465b      	mov	r3, fp
 8001cd4:	4333      	orrs	r3, r6
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	d05e      	beq.n	8001d98 <__aeabi_ddiv+0x228>
 8001cda:	2e00      	cmp	r6, #0
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x170>
 8001cde:	e18a      	b.n	8001ff6 <__aeabi_ddiv+0x486>
 8001ce0:	0030      	movs	r0, r6
 8001ce2:	f001 f9ab 	bl	800303c <__clzsi2>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	3b0b      	subs	r3, #11
 8001cea:	2b1c      	cmp	r3, #28
 8001cec:	dd00      	ble.n	8001cf0 <__aeabi_ddiv+0x180>
 8001cee:	e17b      	b.n	8001fe8 <__aeabi_ddiv+0x478>
 8001cf0:	221d      	movs	r2, #29
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	465a      	mov	r2, fp
 8001cf6:	0001      	movs	r1, r0
 8001cf8:	40da      	lsrs	r2, r3
 8001cfa:	3908      	subs	r1, #8
 8001cfc:	408e      	lsls	r6, r1
 8001cfe:	0013      	movs	r3, r2
 8001d00:	465f      	mov	r7, fp
 8001d02:	4333      	orrs	r3, r6
 8001d04:	4699      	mov	r9, r3
 8001d06:	408f      	lsls	r7, r1
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <__aeabi_ddiv+0x298>)
 8001d0a:	2600      	movs	r6, #0
 8001d0c:	1a1b      	subs	r3, r3, r0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2300      	movs	r3, #0
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	e752      	b.n	8001bbc <__aeabi_ddiv+0x4c>
 8001d16:	4641      	mov	r1, r8
 8001d18:	4653      	mov	r3, sl
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	493b      	ldr	r1, [pc, #236]	; (8001e0c <__aeabi_ddiv+0x29c>)
 8001d1e:	469b      	mov	fp, r3
 8001d20:	468c      	mov	ip, r1
 8001d22:	9b00      	ldr	r3, [sp, #0]
 8001d24:	4463      	add	r3, ip
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	465b      	mov	r3, fp
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d13b      	bne.n	8001da6 <__aeabi_ddiv+0x236>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	2200      	movs	r2, #0
 8001d32:	431e      	orrs	r6, r3
 8001d34:	2102      	movs	r1, #2
 8001d36:	e761      	b.n	8001bfc <__aeabi_ddiv+0x8c>
 8001d38:	4643      	mov	r3, r8
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	d037      	beq.n	8001db0 <__aeabi_ddiv+0x240>
 8001d40:	4643      	mov	r3, r8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d100      	bne.n	8001d48 <__aeabi_ddiv+0x1d8>
 8001d46:	e162      	b.n	800200e <__aeabi_ddiv+0x49e>
 8001d48:	4640      	mov	r0, r8
 8001d4a:	f001 f977 	bl	800303c <__clzsi2>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	3b0b      	subs	r3, #11
 8001d52:	2b1c      	cmp	r3, #28
 8001d54:	dd00      	ble.n	8001d58 <__aeabi_ddiv+0x1e8>
 8001d56:	e153      	b.n	8002000 <__aeabi_ddiv+0x490>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	3a08      	subs	r2, #8
 8001d5e:	4091      	lsls	r1, r2
 8001d60:	4688      	mov	r8, r1
 8001d62:	211d      	movs	r1, #29
 8001d64:	1acb      	subs	r3, r1, r3
 8001d66:	4651      	mov	r1, sl
 8001d68:	40d9      	lsrs	r1, r3
 8001d6a:	000b      	movs	r3, r1
 8001d6c:	4641      	mov	r1, r8
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	469b      	mov	fp, r3
 8001d72:	4653      	mov	r3, sl
 8001d74:	4093      	lsls	r3, r2
 8001d76:	001a      	movs	r2, r3
 8001d78:	9b00      	ldr	r3, [sp, #0]
 8001d7a:	4925      	ldr	r1, [pc, #148]	; (8001e10 <__aeabi_ddiv+0x2a0>)
 8001d7c:	469c      	mov	ip, r3
 8001d7e:	4460      	add	r0, ip
 8001d80:	0003      	movs	r3, r0
 8001d82:	468c      	mov	ip, r1
 8001d84:	4463      	add	r3, ip
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2100      	movs	r1, #0
 8001d8a:	e737      	b.n	8001bfc <__aeabi_ddiv+0x8c>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	46b1      	mov	r9, r6
 8001d90:	9000      	str	r0, [sp, #0]
 8001d92:	260c      	movs	r6, #12
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	e711      	b.n	8001bbc <__aeabi_ddiv+0x4c>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	2604      	movs	r6, #4
 8001da0:	2700      	movs	r7, #0
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	e70a      	b.n	8001bbc <__aeabi_ddiv+0x4c>
 8001da6:	2303      	movs	r3, #3
 8001da8:	46c3      	mov	fp, r8
 8001daa:	431e      	orrs	r6, r3
 8001dac:	2103      	movs	r1, #3
 8001dae:	e725      	b.n	8001bfc <__aeabi_ddiv+0x8c>
 8001db0:	3301      	adds	r3, #1
 8001db2:	431e      	orrs	r6, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	2101      	movs	r1, #1
 8001db8:	e720      	b.n	8001bfc <__aeabi_ddiv+0x8c>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	469a      	mov	sl, r3
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	2700      	movs	r7, #0
 8001dc2:	031b      	lsls	r3, r3, #12
 8001dc4:	4a09      	ldr	r2, [pc, #36]	; (8001dec <__aeabi_ddiv+0x27c>)
 8001dc6:	e761      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	4649      	mov	r1, r9
 8001dcc:	031b      	lsls	r3, r3, #12
 8001dce:	4219      	tst	r1, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x264>
 8001dd2:	e0e2      	b.n	8001f9a <__aeabi_ddiv+0x42a>
 8001dd4:	4659      	mov	r1, fp
 8001dd6:	4219      	tst	r1, r3
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_ddiv+0x26c>
 8001dda:	e0de      	b.n	8001f9a <__aeabi_ddiv+0x42a>
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	031b      	lsls	r3, r3, #12
 8001de0:	0017      	movs	r7, r2
 8001de2:	0b1b      	lsrs	r3, r3, #12
 8001de4:	46a2      	mov	sl, r4
 8001de6:	4a01      	ldr	r2, [pc, #4]	; (8001dec <__aeabi_ddiv+0x27c>)
 8001de8:	e750      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	000007ff 	.word	0x000007ff
 8001df0:	fffffc01 	.word	0xfffffc01
 8001df4:	0800adcc 	.word	0x0800adcc
 8001df8:	000003ff 	.word	0x000003ff
 8001dfc:	feffffff 	.word	0xfeffffff
 8001e00:	000007fe 	.word	0x000007fe
 8001e04:	800fffff 	.word	0x800fffff
 8001e08:	fffffc0d 	.word	0xfffffc0d
 8001e0c:	fffff801 	.word	0xfffff801
 8001e10:	000003f3 	.word	0x000003f3
 8001e14:	45d9      	cmp	r9, fp
 8001e16:	d900      	bls.n	8001e1a <__aeabi_ddiv+0x2aa>
 8001e18:	e0cb      	b.n	8001fb2 <__aeabi_ddiv+0x442>
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_ddiv+0x2ae>
 8001e1c:	e0c6      	b.n	8001fac <__aeabi_ddiv+0x43c>
 8001e1e:	003c      	movs	r4, r7
 8001e20:	4648      	mov	r0, r9
 8001e22:	2700      	movs	r7, #0
 8001e24:	9b00      	ldr	r3, [sp, #0]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	0e16      	lsrs	r6, r2, #24
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	431e      	orrs	r6, r3
 8001e32:	0213      	lsls	r3, r2, #8
 8001e34:	4698      	mov	r8, r3
 8001e36:	0433      	lsls	r3, r6, #16
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	4699      	mov	r9, r3
 8001e3c:	0c31      	lsrs	r1, r6, #16
 8001e3e:	9101      	str	r1, [sp, #4]
 8001e40:	f7fe f9e8 	bl	8000214 <__aeabi_uidivmod>
 8001e44:	464a      	mov	r2, r9
 8001e46:	4342      	muls	r2, r0
 8001e48:	040b      	lsls	r3, r1, #16
 8001e4a:	0c21      	lsrs	r1, r4, #16
 8001e4c:	0005      	movs	r5, r0
 8001e4e:	4319      	orrs	r1, r3
 8001e50:	428a      	cmp	r2, r1
 8001e52:	d907      	bls.n	8001e64 <__aeabi_ddiv+0x2f4>
 8001e54:	1989      	adds	r1, r1, r6
 8001e56:	3d01      	subs	r5, #1
 8001e58:	428e      	cmp	r6, r1
 8001e5a:	d803      	bhi.n	8001e64 <__aeabi_ddiv+0x2f4>
 8001e5c:	428a      	cmp	r2, r1
 8001e5e:	d901      	bls.n	8001e64 <__aeabi_ddiv+0x2f4>
 8001e60:	1e85      	subs	r5, r0, #2
 8001e62:	1989      	adds	r1, r1, r6
 8001e64:	1a88      	subs	r0, r1, r2
 8001e66:	9901      	ldr	r1, [sp, #4]
 8001e68:	f7fe f9d4 	bl	8000214 <__aeabi_uidivmod>
 8001e6c:	0409      	lsls	r1, r1, #16
 8001e6e:	468c      	mov	ip, r1
 8001e70:	464a      	mov	r2, r9
 8001e72:	0421      	lsls	r1, r4, #16
 8001e74:	4664      	mov	r4, ip
 8001e76:	4342      	muls	r2, r0
 8001e78:	0c09      	lsrs	r1, r1, #16
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	4321      	orrs	r1, r4
 8001e7e:	428a      	cmp	r2, r1
 8001e80:	d904      	bls.n	8001e8c <__aeabi_ddiv+0x31c>
 8001e82:	1989      	adds	r1, r1, r6
 8001e84:	3b01      	subs	r3, #1
 8001e86:	428e      	cmp	r6, r1
 8001e88:	d800      	bhi.n	8001e8c <__aeabi_ddiv+0x31c>
 8001e8a:	e0f1      	b.n	8002070 <__aeabi_ddiv+0x500>
 8001e8c:	042d      	lsls	r5, r5, #16
 8001e8e:	431d      	orrs	r5, r3
 8001e90:	46ab      	mov	fp, r5
 8001e92:	4643      	mov	r3, r8
 8001e94:	1a89      	subs	r1, r1, r2
 8001e96:	4642      	mov	r2, r8
 8001e98:	0c28      	lsrs	r0, r5, #16
 8001e9a:	0412      	lsls	r2, r2, #16
 8001e9c:	0c1d      	lsrs	r5, r3, #16
 8001e9e:	465b      	mov	r3, fp
 8001ea0:	0c14      	lsrs	r4, r2, #16
 8001ea2:	0022      	movs	r2, r4
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	435a      	muls	r2, r3
 8001eaa:	9403      	str	r4, [sp, #12]
 8001eac:	436b      	muls	r3, r5
 8001eae:	4344      	muls	r4, r0
 8001eb0:	9502      	str	r5, [sp, #8]
 8001eb2:	4368      	muls	r0, r5
 8001eb4:	191b      	adds	r3, r3, r4
 8001eb6:	0c15      	lsrs	r5, r2, #16
 8001eb8:	18eb      	adds	r3, r5, r3
 8001eba:	429c      	cmp	r4, r3
 8001ebc:	d903      	bls.n	8001ec6 <__aeabi_ddiv+0x356>
 8001ebe:	2480      	movs	r4, #128	; 0x80
 8001ec0:	0264      	lsls	r4, r4, #9
 8001ec2:	46a4      	mov	ip, r4
 8001ec4:	4460      	add	r0, ip
 8001ec6:	0c1c      	lsrs	r4, r3, #16
 8001ec8:	0415      	lsls	r5, r2, #16
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	0c2d      	lsrs	r5, r5, #16
 8001ece:	1820      	adds	r0, r4, r0
 8001ed0:	195d      	adds	r5, r3, r5
 8001ed2:	4281      	cmp	r1, r0
 8001ed4:	d377      	bcc.n	8001fc6 <__aeabi_ddiv+0x456>
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_ddiv+0x450>
 8001ed8:	1a0c      	subs	r4, r1, r0
 8001eda:	4aa2      	ldr	r2, [pc, #648]	; (8002164 <__aeabi_ddiv+0x5f4>)
 8001edc:	1b7d      	subs	r5, r7, r5
 8001ede:	42af      	cmp	r7, r5
 8001ee0:	41bf      	sbcs	r7, r7
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	9b00      	ldr	r3, [sp, #0]
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	4463      	add	r3, ip
 8001eea:	1be0      	subs	r0, r4, r7
 8001eec:	001c      	movs	r4, r3
 8001eee:	4286      	cmp	r6, r0
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_ddiv+0x384>
 8001ef2:	e0db      	b.n	80020ac <__aeabi_ddiv+0x53c>
 8001ef4:	9901      	ldr	r1, [sp, #4]
 8001ef6:	f7fe f98d 	bl	8000214 <__aeabi_uidivmod>
 8001efa:	464a      	mov	r2, r9
 8001efc:	4342      	muls	r2, r0
 8001efe:	040b      	lsls	r3, r1, #16
 8001f00:	0c29      	lsrs	r1, r5, #16
 8001f02:	0007      	movs	r7, r0
 8001f04:	4319      	orrs	r1, r3
 8001f06:	428a      	cmp	r2, r1
 8001f08:	d907      	bls.n	8001f1a <__aeabi_ddiv+0x3aa>
 8001f0a:	1989      	adds	r1, r1, r6
 8001f0c:	3f01      	subs	r7, #1
 8001f0e:	428e      	cmp	r6, r1
 8001f10:	d803      	bhi.n	8001f1a <__aeabi_ddiv+0x3aa>
 8001f12:	428a      	cmp	r2, r1
 8001f14:	d901      	bls.n	8001f1a <__aeabi_ddiv+0x3aa>
 8001f16:	1e87      	subs	r7, r0, #2
 8001f18:	1989      	adds	r1, r1, r6
 8001f1a:	1a88      	subs	r0, r1, r2
 8001f1c:	9901      	ldr	r1, [sp, #4]
 8001f1e:	f7fe f979 	bl	8000214 <__aeabi_uidivmod>
 8001f22:	0409      	lsls	r1, r1, #16
 8001f24:	464a      	mov	r2, r9
 8001f26:	4689      	mov	r9, r1
 8001f28:	0429      	lsls	r1, r5, #16
 8001f2a:	464d      	mov	r5, r9
 8001f2c:	4342      	muls	r2, r0
 8001f2e:	0c09      	lsrs	r1, r1, #16
 8001f30:	0003      	movs	r3, r0
 8001f32:	4329      	orrs	r1, r5
 8001f34:	428a      	cmp	r2, r1
 8001f36:	d907      	bls.n	8001f48 <__aeabi_ddiv+0x3d8>
 8001f38:	1989      	adds	r1, r1, r6
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	428e      	cmp	r6, r1
 8001f3e:	d803      	bhi.n	8001f48 <__aeabi_ddiv+0x3d8>
 8001f40:	428a      	cmp	r2, r1
 8001f42:	d901      	bls.n	8001f48 <__aeabi_ddiv+0x3d8>
 8001f44:	1e83      	subs	r3, r0, #2
 8001f46:	1989      	adds	r1, r1, r6
 8001f48:	043f      	lsls	r7, r7, #16
 8001f4a:	1a89      	subs	r1, r1, r2
 8001f4c:	003a      	movs	r2, r7
 8001f4e:	9f03      	ldr	r7, [sp, #12]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	0038      	movs	r0, r7
 8001f54:	0413      	lsls	r3, r2, #16
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	4358      	muls	r0, r3
 8001f5a:	4681      	mov	r9, r0
 8001f5c:	9802      	ldr	r0, [sp, #8]
 8001f5e:	0c15      	lsrs	r5, r2, #16
 8001f60:	436f      	muls	r7, r5
 8001f62:	4343      	muls	r3, r0
 8001f64:	4345      	muls	r5, r0
 8001f66:	4648      	mov	r0, r9
 8001f68:	0c00      	lsrs	r0, r0, #16
 8001f6a:	4684      	mov	ip, r0
 8001f6c:	19db      	adds	r3, r3, r7
 8001f6e:	4463      	add	r3, ip
 8001f70:	429f      	cmp	r7, r3
 8001f72:	d903      	bls.n	8001f7c <__aeabi_ddiv+0x40c>
 8001f74:	2080      	movs	r0, #128	; 0x80
 8001f76:	0240      	lsls	r0, r0, #9
 8001f78:	4684      	mov	ip, r0
 8001f7a:	4465      	add	r5, ip
 8001f7c:	4648      	mov	r0, r9
 8001f7e:	0c1f      	lsrs	r7, r3, #16
 8001f80:	0400      	lsls	r0, r0, #16
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	0c00      	lsrs	r0, r0, #16
 8001f86:	197d      	adds	r5, r7, r5
 8001f88:	1818      	adds	r0, r3, r0
 8001f8a:	42a9      	cmp	r1, r5
 8001f8c:	d200      	bcs.n	8001f90 <__aeabi_ddiv+0x420>
 8001f8e:	e084      	b.n	800209a <__aeabi_ddiv+0x52a>
 8001f90:	d100      	bne.n	8001f94 <__aeabi_ddiv+0x424>
 8001f92:	e07f      	b.n	8002094 <__aeabi_ddiv+0x524>
 8001f94:	2301      	movs	r3, #1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	e657      	b.n	8001c4a <__aeabi_ddiv+0xda>
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	464a      	mov	r2, r9
 8001f9e:	031b      	lsls	r3, r3, #12
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	031b      	lsls	r3, r3, #12
 8001fa4:	0b1b      	lsrs	r3, r3, #12
 8001fa6:	46aa      	mov	sl, r5
 8001fa8:	4a6f      	ldr	r2, [pc, #444]	; (8002168 <__aeabi_ddiv+0x5f8>)
 8001faa:	e66f      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 8001fac:	42ba      	cmp	r2, r7
 8001fae:	d900      	bls.n	8001fb2 <__aeabi_ddiv+0x442>
 8001fb0:	e735      	b.n	8001e1e <__aeabi_ddiv+0x2ae>
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	07dc      	lsls	r4, r3, #31
 8001fb6:	0858      	lsrs	r0, r3, #1
 8001fb8:	087b      	lsrs	r3, r7, #1
 8001fba:	431c      	orrs	r4, r3
 8001fbc:	07ff      	lsls	r7, r7, #31
 8001fbe:	e734      	b.n	8001e2a <__aeabi_ddiv+0x2ba>
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	42af      	cmp	r7, r5
 8001fc4:	d289      	bcs.n	8001eda <__aeabi_ddiv+0x36a>
 8001fc6:	4447      	add	r7, r8
 8001fc8:	4547      	cmp	r7, r8
 8001fca:	41a4      	sbcs	r4, r4
 8001fcc:	465b      	mov	r3, fp
 8001fce:	4264      	negs	r4, r4
 8001fd0:	19a4      	adds	r4, r4, r6
 8001fd2:	1864      	adds	r4, r4, r1
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	42a6      	cmp	r6, r4
 8001fd8:	d21e      	bcs.n	8002018 <__aeabi_ddiv+0x4a8>
 8001fda:	42a0      	cmp	r0, r4
 8001fdc:	d86d      	bhi.n	80020ba <__aeabi_ddiv+0x54a>
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_ddiv+0x472>
 8001fe0:	e0b6      	b.n	8002150 <__aeabi_ddiv+0x5e0>
 8001fe2:	1a24      	subs	r4, r4, r0
 8001fe4:	469b      	mov	fp, r3
 8001fe6:	e778      	b.n	8001eda <__aeabi_ddiv+0x36a>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	465a      	mov	r2, fp
 8001fec:	3b28      	subs	r3, #40	; 0x28
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	2700      	movs	r7, #0
 8001ff2:	4691      	mov	r9, r2
 8001ff4:	e688      	b.n	8001d08 <__aeabi_ddiv+0x198>
 8001ff6:	4658      	mov	r0, fp
 8001ff8:	f001 f820 	bl	800303c <__clzsi2>
 8001ffc:	3020      	adds	r0, #32
 8001ffe:	e672      	b.n	8001ce6 <__aeabi_ddiv+0x176>
 8002000:	0003      	movs	r3, r0
 8002002:	4652      	mov	r2, sl
 8002004:	3b28      	subs	r3, #40	; 0x28
 8002006:	409a      	lsls	r2, r3
 8002008:	4693      	mov	fp, r2
 800200a:	2200      	movs	r2, #0
 800200c:	e6b4      	b.n	8001d78 <__aeabi_ddiv+0x208>
 800200e:	4650      	mov	r0, sl
 8002010:	f001 f814 	bl	800303c <__clzsi2>
 8002014:	3020      	adds	r0, #32
 8002016:	e69a      	b.n	8001d4e <__aeabi_ddiv+0x1de>
 8002018:	42a6      	cmp	r6, r4
 800201a:	d1e2      	bne.n	8001fe2 <__aeabi_ddiv+0x472>
 800201c:	45b8      	cmp	r8, r7
 800201e:	d9dc      	bls.n	8001fda <__aeabi_ddiv+0x46a>
 8002020:	1a34      	subs	r4, r6, r0
 8002022:	469b      	mov	fp, r3
 8002024:	e759      	b.n	8001eda <__aeabi_ddiv+0x36a>
 8002026:	2b1f      	cmp	r3, #31
 8002028:	dc65      	bgt.n	80020f6 <__aeabi_ddiv+0x586>
 800202a:	4c50      	ldr	r4, [pc, #320]	; (800216c <__aeabi_ddiv+0x5fc>)
 800202c:	9900      	ldr	r1, [sp, #0]
 800202e:	46a4      	mov	ip, r4
 8002030:	465c      	mov	r4, fp
 8002032:	4461      	add	r1, ip
 8002034:	0008      	movs	r0, r1
 8002036:	408c      	lsls	r4, r1
 8002038:	0011      	movs	r1, r2
 800203a:	4082      	lsls	r2, r0
 800203c:	40d9      	lsrs	r1, r3
 800203e:	1e50      	subs	r0, r2, #1
 8002040:	4182      	sbcs	r2, r0
 8002042:	430c      	orrs	r4, r1
 8002044:	4314      	orrs	r4, r2
 8002046:	465a      	mov	r2, fp
 8002048:	40da      	lsrs	r2, r3
 800204a:	0013      	movs	r3, r2
 800204c:	0762      	lsls	r2, r4, #29
 800204e:	d009      	beq.n	8002064 <__aeabi_ddiv+0x4f4>
 8002050:	220f      	movs	r2, #15
 8002052:	4022      	ands	r2, r4
 8002054:	2a04      	cmp	r2, #4
 8002056:	d005      	beq.n	8002064 <__aeabi_ddiv+0x4f4>
 8002058:	0022      	movs	r2, r4
 800205a:	1d14      	adds	r4, r2, #4
 800205c:	4294      	cmp	r4, r2
 800205e:	4189      	sbcs	r1, r1
 8002060:	4249      	negs	r1, r1
 8002062:	185b      	adds	r3, r3, r1
 8002064:	021a      	lsls	r2, r3, #8
 8002066:	d562      	bpl.n	800212e <__aeabi_ddiv+0x5be>
 8002068:	2201      	movs	r2, #1
 800206a:	2300      	movs	r3, #0
 800206c:	2700      	movs	r7, #0
 800206e:	e60d      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 8002070:	428a      	cmp	r2, r1
 8002072:	d800      	bhi.n	8002076 <__aeabi_ddiv+0x506>
 8002074:	e70a      	b.n	8001e8c <__aeabi_ddiv+0x31c>
 8002076:	1e83      	subs	r3, r0, #2
 8002078:	1989      	adds	r1, r1, r6
 800207a:	e707      	b.n	8001e8c <__aeabi_ddiv+0x31c>
 800207c:	230f      	movs	r3, #15
 800207e:	4013      	ands	r3, r2
 8002080:	2b04      	cmp	r3, #4
 8002082:	d100      	bne.n	8002086 <__aeabi_ddiv+0x516>
 8002084:	e5e6      	b.n	8001c54 <__aeabi_ddiv+0xe4>
 8002086:	1d17      	adds	r7, r2, #4
 8002088:	4297      	cmp	r7, r2
 800208a:	4192      	sbcs	r2, r2
 800208c:	4253      	negs	r3, r2
 800208e:	449b      	add	fp, r3
 8002090:	08fa      	lsrs	r2, r7, #3
 8002092:	e5e0      	b.n	8001c56 <__aeabi_ddiv+0xe6>
 8002094:	2800      	cmp	r0, #0
 8002096:	d100      	bne.n	800209a <__aeabi_ddiv+0x52a>
 8002098:	e5d7      	b.n	8001c4a <__aeabi_ddiv+0xda>
 800209a:	1871      	adds	r1, r6, r1
 800209c:	1e53      	subs	r3, r2, #1
 800209e:	42b1      	cmp	r1, r6
 80020a0:	d327      	bcc.n	80020f2 <__aeabi_ddiv+0x582>
 80020a2:	42a9      	cmp	r1, r5
 80020a4:	d315      	bcc.n	80020d2 <__aeabi_ddiv+0x562>
 80020a6:	d058      	beq.n	800215a <__aeabi_ddiv+0x5ea>
 80020a8:	001a      	movs	r2, r3
 80020aa:	e773      	b.n	8001f94 <__aeabi_ddiv+0x424>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_ddiv+0x542>
 80020b0:	e604      	b.n	8001cbc <__aeabi_ddiv+0x14c>
 80020b2:	2301      	movs	r3, #1
 80020b4:	2200      	movs	r2, #0
 80020b6:	449b      	add	fp, r3
 80020b8:	e5cd      	b.n	8001c56 <__aeabi_ddiv+0xe6>
 80020ba:	2302      	movs	r3, #2
 80020bc:	4447      	add	r7, r8
 80020be:	4547      	cmp	r7, r8
 80020c0:	4189      	sbcs	r1, r1
 80020c2:	425b      	negs	r3, r3
 80020c4:	469c      	mov	ip, r3
 80020c6:	4249      	negs	r1, r1
 80020c8:	1989      	adds	r1, r1, r6
 80020ca:	190c      	adds	r4, r1, r4
 80020cc:	44e3      	add	fp, ip
 80020ce:	1a24      	subs	r4, r4, r0
 80020d0:	e703      	b.n	8001eda <__aeabi_ddiv+0x36a>
 80020d2:	4643      	mov	r3, r8
 80020d4:	005f      	lsls	r7, r3, #1
 80020d6:	4547      	cmp	r7, r8
 80020d8:	419b      	sbcs	r3, r3
 80020da:	46b8      	mov	r8, r7
 80020dc:	425b      	negs	r3, r3
 80020de:	199e      	adds	r6, r3, r6
 80020e0:	3a02      	subs	r2, #2
 80020e2:	1989      	adds	r1, r1, r6
 80020e4:	42a9      	cmp	r1, r5
 80020e6:	d000      	beq.n	80020ea <__aeabi_ddiv+0x57a>
 80020e8:	e754      	b.n	8001f94 <__aeabi_ddiv+0x424>
 80020ea:	4540      	cmp	r0, r8
 80020ec:	d000      	beq.n	80020f0 <__aeabi_ddiv+0x580>
 80020ee:	e751      	b.n	8001f94 <__aeabi_ddiv+0x424>
 80020f0:	e5ab      	b.n	8001c4a <__aeabi_ddiv+0xda>
 80020f2:	001a      	movs	r2, r3
 80020f4:	e7f6      	b.n	80020e4 <__aeabi_ddiv+0x574>
 80020f6:	211f      	movs	r1, #31
 80020f8:	465f      	mov	r7, fp
 80020fa:	4249      	negs	r1, r1
 80020fc:	1b0c      	subs	r4, r1, r4
 80020fe:	40e7      	lsrs	r7, r4
 8002100:	2b20      	cmp	r3, #32
 8002102:	d007      	beq.n	8002114 <__aeabi_ddiv+0x5a4>
 8002104:	491a      	ldr	r1, [pc, #104]	; (8002170 <__aeabi_ddiv+0x600>)
 8002106:	9b00      	ldr	r3, [sp, #0]
 8002108:	468c      	mov	ip, r1
 800210a:	4463      	add	r3, ip
 800210c:	0018      	movs	r0, r3
 800210e:	465b      	mov	r3, fp
 8002110:	4083      	lsls	r3, r0
 8002112:	431a      	orrs	r2, r3
 8002114:	1e50      	subs	r0, r2, #1
 8002116:	4182      	sbcs	r2, r0
 8002118:	433a      	orrs	r2, r7
 800211a:	2707      	movs	r7, #7
 800211c:	2300      	movs	r3, #0
 800211e:	4017      	ands	r7, r2
 8002120:	d009      	beq.n	8002136 <__aeabi_ddiv+0x5c6>
 8002122:	210f      	movs	r1, #15
 8002124:	2300      	movs	r3, #0
 8002126:	4011      	ands	r1, r2
 8002128:	0014      	movs	r4, r2
 800212a:	2904      	cmp	r1, #4
 800212c:	d195      	bne.n	800205a <__aeabi_ddiv+0x4ea>
 800212e:	0022      	movs	r2, r4
 8002130:	075f      	lsls	r7, r3, #29
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	08d2      	lsrs	r2, r2, #3
 8002138:	4317      	orrs	r7, r2
 800213a:	2200      	movs	r2, #0
 800213c:	e5a6      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	4659      	mov	r1, fp
 8002142:	031b      	lsls	r3, r3, #12
 8002144:	430b      	orrs	r3, r1
 8002146:	031b      	lsls	r3, r3, #12
 8002148:	0017      	movs	r7, r2
 800214a:	0b1b      	lsrs	r3, r3, #12
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <__aeabi_ddiv+0x5f8>)
 800214e:	e59d      	b.n	8001c8c <__aeabi_ddiv+0x11c>
 8002150:	42bd      	cmp	r5, r7
 8002152:	d8b2      	bhi.n	80020ba <__aeabi_ddiv+0x54a>
 8002154:	469b      	mov	fp, r3
 8002156:	2400      	movs	r4, #0
 8002158:	e6bf      	b.n	8001eda <__aeabi_ddiv+0x36a>
 800215a:	4580      	cmp	r8, r0
 800215c:	d3b9      	bcc.n	80020d2 <__aeabi_ddiv+0x562>
 800215e:	001a      	movs	r2, r3
 8002160:	e7c3      	b.n	80020ea <__aeabi_ddiv+0x57a>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	000003ff 	.word	0x000003ff
 8002168:	000007ff 	.word	0x000007ff
 800216c:	0000041e 	.word	0x0000041e
 8002170:	0000043e 	.word	0x0000043e

08002174 <__eqdf2>:
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	464f      	mov	r7, r9
 8002178:	4646      	mov	r6, r8
 800217a:	46d6      	mov	lr, sl
 800217c:	4684      	mov	ip, r0
 800217e:	b5c0      	push	{r6, r7, lr}
 8002180:	4680      	mov	r8, r0
 8002182:	4e19      	ldr	r6, [pc, #100]	; (80021e8 <__eqdf2+0x74>)
 8002184:	0318      	lsls	r0, r3, #12
 8002186:	030f      	lsls	r7, r1, #12
 8002188:	004d      	lsls	r5, r1, #1
 800218a:	0b00      	lsrs	r0, r0, #12
 800218c:	005c      	lsls	r4, r3, #1
 800218e:	4682      	mov	sl, r0
 8002190:	0b3f      	lsrs	r7, r7, #12
 8002192:	0d6d      	lsrs	r5, r5, #21
 8002194:	0fc9      	lsrs	r1, r1, #31
 8002196:	4691      	mov	r9, r2
 8002198:	0d64      	lsrs	r4, r4, #21
 800219a:	0fdb      	lsrs	r3, r3, #31
 800219c:	2001      	movs	r0, #1
 800219e:	42b5      	cmp	r5, r6
 80021a0:	d00a      	beq.n	80021b8 <__eqdf2+0x44>
 80021a2:	42b4      	cmp	r4, r6
 80021a4:	d003      	beq.n	80021ae <__eqdf2+0x3a>
 80021a6:	42a5      	cmp	r5, r4
 80021a8:	d101      	bne.n	80021ae <__eqdf2+0x3a>
 80021aa:	4557      	cmp	r7, sl
 80021ac:	d00c      	beq.n	80021c8 <__eqdf2+0x54>
 80021ae:	bc1c      	pop	{r2, r3, r4}
 80021b0:	4690      	mov	r8, r2
 80021b2:	4699      	mov	r9, r3
 80021b4:	46a2      	mov	sl, r4
 80021b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b8:	4666      	mov	r6, ip
 80021ba:	433e      	orrs	r6, r7
 80021bc:	d1f7      	bne.n	80021ae <__eqdf2+0x3a>
 80021be:	42ac      	cmp	r4, r5
 80021c0:	d1f5      	bne.n	80021ae <__eqdf2+0x3a>
 80021c2:	4654      	mov	r4, sl
 80021c4:	4314      	orrs	r4, r2
 80021c6:	d1f2      	bne.n	80021ae <__eqdf2+0x3a>
 80021c8:	2001      	movs	r0, #1
 80021ca:	45c8      	cmp	r8, r9
 80021cc:	d1ef      	bne.n	80021ae <__eqdf2+0x3a>
 80021ce:	4299      	cmp	r1, r3
 80021d0:	d007      	beq.n	80021e2 <__eqdf2+0x6e>
 80021d2:	2d00      	cmp	r5, #0
 80021d4:	d1eb      	bne.n	80021ae <__eqdf2+0x3a>
 80021d6:	4663      	mov	r3, ip
 80021d8:	431f      	orrs	r7, r3
 80021da:	0038      	movs	r0, r7
 80021dc:	1e47      	subs	r7, r0, #1
 80021de:	41b8      	sbcs	r0, r7
 80021e0:	e7e5      	b.n	80021ae <__eqdf2+0x3a>
 80021e2:	2000      	movs	r0, #0
 80021e4:	e7e3      	b.n	80021ae <__eqdf2+0x3a>
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	000007ff 	.word	0x000007ff

080021ec <__gedf2>:
 80021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ee:	464f      	mov	r7, r9
 80021f0:	4646      	mov	r6, r8
 80021f2:	46d6      	mov	lr, sl
 80021f4:	004d      	lsls	r5, r1, #1
 80021f6:	b5c0      	push	{r6, r7, lr}
 80021f8:	030e      	lsls	r6, r1, #12
 80021fa:	0fc9      	lsrs	r1, r1, #31
 80021fc:	468a      	mov	sl, r1
 80021fe:	492c      	ldr	r1, [pc, #176]	; (80022b0 <__gedf2+0xc4>)
 8002200:	031f      	lsls	r7, r3, #12
 8002202:	005c      	lsls	r4, r3, #1
 8002204:	4680      	mov	r8, r0
 8002206:	0b36      	lsrs	r6, r6, #12
 8002208:	0d6d      	lsrs	r5, r5, #21
 800220a:	4691      	mov	r9, r2
 800220c:	0b3f      	lsrs	r7, r7, #12
 800220e:	0d64      	lsrs	r4, r4, #21
 8002210:	0fdb      	lsrs	r3, r3, #31
 8002212:	428d      	cmp	r5, r1
 8002214:	d01e      	beq.n	8002254 <__gedf2+0x68>
 8002216:	428c      	cmp	r4, r1
 8002218:	d016      	beq.n	8002248 <__gedf2+0x5c>
 800221a:	2d00      	cmp	r5, #0
 800221c:	d11e      	bne.n	800225c <__gedf2+0x70>
 800221e:	4330      	orrs	r0, r6
 8002220:	4684      	mov	ip, r0
 8002222:	2c00      	cmp	r4, #0
 8002224:	d101      	bne.n	800222a <__gedf2+0x3e>
 8002226:	433a      	orrs	r2, r7
 8002228:	d023      	beq.n	8002272 <__gedf2+0x86>
 800222a:	4662      	mov	r2, ip
 800222c:	2a00      	cmp	r2, #0
 800222e:	d01a      	beq.n	8002266 <__gedf2+0x7a>
 8002230:	459a      	cmp	sl, r3
 8002232:	d029      	beq.n	8002288 <__gedf2+0x9c>
 8002234:	4651      	mov	r1, sl
 8002236:	2002      	movs	r0, #2
 8002238:	3901      	subs	r1, #1
 800223a:	4008      	ands	r0, r1
 800223c:	3801      	subs	r0, #1
 800223e:	bc1c      	pop	{r2, r3, r4}
 8002240:	4690      	mov	r8, r2
 8002242:	4699      	mov	r9, r3
 8002244:	46a2      	mov	sl, r4
 8002246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002248:	0039      	movs	r1, r7
 800224a:	4311      	orrs	r1, r2
 800224c:	d0e5      	beq.n	800221a <__gedf2+0x2e>
 800224e:	2002      	movs	r0, #2
 8002250:	4240      	negs	r0, r0
 8002252:	e7f4      	b.n	800223e <__gedf2+0x52>
 8002254:	4330      	orrs	r0, r6
 8002256:	d1fa      	bne.n	800224e <__gedf2+0x62>
 8002258:	42ac      	cmp	r4, r5
 800225a:	d00f      	beq.n	800227c <__gedf2+0x90>
 800225c:	2c00      	cmp	r4, #0
 800225e:	d10f      	bne.n	8002280 <__gedf2+0x94>
 8002260:	433a      	orrs	r2, r7
 8002262:	d0e7      	beq.n	8002234 <__gedf2+0x48>
 8002264:	e00c      	b.n	8002280 <__gedf2+0x94>
 8002266:	2201      	movs	r2, #1
 8002268:	3b01      	subs	r3, #1
 800226a:	4393      	bics	r3, r2
 800226c:	0018      	movs	r0, r3
 800226e:	3001      	adds	r0, #1
 8002270:	e7e5      	b.n	800223e <__gedf2+0x52>
 8002272:	4663      	mov	r3, ip
 8002274:	2000      	movs	r0, #0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0e1      	beq.n	800223e <__gedf2+0x52>
 800227a:	e7db      	b.n	8002234 <__gedf2+0x48>
 800227c:	433a      	orrs	r2, r7
 800227e:	d1e6      	bne.n	800224e <__gedf2+0x62>
 8002280:	459a      	cmp	sl, r3
 8002282:	d1d7      	bne.n	8002234 <__gedf2+0x48>
 8002284:	42a5      	cmp	r5, r4
 8002286:	dcd5      	bgt.n	8002234 <__gedf2+0x48>
 8002288:	42a5      	cmp	r5, r4
 800228a:	db05      	blt.n	8002298 <__gedf2+0xac>
 800228c:	42be      	cmp	r6, r7
 800228e:	d8d1      	bhi.n	8002234 <__gedf2+0x48>
 8002290:	d008      	beq.n	80022a4 <__gedf2+0xb8>
 8002292:	2000      	movs	r0, #0
 8002294:	42be      	cmp	r6, r7
 8002296:	d2d2      	bcs.n	800223e <__gedf2+0x52>
 8002298:	4650      	mov	r0, sl
 800229a:	2301      	movs	r3, #1
 800229c:	3801      	subs	r0, #1
 800229e:	4398      	bics	r0, r3
 80022a0:	3001      	adds	r0, #1
 80022a2:	e7cc      	b.n	800223e <__gedf2+0x52>
 80022a4:	45c8      	cmp	r8, r9
 80022a6:	d8c5      	bhi.n	8002234 <__gedf2+0x48>
 80022a8:	2000      	movs	r0, #0
 80022aa:	45c8      	cmp	r8, r9
 80022ac:	d3f4      	bcc.n	8002298 <__gedf2+0xac>
 80022ae:	e7c6      	b.n	800223e <__gedf2+0x52>
 80022b0:	000007ff 	.word	0x000007ff

080022b4 <__ledf2>:
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	464f      	mov	r7, r9
 80022b8:	4646      	mov	r6, r8
 80022ba:	46d6      	mov	lr, sl
 80022bc:	004d      	lsls	r5, r1, #1
 80022be:	b5c0      	push	{r6, r7, lr}
 80022c0:	030e      	lsls	r6, r1, #12
 80022c2:	0fc9      	lsrs	r1, r1, #31
 80022c4:	468a      	mov	sl, r1
 80022c6:	492e      	ldr	r1, [pc, #184]	; (8002380 <__ledf2+0xcc>)
 80022c8:	031f      	lsls	r7, r3, #12
 80022ca:	005c      	lsls	r4, r3, #1
 80022cc:	4680      	mov	r8, r0
 80022ce:	0b36      	lsrs	r6, r6, #12
 80022d0:	0d6d      	lsrs	r5, r5, #21
 80022d2:	4691      	mov	r9, r2
 80022d4:	0b3f      	lsrs	r7, r7, #12
 80022d6:	0d64      	lsrs	r4, r4, #21
 80022d8:	0fdb      	lsrs	r3, r3, #31
 80022da:	428d      	cmp	r5, r1
 80022dc:	d018      	beq.n	8002310 <__ledf2+0x5c>
 80022de:	428c      	cmp	r4, r1
 80022e0:	d011      	beq.n	8002306 <__ledf2+0x52>
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	d118      	bne.n	8002318 <__ledf2+0x64>
 80022e6:	4330      	orrs	r0, r6
 80022e8:	4684      	mov	ip, r0
 80022ea:	2c00      	cmp	r4, #0
 80022ec:	d11e      	bne.n	800232c <__ledf2+0x78>
 80022ee:	433a      	orrs	r2, r7
 80022f0:	d11c      	bne.n	800232c <__ledf2+0x78>
 80022f2:	4663      	mov	r3, ip
 80022f4:	2000      	movs	r0, #0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d030      	beq.n	800235c <__ledf2+0xa8>
 80022fa:	4651      	mov	r1, sl
 80022fc:	2002      	movs	r0, #2
 80022fe:	3901      	subs	r1, #1
 8002300:	4008      	ands	r0, r1
 8002302:	3801      	subs	r0, #1
 8002304:	e02a      	b.n	800235c <__ledf2+0xa8>
 8002306:	0039      	movs	r1, r7
 8002308:	4311      	orrs	r1, r2
 800230a:	d0ea      	beq.n	80022e2 <__ledf2+0x2e>
 800230c:	2002      	movs	r0, #2
 800230e:	e025      	b.n	800235c <__ledf2+0xa8>
 8002310:	4330      	orrs	r0, r6
 8002312:	d1fb      	bne.n	800230c <__ledf2+0x58>
 8002314:	42ac      	cmp	r4, r5
 8002316:	d026      	beq.n	8002366 <__ledf2+0xb2>
 8002318:	2c00      	cmp	r4, #0
 800231a:	d126      	bne.n	800236a <__ledf2+0xb6>
 800231c:	433a      	orrs	r2, r7
 800231e:	d124      	bne.n	800236a <__ledf2+0xb6>
 8002320:	4651      	mov	r1, sl
 8002322:	2002      	movs	r0, #2
 8002324:	3901      	subs	r1, #1
 8002326:	4008      	ands	r0, r1
 8002328:	3801      	subs	r0, #1
 800232a:	e017      	b.n	800235c <__ledf2+0xa8>
 800232c:	4662      	mov	r2, ip
 800232e:	2a00      	cmp	r2, #0
 8002330:	d00f      	beq.n	8002352 <__ledf2+0x9e>
 8002332:	459a      	cmp	sl, r3
 8002334:	d1e1      	bne.n	80022fa <__ledf2+0x46>
 8002336:	42a5      	cmp	r5, r4
 8002338:	db05      	blt.n	8002346 <__ledf2+0x92>
 800233a:	42be      	cmp	r6, r7
 800233c:	d8dd      	bhi.n	80022fa <__ledf2+0x46>
 800233e:	d019      	beq.n	8002374 <__ledf2+0xc0>
 8002340:	2000      	movs	r0, #0
 8002342:	42be      	cmp	r6, r7
 8002344:	d20a      	bcs.n	800235c <__ledf2+0xa8>
 8002346:	4650      	mov	r0, sl
 8002348:	2301      	movs	r3, #1
 800234a:	3801      	subs	r0, #1
 800234c:	4398      	bics	r0, r3
 800234e:	3001      	adds	r0, #1
 8002350:	e004      	b.n	800235c <__ledf2+0xa8>
 8002352:	2201      	movs	r2, #1
 8002354:	3b01      	subs	r3, #1
 8002356:	4393      	bics	r3, r2
 8002358:	0018      	movs	r0, r3
 800235a:	3001      	adds	r0, #1
 800235c:	bc1c      	pop	{r2, r3, r4}
 800235e:	4690      	mov	r8, r2
 8002360:	4699      	mov	r9, r3
 8002362:	46a2      	mov	sl, r4
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002366:	433a      	orrs	r2, r7
 8002368:	d1d0      	bne.n	800230c <__ledf2+0x58>
 800236a:	459a      	cmp	sl, r3
 800236c:	d1c5      	bne.n	80022fa <__ledf2+0x46>
 800236e:	42a5      	cmp	r5, r4
 8002370:	dcc3      	bgt.n	80022fa <__ledf2+0x46>
 8002372:	e7e0      	b.n	8002336 <__ledf2+0x82>
 8002374:	45c8      	cmp	r8, r9
 8002376:	d8c0      	bhi.n	80022fa <__ledf2+0x46>
 8002378:	2000      	movs	r0, #0
 800237a:	45c8      	cmp	r8, r9
 800237c:	d3e3      	bcc.n	8002346 <__ledf2+0x92>
 800237e:	e7ed      	b.n	800235c <__ledf2+0xa8>
 8002380:	000007ff 	.word	0x000007ff

08002384 <__aeabi_dmul>:
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	4657      	mov	r7, sl
 8002388:	46de      	mov	lr, fp
 800238a:	464e      	mov	r6, r9
 800238c:	4645      	mov	r5, r8
 800238e:	b5e0      	push	{r5, r6, r7, lr}
 8002390:	4683      	mov	fp, r0
 8002392:	0006      	movs	r6, r0
 8002394:	030f      	lsls	r7, r1, #12
 8002396:	0048      	lsls	r0, r1, #1
 8002398:	b087      	sub	sp, #28
 800239a:	4692      	mov	sl, r2
 800239c:	001d      	movs	r5, r3
 800239e:	0b3f      	lsrs	r7, r7, #12
 80023a0:	0d40      	lsrs	r0, r0, #21
 80023a2:	0fcc      	lsrs	r4, r1, #31
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d100      	bne.n	80023aa <__aeabi_dmul+0x26>
 80023a8:	e06f      	b.n	800248a <__aeabi_dmul+0x106>
 80023aa:	4bde      	ldr	r3, [pc, #888]	; (8002724 <__aeabi_dmul+0x3a0>)
 80023ac:	4298      	cmp	r0, r3
 80023ae:	d038      	beq.n	8002422 <__aeabi_dmul+0x9e>
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	00ff      	lsls	r7, r7, #3
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431f      	orrs	r7, r3
 80023b8:	0f73      	lsrs	r3, r6, #29
 80023ba:	433b      	orrs	r3, r7
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	4bda      	ldr	r3, [pc, #872]	; (8002728 <__aeabi_dmul+0x3a4>)
 80023c0:	2700      	movs	r7, #0
 80023c2:	4699      	mov	r9, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	469b      	mov	fp, r3
 80023c8:	00f6      	lsls	r6, r6, #3
 80023ca:	4481      	add	r9, r0
 80023cc:	032b      	lsls	r3, r5, #12
 80023ce:	0069      	lsls	r1, r5, #1
 80023d0:	0b1b      	lsrs	r3, r3, #12
 80023d2:	4652      	mov	r2, sl
 80023d4:	4698      	mov	r8, r3
 80023d6:	0d49      	lsrs	r1, r1, #21
 80023d8:	0fed      	lsrs	r5, r5, #31
 80023da:	2900      	cmp	r1, #0
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dmul+0x5c>
 80023de:	e085      	b.n	80024ec <__aeabi_dmul+0x168>
 80023e0:	4bd0      	ldr	r3, [pc, #832]	; (8002724 <__aeabi_dmul+0x3a0>)
 80023e2:	4299      	cmp	r1, r3
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dmul+0x64>
 80023e6:	e073      	b.n	80024d0 <__aeabi_dmul+0x14c>
 80023e8:	4643      	mov	r3, r8
 80023ea:	00da      	lsls	r2, r3, #3
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	4313      	orrs	r3, r2
 80023f2:	4652      	mov	r2, sl
 80023f4:	48cc      	ldr	r0, [pc, #816]	; (8002728 <__aeabi_dmul+0x3a4>)
 80023f6:	0f52      	lsrs	r2, r2, #29
 80023f8:	4684      	mov	ip, r0
 80023fa:	4313      	orrs	r3, r2
 80023fc:	4652      	mov	r2, sl
 80023fe:	2000      	movs	r0, #0
 8002400:	4461      	add	r1, ip
 8002402:	00d2      	lsls	r2, r2, #3
 8002404:	4489      	add	r9, r1
 8002406:	0021      	movs	r1, r4
 8002408:	4069      	eors	r1, r5
 800240a:	9100      	str	r1, [sp, #0]
 800240c:	468c      	mov	ip, r1
 800240e:	2101      	movs	r1, #1
 8002410:	4449      	add	r1, r9
 8002412:	468a      	mov	sl, r1
 8002414:	2f0f      	cmp	r7, #15
 8002416:	d900      	bls.n	800241a <__aeabi_dmul+0x96>
 8002418:	e090      	b.n	800253c <__aeabi_dmul+0x1b8>
 800241a:	49c4      	ldr	r1, [pc, #784]	; (800272c <__aeabi_dmul+0x3a8>)
 800241c:	00bf      	lsls	r7, r7, #2
 800241e:	59cf      	ldr	r7, [r1, r7]
 8002420:	46bf      	mov	pc, r7
 8002422:	465b      	mov	r3, fp
 8002424:	433b      	orrs	r3, r7
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	d000      	beq.n	800242c <__aeabi_dmul+0xa8>
 800242a:	e16a      	b.n	8002702 <__aeabi_dmul+0x37e>
 800242c:	2302      	movs	r3, #2
 800242e:	2708      	movs	r7, #8
 8002430:	2600      	movs	r6, #0
 8002432:	4681      	mov	r9, r0
 8002434:	469b      	mov	fp, r3
 8002436:	e7c9      	b.n	80023cc <__aeabi_dmul+0x48>
 8002438:	0032      	movs	r2, r6
 800243a:	4658      	mov	r0, fp
 800243c:	9b01      	ldr	r3, [sp, #4]
 800243e:	4661      	mov	r1, ip
 8002440:	9100      	str	r1, [sp, #0]
 8002442:	2802      	cmp	r0, #2
 8002444:	d100      	bne.n	8002448 <__aeabi_dmul+0xc4>
 8002446:	e075      	b.n	8002534 <__aeabi_dmul+0x1b0>
 8002448:	2803      	cmp	r0, #3
 800244a:	d100      	bne.n	800244e <__aeabi_dmul+0xca>
 800244c:	e1fe      	b.n	800284c <__aeabi_dmul+0x4c8>
 800244e:	2801      	cmp	r0, #1
 8002450:	d000      	beq.n	8002454 <__aeabi_dmul+0xd0>
 8002452:	e12c      	b.n	80026ae <__aeabi_dmul+0x32a>
 8002454:	2300      	movs	r3, #0
 8002456:	2700      	movs	r7, #0
 8002458:	2600      	movs	r6, #0
 800245a:	2500      	movs	r5, #0
 800245c:	033f      	lsls	r7, r7, #12
 800245e:	0d2a      	lsrs	r2, r5, #20
 8002460:	0b3f      	lsrs	r7, r7, #12
 8002462:	48b3      	ldr	r0, [pc, #716]	; (8002730 <__aeabi_dmul+0x3ac>)
 8002464:	0512      	lsls	r2, r2, #20
 8002466:	433a      	orrs	r2, r7
 8002468:	4002      	ands	r2, r0
 800246a:	051b      	lsls	r3, r3, #20
 800246c:	4313      	orrs	r3, r2
 800246e:	9a00      	ldr	r2, [sp, #0]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	07d1      	lsls	r1, r2, #31
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	430b      	orrs	r3, r1
 8002478:	0030      	movs	r0, r6
 800247a:	0019      	movs	r1, r3
 800247c:	b007      	add	sp, #28
 800247e:	bc3c      	pop	{r2, r3, r4, r5}
 8002480:	4690      	mov	r8, r2
 8002482:	4699      	mov	r9, r3
 8002484:	46a2      	mov	sl, r4
 8002486:	46ab      	mov	fp, r5
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248a:	465b      	mov	r3, fp
 800248c:	433b      	orrs	r3, r7
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	d100      	bne.n	8002494 <__aeabi_dmul+0x110>
 8002492:	e12f      	b.n	80026f4 <__aeabi_dmul+0x370>
 8002494:	2f00      	cmp	r7, #0
 8002496:	d100      	bne.n	800249a <__aeabi_dmul+0x116>
 8002498:	e1a5      	b.n	80027e6 <__aeabi_dmul+0x462>
 800249a:	0038      	movs	r0, r7
 800249c:	f000 fdce 	bl	800303c <__clzsi2>
 80024a0:	0003      	movs	r3, r0
 80024a2:	3b0b      	subs	r3, #11
 80024a4:	2b1c      	cmp	r3, #28
 80024a6:	dd00      	ble.n	80024aa <__aeabi_dmul+0x126>
 80024a8:	e196      	b.n	80027d8 <__aeabi_dmul+0x454>
 80024aa:	221d      	movs	r2, #29
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	465a      	mov	r2, fp
 80024b0:	0001      	movs	r1, r0
 80024b2:	40da      	lsrs	r2, r3
 80024b4:	465e      	mov	r6, fp
 80024b6:	3908      	subs	r1, #8
 80024b8:	408f      	lsls	r7, r1
 80024ba:	0013      	movs	r3, r2
 80024bc:	408e      	lsls	r6, r1
 80024be:	433b      	orrs	r3, r7
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	4b9c      	ldr	r3, [pc, #624]	; (8002734 <__aeabi_dmul+0x3b0>)
 80024c4:	2700      	movs	r7, #0
 80024c6:	1a1b      	subs	r3, r3, r0
 80024c8:	4699      	mov	r9, r3
 80024ca:	2300      	movs	r3, #0
 80024cc:	469b      	mov	fp, r3
 80024ce:	e77d      	b.n	80023cc <__aeabi_dmul+0x48>
 80024d0:	4641      	mov	r1, r8
 80024d2:	4653      	mov	r3, sl
 80024d4:	430b      	orrs	r3, r1
 80024d6:	4993      	ldr	r1, [pc, #588]	; (8002724 <__aeabi_dmul+0x3a0>)
 80024d8:	468c      	mov	ip, r1
 80024da:	44e1      	add	r9, ip
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d000      	beq.n	80024e2 <__aeabi_dmul+0x15e>
 80024e0:	e11a      	b.n	8002718 <__aeabi_dmul+0x394>
 80024e2:	2202      	movs	r2, #2
 80024e4:	2002      	movs	r0, #2
 80024e6:	4317      	orrs	r7, r2
 80024e8:	2200      	movs	r2, #0
 80024ea:	e78c      	b.n	8002406 <__aeabi_dmul+0x82>
 80024ec:	4313      	orrs	r3, r2
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dmul+0x16e>
 80024f0:	e10d      	b.n	800270e <__aeabi_dmul+0x38a>
 80024f2:	4643      	mov	r3, r8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d100      	bne.n	80024fa <__aeabi_dmul+0x176>
 80024f8:	e181      	b.n	80027fe <__aeabi_dmul+0x47a>
 80024fa:	4640      	mov	r0, r8
 80024fc:	f000 fd9e 	bl	800303c <__clzsi2>
 8002500:	0002      	movs	r2, r0
 8002502:	3a0b      	subs	r2, #11
 8002504:	2a1c      	cmp	r2, #28
 8002506:	dd00      	ble.n	800250a <__aeabi_dmul+0x186>
 8002508:	e172      	b.n	80027f0 <__aeabi_dmul+0x46c>
 800250a:	0001      	movs	r1, r0
 800250c:	4643      	mov	r3, r8
 800250e:	3908      	subs	r1, #8
 8002510:	408b      	lsls	r3, r1
 8002512:	4698      	mov	r8, r3
 8002514:	231d      	movs	r3, #29
 8002516:	1a9a      	subs	r2, r3, r2
 8002518:	4653      	mov	r3, sl
 800251a:	40d3      	lsrs	r3, r2
 800251c:	001a      	movs	r2, r3
 800251e:	4643      	mov	r3, r8
 8002520:	4313      	orrs	r3, r2
 8002522:	4652      	mov	r2, sl
 8002524:	408a      	lsls	r2, r1
 8002526:	4649      	mov	r1, r9
 8002528:	1a08      	subs	r0, r1, r0
 800252a:	4982      	ldr	r1, [pc, #520]	; (8002734 <__aeabi_dmul+0x3b0>)
 800252c:	4689      	mov	r9, r1
 800252e:	4481      	add	r9, r0
 8002530:	2000      	movs	r0, #0
 8002532:	e768      	b.n	8002406 <__aeabi_dmul+0x82>
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <__aeabi_dmul+0x3a0>)
 8002536:	2700      	movs	r7, #0
 8002538:	2600      	movs	r6, #0
 800253a:	e78e      	b.n	800245a <__aeabi_dmul+0xd6>
 800253c:	0c14      	lsrs	r4, r2, #16
 800253e:	0412      	lsls	r2, r2, #16
 8002540:	0c12      	lsrs	r2, r2, #16
 8002542:	0011      	movs	r1, r2
 8002544:	0c37      	lsrs	r7, r6, #16
 8002546:	0436      	lsls	r6, r6, #16
 8002548:	0c35      	lsrs	r5, r6, #16
 800254a:	4379      	muls	r1, r7
 800254c:	0028      	movs	r0, r5
 800254e:	468c      	mov	ip, r1
 8002550:	002e      	movs	r6, r5
 8002552:	4360      	muls	r0, r4
 8002554:	4460      	add	r0, ip
 8002556:	4683      	mov	fp, r0
 8002558:	4356      	muls	r6, r2
 800255a:	0021      	movs	r1, r4
 800255c:	0c30      	lsrs	r0, r6, #16
 800255e:	4680      	mov	r8, r0
 8002560:	4658      	mov	r0, fp
 8002562:	4379      	muls	r1, r7
 8002564:	4440      	add	r0, r8
 8002566:	9102      	str	r1, [sp, #8]
 8002568:	4584      	cmp	ip, r0
 800256a:	d906      	bls.n	800257a <__aeabi_dmul+0x1f6>
 800256c:	4688      	mov	r8, r1
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0249      	lsls	r1, r1, #9
 8002572:	468c      	mov	ip, r1
 8002574:	44e0      	add	r8, ip
 8002576:	4641      	mov	r1, r8
 8002578:	9102      	str	r1, [sp, #8]
 800257a:	0436      	lsls	r6, r6, #16
 800257c:	0c01      	lsrs	r1, r0, #16
 800257e:	0c36      	lsrs	r6, r6, #16
 8002580:	0400      	lsls	r0, r0, #16
 8002582:	468b      	mov	fp, r1
 8002584:	1981      	adds	r1, r0, r6
 8002586:	0c1e      	lsrs	r6, r3, #16
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	9103      	str	r1, [sp, #12]
 800258e:	0019      	movs	r1, r3
 8002590:	4379      	muls	r1, r7
 8002592:	468c      	mov	ip, r1
 8002594:	0028      	movs	r0, r5
 8002596:	4375      	muls	r5, r6
 8002598:	4465      	add	r5, ip
 800259a:	46a8      	mov	r8, r5
 800259c:	4358      	muls	r0, r3
 800259e:	0c05      	lsrs	r5, r0, #16
 80025a0:	4445      	add	r5, r8
 80025a2:	4377      	muls	r7, r6
 80025a4:	42a9      	cmp	r1, r5
 80025a6:	d903      	bls.n	80025b0 <__aeabi_dmul+0x22c>
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0249      	lsls	r1, r1, #9
 80025ac:	468c      	mov	ip, r1
 80025ae:	4467      	add	r7, ip
 80025b0:	0c29      	lsrs	r1, r5, #16
 80025b2:	468c      	mov	ip, r1
 80025b4:	0039      	movs	r1, r7
 80025b6:	0400      	lsls	r0, r0, #16
 80025b8:	0c00      	lsrs	r0, r0, #16
 80025ba:	042d      	lsls	r5, r5, #16
 80025bc:	182d      	adds	r5, r5, r0
 80025be:	4461      	add	r1, ip
 80025c0:	44ab      	add	fp, r5
 80025c2:	9105      	str	r1, [sp, #20]
 80025c4:	4659      	mov	r1, fp
 80025c6:	9104      	str	r1, [sp, #16]
 80025c8:	9901      	ldr	r1, [sp, #4]
 80025ca:	040f      	lsls	r7, r1, #16
 80025cc:	0c3f      	lsrs	r7, r7, #16
 80025ce:	0c08      	lsrs	r0, r1, #16
 80025d0:	0039      	movs	r1, r7
 80025d2:	4351      	muls	r1, r2
 80025d4:	4342      	muls	r2, r0
 80025d6:	4690      	mov	r8, r2
 80025d8:	0002      	movs	r2, r0
 80025da:	468c      	mov	ip, r1
 80025dc:	0c09      	lsrs	r1, r1, #16
 80025de:	468b      	mov	fp, r1
 80025e0:	4362      	muls	r2, r4
 80025e2:	437c      	muls	r4, r7
 80025e4:	4444      	add	r4, r8
 80025e6:	445c      	add	r4, fp
 80025e8:	45a0      	cmp	r8, r4
 80025ea:	d903      	bls.n	80025f4 <__aeabi_dmul+0x270>
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0249      	lsls	r1, r1, #9
 80025f0:	4688      	mov	r8, r1
 80025f2:	4442      	add	r2, r8
 80025f4:	0c21      	lsrs	r1, r4, #16
 80025f6:	4688      	mov	r8, r1
 80025f8:	4661      	mov	r1, ip
 80025fa:	0409      	lsls	r1, r1, #16
 80025fc:	0c09      	lsrs	r1, r1, #16
 80025fe:	468c      	mov	ip, r1
 8002600:	0039      	movs	r1, r7
 8002602:	4359      	muls	r1, r3
 8002604:	4343      	muls	r3, r0
 8002606:	4370      	muls	r0, r6
 8002608:	437e      	muls	r6, r7
 800260a:	0c0f      	lsrs	r7, r1, #16
 800260c:	18f6      	adds	r6, r6, r3
 800260e:	0424      	lsls	r4, r4, #16
 8002610:	19be      	adds	r6, r7, r6
 8002612:	4464      	add	r4, ip
 8002614:	4442      	add	r2, r8
 8002616:	468c      	mov	ip, r1
 8002618:	42b3      	cmp	r3, r6
 800261a:	d903      	bls.n	8002624 <__aeabi_dmul+0x2a0>
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	4698      	mov	r8, r3
 8002622:	4440      	add	r0, r8
 8002624:	9b02      	ldr	r3, [sp, #8]
 8002626:	4661      	mov	r1, ip
 8002628:	4698      	mov	r8, r3
 800262a:	9b04      	ldr	r3, [sp, #16]
 800262c:	0437      	lsls	r7, r6, #16
 800262e:	4443      	add	r3, r8
 8002630:	469b      	mov	fp, r3
 8002632:	45ab      	cmp	fp, r5
 8002634:	41ad      	sbcs	r5, r5
 8002636:	426b      	negs	r3, r5
 8002638:	040d      	lsls	r5, r1, #16
 800263a:	9905      	ldr	r1, [sp, #20]
 800263c:	0c2d      	lsrs	r5, r5, #16
 800263e:	468c      	mov	ip, r1
 8002640:	197f      	adds	r7, r7, r5
 8002642:	4467      	add	r7, ip
 8002644:	18fd      	adds	r5, r7, r3
 8002646:	46a8      	mov	r8, r5
 8002648:	465d      	mov	r5, fp
 800264a:	192d      	adds	r5, r5, r4
 800264c:	42a5      	cmp	r5, r4
 800264e:	41a4      	sbcs	r4, r4
 8002650:	4693      	mov	fp, r2
 8002652:	4264      	negs	r4, r4
 8002654:	46a4      	mov	ip, r4
 8002656:	44c3      	add	fp, r8
 8002658:	44dc      	add	ip, fp
 800265a:	428f      	cmp	r7, r1
 800265c:	41bf      	sbcs	r7, r7
 800265e:	4598      	cmp	r8, r3
 8002660:	419b      	sbcs	r3, r3
 8002662:	4593      	cmp	fp, r2
 8002664:	4192      	sbcs	r2, r2
 8002666:	45a4      	cmp	ip, r4
 8002668:	41a4      	sbcs	r4, r4
 800266a:	425b      	negs	r3, r3
 800266c:	427f      	negs	r7, r7
 800266e:	431f      	orrs	r7, r3
 8002670:	0c36      	lsrs	r6, r6, #16
 8002672:	4252      	negs	r2, r2
 8002674:	4264      	negs	r4, r4
 8002676:	19bf      	adds	r7, r7, r6
 8002678:	4322      	orrs	r2, r4
 800267a:	18bf      	adds	r7, r7, r2
 800267c:	4662      	mov	r2, ip
 800267e:	1838      	adds	r0, r7, r0
 8002680:	0243      	lsls	r3, r0, #9
 8002682:	0dd2      	lsrs	r2, r2, #23
 8002684:	9903      	ldr	r1, [sp, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	026a      	lsls	r2, r5, #9
 800268a:	430a      	orrs	r2, r1
 800268c:	1e50      	subs	r0, r2, #1
 800268e:	4182      	sbcs	r2, r0
 8002690:	4661      	mov	r1, ip
 8002692:	0ded      	lsrs	r5, r5, #23
 8002694:	432a      	orrs	r2, r5
 8002696:	024e      	lsls	r6, r1, #9
 8002698:	4332      	orrs	r2, r6
 800269a:	01d9      	lsls	r1, r3, #7
 800269c:	d400      	bmi.n	80026a0 <__aeabi_dmul+0x31c>
 800269e:	e0b3      	b.n	8002808 <__aeabi_dmul+0x484>
 80026a0:	2601      	movs	r6, #1
 80026a2:	0850      	lsrs	r0, r2, #1
 80026a4:	4032      	ands	r2, r6
 80026a6:	4302      	orrs	r2, r0
 80026a8:	07de      	lsls	r6, r3, #31
 80026aa:	4332      	orrs	r2, r6
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	4c22      	ldr	r4, [pc, #136]	; (8002738 <__aeabi_dmul+0x3b4>)
 80026b0:	4454      	add	r4, sl
 80026b2:	2c00      	cmp	r4, #0
 80026b4:	dd62      	ble.n	800277c <__aeabi_dmul+0x3f8>
 80026b6:	0751      	lsls	r1, r2, #29
 80026b8:	d009      	beq.n	80026ce <__aeabi_dmul+0x34a>
 80026ba:	200f      	movs	r0, #15
 80026bc:	4010      	ands	r0, r2
 80026be:	2804      	cmp	r0, #4
 80026c0:	d005      	beq.n	80026ce <__aeabi_dmul+0x34a>
 80026c2:	1d10      	adds	r0, r2, #4
 80026c4:	4290      	cmp	r0, r2
 80026c6:	4192      	sbcs	r2, r2
 80026c8:	4252      	negs	r2, r2
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	0002      	movs	r2, r0
 80026ce:	01d9      	lsls	r1, r3, #7
 80026d0:	d504      	bpl.n	80026dc <__aeabi_dmul+0x358>
 80026d2:	2480      	movs	r4, #128	; 0x80
 80026d4:	4819      	ldr	r0, [pc, #100]	; (800273c <__aeabi_dmul+0x3b8>)
 80026d6:	00e4      	lsls	r4, r4, #3
 80026d8:	4003      	ands	r3, r0
 80026da:	4454      	add	r4, sl
 80026dc:	4818      	ldr	r0, [pc, #96]	; (8002740 <__aeabi_dmul+0x3bc>)
 80026de:	4284      	cmp	r4, r0
 80026e0:	dd00      	ble.n	80026e4 <__aeabi_dmul+0x360>
 80026e2:	e727      	b.n	8002534 <__aeabi_dmul+0x1b0>
 80026e4:	075e      	lsls	r6, r3, #29
 80026e6:	025b      	lsls	r3, r3, #9
 80026e8:	08d2      	lsrs	r2, r2, #3
 80026ea:	0b1f      	lsrs	r7, r3, #12
 80026ec:	0563      	lsls	r3, r4, #21
 80026ee:	4316      	orrs	r6, r2
 80026f0:	0d5b      	lsrs	r3, r3, #21
 80026f2:	e6b2      	b.n	800245a <__aeabi_dmul+0xd6>
 80026f4:	2300      	movs	r3, #0
 80026f6:	4699      	mov	r9, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2704      	movs	r7, #4
 80026fc:	2600      	movs	r6, #0
 80026fe:	469b      	mov	fp, r3
 8002700:	e664      	b.n	80023cc <__aeabi_dmul+0x48>
 8002702:	2303      	movs	r3, #3
 8002704:	9701      	str	r7, [sp, #4]
 8002706:	4681      	mov	r9, r0
 8002708:	270c      	movs	r7, #12
 800270a:	469b      	mov	fp, r3
 800270c:	e65e      	b.n	80023cc <__aeabi_dmul+0x48>
 800270e:	2201      	movs	r2, #1
 8002710:	2001      	movs	r0, #1
 8002712:	4317      	orrs	r7, r2
 8002714:	2200      	movs	r2, #0
 8002716:	e676      	b.n	8002406 <__aeabi_dmul+0x82>
 8002718:	2303      	movs	r3, #3
 800271a:	2003      	movs	r0, #3
 800271c:	431f      	orrs	r7, r3
 800271e:	4643      	mov	r3, r8
 8002720:	e671      	b.n	8002406 <__aeabi_dmul+0x82>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	000007ff 	.word	0x000007ff
 8002728:	fffffc01 	.word	0xfffffc01
 800272c:	0800ae0c 	.word	0x0800ae0c
 8002730:	800fffff 	.word	0x800fffff
 8002734:	fffffc0d 	.word	0xfffffc0d
 8002738:	000003ff 	.word	0x000003ff
 800273c:	feffffff 	.word	0xfeffffff
 8002740:	000007fe 	.word	0x000007fe
 8002744:	2300      	movs	r3, #0
 8002746:	2780      	movs	r7, #128	; 0x80
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	033f      	lsls	r7, r7, #12
 800274c:	2600      	movs	r6, #0
 800274e:	4b43      	ldr	r3, [pc, #268]	; (800285c <__aeabi_dmul+0x4d8>)
 8002750:	e683      	b.n	800245a <__aeabi_dmul+0xd6>
 8002752:	9b01      	ldr	r3, [sp, #4]
 8002754:	0032      	movs	r2, r6
 8002756:	46a4      	mov	ip, r4
 8002758:	4658      	mov	r0, fp
 800275a:	e670      	b.n	800243e <__aeabi_dmul+0xba>
 800275c:	46ac      	mov	ip, r5
 800275e:	e66e      	b.n	800243e <__aeabi_dmul+0xba>
 8002760:	2780      	movs	r7, #128	; 0x80
 8002762:	9901      	ldr	r1, [sp, #4]
 8002764:	033f      	lsls	r7, r7, #12
 8002766:	4239      	tst	r1, r7
 8002768:	d02d      	beq.n	80027c6 <__aeabi_dmul+0x442>
 800276a:	423b      	tst	r3, r7
 800276c:	d12b      	bne.n	80027c6 <__aeabi_dmul+0x442>
 800276e:	431f      	orrs	r7, r3
 8002770:	033f      	lsls	r7, r7, #12
 8002772:	0b3f      	lsrs	r7, r7, #12
 8002774:	9500      	str	r5, [sp, #0]
 8002776:	0016      	movs	r6, r2
 8002778:	4b38      	ldr	r3, [pc, #224]	; (800285c <__aeabi_dmul+0x4d8>)
 800277a:	e66e      	b.n	800245a <__aeabi_dmul+0xd6>
 800277c:	2501      	movs	r5, #1
 800277e:	1b2d      	subs	r5, r5, r4
 8002780:	2d38      	cmp	r5, #56	; 0x38
 8002782:	dd00      	ble.n	8002786 <__aeabi_dmul+0x402>
 8002784:	e666      	b.n	8002454 <__aeabi_dmul+0xd0>
 8002786:	2d1f      	cmp	r5, #31
 8002788:	dc40      	bgt.n	800280c <__aeabi_dmul+0x488>
 800278a:	4835      	ldr	r0, [pc, #212]	; (8002860 <__aeabi_dmul+0x4dc>)
 800278c:	001c      	movs	r4, r3
 800278e:	4450      	add	r0, sl
 8002790:	0016      	movs	r6, r2
 8002792:	4082      	lsls	r2, r0
 8002794:	4084      	lsls	r4, r0
 8002796:	40ee      	lsrs	r6, r5
 8002798:	1e50      	subs	r0, r2, #1
 800279a:	4182      	sbcs	r2, r0
 800279c:	4334      	orrs	r4, r6
 800279e:	4314      	orrs	r4, r2
 80027a0:	40eb      	lsrs	r3, r5
 80027a2:	0762      	lsls	r2, r4, #29
 80027a4:	d009      	beq.n	80027ba <__aeabi_dmul+0x436>
 80027a6:	220f      	movs	r2, #15
 80027a8:	4022      	ands	r2, r4
 80027aa:	2a04      	cmp	r2, #4
 80027ac:	d005      	beq.n	80027ba <__aeabi_dmul+0x436>
 80027ae:	0022      	movs	r2, r4
 80027b0:	1d14      	adds	r4, r2, #4
 80027b2:	4294      	cmp	r4, r2
 80027b4:	4180      	sbcs	r0, r0
 80027b6:	4240      	negs	r0, r0
 80027b8:	181b      	adds	r3, r3, r0
 80027ba:	021a      	lsls	r2, r3, #8
 80027bc:	d53e      	bpl.n	800283c <__aeabi_dmul+0x4b8>
 80027be:	2301      	movs	r3, #1
 80027c0:	2700      	movs	r7, #0
 80027c2:	2600      	movs	r6, #0
 80027c4:	e649      	b.n	800245a <__aeabi_dmul+0xd6>
 80027c6:	2780      	movs	r7, #128	; 0x80
 80027c8:	9b01      	ldr	r3, [sp, #4]
 80027ca:	033f      	lsls	r7, r7, #12
 80027cc:	431f      	orrs	r7, r3
 80027ce:	033f      	lsls	r7, r7, #12
 80027d0:	0b3f      	lsrs	r7, r7, #12
 80027d2:	9400      	str	r4, [sp, #0]
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <__aeabi_dmul+0x4d8>)
 80027d6:	e640      	b.n	800245a <__aeabi_dmul+0xd6>
 80027d8:	0003      	movs	r3, r0
 80027da:	465a      	mov	r2, fp
 80027dc:	3b28      	subs	r3, #40	; 0x28
 80027de:	409a      	lsls	r2, r3
 80027e0:	2600      	movs	r6, #0
 80027e2:	9201      	str	r2, [sp, #4]
 80027e4:	e66d      	b.n	80024c2 <__aeabi_dmul+0x13e>
 80027e6:	4658      	mov	r0, fp
 80027e8:	f000 fc28 	bl	800303c <__clzsi2>
 80027ec:	3020      	adds	r0, #32
 80027ee:	e657      	b.n	80024a0 <__aeabi_dmul+0x11c>
 80027f0:	0003      	movs	r3, r0
 80027f2:	4652      	mov	r2, sl
 80027f4:	3b28      	subs	r3, #40	; 0x28
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	2200      	movs	r2, #0
 80027fc:	e693      	b.n	8002526 <__aeabi_dmul+0x1a2>
 80027fe:	4650      	mov	r0, sl
 8002800:	f000 fc1c 	bl	800303c <__clzsi2>
 8002804:	3020      	adds	r0, #32
 8002806:	e67b      	b.n	8002500 <__aeabi_dmul+0x17c>
 8002808:	46ca      	mov	sl, r9
 800280a:	e750      	b.n	80026ae <__aeabi_dmul+0x32a>
 800280c:	201f      	movs	r0, #31
 800280e:	001e      	movs	r6, r3
 8002810:	4240      	negs	r0, r0
 8002812:	1b04      	subs	r4, r0, r4
 8002814:	40e6      	lsrs	r6, r4
 8002816:	2d20      	cmp	r5, #32
 8002818:	d003      	beq.n	8002822 <__aeabi_dmul+0x49e>
 800281a:	4c12      	ldr	r4, [pc, #72]	; (8002864 <__aeabi_dmul+0x4e0>)
 800281c:	4454      	add	r4, sl
 800281e:	40a3      	lsls	r3, r4
 8002820:	431a      	orrs	r2, r3
 8002822:	1e50      	subs	r0, r2, #1
 8002824:	4182      	sbcs	r2, r0
 8002826:	4332      	orrs	r2, r6
 8002828:	2607      	movs	r6, #7
 800282a:	2700      	movs	r7, #0
 800282c:	4016      	ands	r6, r2
 800282e:	d009      	beq.n	8002844 <__aeabi_dmul+0x4c0>
 8002830:	200f      	movs	r0, #15
 8002832:	2300      	movs	r3, #0
 8002834:	4010      	ands	r0, r2
 8002836:	0014      	movs	r4, r2
 8002838:	2804      	cmp	r0, #4
 800283a:	d1b9      	bne.n	80027b0 <__aeabi_dmul+0x42c>
 800283c:	0022      	movs	r2, r4
 800283e:	075e      	lsls	r6, r3, #29
 8002840:	025b      	lsls	r3, r3, #9
 8002842:	0b1f      	lsrs	r7, r3, #12
 8002844:	08d2      	lsrs	r2, r2, #3
 8002846:	4316      	orrs	r6, r2
 8002848:	2300      	movs	r3, #0
 800284a:	e606      	b.n	800245a <__aeabi_dmul+0xd6>
 800284c:	2780      	movs	r7, #128	; 0x80
 800284e:	033f      	lsls	r7, r7, #12
 8002850:	431f      	orrs	r7, r3
 8002852:	033f      	lsls	r7, r7, #12
 8002854:	0b3f      	lsrs	r7, r7, #12
 8002856:	0016      	movs	r6, r2
 8002858:	4b00      	ldr	r3, [pc, #0]	; (800285c <__aeabi_dmul+0x4d8>)
 800285a:	e5fe      	b.n	800245a <__aeabi_dmul+0xd6>
 800285c:	000007ff 	.word	0x000007ff
 8002860:	0000041e 	.word	0x0000041e
 8002864:	0000043e 	.word	0x0000043e

08002868 <__aeabi_dsub>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	4657      	mov	r7, sl
 800286c:	464e      	mov	r6, r9
 800286e:	4645      	mov	r5, r8
 8002870:	46de      	mov	lr, fp
 8002872:	000c      	movs	r4, r1
 8002874:	0309      	lsls	r1, r1, #12
 8002876:	b5e0      	push	{r5, r6, r7, lr}
 8002878:	0a49      	lsrs	r1, r1, #9
 800287a:	0f46      	lsrs	r6, r0, #29
 800287c:	005f      	lsls	r7, r3, #1
 800287e:	4331      	orrs	r1, r6
 8002880:	031e      	lsls	r6, r3, #12
 8002882:	0fdb      	lsrs	r3, r3, #31
 8002884:	0a76      	lsrs	r6, r6, #9
 8002886:	469b      	mov	fp, r3
 8002888:	0f53      	lsrs	r3, r2, #29
 800288a:	4333      	orrs	r3, r6
 800288c:	4ec8      	ldr	r6, [pc, #800]	; (8002bb0 <__aeabi_dsub+0x348>)
 800288e:	0065      	lsls	r5, r4, #1
 8002890:	00c0      	lsls	r0, r0, #3
 8002892:	0fe4      	lsrs	r4, r4, #31
 8002894:	00d2      	lsls	r2, r2, #3
 8002896:	0d6d      	lsrs	r5, r5, #21
 8002898:	46a2      	mov	sl, r4
 800289a:	4681      	mov	r9, r0
 800289c:	0d7f      	lsrs	r7, r7, #21
 800289e:	469c      	mov	ip, r3
 80028a0:	4690      	mov	r8, r2
 80028a2:	42b7      	cmp	r7, r6
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x40>
 80028a6:	e0b9      	b.n	8002a1c <__aeabi_dsub+0x1b4>
 80028a8:	465b      	mov	r3, fp
 80028aa:	2601      	movs	r6, #1
 80028ac:	4073      	eors	r3, r6
 80028ae:	469b      	mov	fp, r3
 80028b0:	1bee      	subs	r6, r5, r7
 80028b2:	45a3      	cmp	fp, r4
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x50>
 80028b6:	e083      	b.n	80029c0 <__aeabi_dsub+0x158>
 80028b8:	2e00      	cmp	r6, #0
 80028ba:	dd63      	ble.n	8002984 <__aeabi_dsub+0x11c>
 80028bc:	2f00      	cmp	r7, #0
 80028be:	d000      	beq.n	80028c2 <__aeabi_dsub+0x5a>
 80028c0:	e0b1      	b.n	8002a26 <__aeabi_dsub+0x1be>
 80028c2:	4663      	mov	r3, ip
 80028c4:	4313      	orrs	r3, r2
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x62>
 80028c8:	e123      	b.n	8002b12 <__aeabi_dsub+0x2aa>
 80028ca:	1e73      	subs	r3, r6, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d000      	beq.n	80028d2 <__aeabi_dsub+0x6a>
 80028d0:	e1ba      	b.n	8002c48 <__aeabi_dsub+0x3e0>
 80028d2:	1a86      	subs	r6, r0, r2
 80028d4:	4663      	mov	r3, ip
 80028d6:	42b0      	cmp	r0, r6
 80028d8:	4180      	sbcs	r0, r0
 80028da:	2501      	movs	r5, #1
 80028dc:	1ac9      	subs	r1, r1, r3
 80028de:	4240      	negs	r0, r0
 80028e0:	1a09      	subs	r1, r1, r0
 80028e2:	020b      	lsls	r3, r1, #8
 80028e4:	d400      	bmi.n	80028e8 <__aeabi_dsub+0x80>
 80028e6:	e147      	b.n	8002b78 <__aeabi_dsub+0x310>
 80028e8:	0249      	lsls	r1, r1, #9
 80028ea:	0a4b      	lsrs	r3, r1, #9
 80028ec:	4698      	mov	r8, r3
 80028ee:	4643      	mov	r3, r8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d100      	bne.n	80028f6 <__aeabi_dsub+0x8e>
 80028f4:	e189      	b.n	8002c0a <__aeabi_dsub+0x3a2>
 80028f6:	4640      	mov	r0, r8
 80028f8:	f000 fba0 	bl	800303c <__clzsi2>
 80028fc:	0003      	movs	r3, r0
 80028fe:	3b08      	subs	r3, #8
 8002900:	2b1f      	cmp	r3, #31
 8002902:	dd00      	ble.n	8002906 <__aeabi_dsub+0x9e>
 8002904:	e17c      	b.n	8002c00 <__aeabi_dsub+0x398>
 8002906:	2220      	movs	r2, #32
 8002908:	0030      	movs	r0, r6
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	4641      	mov	r1, r8
 800290e:	40d0      	lsrs	r0, r2
 8002910:	4099      	lsls	r1, r3
 8002912:	0002      	movs	r2, r0
 8002914:	409e      	lsls	r6, r3
 8002916:	430a      	orrs	r2, r1
 8002918:	429d      	cmp	r5, r3
 800291a:	dd00      	ble.n	800291e <__aeabi_dsub+0xb6>
 800291c:	e16a      	b.n	8002bf4 <__aeabi_dsub+0x38c>
 800291e:	1b5d      	subs	r5, r3, r5
 8002920:	1c6b      	adds	r3, r5, #1
 8002922:	2b1f      	cmp	r3, #31
 8002924:	dd00      	ble.n	8002928 <__aeabi_dsub+0xc0>
 8002926:	e194      	b.n	8002c52 <__aeabi_dsub+0x3ea>
 8002928:	2120      	movs	r1, #32
 800292a:	0010      	movs	r0, r2
 800292c:	0035      	movs	r5, r6
 800292e:	1ac9      	subs	r1, r1, r3
 8002930:	408e      	lsls	r6, r1
 8002932:	40da      	lsrs	r2, r3
 8002934:	4088      	lsls	r0, r1
 8002936:	40dd      	lsrs	r5, r3
 8002938:	1e71      	subs	r1, r6, #1
 800293a:	418e      	sbcs	r6, r1
 800293c:	0011      	movs	r1, r2
 800293e:	2207      	movs	r2, #7
 8002940:	4328      	orrs	r0, r5
 8002942:	2500      	movs	r5, #0
 8002944:	4306      	orrs	r6, r0
 8002946:	4032      	ands	r2, r6
 8002948:	2a00      	cmp	r2, #0
 800294a:	d009      	beq.n	8002960 <__aeabi_dsub+0xf8>
 800294c:	230f      	movs	r3, #15
 800294e:	4033      	ands	r3, r6
 8002950:	2b04      	cmp	r3, #4
 8002952:	d005      	beq.n	8002960 <__aeabi_dsub+0xf8>
 8002954:	1d33      	adds	r3, r6, #4
 8002956:	42b3      	cmp	r3, r6
 8002958:	41b6      	sbcs	r6, r6
 800295a:	4276      	negs	r6, r6
 800295c:	1989      	adds	r1, r1, r6
 800295e:	001e      	movs	r6, r3
 8002960:	020b      	lsls	r3, r1, #8
 8002962:	d400      	bmi.n	8002966 <__aeabi_dsub+0xfe>
 8002964:	e23d      	b.n	8002de2 <__aeabi_dsub+0x57a>
 8002966:	1c6a      	adds	r2, r5, #1
 8002968:	4b91      	ldr	r3, [pc, #580]	; (8002bb0 <__aeabi_dsub+0x348>)
 800296a:	0555      	lsls	r5, r2, #21
 800296c:	0d6d      	lsrs	r5, r5, #21
 800296e:	429a      	cmp	r2, r3
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x10c>
 8002972:	e119      	b.n	8002ba8 <__aeabi_dsub+0x340>
 8002974:	4a8f      	ldr	r2, [pc, #572]	; (8002bb4 <__aeabi_dsub+0x34c>)
 8002976:	08f6      	lsrs	r6, r6, #3
 8002978:	400a      	ands	r2, r1
 800297a:	0757      	lsls	r7, r2, #29
 800297c:	0252      	lsls	r2, r2, #9
 800297e:	4337      	orrs	r7, r6
 8002980:	0b12      	lsrs	r2, r2, #12
 8002982:	e09b      	b.n	8002abc <__aeabi_dsub+0x254>
 8002984:	2e00      	cmp	r6, #0
 8002986:	d000      	beq.n	800298a <__aeabi_dsub+0x122>
 8002988:	e0c5      	b.n	8002b16 <__aeabi_dsub+0x2ae>
 800298a:	1c6e      	adds	r6, r5, #1
 800298c:	0576      	lsls	r6, r6, #21
 800298e:	0d76      	lsrs	r6, r6, #21
 8002990:	2e01      	cmp	r6, #1
 8002992:	dc00      	bgt.n	8002996 <__aeabi_dsub+0x12e>
 8002994:	e148      	b.n	8002c28 <__aeabi_dsub+0x3c0>
 8002996:	4667      	mov	r7, ip
 8002998:	1a86      	subs	r6, r0, r2
 800299a:	1bcb      	subs	r3, r1, r7
 800299c:	42b0      	cmp	r0, r6
 800299e:	41bf      	sbcs	r7, r7
 80029a0:	427f      	negs	r7, r7
 80029a2:	46b8      	mov	r8, r7
 80029a4:	001f      	movs	r7, r3
 80029a6:	4643      	mov	r3, r8
 80029a8:	1aff      	subs	r7, r7, r3
 80029aa:	003b      	movs	r3, r7
 80029ac:	46b8      	mov	r8, r7
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	d500      	bpl.n	80029b4 <__aeabi_dsub+0x14c>
 80029b2:	e15f      	b.n	8002c74 <__aeabi_dsub+0x40c>
 80029b4:	4337      	orrs	r7, r6
 80029b6:	d19a      	bne.n	80028ee <__aeabi_dsub+0x86>
 80029b8:	2200      	movs	r2, #0
 80029ba:	2400      	movs	r4, #0
 80029bc:	2500      	movs	r5, #0
 80029be:	e079      	b.n	8002ab4 <__aeabi_dsub+0x24c>
 80029c0:	2e00      	cmp	r6, #0
 80029c2:	dc00      	bgt.n	80029c6 <__aeabi_dsub+0x15e>
 80029c4:	e0fa      	b.n	8002bbc <__aeabi_dsub+0x354>
 80029c6:	2f00      	cmp	r7, #0
 80029c8:	d100      	bne.n	80029cc <__aeabi_dsub+0x164>
 80029ca:	e08d      	b.n	8002ae8 <__aeabi_dsub+0x280>
 80029cc:	4b78      	ldr	r3, [pc, #480]	; (8002bb0 <__aeabi_dsub+0x348>)
 80029ce:	429d      	cmp	r5, r3
 80029d0:	d067      	beq.n	8002aa2 <__aeabi_dsub+0x23a>
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	4667      	mov	r7, ip
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431f      	orrs	r7, r3
 80029da:	46bc      	mov	ip, r7
 80029dc:	2e38      	cmp	r6, #56	; 0x38
 80029de:	dc00      	bgt.n	80029e2 <__aeabi_dsub+0x17a>
 80029e0:	e152      	b.n	8002c88 <__aeabi_dsub+0x420>
 80029e2:	4663      	mov	r3, ip
 80029e4:	4313      	orrs	r3, r2
 80029e6:	1e5a      	subs	r2, r3, #1
 80029e8:	4193      	sbcs	r3, r2
 80029ea:	181e      	adds	r6, r3, r0
 80029ec:	4286      	cmp	r6, r0
 80029ee:	4180      	sbcs	r0, r0
 80029f0:	4240      	negs	r0, r0
 80029f2:	1809      	adds	r1, r1, r0
 80029f4:	020b      	lsls	r3, r1, #8
 80029f6:	d400      	bmi.n	80029fa <__aeabi_dsub+0x192>
 80029f8:	e0be      	b.n	8002b78 <__aeabi_dsub+0x310>
 80029fa:	4b6d      	ldr	r3, [pc, #436]	; (8002bb0 <__aeabi_dsub+0x348>)
 80029fc:	3501      	adds	r5, #1
 80029fe:	429d      	cmp	r5, r3
 8002a00:	d100      	bne.n	8002a04 <__aeabi_dsub+0x19c>
 8002a02:	e0d2      	b.n	8002baa <__aeabi_dsub+0x342>
 8002a04:	4a6b      	ldr	r2, [pc, #428]	; (8002bb4 <__aeabi_dsub+0x34c>)
 8002a06:	0873      	lsrs	r3, r6, #1
 8002a08:	400a      	ands	r2, r1
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	400e      	ands	r6, r1
 8002a0e:	431e      	orrs	r6, r3
 8002a10:	0851      	lsrs	r1, r2, #1
 8002a12:	07d3      	lsls	r3, r2, #31
 8002a14:	2207      	movs	r2, #7
 8002a16:	431e      	orrs	r6, r3
 8002a18:	4032      	ands	r2, r6
 8002a1a:	e795      	b.n	8002948 <__aeabi_dsub+0xe0>
 8002a1c:	001e      	movs	r6, r3
 8002a1e:	4316      	orrs	r6, r2
 8002a20:	d000      	beq.n	8002a24 <__aeabi_dsub+0x1bc>
 8002a22:	e745      	b.n	80028b0 <__aeabi_dsub+0x48>
 8002a24:	e740      	b.n	80028a8 <__aeabi_dsub+0x40>
 8002a26:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <__aeabi_dsub+0x348>)
 8002a28:	429d      	cmp	r5, r3
 8002a2a:	d03a      	beq.n	8002aa2 <__aeabi_dsub+0x23a>
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	4667      	mov	r7, ip
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	431f      	orrs	r7, r3
 8002a34:	46bc      	mov	ip, r7
 8002a36:	2e38      	cmp	r6, #56	; 0x38
 8002a38:	dd00      	ble.n	8002a3c <__aeabi_dsub+0x1d4>
 8002a3a:	e0eb      	b.n	8002c14 <__aeabi_dsub+0x3ac>
 8002a3c:	2e1f      	cmp	r6, #31
 8002a3e:	dc00      	bgt.n	8002a42 <__aeabi_dsub+0x1da>
 8002a40:	e13a      	b.n	8002cb8 <__aeabi_dsub+0x450>
 8002a42:	0033      	movs	r3, r6
 8002a44:	4667      	mov	r7, ip
 8002a46:	3b20      	subs	r3, #32
 8002a48:	40df      	lsrs	r7, r3
 8002a4a:	003b      	movs	r3, r7
 8002a4c:	2e20      	cmp	r6, #32
 8002a4e:	d005      	beq.n	8002a5c <__aeabi_dsub+0x1f4>
 8002a50:	2740      	movs	r7, #64	; 0x40
 8002a52:	1bbf      	subs	r7, r7, r6
 8002a54:	4666      	mov	r6, ip
 8002a56:	40be      	lsls	r6, r7
 8002a58:	4332      	orrs	r2, r6
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	4646      	mov	r6, r8
 8002a5e:	1e72      	subs	r2, r6, #1
 8002a60:	4196      	sbcs	r6, r2
 8002a62:	4333      	orrs	r3, r6
 8002a64:	e0da      	b.n	8002c1c <__aeabi_dsub+0x3b4>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x204>
 8002a6a:	e214      	b.n	8002e96 <__aeabi_dsub+0x62e>
 8002a6c:	4663      	mov	r3, ip
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	d100      	bne.n	8002a74 <__aeabi_dsub+0x20c>
 8002a72:	e168      	b.n	8002d46 <__aeabi_dsub+0x4de>
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	074e      	lsls	r6, r1, #29
 8002a78:	08c0      	lsrs	r0, r0, #3
 8002a7a:	08c9      	lsrs	r1, r1, #3
 8002a7c:	031b      	lsls	r3, r3, #12
 8002a7e:	4306      	orrs	r6, r0
 8002a80:	4219      	tst	r1, r3
 8002a82:	d008      	beq.n	8002a96 <__aeabi_dsub+0x22e>
 8002a84:	4660      	mov	r0, ip
 8002a86:	08c0      	lsrs	r0, r0, #3
 8002a88:	4218      	tst	r0, r3
 8002a8a:	d104      	bne.n	8002a96 <__aeabi_dsub+0x22e>
 8002a8c:	4663      	mov	r3, ip
 8002a8e:	0001      	movs	r1, r0
 8002a90:	08d2      	lsrs	r2, r2, #3
 8002a92:	075e      	lsls	r6, r3, #29
 8002a94:	4316      	orrs	r6, r2
 8002a96:	00f3      	lsls	r3, r6, #3
 8002a98:	4699      	mov	r9, r3
 8002a9a:	00c9      	lsls	r1, r1, #3
 8002a9c:	0f72      	lsrs	r2, r6, #29
 8002a9e:	4d44      	ldr	r5, [pc, #272]	; (8002bb0 <__aeabi_dsub+0x348>)
 8002aa0:	4311      	orrs	r1, r2
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	08de      	lsrs	r6, r3, #3
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <__aeabi_dsub+0x348>)
 8002aa8:	074f      	lsls	r7, r1, #29
 8002aaa:	4337      	orrs	r7, r6
 8002aac:	08ca      	lsrs	r2, r1, #3
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x24c>
 8002ab2:	e06e      	b.n	8002b92 <__aeabi_dsub+0x32a>
 8002ab4:	0312      	lsls	r2, r2, #12
 8002ab6:	056d      	lsls	r5, r5, #21
 8002ab8:	0b12      	lsrs	r2, r2, #12
 8002aba:	0d6d      	lsrs	r5, r5, #21
 8002abc:	2100      	movs	r1, #0
 8002abe:	0312      	lsls	r2, r2, #12
 8002ac0:	0b13      	lsrs	r3, r2, #12
 8002ac2:	0d0a      	lsrs	r2, r1, #20
 8002ac4:	0512      	lsls	r2, r2, #20
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <__aeabi_dsub+0x350>)
 8002aca:	052d      	lsls	r5, r5, #20
 8002acc:	4013      	ands	r3, r2
 8002ace:	432b      	orrs	r3, r5
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	07e4      	lsls	r4, r4, #31
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	4323      	orrs	r3, r4
 8002ad8:	0038      	movs	r0, r7
 8002ada:	0019      	movs	r1, r3
 8002adc:	bc3c      	pop	{r2, r3, r4, r5}
 8002ade:	4690      	mov	r8, r2
 8002ae0:	4699      	mov	r9, r3
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	46ab      	mov	fp, r5
 8002ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae8:	4663      	mov	r3, ip
 8002aea:	4313      	orrs	r3, r2
 8002aec:	d011      	beq.n	8002b12 <__aeabi_dsub+0x2aa>
 8002aee:	1e73      	subs	r3, r6, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d000      	beq.n	8002af6 <__aeabi_dsub+0x28e>
 8002af4:	e107      	b.n	8002d06 <__aeabi_dsub+0x49e>
 8002af6:	1886      	adds	r6, r0, r2
 8002af8:	4286      	cmp	r6, r0
 8002afa:	4180      	sbcs	r0, r0
 8002afc:	4461      	add	r1, ip
 8002afe:	4240      	negs	r0, r0
 8002b00:	1809      	adds	r1, r1, r0
 8002b02:	2501      	movs	r5, #1
 8002b04:	020b      	lsls	r3, r1, #8
 8002b06:	d537      	bpl.n	8002b78 <__aeabi_dsub+0x310>
 8002b08:	2502      	movs	r5, #2
 8002b0a:	e77b      	b.n	8002a04 <__aeabi_dsub+0x19c>
 8002b0c:	003e      	movs	r6, r7
 8002b0e:	4661      	mov	r1, ip
 8002b10:	4691      	mov	r9, r2
 8002b12:	0035      	movs	r5, r6
 8002b14:	e7c5      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002b16:	465c      	mov	r4, fp
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_dsub+0x2b6>
 8002b1c:	e0e1      	b.n	8002ce2 <__aeabi_dsub+0x47a>
 8002b1e:	000b      	movs	r3, r1
 8002b20:	4303      	orrs	r3, r0
 8002b22:	d0f3      	beq.n	8002b0c <__aeabi_dsub+0x2a4>
 8002b24:	1c73      	adds	r3, r6, #1
 8002b26:	d100      	bne.n	8002b2a <__aeabi_dsub+0x2c2>
 8002b28:	e1ac      	b.n	8002e84 <__aeabi_dsub+0x61c>
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <__aeabi_dsub+0x348>)
 8002b2c:	429f      	cmp	r7, r3
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x2ca>
 8002b30:	e13a      	b.n	8002da8 <__aeabi_dsub+0x540>
 8002b32:	43f3      	mvns	r3, r6
 8002b34:	2b38      	cmp	r3, #56	; 0x38
 8002b36:	dd00      	ble.n	8002b3a <__aeabi_dsub+0x2d2>
 8002b38:	e16f      	b.n	8002e1a <__aeabi_dsub+0x5b2>
 8002b3a:	2b1f      	cmp	r3, #31
 8002b3c:	dd00      	ble.n	8002b40 <__aeabi_dsub+0x2d8>
 8002b3e:	e18c      	b.n	8002e5a <__aeabi_dsub+0x5f2>
 8002b40:	2520      	movs	r5, #32
 8002b42:	000e      	movs	r6, r1
 8002b44:	1aed      	subs	r5, r5, r3
 8002b46:	40ae      	lsls	r6, r5
 8002b48:	46b0      	mov	r8, r6
 8002b4a:	0006      	movs	r6, r0
 8002b4c:	46aa      	mov	sl, r5
 8002b4e:	40de      	lsrs	r6, r3
 8002b50:	4645      	mov	r5, r8
 8002b52:	4335      	orrs	r5, r6
 8002b54:	002e      	movs	r6, r5
 8002b56:	4655      	mov	r5, sl
 8002b58:	40d9      	lsrs	r1, r3
 8002b5a:	40a8      	lsls	r0, r5
 8002b5c:	4663      	mov	r3, ip
 8002b5e:	1e45      	subs	r5, r0, #1
 8002b60:	41a8      	sbcs	r0, r5
 8002b62:	1a5b      	subs	r3, r3, r1
 8002b64:	469c      	mov	ip, r3
 8002b66:	4330      	orrs	r0, r6
 8002b68:	1a16      	subs	r6, r2, r0
 8002b6a:	42b2      	cmp	r2, r6
 8002b6c:	4192      	sbcs	r2, r2
 8002b6e:	4663      	mov	r3, ip
 8002b70:	4252      	negs	r2, r2
 8002b72:	1a99      	subs	r1, r3, r2
 8002b74:	003d      	movs	r5, r7
 8002b76:	e6b4      	b.n	80028e2 <__aeabi_dsub+0x7a>
 8002b78:	2207      	movs	r2, #7
 8002b7a:	4032      	ands	r2, r6
 8002b7c:	2a00      	cmp	r2, #0
 8002b7e:	d000      	beq.n	8002b82 <__aeabi_dsub+0x31a>
 8002b80:	e6e4      	b.n	800294c <__aeabi_dsub+0xe4>
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <__aeabi_dsub+0x348>)
 8002b84:	08f6      	lsrs	r6, r6, #3
 8002b86:	074f      	lsls	r7, r1, #29
 8002b88:	4337      	orrs	r7, r6
 8002b8a:	08ca      	lsrs	r2, r1, #3
 8002b8c:	429d      	cmp	r5, r3
 8002b8e:	d000      	beq.n	8002b92 <__aeabi_dsub+0x32a>
 8002b90:	e790      	b.n	8002ab4 <__aeabi_dsub+0x24c>
 8002b92:	003b      	movs	r3, r7
 8002b94:	4313      	orrs	r3, r2
 8002b96:	d100      	bne.n	8002b9a <__aeabi_dsub+0x332>
 8002b98:	e1a6      	b.n	8002ee8 <__aeabi_dsub+0x680>
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	031b      	lsls	r3, r3, #12
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	0312      	lsls	r2, r2, #12
 8002ba2:	0b12      	lsrs	r2, r2, #12
 8002ba4:	4d02      	ldr	r5, [pc, #8]	; (8002bb0 <__aeabi_dsub+0x348>)
 8002ba6:	e789      	b.n	8002abc <__aeabi_dsub+0x254>
 8002ba8:	0015      	movs	r5, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	2700      	movs	r7, #0
 8002bae:	e785      	b.n	8002abc <__aeabi_dsub+0x254>
 8002bb0:	000007ff 	.word	0x000007ff
 8002bb4:	ff7fffff 	.word	0xff7fffff
 8002bb8:	800fffff 	.word	0x800fffff
 8002bbc:	2e00      	cmp	r6, #0
 8002bbe:	d000      	beq.n	8002bc2 <__aeabi_dsub+0x35a>
 8002bc0:	e0c7      	b.n	8002d52 <__aeabi_dsub+0x4ea>
 8002bc2:	1c6b      	adds	r3, r5, #1
 8002bc4:	055e      	lsls	r6, r3, #21
 8002bc6:	0d76      	lsrs	r6, r6, #21
 8002bc8:	2e01      	cmp	r6, #1
 8002bca:	dc00      	bgt.n	8002bce <__aeabi_dsub+0x366>
 8002bcc:	e0f0      	b.n	8002db0 <__aeabi_dsub+0x548>
 8002bce:	4dc8      	ldr	r5, [pc, #800]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002bd0:	42ab      	cmp	r3, r5
 8002bd2:	d100      	bne.n	8002bd6 <__aeabi_dsub+0x36e>
 8002bd4:	e0b9      	b.n	8002d4a <__aeabi_dsub+0x4e2>
 8002bd6:	1885      	adds	r5, r0, r2
 8002bd8:	000a      	movs	r2, r1
 8002bda:	4285      	cmp	r5, r0
 8002bdc:	4189      	sbcs	r1, r1
 8002bde:	4462      	add	r2, ip
 8002be0:	4249      	negs	r1, r1
 8002be2:	1851      	adds	r1, r2, r1
 8002be4:	2207      	movs	r2, #7
 8002be6:	07ce      	lsls	r6, r1, #31
 8002be8:	086d      	lsrs	r5, r5, #1
 8002bea:	432e      	orrs	r6, r5
 8002bec:	0849      	lsrs	r1, r1, #1
 8002bee:	4032      	ands	r2, r6
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	e6a9      	b.n	8002948 <__aeabi_dsub+0xe0>
 8002bf4:	49bf      	ldr	r1, [pc, #764]	; (8002ef4 <__aeabi_dsub+0x68c>)
 8002bf6:	1aed      	subs	r5, r5, r3
 8002bf8:	4011      	ands	r1, r2
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	4032      	ands	r2, r6
 8002bfe:	e6a3      	b.n	8002948 <__aeabi_dsub+0xe0>
 8002c00:	0032      	movs	r2, r6
 8002c02:	3828      	subs	r0, #40	; 0x28
 8002c04:	4082      	lsls	r2, r0
 8002c06:	2600      	movs	r6, #0
 8002c08:	e686      	b.n	8002918 <__aeabi_dsub+0xb0>
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	f000 fa16 	bl	800303c <__clzsi2>
 8002c10:	3020      	adds	r0, #32
 8002c12:	e673      	b.n	80028fc <__aeabi_dsub+0x94>
 8002c14:	4663      	mov	r3, ip
 8002c16:	4313      	orrs	r3, r2
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	4193      	sbcs	r3, r2
 8002c1c:	1ac6      	subs	r6, r0, r3
 8002c1e:	42b0      	cmp	r0, r6
 8002c20:	4180      	sbcs	r0, r0
 8002c22:	4240      	negs	r0, r0
 8002c24:	1a09      	subs	r1, r1, r0
 8002c26:	e65c      	b.n	80028e2 <__aeabi_dsub+0x7a>
 8002c28:	000e      	movs	r6, r1
 8002c2a:	4667      	mov	r7, ip
 8002c2c:	4306      	orrs	r6, r0
 8002c2e:	4317      	orrs	r7, r2
 8002c30:	2d00      	cmp	r5, #0
 8002c32:	d15e      	bne.n	8002cf2 <__aeabi_dsub+0x48a>
 8002c34:	2e00      	cmp	r6, #0
 8002c36:	d000      	beq.n	8002c3a <__aeabi_dsub+0x3d2>
 8002c38:	e0f3      	b.n	8002e22 <__aeabi_dsub+0x5ba>
 8002c3a:	2f00      	cmp	r7, #0
 8002c3c:	d100      	bne.n	8002c40 <__aeabi_dsub+0x3d8>
 8002c3e:	e11e      	b.n	8002e7e <__aeabi_dsub+0x616>
 8002c40:	465c      	mov	r4, fp
 8002c42:	4661      	mov	r1, ip
 8002c44:	4691      	mov	r9, r2
 8002c46:	e72c      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002c48:	4fa9      	ldr	r7, [pc, #676]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002c4a:	42be      	cmp	r6, r7
 8002c4c:	d07b      	beq.n	8002d46 <__aeabi_dsub+0x4de>
 8002c4e:	001e      	movs	r6, r3
 8002c50:	e6f1      	b.n	8002a36 <__aeabi_dsub+0x1ce>
 8002c52:	0010      	movs	r0, r2
 8002c54:	3d1f      	subs	r5, #31
 8002c56:	40e8      	lsrs	r0, r5
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d003      	beq.n	8002c64 <__aeabi_dsub+0x3fc>
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	1acb      	subs	r3, r1, r3
 8002c60:	409a      	lsls	r2, r3
 8002c62:	4316      	orrs	r6, r2
 8002c64:	1e73      	subs	r3, r6, #1
 8002c66:	419e      	sbcs	r6, r3
 8002c68:	2207      	movs	r2, #7
 8002c6a:	4306      	orrs	r6, r0
 8002c6c:	4032      	ands	r2, r6
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2500      	movs	r5, #0
 8002c72:	e783      	b.n	8002b7c <__aeabi_dsub+0x314>
 8002c74:	1a16      	subs	r6, r2, r0
 8002c76:	4663      	mov	r3, ip
 8002c78:	42b2      	cmp	r2, r6
 8002c7a:	4180      	sbcs	r0, r0
 8002c7c:	1a59      	subs	r1, r3, r1
 8002c7e:	4240      	negs	r0, r0
 8002c80:	1a0b      	subs	r3, r1, r0
 8002c82:	4698      	mov	r8, r3
 8002c84:	465c      	mov	r4, fp
 8002c86:	e632      	b.n	80028ee <__aeabi_dsub+0x86>
 8002c88:	2e1f      	cmp	r6, #31
 8002c8a:	dd00      	ble.n	8002c8e <__aeabi_dsub+0x426>
 8002c8c:	e0ab      	b.n	8002de6 <__aeabi_dsub+0x57e>
 8002c8e:	2720      	movs	r7, #32
 8002c90:	1bbb      	subs	r3, r7, r6
 8002c92:	469a      	mov	sl, r3
 8002c94:	4663      	mov	r3, ip
 8002c96:	4657      	mov	r7, sl
 8002c98:	40bb      	lsls	r3, r7
 8002c9a:	4699      	mov	r9, r3
 8002c9c:	0013      	movs	r3, r2
 8002c9e:	464f      	mov	r7, r9
 8002ca0:	40f3      	lsrs	r3, r6
 8002ca2:	431f      	orrs	r7, r3
 8002ca4:	003b      	movs	r3, r7
 8002ca6:	4657      	mov	r7, sl
 8002ca8:	40ba      	lsls	r2, r7
 8002caa:	1e57      	subs	r7, r2, #1
 8002cac:	41ba      	sbcs	r2, r7
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	4662      	mov	r2, ip
 8002cb2:	40f2      	lsrs	r2, r6
 8002cb4:	1889      	adds	r1, r1, r2
 8002cb6:	e698      	b.n	80029ea <__aeabi_dsub+0x182>
 8002cb8:	2720      	movs	r7, #32
 8002cba:	1bbb      	subs	r3, r7, r6
 8002cbc:	469a      	mov	sl, r3
 8002cbe:	4663      	mov	r3, ip
 8002cc0:	4657      	mov	r7, sl
 8002cc2:	40bb      	lsls	r3, r7
 8002cc4:	4699      	mov	r9, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	464f      	mov	r7, r9
 8002cca:	40f3      	lsrs	r3, r6
 8002ccc:	431f      	orrs	r7, r3
 8002cce:	003b      	movs	r3, r7
 8002cd0:	4657      	mov	r7, sl
 8002cd2:	40ba      	lsls	r2, r7
 8002cd4:	1e57      	subs	r7, r2, #1
 8002cd6:	41ba      	sbcs	r2, r7
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	4662      	mov	r2, ip
 8002cdc:	40f2      	lsrs	r2, r6
 8002cde:	1a89      	subs	r1, r1, r2
 8002ce0:	e79c      	b.n	8002c1c <__aeabi_dsub+0x3b4>
 8002ce2:	4b83      	ldr	r3, [pc, #524]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002ce4:	429f      	cmp	r7, r3
 8002ce6:	d05f      	beq.n	8002da8 <__aeabi_dsub+0x540>
 8002ce8:	2580      	movs	r5, #128	; 0x80
 8002cea:	042d      	lsls	r5, r5, #16
 8002cec:	4273      	negs	r3, r6
 8002cee:	4329      	orrs	r1, r5
 8002cf0:	e720      	b.n	8002b34 <__aeabi_dsub+0x2cc>
 8002cf2:	2e00      	cmp	r6, #0
 8002cf4:	d10c      	bne.n	8002d10 <__aeabi_dsub+0x4a8>
 8002cf6:	2f00      	cmp	r7, #0
 8002cf8:	d100      	bne.n	8002cfc <__aeabi_dsub+0x494>
 8002cfa:	e0d0      	b.n	8002e9e <__aeabi_dsub+0x636>
 8002cfc:	465c      	mov	r4, fp
 8002cfe:	4661      	mov	r1, ip
 8002d00:	4691      	mov	r9, r2
 8002d02:	4d7b      	ldr	r5, [pc, #492]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002d04:	e6cd      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002d06:	4f7a      	ldr	r7, [pc, #488]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002d08:	42be      	cmp	r6, r7
 8002d0a:	d01c      	beq.n	8002d46 <__aeabi_dsub+0x4de>
 8002d0c:	001e      	movs	r6, r3
 8002d0e:	e665      	b.n	80029dc <__aeabi_dsub+0x174>
 8002d10:	2f00      	cmp	r7, #0
 8002d12:	d018      	beq.n	8002d46 <__aeabi_dsub+0x4de>
 8002d14:	08c0      	lsrs	r0, r0, #3
 8002d16:	074e      	lsls	r6, r1, #29
 8002d18:	4306      	orrs	r6, r0
 8002d1a:	2080      	movs	r0, #128	; 0x80
 8002d1c:	08c9      	lsrs	r1, r1, #3
 8002d1e:	0300      	lsls	r0, r0, #12
 8002d20:	4201      	tst	r1, r0
 8002d22:	d008      	beq.n	8002d36 <__aeabi_dsub+0x4ce>
 8002d24:	4663      	mov	r3, ip
 8002d26:	08dc      	lsrs	r4, r3, #3
 8002d28:	4204      	tst	r4, r0
 8002d2a:	d104      	bne.n	8002d36 <__aeabi_dsub+0x4ce>
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	46da      	mov	sl, fp
 8002d30:	08d2      	lsrs	r2, r2, #3
 8002d32:	075e      	lsls	r6, r3, #29
 8002d34:	4316      	orrs	r6, r2
 8002d36:	00f3      	lsls	r3, r6, #3
 8002d38:	4699      	mov	r9, r3
 8002d3a:	2401      	movs	r4, #1
 8002d3c:	4653      	mov	r3, sl
 8002d3e:	00c9      	lsls	r1, r1, #3
 8002d40:	0f72      	lsrs	r2, r6, #29
 8002d42:	4311      	orrs	r1, r2
 8002d44:	401c      	ands	r4, r3
 8002d46:	4d6a      	ldr	r5, [pc, #424]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002d48:	e6ab      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002d4a:	001d      	movs	r5, r3
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2700      	movs	r7, #0
 8002d50:	e6b4      	b.n	8002abc <__aeabi_dsub+0x254>
 8002d52:	2d00      	cmp	r5, #0
 8002d54:	d159      	bne.n	8002e0a <__aeabi_dsub+0x5a2>
 8002d56:	000b      	movs	r3, r1
 8002d58:	4303      	orrs	r3, r0
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x4f6>
 8002d5c:	e6d6      	b.n	8002b0c <__aeabi_dsub+0x2a4>
 8002d5e:	1c73      	adds	r3, r6, #1
 8002d60:	d100      	bne.n	8002d64 <__aeabi_dsub+0x4fc>
 8002d62:	e0b2      	b.n	8002eca <__aeabi_dsub+0x662>
 8002d64:	4b62      	ldr	r3, [pc, #392]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002d66:	429f      	cmp	r7, r3
 8002d68:	d01e      	beq.n	8002da8 <__aeabi_dsub+0x540>
 8002d6a:	43f3      	mvns	r3, r6
 8002d6c:	2b38      	cmp	r3, #56	; 0x38
 8002d6e:	dc6f      	bgt.n	8002e50 <__aeabi_dsub+0x5e8>
 8002d70:	2b1f      	cmp	r3, #31
 8002d72:	dd00      	ble.n	8002d76 <__aeabi_dsub+0x50e>
 8002d74:	e097      	b.n	8002ea6 <__aeabi_dsub+0x63e>
 8002d76:	2520      	movs	r5, #32
 8002d78:	000e      	movs	r6, r1
 8002d7a:	1aed      	subs	r5, r5, r3
 8002d7c:	40ae      	lsls	r6, r5
 8002d7e:	46b0      	mov	r8, r6
 8002d80:	0006      	movs	r6, r0
 8002d82:	46aa      	mov	sl, r5
 8002d84:	40de      	lsrs	r6, r3
 8002d86:	4645      	mov	r5, r8
 8002d88:	4335      	orrs	r5, r6
 8002d8a:	002e      	movs	r6, r5
 8002d8c:	4655      	mov	r5, sl
 8002d8e:	40a8      	lsls	r0, r5
 8002d90:	40d9      	lsrs	r1, r3
 8002d92:	1e45      	subs	r5, r0, #1
 8002d94:	41a8      	sbcs	r0, r5
 8002d96:	448c      	add	ip, r1
 8002d98:	4306      	orrs	r6, r0
 8002d9a:	18b6      	adds	r6, r6, r2
 8002d9c:	4296      	cmp	r6, r2
 8002d9e:	4192      	sbcs	r2, r2
 8002da0:	4251      	negs	r1, r2
 8002da2:	4461      	add	r1, ip
 8002da4:	003d      	movs	r5, r7
 8002da6:	e625      	b.n	80029f4 <__aeabi_dsub+0x18c>
 8002da8:	003d      	movs	r5, r7
 8002daa:	4661      	mov	r1, ip
 8002dac:	4691      	mov	r9, r2
 8002dae:	e678      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002db0:	000b      	movs	r3, r1
 8002db2:	4303      	orrs	r3, r0
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	d000      	beq.n	8002dba <__aeabi_dsub+0x552>
 8002db8:	e655      	b.n	8002a66 <__aeabi_dsub+0x1fe>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f5      	beq.n	8002daa <__aeabi_dsub+0x542>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <__aeabi_dsub+0x55e>
 8002dc4:	e66d      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002dc6:	1886      	adds	r6, r0, r2
 8002dc8:	4286      	cmp	r6, r0
 8002dca:	4180      	sbcs	r0, r0
 8002dcc:	4461      	add	r1, ip
 8002dce:	4240      	negs	r0, r0
 8002dd0:	1809      	adds	r1, r1, r0
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	020b      	lsls	r3, r1, #8
 8002dd6:	d400      	bmi.n	8002dda <__aeabi_dsub+0x572>
 8002dd8:	e6d0      	b.n	8002b7c <__aeabi_dsub+0x314>
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <__aeabi_dsub+0x68c>)
 8002ddc:	3501      	adds	r5, #1
 8002dde:	4019      	ands	r1, r3
 8002de0:	e5b2      	b.n	8002948 <__aeabi_dsub+0xe0>
 8002de2:	46b1      	mov	r9, r6
 8002de4:	e65d      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002de6:	0033      	movs	r3, r6
 8002de8:	4667      	mov	r7, ip
 8002dea:	3b20      	subs	r3, #32
 8002dec:	40df      	lsrs	r7, r3
 8002dee:	003b      	movs	r3, r7
 8002df0:	2e20      	cmp	r6, #32
 8002df2:	d005      	beq.n	8002e00 <__aeabi_dsub+0x598>
 8002df4:	2740      	movs	r7, #64	; 0x40
 8002df6:	1bbf      	subs	r7, r7, r6
 8002df8:	4666      	mov	r6, ip
 8002dfa:	40be      	lsls	r6, r7
 8002dfc:	4332      	orrs	r2, r6
 8002dfe:	4690      	mov	r8, r2
 8002e00:	4646      	mov	r6, r8
 8002e02:	1e72      	subs	r2, r6, #1
 8002e04:	4196      	sbcs	r6, r2
 8002e06:	4333      	orrs	r3, r6
 8002e08:	e5ef      	b.n	80029ea <__aeabi_dsub+0x182>
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002e0c:	429f      	cmp	r7, r3
 8002e0e:	d0cb      	beq.n	8002da8 <__aeabi_dsub+0x540>
 8002e10:	2580      	movs	r5, #128	; 0x80
 8002e12:	042d      	lsls	r5, r5, #16
 8002e14:	4273      	negs	r3, r6
 8002e16:	4329      	orrs	r1, r5
 8002e18:	e7a8      	b.n	8002d6c <__aeabi_dsub+0x504>
 8002e1a:	4308      	orrs	r0, r1
 8002e1c:	1e41      	subs	r1, r0, #1
 8002e1e:	4188      	sbcs	r0, r1
 8002e20:	e6a2      	b.n	8002b68 <__aeabi_dsub+0x300>
 8002e22:	2f00      	cmp	r7, #0
 8002e24:	d100      	bne.n	8002e28 <__aeabi_dsub+0x5c0>
 8002e26:	e63c      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002e28:	4663      	mov	r3, ip
 8002e2a:	1a86      	subs	r6, r0, r2
 8002e2c:	1acf      	subs	r7, r1, r3
 8002e2e:	42b0      	cmp	r0, r6
 8002e30:	419b      	sbcs	r3, r3
 8002e32:	425b      	negs	r3, r3
 8002e34:	1afb      	subs	r3, r7, r3
 8002e36:	4698      	mov	r8, r3
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	d54e      	bpl.n	8002eda <__aeabi_dsub+0x672>
 8002e3c:	1a16      	subs	r6, r2, r0
 8002e3e:	4663      	mov	r3, ip
 8002e40:	42b2      	cmp	r2, r6
 8002e42:	4192      	sbcs	r2, r2
 8002e44:	1a59      	subs	r1, r3, r1
 8002e46:	4252      	negs	r2, r2
 8002e48:	1a89      	subs	r1, r1, r2
 8002e4a:	465c      	mov	r4, fp
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	e57b      	b.n	8002948 <__aeabi_dsub+0xe0>
 8002e50:	4301      	orrs	r1, r0
 8002e52:	000e      	movs	r6, r1
 8002e54:	1e71      	subs	r1, r6, #1
 8002e56:	418e      	sbcs	r6, r1
 8002e58:	e79f      	b.n	8002d9a <__aeabi_dsub+0x532>
 8002e5a:	001d      	movs	r5, r3
 8002e5c:	000e      	movs	r6, r1
 8002e5e:	3d20      	subs	r5, #32
 8002e60:	40ee      	lsrs	r6, r5
 8002e62:	46b0      	mov	r8, r6
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d004      	beq.n	8002e72 <__aeabi_dsub+0x60a>
 8002e68:	2540      	movs	r5, #64	; 0x40
 8002e6a:	1aeb      	subs	r3, r5, r3
 8002e6c:	4099      	lsls	r1, r3
 8002e6e:	4308      	orrs	r0, r1
 8002e70:	4681      	mov	r9, r0
 8002e72:	4648      	mov	r0, r9
 8002e74:	4643      	mov	r3, r8
 8002e76:	1e41      	subs	r1, r0, #1
 8002e78:	4188      	sbcs	r0, r1
 8002e7a:	4318      	orrs	r0, r3
 8002e7c:	e674      	b.n	8002b68 <__aeabi_dsub+0x300>
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2400      	movs	r4, #0
 8002e82:	e617      	b.n	8002ab4 <__aeabi_dsub+0x24c>
 8002e84:	1a16      	subs	r6, r2, r0
 8002e86:	4663      	mov	r3, ip
 8002e88:	42b2      	cmp	r2, r6
 8002e8a:	4192      	sbcs	r2, r2
 8002e8c:	1a59      	subs	r1, r3, r1
 8002e8e:	4252      	negs	r2, r2
 8002e90:	1a89      	subs	r1, r1, r2
 8002e92:	003d      	movs	r5, r7
 8002e94:	e525      	b.n	80028e2 <__aeabi_dsub+0x7a>
 8002e96:	4661      	mov	r1, ip
 8002e98:	4691      	mov	r9, r2
 8002e9a:	4d15      	ldr	r5, [pc, #84]	; (8002ef0 <__aeabi_dsub+0x688>)
 8002e9c:	e601      	b.n	8002aa2 <__aeabi_dsub+0x23a>
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	2400      	movs	r4, #0
 8002ea2:	0312      	lsls	r2, r2, #12
 8002ea4:	e679      	b.n	8002b9a <__aeabi_dsub+0x332>
 8002ea6:	001d      	movs	r5, r3
 8002ea8:	000e      	movs	r6, r1
 8002eaa:	3d20      	subs	r5, #32
 8002eac:	40ee      	lsrs	r6, r5
 8002eae:	46b0      	mov	r8, r6
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d004      	beq.n	8002ebe <__aeabi_dsub+0x656>
 8002eb4:	2540      	movs	r5, #64	; 0x40
 8002eb6:	1aeb      	subs	r3, r5, r3
 8002eb8:	4099      	lsls	r1, r3
 8002eba:	4308      	orrs	r0, r1
 8002ebc:	4681      	mov	r9, r0
 8002ebe:	464e      	mov	r6, r9
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	1e71      	subs	r1, r6, #1
 8002ec4:	418e      	sbcs	r6, r1
 8002ec6:	431e      	orrs	r6, r3
 8002ec8:	e767      	b.n	8002d9a <__aeabi_dsub+0x532>
 8002eca:	1886      	adds	r6, r0, r2
 8002ecc:	4296      	cmp	r6, r2
 8002ece:	419b      	sbcs	r3, r3
 8002ed0:	4461      	add	r1, ip
 8002ed2:	425b      	negs	r3, r3
 8002ed4:	18c9      	adds	r1, r1, r3
 8002ed6:	003d      	movs	r5, r7
 8002ed8:	e58c      	b.n	80029f4 <__aeabi_dsub+0x18c>
 8002eda:	4647      	mov	r7, r8
 8002edc:	4337      	orrs	r7, r6
 8002ede:	d0ce      	beq.n	8002e7e <__aeabi_dsub+0x616>
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	4032      	ands	r2, r6
 8002ee6:	e649      	b.n	8002b7c <__aeabi_dsub+0x314>
 8002ee8:	2700      	movs	r7, #0
 8002eea:	003a      	movs	r2, r7
 8002eec:	e5e6      	b.n	8002abc <__aeabi_dsub+0x254>
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	000007ff 	.word	0x000007ff
 8002ef4:	ff7fffff 	.word	0xff7fffff

08002ef8 <__aeabi_d2iz>:
 8002ef8:	b530      	push	{r4, r5, lr}
 8002efa:	4d14      	ldr	r5, [pc, #80]	; (8002f4c <__aeabi_d2iz+0x54>)
 8002efc:	030a      	lsls	r2, r1, #12
 8002efe:	004b      	lsls	r3, r1, #1
 8002f00:	0b12      	lsrs	r2, r2, #12
 8002f02:	0d5b      	lsrs	r3, r3, #21
 8002f04:	0fc9      	lsrs	r1, r1, #31
 8002f06:	2400      	movs	r4, #0
 8002f08:	42ab      	cmp	r3, r5
 8002f0a:	dd11      	ble.n	8002f30 <__aeabi_d2iz+0x38>
 8002f0c:	4c10      	ldr	r4, [pc, #64]	; (8002f50 <__aeabi_d2iz+0x58>)
 8002f0e:	42a3      	cmp	r3, r4
 8002f10:	dc10      	bgt.n	8002f34 <__aeabi_d2iz+0x3c>
 8002f12:	2480      	movs	r4, #128	; 0x80
 8002f14:	0364      	lsls	r4, r4, #13
 8002f16:	4322      	orrs	r2, r4
 8002f18:	4c0e      	ldr	r4, [pc, #56]	; (8002f54 <__aeabi_d2iz+0x5c>)
 8002f1a:	1ae4      	subs	r4, r4, r3
 8002f1c:	2c1f      	cmp	r4, #31
 8002f1e:	dd0c      	ble.n	8002f3a <__aeabi_d2iz+0x42>
 8002f20:	480d      	ldr	r0, [pc, #52]	; (8002f58 <__aeabi_d2iz+0x60>)
 8002f22:	1ac3      	subs	r3, r0, r3
 8002f24:	40da      	lsrs	r2, r3
 8002f26:	0013      	movs	r3, r2
 8002f28:	425c      	negs	r4, r3
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	d100      	bne.n	8002f30 <__aeabi_d2iz+0x38>
 8002f2e:	001c      	movs	r4, r3
 8002f30:	0020      	movs	r0, r4
 8002f32:	bd30      	pop	{r4, r5, pc}
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <__aeabi_d2iz+0x64>)
 8002f36:	18cc      	adds	r4, r1, r3
 8002f38:	e7fa      	b.n	8002f30 <__aeabi_d2iz+0x38>
 8002f3a:	4d09      	ldr	r5, [pc, #36]	; (8002f60 <__aeabi_d2iz+0x68>)
 8002f3c:	40e0      	lsrs	r0, r4
 8002f3e:	46ac      	mov	ip, r5
 8002f40:	4463      	add	r3, ip
 8002f42:	409a      	lsls	r2, r3
 8002f44:	0013      	movs	r3, r2
 8002f46:	4303      	orrs	r3, r0
 8002f48:	e7ee      	b.n	8002f28 <__aeabi_d2iz+0x30>
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	000003fe 	.word	0x000003fe
 8002f50:	0000041d 	.word	0x0000041d
 8002f54:	00000433 	.word	0x00000433
 8002f58:	00000413 	.word	0x00000413
 8002f5c:	7fffffff 	.word	0x7fffffff
 8002f60:	fffffbed 	.word	0xfffffbed

08002f64 <__aeabi_i2d>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d02d      	beq.n	8002fc6 <__aeabi_i2d+0x62>
 8002f6a:	17c3      	asrs	r3, r0, #31
 8002f6c:	18c5      	adds	r5, r0, r3
 8002f6e:	405d      	eors	r5, r3
 8002f70:	0fc4      	lsrs	r4, r0, #31
 8002f72:	0028      	movs	r0, r5
 8002f74:	f000 f862 	bl	800303c <__clzsi2>
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <__aeabi_i2d+0x6c>)
 8002f7a:	1a1b      	subs	r3, r3, r0
 8002f7c:	055b      	lsls	r3, r3, #21
 8002f7e:	0d5b      	lsrs	r3, r3, #21
 8002f80:	280a      	cmp	r0, #10
 8002f82:	dd15      	ble.n	8002fb0 <__aeabi_i2d+0x4c>
 8002f84:	380b      	subs	r0, #11
 8002f86:	4085      	lsls	r5, r0
 8002f88:	2200      	movs	r2, #0
 8002f8a:	032d      	lsls	r5, r5, #12
 8002f8c:	0b2d      	lsrs	r5, r5, #12
 8002f8e:	2100      	movs	r1, #0
 8002f90:	0010      	movs	r0, r2
 8002f92:	032d      	lsls	r5, r5, #12
 8002f94:	0d0a      	lsrs	r2, r1, #20
 8002f96:	0b2d      	lsrs	r5, r5, #12
 8002f98:	0512      	lsls	r2, r2, #20
 8002f9a:	432a      	orrs	r2, r5
 8002f9c:	4d0d      	ldr	r5, [pc, #52]	; (8002fd4 <__aeabi_i2d+0x70>)
 8002f9e:	051b      	lsls	r3, r3, #20
 8002fa0:	402a      	ands	r2, r5
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	07e4      	lsls	r4, r4, #31
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	4323      	orrs	r3, r4
 8002fac:	0019      	movs	r1, r3
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	0029      	movs	r1, r5
 8002fb4:	3215      	adds	r2, #21
 8002fb6:	4091      	lsls	r1, r2
 8002fb8:	000a      	movs	r2, r1
 8002fba:	210b      	movs	r1, #11
 8002fbc:	1a08      	subs	r0, r1, r0
 8002fbe:	40c5      	lsrs	r5, r0
 8002fc0:	032d      	lsls	r5, r5, #12
 8002fc2:	0b2d      	lsrs	r5, r5, #12
 8002fc4:	e7e3      	b.n	8002f8e <__aeabi_i2d+0x2a>
 8002fc6:	2400      	movs	r4, #0
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2500      	movs	r5, #0
 8002fcc:	2200      	movs	r2, #0
 8002fce:	e7de      	b.n	8002f8e <__aeabi_i2d+0x2a>
 8002fd0:	0000041e 	.word	0x0000041e
 8002fd4:	800fffff 	.word	0x800fffff

08002fd8 <__aeabi_ui2d>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	1e04      	subs	r4, r0, #0
 8002fdc:	d025      	beq.n	800302a <__aeabi_ui2d+0x52>
 8002fde:	f000 f82d 	bl	800303c <__clzsi2>
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <__aeabi_ui2d+0x5c>)
 8002fe4:	1a1b      	subs	r3, r3, r0
 8002fe6:	055b      	lsls	r3, r3, #21
 8002fe8:	0d5b      	lsrs	r3, r3, #21
 8002fea:	280a      	cmp	r0, #10
 8002fec:	dd12      	ble.n	8003014 <__aeabi_ui2d+0x3c>
 8002fee:	380b      	subs	r0, #11
 8002ff0:	4084      	lsls	r4, r0
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	0324      	lsls	r4, r4, #12
 8002ff6:	0b24      	lsrs	r4, r4, #12
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	0324      	lsls	r4, r4, #12
 8002ffe:	0d0a      	lsrs	r2, r1, #20
 8003000:	0b24      	lsrs	r4, r4, #12
 8003002:	0512      	lsls	r2, r2, #20
 8003004:	4322      	orrs	r2, r4
 8003006:	4c0c      	ldr	r4, [pc, #48]	; (8003038 <__aeabi_ui2d+0x60>)
 8003008:	051b      	lsls	r3, r3, #20
 800300a:	4022      	ands	r2, r4
 800300c:	4313      	orrs	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	0859      	lsrs	r1, r3, #1
 8003012:	bd10      	pop	{r4, pc}
 8003014:	0002      	movs	r2, r0
 8003016:	0021      	movs	r1, r4
 8003018:	3215      	adds	r2, #21
 800301a:	4091      	lsls	r1, r2
 800301c:	000a      	movs	r2, r1
 800301e:	210b      	movs	r1, #11
 8003020:	1a08      	subs	r0, r1, r0
 8003022:	40c4      	lsrs	r4, r0
 8003024:	0324      	lsls	r4, r4, #12
 8003026:	0b24      	lsrs	r4, r4, #12
 8003028:	e7e6      	b.n	8002ff8 <__aeabi_ui2d+0x20>
 800302a:	2300      	movs	r3, #0
 800302c:	2400      	movs	r4, #0
 800302e:	2200      	movs	r2, #0
 8003030:	e7e2      	b.n	8002ff8 <__aeabi_ui2d+0x20>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	0000041e 	.word	0x0000041e
 8003038:	800fffff 	.word	0x800fffff

0800303c <__clzsi2>:
 800303c:	211c      	movs	r1, #28
 800303e:	2301      	movs	r3, #1
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	4298      	cmp	r0, r3
 8003044:	d301      	bcc.n	800304a <__clzsi2+0xe>
 8003046:	0c00      	lsrs	r0, r0, #16
 8003048:	3910      	subs	r1, #16
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	4298      	cmp	r0, r3
 800304e:	d301      	bcc.n	8003054 <__clzsi2+0x18>
 8003050:	0a00      	lsrs	r0, r0, #8
 8003052:	3908      	subs	r1, #8
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	4298      	cmp	r0, r3
 8003058:	d301      	bcc.n	800305e <__clzsi2+0x22>
 800305a:	0900      	lsrs	r0, r0, #4
 800305c:	3904      	subs	r1, #4
 800305e:	a202      	add	r2, pc, #8	; (adr r2, 8003068 <__clzsi2+0x2c>)
 8003060:	5c10      	ldrb	r0, [r2, r0]
 8003062:	1840      	adds	r0, r0, r1
 8003064:	4770      	bx	lr
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	02020304 	.word	0x02020304
 800306c:	01010101 	.word	0x01010101
	...

08003078 <__clzdi2>:
 8003078:	b510      	push	{r4, lr}
 800307a:	2900      	cmp	r1, #0
 800307c:	d103      	bne.n	8003086 <__clzdi2+0xe>
 800307e:	f7ff ffdd 	bl	800303c <__clzsi2>
 8003082:	3020      	adds	r0, #32
 8003084:	e002      	b.n	800308c <__clzdi2+0x14>
 8003086:	1c08      	adds	r0, r1, #0
 8003088:	f7ff ffd8 	bl	800303c <__clzsi2>
 800308c:	bd10      	pop	{r4, pc}
 800308e:	46c0      	nop			; (mov r8, r8)

08003090 <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8003098:	2008      	movs	r0, #8
 800309a:	f007 fd49 	bl	800ab30 <malloc>
 800309e:	0003      	movs	r3, r0
 80030a0:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	0011      	movs	r1, r2
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 f805 	bl	80030b8 <fsm_init>
  return this;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b004      	add	sp, #16
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e01d      	b.n	8003124 <fsm_fire+0x4c>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d114      	bne.n	800311e <fsm_fire+0x46>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	0010      	movs	r0, r2
 80030fc:	4798      	blx	r3
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d00d      	beq.n	800311e <fsm_fire+0x46>
      this->current_state = t->dest_state;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	601a      	str	r2, [r3, #0]
      if (t->out)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <fsm_fire+0x56>
        t->out(this);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	0010      	movs	r0, r2
 800311a:	4798      	blx	r3
      break;
 800311c:	e007      	b.n	800312e <fsm_fire+0x56>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3310      	adds	r3, #16
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	dadd      	bge.n	80030e8 <fsm_fire+0x10>
    }
  }
}
 800312c:	e000      	b.n	8003130 <fsm_fire+0x58>
      break;
 800312e:	46c0      	nop			; (mov r8, r8)
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}

08003138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800313c:	f004 fd76 	bl	8007c2c <HAL_Init>

  /* USER CODE BEGIN Init */
  Clock_Enable();
 8003140:	f000 f9e4 	bl	800350c <Clock_Enable>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003144:	f000 f816 	bl	8003174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003148:	f000 f940 	bl	80033cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800314c:	f000 f90e 	bl	800336c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003150:	f000 f882 	bl	8003258 <MX_SPI1_Init>
  MX_TIM2_Init();
 8003154:	f000 f8b8 	bl	80032c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize LEDs*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  RadioShieldLedInit(RADIO_SHIELD_LED);
 8003158:	2000      	movs	r0, #0
 800315a:	f004 f8cf 	bl	80072fc <RadioShieldLedInit>
#endif
  BSP_LED_Init(LED2);
 800315e:	2000      	movs	r0, #0
 8003160:	f003 ff4c 	bl	8006ffc <BSP_LED_Init>
  HAL_Radio_Init();
 8003164:	f000 fc1a 	bl	800399c <HAL_Radio_Init>
  P2P_Init();
 8003168:	f000 fcd8 	bl	8003b1c <P2P_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	P2P_Process();
 800316c:	f000 fc26 	bl	80039bc <P2P_Process>
 8003170:	e7fc      	b.n	800316c <main+0x34>
	...

08003174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b09d      	sub	sp, #116	; 0x74
 8003178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317a:	2438      	movs	r4, #56	; 0x38
 800317c:	193b      	adds	r3, r7, r4
 800317e:	0018      	movs	r0, r3
 8003180:	2338      	movs	r3, #56	; 0x38
 8003182:	001a      	movs	r2, r3
 8003184:	2100      	movs	r1, #0
 8003186:	f007 fce6 	bl	800ab56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800318a:	2324      	movs	r3, #36	; 0x24
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	0018      	movs	r0, r3
 8003190:	2314      	movs	r3, #20
 8003192:	001a      	movs	r2, r3
 8003194:	2100      	movs	r1, #0
 8003196:	f007 fcde 	bl	800ab56 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800319a:	003b      	movs	r3, r7
 800319c:	0018      	movs	r0, r3
 800319e:	2324      	movs	r3, #36	; 0x24
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f007 fcd7 	bl	800ab56 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <SystemClock_Config+0xdc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a29      	ldr	r2, [pc, #164]	; (8003254 <SystemClock_Config+0xe0>)
 80031ae:	401a      	ands	r2, r3
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <SystemClock_Config+0xdc>)
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	0109      	lsls	r1, r1, #4
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031ba:	0021      	movs	r1, r4
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2202      	movs	r2, #2
 80031c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2201      	movs	r2, #1
 80031c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2210      	movs	r2, #16
 80031cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2202      	movs	r2, #2
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031d4:	187b      	adds	r3, r7, r1
 80031d6:	2200      	movs	r2, #0
 80031d8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	02d2      	lsls	r2, r2, #11
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	03d2      	lsls	r2, r2, #15
 80031e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	0018      	movs	r0, r3
 80031ee:	f005 f865 	bl	80082bc <HAL_RCC_OscConfig>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d001      	beq.n	80031fa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80031f6:	f000 f9c3 	bl	8003580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031fa:	2124      	movs	r1, #36	; 0x24
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	220f      	movs	r2, #15
 8003200:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	2203      	movs	r2, #3
 8003206:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800320e:	187b      	adds	r3, r7, r1
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003214:	187b      	adds	r3, r7, r1
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800321a:	187b      	adds	r3, r7, r1
 800321c:	2101      	movs	r1, #1
 800321e:	0018      	movs	r0, r3
 8003220:	f005 fc0c 	bl	8008a3c <HAL_RCC_ClockConfig>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d001      	beq.n	800322c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003228:	f000 f9aa 	bl	8003580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800322c:	003b      	movs	r3, r7
 800322e:	2202      	movs	r2, #2
 8003230:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003232:	003b      	movs	r3, r7
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003238:	003b      	movs	r3, r7
 800323a:	0018      	movs	r0, r3
 800323c:	f005 fde2 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8003240:	1e03      	subs	r3, r0, #0
 8003242:	d001      	beq.n	8003248 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003244:	f000 f99c 	bl	8003580 <Error_Handler>
  }
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b01d      	add	sp, #116	; 0x74
 800324e:	bd90      	pop	{r4, r7, pc}
 8003250:	40007000 	.word	0x40007000
 8003254:	ffffe7ff 	.word	0xffffe7ff

08003258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800325c:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <MX_SPI1_Init+0x68>)
 800325e:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <MX_SPI1_Init+0x6c>)
 8003260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <MX_SPI1_Init+0x68>)
 8003264:	2282      	movs	r2, #130	; 0x82
 8003266:	0052      	lsls	r2, r2, #1
 8003268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <MX_SPI1_Init+0x68>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <MX_SPI1_Init+0x68>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <MX_SPI1_Init+0x68>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <MX_SPI1_Init+0x68>)
 800327e:	2200      	movs	r2, #0
 8003280:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <MX_SPI1_Init+0x68>)
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <MX_SPI1_Init+0x68>)
 800328c:	2210      	movs	r2, #16
 800328e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <MX_SPI1_Init+0x68>)
 8003292:	2200      	movs	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <MX_SPI1_Init+0x68>)
 8003298:	2200      	movs	r2, #0
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <MX_SPI1_Init+0x68>)
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <MX_SPI1_Init+0x68>)
 80032a4:	2207      	movs	r2, #7
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <MX_SPI1_Init+0x68>)
 80032aa:	0018      	movs	r0, r3
 80032ac:	f005 ff0e 	bl	80090cc <HAL_SPI_Init>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d001      	beq.n	80032b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80032b4:	f000 f964 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	20000328 	.word	0x20000328
 80032c4:	40013000 	.word	0x40013000

080032c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ce:	2308      	movs	r3, #8
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	0018      	movs	r0, r3
 80032d4:	2310      	movs	r3, #16
 80032d6:	001a      	movs	r2, r3
 80032d8:	2100      	movs	r1, #0
 80032da:	f007 fc3c 	bl	800ab56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032de:	003b      	movs	r3, r7
 80032e0:	0018      	movs	r0, r3
 80032e2:	2308      	movs	r3, #8
 80032e4:	001a      	movs	r2, r3
 80032e6:	2100      	movs	r1, #0
 80032e8:	f007 fc35 	bl	800ab56 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <MX_TIM2_Init+0xa0>)
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	05d2      	lsls	r2, r2, #23
 80032f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <MX_TIM2_Init+0xa0>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <MX_TIM2_Init+0xa0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <MX_TIM2_Init+0xa0>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <MX_TIM2_Init+0xa0>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <MX_TIM2_Init+0xa0>)
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <MX_TIM2_Init+0xa0>)
 8003314:	0018      	movs	r0, r3
 8003316:	f006 fbf5 	bl	8009b04 <HAL_TIM_Base_Init>
 800331a:	1e03      	subs	r3, r0, #0
 800331c:	d001      	beq.n	8003322 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800331e:	f000 f92f 	bl	8003580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003322:	2108      	movs	r1, #8
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2280      	movs	r2, #128	; 0x80
 8003328:	0152      	lsls	r2, r2, #5
 800332a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800332c:	187a      	adds	r2, r7, r1
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <MX_TIM2_Init+0xa0>)
 8003330:	0011      	movs	r1, r2
 8003332:	0018      	movs	r0, r3
 8003334:	f006 fd02 	bl	8009d3c <HAL_TIM_ConfigClockSource>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800333c:	f000 f920 	bl	8003580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003340:	003b      	movs	r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003346:	003b      	movs	r3, r7
 8003348:	2200      	movs	r2, #0
 800334a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800334c:	003a      	movs	r2, r7
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <MX_TIM2_Init+0xa0>)
 8003350:	0011      	movs	r1, r2
 8003352:	0018      	movs	r0, r3
 8003354:	f006 fec6 	bl	800a0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800335c:	f000 f910 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000380 	.word	0x20000380

0800336c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 8003372:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <MX_USART2_UART_Init+0x5c>)
 8003374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 8003378:	22e1      	movs	r2, #225	; 0xe1
 800337a:	0252      	lsls	r2, r2, #9
 800337c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 8003392:	220c      	movs	r2, #12
 8003394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <MX_USART2_UART_Init+0x58>)
 80033b0:	0018      	movs	r0, r3
 80033b2:	f006 fedb 	bl	800a16c <HAL_UART_Init>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d001      	beq.n	80033be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033ba:	f000 f8e1 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200003bc 	.word	0x200003bc
 80033c8:	40004400 	.word	0x40004400

080033cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d2:	240c      	movs	r4, #12
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	0018      	movs	r0, r3
 80033d8:	2314      	movs	r3, #20
 80033da:	001a      	movs	r2, r3
 80033dc:	2100      	movs	r1, #0
 80033de:	f007 fbba 	bl	800ab56 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e2:	4b46      	ldr	r3, [pc, #280]	; (80034fc <MX_GPIO_Init+0x130>)
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4b45      	ldr	r3, [pc, #276]	; (80034fc <MX_GPIO_Init+0x130>)
 80033e8:	2104      	movs	r1, #4
 80033ea:	430a      	orrs	r2, r1
 80033ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <MX_GPIO_Init+0x130>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	4b40      	ldr	r3, [pc, #256]	; (80034fc <MX_GPIO_Init+0x130>)
 80033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <MX_GPIO_Init+0x130>)
 8003400:	2101      	movs	r1, #1
 8003402:	430a      	orrs	r2, r1
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <MX_GPIO_Init+0x130>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	2201      	movs	r2, #1
 800340c:	4013      	ands	r3, r2
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <MX_GPIO_Init+0x130>)
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	4b39      	ldr	r3, [pc, #228]	; (80034fc <MX_GPIO_Init+0x130>)
 8003418:	2102      	movs	r1, #2
 800341a:	430a      	orrs	r2, r1
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <MX_GPIO_Init+0x130>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	2202      	movs	r2, #2
 8003424:	4013      	ands	r3, r2
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NUCLEO_LED1_PIN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800342a:	2384      	movs	r3, #132	; 0x84
 800342c:	00d9      	lsls	r1, r3, #3
 800342e:	23a0      	movs	r3, #160	; 0xa0
 8003430:	05db      	lsls	r3, r3, #23
 8003432:	2200      	movs	r2, #0
 8003434:	0018      	movs	r0, r3
 8003436:	f004 fef5 	bl	8008224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <MX_GPIO_Init+0x134>)
 800343c:	2200      	movs	r2, #0
 800343e:	2120      	movs	r1, #32
 8003440:	0018      	movs	r0, r3
 8003442:	f004 feef 	bl	8008224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_Pin PC7 */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|GPIO_PIN_7;
 8003446:	193b      	adds	r3, r7, r4
 8003448:	2282      	movs	r2, #130	; 0x82
 800344a:	0192      	lsls	r2, r2, #6
 800344c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800344e:	193b      	adds	r3, r7, r4
 8003450:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <MX_GPIO_Init+0x138>)
 8003452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	193b      	adds	r3, r7, r4
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345a:	193b      	adds	r3, r7, r4
 800345c:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <MX_GPIO_Init+0x13c>)
 800345e:	0019      	movs	r1, r3
 8003460:	0010      	movs	r0, r2
 8003462:	f004 fd69 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : NUCLEO_LED1_PIN_Pin */
  GPIO_InitStruct.Pin = NUCLEO_LED1_PIN_Pin;
 8003466:	0021      	movs	r1, r4
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2220      	movs	r2, #32
 800346c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	187b      	adds	r3, r7, r1
 8003470:	2201      	movs	r2, #1
 8003472:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	187b      	adds	r3, r7, r1
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	187b      	adds	r3, r7, r1
 800347c:	2200      	movs	r2, #0
 800347e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NUCLEO_LED1_PIN_GPIO_Port, &GPIO_InitStruct);
 8003480:	000c      	movs	r4, r1
 8003482:	187a      	adds	r2, r7, r1
 8003484:	23a0      	movs	r3, #160	; 0xa0
 8003486:	05db      	lsls	r3, r3, #23
 8003488:	0011      	movs	r1, r2
 800348a:	0018      	movs	r0, r3
 800348c:	f004 fd54 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003490:	0021      	movs	r1, r4
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	00d2      	lsls	r2, r2, #3
 8003498:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2201      	movs	r2, #1
 800349e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	2201      	movs	r2, #1
 80034a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	2202      	movs	r2, #2
 80034aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ac:	000c      	movs	r4, r1
 80034ae:	187a      	adds	r2, r7, r1
 80034b0:	23a0      	movs	r3, #160	; 0xa0
 80034b2:	05db      	lsls	r3, r3, #23
 80034b4:	0011      	movs	r1, r2
 80034b6:	0018      	movs	r0, r3
 80034b8:	f004 fd3e 	bl	8007f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80034bc:	0021      	movs	r1, r4
 80034be:	187b      	adds	r3, r7, r1
 80034c0:	2220      	movs	r2, #32
 80034c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	2201      	movs	r2, #1
 80034c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <MX_GPIO_Init+0x134>)
 80034da:	0019      	movs	r1, r3
 80034dc:	0010      	movs	r0, r2
 80034de:	f004 fd2b 	bl	8007f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2100      	movs	r1, #0
 80034e6:	2007      	movs	r0, #7
 80034e8:	f004 fce4 	bl	8007eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80034ec:	2007      	movs	r0, #7
 80034ee:	f004 fcf6 	bl	8007ede <HAL_NVIC_EnableIRQ>

}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b009      	add	sp, #36	; 0x24
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40021000 	.word	0x40021000
 8003500:	50000400 	.word	0x50000400
 8003504:	10210000 	.word	0x10210000
 8003508:	50000800 	.word	0x50000800

0800350c <Clock_Enable>:

/* USER CODE BEGIN 4 */

void Clock_Enable(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
  __GPIOA_CLK_ENABLE();
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <Clock_Enable+0x70>)
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <Clock_Enable+0x70>)
 8003518:	2101      	movs	r1, #1
 800351a:	430a      	orrs	r2, r1
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <Clock_Enable+0x70>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	2201      	movs	r2, #1
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <Clock_Enable+0x70>)
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <Clock_Enable+0x70>)
 8003530:	2102      	movs	r1, #2
 8003532:	430a      	orrs	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <Clock_Enable+0x70>)
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	2202      	movs	r2, #2
 800353c:	4013      	ands	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
  __GPIOC_CLK_ENABLE();
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <Clock_Enable+0x70>)
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <Clock_Enable+0x70>)
 8003548:	2104      	movs	r1, #4
 800354a:	430a      	orrs	r2, r1
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <Clock_Enable+0x70>)
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	2204      	movs	r2, #4
 8003554:	4013      	ands	r3, r2
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  __GPIOD_CLK_ENABLE();
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <Clock_Enable+0x70>)
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <Clock_Enable+0x70>)
 8003560:	2108      	movs	r1, #8
 8003562:	430a      	orrs	r2, r1
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <Clock_Enable+0x70>)
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	2208      	movs	r2, #8
 800356c:	4013      	ands	r3, r2
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	40021000 	.word	0x40021000

08003580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <time_out_rx>:
fsm_t* radio_fsm;


/* Private function prototypes -----------------------------------------------*/
static int time_out_rx(fsm_t* this)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	return ((rx_timeout)||(!exitTime));
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <time_out_rx+0x2c>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <time_out_rx+0x1c>
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <time_out_rx+0x30>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <time_out_rx+0x20>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <time_out_rx+0x22>
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	2000028a 	.word	0x2000028a
 80035bc:	2000028b 	.word	0x2000028b

080035c0 <tx_flag>:

static int tx_flag(fsm_t* this)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	return tx_value;
 80035c8:	4b02      	ldr	r3, [pc, #8]	; (80035d4 <tx_flag+0x14>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000028c 	.word	0x2000028c

080035d8 <rx_flag>:

static int rx_flag(fsm_t* this)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	return xRxDoneFlag;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <rx_flag+0x18>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20000288 	.word	0x20000288

080035f4 <data_recived>:


static int data_recived(fsm_t* this)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	if(xRxFrame.Cmd == LED_TOGGLE) return 1;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <data_recived+0x20>)
 80035fe:	78db      	ldrb	r3, [r3, #3]
 8003600:	2bff      	cmp	r3, #255	; 0xff
 8003602:	d101      	bne.n	8003608 <data_recived+0x14>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <data_recived+0x16>
	else return 0;
 8003608:	2300      	movs	r3, #0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b002      	add	sp, #8
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	2000029c 	.word	0x2000029c

08003618 <ack_recived>:

static int ack_recived(fsm_t* this)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    if(xRxFrame.Cmd == ACK_OK) return 1;
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <ack_recived+0x20>)
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <ack_recived+0x14>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <ack_recived+0x16>
    else return 0;
 800362c:	2300      	movs	r3, #0
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	2000029c 	.word	0x2000029c

0800363c <multicast>:

static int multicast(fsm_t* this)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

	if ((dest_addr == MULTICAST_ADDRESS) || (dest_addr == BROADCAST_ADDRESS)) return 1;
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <multicast+0x28>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2bee      	cmp	r3, #238	; 0xee
 800364a:	d003      	beq.n	8003654 <multicast+0x18>
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <multicast+0x28>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2bff      	cmp	r3, #255	; 0xff
 8003652:	d101      	bne.n	8003658 <multicast+0x1c>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <multicast+0x1e>
	else return 0;
 8003658:	2300      	movs	r3, #0

}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	20000444 	.word	0x20000444

08003668 <address_known>:

static int address_known(fsm_t* this)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	if ((dest_addr != MULTICAST_ADDRESS) && (dest_addr != BROADCAST_ADDRESS)) return 1;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <address_known+0x28>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2bee      	cmp	r3, #238	; 0xee
 8003676:	d005      	beq.n	8003684 <address_known+0x1c>
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <address_known+0x28>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2bff      	cmp	r3, #255	; 0xff
 800367e:	d001      	beq.n	8003684 <address_known+0x1c>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <address_known+0x1e>
	else return 0;
 8003684:	2300      	movs	r3, #0

}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	20000444 	.word	0x20000444

08003694 <tx_received>:

static int tx_received(fsm_t* this)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	return xTxDoneFlag;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <tx_received+0x18>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	20000289 	.word	0x20000289

080036b0 <msg_command>:

static int msg_command(fsm_t* this)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	if (xTxFrame.Cmd == LED_TOGGLE) return 1;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <msg_command+0x20>)
 80036ba:	78db      	ldrb	r3, [r3, #3]
 80036bc:	2bff      	cmp	r3, #255	; 0xff
 80036be:	d101      	bne.n	80036c4 <msg_command+0x14>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <msg_command+0x16>
	else return 0;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b002      	add	sp, #8
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	20000290 	.word	0x20000290

080036d4 <ack_command>:

static int ack_command(fsm_t* this)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	if (xTxFrame.Cmd == ACK_OK) return 1;
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <ack_command+0x20>)
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <ack_command+0x14>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <ack_command+0x16>
	else return 0;
 80036e8:	2300      	movs	r3, #0

}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	20000290 	.word	0x20000290

080036f8 <restart>:

static int restart(fsm_t* this)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	return IDLE_Process;
 8003700:	4b02      	ldr	r3, [pc, #8]	; (800370c <restart+0x14>)
 8003702:	781b      	ldrb	r3, [r3, #0]
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000454 	.word	0x20000454

08003710 <ACK_confirm>:

static int ACK_confirm (fsm_t* this)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	return ACK_Process;
 8003718:	4b02      	ldr	r3, [pc, #8]	; (8003724 <ACK_confirm+0x14>)
 800371a:	781b      	ldrb	r3, [r3, #0]
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000446 	.word	0x20000446

08003728 <EN_Rx>:

void EN_Rx(fsm_t* this)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
    AppliReceiveBuff(aReceiveBuffer, RxLength);
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <EN_Rx+0x2c>)
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <EN_Rx+0x30>)
 8003736:	0011      	movs	r1, r2
 8003738:	0018      	movs	r0, r3
 800373a:	f000 f9b9 	bl	8003ab0 <AppliReceiveBuff>
    rx_timeout = RESET;
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <EN_Rx+0x34>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    BSP_LED_Toggle(LED2);
 8003744:	2000      	movs	r0, #0
 8003746:	f003 fcaf 	bl	80070a8 <BSP_LED_Toggle>
}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	20000224 	.word	0x20000224
 8003758:	20000228 	.word	0x20000228
 800375c:	2000028a 	.word	0x2000028a

08003760 <send_data>:

void send_data(fsm_t* this)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	tx_value = RESET;
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <send_data+0x58>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
	xTxFrame.Cmd = LED_TOGGLE;
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <send_data+0x5c>)
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	70da      	strb	r2, [r3, #3]
	xTxFrame.CmdLen = 0x01;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <send_data+0x5c>)
 8003776:	2201      	movs	r2, #1
 8003778:	709a      	strb	r2, [r3, #2]
	xTxFrame.Cmdtag = txCounter++;
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <send_data+0x60>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	b291      	uxth	r1, r2
 8003782:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <send_data+0x60>)
 8003784:	8011      	strh	r1, [r2, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <send_data+0x5c>)
 800378a:	701a      	strb	r2, [r3, #0]
	xTxFrame.CmdType = APPLI_CMD;
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <send_data+0x5c>)
 800378e:	2211      	movs	r2, #17
 8003790:	705a      	strb	r2, [r3, #1]
	xTxFrame.DataBuff = aTransmitBuffer;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <send_data+0x5c>)
 8003794:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <send_data+0x64>)
 8003796:	609a      	str	r2, [r3, #8]
	xTxFrame.DataLen = TxLength;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <send_data+0x68>)
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <send_data+0x5c>)
 800379e:	711a      	strb	r2, [r3, #4]


	/*COGNITIVE FUNCTION*/


	AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <send_data+0x5c>)
 80037a2:	791a      	ldrb	r2, [r3, #4]
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <send_data+0x5c>)
 80037a6:	0011      	movs	r1, r2
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 f913 	bl	80039d4 <AppliSendBuff>

}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	2000028c 	.word	0x2000028c
 80037bc:	20000290 	.word	0x20000290
 80037c0:	2000030a 	.word	0x2000030a
 80037c4:	20000088 	.word	0x20000088
 80037c8:	20000084 	.word	0x20000084

080037cc <read_RX_Data>:

void read_RX_Data(fsm_t* this)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	xRxDoneFlag = RESET;
 80037d4:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <read_RX_Data+0x84>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]

	Spirit1GetRxPacket(aReceiveBuffer,&RxLength);
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <read_RX_Data+0x88>)
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <read_RX_Data+0x8c>)
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f003 fba7 	bl	8006f34 <Spirit1GetRxPacket>
	/*rRSSIValue = Spirit1GetRssiTH();*/
	/*rRSSIValue = S2LPGetRssiTH();*/
	xRxFrame.Cmd = aReceiveBuffer[0];
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <read_RX_Data+0x8c>)
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	4b1c      	ldr	r3, [pc, #112]	; (800385c <read_RX_Data+0x90>)
 80037ec:	70da      	strb	r2, [r3, #3]
	xRxFrame.CmdLen = aReceiveBuffer[1];
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <read_RX_Data+0x8c>)
 80037f0:	785a      	ldrb	r2, [r3, #1]
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <read_RX_Data+0x90>)
 80037f4:	709a      	strb	r2, [r3, #2]
	xRxFrame.Cmdtag = aReceiveBuffer[2];
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <read_RX_Data+0x8c>)
 80037f8:	789a      	ldrb	r2, [r3, #2]
 80037fa:	4b18      	ldr	r3, [pc, #96]	; (800385c <read_RX_Data+0x90>)
 80037fc:	701a      	strb	r2, [r3, #0]
	xRxFrame.CmdType = aReceiveBuffer[3];
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <read_RX_Data+0x8c>)
 8003800:	78da      	ldrb	r2, [r3, #3]
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <read_RX_Data+0x90>)
 8003804:	705a      	strb	r2, [r3, #1]
	xRxFrame.DataLen = aReceiveBuffer[4];
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <read_RX_Data+0x8c>)
 8003808:	791a      	ldrb	r2, [r3, #4]
 800380a:	4b14      	ldr	r3, [pc, #80]	; (800385c <read_RX_Data+0x90>)
 800380c:	711a      	strb	r2, [r3, #4]

	/*FIXED BUG IN DATA RECEPTION*/
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2205      	movs	r2, #5
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e00d      	b.n	8003834 <read_RX_Data+0x68>
	{
	  temp_DataBuff[xIndex] = aReceiveBuffer[xIndex];
 8003818:	200f      	movs	r0, #15
 800381a:	183b      	adds	r3, r7, r0
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	183b      	adds	r3, r7, r0
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	490d      	ldr	r1, [pc, #52]	; (8003858 <read_RX_Data+0x8c>)
 8003824:	5c89      	ldrb	r1, [r1, r2]
 8003826:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <read_RX_Data+0x94>)
 8003828:	54d1      	strb	r1, [r2, r3]
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 800382a:	183b      	adds	r3, r7, r0
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	183b      	adds	r3, r7, r0
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <read_RX_Data+0x88>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	220f      	movs	r2, #15
 800383a:	18ba      	adds	r2, r7, r2
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d3ea      	bcc.n	8003818 <read_RX_Data+0x4c>
	}

	xRxFrame.DataBuff= temp_DataBuff;
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <read_RX_Data+0x90>)
 8003844:	4a06      	ldr	r2, [pc, #24]	; (8003860 <read_RX_Data+0x94>)
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b004      	add	sp, #16
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000288 	.word	0x20000288
 8003854:	20000224 	.word	0x20000224
 8003858:	20000228 	.word	0x20000228
 800385c:	2000029c 	.word	0x2000029c
 8003860:	2000030c 	.word	0x2000030c

08003864 <LED_ON>:

void LED_ON(fsm_t* this)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOn(RADIO_SHIELD_LED);
 800386c:	2000      	movs	r0, #0
 800386e:	f003 fd77 	bl	8007360 <RadioShieldLedOn>
#endif
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 8003872:	f001 fb2d 	bl	8004ed0 <SpiritPktCommonGetReceivedDestAddress>
 8003876:	0003      	movs	r3, r0
 8003878:	001a      	movs	r2, r3
 800387a:	4b03      	ldr	r3, [pc, #12]	; (8003888 <LED_ON+0x24>)
 800387c:	701a      	strb	r2, [r3, #0]
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b002      	add	sp, #8
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	20000444 	.word	0x20000444

0800388c <LED_Toggle>:

void LED_Toggle(fsm_t* this)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 8003894:	230f      	movs	r3, #15
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]

    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 800389c:	f001 fb18 	bl	8004ed0 <SpiritPktCommonGetReceivedDestAddress>
 80038a0:	0003      	movs	r3, r0
 80038a2:	001a      	movs	r2, r3
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <LED_Toggle+0x60>)
 80038a6:	701a      	strb	r2, [r3, #0]

#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
	HAL_Delay(DELAY_TX_LED_GLOW);
 80038a8:	20c8      	movs	r0, #200	; 0xc8
 80038aa:	f004 fa25 	bl	8007cf8 <HAL_Delay>
#endif
	for(; ledToggleCtr<5; ledToggleCtr++)
 80038ae:	e00b      	b.n	80038c8 <LED_Toggle+0x3c>
	{
		/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
		#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
		RadioShieldLedToggle(RADIO_SHIELD_LED);
 80038b0:	2000      	movs	r0, #0
 80038b2:	f003 fd81 	bl	80073b8 <RadioShieldLedToggle>
		#endif
		HAL_Delay(DELAY_RX_LED_TOGGLE);
 80038b6:	2064      	movs	r0, #100	; 0x64
 80038b8:	f004 fa1e 	bl	8007cf8 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 80038bc:	210f      	movs	r1, #15
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	3201      	adds	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	230f      	movs	r3, #15
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d9ee      	bls.n	80038b0 <LED_Toggle+0x24>
	}
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f003 fd5a 	bl	800738c <RadioShieldLedOff>
#endif
    BSP_LED_Off(LED2);
 80038d8:	2000      	movs	r0, #0
 80038da:	f003 fbcf 	bl	800707c <BSP_LED_Off>

    ACK_Process = SET;
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <LED_Toggle+0x64>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
}
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000444 	.word	0x20000444
 80038f0:	20000446 	.word	0x20000446

080038f4 <send_ACK>:

void send_ACK(fsm_t* this)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	  xTxFrame.Cmd = ACK_OK;
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <send_ACK+0x4c>)
 80038fe:	2201      	movs	r2, #1
 8003900:	70da      	strb	r2, [r3, #3]
	  xTxFrame.CmdLen = 0x01;
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <send_ACK+0x4c>)
 8003904:	2201      	movs	r2, #1
 8003906:	709a      	strb	r2, [r3, #2]
	  xTxFrame.Cmdtag = xRxFrame.Cmdtag;
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <send_ACK+0x50>)
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <send_ACK+0x4c>)
 800390e:	701a      	strb	r2, [r3, #0]
	  xTxFrame.CmdType = APPLI_CMD;
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <send_ACK+0x4c>)
 8003912:	2211      	movs	r2, #17
 8003914:	705a      	strb	r2, [r3, #1]
	  xTxFrame.DataBuff = aTransmitBuffer;
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <send_ACK+0x4c>)
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <send_ACK+0x54>)
 800391a:	609a      	str	r2, [r3, #8]
	  xTxFrame.DataLen = TxLength;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <send_ACK+0x58>)
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <send_ACK+0x4c>)
 8003922:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(DELAY_TX_LED_GLOW);
 8003924:	20c8      	movs	r0, #200	; 0xc8
 8003926:	f004 f9e7 	bl	8007cf8 <HAL_Delay>

	  AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <send_ACK+0x4c>)
 800392c:	791a      	ldrb	r2, [r3, #4]
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <send_ACK+0x4c>)
 8003930:	0011      	movs	r1, r2
 8003932:	0018      	movs	r0, r3
 8003934:	f000 f84e 	bl	80039d4 <AppliSendBuff>
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000290 	.word	0x20000290
 8003944:	2000029c 	.word	0x2000029c
 8003948:	20000088 	.word	0x20000088
 800394c:	20000084 	.word	0x20000084

08003950 <clr_tx_flag>:

void clr_tx_flag(fsm_t* this)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	xTxDoneFlag = RESET;
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <clr_tx_flag+0x18>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	20000289 	.word	0x20000289

0800396c <reset_state>:

void reset_state(fsm_t* this)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 8003974:	2000      	movs	r0, #0
 8003976:	f003 fd09 	bl	800738c <RadioShieldLedOff>
#endif
    BSP_LED_Off(LED2);
 800397a:	2000      	movs	r0, #0
 800397c:	f003 fb7e 	bl	800707c <BSP_LED_Off>

    ACK_Process = RESET;
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <reset_state+0x28>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
    IDLE_Process = SET;
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <reset_state+0x2c>)
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000446 	.word	0x20000446
 8003998:	20000454 	.word	0x20000454

0800399c <HAL_Radio_Init>:
* @brief  Initializes RF Transceiver's HAL.
* @param  None
* @retval None.
*/
void HAL_Radio_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  pRadioDriver = &radio_cb;
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_Radio_Init+0x18>)
 80039a2:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <HAL_Radio_Init+0x1c>)
 80039a4:	601a      	str	r2, [r3, #0]
  pRadioDriver->Init( ); 
 80039a6:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_Radio_Init+0x18>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4798      	blx	r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	2000044c 	.word	0x2000044c
 80039b8:	20000000 	.word	0x20000000

080039bc <P2P_Process>:
*         uint8_t* pRxBuff = Pointer to aReceiveBuffer
*         uint8_t cRxlen= length of aReceiveBuffer
* @retval None.
*/
void P2P_Process(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
	fsm_fire(radio_fsm);
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <P2P_Process+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7ff fb87 	bl	80030d8 <fsm_fire>
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000450 	.word	0x20000450

080039d4 <AppliSendBuff>:
* @param  AppliFrame_t *xTxFrame = Pointer to AppliFrame_t structure 
*         uint8_t cTxlen = Length of aTransmitBuffer
* @retval None
*/
void AppliSendBuff(AppliFrame_t *xTxFrame, uint8_t cTxlen)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	000a      	movs	r2, r1
 80039de:	1cfb      	adds	r3, r7, #3
 80039e0:	701a      	strb	r2, [r3, #0]
  uint8_t xIndex = 0;
 80039e2:	230f      	movs	r3, #15
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
  uint8_t trxLength = 0;
 80039ea:	230e      	movs	r3, #14
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
  
#ifdef USE_BASIC_PROTOCOL
  SpiritPktBasicAddressesInit(&xAddressInit);
 80039f2:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <AppliSendBuff+0xcc>)
 80039f4:	0018      	movs	r0, r3
 80039f6:	f001 f903 	bl	8004c00 <SpiritPktBasicAddressesInit>
#endif  
  
  TxFrameBuff[0] = xTxFrame->Cmd;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	78da      	ldrb	r2, [r3, #3]
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <AppliSendBuff+0xd0>)
 8003a00:	701a      	strb	r2, [r3, #0]
  TxFrameBuff[1] = xTxFrame->CmdLen;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	789a      	ldrb	r2, [r3, #2]
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <AppliSendBuff+0xd0>)
 8003a08:	705a      	strb	r2, [r3, #1]
  TxFrameBuff[2] = xTxFrame->Cmdtag;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <AppliSendBuff+0xd0>)
 8003a10:	709a      	strb	r2, [r3, #2]
  TxFrameBuff[3] = xTxFrame->CmdType;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	785a      	ldrb	r2, [r3, #1]
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <AppliSendBuff+0xd0>)
 8003a18:	70da      	strb	r2, [r3, #3]
  TxFrameBuff[4] = xTxFrame->DataLen;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	791a      	ldrb	r2, [r3, #4]
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <AppliSendBuff+0xd0>)
 8003a20:	711a      	strb	r2, [r3, #4]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 8003a22:	e010      	b.n	8003a46 <AppliSendBuff+0x72>
  {
    TxFrameBuff[xIndex+5] =  xTxFrame->DataBuff[xIndex];
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	200f      	movs	r0, #15
 8003a2a:	183b      	adds	r3, r7, r0
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	18d2      	adds	r2, r2, r3
 8003a30:	183b      	adds	r3, r7, r0
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	3305      	adds	r3, #5
 8003a36:	7811      	ldrb	r1, [r2, #0]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <AppliSendBuff+0xd0>)
 8003a3a:	54d1      	strb	r1, [r2, r3]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 8003a3c:	183b      	adds	r3, r7, r0
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	3201      	adds	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	791b      	ldrb	r3, [r3, #4]
 8003a4a:	220f      	movs	r2, #15
 8003a4c:	18ba      	adds	r2, r7, r2
 8003a4e:	7812      	ldrb	r2, [r2, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3e7      	bcc.n	8003a24 <AppliSendBuff+0x50>
  }

  trxLength = (xIndex+5);
 8003a54:	240e      	movs	r4, #14
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	220f      	movs	r2, #15
 8003a5a:	18ba      	adds	r2, r7, r2
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	3205      	adds	r2, #5
 8003a60:	701a      	strb	r2, [r3, #0]

  /* Spirit IRQs disable */
  Spirit1DisableIrq();
 8003a62:	f003 fa14 	bl	8006e8e <Spirit1DisableIrq>
  /* Spirit IRQs enable */
  Spirit1EnableTxIrq();
 8003a66:	f003 f9f6 	bl	8006e56 <Spirit1EnableTxIrq>
  /* payload length config */
  Spirit1SetPayloadlength(trxLength);
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f003 f9d2 	bl	8006e18 <Spirit1SetPayloadlength>
  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <AppliSendBuff+0xd4>)
 8003a76:	1c18      	adds	r0, r3, #0
 8003a78:	f003 fa11 	bl	8006e9e <Spirit1SetRxTimeout>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 8003a7c:	f003 fab6 	bl	8006fec <Spirit1ClearIRQ>
  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <AppliSendBuff+0xd8>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f003 f9d7 	bl	8006e38 <Spirit1SetDestinationAddress>
  /* send the TX command */
  Spirit1StartTx(TxFrameBuff, trxLength);
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <AppliSendBuff+0xd0>)
 8003a90:	0011      	movs	r1, r2
 8003a92:	0018      	movs	r0, r3
 8003a94:	f003 fa70 	bl	8006f78 <Spirit1StartTx>
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b005      	add	sp, #20
 8003a9e:	bd90      	pop	{r4, r7, pc}
 8003aa0:	20000074 	.word	0x20000074
 8003aa4:	200002a8 	.word	0x200002a8
 8003aa8:	44fa0000 	.word	0x44fa0000
 8003aac:	20000445 	.word	0x20000445

08003ab0 <AppliReceiveBuff>:
* @param  uint8_t *RxFrameBuff = Pointer to ReceiveBuffer
*         uint8_t cRxlen = length of ReceiveBuffer
* @retval None
*/
void AppliReceiveBuff(uint8_t *RxFrameBuff, uint8_t cRxlen)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	000a      	movs	r2, r1
 8003aba:	1cfb      	adds	r3, r7, #3
 8003abc:	701a      	strb	r2, [r3, #0]
  /*float rRSSIValue = 0;*/
  exitTime = SET;
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <AppliReceiveBuff+0x54>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
  exitCounter = TIME_TO_EXIT_RX;
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <AppliReceiveBuff+0x58>)
 8003ac6:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <AppliReceiveBuff+0x5c>)
 8003ac8:	801a      	strh	r2, [r3, #0]
  SpiritPktBasicAddressesInit(&xAddressInit);
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <AppliReceiveBuff+0x60>)
 8003acc:	0018      	movs	r0, r3
 8003ace:	f001 f897 	bl	8004c00 <SpiritPktBasicAddressesInit>

  Spirit1DisableIrq();
 8003ad2:	f003 f9dc 	bl	8006e8e <Spirit1DisableIrq>
  Spirit1EnableRxIrq();
 8003ad6:	f003 f9c7 	bl	8006e68 <Spirit1EnableRxIrq>

  /* payload length config */
  Spirit1SetPayloadlength(PAYLOAD_LEN);
 8003ada:	2019      	movs	r0, #25
 8003adc:	f003 f99c 	bl	8006e18 <Spirit1SetPayloadlength>

  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <AppliReceiveBuff+0x64>)
 8003ae2:	1c18      	adds	r0, r3, #0
 8003ae4:	f003 f9db 	bl	8006e9e <Spirit1SetRxTimeout>

  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <AppliReceiveBuff+0x68>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f003 f9a3 	bl	8006e38 <Spirit1SetDestinationAddress>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 8003af2:	f003 fa7b 	bl	8006fec <Spirit1ClearIRQ>
  /* RX command */ 
  Spirit1StartRx();
 8003af6:	f003 fa07 	bl	8006f08 <Spirit1StartRx>
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	2000028b 	.word	0x2000028b
 8003b08:	20000308 	.word	0x20000308
 8003b0c:	00000bb8 	.word	0x00000bb8
 8003b10:	20000074 	.word	0x20000074
 8003b14:	44fa0000 	.word	0x44fa0000
 8003b18:	20000445 	.word	0x20000445

08003b1c <P2P_Init>:
* communication
* @param  None
* @retval None
*/
void P2P_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  DestinationAddr = DESTINATION_ADDRESS;
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <P2P_Init+0x50>)
 8003b22:	2244      	movs	r2, #68	; 0x44
 8003b24:	701a      	strb	r2, [r3, #0]
  pRadioDriver->GpioIrq(&xGpioIRQ);
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <P2P_Init+0x54>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <P2P_Init+0x58>)
 8003b2e:	0010      	movs	r0, r2
 8003b30:	4798      	blx	r3
  Spirit1RadioInit(&xRadioInit);
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <P2P_Init+0x5c>)
 8003b34:	0018      	movs	r0, r3
 8003b36:	f003 f945 	bl	8006dc4 <Spirit1RadioInit>
  Spirit1SetPower(POWER_INDEX, POWER_DBM);
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <P2P_Init+0x60>)
 8003b3c:	1c19      	adds	r1, r3, #0
 8003b3e:	2007      	movs	r0, #7
 8003b40:	f003 f94c 	bl	8006ddc <Spirit1SetPower>
  Spirit1PacketConfig();
 8003b44:	f003 f961 	bl	8006e0a <Spirit1PacketConfig>
  Spirit1EnableSQI();
 8003b48:	f003 f9d3 	bl	8006ef2 <Spirit1EnableSQI>
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8003b4c:	2378      	movs	r3, #120	; 0x78
 8003b4e:	425b      	negs	r3, r3
 8003b50:	0018      	movs	r0, r3
 8003b52:	f001 fa53 	bl	8004ffc <SpiritQiSetRssiThresholddBm>

  radio_fsm = fsm_new (radio_states);
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <P2P_Init+0x64>)
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff fa99 	bl	8003090 <fsm_new>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <P2P_Init+0x68>)
 8003b62:	601a      	str	r2, [r3, #0]

}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	20000445 	.word	0x20000445
 8003b70:	2000044c 	.word	0x2000044c
 8003b74:	20000044 	.word	0x20000044
 8003b78:	20000048 	.word	0x20000048
 8003b7c:	4139999a 	.word	0x4139999a
 8003b80:	2000009c 	.word	0x2000009c
 8003b84:	20000450 	.word	0x20000450

08003b88 <BasicProtocolInit>:
* @brief  This function initializes the BASIC Packet handler of S2LP
* @param  None
* @retval None
*/
void BasicProtocolInit(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* RAdio Packet config */
	SpiritPktBasicInit(&xBasicInit);
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <BasicProtocolInit+0x14>)
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 ff3a 	bl	8004a08 <SpiritPktBasicInit>
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20000064 	.word	0x20000064

08003ba0 <P2PInterruptHandler>:
*         to manage the S2LP IRQ configured to be notified on the S2LP GPIO_3.
* @param  None
* @retval None
*/
void P2PInterruptHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	SpiritIrqGetStatus(&xIrqStatus);
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <P2PInterruptHandler+0xb0>)
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 fc3a 	bl	8004420 <SpiritIrqGetStatus>
  
  
  /* Check the S2LP TX_DATA_SENT IRQ flag */
  if(
     (xIrqStatus.IRQ_TX_DATA_SENT) 
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <P2PInterruptHandler+0xb0>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b2db      	uxtb	r3, r3
  if(
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <P2PInterruptHandler+0x28>
       
#ifdef CSMA_ENABLE
       ||(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8003bba:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <P2PInterruptHandler+0xb0>)
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01a      	beq.n	8003bfe <P2PInterruptHandler+0x5e>
#endif
         )
  {
#ifdef CSMA_ENABLE
	SpiritCsma(S_DISABLE);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f000 fae3 	bl	8004194 <SpiritCsma>
	SpiritRadioPersistenRx(S_ENABLE);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f002 fcf4 	bl	80065bc <SpiritRadioPersistenRx>
	SpiritRadioCsBlanking(S_ENABLE);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f002 fcb9 	bl	800654c <SpiritRadioCsBlanking>
    
    if(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <P2PInterruptHandler+0xb0>)
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	2208      	movs	r2, #8
 8003be0:	4013      	ands	r3, r2
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <P2PInterruptHandler+0x4e>
    {
    	SpiritCmdStrobeSabort();
 8003be8:	2067      	movs	r0, #103	; 0x67
 8003bea:	f000 fa49 	bl	8004080 <SpiritCmdStrobeCommand>
      
      
    }
    SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8003bee:	2378      	movs	r3, #120	; 0x78
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f001 fa02 	bl	8004ffc <SpiritQiSetRssiThresholddBm>
    
    
#endif
    
    xTxDoneFlag = SET;
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <P2PInterruptHandler+0xb4>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check the S2LP RX_DATA_READY IRQ flag */
  if((xIrqStatus.IRQ_RX_DATA_READY))
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <P2PInterruptHandler+0xb0>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <P2PInterruptHandler+0x72>
  {
    xRxDoneFlag = SET;   
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <P2PInterruptHandler+0xb8>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
  }
  
  /* Restart receive after receive timeout*/
  if (xIrqStatus.IRQ_RX_TIMEOUT)
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <P2PInterruptHandler+0xb0>)
 8003c14:	78db      	ldrb	r3, [r3, #3]
 8003c16:	2220      	movs	r2, #32
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <P2PInterruptHandler+0x90>
  {
    rx_timeout = SET; 
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <P2PInterruptHandler+0xbc>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeRx();
 8003c26:	f000 febf 	bl	80049a8 <SpiritManagementWaCmdStrobeRx>
 8003c2a:	2061      	movs	r0, #97	; 0x61
 8003c2c:	f000 fa28 	bl	8004080 <SpiritCmdStrobeCommand>
    
  }
  
  /* Check the S2LP RX_DATA_DISC IRQ flag */
  if(xIrqStatus.IRQ_RX_DATA_DISC)
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <P2PInterruptHandler+0xb0>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2202      	movs	r2, #2
 8003c36:	4013      	ands	r3, r2
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <P2PInterruptHandler+0xa8>
  {      
    /* RX command - to ensure the device will be ready for the next reception */
	  SpiritCmdStrobeRx();
 8003c3e:	f000 feb3 	bl	80049a8 <SpiritManagementWaCmdStrobeRx>
 8003c42:	2061      	movs	r0, #97	; 0x61
 8003c44:	f000 fa1c 	bl	8004080 <SpiritCmdStrobeCommand>
    
  }  
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	2000043c 	.word	0x2000043c
 8003c54:	20000289 	.word	0x20000289
 8003c58:	20000288 	.word	0x20000288
 8003c5c:	2000028a 	.word	0x2000028a

08003c60 <HAL_GPIO_EXTI_Callback>:
* @param uint16_t GPIO_Pin
* @retval None
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	0002      	movs	r2, r0
 8003c68:	1dbb      	adds	r3, r7, #6
 8003c6a:	801a      	strh	r2, [r3, #0]
  PushButtonStatusData = RESET;
  wakeupCounter = LPM_WAKEUP_TIME; 
  dataSendCounter = DATA_SEND_TIME;
  dataSendCounter++;
#endif
  if(GPIO_Pin==USER_BUTTON_PIN)
 8003c6c:	1dbb      	adds	r3, r7, #6
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	019b      	lsls	r3, r3, #6
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d117      	bne.n	8003ca8 <HAL_GPIO_EXTI_Callback+0x48>
  {

	/*It will be an USB interrupt, not a button*/
	tx_value = SET;
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_GPIO_EXTI_Callback+0x5c>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 8003c7e:	e00d      	b.n	8003c9c <HAL_GPIO_EXTI_Callback+0x3c>
	{
		aTransmitBuffer[i] = i*2;
 8003c80:	200f      	movs	r0, #15
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	183b      	adds	r3, r7, r0
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	18db      	adds	r3, r3, r3
 8003c8c:	b2d9      	uxtb	r1, r3
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x60>)
 8003c90:	5499      	strb	r1, [r3, r2]
	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 8003c92:	183b      	adds	r3, r7, r0
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	3201      	adds	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b13      	cmp	r3, #19
 8003ca4:	d9ec      	bls.n	8003c80 <HAL_GPIO_EXTI_Callback+0x20>
      P2PInterruptHandler();
    }
  
#endif
  
}
 8003ca6:	e005      	b.n	8003cb4 <HAL_GPIO_EXTI_Callback+0x54>
    if(GPIO_Pin==RADIO_GPIO_3_EXTI_LINE)
 8003ca8:	1dbb      	adds	r3, r7, #6
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d101      	bne.n	8003cb4 <HAL_GPIO_EXTI_Callback+0x54>
      P2PInterruptHandler();
 8003cb0:	f7ff ff76 	bl	8003ba0 <P2PInterruptHandler>
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b004      	add	sp, #16
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000028c 	.word	0x2000028c
 8003cc0:	20000088 	.word	0x20000088

08003cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cd2:	e7fe      	b.n	8003cd2 <HardFault_Handler+0x4>

08003cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cec:	f003 ffee 	bl	8007ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	019b      	lsls	r3, r3, #6
 8003d00:	0018      	movs	r0, r3
 8003d02:	f004 fabf 	bl	8008284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  if(__HAL_GPIO_EXTI_GET_IT(RADIO_GPIO_3_EXTI_LINE) != RESET)
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <EXTI4_15_IRQHandler+0x30>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	2280      	movs	r2, #128	; 0x80
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d002      	beq.n	8003d16 <EXTI4_15_IRQHandler+0x1e>
  {
	HAL_GPIO_EXTI_IRQHandler(RADIO_GPIO_3_EXTI_LINE);
 8003d10:	2080      	movs	r0, #128	; 0x80
 8003d12:	f004 fab7 	bl	8008284 <HAL_GPIO_EXTI_IRQHandler>

  }
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f004 fab2 	bl	8008284 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	40010400 	.word	0x40010400

08003d2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <TIM2_IRQHandler+0x14>)
 8003d32:	0018      	movs	r0, r3
 8003d34:	f005 ff1a 	bl	8009b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	20000380 	.word	0x20000380

08003d44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <_sbrk+0x50>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <_sbrk+0x16>
		heap_end = &end;
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <_sbrk+0x50>)
 8003d56:	4a10      	ldr	r2, [pc, #64]	; (8003d98 <_sbrk+0x54>)
 8003d58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <_sbrk+0x50>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <_sbrk+0x50>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	18d3      	adds	r3, r2, r3
 8003d68:	466a      	mov	r2, sp
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d907      	bls.n	8003d7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d6e:	f006 feb5 	bl	800aadc <__errno>
 8003d72:	0003      	movs	r3, r0
 8003d74:	220c      	movs	r2, #12
 8003d76:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	425b      	negs	r3, r3
 8003d7c:	e006      	b.n	8003d8c <_sbrk+0x48>
	}

	heap_end += incr;
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <_sbrk+0x50>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	18d2      	adds	r2, r2, r3
 8003d86:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <_sbrk+0x50>)
 8003d88:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000310 	.word	0x20000310
 8003d98:	200004c0 	.word	0x200004c0

08003d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <SystemInit+0x64>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <SystemInit+0x64>)
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	0049      	lsls	r1, r1, #1
 8003daa:	430a      	orrs	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <SystemInit+0x64>)
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <SystemInit+0x64>)
 8003db4:	4913      	ldr	r1, [pc, #76]	; (8003e04 <SystemInit+0x68>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <SystemInit+0x64>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <SystemInit+0x64>)
 8003dc0:	4911      	ldr	r1, [pc, #68]	; (8003e08 <SystemInit+0x6c>)
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <SystemInit+0x64>)
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <SystemInit+0x64>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	438a      	bics	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <SystemInit+0x64>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <SystemInit+0x64>)
 8003dd8:	490c      	ldr	r1, [pc, #48]	; (8003e0c <SystemInit+0x70>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <SystemInit+0x64>)
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <SystemInit+0x64>)
 8003de4:	490a      	ldr	r1, [pc, #40]	; (8003e10 <SystemInit+0x74>)
 8003de6:	400a      	ands	r2, r1
 8003de8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <SystemInit+0x64>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <SystemInit+0x78>)
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	0512      	lsls	r2, r2, #20
 8003df6:	609a      	str	r2, [r3, #8]
#endif
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	40021000 	.word	0x40021000
 8003e04:	88ff400c 	.word	0x88ff400c
 8003e08:	fef6fff6 	.word	0xfef6fff6
 8003e0c:	fffbffff 	.word	0xfffbffff
 8003e10:	ff02ffff 	.word	0xff02ffff
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003e18:	480d      	ldr	r0, [pc, #52]	; (8003e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e1e:	e003      	b.n	8003e28 <LoopCopyDataInit>

08003e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e26:	3104      	adds	r1, #4

08003e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e28:	480b      	ldr	r0, [pc, #44]	; (8003e58 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <LoopForever+0xe>)
  adds  r2, r0, r1
 8003e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e30:	d3f6      	bcc.n	8003e20 <CopyDataInit>
  ldr  r2, =_sbss
 8003e32:	4a0b      	ldr	r2, [pc, #44]	; (8003e60 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003e34:	e002      	b.n	8003e3c <LoopFillZerobss>

08003e36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003e36:	2300      	movs	r3, #0
  str  r3, [r2]
 8003e38:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e3a:	3204      	adds	r2, #4

08003e3c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <LoopForever+0x16>)
  cmp  r2, r3
 8003e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e40:	d3f9      	bcc.n	8003e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e42:	f7ff ffab 	bl	8003d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e46:	f006 fe4f 	bl	800aae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e4a:	f7ff f975 	bl	8003138 <main>

08003e4e <LoopForever>:

LoopForever:
    b LoopForever
 8003e4e:	e7fe      	b.n	8003e4e <LoopForever>
  ldr   r0, =_estack
 8003e50:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003e54:	0800b06c 	.word	0x0800b06c
  ldr  r0, =_sdata
 8003e58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e5c:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8003e60:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8003e64:	200004bc 	.word	0x200004bc

08003e68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e68:	e7fe      	b.n	8003e68 <ADC1_COMP_IRQHandler>
	...

08003e6c <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	0002      	movs	r2, r0
 8003e74:	1dfb      	adds	r3, r7, #7
 8003e76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8003e78:	230f      	movs	r3, #15
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	001a      	movs	r2, r3
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2050      	movs	r0, #80	; 0x50
 8003e82:	f003 fc59 	bl	8007738 <RadioSpiReadRegisters>
 8003e86:	1c03      	adds	r3, r0, #0
 8003e88:	1c1a      	adds	r2, r3, #0
 8003e8a:	4b18      	ldr	r3, [pc, #96]	; (8003eec <SpiritCalibrationVco+0x80>)
 8003e8c:	b212      	sxth	r2, r2
 8003e8e:	1c11      	adds	r1, r2, #0
 8003e90:	7019      	strb	r1, [r3, #0]
 8003e92:	0412      	lsls	r2, r2, #16
 8003e94:	0e12      	lsrs	r2, r2, #24
 8003e96:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <SpiritCalibrationVco+0x46>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8003ea0:	210f      	movs	r1, #15
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e007      	b.n	8003ec2 <SpiritCalibrationVco+0x56>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4393      	bics	r3, r2
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	701a      	strb	r2, [r3, #0]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8003ec2:	230f      	movs	r3, #15
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	2101      	movs	r1, #1
 8003eca:	2050      	movs	r0, #80	; 0x50
 8003ecc:	f003 fb92 	bl	80075f4 <RadioSpiWriteRegisters>
 8003ed0:	1c03      	adds	r3, r0, #0
 8003ed2:	1c1a      	adds	r2, r3, #0
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <SpiritCalibrationVco+0x80>)
 8003ed6:	b212      	sxth	r2, r2
 8003ed8:	1c11      	adds	r1, r2, #0
 8003eda:	7019      	strb	r1, [r3, #0]
 8003edc:	0412      	lsls	r2, r2, #16
 8003ede:	0e12      	lsrs	r2, r2, #24
 8003ee0:	705a      	strb	r2, [r3, #1]

}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	20000458 	.word	0x20000458

08003ef0 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8003ef6:	1dfb      	adds	r3, r7, #7
 8003ef8:	001a      	movs	r2, r3
 8003efa:	2101      	movs	r1, #1
 8003efc:	20e5      	movs	r0, #229	; 0xe5
 8003efe:	f003 fc1b 	bl	8007738 <RadioSpiReadRegisters>
 8003f02:	1c03      	adds	r3, r0, #0
 8003f04:	1c1a      	adds	r2, r3, #0
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <SpiritCalibrationGetVcoCalData+0x38>)
 8003f08:	b212      	sxth	r2, r2
 8003f0a:	1c11      	adds	r1, r2, #0
 8003f0c:	7019      	strb	r1, [r3, #0]
 8003f0e:	0412      	lsls	r2, r2, #16
 8003f10:	0e12      	lsrs	r2, r2, #24
 8003f12:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	227f      	movs	r2, #127	; 0x7f
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	b2db      	uxtb	r3, r3

}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b002      	add	sp, #8
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	20000458 	.word	0x20000458

08003f2c <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	0002      	movs	r2, r0
 8003f34:	1dfb      	adds	r3, r7, #7
 8003f36:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8003f38:	240f      	movs	r4, #15
 8003f3a:	193b      	adds	r3, r7, r4
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	2101      	movs	r1, #1
 8003f40:	206e      	movs	r0, #110	; 0x6e
 8003f42:	f003 fbf9 	bl	8007738 <RadioSpiReadRegisters>
 8003f46:	1c03      	adds	r3, r0, #0
 8003f48:	1c1a      	adds	r2, r3, #0
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <SpiritCalibrationSetVcoCalDataTx+0x70>)
 8003f4c:	b212      	sxth	r2, r2
 8003f4e:	1c11      	adds	r1, r2, #0
 8003f50:	7019      	strb	r1, [r3, #0]
 8003f52:	0412      	lsls	r2, r2, #16
 8003f54:	0e12      	lsrs	r2, r2, #24
 8003f56:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8003f58:	193b      	adds	r3, r7, r4
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	227f      	movs	r2, #127	; 0x7f
 8003f5e:	4393      	bics	r3, r2
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	193b      	adds	r3, r7, r4
 8003f64:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cVcoCalData;
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	193b      	adds	r3, r7, r4
 8003f74:	701a      	strb	r2, [r3, #0]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	001a      	movs	r2, r3
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	206e      	movs	r0, #110	; 0x6e
 8003f7e:	f003 fb39 	bl	80075f4 <RadioSpiWriteRegisters>
 8003f82:	1c03      	adds	r3, r0, #0
 8003f84:	1c1a      	adds	r2, r3, #0
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <SpiritCalibrationSetVcoCalDataTx+0x70>)
 8003f88:	b212      	sxth	r2, r2
 8003f8a:	1c11      	adds	r1, r2, #0
 8003f8c:	7019      	strb	r1, [r3, #0]
 8003f8e:	0412      	lsls	r2, r2, #16
 8003f90:	0e12      	lsrs	r2, r2, #24
 8003f92:	705a      	strb	r2, [r3, #1]

}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b005      	add	sp, #20
 8003f9a:	bd90      	pop	{r4, r7, pc}
 8003f9c:	20000458 	.word	0x20000458

08003fa0 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8003fa0:	b590      	push	{r4, r7, lr}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	1dfb      	adds	r3, r7, #7
 8003faa:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8003fac:	240f      	movs	r4, #15
 8003fae:	193b      	adds	r3, r7, r4
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	206f      	movs	r0, #111	; 0x6f
 8003fb6:	f003 fbbf 	bl	8007738 <RadioSpiReadRegisters>
 8003fba:	1c03      	adds	r3, r0, #0
 8003fbc:	1c1a      	adds	r2, r3, #0
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <SpiritCalibrationSetVcoCalDataRx+0x70>)
 8003fc0:	b212      	sxth	r2, r2
 8003fc2:	1c11      	adds	r1, r2, #0
 8003fc4:	7019      	strb	r1, [r3, #0]
 8003fc6:	0412      	lsls	r2, r2, #16
 8003fc8:	0e12      	lsrs	r2, r2, #24
 8003fca:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	227f      	movs	r2, #127	; 0x7f
 8003fd2:	4393      	bics	r3, r2
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	193b      	adds	r3, r7, r4
 8003fd8:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cVcoCalData;
 8003fda:	193b      	adds	r3, r7, r4
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	193b      	adds	r3, r7, r4
 8003fe8:	701a      	strb	r2, [r3, #0]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	001a      	movs	r2, r3
 8003fee:	2101      	movs	r1, #1
 8003ff0:	206f      	movs	r0, #111	; 0x6f
 8003ff2:	f003 faff 	bl	80075f4 <RadioSpiWriteRegisters>
 8003ff6:	1c03      	adds	r3, r0, #0
 8003ff8:	1c1a      	adds	r2, r3, #0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <SpiritCalibrationSetVcoCalDataRx+0x70>)
 8003ffc:	b212      	sxth	r2, r2
 8003ffe:	1c11      	adds	r1, r2, #0
 8004000:	7019      	strb	r1, [r3, #0]
 8004002:	0412      	lsls	r2, r2, #16
 8004004:	0e12      	lsrs	r2, r2, #24
 8004006:	705a      	strb	r2, [r3, #1]

}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b005      	add	sp, #20
 800400e:	bd90      	pop	{r4, r7, pc}
 8004010:	20000458 	.word	0x20000458

08004014 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	0002      	movs	r2, r0
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004020:	210f      	movs	r1, #15
 8004022:	000c      	movs	r4, r1
 8004024:	187b      	adds	r3, r7, r1
 8004026:	001a      	movs	r2, r3
 8004028:	2101      	movs	r1, #1
 800402a:	209e      	movs	r0, #158	; 0x9e
 800402c:	f003 fb84 	bl	8007738 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8004030:	0021      	movs	r1, r4
 8004032:	187b      	adds	r3, r7, r1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2206      	movs	r2, #6
 8004038:	4393      	bics	r3, r2
 800403a:	b2da      	uxtb	r2, r3
 800403c:	187b      	adds	r3, r7, r1
 800403e:	701a      	strb	r2, [r3, #0]
  
  if(xVco == VCO_H)
 8004040:	1dfb      	adds	r3, r7, #7
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d108      	bne.n	800405a <SpiritCalibrationSelectVco+0x46>
  {
    tempRegValue |= 0x02;
 8004048:	210f      	movs	r1, #15
 800404a:	187b      	adds	r3, r7, r1
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2202      	movs	r2, #2
 8004050:	4313      	orrs	r3, r2
 8004052:	b2da      	uxtb	r2, r3
 8004054:	187b      	adds	r3, r7, r1
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e007      	b.n	800406a <SpiritCalibrationSelectVco+0x56>
    
  }
  else
  {
    tempRegValue |= 0x04;
 800405a:	210f      	movs	r1, #15
 800405c:	187b      	adds	r3, r7, r1
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2204      	movs	r2, #4
 8004062:	4313      	orrs	r3, r2
 8004064:	b2da      	uxtb	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	701a      	strb	r2, [r3, #0]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 800406a:	230f      	movs	r3, #15
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	001a      	movs	r2, r3
 8004070:	2101      	movs	r1, #1
 8004072:	209e      	movs	r0, #158	; 0x9e
 8004074:	f003 fabe 	bl	80075f4 <RadioSpiWriteRegisters>
  
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b005      	add	sp, #20
 800407e:	bd90      	pop	{r4, r7, pc}

08004080 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	0002      	movs	r2, r0
 8004088:	1dfb      	adds	r3, r7, #7
 800408a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 800408c:	1dfb      	adds	r3, r7, #7
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	0018      	movs	r0, r3
 8004092:	f003 fbfd 	bl	8007890 <RadioSpiCommandStrobes>
 8004096:	1c03      	adds	r3, r0, #0
 8004098:	1c1a      	adds	r2, r3, #0
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <SpiritCmdStrobeCommand+0x30>)
 800409c:	b212      	sxth	r2, r2
 800409e:	1c11      	adds	r1, r2, #0
 80040a0:	7019      	strb	r1, [r3, #0]
 80040a2:	0412      	lsls	r2, r2, #16
 80040a4:	0e12      	lsrs	r2, r2, #24
 80040a6:	705a      	strb	r2, [r3, #1]
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000458 	.word	0x20000458

080040b4 <SpiritCsmaInit>:
 * @param  pxCsmaInit Csma init structure.
 *         This parameter is a pointer to @ref CsmaInit.
 * @retval None.
 */
void SpiritCsmaInit(CsmaInit* pxCsmaInit)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_BU_COUNTER_SEED(pxCsmaInit->nBuCounterSeed));
  s_assert_param(IS_BU_PRESCALER(pxCsmaInit->cBuPrescaler));
  s_assert_param(IS_CMAX_NB(pxCsmaInit->cMaxNb));

  /* CSMA BU counter seed (MSB) config */
  tempRegValue[0] = (uint8_t)(pxCsmaInit->nBuCounterSeed >> 8);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	889b      	ldrh	r3, [r3, #4]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	2108      	movs	r1, #8
 80040c8:	187b      	adds	r3, r7, r1
 80040ca:	701a      	strb	r2, [r3, #0]

  /* CSMA BU counter seed (LSB) config */
  tempRegValue[1] = (uint8_t) pxCsmaInit->nBuCounterSeed;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	889b      	ldrh	r3, [r3, #4]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	705a      	strb	r2, [r3, #1]

  /* CSMA BU prescaler config and CCA period config */
  tempRegValue[2] = (pxCsmaInit->cBuPrescaler << 2) | pxCsmaInit->xMultiplierTbit;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	799b      	ldrb	r3, [r3, #6]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	b25a      	sxtb	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	709a      	strb	r2, [r3, #2]

  /* CSMA CCA length config and max number of back-off */
  tempRegValue[3] = (pxCsmaInit->xCcaLength | pxCsmaInit->cMaxNb);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	789a      	ldrb	r2, [r3, #2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	70da      	strb	r2, [r3, #3]

  /* Reads the PROTOCOL1_BASE register value, to write the SEED_RELOAD and CSMA_PERS_ON fields */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	3304      	adds	r3, #4
 8004102:	001a      	movs	r2, r3
 8004104:	2101      	movs	r1, #1
 8004106:	2051      	movs	r0, #81	; 0x51
 8004108:	f003 fb16 	bl	8007738 <RadioSpiReadRegisters>
 800410c:	1c03      	adds	r3, r0, #0
 800410e:	1c1a      	adds	r2, r3, #0
 8004110:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <SpiritCsmaInit+0xdc>)
 8004112:	b212      	sxth	r2, r2
 8004114:	1c11      	adds	r1, r2, #0
 8004116:	7019      	strb	r1, [r3, #0]
 8004118:	0412      	lsls	r2, r2, #16
 800411a:	0e12      	lsrs	r2, r2, #24
 800411c:	705a      	strb	r2, [r3, #1]

  /* Writes the new value for persistent mode */
  if(pxCsmaInit->xCsmaPersistentMode==S_ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d108      	bne.n	8004138 <SpiritCsmaInit+0x84>
  {
    tempRegValue[4] |= PROTOCOL1_CSMA_PERS_ON_MASK;
 8004126:	2108      	movs	r1, #8
 8004128:	187b      	adds	r3, r7, r1
 800412a:	791b      	ldrb	r3, [r3, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	4313      	orrs	r3, r2
 8004130:	b2da      	uxtb	r2, r3
 8004132:	187b      	adds	r3, r7, r1
 8004134:	711a      	strb	r2, [r3, #4]
 8004136:	e007      	b.n	8004148 <SpiritCsmaInit+0x94>
  }
  else
  {
    tempRegValue[4] &= ~PROTOCOL1_CSMA_PERS_ON_MASK;
 8004138:	2108      	movs	r1, #8
 800413a:	187b      	adds	r3, r7, r1
 800413c:	791b      	ldrb	r3, [r3, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	4393      	bics	r3, r2
 8004142:	b2da      	uxtb	r2, r3
 8004144:	187b      	adds	r3, r7, r1
 8004146:	711a      	strb	r2, [r3, #4]
  }

  /* Writes PROTOCOL1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8004148:	2408      	movs	r4, #8
 800414a:	193b      	adds	r3, r7, r4
 800414c:	3304      	adds	r3, #4
 800414e:	001a      	movs	r2, r3
 8004150:	2101      	movs	r1, #1
 8004152:	2051      	movs	r0, #81	; 0x51
 8004154:	f003 fa4e 	bl	80075f4 <RadioSpiWriteRegisters>
 8004158:	1c03      	adds	r3, r0, #0
 800415a:	1c1a      	adds	r2, r3, #0
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <SpiritCsmaInit+0xdc>)
 800415e:	b212      	sxth	r2, r2
 8004160:	1c11      	adds	r1, r2, #0
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	0412      	lsls	r2, r2, #16
 8004166:	0e12      	lsrs	r2, r2, #24
 8004168:	705a      	strb	r2, [r3, #1]

  /* Writes CSMA_CONFIGx_BASE registers */
  g_xStatus = SpiritSpiWriteRegisters(CSMA_CONFIG3_BASE, 4, tempRegValue);
 800416a:	193b      	adds	r3, r7, r4
 800416c:	001a      	movs	r2, r3
 800416e:	2104      	movs	r1, #4
 8004170:	2064      	movs	r0, #100	; 0x64
 8004172:	f003 fa3f 	bl	80075f4 <RadioSpiWriteRegisters>
 8004176:	1c03      	adds	r3, r0, #0
 8004178:	1c1a      	adds	r2, r3, #0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <SpiritCsmaInit+0xdc>)
 800417c:	b212      	sxth	r2, r2
 800417e:	1c11      	adds	r1, r2, #0
 8004180:	7019      	strb	r1, [r3, #0]
 8004182:	0412      	lsls	r2, r2, #16
 8004184:	0e12      	lsrs	r2, r2, #24
 8004186:	705a      	strb	r2, [r3, #1]

}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b005      	add	sp, #20
 800418e:	bd90      	pop	{r4, r7, pc}
 8004190:	20000458 	.word	0x20000458

08004194 <SpiritCsma>:
 * @param  xNewState the state of the CSMA mode.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCsma(SpiritFunctionalState xNewState)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	0002      	movs	r2, r0
 800419c:	1dfb      	adds	r3, r7, #7
 800419e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PROTOCOL1 register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 80041a0:	230f      	movs	r3, #15
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	001a      	movs	r2, r3
 80041a6:	2101      	movs	r1, #1
 80041a8:	2051      	movs	r0, #81	; 0x51
 80041aa:	f003 fac5 	bl	8007738 <RadioSpiReadRegisters>
 80041ae:	1c03      	adds	r3, r0, #0
 80041b0:	1c1a      	adds	r2, r3, #0
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <SpiritCsma+0x80>)
 80041b4:	b212      	sxth	r2, r2
 80041b6:	1c11      	adds	r1, r2, #0
 80041b8:	7019      	strb	r1, [r3, #0]
 80041ba:	0412      	lsls	r2, r2, #16
 80041bc:	0e12      	lsrs	r2, r2, #24
 80041be:	705a      	strb	r2, [r3, #1]

  /* Sets or resets the CSMA enable bit */
  if(xNewState==S_ENABLE)
 80041c0:	1dfb      	adds	r3, r7, #7
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d108      	bne.n	80041da <SpiritCsma+0x46>
  {
    tempRegValue |= PROTOCOL1_CSMA_ON_MASK;
 80041c8:	210f      	movs	r1, #15
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2204      	movs	r2, #4
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e007      	b.n	80041ea <SpiritCsma+0x56>
  }
  else
  {
    tempRegValue &= ~PROTOCOL1_CSMA_ON_MASK;
 80041da:	210f      	movs	r1, #15
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2204      	movs	r2, #4
 80041e2:	4393      	bics	r3, r2
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	701a      	strb	r2, [r3, #0]
  }

  /* Writes the new value on the PROTOCOL1 register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 80041ea:	230f      	movs	r3, #15
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	001a      	movs	r2, r3
 80041f0:	2101      	movs	r1, #1
 80041f2:	2051      	movs	r0, #81	; 0x51
 80041f4:	f003 f9fe 	bl	80075f4 <RadioSpiWriteRegisters>
 80041f8:	1c03      	adds	r3, r0, #0
 80041fa:	1c1a      	adds	r2, r3, #0
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <SpiritCsma+0x80>)
 80041fe:	b212      	sxth	r2, r2
 8004200:	1c11      	adds	r1, r2, #0
 8004202:	7019      	strb	r1, [r3, #0]
 8004204:	0412      	lsls	r2, r2, #16
 8004206:	0e12      	lsrs	r2, r2, #24
 8004208:	705a      	strb	r2, [r3, #1]

}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	20000458 	.word	0x20000458

08004218 <SpiritGeneralSetExtRef>:
 * @param  xExtMode new state for the external reference.
 *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
 * @retval None.
 */
void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	0002      	movs	r2, r0
 8004220:	1dfb      	adds	r3, r7, #7
 8004222:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_MODE_EXT(xExtMode));

  /* Reads the ANA_FUNC_CONF0_BASE register value */
  SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8004224:	230f      	movs	r3, #15
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	001a      	movs	r2, r3
 800422a:	2101      	movs	r1, #1
 800422c:	2001      	movs	r0, #1
 800422e:	f003 fa83 	bl	8007738 <RadioSpiReadRegisters>

  /* Build the value to write */
  if(xExtMode == MODE_EXT_XO)
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d108      	bne.n	800424c <SpiritGeneralSetExtRef+0x34>
  {
    tempRegValue &= ~EXT_REF_MASK;
 800423a:	210f      	movs	r1, #15
 800423c:	187b      	adds	r3, r7, r1
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2210      	movs	r2, #16
 8004242:	4393      	bics	r3, r2
 8004244:	b2da      	uxtb	r2, r3
 8004246:	187b      	adds	r3, r7, r1
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e007      	b.n	800425c <SpiritGeneralSetExtRef+0x44>
  }
  else
  {
    tempRegValue |= EXT_REF_MASK;
 800424c:	210f      	movs	r1, #15
 800424e:	187b      	adds	r3, r7, r1
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2210      	movs	r2, #16
 8004254:	4313      	orrs	r3, r2
 8004256:	b2da      	uxtb	r2, r3
 8004258:	187b      	adds	r3, r7, r1
 800425a:	701a      	strb	r2, [r3, #0]
  }

  /* Writes value on register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800425c:	230f      	movs	r3, #15
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	001a      	movs	r2, r3
 8004262:	2101      	movs	r1, #1
 8004264:	2001      	movs	r0, #1
 8004266:	f003 f9c5 	bl	80075f4 <RadioSpiWriteRegisters>
 800426a:	1c03      	adds	r3, r0, #0
 800426c:	1c1a      	adds	r2, r3, #0
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <SpiritGeneralSetExtRef+0x6c>)
 8004270:	b212      	sxth	r2, r2
 8004272:	1c11      	adds	r1, r2, #0
 8004274:	7019      	strb	r1, [r3, #0]
 8004276:	0412      	lsls	r2, r2, #16
 8004278:	0e12      	lsrs	r2, r2, #24
 800427a:	705a      	strb	r2, [r3, #1]

}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b004      	add	sp, #16
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000458 	.word	0x20000458

08004288 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8004290:	210f      	movs	r1, #15
 8004292:	187b      	adds	r3, r7, r1
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	785a      	ldrb	r2, [r3, #1]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	789b      	ldrb	r3, [r3, #2]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	187b      	adds	r3, r7, r1
 80042a6:	701a      	strb	r2, [r3, #0]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	187a      	adds	r2, r7, r1
 80042ae:	2101      	movs	r1, #1
 80042b0:	0018      	movs	r0, r3
 80042b2:	f003 f99f 	bl	80075f4 <RadioSpiWriteRegisters>
 80042b6:	1c03      	adds	r3, r0, #0
 80042b8:	1c1a      	adds	r2, r3, #0
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <SpiritGpioInit+0x48>)
 80042bc:	b212      	sxth	r2, r2
 80042be:	1c11      	adds	r1, r2, #0
 80042c0:	7019      	strb	r1, [r3, #0]
 80042c2:	0412      	lsls	r2, r2, #16
 80042c4:	0e12      	lsrs	r2, r2, #24
 80042c6:	705a      	strb	r2, [r3, #1]

}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000458 	.word	0x20000458

080042d4 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 80042dc:	230c      	movs	r3, #12
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

  if(pxIrqInit!=NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <SpiritIrqDeInit+0x2c>
  {
    uint32_t tempValue = 0x00000000;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
    
    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 80042ee:	2308      	movs	r3, #8
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	0010      	movs	r0, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	2304      	movs	r3, #4
 80042fa:	001a      	movs	r2, r3
 80042fc:	f006 fc22 	bl	800ab44 <memcpy>
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8004300:	230c      	movs	r3, #12
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	001a      	movs	r2, r3
 8004306:	2104      	movs	r1, #4
 8004308:	2090      	movs	r0, #144	; 0x90
 800430a:	f003 f973 	bl	80075f4 <RadioSpiWriteRegisters>
 800430e:	1c03      	adds	r3, r0, #0
 8004310:	1c1a      	adds	r2, r3, #0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <SpiritIrqDeInit+0x54>)
 8004314:	b212      	sxth	r2, r2
 8004316:	1c11      	adds	r1, r2, #0
 8004318:	7019      	strb	r1, [r3, #0]
 800431a:	0412      	lsls	r2, r2, #16
 800431c:	0e12      	lsrs	r2, r2, #24
 800431e:	705a      	strb	r2, [r3, #1]
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b004      	add	sp, #16
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000458 	.word	0x20000458

0800432c <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	000a      	movs	r2, r1
 8004336:	1cfb      	adds	r3, r7, #3
 8004338:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800433e:	230c      	movs	r3, #12
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	001a      	movs	r2, r3
 8004344:	2104      	movs	r1, #4
 8004346:	2090      	movs	r0, #144	; 0x90
 8004348:	f003 f9f6 	bl	8007738 <RadioSpiReadRegisters>
 800434c:	1c03      	adds	r3, r0, #0
 800434e:	1c1a      	adds	r2, r3, #0
 8004350:	4b32      	ldr	r3, [pc, #200]	; (800441c <SpiritIrq+0xf0>)
 8004352:	b212      	sxth	r2, r2
 8004354:	1c11      	adds	r1, r2, #0
 8004356:	7019      	strb	r1, [r3, #0]
 8004358:	0412      	lsls	r2, r2, #16
 800435a:	0e12      	lsrs	r2, r2, #24
 800435c:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 800435e:	2313      	movs	r3, #19
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e015      	b.n	8004394 <SpiritIrq+0x68>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8004368:	2013      	movs	r0, #19
 800436a:	183b      	adds	r3, r7, r0
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	220c      	movs	r2, #12
 8004370:	18ba      	adds	r2, r7, r2
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	0019      	movs	r1, r3
 8004376:	183b      	adds	r3, r7, r0
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2203      	movs	r2, #3
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4099      	lsls	r1, r3
 8004382:	000b      	movs	r3, r1
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	18d3      	adds	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 800438a:	183b      	adds	r3, r7, r0
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	183b      	adds	r3, r7, r0
 8004390:	3201      	adds	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	2313      	movs	r3, #19
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d9e4      	bls.n	8004368 <SpiritIrq+0x3c>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 800439e:	1cfb      	adds	r3, r7, #3
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <SpiritIrq+0x86>
  {
    tempValue &= (~xIrq);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	43da      	mvns	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4013      	ands	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e003      	b.n	80043ba <SpiritIrq+0x8e>
  }
  else
  {
    tempValue |= (xIrq);
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80043ba:	2312      	movs	r3, #18
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e012      	b.n	80043ea <SpiritIrq+0xbe>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80043c4:	2012      	movs	r0, #18
 80043c6:	183b      	adds	r3, r7, r0
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2203      	movs	r2, #3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	40da      	lsrs	r2, r3
 80043d4:	183b      	adds	r3, r7, r0
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b2d1      	uxtb	r1, r2
 80043da:	220c      	movs	r2, #12
 80043dc:	18ba      	adds	r2, r7, r2
 80043de:	54d1      	strb	r1, [r2, r3]
  for(uint8_t j=0; j<4; j++)
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	781a      	ldrb	r2, [r3, #0]
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	3201      	adds	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	2312      	movs	r3, #18
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d9e7      	bls.n	80043c4 <SpiritIrq+0x98>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80043f4:	230c      	movs	r3, #12
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	001a      	movs	r2, r3
 80043fa:	2104      	movs	r1, #4
 80043fc:	2090      	movs	r0, #144	; 0x90
 80043fe:	f003 f8f9 	bl	80075f4 <RadioSpiWriteRegisters>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	1c1a      	adds	r2, r3, #0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <SpiritIrq+0xf0>)
 8004408:	b212      	sxth	r2, r2
 800440a:	1c11      	adds	r1, r2, #0
 800440c:	7019      	strb	r1, [r3, #0]
 800440e:	0412      	lsls	r2, r2, #16
 8004410:	0e12      	lsrs	r2, r2, #24
 8004412:	705a      	strb	r2, [r3, #1]

}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b006      	add	sp, #24
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000458 	.word	0x20000458

08004420 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800442c:	230c      	movs	r3, #12
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	001a      	movs	r2, r3
 8004432:	2104      	movs	r1, #4
 8004434:	20fa      	movs	r0, #250	; 0xfa
 8004436:	f003 f97f 	bl	8007738 <RadioSpiReadRegisters>
 800443a:	1c03      	adds	r3, r0, #0
 800443c:	1c1a      	adds	r2, r3, #0
 800443e:	4b13      	ldr	r3, [pc, #76]	; (800448c <SpiritIrqGetStatus+0x6c>)
 8004440:	b212      	sxth	r2, r2
 8004442:	1c11      	adds	r1, r2, #0
 8004444:	7019      	strb	r1, [r3, #0]
 8004446:	0412      	lsls	r2, r2, #16
 8004448:	0e12      	lsrs	r2, r2, #24
 800444a:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 800444c:	2313      	movs	r3, #19
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e011      	b.n	800447a <SpiritIrqGetStatus+0x5a>
  {
    *pIrqPointer = tempRegValue[3-i];
 8004456:	2113      	movs	r1, #19
 8004458:	187b      	adds	r3, r7, r1
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2203      	movs	r2, #3
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	220c      	movs	r2, #12
 8004462:	18ba      	adds	r2, r7, r2
 8004464:	5cd2      	ldrb	r2, [r2, r3]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	3301      	adds	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8004470:	187b      	adds	r3, r7, r1
 8004472:	781a      	ldrb	r2, [r3, #0]
 8004474:	187b      	adds	r3, r7, r1
 8004476:	3201      	adds	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	2313      	movs	r3, #19
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d9e8      	bls.n	8004456 <SpiritIrqGetStatus+0x36>
  }
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b006      	add	sp, #24
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000458 	.word	0x20000458

08004490 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	001a      	movs	r2, r3
 800449a:	2104      	movs	r1, #4
 800449c:	20fa      	movs	r0, #250	; 0xfa
 800449e:	f003 f94b 	bl	8007738 <RadioSpiReadRegisters>
 80044a2:	1c03      	adds	r3, r0, #0
 80044a4:	1c1a      	adds	r2, r3, #0
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <SpiritIrqClearStatus+0x2c>)
 80044a8:	b212      	sxth	r2, r2
 80044aa:	1c11      	adds	r1, r2, #0
 80044ac:	7019      	strb	r1, [r3, #0]
 80044ae:	0412      	lsls	r2, r2, #16
 80044b0:	0e12      	lsrs	r2, r2, #24
 80044b2:	705a      	strb	r2, [r3, #1]

}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000458 	.word	0x20000458

080044c0 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	001a      	movs	r2, r3
 80044ca:	2101      	movs	r1, #1
 80044cc:	20e7      	movs	r0, #231	; 0xe7
 80044ce:	f003 f933 	bl	8007738 <RadioSpiReadRegisters>
 80044d2:	1c03      	adds	r3, r0, #0
 80044d4:	1c1a      	adds	r2, r3, #0
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <SpiritLinearFifoReadNumElementsRxFifo+0x38>)
 80044d8:	b212      	sxth	r2, r2
 80044da:	1c11      	adds	r1, r2, #0
 80044dc:	7019      	strb	r1, [r3, #0]
 80044de:	0412      	lsls	r2, r2, #16
 80044e0:	0e12      	lsrs	r2, r2, #24
 80044e2:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80044e4:	1dfb      	adds	r3, r7, #7
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	227f      	movs	r2, #127	; 0x7f
 80044ea:	4013      	ands	r3, r2
 80044ec:	b2db      	uxtb	r3, r3

}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	20000458 	.word	0x20000458

080044fc <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80044fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fe:	b08d      	sub	sp, #52	; 0x34
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a8d      	ldr	r2, [pc, #564]	; (800473c <SpiritManagementSetFrequencyBase+0x240>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d90b      	bls.n	8004524 <SpiritManagementSetFrequencyBase+0x28>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a8c      	ldr	r2, [pc, #560]	; (8004740 <SpiritManagementSetFrequencyBase+0x244>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d807      	bhi.n	8004524 <SpiritManagementSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8004514:	2327      	movs	r3, #39	; 0x27
 8004516:	2208      	movs	r2, #8
 8004518:	4694      	mov	ip, r2
 800451a:	44bc      	add	ip, r7
 800451c:	4463      	add	r3, ip
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e026      	b.n	8004572 <SpiritManagementSetFrequencyBase+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a87      	ldr	r2, [pc, #540]	; (8004744 <SpiritManagementSetFrequencyBase+0x248>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d90b      	bls.n	8004544 <SpiritManagementSetFrequencyBase+0x48>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a86      	ldr	r2, [pc, #536]	; (8004748 <SpiritManagementSetFrequencyBase+0x24c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d807      	bhi.n	8004544 <SpiritManagementSetFrequencyBase+0x48>
  {
    band = MIDDLE_BAND;
 8004534:	2327      	movs	r3, #39	; 0x27
 8004536:	2208      	movs	r2, #8
 8004538:	4694      	mov	ip, r2
 800453a:	44bc      	add	ip, r7
 800453c:	4463      	add	r3, ip
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e016      	b.n	8004572 <SpiritManagementSetFrequencyBase+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a81      	ldr	r2, [pc, #516]	; (800474c <SpiritManagementSetFrequencyBase+0x250>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d90b      	bls.n	8004564 <SpiritManagementSetFrequencyBase+0x68>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a80      	ldr	r2, [pc, #512]	; (8004750 <SpiritManagementSetFrequencyBase+0x254>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d807      	bhi.n	8004564 <SpiritManagementSetFrequencyBase+0x68>
  {
    band = LOW_BAND;
 8004554:	2327      	movs	r3, #39	; 0x27
 8004556:	2208      	movs	r2, #8
 8004558:	4694      	mov	ip, r2
 800455a:	44bc      	add	ip, r7
 800455c:	4463      	add	r3, ip
 800455e:	2202      	movs	r2, #2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e006      	b.n	8004572 <SpiritManagementSetFrequencyBase+0x76>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8004564:	2327      	movs	r3, #39	; 0x27
 8004566:	2208      	movs	r2, #8
 8004568:	4694      	mov	ip, r2
 800456a:	44bc      	add	ip, r7
 800456c:	4463      	add	r3, ip
 800456e:	2203      	movs	r2, #3
 8004570:	701a      	strb	r2, [r3, #0]
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8004572:	f001 f931 	bl	80057d8 <SpiritRadioGetFrequencyOffset>
 8004576:	0003      	movs	r3, r0
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800457a:	f001 f90b 	bl	8005794 <SpiritRadioGetChannelSpace>
 800457e:	0003      	movs	r3, r0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8004582:	251b      	movs	r5, #27
 8004584:	2608      	movs	r6, #8
 8004586:	19bb      	adds	r3, r7, r6
 8004588:	195c      	adds	r4, r3, r5
 800458a:	f001 f8e9 	bl	8005760 <SpiritRadioGetChannel>
 800458e:	0003      	movs	r3, r0
 8004590:	7023      	strb	r3, [r4, #0]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8004592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	18d2      	adds	r2, r2, r3
 8004598:	19bb      	adds	r3, r7, r6
 800459a:	195b      	adds	r3, r3, r5
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045a0:	434b      	muls	r3, r1
 80045a2:	18d3      	adds	r3, r2, r3
 80045a4:	61fb      	str	r3, [r7, #28]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80045a6:	f002 f87b 	bl	80066a0 <SpiritRadioGetRefDiv>
 80045aa:	0003      	movs	r3, r0
 80045ac:	001a      	movs	r2, r3
 80045ae:	2313      	movs	r3, #19
 80045b0:	2108      	movs	r1, #8
 80045b2:	468c      	mov	ip, r1
 80045b4:	44bc      	add	ip, r7
 80045b6:	4463      	add	r3, ip
 80045b8:	3201      	adds	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]
  
  switch(band)
 80045bc:	2327      	movs	r3, #39	; 0x27
 80045be:	2208      	movs	r2, #8
 80045c0:	4694      	mov	ip, r2
 80045c2:	44bc      	add	ip, r7
 80045c4:	4463      	add	r3, ip
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d01f      	beq.n	800460c <SpiritManagementSetFrequencyBase+0x110>
 80045cc:	dc02      	bgt.n	80045d4 <SpiritManagementSetFrequencyBase+0xd8>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d028      	beq.n	8004624 <SpiritManagementSetFrequencyBase+0x128>
 80045d2:	e032      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d00d      	beq.n	80045f4 <SpiritManagementSetFrequencyBase+0xf8>
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d12e      	bne.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4a5d      	ldr	r2, [pc, #372]	; (8004754 <SpiritManagementSetFrequencyBase+0x258>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d803      	bhi.n	80045ec <SpiritManagementSetFrequencyBase+0xf0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80045e4:	2000      	movs	r0, #0
 80045e6:	f7ff fd15 	bl	8004014 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80045ea:	e026      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
      SpiritCalibrationSelectVco(VCO_H);
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7ff fd11 	bl	8004014 <SpiritCalibrationSelectVco>
    break;
 80045f2:	e022      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
    
  case LOW_BAND:
    if(Fc<322562500)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4a58      	ldr	r2, [pc, #352]	; (8004758 <SpiritManagementSetFrequencyBase+0x25c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d803      	bhi.n	8004604 <SpiritManagementSetFrequencyBase+0x108>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80045fc:	2000      	movs	r0, #0
 80045fe:	f7ff fd09 	bl	8004014 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8004602:	e01a      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
      SpiritCalibrationSelectVco(VCO_H);
 8004604:	2001      	movs	r0, #1
 8004606:	f7ff fd05 	bl	8004014 <SpiritCalibrationSelectVco>
    break;
 800460a:	e016      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4a53      	ldr	r2, [pc, #332]	; (800475c <SpiritManagementSetFrequencyBase+0x260>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d803      	bhi.n	800461c <SpiritManagementSetFrequencyBase+0x120>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8004614:	2000      	movs	r0, #0
 8004616:	f7ff fcfd 	bl	8004014 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800461a:	e00e      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
      SpiritCalibrationSelectVco(VCO_H);
 800461c:	2001      	movs	r0, #1
 800461e:	f7ff fcf9 	bl	8004014 <SpiritCalibrationSelectVco>
    break;
 8004622:	e00a      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4a4e      	ldr	r2, [pc, #312]	; (8004760 <SpiritManagementSetFrequencyBase+0x264>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d803      	bhi.n	8004634 <SpiritManagementSetFrequencyBase+0x138>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800462c:	2000      	movs	r0, #0
 800462e:	f7ff fcf1 	bl	8004014 <SpiritCalibrationSelectVco>
 8004632:	e002      	b.n	800463a <SpiritManagementSetFrequencyBase+0x13e>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8004634:	2001      	movs	r0, #1
 8004636:	f7ff fced 	bl	8004014 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800463a:	2612      	movs	r6, #18
 800463c:	2408      	movs	r4, #8
 800463e:	193b      	adds	r3, r7, r4
 8004640:	199c      	adds	r4, r3, r6
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 ff6f 	bl	8005528 <SpiritRadioSearchWCP>
 800464a:	0003      	movs	r3, r0
 800464c:	7023      	strb	r3, [r4, #0]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7fe fcc2 	bl	8002fd8 <__aeabi_ui2d>
 8004654:	0004      	movs	r4, r0
 8004656:	000d      	movs	r5, r1
 8004658:	2313      	movs	r3, #19
 800465a:	2208      	movs	r2, #8
 800465c:	4694      	mov	ip, r2
 800465e:	44bc      	add	ip, r7
 8004660:	4463      	add	r3, ip
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	049b      	lsls	r3, r3, #18
 8004666:	2227      	movs	r2, #39	; 0x27
 8004668:	2108      	movs	r1, #8
 800466a:	468c      	mov	ip, r1
 800466c:	44bc      	add	ip, r7
 800466e:	4462      	add	r2, ip
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	493c      	ldr	r1, [pc, #240]	; (8004764 <SpiritManagementSetFrequencyBase+0x268>)
 8004674:	5c8a      	ldrb	r2, [r1, r2]
 8004676:	4353      	muls	r3, r2
 8004678:	0018      	movs	r0, r3
 800467a:	f7fe fc73 	bl	8002f64 <__aeabi_i2d>
 800467e:	6038      	str	r0, [r7, #0]
 8004680:	6079      	str	r1, [r7, #4]
 8004682:	f002 f88d 	bl	80067a0 <SpiritRadioGetXtalFrequency>
 8004686:	0003      	movs	r3, r0
 8004688:	0018      	movs	r0, r3
 800468a:	f7fe fca5 	bl	8002fd8 <__aeabi_ui2d>
 800468e:	0002      	movs	r2, r0
 8004690:	000b      	movs	r3, r1
 8004692:	6838      	ldr	r0, [r7, #0]
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	f7fd fa6b 	bl	8001b70 <__aeabi_ddiv>
 800469a:	0002      	movs	r2, r0
 800469c:	000b      	movs	r3, r1
 800469e:	0020      	movs	r0, r4
 80046a0:	0029      	movs	r1, r5
 80046a2:	f7fd fe6f 	bl	8002384 <__aeabi_dmul>
 80046a6:	0003      	movs	r3, r0
 80046a8:	000c      	movs	r4, r1
 80046aa:	0018      	movs	r0, r3
 80046ac:	0021      	movs	r1, r4
 80046ae:	f7fb ff51 	bl	8000554 <__aeabi_d2uiz>
 80046b2:	0003      	movs	r3, r0
 80046b4:	617b      	str	r3, [r7, #20]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	0d5b      	lsrs	r3, r3, #21
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	221f      	movs	r2, #31
 80046be:	4013      	ands	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	2408      	movs	r4, #8
 80046c4:	193b      	adds	r3, r7, r4
 80046c6:	199b      	adds	r3, r3, r6
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	015b      	lsls	r3, r3, #5
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4313      	orrs	r3, r2
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	2008      	movs	r0, #8
 80046d4:	193b      	adds	r3, r7, r4
 80046d6:	181b      	adds	r3, r3, r0
 80046d8:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	0b5b      	lsrs	r3, r3, #13
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	193b      	adds	r3, r7, r4
 80046e2:	181b      	adds	r3, r3, r0
 80046e4:	705a      	strb	r2, [r3, #1]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	193b      	adds	r3, r7, r4
 80046ee:	181b      	adds	r3, r3, r0
 80046f0:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	2327      	movs	r3, #39	; 0x27
 80046fc:	2108      	movs	r1, #8
 80046fe:	468c      	mov	ip, r1
 8004700:	44bc      	add	ip, r7
 8004702:	4463      	add	r3, ip
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	4918      	ldr	r1, [pc, #96]	; (8004768 <SpiritManagementSetFrequencyBase+0x26c>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	4313      	orrs	r3, r2
 800470c:	b2da      	uxtb	r2, r3
 800470e:	193b      	adds	r3, r7, r4
 8004710:	181b      	adds	r3, r3, r0
 8004712:	70da      	strb	r2, [r3, #3]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8004714:	193b      	adds	r3, r7, r4
 8004716:	181b      	adds	r3, r3, r0
 8004718:	001a      	movs	r2, r3
 800471a:	2104      	movs	r1, #4
 800471c:	2008      	movs	r0, #8
 800471e:	f002 ff69 	bl	80075f4 <RadioSpiWriteRegisters>
 8004722:	1c03      	adds	r3, r0, #0
 8004724:	1c1a      	adds	r2, r3, #0
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <SpiritManagementSetFrequencyBase+0x270>)
 8004728:	b212      	sxth	r2, r2
 800472a:	1c11      	adds	r1, r2, #0
 800472c:	7019      	strb	r1, [r3, #0]
 800472e:	0412      	lsls	r2, r2, #16
 8004730:	0e12      	lsrs	r2, r2, #24
 8004732:	705a      	strb	r2, [r3, #1]
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b00d      	add	sp, #52	; 0x34
 800473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473c:	2e5f567f 	.word	0x2e5f567f
 8004740:	390c2fe0 	.word	0x390c2fe0
 8004744:	1701e47f 	.word	0x1701e47f
 8004748:	1c146a60 	.word	0x1c146a60
 800474c:	11d260bf 	.word	0x11d260bf
 8004750:	14ced7e0 	.word	0x14ced7e0
 8004754:	099cf4e1 	.word	0x099cf4e1
 8004758:	1339e9c3 	.word	0x1339e9c3
 800475c:	19a28d05 	.word	0x19a28d05
 8004760:	33451a0a 	.word	0x33451a0a
 8004764:	0800ae74 	.word	0x0800ae74
 8004768:	0800ae70 	.word	0x0800ae70
 800476c:	20000458 	.word	0x20000458

08004770 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8004776:	230f      	movs	r3, #15
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	2200      	movs	r2, #0
 800477c:	701a      	strb	r2, [r3, #0]
  uint8_t cStandby = 0;
 800477e:	230e      	movs	r3, #14
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8004786:	f002 f80b 	bl	80067a0 <SpiritRadioGetXtalFrequency>
 800478a:	0003      	movs	r3, r0
 800478c:	60bb      	str	r3, [r7, #8]
  uint8_t nLockwon=0;
 800478e:	230d      	movs	r3, #13
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4a64      	ldr	r2, [pc, #400]	; (800492c <SpiritManagementWaVcoCalibration+0x1bc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d912      	bls.n	80047c4 <SpiritManagementWaVcoCalibration+0x54>
  {
    if(!SpiritRadioGetRefDiv())
 800479e:	f001 ff7f 	bl	80066a0 <SpiritRadioGetRefDiv>
 80047a2:	1e03      	subs	r3, r0, #0
 80047a4:	d10e      	bne.n	80047c4 <SpiritManagementWaVcoCalibration+0x54>
    {
      cRestore = 1;
 80047a6:	230f      	movs	r3, #15
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
      nFreq = SpiritRadioGetFrequencyBase();
 80047ae:	f001 f9bd 	bl	8005b2c <SpiritRadioGetFrequencyBase>
 80047b2:	0003      	movs	r3, r0
 80047b4:	607b      	str	r3, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f001 ff38 	bl	800662c <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f7ff fe9c 	bl	80044fc <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 80047c4:	f001 f9b2 	bl	8005b2c <SpiritRadioGetFrequencyBase>
 80047c8:	0003      	movs	r3, r0
 80047ca:	607b      	str	r3, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 80047cc:	1c7b      	adds	r3, r7, #1
 80047ce:	2225      	movs	r2, #37	; 0x25
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	1c7b      	adds	r3, r7, #1
 80047d4:	001a      	movs	r2, r3
 80047d6:	2101      	movs	r1, #1
 80047d8:	20a1      	movs	r0, #161	; 0xa1
 80047da:	f002 ff0b 	bl	80075f4 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80047de:	2001      	movs	r0, #1
 80047e0:	f7ff fb44 	bl	8003e6c <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80047e4:	f002 f9f2 	bl	8006bcc <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80047e8:	4b51      	ldr	r3, [pc, #324]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	0e5b      	lsrs	r3, r3, #25
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d10f      	bne.n	8004816 <SpiritManagementWaVcoCalibration+0xa6>
  {
    cStandby = 1;
 80047f6:	230e      	movs	r3, #14
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeReady();
 80047fe:	2062      	movs	r0, #98	; 0x62
 8004800:	f7ff fc3e 	bl	8004080 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8004804:	f002 f9e2 	bl	8006bcc <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8004808:	4b49      	ldr	r3, [pc, #292]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	0e5b      	lsrs	r3, r3, #25
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b03      	cmp	r3, #3
 8004814:	d1f6      	bne.n	8004804 <SpiritManagementWaVcoCalibration+0x94>
  }
  
  SpiritCmdStrobeLockTx();
 8004816:	2066      	movs	r0, #102	; 0x66
 8004818:	f7ff fc32 	bl	8004080 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 800481c:	230d      	movs	r3, #13
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
  do{
    SpiritRefreshStatus();
 8004824:	f002 f9d2 	bl	8006bcc <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8004828:	4b41      	ldr	r3, [pc, #260]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	0e5b      	lsrs	r3, r3, #25
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b13      	cmp	r3, #19
 8004834:	d109      	bne.n	800484a <SpiritManagementWaVcoCalibration+0xda>
    {
      if(nLockwon++==5) return 1;
 8004836:	220d      	movs	r2, #13
 8004838:	18bb      	adds	r3, r7, r2
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	18ba      	adds	r2, r7, r2
 800483e:	1c59      	adds	r1, r3, #1
 8004840:	7011      	strb	r1, [r2, #0]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d101      	bne.n	800484a <SpiritManagementWaVcoCalibration+0xda>
 8004846:	2301      	movs	r3, #1
 8004848:	e06b      	b.n	8004922 <SpiritManagementWaVcoCalibration+0x1b2>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800484a:	4b39      	ldr	r3, [pc, #228]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	0e5b      	lsrs	r3, r3, #25
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b0f      	cmp	r3, #15
 8004856:	d1e5      	bne.n	8004824 <SpiritManagementWaVcoCalibration+0xb4>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8004858:	1cfc      	adds	r4, r7, #3
 800485a:	f7ff fb49 	bl	8003ef0 <SpiritCalibrationGetVcoCalData>
 800485e:	0003      	movs	r3, r0
 8004860:	7023      	strb	r3, [r4, #0]
  
  SpiritCmdStrobeReady();
 8004862:	2062      	movs	r0, #98	; 0x62
 8004864:	f7ff fc0c 	bl	8004080 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8004868:	f002 f9b0 	bl	8006bcc <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	061b      	lsls	r3, r3, #24
 8004872:	0e5b      	lsrs	r3, r3, #25
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b03      	cmp	r3, #3
 8004878:	d1f6      	bne.n	8004868 <SpiritManagementWaVcoCalibration+0xf8>
  
    
  SpiritCmdStrobeLockRx();
 800487a:	2065      	movs	r0, #101	; 0x65
 800487c:	f7ff fc00 	bl	8004080 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8004880:	230d      	movs	r3, #13
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
  do{
    SpiritRefreshStatus();
 8004888:	f002 f9a0 	bl	8006bcc <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800488c:	4b28      	ldr	r3, [pc, #160]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	0e5b      	lsrs	r3, r3, #25
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b13      	cmp	r3, #19
 8004898:	d109      	bne.n	80048ae <SpiritManagementWaVcoCalibration+0x13e>
    {
      if(nLockwon++==5) return 1;
 800489a:	220d      	movs	r2, #13
 800489c:	18bb      	adds	r3, r7, r2
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	18ba      	adds	r2, r7, r2
 80048a2:	1c59      	adds	r1, r3, #1
 80048a4:	7011      	strb	r1, [r2, #0]
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d101      	bne.n	80048ae <SpiritManagementWaVcoCalibration+0x13e>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e039      	b.n	8004922 <SpiritManagementWaVcoCalibration+0x1b2>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	0e5b      	lsrs	r3, r3, #25
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b0f      	cmp	r3, #15
 80048ba:	d1e5      	bne.n	8004888 <SpiritManagementWaVcoCalibration+0x118>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 80048bc:	1cbc      	adds	r4, r7, #2
 80048be:	f7ff fb17 	bl	8003ef0 <SpiritCalibrationGetVcoCalData>
 80048c2:	0003      	movs	r3, r0
 80048c4:	7023      	strb	r3, [r4, #0]
  
  SpiritCmdStrobeReady();
 80048c6:	2062      	movs	r0, #98	; 0x62
 80048c8:	f7ff fbda 	bl	8004080 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80048cc:	f002 f97e 	bl	8006bcc <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <SpiritManagementWaVcoCalibration+0x1c0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	0e5b      	lsrs	r3, r3, #25
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d1f6      	bne.n	80048cc <SpiritManagementWaVcoCalibration+0x15c>
  
  if(cStandby == 1)
 80048de:	230e      	movs	r3, #14
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d102      	bne.n	80048ee <SpiritManagementWaVcoCalibration+0x17e>
  {
    SpiritCmdStrobeStandby();    
 80048e8:	2063      	movs	r0, #99	; 0x63
 80048ea:	f7ff fbc9 	bl	8004080 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 80048ee:	2000      	movs	r0, #0
 80048f0:	f7ff fabc 	bl	8003e6c <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80048f4:	230f      	movs	r3, #15
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d006      	beq.n	800490c <SpiritManagementWaVcoCalibration+0x19c>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80048fe:	2000      	movs	r0, #0
 8004900:	f001 fe94 	bl	800662c <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0018      	movs	r0, r3
 8004908:	f7ff fdf8 	bl	80044fc <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800490c:	1cfb      	adds	r3, r7, #3
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	0018      	movs	r0, r3
 8004912:	f7ff fb0b 	bl	8003f2c <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8004916:	1cbb      	adds	r3, r7, #2
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	0018      	movs	r0, r3
 800491c:	f7ff fb40 	bl	8003fa0 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8004920:	2300      	movs	r3, #0
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b005      	add	sp, #20
 8004928:	bd90      	pop	{r4, r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	01c9c380 	.word	0x01c9c380
 8004930:	20000458 	.word	0x20000458

08004934 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <SpiritManagementWaCmdStrobeTx+0x64>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d025      	beq.n	8004990 <SpiritManagementWaCmdStrobeTx+0x5c>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8004944:	4b15      	ldr	r3, [pc, #84]	; (800499c <SpiritManagementWaCmdStrobeTx+0x68>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <SpiritManagementWaCmdStrobeTx+0x6c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d908      	bls.n	8004960 <SpiritManagementWaCmdStrobeTx+0x2c>
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <SpiritManagementWaCmdStrobeTx+0x68>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <SpiritManagementWaCmdStrobeTx+0x70>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d803      	bhi.n	8004960 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8004958:	20c0      	movs	r0, #192	; 0xc0
 800495a:	f001 fd53 	bl	8006404 <SpiritRadioSetPACwc>
 800495e:	e002      	b.n	8004966 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8004960:	2000      	movs	r0, #0
 8004962:	f001 fd4f 	bl	8006404 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8004966:	1dfb      	adds	r3, r7, #7
 8004968:	2211      	movs	r2, #17
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	1dfb      	adds	r3, r7, #7
 800496e:	001a      	movs	r2, r3
 8004970:	2101      	movs	r1, #1
 8004972:	20a9      	movs	r0, #169	; 0xa9
 8004974:	f002 fe3e 	bl	80075f4 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	2220      	movs	r2, #32
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	001a      	movs	r2, r3
 8004982:	2101      	movs	r1, #1
 8004984:	20a5      	movs	r0, #165	; 0xa5
 8004986:	f002 fe35 	bl	80075f4 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <SpiritManagementWaCmdStrobeTx+0x64>)
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
  }
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000180 	.word	0x20000180
 800499c:	20000314 	.word	0x20000314
 80049a0:	08f0d17f 	.word	0x08f0d17f
 80049a4:	1c03a180 	.word	0x1c03a180

080049a8 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <SpiritManagementWaCmdStrobeRx+0x38>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d00e      	beq.n	80049d6 <SpiritManagementWaCmdStrobeRx+0x2e>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 80049b8:	1dfb      	adds	r3, r7, #7
 80049ba:	2298      	movs	r2, #152	; 0x98
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	1dfb      	adds	r3, r7, #7
 80049c0:	001a      	movs	r2, r3
 80049c2:	2101      	movs	r1, #1
 80049c4:	20a5      	movs	r0, #165	; 0xa5
 80049c6:	f002 fe15 	bl	80075f4 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 80049ca:	2000      	movs	r0, #0
 80049cc:	f001 fd1a 	bl	8006404 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <SpiritManagementWaCmdStrobeRx+0x38>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
  }
}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b002      	add	sp, #8
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	20000180 	.word	0x20000180

080049e4 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <SpiritManagementWaTRxFcMem+0x1c>)
 80049ee:	2202      	movs	r2, #2
 80049f0:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 80049f2:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <SpiritManagementWaTRxFcMem+0x20>)
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b002      	add	sp, #8
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000180 	.word	0x20000180
 8004a04:	20000314 	.word	0x20000314

08004a08 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8004a10:	2408      	movs	r4, #8
 8004a12:	193b      	adds	r3, r7, r4
 8004a14:	001a      	movs	r2, r3
 8004a16:	2101      	movs	r1, #1
 8004a18:	2051      	movs	r0, #81	; 0x51
 8004a1a:	f002 fe8d 	bl	8007738 <RadioSpiReadRegisters>
 8004a1e:	1c03      	adds	r3, r0, #0
 8004a20:	1c1a      	adds	r2, r3, #0
 8004a22:	4b76      	ldr	r3, [pc, #472]	; (8004bfc <SpiritPktBasicInit+0x1f4>)
 8004a24:	b212      	sxth	r2, r2
 8004a26:	1c11      	adds	r1, r2, #0
 8004a28:	7019      	strb	r1, [r3, #0]
 8004a2a:	0412      	lsls	r2, r2, #16
 8004a2c:	0e12      	lsrs	r2, r2, #24
 8004a2e:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8004a30:	193b      	adds	r3, r7, r4
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2220      	movs	r2, #32
 8004a36:	4393      	bics	r3, r2
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	193b      	adds	r3, r7, r4
 8004a3c:	701a      	strb	r2, [r3, #0]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	193b      	adds	r3, r7, r4
 8004a4a:	701a      	strb	r2, [r3, #0]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8004a4c:	193b      	adds	r3, r7, r4
 8004a4e:	001a      	movs	r2, r3
 8004a50:	2101      	movs	r1, #1
 8004a52:	2051      	movs	r0, #81	; 0x51
 8004a54:	f002 fdce 	bl	80075f4 <RadioSpiWriteRegisters>
 8004a58:	1c03      	adds	r3, r0, #0
 8004a5a:	1c1a      	adds	r2, r3, #0
 8004a5c:	4b67      	ldr	r3, [pc, #412]	; (8004bfc <SpiritPktBasicInit+0x1f4>)
 8004a5e:	b212      	sxth	r2, r2
 8004a60:	1c11      	adds	r1, r2, #0
 8004a62:	7019      	strb	r1, [r3, #0]
 8004a64:	0412      	lsls	r2, r2, #16
 8004a66:	0e12      	lsrs	r2, r2, #24
 8004a68:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8004a6a:	193b      	adds	r3, r7, r4
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	2101      	movs	r1, #1
 8004a70:	204f      	movs	r0, #79	; 0x4f
 8004a72:	f002 fe61 	bl	8007738 <RadioSpiReadRegisters>
 8004a76:	1c03      	adds	r3, r0, #0
 8004a78:	1c1a      	adds	r2, r3, #0
 8004a7a:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <SpiritPktBasicInit+0x1f4>)
 8004a7c:	b212      	sxth	r2, r2
 8004a7e:	1c11      	adds	r1, r2, #0
 8004a80:	7019      	strb	r1, [r3, #0]
 8004a82:	0412      	lsls	r2, r2, #16
 8004a84:	0e12      	lsrs	r2, r2, #24
 8004a86:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8004a88:	193b      	adds	r3, r7, r4
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2230      	movs	r2, #48	; 0x30
 8004a8e:	4393      	bics	r3, r2
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	193b      	adds	r3, r7, r4
 8004a94:	701a      	strb	r2, [r3, #0]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8004a96:	193b      	adds	r3, r7, r4
 8004a98:	001a      	movs	r2, r3
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	204f      	movs	r0, #79	; 0x4f
 8004a9e:	f002 fda9 	bl	80075f4 <RadioSpiWriteRegisters>
 8004aa2:	1c03      	adds	r3, r0, #0
 8004aa4:	1c1a      	adds	r2, r3, #0
 8004aa6:	4b55      	ldr	r3, [pc, #340]	; (8004bfc <SpiritPktBasicInit+0x1f4>)
 8004aa8:	b212      	sxth	r2, r2
 8004aaa:	1c11      	adds	r1, r2, #0
 8004aac:	7019      	strb	r1, [r3, #0]
 8004aae:	0412      	lsls	r2, r2, #16
 8004ab0:	0e12      	lsrs	r2, r2, #24
 8004ab2:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	7b1b      	ldrb	r3, [r3, #12]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d104      	bne.n	8004ac6 <SpiritPktBasicInit+0xbe>
  {
    tempRegValue[0]=0x08;
 8004abc:	2308      	movs	r3, #8
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e003      	b.n	8004ace <SpiritPktBasicInit+0xc6>
  }
  else
  {
    tempRegValue[0]=0x00;
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 8004ace:	2108      	movs	r1, #8
 8004ad0:	187b      	adds	r3, r7, r1
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7adb      	ldrb	r3, [r3, #11]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	187b      	adds	r3, r7, r1
 8004ade:	701a      	strb	r2, [r3, #0]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	7a5b      	ldrb	r3, [r3, #9]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <SpiritPktBasicInit+0xe6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7a5b      	ldrb	r3, [r3, #9]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	2108      	movs	r1, #8
 8004af8:	187b      	adds	r3, r7, r1
 8004afa:	705a      	strb	r2, [r3, #1]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	709a      	strb	r2, [r3, #2]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7a9a      	ldrb	r2, [r3, #10]
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	70da      	strb	r2, [r3, #3]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7b9b      	ldrb	r3, [r3, #14]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <SpiritPktBasicInit+0x12c>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8004b24:	2108      	movs	r1, #8
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	187b      	adds	r3, r7, r1
 8004b32:	70da      	strb	r2, [r3, #3]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	7b5b      	ldrb	r3, [r3, #13]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <SpiritPktBasicInit+0x144>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8004b3c:	2108      	movs	r1, #8
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	78db      	ldrb	r3, [r3, #3]
 8004b42:	2201      	movs	r2, #1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	70da      	strb	r2, [r3, #3]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	001a      	movs	r2, r3
 8004b52:	2104      	movs	r1, #4
 8004b54:	2030      	movs	r0, #48	; 0x30
 8004b56:	f002 fd4d 	bl	80075f4 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8004b5a:	230f      	movs	r3, #15
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e026      	b.n	8004bb2 <SpiritPktBasicInit+0x1aa>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8004b64:	230f      	movs	r3, #15
 8004b66:	18fb      	adds	r3, r7, r3
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	0019      	movs	r1, r3
 8004b74:	2303      	movs	r3, #3
 8004b76:	1a5b      	subs	r3, r3, r1
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	da07      	bge.n	8004b8c <SpiritPktBasicInit+0x184>
    {
      tempRegValue[i]=0;
 8004b7c:	230f      	movs	r3, #15
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2208      	movs	r2, #8
 8004b84:	18ba      	adds	r2, r7, r2
 8004b86:	2100      	movs	r1, #0
 8004b88:	54d1      	strb	r1, [r2, r3]
 8004b8a:	e00c      	b.n	8004ba6 <SpiritPktBasicInit+0x19e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	210f      	movs	r1, #15
 8004b92:	187b      	adds	r3, r7, r1
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	40da      	lsrs	r2, r3
 8004b9a:	187b      	adds	r3, r7, r1
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b2d1      	uxtb	r1, r2
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	18ba      	adds	r2, r7, r2
 8004ba4:	54d1      	strb	r1, [r2, r3]
  for(i=0;i<4;i++)
 8004ba6:	210f      	movs	r1, #15
 8004ba8:	187b      	adds	r3, r7, r1
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	3201      	adds	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	230f      	movs	r3, #15
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d9d3      	bls.n	8004b64 <SpiritPktBasicInit+0x15c>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7a9b      	ldrb	r3, [r3, #10]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <SpiritPktBasicInit+0x1c4>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f000 f925 	bl	8004e14 <SpiritPktCommonFilterOnCrc>
 8004bca:	e002      	b.n	8004bd2 <SpiritPktBasicInit+0x1ca>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8004bcc:	2001      	movs	r0, #1
 8004bce:	f000 f921 	bl	8004e14 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	2104      	movs	r1, #4
 8004bda:	2036      	movs	r0, #54	; 0x36
 8004bdc:	f002 fd0a 	bl	80075f4 <RadioSpiWriteRegisters>
 8004be0:	1c03      	adds	r3, r0, #0
 8004be2:	1c1a      	adds	r2, r3, #0
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <SpiritPktBasicInit+0x1f4>)
 8004be6:	b212      	sxth	r2, r2
 8004be8:	1c11      	adds	r1, r2, #0
 8004bea:	7019      	strb	r1, [r3, #0]
 8004bec:	0412      	lsls	r2, r2, #16
 8004bee:	0e12      	lsrs	r2, r2, #24
 8004bf0:	705a      	strb	r2, [r3, #1]

}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b005      	add	sp, #20
 8004bf8:	bd90      	pop	{r4, r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	20000458 	.word	0x20000458

08004c00 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8004c08:	230c      	movs	r3, #12
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	001a      	movs	r2, r3
 8004c0e:	2101      	movs	r1, #1
 8004c10:	204f      	movs	r0, #79	; 0x4f
 8004c12:	f002 fd91 	bl	8007738 <RadioSpiReadRegisters>
 8004c16:	1c03      	adds	r3, r0, #0
 8004c18:	1c1a      	adds	r2, r3, #0
 8004c1a:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <SpiritPktBasicAddressesInit+0x104>)
 8004c1c:	b212      	sxth	r2, r2
 8004c1e:	1c11      	adds	r1, r2, #0
 8004c20:	7019      	strb	r1, [r3, #0]
 8004c22:	0412      	lsls	r2, r2, #16
 8004c24:	0e12      	lsrs	r2, r2, #24
 8004c26:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d108      	bne.n	8004c42 <SpiritPktBasicAddressesInit+0x42>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8004c30:	210c      	movs	r1, #12
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2208      	movs	r2, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	187b      	adds	r3, r7, r1
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e007      	b.n	8004c52 <SpiritPktBasicAddressesInit+0x52>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8004c42:	210c      	movs	r1, #12
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	4393      	bics	r3, r2
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	789b      	ldrb	r3, [r3, #2]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d108      	bne.n	8004c6c <SpiritPktBasicAddressesInit+0x6c>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8004c5a:	210c      	movs	r1, #12
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2204      	movs	r2, #4
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	187b      	adds	r3, r7, r1
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e007      	b.n	8004c7c <SpiritPktBasicAddressesInit+0x7c>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8004c6c:	210c      	movs	r1, #12
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2204      	movs	r2, #4
 8004c74:	4393      	bics	r3, r2
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	187b      	adds	r3, r7, r1
 8004c7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	791b      	ldrb	r3, [r3, #4]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d108      	bne.n	8004c96 <SpiritPktBasicAddressesInit+0x96>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8004c84:	210c      	movs	r1, #12
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e007      	b.n	8004ca6 <SpiritPktBasicAddressesInit+0xa6>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8004c96:	210c      	movs	r1, #12
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	4393      	bics	r3, r2
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8004ca6:	240c      	movs	r4, #12
 8004ca8:	193b      	adds	r3, r7, r4
 8004caa:	001a      	movs	r2, r3
 8004cac:	2101      	movs	r1, #1
 8004cae:	204f      	movs	r0, #79	; 0x4f
 8004cb0:	f002 fca0 	bl	80075f4 <RadioSpiWriteRegisters>
 8004cb4:	1c03      	adds	r3, r0, #0
 8004cb6:	1c1a      	adds	r2, r3, #0
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <SpiritPktBasicAddressesInit+0x104>)
 8004cba:	b212      	sxth	r2, r2
 8004cbc:	1c11      	adds	r1, r2, #0
 8004cbe:	7019      	strb	r1, [r3, #0]
 8004cc0:	0412      	lsls	r2, r2, #16
 8004cc2:	0e12      	lsrs	r2, r2, #24
 8004cc4:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	795a      	ldrb	r2, [r3, #5]
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	701a      	strb	r2, [r3, #0]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	78da      	ldrb	r2, [r3, #3]
 8004cd2:	193b      	adds	r3, r7, r4
 8004cd4:	705a      	strb	r2, [r3, #1]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	785a      	ldrb	r2, [r3, #1]
 8004cda:	193b      	adds	r3, r7, r4
 8004cdc:	709a      	strb	r2, [r3, #2]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8004cde:	193b      	adds	r3, r7, r4
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	2103      	movs	r1, #3
 8004ce4:	204c      	movs	r0, #76	; 0x4c
 8004ce6:	f002 fc85 	bl	80075f4 <RadioSpiWriteRegisters>
 8004cea:	1c03      	adds	r3, r0, #0
 8004cec:	1c1a      	adds	r2, r3, #0
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <SpiritPktBasicAddressesInit+0x104>)
 8004cf0:	b212      	sxth	r2, r2
 8004cf2:	1c11      	adds	r1, r2, #0
 8004cf4:	7019      	strb	r1, [r3, #0]
 8004cf6:	0412      	lsls	r2, r2, #16
 8004cf8:	0e12      	lsrs	r2, r2, #24
 8004cfa:	705a      	strb	r2, [r3, #1]
  
  
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b005      	add	sp, #20
 8004d02:	bd90      	pop	{r4, r7, pc}
 8004d04:	20000458 	.word	0x20000458

08004d08 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8004d0e:	1dfb      	adds	r3, r7, #7
 8004d10:	001a      	movs	r2, r3
 8004d12:	2101      	movs	r1, #1
 8004d14:	2030      	movs	r0, #48	; 0x30
 8004d16:	f002 fd0f 	bl	8007738 <RadioSpiReadRegisters>
 8004d1a:	1c03      	adds	r3, r0, #0
 8004d1c:	1c1a      	adds	r2, r3, #0
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <SpiritPktBasicGetAddressField+0x40>)
 8004d20:	b212      	sxth	r2, r2
 8004d22:	1c11      	adds	r1, r2, #0
 8004d24:	7019      	strb	r1, [r3, #0]
 8004d26:	0412      	lsls	r2, r2, #16
 8004d28:	0e12      	lsrs	r2, r2, #24
 8004d2a:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8004d2c:	1dfb      	adds	r3, r7, #7
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	001a      	movs	r2, r3
 8004d32:	2318      	movs	r3, #24
 8004d34:	4013      	ands	r3, r2
 8004d36:	d001      	beq.n	8004d3c <SpiritPktBasicGetAddressField+0x34>
  {
    return S_ENABLE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <SpiritPktBasicGetAddressField+0x36>
  }
  else
  {
    return S_DISABLE;
 8004d3c:	2300      	movs	r3, #0
  }

}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b002      	add	sp, #8
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	20000458 	.word	0x20000458

08004d4c <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	0002      	movs	r2, r0
 8004d54:	1dbb      	adds	r3, r7, #6
 8004d56:	801a      	strh	r2, [r3, #0]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8004d58:	230e      	movs	r3, #14
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	801a      	strh	r2, [r3, #0]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8004d60:	f7ff ffd2 	bl	8004d08 <SpiritPktBasicGetAddressField>
 8004d64:	1e03      	subs	r3, r0, #0
 8004d66:	d003      	beq.n	8004d70 <SpiritPktBasicSetPayloadLength+0x24>
  {
    overSize=1;
 8004d68:	230e      	movs	r3, #14
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	801a      	strh	r2, [r3, #0]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8004d70:	f000 f832 	bl	8004dd8 <SpiritPktCommonGetControlLength>
 8004d74:	0003      	movs	r3, r0
 8004d76:	b299      	uxth	r1, r3
 8004d78:	200e      	movs	r0, #14
 8004d7a:	183b      	adds	r3, r7, r0
 8004d7c:	183a      	adds	r2, r7, r0
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	188a      	adds	r2, r1, r2
 8004d82:	801a      	strh	r2, [r3, #0]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8004d84:	1dbb      	adds	r3, r7, #6
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	0001      	movs	r1, r0
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	18d3      	adds	r3, r2, r3
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	200c      	movs	r0, #12
 8004d98:	183b      	adds	r3, r7, r0
 8004d9a:	705a      	strb	r2, [r3, #1]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8004d9c:	1dbb      	adds	r3, r7, #6
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	18d3      	adds	r3, r2, r3
 8004da6:	121b      	asrs	r3, r3, #8
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	701a      	strb	r2, [r3, #0]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8004dae:	183b      	adds	r3, r7, r0
 8004db0:	001a      	movs	r2, r3
 8004db2:	2102      	movs	r1, #2
 8004db4:	2034      	movs	r0, #52	; 0x34
 8004db6:	f002 fc1d 	bl	80075f4 <RadioSpiWriteRegisters>
 8004dba:	1c03      	adds	r3, r0, #0
 8004dbc:	1c1a      	adds	r2, r3, #0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <SpiritPktBasicSetPayloadLength+0x88>)
 8004dc0:	b212      	sxth	r2, r2
 8004dc2:	1c11      	adds	r1, r2, #0
 8004dc4:	7019      	strb	r1, [r3, #0]
 8004dc6:	0412      	lsls	r2, r2, #16
 8004dc8:	0e12      	lsrs	r2, r2, #24
 8004dca:	705a      	strb	r2, [r3, #1]

}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b004      	add	sp, #16
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000458 	.word	0x20000458

08004dd8 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8004dde:	1dfb      	adds	r3, r7, #7
 8004de0:	001a      	movs	r2, r3
 8004de2:	2101      	movs	r1, #1
 8004de4:	2030      	movs	r0, #48	; 0x30
 8004de6:	f002 fca7 	bl	8007738 <RadioSpiReadRegisters>
 8004dea:	1c03      	adds	r3, r0, #0
 8004dec:	1c1a      	adds	r2, r3, #0
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <SpiritPktCommonGetControlLength+0x38>)
 8004df0:	b212      	sxth	r2, r2
 8004df2:	1c11      	adds	r1, r2, #0
 8004df4:	7019      	strb	r1, [r3, #0]
 8004df6:	0412      	lsls	r2, r2, #16
 8004df8:	0e12      	lsrs	r2, r2, #24
 8004dfa:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8004dfc:	1dfb      	adds	r3, r7, #7
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2207      	movs	r2, #7
 8004e02:	4013      	ands	r3, r2
 8004e04:	b2db      	uxtb	r3, r3

}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	20000458 	.word	0x20000458

08004e14 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	1dfb      	adds	r3, r7, #7
 8004e1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8004e20:	230f      	movs	r3, #15
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	001a      	movs	r2, r3
 8004e26:	2101      	movs	r1, #1
 8004e28:	204f      	movs	r0, #79	; 0x4f
 8004e2a:	f002 fc85 	bl	8007738 <RadioSpiReadRegisters>
 8004e2e:	1c03      	adds	r3, r0, #0
 8004e30:	1c1a      	adds	r2, r3, #0
 8004e32:	4b18      	ldr	r3, [pc, #96]	; (8004e94 <SpiritPktCommonFilterOnCrc+0x80>)
 8004e34:	b212      	sxth	r2, r2
 8004e36:	1c11      	adds	r1, r2, #0
 8004e38:	7019      	strb	r1, [r3, #0]
 8004e3a:	0412      	lsls	r2, r2, #16
 8004e3c:	0e12      	lsrs	r2, r2, #24
 8004e3e:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8004e40:	1dfb      	adds	r3, r7, #7
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d108      	bne.n	8004e5a <SpiritPktCommonFilterOnCrc+0x46>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8004e48:	210f      	movs	r1, #15
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4313      	orrs	r3, r2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e007      	b.n	8004e6a <SpiritPktCommonFilterOnCrc+0x56>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8004e5a:	210f      	movs	r1, #15
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2201      	movs	r2, #1
 8004e62:	4393      	bics	r3, r2
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	701a      	strb	r2, [r3, #0]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8004e6a:	230f      	movs	r3, #15
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	001a      	movs	r2, r3
 8004e70:	2101      	movs	r1, #1
 8004e72:	204f      	movs	r0, #79	; 0x4f
 8004e74:	f002 fbbe 	bl	80075f4 <RadioSpiWriteRegisters>
 8004e78:	1c03      	adds	r3, r0, #0
 8004e7a:	1c1a      	adds	r2, r3, #0
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <SpiritPktCommonFilterOnCrc+0x80>)
 8004e7e:	b212      	sxth	r2, r2
 8004e80:	1c11      	adds	r1, r2, #0
 8004e82:	7019      	strb	r1, [r3, #0]
 8004e84:	0412      	lsls	r2, r2, #16
 8004e86:	0e12      	lsrs	r2, r2, #24
 8004e88:	705a      	strb	r2, [r3, #1]

}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	20000458 	.word	0x20000458

08004e98 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	1dfb      	adds	r3, r7, #7
 8004ea2:	701a      	strb	r2, [r3, #0]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8004ea4:	1dfb      	adds	r3, r7, #7
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	204b      	movs	r0, #75	; 0x4b
 8004eac:	f002 fba2 	bl	80075f4 <RadioSpiWriteRegisters>
 8004eb0:	1c03      	adds	r3, r0, #0
 8004eb2:	1c1a      	adds	r2, r3, #0
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <SpiritPktCommonSetDestinationAddress+0x34>)
 8004eb6:	b212      	sxth	r2, r2
 8004eb8:	1c11      	adds	r1, r2, #0
 8004eba:	7019      	strb	r1, [r3, #0]
 8004ebc:	0412      	lsls	r2, r2, #16
 8004ebe:	0e12      	lsrs	r2, r2, #24
 8004ec0:	705a      	strb	r2, [r3, #1]

}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b002      	add	sp, #8
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20000458 	.word	0x20000458

08004ed0 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	001a      	movs	r2, r3
 8004eda:	2101      	movs	r1, #1
 8004edc:	20d3      	movs	r0, #211	; 0xd3
 8004ede:	f002 fc2b 	bl	8007738 <RadioSpiReadRegisters>
 8004ee2:	1c03      	adds	r3, r0, #0
 8004ee4:	1c1a      	adds	r2, r3, #0
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <SpiritPktCommonGetReceivedDestAddress+0x30>)
 8004ee8:	b212      	sxth	r2, r2
 8004eea:	1c11      	adds	r1, r2, #0
 8004eec:	7019      	strb	r1, [r3, #0]
 8004eee:	0412      	lsls	r2, r2, #16
 8004ef0:	0e12      	lsrs	r2, r2, #24
 8004ef2:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8004ef4:	1dfb      	adds	r3, r7, #7
 8004ef6:	781b      	ldrb	r3, [r3, #0]

}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000458 	.word	0x20000458

08004f04 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8004f10:	230f      	movs	r3, #15
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	001a      	movs	r2, r3
 8004f16:	2101      	movs	r1, #1
 8004f18:	203a      	movs	r0, #58	; 0x3a
 8004f1a:	f002 fc0d 	bl	8007738 <RadioSpiReadRegisters>
 8004f1e:	1c03      	adds	r3, r0, #0
 8004f20:	1c1a      	adds	r2, r3, #0
 8004f22:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <SpiritQiSqiCheck+0x80>)
 8004f24:	b212      	sxth	r2, r2
 8004f26:	1c11      	adds	r1, r2, #0
 8004f28:	7019      	strb	r1, [r3, #0]
 8004f2a:	0412      	lsls	r2, r2, #16
 8004f2c:	0e12      	lsrs	r2, r2, #24
 8004f2e:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8004f30:	1dfb      	adds	r3, r7, #7
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <SpiritQiSqiCheck+0x46>
  {
    tempRegValue |= QI_SQI_MASK;
 8004f38:	210f      	movs	r1, #15
 8004f3a:	187b      	adds	r3, r7, r1
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	4313      	orrs	r3, r2
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e007      	b.n	8004f5a <SpiritQiSqiCheck+0x56>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8004f4a:	210f      	movs	r1, #15
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2202      	movs	r2, #2
 8004f52:	4393      	bics	r3, r2
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	187b      	adds	r3, r7, r1
 8004f58:	701a      	strb	r2, [r3, #0]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	001a      	movs	r2, r3
 8004f60:	2101      	movs	r1, #1
 8004f62:	203a      	movs	r0, #58	; 0x3a
 8004f64:	f002 fb46 	bl	80075f4 <RadioSpiWriteRegisters>
 8004f68:	1c03      	adds	r3, r0, #0
 8004f6a:	1c1a      	adds	r2, r3, #0
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <SpiritQiSqiCheck+0x80>)
 8004f6e:	b212      	sxth	r2, r2
 8004f70:	1c11      	adds	r1, r2, #0
 8004f72:	7019      	strb	r1, [r3, #0]
 8004f74:	0412      	lsls	r2, r2, #16
 8004f76:	0e12      	lsrs	r2, r2, #24
 8004f78:	705a      	strb	r2, [r3, #1]

}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b004      	add	sp, #16
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	20000458 	.word	0x20000458

08004f88 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	0002      	movs	r2, r0
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8004f94:	240f      	movs	r4, #15
 8004f96:	193b      	adds	r3, r7, r4
 8004f98:	001a      	movs	r2, r3
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	203a      	movs	r0, #58	; 0x3a
 8004f9e:	f002 fbcb 	bl	8007738 <RadioSpiReadRegisters>
 8004fa2:	1c03      	adds	r3, r0, #0
 8004fa4:	1c1a      	adds	r2, r3, #0
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <SpiritQiSetSqiThreshold+0x70>)
 8004fa8:	b212      	sxth	r2, r2
 8004faa:	1c11      	adds	r1, r2, #0
 8004fac:	7019      	strb	r1, [r3, #0]
 8004fae:	0412      	lsls	r2, r2, #16
 8004fb0:	0e12      	lsrs	r2, r2, #24
 8004fb2:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8004fb4:	193b      	adds	r3, r7, r4
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	223f      	movs	r2, #63	; 0x3f
 8004fba:	4013      	ands	r3, r2
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	193b      	adds	r3, r7, r4
 8004fc0:	701a      	strb	r2, [r3, #0]
  tempRegValue |= ((uint8_t)xSqiThr);
 8004fc2:	193b      	adds	r3, r7, r4
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	1dfb      	adds	r3, r7, #7
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	701a      	strb	r2, [r3, #0]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	203a      	movs	r0, #58	; 0x3a
 8004fda:	f002 fb0b 	bl	80075f4 <RadioSpiWriteRegisters>
 8004fde:	1c03      	adds	r3, r0, #0
 8004fe0:	1c1a      	adds	r2, r3, #0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <SpiritQiSetSqiThreshold+0x70>)
 8004fe4:	b212      	sxth	r2, r2
 8004fe6:	1c11      	adds	r1, r2, #0
 8004fe8:	7019      	strb	r1, [r3, #0]
 8004fea:	0412      	lsls	r2, r2, #16
 8004fec:	0e12      	lsrs	r2, r2, #24
 8004fee:	705a      	strb	r2, [r3, #1]

}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b005      	add	sp, #20
 8004ff6:	bd90      	pop	{r4, r7, pc}
 8004ff8:	20000458 	.word	0x20000458

08004ffc <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3382      	adds	r3, #130	; 0x82
 8005008:	b2db      	uxtb	r3, r3
 800500a:	18db      	adds	r3, r3, r3
 800500c:	b2da      	uxtb	r2, r3
 800500e:	210f      	movs	r1, #15
 8005010:	187b      	adds	r3, r7, r1
 8005012:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8005014:	187b      	adds	r3, r7, r1
 8005016:	001a      	movs	r2, r3
 8005018:	2101      	movs	r1, #1
 800501a:	2022      	movs	r0, #34	; 0x22
 800501c:	f002 faea 	bl	80075f4 <RadioSpiWriteRegisters>
 8005020:	1c03      	adds	r3, r0, #0
 8005022:	1c1a      	adds	r2, r3, #0
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <SpiritQiSetRssiThresholddBm+0x40>)
 8005026:	b212      	sxth	r2, r2
 8005028:	1c11      	adds	r1, r2, #0
 800502a:	7019      	strb	r1, [r3, #0]
 800502c:	0412      	lsls	r2, r2, #16
 800502e:	0e12      	lsrs	r2, r2, #24
 8005030:	705a      	strb	r2, [r3, #1]

}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	20000458 	.word	0x20000458

08005040 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8005040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005042:	b08d      	sub	sp, #52	; 0x34
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8005048:	2111      	movs	r1, #17
 800504a:	187b      	adds	r3, r7, r1
 800504c:	22a0      	movs	r2, #160	; 0xa0
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	187b      	adds	r3, r7, r1
 8005052:	001a      	movs	r2, r3
 8005054:	2101      	movs	r1, #1
 8005056:	209f      	movs	r0, #159	; 0x9f
 8005058:	f002 facc 	bl	80075f4 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	5e9b      	ldrsh	r3, [r3, r2]
 8005062:	0018      	movs	r0, r3
 8005064:	f7fc f9de 	bl	8001424 <__aeabi_i2f>
 8005068:	1c04      	adds	r4, r0, #0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f7fc fa22 	bl	80014b8 <__aeabi_ui2f>
 8005074:	1c03      	adds	r3, r0, #0
 8005076:	1c19      	adds	r1, r3, #0
 8005078:	1c20      	adds	r0, r4, #0
 800507a:	f7fb febd 	bl	8000df8 <__aeabi_fmul>
 800507e:	1c03      	adds	r3, r0, #0
 8005080:	49cf      	ldr	r1, [pc, #828]	; (80053c0 <SpiritRadioInit+0x380>)
 8005082:	1c18      	adds	r0, r3, #0
 8005084:	f7fb fce0 	bl	8000a48 <__aeabi_fdiv>
 8005088:	1c03      	adds	r3, r0, #0
 800508a:	1c18      	adds	r0, r3, #0
 800508c:	f7fc f9aa 	bl	80013e4 <__aeabi_f2iz>
 8005090:	0003      	movs	r3, r0
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8005094:	2063      	movs	r0, #99	; 0x63
 8005096:	f002 fbfb 	bl	8007890 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 800509a:	230e      	movs	r3, #14
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e007      	b.n	80050b4 <SpiritRadioInit+0x74>
 80050a4:	210e      	movs	r1, #14
 80050a6:	187b      	adds	r3, r7, r1
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	3301      	adds	r3, #1
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	230e      	movs	r3, #14
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2bff      	cmp	r3, #255	; 0xff
 80050be:	d1f1      	bne.n	80050a4 <SpiritRadioInit+0x64>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80050c0:	f001 fd84 	bl	8006bcc <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 80050c4:	4bbf      	ldr	r3, [pc, #764]	; (80053c4 <SpiritRadioInit+0x384>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	061b      	lsls	r3, r3, #24
 80050ca:	0e5b      	lsrs	r3, r3, #25
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d1e3      	bne.n	800509a <SpiritRadioInit+0x5a>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80050d2:	4bbd      	ldr	r3, [pc, #756]	; (80053c8 <SpiritRadioInit+0x388>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4abd      	ldr	r2, [pc, #756]	; (80053cc <SpiritRadioInit+0x38c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d803      	bhi.n	80050e4 <SpiritRadioInit+0xa4>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 80050dc:	2000      	movs	r0, #0
 80050de:	f001 fb03 	bl	80066e8 <SpiritRadioSetDigDiv>
 80050e2:	e002      	b.n	80050ea <SpiritRadioInit+0xaa>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 80050e4:	2001      	movs	r0, #1
 80050e6:	f001 faff 	bl	80066e8 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 80050ea:	2062      	movs	r0, #98	; 0x62
 80050ec:	f002 fbd0 	bl	8007890 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80050f0:	230d      	movs	r3, #13
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e007      	b.n	800510a <SpiritRadioInit+0xca>
 80050fa:	210d      	movs	r1, #13
 80050fc:	187b      	adds	r3, r7, r1
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	3301      	adds	r3, #1
 8005104:	b2da      	uxtb	r2, r3
 8005106:	187b      	adds	r3, r7, r1
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	230d      	movs	r3, #13
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2bff      	cmp	r3, #255	; 0xff
 8005114:	d1f1      	bne.n	80050fa <SpiritRadioInit+0xba>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8005116:	f001 fd59 	bl	8006bcc <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 800511a:	4baa      	ldr	r3, [pc, #680]	; (80053c4 <SpiritRadioInit+0x384>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	061b      	lsls	r3, r3, #24
 8005120:	0e5b      	lsrs	r3, r3, #25
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b03      	cmp	r3, #3
 8005126:	d1e3      	bne.n	80050f0 <SpiritRadioInit+0xb0>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8005128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800512a:	f7fc f97b 	bl	8001424 <__aeabi_i2f>
 800512e:	1c03      	adds	r3, r0, #0
 8005130:	2191      	movs	r1, #145	; 0x91
 8005132:	05c9      	lsls	r1, r1, #23
 8005134:	1c18      	adds	r0, r3, #0
 8005136:	f7fb fe5f 	bl	8000df8 <__aeabi_fmul>
 800513a:	1c03      	adds	r3, r0, #0
 800513c:	1c1c      	adds	r4, r3, #0
 800513e:	4ba2      	ldr	r3, [pc, #648]	; (80053c8 <SpiritRadioInit+0x388>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	0018      	movs	r0, r3
 8005144:	f7fc f9b8 	bl	80014b8 <__aeabi_ui2f>
 8005148:	1c03      	adds	r3, r0, #0
 800514a:	1c19      	adds	r1, r3, #0
 800514c:	1c20      	adds	r0, r4, #0
 800514e:	f7fb fc7b 	bl	8000a48 <__aeabi_fdiv>
 8005152:	1c03      	adds	r3, r0, #0
 8005154:	212a      	movs	r1, #42	; 0x2a
 8005156:	000d      	movs	r5, r1
 8005158:	187c      	adds	r4, r7, r1
 800515a:	1c18      	adds	r0, r3, #0
 800515c:	f7fc f942 	bl	80013e4 <__aeabi_f2iz>
 8005160:	0003      	movs	r3, r0
 8005162:	8023      	strh	r3, [r4, #0]
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8005164:	0029      	movs	r1, r5
 8005166:	187b      	adds	r3, r7, r1
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	b29b      	uxth	r3, r3
 800516e:	b2db      	uxtb	r3, r3
 8005170:	220f      	movs	r2, #15
 8005172:	4013      	ands	r3, r2
 8005174:	b2da      	uxtb	r2, r3
 8005176:	241c      	movs	r4, #28
 8005178:	193b      	adds	r3, r7, r4
 800517a:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 800517c:	187b      	adds	r3, r7, r1
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	193b      	adds	r3, r7, r4
 8005184:	70da      	strb	r2, [r3, #3]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	025a      	lsls	r2, r3, #9
 800518c:	4b8e      	ldr	r3, [pc, #568]	; (80053c8 <SpiritRadioInit+0x388>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	099b      	lsrs	r3, r3, #6
 8005192:	0019      	movs	r1, r3
 8005194:	0010      	movs	r0, r2
 8005196:	f7fa ffb7 	bl	8000108 <__udivsi3>
 800519a:	0003      	movs	r3, r0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	3301      	adds	r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	701a      	strb	r2, [r3, #0]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7ff fc1a 	bl	80049e4 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 80051b0:	2410      	movs	r4, #16
 80051b2:	193b      	adds	r3, r7, r4
 80051b4:	001a      	movs	r2, r3
 80051b6:	2101      	movs	r1, #1
 80051b8:	20a3      	movs	r0, #163	; 0xa3
 80051ba:	f002 fabd 	bl	8007738 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 80051be:	193b      	adds	r3, r7, r4
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2202      	movs	r2, #2
 80051c4:	4393      	bics	r3, r2
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	193b      	adds	r3, r7, r4
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	193b      	adds	r3, r7, r4
 80051ce:	001a      	movs	r2, r3
 80051d0:	2101      	movs	r1, #1
 80051d2:	20a3      	movs	r0, #163	; 0xa3
 80051d4:	f002 fa0e 	bl	80075f4 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2616      	movs	r6, #22
 80051de:	19ba      	adds	r2, r7, r6
 80051e0:	2517      	movs	r5, #23
 80051e2:	1979      	adds	r1, r7, r5
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 fcef 	bl	8005bc8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 80051ea:	197b      	adds	r3, r7, r5
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	2518      	movs	r5, #24
 80051f0:	197b      	adds	r3, r7, r5
 80051f2:	701a      	strb	r2, [r3, #0]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	7b5a      	ldrb	r2, [r3, #13]
 80051f8:	19bb      	adds	r3, r7, r6
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	197b      	adds	r3, r7, r5
 8005202:	705a      	strb	r2, [r3, #1]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8005204:	193b      	adds	r3, r7, r4
 8005206:	001a      	movs	r2, r3
 8005208:	2101      	movs	r1, #1
 800520a:	201c      	movs	r0, #28
 800520c:	f002 fa94 	bl	8007738 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	2614      	movs	r6, #20
 8005216:	19ba      	adds	r2, r7, r6
 8005218:	2115      	movs	r1, #21
 800521a:	1879      	adds	r1, r7, r1
 800521c:	0018      	movs	r0, r3
 800521e:	f000 fedb 	bl	8005fd8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8005222:	19bb      	adds	r3, r7, r6
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	b25a      	sxtb	r2, r3
 800522a:	193b      	adds	r3, r7, r4
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	b25b      	sxtb	r3, r3
 8005230:	2108      	movs	r1, #8
 8005232:	400b      	ands	r3, r1
 8005234:	b25b      	sxtb	r3, r3
 8005236:	4313      	orrs	r3, r2
 8005238:	b25a      	sxtb	r2, r3
 800523a:	2115      	movs	r1, #21
 800523c:	187b      	adds	r3, r7, r1
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	b25b      	sxtb	r3, r3
 8005242:	4313      	orrs	r3, r2
 8005244:	b25b      	sxtb	r3, r3
 8005246:	b2da      	uxtb	r2, r3
 8005248:	197b      	adds	r3, r7, r5
 800524a:	709a      	strb	r2, [r3, #2]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2412      	movs	r4, #18
 8005252:	193a      	adds	r2, r7, r4
 8005254:	2613      	movs	r6, #19
 8005256:	19b9      	adds	r1, r7, r6
 8005258:	0018      	movs	r0, r3
 800525a:	f000 fdb1 	bl	8005dc0 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 800525e:	19bb      	adds	r3, r7, r6
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	b25a      	sxtb	r2, r3
 8005266:	193b      	adds	r3, r7, r4
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	b25b      	sxtb	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b25b      	sxtb	r3, r3
 8005270:	b2da      	uxtb	r2, r3
 8005272:	197b      	adds	r3, r7, r5
 8005274:	70da      	strb	r2, [r3, #3]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8005276:	4b54      	ldr	r3, [pc, #336]	; (80053c8 <SpiritRadioInit+0x388>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	0b1b      	lsrs	r3, r3, #12
 800527c:	0018      	movs	r0, r3
 800527e:	f7fc f91b 	bl	80014b8 <__aeabi_ui2f>
 8005282:	1c03      	adds	r3, r0, #0
 8005284:	1c19      	adds	r1, r3, #0
 8005286:	4852      	ldr	r0, [pc, #328]	; (80053d0 <SpiritRadioInit+0x390>)
 8005288:	f7fb fbde 	bl	8000a48 <__aeabi_fdiv>
 800528c:	1c03      	adds	r3, r0, #0
 800528e:	2185      	movs	r1, #133	; 0x85
 8005290:	05c9      	lsls	r1, r1, #23
 8005292:	1c18      	adds	r0, r3, #0
 8005294:	f7fb fee2 	bl	800105c <__aeabi_fsub>
 8005298:	1c03      	adds	r3, r0, #0
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800529c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800529e:	f7fb f941 	bl	8000524 <__aeabi_f2uiz>
 80052a2:	0003      	movs	r3, r0
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7fc f907 	bl	80014b8 <__aeabi_ui2f>
 80052aa:	1c03      	adds	r3, r0, #0
 80052ac:	1c19      	adds	r1, r3, #0
 80052ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052b0:	f7fb fed4 	bl	800105c <__aeabi_fsub>
 80052b4:	1c03      	adds	r3, r0, #0
 80052b6:	21fc      	movs	r1, #252	; 0xfc
 80052b8:	0589      	lsls	r1, r1, #22
 80052ba:	1c18      	adds	r0, r3, #0
 80052bc:	f7fb f8fe 	bl	80004bc <__aeabi_fcmpgt>
 80052c0:	1e03      	subs	r3, r0, #0
 80052c2:	d007      	beq.n	80052d4 <SpiritRadioInit+0x294>
 80052c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c6:	f7fb f92d 	bl	8000524 <__aeabi_f2uiz>
 80052ca:	0003      	movs	r3, r0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e004      	b.n	80052de <SpiritRadioInit+0x29e>
 80052d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d6:	f7fb f925 	bl	8000524 <__aeabi_f2uiz>
 80052da:	0003      	movs	r3, r0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	220f      	movs	r2, #15
 80052e0:	18ba      	adds	r2, r7, r2
 80052e2:	7013      	strb	r3, [r2, #0]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80052e4:	4b38      	ldr	r3, [pc, #224]	; (80053c8 <SpiritRadioInit+0x388>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a38      	ldr	r2, [pc, #224]	; (80053cc <SpiritRadioInit+0x38c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d806      	bhi.n	80052fc <SpiritRadioInit+0x2bc>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 80052ee:	230f      	movs	r3, #15
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	231c      	movs	r3, #28
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	705a      	strb	r2, [r3, #1]
 80052fa:	e036      	b.n	800536a <SpiritRadioInit+0x32a>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80052fc:	4b32      	ldr	r3, [pc, #200]	; (80053c8 <SpiritRadioInit+0x388>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	0b5b      	lsrs	r3, r3, #13
 8005302:	0018      	movs	r0, r3
 8005304:	f7fc f8d8 	bl	80014b8 <__aeabi_ui2f>
 8005308:	1c03      	adds	r3, r0, #0
 800530a:	1c19      	adds	r1, r3, #0
 800530c:	4830      	ldr	r0, [pc, #192]	; (80053d0 <SpiritRadioInit+0x390>)
 800530e:	f7fb fb9b 	bl	8000a48 <__aeabi_fdiv>
 8005312:	1c03      	adds	r3, r0, #0
 8005314:	2185      	movs	r1, #133	; 0x85
 8005316:	05c9      	lsls	r1, r1, #23
 8005318:	1c18      	adds	r0, r3, #0
 800531a:	f7fb fe9f 	bl	800105c <__aeabi_fsub>
 800531e:	1c03      	adds	r3, r0, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8005322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005324:	f7fb f8fe 	bl	8000524 <__aeabi_f2uiz>
 8005328:	0003      	movs	r3, r0
 800532a:	0018      	movs	r0, r3
 800532c:	f7fc f8c4 	bl	80014b8 <__aeabi_ui2f>
 8005330:	1c03      	adds	r3, r0, #0
 8005332:	1c19      	adds	r1, r3, #0
 8005334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005336:	f7fb fe91 	bl	800105c <__aeabi_fsub>
 800533a:	1c03      	adds	r3, r0, #0
 800533c:	21fc      	movs	r1, #252	; 0xfc
 800533e:	0589      	lsls	r1, r1, #22
 8005340:	1c18      	adds	r0, r3, #0
 8005342:	f7fb f8bb 	bl	80004bc <__aeabi_fcmpgt>
 8005346:	1e03      	subs	r3, r0, #0
 8005348:	d007      	beq.n	800535a <SpiritRadioInit+0x31a>
 800534a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800534c:	f7fb f8ea 	bl	8000524 <__aeabi_f2uiz>
 8005350:	0003      	movs	r3, r0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	3301      	adds	r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e004      	b.n	8005364 <SpiritRadioInit+0x324>
 800535a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800535c:	f7fb f8e2 	bl	8000524 <__aeabi_f2uiz>
 8005360:	0003      	movs	r3, r0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	221c      	movs	r2, #28
 8005366:	18ba      	adds	r2, r7, r2
 8005368:	7053      	strb	r3, [r2, #1]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 800536a:	230f      	movs	r3, #15
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	001a      	movs	r2, r3
 8005370:	2101      	movs	r1, #1
 8005372:	2007      	movs	r0, #7
 8005374:	f002 f93e 	bl	80075f4 <RadioSpiWriteRegisters>
 8005378:	1c03      	adds	r3, r0, #0
 800537a:	1c1a      	adds	r2, r3, #0
 800537c:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <SpiritRadioInit+0x384>)
 800537e:	b212      	sxth	r2, r2
 8005380:	1c11      	adds	r1, r2, #0
 8005382:	7019      	strb	r1, [r3, #0]
 8005384:	0412      	lsls	r2, r2, #16
 8005386:	0e12      	lsrs	r2, r2, #24
 8005388:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 800538a:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <SpiritRadioInit+0x388>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <SpiritRadioInit+0x394>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d923      	bls.n	80053dc <SpiritRadioInit+0x39c>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <SpiritRadioInit+0x388>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	0018      	movs	r0, r3
 800539c:	f7fd fe1c 	bl	8002fd8 <__aeabi_ui2d>
 80053a0:	2301      	movs	r3, #1
 80053a2:	1c1c      	adds	r4, r3, #0
 80053a4:	2200      	movs	r2, #0
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <SpiritRadioInit+0x398>)
 80053a8:	f7fb f858 	bl	800045c <__aeabi_dcmpge>
 80053ac:	1e03      	subs	r3, r0, #0
 80053ae:	d101      	bne.n	80053b4 <SpiritRadioInit+0x374>
 80053b0:	2300      	movs	r3, #0
 80053b2:	1c1c      	adds	r4, r3, #0
 80053b4:	b2e3      	uxtb	r3, r4
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 f872 	bl	80054a0 <SpiritRadioSetXtalFlag>
 80053bc:	e021      	b.n	8005402 <SpiritRadioInit+0x3c2>
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	49742400 	.word	0x49742400
 80053c4:	20000458 	.word	0x20000458
 80053c8:	20000318 	.word	0x20000318
 80053cc:	01c9c37f 	.word	0x01c9c37f
 80053d0:	49afd520 	.word	0x49afd520
 80053d4:	01c9c380 	.word	0x01c9c380
 80053d8:	4177d784 	.word	0x4177d784
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 80053dc:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <SpiritRadioInit+0x454>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fd fdf9 	bl	8002fd8 <__aeabi_ui2d>
 80053e6:	2301      	movs	r3, #1
 80053e8:	1c1c      	adds	r4, r3, #0
 80053ea:	2200      	movs	r2, #0
 80053ec:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <SpiritRadioInit+0x458>)
 80053ee:	f7fb f835 	bl	800045c <__aeabi_dcmpge>
 80053f2:	1e03      	subs	r3, r0, #0
 80053f4:	d101      	bne.n	80053fa <SpiritRadioInit+0x3ba>
 80053f6:	2300      	movs	r3, #0
 80053f8:	1c1c      	adds	r4, r3, #0
 80053fa:	b2e3      	uxtb	r3, r4
 80053fc:	0018      	movs	r0, r3
 80053fe:	f000 f84f 	bl	80054a0 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	330c      	adds	r3, #12
 8005406:	001a      	movs	r2, r3
 8005408:	2101      	movs	r1, #1
 800540a:	206c      	movs	r0, #108	; 0x6c
 800540c:	f002 f8f2 	bl	80075f4 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8005410:	241c      	movs	r4, #28
 8005412:	193b      	adds	r3, r7, r4
 8005414:	001a      	movs	r2, r3
 8005416:	2104      	movs	r1, #4
 8005418:	200c      	movs	r0, #12
 800541a:	f002 f8eb 	bl	80075f4 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 800541e:	2318      	movs	r3, #24
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	001a      	movs	r2, r3
 8005424:	2104      	movs	r1, #4
 8005426:	201a      	movs	r0, #26
 8005428:	f002 f8e4 	bl	80075f4 <RadioSpiWriteRegisters>
 800542c:	1c03      	adds	r3, r0, #0
 800542e:	1c1a      	adds	r2, r3, #0
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <SpiritRadioInit+0x45c>)
 8005432:	b212      	sxth	r2, r2
 8005434:	1c11      	adds	r1, r2, #0
 8005436:	7019      	strb	r1, [r3, #0]
 8005438:	0412      	lsls	r2, r2, #16
 800543a:	0e12      	lsrs	r2, r2, #24
 800543c:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 800543e:	2001      	movs	r0, #1
 8005440:	f001 f848 	bl	80064d4 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8005444:	193b      	adds	r3, r7, r4
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1]=0xE3;
 800544a:	193b      	adds	r3, r7, r4
 800544c:	22e3      	movs	r2, #227	; 0xe3
 800544e:	705a      	strb	r2, [r3, #1]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8005450:	193b      	adds	r3, r7, r4
 8005452:	001a      	movs	r2, r3
 8005454:	2102      	movs	r1, #2
 8005456:	2099      	movs	r0, #153	; 0x99
 8005458:	f002 f8cc 	bl	80075f4 <RadioSpiWriteRegisters>
 800545c:	1c03      	adds	r3, r0, #0
 800545e:	1c1a      	adds	r2, r3, #0
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <SpiritRadioInit+0x45c>)
 8005462:	b212      	sxth	r2, r2
 8005464:	1c11      	adds	r1, r2, #0
 8005466:	7019      	strb	r1, [r3, #0]
 8005468:	0412      	lsls	r2, r2, #16
 800546a:	0e12      	lsrs	r2, r2, #24
 800546c:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 800546e:	193b      	adds	r3, r7, r4
 8005470:	2222      	movs	r2, #34	; 0x22
 8005472:	701a      	strb	r2, [r3, #0]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8005474:	193b      	adds	r3, r7, r4
 8005476:	001a      	movs	r2, r3
 8005478:	2101      	movs	r1, #1
 800547a:	20bc      	movs	r0, #188	; 0xbc
 800547c:	f002 f8ba 	bl	80075f4 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	0018      	movs	r0, r3
 8005486:	f000 f9f7 	bl	8005878 <SpiritRadioSetFrequencyBase>
 800548a:	0003      	movs	r3, r0
  
}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b00d      	add	sp, #52	; 0x34
 8005492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005494:	20000318 	.word	0x20000318
 8005498:	4177d784 	.word	0x4177d784
 800549c:	20000458 	.word	0x20000458

080054a0 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	0002      	movs	r2, r0
 80054a8:	1dfb      	adds	r3, r7, #7
 80054aa:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue = 0x00;
 80054ac:	210f      	movs	r1, #15
 80054ae:	187b      	adds	r3, r7, r1
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	001a      	movs	r2, r3
 80054b8:	2101      	movs	r1, #1
 80054ba:	2001      	movs	r0, #1
 80054bc:	f002 f93c 	bl	8007738 <RadioSpiReadRegisters>
 80054c0:	1c03      	adds	r3, r0, #0
 80054c2:	1c1a      	adds	r2, r3, #0
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <SpiritRadioSetXtalFlag+0x84>)
 80054c6:	b212      	sxth	r2, r2
 80054c8:	1c11      	adds	r1, r2, #0
 80054ca:	7019      	strb	r1, [r3, #0]
 80054cc:	0412      	lsls	r2, r2, #16
 80054ce:	0e12      	lsrs	r2, r2, #24
 80054d0:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 80054d2:	1dfb      	adds	r3, r7, #7
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d108      	bne.n	80054ec <SpiritRadioSetXtalFlag+0x4c>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 80054da:	210f      	movs	r1, #15
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e007      	b.n	80054fc <SpiritRadioSetXtalFlag+0x5c>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 80054ec:	210f      	movs	r1, #15
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2240      	movs	r2, #64	; 0x40
 80054f4:	4393      	bics	r3, r2
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	187b      	adds	r3, r7, r1
 80054fa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80054fc:	230f      	movs	r3, #15
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	001a      	movs	r2, r3
 8005502:	2101      	movs	r1, #1
 8005504:	2001      	movs	r0, #1
 8005506:	f002 f875 	bl	80075f4 <RadioSpiWriteRegisters>
 800550a:	1c03      	adds	r3, r0, #0
 800550c:	1c1a      	adds	r2, r3, #0
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <SpiritRadioSetXtalFlag+0x84>)
 8005510:	b212      	sxth	r2, r2
 8005512:	1c11      	adds	r1, r2, #0
 8005514:	7019      	strb	r1, [r3, #0]
 8005516:	0412      	lsls	r2, r2, #16
 8005518:	0e12      	lsrs	r2, r2, #24
 800551a:	705a      	strb	r2, [r3, #1]
  
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	b004      	add	sp, #16
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000458 	.word	0x20000458

08005528 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8005530:	230f      	movs	r3, #15
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
  uint32_t vcofreq=0;
 8005538:	2300      	movs	r3, #0
 800553a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 800553c:	230e      	movs	r3, #14
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a4b      	ldr	r2, [pc, #300]	; (8005674 <SpiritRadioSearchWCP+0x14c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d908      	bls.n	800555e <SpiritRadioSearchWCP+0x36>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a4a      	ldr	r2, [pc, #296]	; (8005678 <SpiritRadioSearchWCP+0x150>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d804      	bhi.n	800555e <SpiritRadioSearchWCP+0x36>
  {
    BFactor = HIGH_BAND_FACTOR;
 8005554:	230e      	movs	r3, #14
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	2206      	movs	r2, #6
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	e025      	b.n	80055aa <SpiritRadioSearchWCP+0x82>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a46      	ldr	r2, [pc, #280]	; (800567c <SpiritRadioSearchWCP+0x154>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d908      	bls.n	8005578 <SpiritRadioSearchWCP+0x50>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a45      	ldr	r2, [pc, #276]	; (8005680 <SpiritRadioSearchWCP+0x158>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d804      	bhi.n	8005578 <SpiritRadioSearchWCP+0x50>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 800556e:	230e      	movs	r3, #14
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	220c      	movs	r2, #12
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e018      	b.n	80055aa <SpiritRadioSearchWCP+0x82>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a42      	ldr	r2, [pc, #264]	; (8005684 <SpiritRadioSearchWCP+0x15c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d908      	bls.n	8005592 <SpiritRadioSearchWCP+0x6a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a41      	ldr	r2, [pc, #260]	; (8005688 <SpiritRadioSearchWCP+0x160>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d804      	bhi.n	8005592 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = LOW_BAND_FACTOR;
 8005588:	230e      	movs	r3, #14
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	2210      	movs	r2, #16
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e00b      	b.n	80055aa <SpiritRadioSearchWCP+0x82>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a3d      	ldr	r2, [pc, #244]	; (800568c <SpiritRadioSearchWCP+0x164>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d907      	bls.n	80055aa <SpiritRadioSearchWCP+0x82>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <SpiritRadioSearchWCP+0x168>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d803      	bhi.n	80055aa <SpiritRadioSearchWCP+0x82>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80055a2:	230e      	movs	r3, #14
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	2220      	movs	r2, #32
 80055a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	23fa      	movs	r3, #250	; 0xfa
 80055ae:	0099      	lsls	r1, r3, #2
 80055b0:	0010      	movs	r0, r2
 80055b2:	f7fa fda9 	bl	8000108 <__udivsi3>
 80055b6:	0003      	movs	r3, r0
 80055b8:	001a      	movs	r2, r3
 80055ba:	230e      	movs	r3, #14
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	4353      	muls	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80055c4:	4b33      	ldr	r3, [pc, #204]	; (8005694 <SpiritRadioSearchWCP+0x16c>)
 80055c6:	001a      	movs	r2, r3
 80055c8:	0013      	movs	r3, r2
 80055ca:	015b      	lsls	r3, r3, #5
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	001a      	movs	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4293      	cmp	r3, r2
 80055da:	d304      	bcc.n	80055e6 <SpiritRadioSearchWCP+0xbe>
  {
    i=15;
 80055dc:	230f      	movs	r3, #15
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	220f      	movs	r2, #15
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e034      	b.n	8005650 <SpiritRadioSearchWCP+0x128>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80055e6:	230f      	movs	r3, #15
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e008      	b.n	8005602 <SpiritRadioSearchWCP+0xda>
 80055f0:	210f      	movs	r1, #15
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	3301      	adds	r3, #1
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	187b      	adds	r3, r7, r1
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	230f      	movs	r3, #15
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	b25b      	sxtb	r3, r3
 800560a:	2b0e      	cmp	r3, #14
 800560c:	dc11      	bgt.n	8005632 <SpiritRadioSearchWCP+0x10a>
 800560e:	230f      	movs	r3, #15
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	2200      	movs	r2, #0
 8005614:	569a      	ldrsb	r2, [r3, r2]
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <SpiritRadioSearchWCP+0x170>)
 8005618:	0052      	lsls	r2, r2, #1
 800561a:	5ad3      	ldrh	r3, [r2, r3]
 800561c:	001a      	movs	r2, r3
 800561e:	0013      	movs	r3, r2
 8005620:	015b      	lsls	r3, r3, #5
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	189b      	adds	r3, r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	001a      	movs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4293      	cmp	r3, r2
 8005630:	d8de      	bhi.n	80055f0 <SpiritRadioSearchWCP+0xc8>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8005632:	230f      	movs	r3, #15
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b25b      	sxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <SpiritRadioSearchWCP+0x128>
      i--;
 800563e:	210f      	movs	r1, #15
 8005640:	187b      	adds	r3, r7, r1
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b25b      	sxtb	r3, r3
 8005646:	b2db      	uxtb	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	187b      	adds	r3, r7, r1
 800564e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return index */
  return (i%8);
 8005650:	230f      	movs	r3, #15
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	b25b      	sxtb	r3, r3
 8005658:	4a10      	ldr	r2, [pc, #64]	; (800569c <SpiritRadioSearchWCP+0x174>)
 800565a:	4013      	ands	r3, r2
 800565c:	d504      	bpl.n	8005668 <SpiritRadioSearchWCP+0x140>
 800565e:	3b01      	subs	r3, #1
 8005660:	2208      	movs	r2, #8
 8005662:	4252      	negs	r2, r2
 8005664:	4313      	orrs	r3, r2
 8005666:	3301      	adds	r3, #1
 8005668:	b25b      	sxtb	r3, r3
 800566a:	b2db      	uxtb	r3, r3
  
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b004      	add	sp, #16
 8005672:	bd80      	pop	{r7, pc}
 8005674:	2e5f567f 	.word	0x2e5f567f
 8005678:	390c2fe0 	.word	0x390c2fe0
 800567c:	1701e47f 	.word	0x1701e47f
 8005680:	1c146a60 	.word	0x1c146a60
 8005684:	11d260bf 	.word	0x11d260bf
 8005688:	14ced7e0 	.word	0x14ced7e0
 800568c:	08e18f3f 	.word	0x08e18f3f
 8005690:	0a6fd060 	.word	0x0a6fd060
 8005694:	0000161f 	.word	0x0000161f
 8005698:	0800af34 	.word	0x0800af34
 800569c:	80000007 	.word	0x80000007

080056a0 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	001a      	movs	r2, r3
 80056aa:	2104      	movs	r1, #4
 80056ac:	2008      	movs	r0, #8
 80056ae:	f002 f843 	bl	8007738 <RadioSpiReadRegisters>
 80056b2:	1c03      	adds	r3, r0, #0
 80056b4:	1c1a      	adds	r2, r3, #0
 80056b6:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <SpiritRadioGetSynthWord+0x54>)
 80056b8:	b212      	sxth	r2, r2
 80056ba:	1c11      	adds	r1, r2, #0
 80056bc:	7019      	strb	r1, [r3, #0]
 80056be:	0412      	lsls	r2, r2, #16
 80056c0:	0e12      	lsrs	r2, r2, #24
 80056c2:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	055a      	lsls	r2, r3, #21
 80056ca:	23f8      	movs	r3, #248	; 0xf8
 80056cc:	049b      	lsls	r3, r3, #18
 80056ce:	401a      	ands	r2, r3
 80056d0:	1d3b      	adds	r3, r7, #4
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	035b      	lsls	r3, r3, #13
 80056d6:	18d2      	adds	r2, r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	789b      	ldrb	r3, [r3, #2]
 80056dc:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80056de:	18d3      	adds	r3, r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80056e0:	1d3a      	adds	r2, r7, #4
 80056e2:	78d2      	ldrb	r2, [r2, #3]
 80056e4:	08d2      	lsrs	r2, r2, #3
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	189b      	adds	r3, r3, r2
  
}
 80056ea:	0018      	movs	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b002      	add	sp, #8
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	20000458 	.word	0x20000458

080056f8 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80056fe:	1dfb      	adds	r3, r7, #7
 8005700:	001a      	movs	r2, r3
 8005702:	2101      	movs	r1, #1
 8005704:	200b      	movs	r0, #11
 8005706:	f002 f817 	bl	8007738 <RadioSpiReadRegisters>
 800570a:	1c03      	adds	r3, r0, #0
 800570c:	1c1a      	adds	r2, r3, #0
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <SpiritRadioGetBand+0x64>)
 8005710:	b212      	sxth	r2, r2
 8005712:	1c11      	adds	r1, r2, #0
 8005714:	7019      	strb	r1, [r3, #0]
 8005716:	0412      	lsls	r2, r2, #16
 8005718:	0e12      	lsrs	r2, r2, #24
 800571a:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 800571c:	1dfb      	adds	r3, r7, #7
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	001a      	movs	r2, r3
 8005722:	2307      	movs	r3, #7
 8005724:	4013      	ands	r3, r2
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <SpiritRadioGetBand+0x36>
  {
    return HIGH_BAND;
 800572a:	2300      	movs	r3, #0
 800572c:	e012      	b.n	8005754 <SpiritRadioGetBand+0x5c>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 800572e:	1dfb      	adds	r3, r7, #7
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	001a      	movs	r2, r3
 8005734:	2307      	movs	r3, #7
 8005736:	4013      	ands	r3, r2
 8005738:	2b03      	cmp	r3, #3
 800573a:	d101      	bne.n	8005740 <SpiritRadioGetBand+0x48>
  {
    return MIDDLE_BAND;
 800573c:	2301      	movs	r3, #1
 800573e:	e009      	b.n	8005754 <SpiritRadioGetBand+0x5c>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8005740:	1dfb      	adds	r3, r7, #7
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	001a      	movs	r2, r3
 8005746:	2307      	movs	r3, #7
 8005748:	4013      	ands	r3, r2
 800574a:	2b04      	cmp	r3, #4
 800574c:	d101      	bne.n	8005752 <SpiritRadioGetBand+0x5a>
  {
    return LOW_BAND;
 800574e:	2302      	movs	r3, #2
 8005750:	e000      	b.n	8005754 <SpiritRadioGetBand+0x5c>
  }
  else
  {
    return VERY_LOW_BAND;
 8005752:	2303      	movs	r3, #3
  }
  
}
 8005754:	0018      	movs	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000458 	.word	0x20000458

08005760 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8005766:	1dfb      	adds	r3, r7, #7
 8005768:	001a      	movs	r2, r3
 800576a:	2101      	movs	r1, #1
 800576c:	206c      	movs	r0, #108	; 0x6c
 800576e:	f001 ffe3 	bl	8007738 <RadioSpiReadRegisters>
 8005772:	1c03      	adds	r3, r0, #0
 8005774:	1c1a      	adds	r2, r3, #0
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <SpiritRadioGetChannel+0x30>)
 8005778:	b212      	sxth	r2, r2
 800577a:	1c11      	adds	r1, r2, #0
 800577c:	7019      	strb	r1, [r3, #0]
 800577e:	0412      	lsls	r2, r2, #16
 8005780:	0e12      	lsrs	r2, r2, #24
 8005782:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8005784:	1dfb      	adds	r3, r7, #7
 8005786:	781b      	ldrb	r3, [r3, #0]
  
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b002      	add	sp, #8
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20000458 	.word	0x20000458

08005794 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800579a:	1dfb      	adds	r3, r7, #7
 800579c:	001a      	movs	r2, r3
 800579e:	2101      	movs	r1, #1
 80057a0:	200c      	movs	r0, #12
 80057a2:	f001 ffc9 	bl	8007738 <RadioSpiReadRegisters>
 80057a6:	1c03      	adds	r3, r0, #0
 80057a8:	1c1a      	adds	r2, r3, #0
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <SpiritRadioGetChannelSpace+0x3c>)
 80057ac:	b212      	sxth	r2, r2
 80057ae:	1c11      	adds	r1, r2, #0
 80057b0:	7019      	strb	r1, [r3, #0]
 80057b2:	0412      	lsls	r2, r2, #16
 80057b4:	0e12      	lsrs	r2, r2, #24
 80057b6:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 80057b8:	1dfb      	adds	r3, r7, #7
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	001a      	movs	r2, r3
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <SpiritRadioGetChannelSpace+0x40>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4353      	muls	r3, r2
 80057c4:	0bdb      	lsrs	r3, r3, #15
  
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b002      	add	sp, #8
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000458 	.word	0x20000458
 80057d4:	20000318 	.word	0x20000318

080057d8 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	001a      	movs	r2, r3
 80057e2:	2102      	movs	r1, #2
 80057e4:	200e      	movs	r0, #14
 80057e6:	f001 ffa7 	bl	8007738 <RadioSpiReadRegisters>
 80057ea:	1c03      	adds	r3, r0, #0
 80057ec:	1c1a      	adds	r2, r3, #0
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <SpiritRadioGetFrequencyOffset+0x90>)
 80057f0:	b212      	sxth	r2, r2
 80057f2:	1c11      	adds	r1, r2, #0
 80057f4:	7019      	strb	r1, [r3, #0]
 80057f6:	0412      	lsls	r2, r2, #16
 80057f8:	0e12      	lsrs	r2, r2, #24
 80057fa:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	b29a      	uxth	r2, r3
 8005806:	1d3b      	adds	r3, r7, #4
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	b29b      	uxth	r3, r3
 800580c:	18d3      	adds	r3, r2, r3
 800580e:	b29a      	uxth	r2, r3
 8005810:	1cbb      	adds	r3, r7, #2
 8005812:	801a      	strh	r2, [r3, #0]
  
  if(xtalOffTemp & 0x0800)
 8005814:	1cbb      	adds	r3, r7, #2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	001a      	movs	r2, r3
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	4013      	ands	r3, r2
 8005820:	d007      	beq.n	8005832 <SpiritRadioGetFrequencyOffset+0x5a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8005822:	1cbb      	adds	r3, r7, #2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	4a11      	ldr	r2, [pc, #68]	; (800586c <SpiritRadioGetFrequencyOffset+0x94>)
 8005828:	4313      	orrs	r3, r2
 800582a:	b29a      	uxth	r2, r3
 800582c:	1cbb      	adds	r3, r7, #2
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	e006      	b.n	8005840 <SpiritRadioGetFrequencyOffset+0x68>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8005832:	1cbb      	adds	r3, r7, #2
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	051b      	lsls	r3, r3, #20
 8005838:	0d1b      	lsrs	r3, r3, #20
 800583a:	b29a      	uxth	r2, r3
 800583c:	1cbb      	adds	r3, r7, #2
 800583e:	801a      	strh	r2, [r3, #0]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8005840:	1cba      	adds	r2, r7, #2
 8005842:	1dbb      	adds	r3, r7, #6
 8005844:	8812      	ldrh	r2, [r2, #0]
 8005846:	801a      	strh	r2, [r3, #0]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8005848:	1dbb      	adds	r3, r7, #6
 800584a:	2200      	movs	r2, #0
 800584c:	5e9a      	ldrsh	r2, [r3, r2]
 800584e:	4b08      	ldr	r3, [pc, #32]	; (8005870 <SpiritRadioGetFrequencyOffset+0x98>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4353      	muls	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	da02      	bge.n	800585e <SpiritRadioGetFrequencyOffset+0x86>
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <SpiritRadioGetFrequencyOffset+0x9c>)
 800585a:	4694      	mov	ip, r2
 800585c:	4463      	add	r3, ip
 800585e:	149b      	asrs	r3, r3, #18
  
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000458 	.word	0x20000458
 800586c:	fffff000 	.word	0xfffff000
 8005870:	20000318 	.word	0x20000318
 8005874:	0003ffff 	.word	0x0003ffff

08005878 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8005878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587a:	b08d      	sub	sp, #52	; 0x34
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8005880:	2327      	movs	r3, #39	; 0x27
 8005882:	2208      	movs	r2, #8
 8005884:	4694      	mov	ip, r2
 8005886:	44bc      	add	ip, r7
 8005888:	4463      	add	r3, ip
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a95      	ldr	r2, [pc, #596]	; (8005ae8 <SpiritRadioSetFrequencyBase+0x270>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d90b      	bls.n	80058ae <SpiritRadioSetFrequencyBase+0x36>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a94      	ldr	r2, [pc, #592]	; (8005aec <SpiritRadioSetFrequencyBase+0x274>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d807      	bhi.n	80058ae <SpiritRadioSetFrequencyBase+0x36>
  {
    band = HIGH_BAND;
 800589e:	2327      	movs	r3, #39	; 0x27
 80058a0:	2208      	movs	r2, #8
 80058a2:	4694      	mov	ip, r2
 80058a4:	44bc      	add	ip, r7
 80058a6:	4463      	add	r3, ip
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e02e      	b.n	800590c <SpiritRadioSetFrequencyBase+0x94>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a8f      	ldr	r2, [pc, #572]	; (8005af0 <SpiritRadioSetFrequencyBase+0x278>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d90b      	bls.n	80058ce <SpiritRadioSetFrequencyBase+0x56>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a8e      	ldr	r2, [pc, #568]	; (8005af4 <SpiritRadioSetFrequencyBase+0x27c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d807      	bhi.n	80058ce <SpiritRadioSetFrequencyBase+0x56>
  {
    band = MIDDLE_BAND;
 80058be:	2327      	movs	r3, #39	; 0x27
 80058c0:	2208      	movs	r2, #8
 80058c2:	4694      	mov	ip, r2
 80058c4:	44bc      	add	ip, r7
 80058c6:	4463      	add	r3, ip
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e01e      	b.n	800590c <SpiritRadioSetFrequencyBase+0x94>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4a89      	ldr	r2, [pc, #548]	; (8005af8 <SpiritRadioSetFrequencyBase+0x280>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d90b      	bls.n	80058ee <SpiritRadioSetFrequencyBase+0x76>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a88      	ldr	r2, [pc, #544]	; (8005afc <SpiritRadioSetFrequencyBase+0x284>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d807      	bhi.n	80058ee <SpiritRadioSetFrequencyBase+0x76>
  {
    band = LOW_BAND;
 80058de:	2327      	movs	r3, #39	; 0x27
 80058e0:	2208      	movs	r2, #8
 80058e2:	4694      	mov	ip, r2
 80058e4:	44bc      	add	ip, r7
 80058e6:	4463      	add	r3, ip
 80058e8:	2202      	movs	r2, #2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e00e      	b.n	800590c <SpiritRadioSetFrequencyBase+0x94>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4a83      	ldr	r2, [pc, #524]	; (8005b00 <SpiritRadioSetFrequencyBase+0x288>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d90a      	bls.n	800590c <SpiritRadioSetFrequencyBase+0x94>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a82      	ldr	r2, [pc, #520]	; (8005b04 <SpiritRadioSetFrequencyBase+0x28c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d806      	bhi.n	800590c <SpiritRadioSetFrequencyBase+0x94>
  {
    band = VERY_LOW_BAND;
 80058fe:	2327      	movs	r3, #39	; 0x27
 8005900:	2208      	movs	r2, #8
 8005902:	4694      	mov	ip, r2
 8005904:	44bc      	add	ip, r7
 8005906:	4463      	add	r3, ip
 8005908:	2203      	movs	r2, #3
 800590a:	701a      	strb	r2, [r3, #0]
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800590c:	f7ff ff64 	bl	80057d8 <SpiritRadioGetFrequencyOffset>
 8005910:	0003      	movs	r3, r0
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8005914:	f7ff ff3e 	bl	8005794 <SpiritRadioGetChannelSpace>
 8005918:	0003      	movs	r3, r0
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800591c:	251b      	movs	r5, #27
 800591e:	2608      	movs	r6, #8
 8005920:	19bb      	adds	r3, r7, r6
 8005922:	195c      	adds	r4, r3, r5
 8005924:	f7ff ff1c 	bl	8005760 <SpiritRadioGetChannel>
 8005928:	0003      	movs	r3, r0
 800592a:	7023      	strb	r3, [r4, #0]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 800592c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	18d2      	adds	r2, r2, r3
 8005932:	19bb      	adds	r3, r7, r6
 8005934:	195b      	adds	r3, r3, r5
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800593a:	434b      	muls	r3, r1
 800593c:	18d3      	adds	r3, r2, r3
 800593e:	61fb      	str	r3, [r7, #28]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8005940:	f000 feae 	bl	80066a0 <SpiritRadioGetRefDiv>
 8005944:	0003      	movs	r3, r0
 8005946:	001a      	movs	r2, r3
 8005948:	2313      	movs	r3, #19
 800594a:	2108      	movs	r1, #8
 800594c:	468c      	mov	ip, r1
 800594e:	44bc      	add	ip, r7
 8005950:	4463      	add	r3, ip
 8005952:	3201      	adds	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
  
  /* Selects the VCO */
  switch(band)
 8005956:	2327      	movs	r3, #39	; 0x27
 8005958:	2208      	movs	r2, #8
 800595a:	4694      	mov	ip, r2
 800595c:	44bc      	add	ip, r7
 800595e:	4463      	add	r3, ip
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d01f      	beq.n	80059a6 <SpiritRadioSetFrequencyBase+0x12e>
 8005966:	dc02      	bgt.n	800596e <SpiritRadioSetFrequencyBase+0xf6>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d028      	beq.n	80059be <SpiritRadioSetFrequencyBase+0x146>
 800596c:	e032      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
 800596e:	2b02      	cmp	r3, #2
 8005970:	d00d      	beq.n	800598e <SpiritRadioSetFrequencyBase+0x116>
 8005972:	2b03      	cmp	r3, #3
 8005974:	d12e      	bne.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4a63      	ldr	r2, [pc, #396]	; (8005b08 <SpiritRadioSetFrequencyBase+0x290>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d803      	bhi.n	8005986 <SpiritRadioSetFrequencyBase+0x10e>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800597e:	2000      	movs	r0, #0
 8005980:	f7fe fb48 	bl	8004014 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8005984:	e026      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
      SpiritCalibrationSelectVco(VCO_H);
 8005986:	2001      	movs	r0, #1
 8005988:	f7fe fb44 	bl	8004014 <SpiritCalibrationSelectVco>
    break;
 800598c:	e022      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
    
  case LOW_BAND:
    if(Fc<322562500)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4a5e      	ldr	r2, [pc, #376]	; (8005b0c <SpiritRadioSetFrequencyBase+0x294>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d803      	bhi.n	800599e <SpiritRadioSetFrequencyBase+0x126>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8005996:	2000      	movs	r0, #0
 8005998:	f7fe fb3c 	bl	8004014 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800599c:	e01a      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
      SpiritCalibrationSelectVco(VCO_H);
 800599e:	2001      	movs	r0, #1
 80059a0:	f7fe fb38 	bl	8004014 <SpiritCalibrationSelectVco>
    break;
 80059a4:	e016      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4a59      	ldr	r2, [pc, #356]	; (8005b10 <SpiritRadioSetFrequencyBase+0x298>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d803      	bhi.n	80059b6 <SpiritRadioSetFrequencyBase+0x13e>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80059ae:	2000      	movs	r0, #0
 80059b0:	f7fe fb30 	bl	8004014 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80059b4:	e00e      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
      SpiritCalibrationSelectVco(VCO_H);
 80059b6:	2001      	movs	r0, #1
 80059b8:	f7fe fb2c 	bl	8004014 <SpiritCalibrationSelectVco>
    break;
 80059bc:	e00a      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4a54      	ldr	r2, [pc, #336]	; (8005b14 <SpiritRadioSetFrequencyBase+0x29c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d803      	bhi.n	80059ce <SpiritRadioSetFrequencyBase+0x156>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80059c6:	2000      	movs	r0, #0
 80059c8:	f7fe fb24 	bl	8004014 <SpiritCalibrationSelectVco>
 80059cc:	e002      	b.n	80059d4 <SpiritRadioSetFrequencyBase+0x15c>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80059ce:	2001      	movs	r0, #1
 80059d0:	f7fe fb20 	bl	8004014 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80059d4:	2612      	movs	r6, #18
 80059d6:	2408      	movs	r4, #8
 80059d8:	193a      	adds	r2, r7, r4
 80059da:	1994      	adds	r4, r2, r6
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	0018      	movs	r0, r3
 80059e0:	f7ff fda2 	bl	8005528 <SpiritRadioSearchWCP>
 80059e4:	0003      	movs	r3, r0
 80059e6:	7023      	strb	r3, [r4, #0]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 80059e8:	2327      	movs	r3, #39	; 0x27
 80059ea:	2208      	movs	r2, #8
 80059ec:	4694      	mov	ip, r2
 80059ee:	44bc      	add	ip, r7
 80059f0:	4463      	add	r3, ip
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4a48      	ldr	r2, [pc, #288]	; (8005b18 <SpiritRadioSetFrequencyBase+0x2a0>)
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	001a      	movs	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4353      	muls	r3, r2
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7fd faea 	bl	8002fd8 <__aeabi_ui2d>
 8005a04:	0004      	movs	r4, r0
 8005a06:	000d      	movs	r5, r1
 8005a08:	2213      	movs	r2, #19
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	18f9      	adds	r1, r7, r3
 8005a0e:	188b      	adds	r3, r1, r2
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	049b      	lsls	r3, r3, #18
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7fd faa5 	bl	8002f64 <__aeabi_i2d>
 8005a1a:	6038      	str	r0, [r7, #0]
 8005a1c:	6079      	str	r1, [r7, #4]
 8005a1e:	4b3f      	ldr	r3, [pc, #252]	; (8005b1c <SpiritRadioSetFrequencyBase+0x2a4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fd fad8 	bl	8002fd8 <__aeabi_ui2d>
 8005a28:	0002      	movs	r2, r0
 8005a2a:	000b      	movs	r3, r1
 8005a2c:	6838      	ldr	r0, [r7, #0]
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	f7fc f89e 	bl	8001b70 <__aeabi_ddiv>
 8005a34:	0002      	movs	r2, r0
 8005a36:	000b      	movs	r3, r1
 8005a38:	0020      	movs	r0, r4
 8005a3a:	0029      	movs	r1, r5
 8005a3c:	f7fc fca2 	bl	8002384 <__aeabi_dmul>
 8005a40:	0003      	movs	r3, r0
 8005a42:	000c      	movs	r4, r1
 8005a44:	0018      	movs	r0, r3
 8005a46:	0021      	movs	r1, r4
 8005a48:	f7fa fd84 	bl	8000554 <__aeabi_d2uiz>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	617b      	str	r3, [r7, #20]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	0d5b      	lsrs	r3, r3, #21
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	221f      	movs	r2, #31
 8005a58:	4013      	ands	r3, r2
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	2408      	movs	r4, #8
 8005a5e:	193b      	adds	r3, r7, r4
 8005a60:	199b      	adds	r3, r3, r6
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	015b      	lsls	r3, r3, #5
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	2008      	movs	r0, #8
 8005a6e:	193b      	adds	r3, r7, r4
 8005a70:	181b      	adds	r3, r3, r0
 8005a72:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	0b5b      	lsrs	r3, r3, #13
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	193b      	adds	r3, r7, r4
 8005a7c:	181b      	adds	r3, r3, r0
 8005a7e:	705a      	strb	r2, [r3, #1]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	193b      	adds	r3, r7, r4
 8005a88:	181b      	adds	r3, r3, r0
 8005a8a:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	2327      	movs	r3, #39	; 0x27
 8005a96:	2108      	movs	r1, #8
 8005a98:	468c      	mov	ip, r1
 8005a9a:	44bc      	add	ip, r7
 8005a9c:	4463      	add	r3, ip
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	491f      	ldr	r1, [pc, #124]	; (8005b20 <SpiritRadioSetFrequencyBase+0x2a8>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	193b      	adds	r3, r7, r4
 8005aaa:	181b      	adds	r3, r3, r0
 8005aac:	70da      	strb	r2, [r3, #3]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8005aae:	193b      	adds	r3, r7, r4
 8005ab0:	181b      	adds	r3, r3, r0
 8005ab2:	001a      	movs	r2, r3
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	2008      	movs	r0, #8
 8005ab8:	f001 fd9c 	bl	80075f4 <RadioSpiWriteRegisters>
 8005abc:	1c03      	adds	r3, r0, #0
 8005abe:	1c1a      	adds	r2, r3, #0
 8005ac0:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <SpiritRadioSetFrequencyBase+0x2ac>)
 8005ac2:	b212      	sxth	r2, r2
 8005ac4:	1c11      	adds	r1, r2, #0
 8005ac6:	7019      	strb	r1, [r3, #0]
 8005ac8:	0412      	lsls	r2, r2, #16
 8005aca:	0e12      	lsrs	r2, r2, #24
 8005acc:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8005ace:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <SpiritRadioSetFrequencyBase+0x2b0>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d103      	bne.n	8005ade <SpiritRadioSetFrequencyBase+0x266>
    return SpiritManagementWaVcoCalibration();
 8005ad6:	f7fe fe4b 	bl	8004770 <SpiritManagementWaVcoCalibration>
 8005ada:	0003      	movs	r3, r0
 8005adc:	e000      	b.n	8005ae0 <SpiritRadioSetFrequencyBase+0x268>
  
  return 0;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b00d      	add	sp, #52	; 0x34
 8005ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae8:	2e5f567f 	.word	0x2e5f567f
 8005aec:	390c2fe0 	.word	0x390c2fe0
 8005af0:	1701e47f 	.word	0x1701e47f
 8005af4:	1c146a60 	.word	0x1c146a60
 8005af8:	11d260bf 	.word	0x11d260bf
 8005afc:	14ced7e0 	.word	0x14ced7e0
 8005b00:	08e18f3f 	.word	0x08e18f3f
 8005b04:	0a6fd060 	.word	0x0a6fd060
 8005b08:	099cf4e1 	.word	0x099cf4e1
 8005b0c:	1339e9c3 	.word	0x1339e9c3
 8005b10:	19a28d05 	.word	0x19a28d05
 8005b14:	33451a0a 	.word	0x33451a0a
 8005b18:	0800ae78 	.word	0x0800ae78
 8005b1c:	20000318 	.word	0x20000318
 8005b20:	0800ae7c 	.word	0x0800ae7c
 8005b24:	20000458 	.word	0x20000458
 8005b28:	20000181 	.word	0x20000181

08005b2c <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8005b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8005b32:	f7ff fdb5 	bl	80056a0 <SpiritRadioGetSynthWord>
 8005b36:	0003      	movs	r3, r0
 8005b38:	60fb      	str	r3, [r7, #12]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8005b3a:	220b      	movs	r2, #11
 8005b3c:	18bc      	adds	r4, r7, r2
 8005b3e:	f7ff fddb 	bl	80056f8 <SpiritRadioGetBand>
 8005b42:	0003      	movs	r3, r0
 8005b44:	7023      	strb	r3, [r4, #0]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8005b46:	f000 fdab 	bl	80066a0 <SpiritRadioGetRefDiv>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	260a      	movs	r6, #10
 8005b50:	19bb      	adds	r3, r7, r6
 8005b52:	3201      	adds	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7fd fa3e 	bl	8002fd8 <__aeabi_ui2d>
 8005b5c:	0004      	movs	r4, r0
 8005b5e:	000d      	movs	r5, r1
 8005b60:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <SpiritRadioGetFrequencyBase+0x94>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f7fd fa37 	bl	8002fd8 <__aeabi_ui2d>
 8005b6a:	6038      	str	r0, [r7, #0]
 8005b6c:	6079      	str	r1, [r7, #4]
 8005b6e:	19bb      	adds	r3, r7, r6
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	049b      	lsls	r3, r3, #18
 8005b74:	220b      	movs	r2, #11
 8005b76:	18ba      	adds	r2, r7, r2
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	4912      	ldr	r1, [pc, #72]	; (8005bc4 <SpiritRadioGetFrequencyBase+0x98>)
 8005b7c:	5c8a      	ldrb	r2, [r1, r2]
 8005b7e:	4353      	muls	r3, r2
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fd f9ef 	bl	8002f64 <__aeabi_i2d>
 8005b86:	0002      	movs	r2, r0
 8005b88:	000b      	movs	r3, r1
 8005b8a:	6838      	ldr	r0, [r7, #0]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	f7fb ffef 	bl	8001b70 <__aeabi_ddiv>
 8005b92:	0002      	movs	r2, r0
 8005b94:	000b      	movs	r3, r1
 8005b96:	0020      	movs	r0, r4
 8005b98:	0029      	movs	r1, r5
 8005b9a:	f7fc fbf3 	bl	8002384 <__aeabi_dmul>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	000c      	movs	r4, r1
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	0021      	movs	r1, r4
 8005ba6:	f005 f851 	bl	800ac4c <round>
 8005baa:	0003      	movs	r3, r0
 8005bac:	000c      	movs	r4, r1
 8005bae:	0018      	movs	r0, r3
 8005bb0:	0021      	movs	r1, r4
 8005bb2:	f7fa fccf 	bl	8000554 <__aeabi_d2uiz>
 8005bb6:	0003      	movs	r3, r0
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b005      	add	sp, #20
 8005bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc0:	20000318 	.word	0x20000318
 8005bc4:	0800ae78 	.word	0x0800ae78

08005bc8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8005bd4:	2318      	movs	r3, #24
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
  int8_t i=15;
 8005bdc:	231f      	movs	r3, #31
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	220f      	movs	r2, #15
 8005be2:	701a      	strb	r2, [r3, #0]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8005be4:	211a      	movs	r1, #26
 8005be6:	187b      	adds	r3, r7, r1
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8005bec:	187c      	adds	r4, r7, r1
 8005bee:	f000 fdb3 	bl	8006758 <SpiritRadioGetDigDiv>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	7023      	strb	r3, [r4, #0]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8005bf6:	e023      	b.n	8005c40 <SpiritRadioSearchDatarateME+0x78>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8005bf8:	4b6f      	ldr	r3, [pc, #444]	; (8005db8 <SpiritRadioSearchDatarateME+0x1f0>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	231f      	movs	r3, #31
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b25b      	sxtb	r3, r3
 8005c04:	2114      	movs	r1, #20
 8005c06:	1ac9      	subs	r1, r1, r3
 8005c08:	231a      	movs	r3, #26
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	18cb      	adds	r3, r1, r3
 8005c10:	40da      	lsrs	r2, r3
 8005c12:	0013      	movs	r3, r2
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d309      	bcc.n	8005c2e <SpiritRadioSearchDatarateME+0x66>
    {
      find = S_TRUE;
 8005c1a:	2318      	movs	r3, #24
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	221f      	movs	r2, #31
 8005c24:	18bb      	adds	r3, r7, r2
 8005c26:	18ba      	adds	r2, r7, r2
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e008      	b.n	8005c40 <SpiritRadioSearchDatarateME+0x78>
    }
    else
    {
      i--;
 8005c2e:	211f      	movs	r1, #31
 8005c30:	187b      	adds	r3, r7, r1
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	187b      	adds	r3, r7, r1
 8005c3e:	701a      	strb	r2, [r3, #0]
  while(!find && i>=0)
 8005c40:	2318      	movs	r3, #24
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <SpiritRadioSearchDatarateME+0x8e>
 8005c4c:	231f      	movs	r3, #31
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b7f      	cmp	r3, #127	; 0x7f
 8005c54:	d9d0      	bls.n	8005bf8 <SpiritRadioSearchDatarateME+0x30>
    }
  }
  i<0 ? i=0 : i;
 8005c56:	231f      	movs	r3, #31
 8005c58:	18fb      	adds	r3, r7, r3
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5e:	d903      	bls.n	8005c68 <SpiritRadioSearchDatarateME+0xa0>
 8005c60:	231f      	movs	r3, #31
 8005c62:	18fb      	adds	r3, r7, r3
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
  *pcE = i;
 8005c68:	211f      	movs	r1, #31
 8005c6a:	187b      	adds	r3, r7, r1
 8005c6c:	781a      	ldrb	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8005c72:	187b      	adds	r3, r7, r1
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	2217      	movs	r2, #23
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	0010      	movs	r0, r2
 8005c82:	4b4d      	ldr	r3, [pc, #308]	; (8005db8 <SpiritRadioSearchDatarateME+0x1f0>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	231a      	movs	r3, #26
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3305      	adds	r3, #5
 8005c8e:	40da      	lsrs	r2, r3
 8005c90:	0013      	movs	r3, r2
 8005c92:	0019      	movs	r1, r3
 8005c94:	f7fa fa38 	bl	8000108 <__udivsi3>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	2319      	movs	r3, #25
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	701a      	strb	r2, [r3, #0]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8005ca2:	231e      	movs	r3, #30
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e040      	b.n	8005d2e <SpiritRadioSearchDatarateME+0x166>
  {
    if((cMantissaTmp+j-1))
 8005cac:	2319      	movs	r3, #25
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	231e      	movs	r3, #30
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	18d3      	adds	r3, r2, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d029      	beq.n	8005d12 <SpiritRadioSearchDatarateME+0x14a>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	2319      	movs	r3, #25
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	31ff      	adds	r1, #255	; 0xff
 8005ccc:	241e      	movs	r4, #30
 8005cce:	193b      	adds	r3, r7, r4
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	18cb      	adds	r3, r1, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <SpiritRadioSearchDatarateME+0x1f0>)
 8005cda:	6819      	ldr	r1, [r3, #0]
 8005cdc:	231a      	movs	r3, #26
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	3305      	adds	r3, #5
 8005ce4:	40d9      	lsrs	r1, r3
 8005ce6:	000b      	movs	r3, r1
 8005ce8:	4343      	muls	r3, r0
 8005cea:	0019      	movs	r1, r3
 8005cec:	231f      	movs	r3, #31
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	2017      	movs	r0, #23
 8005cf6:	1ac3      	subs	r3, r0, r3
 8005cf8:	40d9      	lsrs	r1, r3
 8005cfa:	000b      	movs	r3, r1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	b299      	uxth	r1, r3
 8005d02:	193b      	adds	r3, r7, r4
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	b209      	sxth	r1, r1
 8005d08:	2310      	movs	r3, #16
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	0052      	lsls	r2, r2, #1
 8005d0e:	52d1      	strh	r1, [r2, r3]
 8005d10:	e007      	b.n	8005d22 <SpiritRadioSearchDatarateME+0x15a>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8005d12:	231e      	movs	r3, #30
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	781a      	ldrb	r2, [r3, #0]
 8005d18:	2310      	movs	r3, #16
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	0052      	lsls	r2, r2, #1
 8005d1e:	4927      	ldr	r1, [pc, #156]	; (8005dbc <SpiritRadioSearchDatarateME+0x1f4>)
 8005d20:	52d1      	strh	r1, [r2, r3]
  for(uint8_t j=0;j<3;j++)
 8005d22:	211e      	movs	r1, #30
 8005d24:	187b      	adds	r3, r7, r1
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	3201      	adds	r2, #1
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	231e      	movs	r3, #30
 8005d30:	18fb      	adds	r3, r7, r3
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d9b9      	bls.n	8005cac <SpiritRadioSearchDatarateME+0xe4>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8005d38:	231c      	movs	r3, #28
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4252      	negs	r2, r2
 8005d40:	801a      	strh	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8005d42:	231b      	movs	r3, #27
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	e02c      	b.n	8005da6 <SpiritRadioSearchDatarateME+0x1de>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8005d4c:	231b      	movs	r3, #27
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	2310      	movs	r3, #16
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	0052      	lsls	r2, r2, #1
 8005d58:	5ed3      	ldrsh	r3, [r2, r3]
 8005d5a:	17d9      	asrs	r1, r3, #31
 8005d5c:	185a      	adds	r2, r3, r1
 8005d5e:	404a      	eors	r2, r1
 8005d60:	231c      	movs	r3, #28
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	da17      	bge.n	8005d9a <SpiritRadioSearchDatarateME+0x1d2>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8005d6a:	211b      	movs	r1, #27
 8005d6c:	187b      	adds	r3, r7, r1
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	2310      	movs	r3, #16
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	0052      	lsls	r2, r2, #1
 8005d76:	5ed3      	ldrsh	r3, [r2, r3]
 8005d78:	17d8      	asrs	r0, r3, #31
 8005d7a:	181a      	adds	r2, r3, r0
 8005d7c:	4042      	eors	r2, r0
 8005d7e:	231c      	movs	r3, #28
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	801a      	strh	r2, [r3, #0]
      *pcM = cMantissaTmp+j-1;
 8005d84:	2319      	movs	r3, #25
 8005d86:	18fa      	adds	r2, r7, r3
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	7812      	ldrb	r2, [r2, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	18d3      	adds	r3, r2, r3
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8005d9a:	211b      	movs	r1, #27
 8005d9c:	187b      	adds	r3, r7, r1
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	3201      	adds	r2, #1
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	231b      	movs	r3, #27
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d9cd      	bls.n	8005d4c <SpiritRadioSearchDatarateME+0x184>
    }
  }
  
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b009      	add	sp, #36	; 0x24
 8005db6:	bd90      	pop	{r4, r7, pc}
 8005db8:	20000318 	.word	0x20000318
 8005dbc:	00007fff 	.word	0x00007fff

08005dc0 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8005dc0:	b5b0      	push	{r4, r5, r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8005dcc:	2326      	movs	r3, #38	; 0x26
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8005dd4:	f000 fcc0 	bl	8006758 <SpiritRadioGetDigDiv>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d004      	beq.n	8005de6 <SpiritRadioSearchChannelBwME+0x26>
  {
    cDivider = 2;
 8005ddc:	2326      	movs	r3, #38	; 0x26
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	2202      	movs	r2, #2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e003      	b.n	8005dee <SpiritRadioSearchChannelBwME+0x2e>
  }
  else
  {
    cDivider = 1;
 8005de6:	2326      	movs	r3, #38	; 0x26
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	2201      	movs	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8005dee:	4b76      	ldr	r3, [pc, #472]	; (8005fc8 <SpiritRadioSearchChannelBwME+0x208>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	2326      	movs	r3, #38	; 0x26
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	0019      	movs	r1, r3
 8005dfa:	0010      	movs	r0, r2
 8005dfc:	f7fa f984 	bl	8000108 <__udivsi3>
 8005e00:	0003      	movs	r3, r0
 8005e02:	2164      	movs	r1, #100	; 0x64
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fa f97f 	bl	8000108 <__udivsi3>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8005e0e:	2327      	movs	r3, #39	; 0x27
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e008      	b.n	8005e2a <SpiritRadioSearchChannelBwME+0x6a>
 8005e18:	2127      	movs	r1, #39	; 0x27
 8005e1a:	187b      	adds	r3, r7, r1
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b25b      	sxtb	r3, r3
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	3301      	adds	r3, #1
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	2327      	movs	r3, #39	; 0x27
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	2b59      	cmp	r3, #89	; 0x59
 8005e34:	dc12      	bgt.n	8005e5c <SpiritRadioSearchChannelBwME+0x9c>
 8005e36:	2327      	movs	r3, #39	; 0x27
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	569a      	ldrsb	r2, [r3, r2]
 8005e3e:	4b63      	ldr	r3, [pc, #396]	; (8005fcc <SpiritRadioSearchChannelBwME+0x20c>)
 8005e40:	0052      	lsls	r2, r2, #1
 8005e42:	5ad3      	ldrh	r3, [r2, r3]
 8005e44:	001a      	movs	r2, r3
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4353      	muls	r3, r2
 8005e4a:	4961      	ldr	r1, [pc, #388]	; (8005fd0 <SpiritRadioSearchChannelBwME+0x210>)
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7fa f95b 	bl	8000108 <__udivsi3>
 8005e52:	0003      	movs	r3, r0
 8005e54:	001a      	movs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d3dd      	bcc.n	8005e18 <SpiritRadioSearchChannelBwME+0x58>
  
  if(i!=0)
 8005e5c:	2327      	movs	r3, #39	; 0x27
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d100      	bne.n	8005e6a <SpiritRadioSearchChannelBwME+0xaa>
 8005e68:	e091      	b.n	8005f8e <SpiritRadioSearchChannelBwME+0x1ce>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8005e6a:	231b      	movs	r3, #27
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	2227      	movs	r2, #39	; 0x27
 8005e70:	18ba      	adds	r2, r7, r2
 8005e72:	7812      	ldrb	r2, [r2, #0]
 8005e74:	701a      	strb	r2, [r3, #0]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8005e76:	2325      	movs	r3, #37	; 0x25
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	e044      	b.n	8005f0a <SpiritRadioSearchChannelBwME+0x14a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8005e80:	231b      	movs	r3, #27
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	2200      	movs	r2, #0
 8005e86:	569a      	ldrsb	r2, [r3, r2]
 8005e88:	2325      	movs	r3, #37	; 0x25
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	18d3      	adds	r3, r2, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da0a      	bge.n	8005eac <SpiritRadioSearchChannelBwME+0xec>
 8005e96:	231b      	movs	r3, #27
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	569a      	ldrsb	r2, [r3, r2]
 8005e9e:	2325      	movs	r3, #37	; 0x25
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	18d3      	adds	r3, r2, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2b59      	cmp	r3, #89	; 0x59
 8005eaa:	dc20      	bgt.n	8005eee <SpiritRadioSearchChannelBwME+0x12e>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	b29c      	uxth	r4, r3
 8005eb0:	231b      	movs	r3, #27
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	569a      	ldrsb	r2, [r3, r2]
 8005eb8:	2525      	movs	r5, #37	; 0x25
 8005eba:	197b      	adds	r3, r7, r5
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	18d3      	adds	r3, r2, r3
 8005ec0:	1e5a      	subs	r2, r3, #1
 8005ec2:	4b42      	ldr	r3, [pc, #264]	; (8005fcc <SpiritRadioSearchChannelBwME+0x20c>)
 8005ec4:	0052      	lsls	r2, r2, #1
 8005ec6:	5ad3      	ldrh	r3, [r2, r3]
 8005ec8:	001a      	movs	r2, r3
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4353      	muls	r3, r2
 8005ece:	4940      	ldr	r1, [pc, #256]	; (8005fd0 <SpiritRadioSearchChannelBwME+0x210>)
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7fa f919 	bl	8000108 <__udivsi3>
 8005ed6:	0003      	movs	r3, r0
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	1ae3      	subs	r3, r4, r3
 8005edc:	b299      	uxth	r1, r3
 8005ede:	197b      	adds	r3, r7, r5
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	b209      	sxth	r1, r1
 8005ee4:	2314      	movs	r3, #20
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	0052      	lsls	r2, r2, #1
 8005eea:	52d1      	strh	r1, [r2, r3]
 8005eec:	e007      	b.n	8005efe <SpiritRadioSearchChannelBwME+0x13e>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8005eee:	2325      	movs	r3, #37	; 0x25
 8005ef0:	18fb      	adds	r3, r7, r3
 8005ef2:	781a      	ldrb	r2, [r3, #0]
 8005ef4:	2314      	movs	r3, #20
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	0052      	lsls	r2, r2, #1
 8005efa:	4936      	ldr	r1, [pc, #216]	; (8005fd4 <SpiritRadioSearchChannelBwME+0x214>)
 8005efc:	52d1      	strh	r1, [r2, r3]
    for(uint8_t j=0;j<3;j++) 
 8005efe:	2125      	movs	r1, #37	; 0x25
 8005f00:	187b      	adds	r3, r7, r1
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	187b      	adds	r3, r7, r1
 8005f06:	3201      	adds	r2, #1
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	2325      	movs	r3, #37	; 0x25
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d9b5      	bls.n	8005e80 <SpiritRadioSearchChannelBwME+0xc0>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8005f14:	2322      	movs	r3, #34	; 0x22
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4252      	negs	r2, r2
 8005f1c:	801a      	strh	r2, [r3, #0]
    
    for(uint8_t j=0;j<3;j++)
 8005f1e:	2321      	movs	r3, #33	; 0x21
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	e02d      	b.n	8005f84 <SpiritRadioSearchChannelBwME+0x1c4>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8005f28:	2321      	movs	r3, #33	; 0x21
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	2314      	movs	r3, #20
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	0052      	lsls	r2, r2, #1
 8005f34:	5ed3      	ldrsh	r3, [r2, r3]
 8005f36:	17d9      	asrs	r1, r3, #31
 8005f38:	185a      	adds	r2, r3, r1
 8005f3a:	404a      	eors	r2, r1
 8005f3c:	2322      	movs	r3, #34	; 0x22
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	da18      	bge.n	8005f78 <SpiritRadioSearchChannelBwME+0x1b8>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8005f46:	2121      	movs	r1, #33	; 0x21
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	2314      	movs	r3, #20
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	0052      	lsls	r2, r2, #1
 8005f52:	5ed3      	ldrsh	r3, [r2, r3]
 8005f54:	17d8      	asrs	r0, r3, #31
 8005f56:	181a      	adds	r2, r3, r0
 8005f58:	4042      	eors	r2, r0
 8005f5a:	2322      	movs	r3, #34	; 0x22
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	801a      	strh	r2, [r3, #0]
        i=i_tmp+j-1;
 8005f60:	231b      	movs	r3, #27
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	18d3      	adds	r3, r2, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	2327      	movs	r3, #39	; 0x27
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	701a      	strb	r2, [r3, #0]
    for(uint8_t j=0;j<3;j++)
 8005f78:	2121      	movs	r1, #33	; 0x21
 8005f7a:	187b      	adds	r3, r7, r1
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	187b      	adds	r3, r7, r1
 8005f80:	3201      	adds	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	2321      	movs	r3, #33	; 0x21
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d9cc      	bls.n	8005f28 <SpiritRadioSearchChannelBwME+0x168>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8005f8e:	2427      	movs	r4, #39	; 0x27
 8005f90:	193b      	adds	r3, r7, r4
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b25b      	sxtb	r3, r3
 8005f96:	2109      	movs	r1, #9
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f7fa f93f 	bl	800021c <__divsi3>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	b25b      	sxtb	r3, r3
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8005fa8:	193b      	adds	r3, r7, r4
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	2109      	movs	r1, #9
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f7fa fa19 	bl	80003e8 <__aeabi_idivmod>
 8005fb6:	000b      	movs	r3, r1
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	701a      	strb	r2, [r3, #0]
  
}
 8005fc0:	46c0      	nop			; (mov r8, r8)
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b00a      	add	sp, #40	; 0x28
 8005fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc8:	20000318 	.word	0x20000318
 8005fcc:	0800ae80 	.word	0x0800ae80
 8005fd0:	00000a28 	.word	0x00000a28
 8005fd4:	00007fff 	.word	0x00007fff

08005fd8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8005fd8:	b5b0      	push	{r4, r5, r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8005fe8:	4b58      	ldr	r3, [pc, #352]	; (800614c <SpiritRadioSearchFreqDevME+0x174>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7fb fa63 	bl	80014b8 <__aeabi_ui2f>
 8005ff2:	1c03      	adds	r3, r0, #0
 8005ff4:	2191      	movs	r1, #145	; 0x91
 8005ff6:	05c9      	lsls	r1, r1, #23
 8005ff8:	1c18      	adds	r0, r3, #0
 8005ffa:	f7fa fd25 	bl	8000a48 <__aeabi_fdiv>
 8005ffe:	1c03      	adds	r3, r0, #0
 8006000:	61bb      	str	r3, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8006002:	2327      	movs	r3, #39	; 0x27
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e02b      	b.n	8006064 <SpiritRadioSearchFreqDevME+0x8c>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 800600c:	2327      	movs	r3, #39	; 0x27
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2201      	movs	r2, #1
 8006014:	409a      	lsls	r2, r3
 8006016:	0013      	movs	r3, r2
 8006018:	0018      	movs	r0, r3
 800601a:	f7fc ffa3 	bl	8002f64 <__aeabi_i2d>
 800601e:	2200      	movs	r2, #0
 8006020:	4b4b      	ldr	r3, [pc, #300]	; (8006150 <SpiritRadioSearchFreqDevME+0x178>)
 8006022:	f7fc f9af 	bl	8002384 <__aeabi_dmul>
 8006026:	0003      	movs	r3, r0
 8006028:	000c      	movs	r4, r1
 800602a:	0018      	movs	r0, r3
 800602c:	0021      	movs	r1, r4
 800602e:	f7fa fa91 	bl	8000554 <__aeabi_d2uiz>
 8006032:	0003      	movs	r3, r0
 8006034:	0018      	movs	r0, r3
 8006036:	f7fb fa3f 	bl	80014b8 <__aeabi_ui2f>
 800603a:	1c03      	adds	r3, r0, #0
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	1c18      	adds	r0, r3, #0
 8006040:	f7fa feda 	bl	8000df8 <__aeabi_fmul>
 8006044:	1c03      	adds	r3, r0, #0
 8006046:	1c18      	adds	r0, r3, #0
 8006048:	f7fa fa6c 	bl	8000524 <__aeabi_f2uiz>
 800604c:	0003      	movs	r3, r0
 800604e:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	429a      	cmp	r2, r3
 8006056:	d30b      	bcc.n	8006070 <SpiritRadioSearchFreqDevME+0x98>
  for(i=0;i<10;i++)
 8006058:	2127      	movs	r1, #39	; 0x27
 800605a:	187b      	adds	r3, r7, r1
 800605c:	781a      	ldrb	r2, [r3, #0]
 800605e:	187b      	adds	r3, r7, r1
 8006060:	3201      	adds	r2, #1
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	2327      	movs	r3, #39	; 0x27
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b09      	cmp	r3, #9
 800606c:	d9ce      	bls.n	800600c <SpiritRadioSearchFreqDevME+0x34>
 800606e:	e000      	b.n	8006072 <SpiritRadioSearchFreqDevME+0x9a>
      break;
 8006070:	46c0      	nop			; (mov r8, r8)
  }
  (*pcE) = i;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2127      	movs	r1, #39	; 0x27
 8006076:	187a      	adds	r2, r7, r1
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800607c:	187b      	adds	r3, r7, r1
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	e045      	b.n	8006110 <SpiritRadioSearchFreqDevME+0x138>
  {
    bp=b;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8006088:	2327      	movs	r3, #39	; 0x27
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	0018      	movs	r0, r3
 8006090:	f7fc ff68 	bl	8002f64 <__aeabi_i2d>
 8006094:	2200      	movs	r2, #0
 8006096:	4b2f      	ldr	r3, [pc, #188]	; (8006154 <SpiritRadioSearchFreqDevME+0x17c>)
 8006098:	f7fb fa4e 	bl	8001538 <__aeabi_dadd>
 800609c:	0003      	movs	r3, r0
 800609e:	000c      	movs	r4, r1
 80060a0:	0018      	movs	r0, r3
 80060a2:	0021      	movs	r1, r4
 80060a4:	2200      	movs	r2, #0
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	05db      	lsls	r3, r3, #23
 80060aa:	f7fb fd61 	bl	8001b70 <__aeabi_ddiv>
 80060ae:	0003      	movs	r3, r0
 80060b0:	000c      	movs	r4, r1
 80060b2:	0025      	movs	r5, r4
 80060b4:	001c      	movs	r4, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	001a      	movs	r2, r3
 80060bc:	2301      	movs	r3, #1
 80060be:	4093      	lsls	r3, r2
 80060c0:	0018      	movs	r0, r3
 80060c2:	f7fc ff4f 	bl	8002f64 <__aeabi_i2d>
 80060c6:	0002      	movs	r2, r0
 80060c8:	000b      	movs	r3, r1
 80060ca:	0020      	movs	r0, r4
 80060cc:	0029      	movs	r1, r5
 80060ce:	f7fc f959 	bl	8002384 <__aeabi_dmul>
 80060d2:	0003      	movs	r3, r0
 80060d4:	000c      	movs	r4, r1
 80060d6:	0018      	movs	r0, r3
 80060d8:	0021      	movs	r1, r4
 80060da:	f7fa fa3b 	bl	8000554 <__aeabi_d2uiz>
 80060de:	0003      	movs	r3, r0
 80060e0:	0018      	movs	r0, r3
 80060e2:	f7fb f9e9 	bl	80014b8 <__aeabi_ui2f>
 80060e6:	1c03      	adds	r3, r0, #0
 80060e8:	69b9      	ldr	r1, [r7, #24]
 80060ea:	1c18      	adds	r0, r3, #0
 80060ec:	f7fa fe84 	bl	8000df8 <__aeabi_fmul>
 80060f0:	1c03      	adds	r3, r0, #0
 80060f2:	1c18      	adds	r0, r3, #0
 80060f4:	f7fa fa16 	bl	8000524 <__aeabi_f2uiz>
 80060f8:	0003      	movs	r3, r0
 80060fa:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	429a      	cmp	r2, r3
 8006102:	d30b      	bcc.n	800611c <SpiritRadioSearchFreqDevME+0x144>
  for(i=0;i<8;i++)
 8006104:	2127      	movs	r1, #39	; 0x27
 8006106:	187b      	adds	r3, r7, r1
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	187b      	adds	r3, r7, r1
 800610c:	3201      	adds	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	2327      	movs	r3, #39	; 0x27
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b07      	cmp	r3, #7
 8006118:	d9b4      	bls.n	8006084 <SpiritRadioSearchFreqDevME+0xac>
 800611a:	e000      	b.n	800611e <SpiritRadioSearchFreqDevME+0x146>
      break;
 800611c:	46c0      	nop			; (mov r8, r8)
  }
  
  (*pcM)=i;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2227      	movs	r2, #39	; 0x27
 8006122:	18ba      	adds	r2, r7, r2
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	1ad2      	subs	r2, r2, r3
 800612e:	69f9      	ldr	r1, [r7, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1acb      	subs	r3, r1, r3
 8006134:	429a      	cmp	r2, r3
 8006136:	d205      	bcs.n	8006144 <SpiritRadioSearchFreqDevME+0x16c>
    (*pcM)--;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	701a      	strb	r2, [r3, #0]
  
}
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b00a      	add	sp, #40	; 0x28
 800614a:	bdb0      	pop	{r4, r5, r7, pc}
 800614c:	20000318 	.word	0x20000318
 8006150:	401e0000 	.word	0x401e0000
 8006154:	40200000 	.word	0x40200000

08006158 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8006158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint8_t i;
  uint8_t j=0;
 8006162:	230e      	movs	r3, #14
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a7f      	ldr	r2, [pc, #508]	; (800636c <SpiritRadioGetdBm2Reg+0x214>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d910      	bls.n	8006194 <SpiritRadioGetdBm2Reg+0x3c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a7e      	ldr	r2, [pc, #504]	; (8006370 <SpiritRadioGetdBm2Reg+0x218>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d80c      	bhi.n	8006194 <SpiritRadioGetdBm2Reg+0x3c>
  {
    i=0;
 800617a:	230f      	movs	r3, #15
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
    if(lFBase<900000000) i=1;// 868   
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a7b      	ldr	r2, [pc, #492]	; (8006374 <SpiritRadioGetdBm2Reg+0x21c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d82a      	bhi.n	80061e0 <SpiritRadioGetdBm2Reg+0x88>
 800618a:	230f      	movs	r3, #15
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e025      	b.n	80061e0 <SpiritRadioGetdBm2Reg+0x88>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a78      	ldr	r2, [pc, #480]	; (8006378 <SpiritRadioGetdBm2Reg+0x220>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d908      	bls.n	80061ae <SpiritRadioGetdBm2Reg+0x56>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a77      	ldr	r2, [pc, #476]	; (800637c <SpiritRadioGetdBm2Reg+0x224>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d804      	bhi.n	80061ae <SpiritRadioGetdBm2Reg+0x56>
  {
    i=2;
 80061a4:	230f      	movs	r3, #15
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	2202      	movs	r2, #2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	e018      	b.n	80061e0 <SpiritRadioGetdBm2Reg+0x88>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a73      	ldr	r2, [pc, #460]	; (8006380 <SpiritRadioGetdBm2Reg+0x228>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d908      	bls.n	80061c8 <SpiritRadioGetdBm2Reg+0x70>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a72      	ldr	r2, [pc, #456]	; (8006384 <SpiritRadioGetdBm2Reg+0x22c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d804      	bhi.n	80061c8 <SpiritRadioGetdBm2Reg+0x70>
  {
    i=3;
 80061be:	230f      	movs	r3, #15
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	2203      	movs	r2, #3
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	e00b      	b.n	80061e0 <SpiritRadioGetdBm2Reg+0x88>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a6f      	ldr	r2, [pc, #444]	; (8006388 <SpiritRadioGetdBm2Reg+0x230>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d907      	bls.n	80061e0 <SpiritRadioGetdBm2Reg+0x88>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a6e      	ldr	r2, [pc, #440]	; (800638c <SpiritRadioGetdBm2Reg+0x234>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d803      	bhi.n	80061e0 <SpiritRadioGetdBm2Reg+0x88>
  {
    i=4;
 80061d8:	230f      	movs	r3, #15
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	2204      	movs	r2, #4
 80061de:	701a      	strb	r2, [r3, #0]
  }
  
  j=1;
 80061e0:	230e      	movs	r3, #14
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 80061e8:	2100      	movs	r1, #0
 80061ea:	6838      	ldr	r0, [r7, #0]
 80061ec:	f7fa f966 	bl	80004bc <__aeabi_fcmpgt>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d038      	beq.n	8006266 <SpiritRadioGetdBm2Reg+0x10e>
 80061f4:	250f      	movs	r5, #15
 80061f6:	197b      	adds	r3, r7, r5
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	4965      	ldr	r1, [pc, #404]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 80061fc:	0013      	movs	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	189b      	adds	r3, r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	18cb      	adds	r3, r1, r3
 8006206:	3308      	adds	r3, #8
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	1c19      	adds	r1, r3, #0
 800620c:	4861      	ldr	r0, [pc, #388]	; (8006394 <SpiritRadioGetdBm2Reg+0x23c>)
 800620e:	f7fa fc1b 	bl	8000a48 <__aeabi_fdiv>
 8006212:	1c03      	adds	r3, r0, #0
 8006214:	1c1c      	adds	r4, r3, #0
 8006216:	197b      	adds	r3, r7, r5
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	495d      	ldr	r1, [pc, #372]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 800621c:	0013      	movs	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	189b      	adds	r3, r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	18cb      	adds	r3, r1, r3
 8006226:	330c      	adds	r3, #12
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	197b      	adds	r3, r7, r5
 800622c:	781a      	ldrb	r2, [r3, #0]
 800622e:	4958      	ldr	r1, [pc, #352]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 8006230:	0013      	movs	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	189b      	adds	r3, r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	18cb      	adds	r3, r1, r3
 800623a:	3308      	adds	r3, #8
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	1c19      	adds	r1, r3, #0
 8006240:	f7fa fc02 	bl	8000a48 <__aeabi_fdiv>
 8006244:	1c03      	adds	r3, r0, #0
 8006246:	1c19      	adds	r1, r3, #0
 8006248:	1c20      	adds	r0, r4, #0
 800624a:	f7fa ff07 	bl	800105c <__aeabi_fsub>
 800624e:	1c03      	adds	r3, r0, #0
 8006250:	1c19      	adds	r1, r3, #0
 8006252:	6838      	ldr	r0, [r7, #0]
 8006254:	f7fa f932 	bl	80004bc <__aeabi_fcmpgt>
 8006258:	1e03      	subs	r3, r0, #0
 800625a:	d004      	beq.n	8006266 <SpiritRadioGetdBm2Reg+0x10e>
      j=0;
 800625c:	230e      	movs	r3, #14
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e03d      	b.n	80062e2 <SpiritRadioGetdBm2Reg+0x18a>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8006266:	2100      	movs	r1, #0
 8006268:	6838      	ldr	r0, [r7, #0]
 800626a:	f7fa f91d 	bl	80004a8 <__aeabi_fcmple>
 800626e:	1e03      	subs	r3, r0, #0
 8006270:	d037      	beq.n	80062e2 <SpiritRadioGetdBm2Reg+0x18a>
 8006272:	250f      	movs	r5, #15
 8006274:	197b      	adds	r3, r7, r5
 8006276:	781a      	ldrb	r2, [r3, #0]
 8006278:	4945      	ldr	r1, [pc, #276]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 800627a:	0013      	movs	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	189b      	adds	r3, r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	18cb      	adds	r3, r1, r3
 8006284:	3308      	adds	r3, #8
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	1c19      	adds	r1, r3, #0
 800628a:	4843      	ldr	r0, [pc, #268]	; (8006398 <SpiritRadioGetdBm2Reg+0x240>)
 800628c:	f7fa fbdc 	bl	8000a48 <__aeabi_fdiv>
 8006290:	1c03      	adds	r3, r0, #0
 8006292:	1c1c      	adds	r4, r3, #0
 8006294:	197b      	adds	r3, r7, r5
 8006296:	781a      	ldrb	r2, [r3, #0]
 8006298:	493d      	ldr	r1, [pc, #244]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 800629a:	0013      	movs	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	189b      	adds	r3, r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	18cb      	adds	r3, r1, r3
 80062a4:	330c      	adds	r3, #12
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	197b      	adds	r3, r7, r5
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	4938      	ldr	r1, [pc, #224]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 80062ae:	0013      	movs	r3, r2
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	18cb      	adds	r3, r1, r3
 80062b8:	3308      	adds	r3, #8
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	1c19      	adds	r1, r3, #0
 80062be:	f7fa fbc3 	bl	8000a48 <__aeabi_fdiv>
 80062c2:	1c03      	adds	r3, r0, #0
 80062c4:	1c19      	adds	r1, r3, #0
 80062c6:	1c20      	adds	r0, r4, #0
 80062c8:	f7fa fec8 	bl	800105c <__aeabi_fsub>
 80062cc:	1c03      	adds	r3, r0, #0
 80062ce:	1c19      	adds	r1, r3, #0
 80062d0:	6838      	ldr	r0, [r7, #0]
 80062d2:	f7fa f8df 	bl	8000494 <__aeabi_fcmplt>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d003      	beq.n	80062e2 <SpiritRadioGetdBm2Reg+0x18a>
      j=2;
 80062da:	230e      	movs	r3, #14
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	2202      	movs	r2, #2
 80062e0:	701a      	strb	r2, [r3, #0]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80062e2:	250f      	movs	r5, #15
 80062e4:	197b      	adds	r3, r7, r5
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	260e      	movs	r6, #14
 80062ea:	19bb      	adds	r3, r7, r6
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	0058      	lsls	r0, r3, #1
 80062f0:	4927      	ldr	r1, [pc, #156]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 80062f2:	0013      	movs	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	189b      	adds	r3, r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	181b      	adds	r3, r3, r0
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	585b      	ldr	r3, [r3, r1]
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	1c18      	adds	r0, r3, #0
 8006304:	f7fa fd78 	bl	8000df8 <__aeabi_fmul>
 8006308:	1c03      	adds	r3, r0, #0
 800630a:	1c1c      	adds	r4, r3, #0
 800630c:	197b      	adds	r3, r7, r5
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	19bb      	adds	r3, r7, r6
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	1c58      	adds	r0, r3, #1
 8006318:	491d      	ldr	r1, [pc, #116]	; (8006390 <SpiritRadioGetdBm2Reg+0x238>)
 800631a:	0013      	movs	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	189b      	adds	r3, r3, r2
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	181b      	adds	r3, r3, r0
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	585b      	ldr	r3, [r3, r1]
 8006328:	1c19      	adds	r1, r3, #0
 800632a:	1c20      	adds	r0, r4, #0
 800632c:	f7fa f9f2 	bl	8000714 <__aeabi_fadd>
 8006330:	1c03      	adds	r3, r0, #0
 8006332:	60bb      	str	r3, [r7, #8]
  
  if(fReg<1)
 8006334:	21fe      	movs	r1, #254	; 0xfe
 8006336:	0589      	lsls	r1, r1, #22
 8006338:	68b8      	ldr	r0, [r7, #8]
 800633a:	f7fa f8ab 	bl	8000494 <__aeabi_fcmplt>
 800633e:	1e03      	subs	r3, r0, #0
 8006340:	d003      	beq.n	800634a <SpiritRadioGetdBm2Reg+0x1f2>
    fReg=1;
 8006342:	23fe      	movs	r3, #254	; 0xfe
 8006344:	059b      	lsls	r3, r3, #22
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	e007      	b.n	800635a <SpiritRadioGetdBm2Reg+0x202>
  else if(fReg>90) 
 800634a:	4914      	ldr	r1, [pc, #80]	; (800639c <SpiritRadioGetdBm2Reg+0x244>)
 800634c:	68b8      	ldr	r0, [r7, #8]
 800634e:	f7fa f8b5 	bl	80004bc <__aeabi_fcmpgt>
 8006352:	1e03      	subs	r3, r0, #0
 8006354:	d001      	beq.n	800635a <SpiritRadioGetdBm2Reg+0x202>
    fReg=90;
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <SpiritRadioGetdBm2Reg+0x244>)
 8006358:	60bb      	str	r3, [r7, #8]
  
  return ((uint8_t)fReg);
 800635a:	68b8      	ldr	r0, [r7, #8]
 800635c:	f7fa f8e2 	bl	8000524 <__aeabi_f2uiz>
 8006360:	0003      	movs	r3, r0
 8006362:	b2db      	uxtb	r3, r3
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b005      	add	sp, #20
 800636a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636c:	2e5f567f 	.word	0x2e5f567f
 8006370:	390c2fe0 	.word	0x390c2fe0
 8006374:	35a4e8ff 	.word	0x35a4e8ff
 8006378:	1701e47f 	.word	0x1701e47f
 800637c:	1c146a60 	.word	0x1c146a60
 8006380:	11d260bf 	.word	0x11d260bf
 8006384:	14ced7e0 	.word	0x14ced7e0
 8006388:	08e18f3f 	.word	0x08e18f3f
 800638c:	0a6fd060 	.word	0x0a6fd060
 8006390:	0800af54 	.word	0x0800af54
 8006394:	41500000 	.word	0x41500000
 8006398:	42200000 	.word	0x42200000
 800639c:	42b40000 	.word	0x42b40000

080063a0 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80063a0:	b590      	push	{r4, r7, lr}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	0002      	movs	r2, r0
 80063a8:	6039      	str	r1, [r7, #0]
 80063aa:	1dfb      	adds	r3, r7, #7
 80063ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80063ae:	f7ff fbbd 	bl	8005b2c <SpiritRadioGetFrequencyBase>
 80063b2:	0002      	movs	r2, r0
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	1c19      	adds	r1, r3, #0
 80063b8:	0010      	movs	r0, r2
 80063ba:	f7ff fecd 	bl	8006158 <SpiritRadioGetdBm2Reg>
 80063be:	0003      	movs	r3, r0
 80063c0:	001a      	movs	r2, r3
 80063c2:	200e      	movs	r0, #14
 80063c4:	183b      	adds	r3, r7, r0
 80063c6:	701a      	strb	r2, [r3, #0]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80063c8:	240f      	movs	r4, #15
 80063ca:	193b      	adds	r3, r7, r4
 80063cc:	1dfa      	adds	r2, r7, #7
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	2117      	movs	r1, #23
 80063d2:	1a8a      	subs	r2, r1, r2
 80063d4:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80063d6:	183a      	adds	r2, r7, r0
 80063d8:	193b      	adds	r3, r7, r4
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2101      	movs	r1, #1
 80063de:	0018      	movs	r0, r3
 80063e0:	f001 f908 	bl	80075f4 <RadioSpiWriteRegisters>
 80063e4:	1c03      	adds	r3, r0, #0
 80063e6:	1c1a      	adds	r2, r3, #0
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <SpiritRadioSetPALeveldBm+0x60>)
 80063ea:	b212      	sxth	r2, r2
 80063ec:	1c11      	adds	r1, r2, #0
 80063ee:	7019      	strb	r1, [r3, #0]
 80063f0:	0412      	lsls	r2, r2, #16
 80063f2:	0e12      	lsrs	r2, r2, #24
 80063f4:	705a      	strb	r2, [r3, #1]
  
}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b005      	add	sp, #20
 80063fc:	bd90      	pop	{r4, r7, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	20000458 	.word	0x20000458

08006404 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8006404:	b590      	push	{r4, r7, lr}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	0002      	movs	r2, r0
 800640c:	1dfb      	adds	r3, r7, #7
 800640e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8006410:	210f      	movs	r1, #15
 8006412:	000c      	movs	r4, r1
 8006414:	187b      	adds	r3, r7, r1
 8006416:	001a      	movs	r2, r3
 8006418:	2101      	movs	r1, #1
 800641a:	2018      	movs	r0, #24
 800641c:	f001 f98c 	bl	8007738 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8006420:	0021      	movs	r1, r4
 8006422:	187b      	adds	r3, r7, r1
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	223f      	movs	r2, #63	; 0x3f
 8006428:	4013      	ands	r3, r2
 800642a:	b2da      	uxtb	r2, r3
 800642c:	187b      	adds	r3, r7, r1
 800642e:	701a      	strb	r2, [r3, #0]
  tempRegValue |= xCLoad;
 8006430:	187b      	adds	r3, r7, r1
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	1dfb      	adds	r3, r7, #7
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	b2da      	uxtb	r2, r3
 800643c:	187b      	adds	r3, r7, r1
 800643e:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8006440:	187b      	adds	r3, r7, r1
 8006442:	001a      	movs	r2, r3
 8006444:	2101      	movs	r1, #1
 8006446:	2018      	movs	r0, #24
 8006448:	f001 f8d4 	bl	80075f4 <RadioSpiWriteRegisters>
 800644c:	1c03      	adds	r3, r0, #0
 800644e:	1c1a      	adds	r2, r3, #0
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <SpiritRadioSetPACwc+0x64>)
 8006452:	b212      	sxth	r2, r2
 8006454:	1c11      	adds	r1, r2, #0
 8006456:	7019      	strb	r1, [r3, #0]
 8006458:	0412      	lsls	r2, r2, #16
 800645a:	0e12      	lsrs	r2, r2, #24
 800645c:	705a      	strb	r2, [r3, #1]
  
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	b005      	add	sp, #20
 8006464:	bd90      	pop	{r4, r7, pc}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	20000458 	.word	0x20000458

0800646c <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	0002      	movs	r2, r0
 8006474:	1dfb      	adds	r3, r7, #7
 8006476:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8006478:	210f      	movs	r1, #15
 800647a:	000c      	movs	r4, r1
 800647c:	187b      	adds	r3, r7, r1
 800647e:	001a      	movs	r2, r3
 8006480:	2101      	movs	r1, #1
 8006482:	2018      	movs	r0, #24
 8006484:	f001 f958 	bl	8007738 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8006488:	0021      	movs	r1, r4
 800648a:	187b      	adds	r3, r7, r1
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2207      	movs	r2, #7
 8006490:	4393      	bics	r3, r2
 8006492:	b2da      	uxtb	r2, r3
 8006494:	187b      	adds	r3, r7, r1
 8006496:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cIndex;
 8006498:	187b      	adds	r3, r7, r1
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	1dfb      	adds	r3, r7, #7
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	187b      	adds	r3, r7, r1
 80064a6:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	001a      	movs	r2, r3
 80064ac:	2101      	movs	r1, #1
 80064ae:	2018      	movs	r0, #24
 80064b0:	f001 f8a0 	bl	80075f4 <RadioSpiWriteRegisters>
 80064b4:	1c03      	adds	r3, r0, #0
 80064b6:	1c1a      	adds	r2, r3, #0
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <SpiritRadioSetPALevelMaxIndex+0x64>)
 80064ba:	b212      	sxth	r2, r2
 80064bc:	1c11      	adds	r1, r2, #0
 80064be:	7019      	strb	r1, [r3, #0]
 80064c0:	0412      	lsls	r2, r2, #16
 80064c2:	0e12      	lsrs	r2, r2, #24
 80064c4:	705a      	strb	r2, [r3, #1]
  
}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b005      	add	sp, #20
 80064cc:	bd90      	pop	{r4, r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	20000458 	.word	0x20000458

080064d4 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	0002      	movs	r2, r0
 80064dc:	1dfb      	adds	r3, r7, #7
 80064de:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue = 0x00;
 80064e0:	210f      	movs	r1, #15
 80064e2:	187b      	adds	r3, r7, r1
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 80064e8:	187b      	adds	r3, r7, r1
 80064ea:	001a      	movs	r2, r3
 80064ec:	2101      	movs	r1, #1
 80064ee:	201e      	movs	r0, #30
 80064f0:	f001 f922 	bl	8007738 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80064f4:	1dfb      	adds	r3, r7, #7
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d109      	bne.n	8006510 <SpiritRadioAFCFreezeOnSync+0x3c>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80064fc:	210f      	movs	r1, #15
 80064fe:	187b      	adds	r3, r7, r1
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2280      	movs	r2, #128	; 0x80
 8006504:	4252      	negs	r2, r2
 8006506:	4313      	orrs	r3, r2
 8006508:	b2da      	uxtb	r2, r3
 800650a:	187b      	adds	r3, r7, r1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e007      	b.n	8006520 <SpiritRadioAFCFreezeOnSync+0x4c>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8006510:	210f      	movs	r1, #15
 8006512:	187b      	adds	r3, r7, r1
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	227f      	movs	r2, #127	; 0x7f
 8006518:	4013      	ands	r3, r2
 800651a:	b2da      	uxtb	r2, r3
 800651c:	187b      	adds	r3, r7, r1
 800651e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8006520:	230f      	movs	r3, #15
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	001a      	movs	r2, r3
 8006526:	2101      	movs	r1, #1
 8006528:	201e      	movs	r0, #30
 800652a:	f001 f863 	bl	80075f4 <RadioSpiWriteRegisters>
 800652e:	1c03      	adds	r3, r0, #0
 8006530:	1c1a      	adds	r2, r3, #0
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <SpiritRadioAFCFreezeOnSync+0x74>)
 8006534:	b212      	sxth	r2, r2
 8006536:	1c11      	adds	r1, r2, #0
 8006538:	7019      	strb	r1, [r3, #0]
 800653a:	0412      	lsls	r2, r2, #16
 800653c:	0e12      	lsrs	r2, r2, #24
 800653e:	705a      	strb	r2, [r3, #1]
  
}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b004      	add	sp, #16
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000458 	.word	0x20000458

0800654c <SpiritRadioCsBlanking>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	0002      	movs	r2, r0
 8006554:	1dfb      	adds	r3, r7, #7
 8006556:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the ANT_SELECT_CONF_BASE and mask the CS_BLANKING BIT field */
  SpiritSpiReadRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8006558:	230f      	movs	r3, #15
 800655a:	18fb      	adds	r3, r7, r3
 800655c:	001a      	movs	r2, r3
 800655e:	2101      	movs	r1, #1
 8006560:	2027      	movs	r0, #39	; 0x27
 8006562:	f001 f8e9 	bl	8007738 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8006566:	1dfb      	adds	r3, r7, #7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d108      	bne.n	8006580 <SpiritRadioCsBlanking+0x34>
  {
    tempRegValue |= ANT_SELECT_CS_BLANKING_MASK;
 800656e:	210f      	movs	r1, #15
 8006570:	187b      	adds	r3, r7, r1
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2210      	movs	r2, #16
 8006576:	4313      	orrs	r3, r2
 8006578:	b2da      	uxtb	r2, r3
 800657a:	187b      	adds	r3, r7, r1
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e007      	b.n	8006590 <SpiritRadioCsBlanking+0x44>
  }
  else
  {
    tempRegValue &= (~ANT_SELECT_CS_BLANKING_MASK);
 8006580:	210f      	movs	r1, #15
 8006582:	187b      	adds	r3, r7, r1
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2210      	movs	r2, #16
 8006588:	4393      	bics	r3, r2
 800658a:	b2da      	uxtb	r2, r3
 800658c:	187b      	adds	r3, r7, r1
 800658e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the ANT_SELECT_CONF register */
  g_xStatus = SpiritSpiWriteRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8006590:	230f      	movs	r3, #15
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	001a      	movs	r2, r3
 8006596:	2101      	movs	r1, #1
 8006598:	2027      	movs	r0, #39	; 0x27
 800659a:	f001 f82b 	bl	80075f4 <RadioSpiWriteRegisters>
 800659e:	1c03      	adds	r3, r0, #0
 80065a0:	1c1a      	adds	r2, r3, #0
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <SpiritRadioCsBlanking+0x6c>)
 80065a4:	b212      	sxth	r2, r2
 80065a6:	1c11      	adds	r1, r2, #0
 80065a8:	7019      	strb	r1, [r3, #0]
 80065aa:	0412      	lsls	r2, r2, #16
 80065ac:	0e12      	lsrs	r2, r2, #24
 80065ae:	705a      	strb	r2, [r3, #1]
  
  
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b004      	add	sp, #16
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000458 	.word	0x20000458

080065bc <SpiritRadioPersistenRx>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	0002      	movs	r2, r0
 80065c4:	1dfb      	adds	r3, r7, #7
 80065c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the PROTOCOL0_BASE and mask the PROTOCOL0_PERS_RX_MASK bitfield */
  SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 80065c8:	230f      	movs	r3, #15
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	001a      	movs	r2, r3
 80065ce:	2101      	movs	r1, #1
 80065d0:	2052      	movs	r0, #82	; 0x52
 80065d2:	f001 f8b1 	bl	8007738 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80065d6:	1dfb      	adds	r3, r7, #7
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d108      	bne.n	80065f0 <SpiritRadioPersistenRx+0x34>
  {
    tempRegValue |= PROTOCOL0_PERS_RX_MASK;
 80065de:	210f      	movs	r1, #15
 80065e0:	187b      	adds	r3, r7, r1
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2202      	movs	r2, #2
 80065e6:	4313      	orrs	r3, r2
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	187b      	adds	r3, r7, r1
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e007      	b.n	8006600 <SpiritRadioPersistenRx+0x44>
  }
  else
  {
    tempRegValue &= (~PROTOCOL0_PERS_RX_MASK);
 80065f0:	210f      	movs	r1, #15
 80065f2:	187b      	adds	r3, r7, r1
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2202      	movs	r2, #2
 80065f8:	4393      	bics	r3, r2
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	187b      	adds	r3, r7, r1
 80065fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the PROTOCOL0_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8006600:	230f      	movs	r3, #15
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	001a      	movs	r2, r3
 8006606:	2101      	movs	r1, #1
 8006608:	2052      	movs	r0, #82	; 0x52
 800660a:	f000 fff3 	bl	80075f4 <RadioSpiWriteRegisters>
 800660e:	1c03      	adds	r3, r0, #0
 8006610:	1c1a      	adds	r2, r3, #0
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <SpiritRadioPersistenRx+0x6c>)
 8006614:	b212      	sxth	r2, r2
 8006616:	1c11      	adds	r1, r2, #0
 8006618:	7019      	strb	r1, [r3, #0]
 800661a:	0412      	lsls	r2, r2, #16
 800661c:	0e12      	lsrs	r2, r2, #24
 800661e:	705a      	strb	r2, [r3, #1]
  
}
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b004      	add	sp, #16
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000458 	.word	0x20000458

0800662c <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	0002      	movs	r2, r0
 8006634:	1dfb      	adds	r3, r7, #7
 8006636:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8006638:	230f      	movs	r3, #15
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	001a      	movs	r2, r3
 800663e:	2101      	movs	r1, #1
 8006640:	209e      	movs	r0, #158	; 0x9e
 8006642:	f001 f879 	bl	8007738 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8006646:	1dfb      	adds	r3, r7, #7
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d109      	bne.n	8006662 <SpiritRadioSetRefDiv+0x36>
  {
    tempRegValue |= 0x80;
 800664e:	210f      	movs	r1, #15
 8006650:	187b      	adds	r3, r7, r1
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2280      	movs	r2, #128	; 0x80
 8006656:	4252      	negs	r2, r2
 8006658:	4313      	orrs	r3, r2
 800665a:	b2da      	uxtb	r2, r3
 800665c:	187b      	adds	r3, r7, r1
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e007      	b.n	8006672 <SpiritRadioSetRefDiv+0x46>
  }
  else
  {
    tempRegValue &= 0x7F;
 8006662:	210f      	movs	r1, #15
 8006664:	187b      	adds	r3, r7, r1
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	227f      	movs	r2, #127	; 0x7f
 800666a:	4013      	ands	r3, r2
 800666c:	b2da      	uxtb	r2, r3
 800666e:	187b      	adds	r3, r7, r1
 8006670:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8006672:	230f      	movs	r3, #15
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	001a      	movs	r2, r3
 8006678:	2101      	movs	r1, #1
 800667a:	209e      	movs	r0, #158	; 0x9e
 800667c:	f000 ffba 	bl	80075f4 <RadioSpiWriteRegisters>
 8006680:	1c03      	adds	r3, r0, #0
 8006682:	1c1a      	adds	r2, r3, #0
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <SpiritRadioSetRefDiv+0x70>)
 8006686:	b212      	sxth	r2, r2
 8006688:	1c11      	adds	r1, r2, #0
 800668a:	7019      	strb	r1, [r3, #0]
 800668c:	0412      	lsls	r2, r2, #16
 800668e:	0e12      	lsrs	r2, r2, #24
 8006690:	705a      	strb	r2, [r3, #1]
  
}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	46bd      	mov	sp, r7
 8006696:	b004      	add	sp, #16
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	20000458 	.word	0x20000458

080066a0 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80066a6:	1dfb      	adds	r3, r7, #7
 80066a8:	001a      	movs	r2, r3
 80066aa:	2101      	movs	r1, #1
 80066ac:	209e      	movs	r0, #158	; 0x9e
 80066ae:	f001 f843 	bl	8007738 <RadioSpiReadRegisters>
 80066b2:	1c03      	adds	r3, r0, #0
 80066b4:	1c1a      	adds	r2, r3, #0
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <SpiritRadioGetRefDiv+0x44>)
 80066b8:	b212      	sxth	r2, r2
 80066ba:	1c11      	adds	r1, r2, #0
 80066bc:	7019      	strb	r1, [r3, #0]
 80066be:	0412      	lsls	r2, r2, #16
 80066c0:	0e12      	lsrs	r2, r2, #24
 80066c2:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 80066c4:	1dfb      	adds	r3, r7, #7
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	09db      	lsrs	r3, r3, #7
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	001a      	movs	r2, r3
 80066ce:	2301      	movs	r3, #1
 80066d0:	4013      	ands	r3, r2
 80066d2:	d001      	beq.n	80066d8 <SpiritRadioGetRefDiv+0x38>
  {
    return S_ENABLE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <SpiritRadioGetRefDiv+0x3a>
  }
  else
  {
    return S_DISABLE;
 80066d8:	2300      	movs	r3, #0
  }
  
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b002      	add	sp, #8
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	20000458 	.word	0x20000458

080066e8 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	0002      	movs	r2, r0
 80066f0:	1dfb      	adds	r3, r7, #7
 80066f2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80066f4:	230f      	movs	r3, #15
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	001a      	movs	r2, r3
 80066fa:	2101      	movs	r1, #1
 80066fc:	20b4      	movs	r0, #180	; 0xb4
 80066fe:	f001 f81b 	bl	8007738 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8006702:	1dfb      	adds	r3, r7, #7
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d108      	bne.n	800671c <SpiritRadioSetDigDiv+0x34>
  {
    tempRegValue &= 0xf7;
 800670a:	210f      	movs	r1, #15
 800670c:	187b      	adds	r3, r7, r1
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2208      	movs	r2, #8
 8006712:	4393      	bics	r3, r2
 8006714:	b2da      	uxtb	r2, r3
 8006716:	187b      	adds	r3, r7, r1
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e007      	b.n	800672c <SpiritRadioSetDigDiv+0x44>
  }
  else
  {
    
    tempRegValue |= 0x08;
 800671c:	210f      	movs	r1, #15
 800671e:	187b      	adds	r3, r7, r1
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2208      	movs	r2, #8
 8006724:	4313      	orrs	r3, r2
 8006726:	b2da      	uxtb	r2, r3
 8006728:	187b      	adds	r3, r7, r1
 800672a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800672c:	230f      	movs	r3, #15
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	001a      	movs	r2, r3
 8006732:	2101      	movs	r1, #1
 8006734:	20b4      	movs	r0, #180	; 0xb4
 8006736:	f000 ff5d 	bl	80075f4 <RadioSpiWriteRegisters>
 800673a:	1c03      	adds	r3, r0, #0
 800673c:	1c1a      	adds	r2, r3, #0
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <SpiritRadioSetDigDiv+0x6c>)
 8006740:	b212      	sxth	r2, r2
 8006742:	1c11      	adds	r1, r2, #0
 8006744:	7019      	strb	r1, [r3, #0]
 8006746:	0412      	lsls	r2, r2, #16
 8006748:	0e12      	lsrs	r2, r2, #24
 800674a:	705a      	strb	r2, [r3, #1]
  
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b004      	add	sp, #16
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000458 	.word	0x20000458

08006758 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800675e:	1dfb      	adds	r3, r7, #7
 8006760:	001a      	movs	r2, r3
 8006762:	2101      	movs	r1, #1
 8006764:	20b4      	movs	r0, #180	; 0xb4
 8006766:	f000 ffe7 	bl	8007738 <RadioSpiReadRegisters>
 800676a:	1c03      	adds	r3, r0, #0
 800676c:	1c1a      	adds	r2, r3, #0
 800676e:	4b0b      	ldr	r3, [pc, #44]	; (800679c <SpiritRadioGetDigDiv+0x44>)
 8006770:	b212      	sxth	r2, r2
 8006772:	1c11      	adds	r1, r2, #0
 8006774:	7019      	strb	r1, [r3, #0]
 8006776:	0412      	lsls	r2, r2, #16
 8006778:	0e12      	lsrs	r2, r2, #24
 800677a:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800677c:	1dfb      	adds	r3, r7, #7
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	08db      	lsrs	r3, r3, #3
 8006782:	b2db      	uxtb	r3, r3
 8006784:	001a      	movs	r2, r3
 8006786:	2301      	movs	r3, #1
 8006788:	4013      	ands	r3, r2
 800678a:	d001      	beq.n	8006790 <SpiritRadioGetDigDiv+0x38>
  {
    return S_DISABLE;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <SpiritRadioGetDigDiv+0x3a>
  }
  else
  {
    return S_ENABLE;
 8006790:	2301      	movs	r3, #1
  }
  
}
 8006792:	0018      	movs	r0, r3
 8006794:	46bd      	mov	sp, r7
 8006796:	b002      	add	sp, #8
 8006798:	bd80      	pop	{r7, pc}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	20000458 	.word	0x20000458

080067a0 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 80067a4:	4b02      	ldr	r3, [pc, #8]	; (80067b0 <SpiritRadioGetXtalFrequency+0x10>)
 80067a6:	681b      	ldr	r3, [r3, #0]
}
 80067a8:	0018      	movs	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	20000318 	.word	0x20000318

080067b4 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 80067bc:	4b03      	ldr	r3, [pc, #12]	; (80067cc <SpiritRadioSetXtalFrequency+0x18>)
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b002      	add	sp, #8
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	20000318 	.word	0x20000318

080067d0 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 80067d0:	b590      	push	{r4, r7, lr}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 80067d8:	240c      	movs	r4, #12
 80067da:	193a      	adds	r2, r7, r4
 80067dc:	193b      	adds	r3, r7, r4
 80067de:	1c59      	adds	r1, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1c18      	adds	r0, r3, #0
 80067e4:	f000 f832 	bl	800684c <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 80067e8:	193b      	adds	r3, r7, r4
 80067ea:	001a      	movs	r2, r3
 80067ec:	2102      	movs	r1, #2
 80067ee:	2053      	movs	r0, #83	; 0x53
 80067f0:	f000 ff00 	bl	80075f4 <RadioSpiWriteRegisters>
 80067f4:	1c03      	adds	r3, r0, #0
 80067f6:	1c1a      	adds	r2, r3, #0
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <SpiritTimerSetRxTimeoutMs+0x40>)
 80067fa:	b212      	sxth	r2, r2
 80067fc:	1c11      	adds	r1, r2, #0
 80067fe:	7019      	strb	r1, [r3, #0]
 8006800:	0412      	lsls	r2, r2, #16
 8006802:	0e12      	lsrs	r2, r2, #24
 8006804:	705a      	strb	r2, [r3, #1]

}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	46bd      	mov	sp, r7
 800680a:	b005      	add	sp, #20
 800680c:	bd90      	pop	{r4, r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	20000458 	.word	0x20000458

08006814 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	0002      	movs	r2, r0
 800681c:	1dfb      	adds	r3, r7, #7
 800681e:	701a      	strb	r2, [r3, #0]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8006820:	1dfb      	adds	r3, r7, #7
 8006822:	001a      	movs	r2, r3
 8006824:	2101      	movs	r1, #1
 8006826:	2054      	movs	r0, #84	; 0x54
 8006828:	f000 fee4 	bl	80075f4 <RadioSpiWriteRegisters>
 800682c:	1c03      	adds	r3, r0, #0
 800682e:	1c1a      	adds	r2, r3, #0
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <SpiritTimerSetRxTimeoutCounter+0x34>)
 8006832:	b212      	sxth	r2, r2
 8006834:	1c11      	adds	r1, r2, #0
 8006836:	7019      	strb	r1, [r3, #0]
 8006838:	0412      	lsls	r2, r2, #16
 800683a:	0e12      	lsrs	r2, r2, #24
 800683c:	705a      	strb	r2, [r3, #1]

}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	46bd      	mov	sp, r7
 8006842:	b002      	add	sp, #8
 8006844:	bd80      	pop	{r7, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	20000458 	.word	0x20000458

0800684c <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b089      	sub	sp, #36	; 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8006858:	f7ff ffa2 	bl	80067a0 <SpiritRadioGetXtalFrequency>
 800685c:	0003      	movs	r3, r0
 800685e:	61fb      	str	r3, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4aac      	ldr	r2, [pc, #688]	; (8006b14 <SpiritTimerComputeRxTimeoutValues+0x2c8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d902      	bls.n	800686e <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 800686e:	69f8      	ldr	r0, [r7, #28]
 8006870:	f7fa fe22 	bl	80014b8 <__aeabi_ui2f>
 8006874:	1c03      	adds	r3, r0, #0
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	1c18      	adds	r0, r3, #0
 800687a:	f7fa fabd 	bl	8000df8 <__aeabi_fmul>
 800687e:	1c03      	adds	r3, r0, #0
 8006880:	49a5      	ldr	r1, [pc, #660]	; (8006b18 <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 8006882:	1c18      	adds	r0, r3, #0
 8006884:	f7fa f8e0 	bl	8000a48 <__aeabi_fdiv>
 8006888:	1c03      	adds	r3, r0, #0
 800688a:	1c18      	adds	r0, r3, #0
 800688c:	f7f9 fe4a 	bl	8000524 <__aeabi_f2uiz>
 8006890:	0003      	movs	r3, r0
 8006892:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	4aa1      	ldr	r2, [pc, #644]	; (8006b1c <SpiritTimerComputeRxTimeoutValues+0x2d0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d906      	bls.n	80068aa <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	22ff      	movs	r2, #255	; 0xff
 80068a0:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	22ff      	movs	r2, #255	; 0xff
 80068a6:	701a      	strb	r2, [r3, #0]
    return;
 80068a8:	e131      	b.n	8006b0e <SpiritTimerComputeRxTimeoutValues+0x2c2>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	21ff      	movs	r1, #255	; 0xff
 80068ae:	0018      	movs	r0, r3
 80068b0:	f7f9 fc2a 	bl	8000108 <__udivsi3>
 80068b4:	0003      	movs	r3, r0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	3302      	adds	r3, #2
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	0019      	movs	r1, r3
 80068c6:	69b8      	ldr	r0, [r7, #24]
 80068c8:	f7f9 fc1e 	bl	8000108 <__udivsi3>
 80068cc:	0003      	movs	r3, r0
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	0018      	movs	r0, r3
 80068da:	f7fa fded 	bl	80014b8 <__aeabi_ui2f>
 80068de:	1c04      	adds	r4, r0, #0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7fa fd9d 	bl	8001424 <__aeabi_i2f>
 80068ea:	1c03      	adds	r3, r0, #0
 80068ec:	1c19      	adds	r1, r3, #0
 80068ee:	1c20      	adds	r0, r4, #0
 80068f0:	f7fa fa82 	bl	8000df8 <__aeabi_fmul>
 80068f4:	1c03      	adds	r3, r0, #0
 80068f6:	4988      	ldr	r1, [pc, #544]	; (8006b18 <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 80068f8:	1c18      	adds	r0, r3, #0
 80068fa:	f7fa fa7d 	bl	8000df8 <__aeabi_fmul>
 80068fe:	1c03      	adds	r3, r0, #0
 8006900:	1c1c      	adds	r4, r3, #0
 8006902:	69f8      	ldr	r0, [r7, #28]
 8006904:	f7fa fdd8 	bl	80014b8 <__aeabi_ui2f>
 8006908:	1c03      	adds	r3, r0, #0
 800690a:	1c19      	adds	r1, r3, #0
 800690c:	1c20      	adds	r0, r4, #0
 800690e:	f7fa f89b 	bl	8000a48 <__aeabi_fdiv>
 8006912:	1c03      	adds	r3, r0, #0
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	1c18      	adds	r0, r3, #0
 8006918:	f7fa fba0 	bl	800105c <__aeabi_fsub>
 800691c:	1c03      	adds	r3, r0, #0
 800691e:	2100      	movs	r1, #0
 8006920:	1c18      	adds	r0, r3, #0
 8006922:	f7f9 fdcb 	bl	80004bc <__aeabi_fcmpgt>
 8006926:	1e03      	subs	r3, r0, #0
 8006928:	d025      	beq.n	8006976 <SpiritTimerComputeRxTimeoutValues+0x12a>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	0018      	movs	r0, r3
 8006930:	f7fa fdc2 	bl	80014b8 <__aeabi_ui2f>
 8006934:	1c04      	adds	r4, r0, #0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	0018      	movs	r0, r3
 800693c:	f7fa fd72 	bl	8001424 <__aeabi_i2f>
 8006940:	1c03      	adds	r3, r0, #0
 8006942:	1c19      	adds	r1, r3, #0
 8006944:	1c20      	adds	r0, r4, #0
 8006946:	f7fa fa57 	bl	8000df8 <__aeabi_fmul>
 800694a:	1c03      	adds	r3, r0, #0
 800694c:	4972      	ldr	r1, [pc, #456]	; (8006b18 <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 800694e:	1c18      	adds	r0, r3, #0
 8006950:	f7fa fa52 	bl	8000df8 <__aeabi_fmul>
 8006954:	1c03      	adds	r3, r0, #0
 8006956:	1c1c      	adds	r4, r3, #0
 8006958:	69f8      	ldr	r0, [r7, #28]
 800695a:	f7fa fdad 	bl	80014b8 <__aeabi_ui2f>
 800695e:	1c03      	adds	r3, r0, #0
 8006960:	1c19      	adds	r1, r3, #0
 8006962:	1c20      	adds	r0, r4, #0
 8006964:	f7fa f870 	bl	8000a48 <__aeabi_fdiv>
 8006968:	1c03      	adds	r3, r0, #0
 800696a:	68f9      	ldr	r1, [r7, #12]
 800696c:	1c18      	adds	r0, r3, #0
 800696e:	f7fa fb75 	bl	800105c <__aeabi_fsub>
 8006972:	1c03      	adds	r3, r0, #0
 8006974:	e028      	b.n	80069c8 <SpiritTimerComputeRxTimeoutValues+0x17c>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	0018      	movs	r0, r3
 800697c:	f7fa fd9c 	bl	80014b8 <__aeabi_ui2f>
 8006980:	1c04      	adds	r4, r0, #0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	0018      	movs	r0, r3
 8006988:	f7fa fd4c 	bl	8001424 <__aeabi_i2f>
 800698c:	1c03      	adds	r3, r0, #0
 800698e:	1c19      	adds	r1, r3, #0
 8006990:	1c20      	adds	r0, r4, #0
 8006992:	f7fa fa31 	bl	8000df8 <__aeabi_fmul>
 8006996:	1c03      	adds	r3, r0, #0
 8006998:	495f      	ldr	r1, [pc, #380]	; (8006b18 <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 800699a:	1c18      	adds	r0, r3, #0
 800699c:	f7fa fa2c 	bl	8000df8 <__aeabi_fmul>
 80069a0:	1c03      	adds	r3, r0, #0
 80069a2:	1c1c      	adds	r4, r3, #0
 80069a4:	69f8      	ldr	r0, [r7, #28]
 80069a6:	f7fa fd87 	bl	80014b8 <__aeabi_ui2f>
 80069aa:	1c03      	adds	r3, r0, #0
 80069ac:	1c19      	adds	r1, r3, #0
 80069ae:	1c20      	adds	r0, r4, #0
 80069b0:	f7fa f84a 	bl	8000a48 <__aeabi_fdiv>
 80069b4:	1c03      	adds	r3, r0, #0
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	1c18      	adds	r0, r3, #0
 80069ba:	f7fa fb4f 	bl	800105c <__aeabi_fsub>
 80069be:	1c03      	adds	r3, r0, #0
 80069c0:	1c1a      	adds	r2, r3, #0
 80069c2:	2380      	movs	r3, #128	; 0x80
 80069c4:	061b      	lsls	r3, r3, #24
 80069c6:	4053      	eors	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
  
  if((*pcCounter)<=254)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2bff      	cmp	r3, #255	; 0xff
 80069d0:	d100      	bne.n	80069d4 <SpiritTimerComputeRxTimeoutValues+0x188>
 80069d2:	e088      	b.n	8006ae6 <SpiritTimerComputeRxTimeoutValues+0x29a>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	0018      	movs	r0, r3
 80069dc:	f7fa fd22 	bl	8001424 <__aeabi_i2f>
 80069e0:	1c04      	adds	r4, r0, #0
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7fa fd1c 	bl	8001424 <__aeabi_i2f>
 80069ec:	1c03      	adds	r3, r0, #0
 80069ee:	1c19      	adds	r1, r3, #0
 80069f0:	1c20      	adds	r0, r4, #0
 80069f2:	f7fa fa01 	bl	8000df8 <__aeabi_fmul>
 80069f6:	1c03      	adds	r3, r0, #0
 80069f8:	4947      	ldr	r1, [pc, #284]	; (8006b18 <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 80069fa:	1c18      	adds	r0, r3, #0
 80069fc:	f7fa f9fc 	bl	8000df8 <__aeabi_fmul>
 8006a00:	1c03      	adds	r3, r0, #0
 8006a02:	1c1c      	adds	r4, r3, #0
 8006a04:	69f8      	ldr	r0, [r7, #28]
 8006a06:	f7fa fd57 	bl	80014b8 <__aeabi_ui2f>
 8006a0a:	1c03      	adds	r3, r0, #0
 8006a0c:	1c19      	adds	r1, r3, #0
 8006a0e:	1c20      	adds	r0, r4, #0
 8006a10:	f7fa f81a 	bl	8000a48 <__aeabi_fdiv>
 8006a14:	1c03      	adds	r3, r0, #0
 8006a16:	68f9      	ldr	r1, [r7, #12]
 8006a18:	1c18      	adds	r0, r3, #0
 8006a1a:	f7fa fb1f 	bl	800105c <__aeabi_fsub>
 8006a1e:	1c03      	adds	r3, r0, #0
 8006a20:	2100      	movs	r1, #0
 8006a22:	1c18      	adds	r0, r3, #0
 8006a24:	f7f9 fd4a 	bl	80004bc <__aeabi_fcmpgt>
 8006a28:	1e03      	subs	r3, r0, #0
 8006a2a:	d026      	beq.n	8006a7a <SpiritTimerComputeRxTimeoutValues+0x22e>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	0018      	movs	r0, r3
 8006a34:	f7fa fcf6 	bl	8001424 <__aeabi_i2f>
 8006a38:	1c04      	adds	r4, r0, #0
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fa fcf0 	bl	8001424 <__aeabi_i2f>
 8006a44:	1c03      	adds	r3, r0, #0
 8006a46:	1c19      	adds	r1, r3, #0
 8006a48:	1c20      	adds	r0, r4, #0
 8006a4a:	f7fa f9d5 	bl	8000df8 <__aeabi_fmul>
 8006a4e:	1c03      	adds	r3, r0, #0
 8006a50:	4931      	ldr	r1, [pc, #196]	; (8006b18 <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 8006a52:	1c18      	adds	r0, r3, #0
 8006a54:	f7fa f9d0 	bl	8000df8 <__aeabi_fmul>
 8006a58:	1c03      	adds	r3, r0, #0
 8006a5a:	1c1c      	adds	r4, r3, #0
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	f7fa fd2b 	bl	80014b8 <__aeabi_ui2f>
 8006a62:	1c03      	adds	r3, r0, #0
 8006a64:	1c19      	adds	r1, r3, #0
 8006a66:	1c20      	adds	r0, r4, #0
 8006a68:	f7f9 ffee 	bl	8000a48 <__aeabi_fdiv>
 8006a6c:	1c03      	adds	r3, r0, #0
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	1c18      	adds	r0, r3, #0
 8006a72:	f7fa faf3 	bl	800105c <__aeabi_fsub>
 8006a76:	1c03      	adds	r3, r0, #0
 8006a78:	e029      	b.n	8006ace <SpiritTimerComputeRxTimeoutValues+0x282>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7fa fccf 	bl	8001424 <__aeabi_i2f>
 8006a86:	1c04      	adds	r4, r0, #0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f7fa fcc9 	bl	8001424 <__aeabi_i2f>
 8006a92:	1c03      	adds	r3, r0, #0
 8006a94:	1c19      	adds	r1, r3, #0
 8006a96:	1c20      	adds	r0, r4, #0
 8006a98:	f7fa f9ae 	bl	8000df8 <__aeabi_fmul>
 8006a9c:	1c03      	adds	r3, r0, #0
 8006a9e:	491e      	ldr	r1, [pc, #120]	; (8006b18 <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 8006aa0:	1c18      	adds	r0, r3, #0
 8006aa2:	f7fa f9a9 	bl	8000df8 <__aeabi_fmul>
 8006aa6:	1c03      	adds	r3, r0, #0
 8006aa8:	1c1c      	adds	r4, r3, #0
 8006aaa:	69f8      	ldr	r0, [r7, #28]
 8006aac:	f7fa fd04 	bl	80014b8 <__aeabi_ui2f>
 8006ab0:	1c03      	adds	r3, r0, #0
 8006ab2:	1c19      	adds	r1, r3, #0
 8006ab4:	1c20      	adds	r0, r4, #0
 8006ab6:	f7f9 ffc7 	bl	8000a48 <__aeabi_fdiv>
 8006aba:	1c03      	adds	r3, r0, #0
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	1c18      	adds	r0, r3, #0
 8006ac0:	f7fa facc 	bl	800105c <__aeabi_fsub>
 8006ac4:	1c03      	adds	r3, r0, #0
 8006ac6:	1c1a      	adds	r2, r3, #0
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	061b      	lsls	r3, r3, #24
 8006acc:	4053      	eors	r3, r2
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	1c18      	adds	r0, r3, #0
 8006ad2:	f7f9 fcdf 	bl	8000494 <__aeabi_fcmplt>
 8006ad6:	1e03      	subs	r3, r0, #0
 8006ad8:	d005      	beq.n	8006ae6 <SpiritTimerComputeRxTimeoutValues+0x29a>
      (*pcCounter)=(*pcCounter)+1;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d906      	bls.n	8006b08 <SpiritTimerComputeRxTimeoutValues+0x2bc>
    (*pcCounter)--;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <SpiritTimerComputeRxTimeoutValues+0x2c2>
  else
    (*pcCounter)=1;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
}
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b009      	add	sp, #36	; 0x24
 8006b12:	bd90      	pop	{r4, r7, pc}
 8006b14:	01c9c380 	.word	0x01c9c380
 8006b18:	4993b480 	.word	0x4993b480
 8006b1c:	0000fd01 	.word	0x0000fd01

08006b20 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	0002      	movs	r2, r0
 8006b28:	1dfb      	adds	r3, r7, #7
 8006b2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8006b2c:	240c      	movs	r4, #12
 8006b2e:	193b      	adds	r3, r7, r4
 8006b30:	001a      	movs	r2, r3
 8006b32:	2102      	movs	r1, #2
 8006b34:	204f      	movs	r0, #79	; 0x4f
 8006b36:	f000 fdff 	bl	8007738 <RadioSpiReadRegisters>
 8006b3a:	1c03      	adds	r3, r0, #0
 8006b3c:	1c1a      	adds	r2, r3, #0
 8006b3e:	4b22      	ldr	r3, [pc, #136]	; (8006bc8 <SpiritTimerSetRxTimeoutStopCondition+0xa8>)
 8006b40:	b212      	sxth	r2, r2
 8006b42:	1c11      	adds	r1, r2, #0
 8006b44:	7019      	strb	r1, [r3, #0]
 8006b46:	0412      	lsls	r2, r2, #16
 8006b48:	0e12      	lsrs	r2, r2, #24
 8006b4a:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8006b4c:	0020      	movs	r0, r4
 8006b4e:	183b      	adds	r3, r7, r0
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2240      	movs	r2, #64	; 0x40
 8006b54:	4393      	bics	r3, r2
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	183b      	adds	r3, r7, r0
 8006b5a:	701a      	strb	r2, [r3, #0]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8006b5c:	183b      	adds	r3, r7, r0
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b25a      	sxtb	r2, r3
 8006b62:	1dfb      	adds	r3, r7, #7
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	2140      	movs	r1, #64	; 0x40
 8006b6c:	400b      	ands	r3, r1
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	4313      	orrs	r3, r2
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	0001      	movs	r1, r0
 8006b78:	187b      	adds	r3, r7, r1
 8006b7a:	701a      	strb	r2, [r3, #0]

  tempRegValue[1] &= 0x1F;
 8006b7c:	187b      	adds	r3, r7, r1
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	221f      	movs	r2, #31
 8006b82:	4013      	ands	r3, r2
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	187b      	adds	r3, r7, r1
 8006b88:	705a      	strb	r2, [r3, #1]
  tempRegValue[1] |= (xStopCondition << 5);
 8006b8a:	187b      	adds	r3, r7, r1
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	b25a      	sxtb	r2, r3
 8006b90:	1dfb      	adds	r3, r7, #7
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	015b      	lsls	r3, r3, #5
 8006b96:	b25b      	sxtb	r3, r3
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	187b      	adds	r3, r7, r1
 8006ba0:	705a      	strb	r2, [r3, #1]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8006ba2:	187b      	adds	r3, r7, r1
 8006ba4:	001a      	movs	r2, r3
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	204f      	movs	r0, #79	; 0x4f
 8006baa:	f000 fd23 	bl	80075f4 <RadioSpiWriteRegisters>
 8006bae:	1c03      	adds	r3, r0, #0
 8006bb0:	1c1a      	adds	r2, r3, #0
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <SpiritTimerSetRxTimeoutStopCondition+0xa8>)
 8006bb4:	b212      	sxth	r2, r2
 8006bb6:	1c11      	adds	r1, r2, #0
 8006bb8:	7019      	strb	r1, [r3, #0]
 8006bba:	0412      	lsls	r2, r2, #16
 8006bbc:	0e12      	lsrs	r2, r2, #24
 8006bbe:	705a      	strb	r2, [r3, #1]

}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b005      	add	sp, #20
 8006bc6:	bd90      	pop	{r4, r7, pc}
 8006bc8:	20000458 	.word	0x20000458

08006bcc <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8006bd2:	1d3b      	adds	r3, r7, #4
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	20c0      	movs	r0, #192	; 0xc0
 8006bda:	f000 fdad 	bl	8007738 <RadioSpiReadRegisters>
 8006bde:	1c03      	adds	r3, r0, #0
 8006be0:	1c1a      	adds	r2, r3, #0
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <SpiritRefreshStatus+0x4c>)
 8006be4:	b212      	sxth	r2, r2
 8006be6:	1c11      	adds	r1, r2, #0
 8006be8:	7019      	strb	r1, [r3, #0]
 8006bea:	0412      	lsls	r2, r2, #16
 8006bec:	0e12      	lsrs	r2, r2, #24
 8006bee:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8006bf0:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <SpiritRefreshStatus+0x4c>)
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	785b      	ldrb	r3, [r3, #1]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d1ea      	bne.n	8006bd2 <SpiritRefreshStatus+0x6>
 8006bfc:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <SpiritRefreshStatus+0x50>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	001a      	movs	r2, r3
 8006c02:	230f      	movs	r3, #15
 8006c04:	4013      	ands	r3, r2
 8006c06:	1d3a      	adds	r2, r7, #4
 8006c08:	7812      	ldrb	r2, [r2, #0]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d1e1      	bne.n	8006bd2 <SpiritRefreshStatus+0x6>

}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b002      	add	sp, #8
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	20000458 	.word	0x20000458
 8006c1c:	20000459 	.word	0x20000459

08006c20 <Spirit1InterfaceInit>:
* @brief  Read the status register.
* @param  None
* @retval Status
*/
void Spirit1InterfaceInit(void)
{ 
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  /* Initialize the SDN pin micro side */
  RadioGpioInit(RADIO_GPIO_SDN,RADIO_MODE_GPIO_OUT);
 8006c24:	2102      	movs	r1, #2
 8006c26:	2004      	movs	r0, #4
 8006c28:	f000 fa54 	bl	80070d4 <RadioGpioInit>

  SpiritSpiInit();
 8006c2c:	f000 fbda 	bl	80073e4 <RadioSpiInit>
#if defined(SPIRIT1_HAS_EEPROM)
  EepromSpiInitialization();
#endif
     
  /* Board management */   
  SpiritEnterShutdown(); 
 8006c30:	f000 fb42 	bl	80072b8 <RadioEnterShutdown>
  SpiritExitShutdown();   
 8006c34:	f000 fb4a 	bl	80072cc <RadioExitShutdown>
    
  SpiritManagementIdentificationRFBoard();
 8006c38:	f000 f816 	bl	8006c68 <SpiritManagementIdentificationRFBoard>
    
  /* Initialize the signals to drive the range extender application board */
  SpiritManagementRangeExtInit(); 
 8006c3c:	f000 f83c 	bl	8006cb8 <SpiritManagementRangeExtInit>
  
  /* Micro EXTI config */      
  RadioGpioInit(RADIO_GPIO_3,RADIO_MODE_EXTI_IN);
 8006c40:	2101      	movs	r1, #1
 8006c42:	2003      	movs	r0, #3
 8006c44:	f000 fa46 	bl	80070d4 <RadioGpioInit>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,DISABLE); 
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	2003      	movs	r0, #3
 8006c50:	f000 fad8 	bl	8007204 <RadioGpioInterruptCmd>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,ENABLE);
 8006c54:	2301      	movs	r3, #1
 8006c56:	2204      	movs	r2, #4
 8006c58:	2104      	movs	r1, #4
 8006c5a:	2003      	movs	r0, #3
 8006c5c:	f000 fad2 	bl	8007204 <RadioGpioInterruptCmd>
}
 8006c60:	46c0      	nop			; (mov r8, r8)
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <SpiritManagementIdentificationRFBoard>:
* @brief  Identifies the SPIRIT1 Xtal frequency and version.
* @param  None
* @retval Status
*/
void SpiritManagementIdentificationRFBoard(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8006c6e:	1dfb      	adds	r3, r7, #7
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	e006      	b.n	8006c84 <SpiritManagementIdentificationRFBoard+0x1c>
 8006c76:	1dfb      	adds	r3, r7, #7
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	1dfb      	adds	r3, r7, #7
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	1dfb      	adds	r3, r7, #7
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2bff      	cmp	r3, #255	; 0xff
 8006c8c:	d1f3      	bne.n	8006c76 <SpiritManagementIdentificationRFBoard+0xe>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8006c8e:	f7ff ff9d 	bl	8006bcc <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8006c92:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <SpiritManagementIdentificationRFBoard+0x48>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	061b      	lsls	r3, r3, #24
 8006c98:	0e5b      	lsrs	r3, r3, #25
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d1e6      	bne.n	8006c6e <SpiritManagementIdentificationRFBoard+0x6>

    SpiritRadioSetXtalFrequency(XTAL_FREQUENCY);        
 8006ca0:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <SpiritManagementIdentificationRFBoard+0x4c>)
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f7ff fd86 	bl	80067b4 <SpiritRadioSetXtalFrequency>
    //SpiritGeneralSetSpiritVersion(SPIRIT_VERSION); 
}
 8006ca8:	46c0      	nop			; (mov r8, r8)
 8006caa:	46bd      	mov	sp, r7
 8006cac:	b002      	add	sp, #8
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000458 	.word	0x20000458
 8006cb4:	02faf080 	.word	0x02faf080

08006cb8 <SpiritManagementRangeExtInit>:
/**
* @defgroup RANGE_EXT_MANAGEMENT_FUNCTIONS              SDK SPIRIT Management Range Extender Functions
* @{
*/
void SpiritManagementRangeExtInit(void)
{
 8006cb8:	b5b0      	push	{r4, r5, r7, lr}
 8006cba:	b088      	sub	sp, #32
 8006cbc:	af00      	add	r7, sp, #0
  RangeExtType range_type = SpiritManagementGetRangeExtender();
 8006cbe:	251f      	movs	r5, #31
 8006cc0:	197c      	adds	r4, r7, r5
 8006cc2:	f000 f869 	bl	8006d98 <SpiritManagementGetRangeExtender>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	7023      	strb	r3, [r4, #0]
  
  if(range_type==RANGE_EXT_SKYWORKS_169) {
 8006cca:	197b      	adds	r3, r7, r5
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d12d      	bne.n	8006d2e <SpiritManagementRangeExtInit+0x76>
    /* TCXO optimization power consumption */
    SpiritGeneralSetExtRef(MODE_EXT_XIN);
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	f7fd faa0 	bl	8004218 <SpiritGeneralSetExtRef>
    uint8_t tmp = 0x01; SpiritSpiWriteRegisters(0xB6,1,&tmp);
 8006cd8:	1dfb      	adds	r3, r7, #7
 8006cda:	2201      	movs	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	1dfb      	adds	r3, r7, #7
 8006ce0:	001a      	movs	r2, r3
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	20b6      	movs	r0, #182	; 0xb6
 8006ce6:	f000 fc85 	bl	80075f4 <RadioSpiWriteRegisters>
    
    /* CSD control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 8006cea:	2008      	movs	r0, #8
 8006cec:	183b      	adds	r3, r7, r0
 8006cee:	4a25      	ldr	r2, [pc, #148]	; (8006d84 <SpiritManagementRangeExtInit+0xcc>)
 8006cf0:	8811      	ldrh	r1, [r2, #0]
 8006cf2:	8019      	strh	r1, [r3, #0]
 8006cf4:	7892      	ldrb	r2, [r2, #2]
 8006cf6:	709a      	strb	r2, [r3, #2]
 8006cf8:	183b      	adds	r3, r7, r0
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7fd fac4 	bl	8004288 <SpiritGpioInit>
    
    /* CTX/BYP control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 8006d00:	200c      	movs	r0, #12
 8006d02:	183b      	adds	r3, r7, r0
 8006d04:	4a20      	ldr	r2, [pc, #128]	; (8006d88 <SpiritManagementRangeExtInit+0xd0>)
 8006d06:	8811      	ldrh	r1, [r2, #0]
 8006d08:	8019      	strh	r1, [r3, #0]
 8006d0a:	7892      	ldrb	r2, [r2, #2]
 8006d0c:	709a      	strb	r2, [r3, #2]
 8006d0e:	183b      	adds	r3, r7, r0
 8006d10:	0018      	movs	r0, r3
 8006d12:	f7fd fab9 	bl	8004288 <SpiritGpioInit>
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 8006d16:	2010      	movs	r0, #16
 8006d18:	183b      	adds	r3, r7, r0
 8006d1a:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <SpiritManagementRangeExtInit+0xd4>)
 8006d1c:	8811      	ldrh	r1, [r2, #0]
 8006d1e:	8019      	strh	r1, [r3, #0]
 8006d20:	7892      	ldrb	r2, [r2, #2]
 8006d22:	709a      	strb	r2, [r3, #2]
 8006d24:	183b      	adds	r3, r7, r0
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7fd faae 	bl	8004288 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
  }
}
 8006d2c:	e025      	b.n	8006d7a <SpiritManagementRangeExtInit+0xc2>
  else if(range_type==RANGE_EXT_SKYWORKS_868) {   
 8006d2e:	231f      	movs	r3, #31
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d120      	bne.n	8006d7a <SpiritManagementRangeExtInit+0xc2>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 8006d38:	2014      	movs	r0, #20
 8006d3a:	183b      	adds	r3, r7, r0
 8006d3c:	4a11      	ldr	r2, [pc, #68]	; (8006d84 <SpiritManagementRangeExtInit+0xcc>)
 8006d3e:	8811      	ldrh	r1, [r2, #0]
 8006d40:	8019      	strh	r1, [r3, #0]
 8006d42:	7892      	ldrb	r2, [r2, #2]
 8006d44:	709a      	strb	r2, [r3, #2]
 8006d46:	183b      	adds	r3, r7, r0
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f7fd fa9d 	bl	8004288 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 8006d4e:	2018      	movs	r0, #24
 8006d50:	183b      	adds	r3, r7, r0
 8006d52:	4a0f      	ldr	r2, [pc, #60]	; (8006d90 <SpiritManagementRangeExtInit+0xd8>)
 8006d54:	8811      	ldrh	r1, [r2, #0]
 8006d56:	8019      	strh	r1, [r3, #0]
 8006d58:	7892      	ldrb	r2, [r2, #2]
 8006d5a:	709a      	strb	r2, [r3, #2]
 8006d5c:	183b      	adds	r3, r7, r0
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7fd fa92 	bl	8004288 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 8006d64:	201c      	movs	r0, #28
 8006d66:	183b      	adds	r3, r7, r0
 8006d68:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <SpiritManagementRangeExtInit+0xdc>)
 8006d6a:	8811      	ldrh	r1, [r2, #0]
 8006d6c:	8019      	strh	r1, [r3, #0]
 8006d6e:	7892      	ldrb	r2, [r2, #2]
 8006d70:	709a      	strb	r2, [r3, #2]
 8006d72:	183b      	adds	r3, r7, r0
 8006d74:	0018      	movs	r0, r3
 8006d76:	f7fd fa87 	bl	8004288 <SpiritGpioInit>
}
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b008      	add	sp, #32
 8006d80:	bdb0      	pop	{r4, r5, r7, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	0800acf8 	.word	0x0800acf8
 8006d88:	0800acfc 	.word	0x0800acfc
 8006d8c:	0800ad00 	.word	0x0800ad00
 8006d90:	0800ad04 	.word	0x0800ad04
 8006d94:	0800ad08 	.word	0x0800ad08

08006d98 <SpiritManagementGetRangeExtender>:
* @brief  returns the spirit1 range extender type
* @param  None
* @retval RangeExtType
*/
RangeExtType SpiritManagementGetRangeExtender(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  return xRangeExtType;
 8006d9c:	4b02      	ldr	r3, [pc, #8]	; (8006da8 <SpiritManagementGetRangeExtender+0x10>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
}
 8006da0:	0018      	movs	r0, r3
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	46c0      	nop			; (mov r8, r8)
 8006da8:	2000031c 	.word	0x2000031c

08006dac <Spirit1GpioIrqInit>:
* @brief  this function intializes the spirit1 gpio irq for TX and Rx
* @param  None
* @retval None
*/
void Spirit1GpioIrqInit(SGpioInit *pGpioIRQ)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Spirit IRQ config */
  SpiritGpioInit(pGpioIRQ);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	0018      	movs	r0, r3
 8006db8:	f7fd fa66 	bl	8004288 <SpiritGpioInit>
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <Spirit1RadioInit>:
* @brief  this function used to receive RX packet
* @param  None
* @retval None
*/
void Spirit1RadioInit(SRadioInit *pRadioInit)
{    
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Spirit Radio config */
  SpiritRadioInit(pRadioInit);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7fe f936 	bl	8005040 <SpiritRadioInit>

}
 8006dd4:	46c0      	nop			; (mov r8, r8)
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b002      	add	sp, #8
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <Spirit1SetPower>:
* @brief  this function sets the radio power
* @param  uint8_t cIndex, float fPowerdBm
* @retval None
*/
void Spirit1SetPower(uint8_t cIndex, float fPowerdBm)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	0002      	movs	r2, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	1dfb      	adds	r3, r7, #7
 8006de8:	701a      	strb	r2, [r3, #0]
  /* Spirit Radio set power */
  SpiritRadioSetPALeveldBm(cIndex,fPowerdBm);
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	1dfb      	adds	r3, r7, #7
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	1c11      	adds	r1, r2, #0
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7ff fad4 	bl	80063a0 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(cIndex);
 8006df8:	1dfb      	adds	r3, r7, #7
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f7ff fb35 	bl	800646c <SpiritRadioSetPALevelMaxIndex>
}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b002      	add	sp, #8
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <Spirit1PacketConfig>:
* @brief  this function sets the packet configuration according to the protocol used
* @param  None
* @retval None
*/
void Spirit1PacketConfig(void)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	af00      	add	r7, sp, #0
  
  STackProtocolInit();
   
#elif defined(USE_BASIC_PROTOCOL)
  
  BasicProtocolInit();
 8006e0e:	f7fc febb 	bl	8003b88 <BasicProtocolInit>
  
#endif
}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <Spirit1SetPayloadlength>:
* @brief  this function sets the payload length
* @param  uint8_t length
* @retval None
*/
void Spirit1SetPayloadlength(uint8_t length)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	0002      	movs	r2, r0
 8006e20:	1dfb      	adds	r3, r7, #7
 8006e22:	701a      	strb	r2, [r3, #0]
    /* Payload length config */
  SpiritPktStackSetPayloadLength(length);
  
#elif defined(USE_BASIC_PROTOCOL)
  /* payload length config */
  SpiritPktBasicSetPayloadLength(length);
 8006e24:	1dfb      	adds	r3, r7, #7
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f7fd ff8e 	bl	8004d4c <SpiritPktBasicSetPayloadLength>
#endif
}
 8006e30:	46c0      	nop			; (mov r8, r8)
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b002      	add	sp, #8
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <Spirit1SetDestinationAddress>:
* @brief  this function sets the destination address
* @param  uint8_t adress
* @retval None
*/
void Spirit1SetDestinationAddress(uint8_t address)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	0002      	movs	r2, r0
 8006e40:	1dfb      	adds	r3, r7, #7
 8006e42:	701a      	strb	r2, [r3, #0]
#if defined(USE_STack_PROTOCOL)
  /* Destination address */
  SpiritPktStackSetDestinationAddress(address);
#elif defined(USE_BASIC_PROTOCOL)
  /* destination address */
  SpiritPktBasicSetDestinationAddress(address);
 8006e44:	1dfb      	adds	r3, r7, #7
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f7fe f825 	bl	8004e98 <SpiritPktCommonSetDestinationAddress>
#endif
}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b002      	add	sp, #8
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <Spirit1EnableTxIrq>:
* @brief  this function enables the Tx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableTxIrq(void)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrq(TX_DATA_SENT, S_ENABLE); 
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	2004      	movs	r0, #4
 8006e5e:	f7fd fa65 	bl	800432c <SpiritIrq>
#if defined(USE_STack_LLP)
  SpiritIrq(MAX_RE_TX_REACH, S_ENABLE);
#endif  
}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <Spirit1EnableRxIrq>:
* @brief  this function enables the Rx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableRxIrq(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
    /* Spirit IRQs enable */
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	2001      	movs	r0, #1
 8006e70:	f7fd fa5c 	bl	800432c <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE); 
 8006e74:	2101      	movs	r1, #1
 8006e76:	2002      	movs	r0, #2
 8006e78:	f7fd fa58 	bl	800432c <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	059b      	lsls	r3, r3, #22
 8006e80:	2101      	movs	r1, #1
 8006e82:	0018      	movs	r0, r3
 8006e84:	f7fd fa52 	bl	800432c <SpiritIrq>
}
 8006e88:	46c0      	nop			; (mov r8, r8)
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <Spirit1DisableIrq>:
* @brief  this function disable IRQs
* @param  None
* @retval None
*/
void Spirit1DisableIrq(void)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrqDeInit(NULL);
 8006e92:	2000      	movs	r0, #0
 8006e94:	f7fd fa1e 	bl	80042d4 <SpiritIrqDeInit>
}
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <Spirit1SetRxTimeout>:
* @brief  this function set the receive timeout period
* @param  None
* @retval None
*/
void Spirit1SetRxTimeout(float cRxTimeOut)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  if(cRxTimeOut == 0)
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7f9 faed 	bl	8000488 <__aeabi_fcmpeq>
 8006eae:	1e03      	subs	r3, r0, #0
 8006eb0:	d006      	beq.n	8006ec0 <Spirit1SetRxTimeout+0x22>
  {
    /* rx timeout config */
    SET_INFINITE_RX_TIMEOUT();
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f7ff fcae 	bl	8006814 <SpiritTimerSetRxTimeoutCounter>
    SpiritTimerSetRxTimeoutStopCondition(ANY_ABOVE_THRESHOLD);
 8006eb8:	200f      	movs	r0, #15
 8006eba:	f7ff fe31 	bl	8006b20 <SpiritTimerSetRxTimeoutStopCondition>
    /* RX timeout config */
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
    Spirit1EnableSQI();
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
  }
}
 8006ebe:	e008      	b.n	8006ed2 <Spirit1SetRxTimeout+0x34>
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1c18      	adds	r0, r3, #0
 8006ec4:	f7ff fc84 	bl	80067d0 <SpiritTimerSetRxTimeoutMs>
    Spirit1EnableSQI();
 8006ec8:	f000 f813 	bl	8006ef2 <Spirit1EnableSQI>
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
 8006ecc:	2006      	movs	r0, #6
 8006ece:	f7ff fe27 	bl	8006b20 <SpiritTimerSetRxTimeoutStopCondition>
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	b002      	add	sp, #8
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <Spirit1SetRssiTH>:
* @brief  this function sets the RSSI threshold
* @param  int dbmValue
* @retval None
*/
void Spirit1SetRssiTH(int dbmValue)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  SpiritQiSetRssiThresholddBm(dbmValue);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7fe f889 	bl	8004ffc <SpiritQiSetRssiThresholddBm>
}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	46bd      	mov	sp, r7
 8006eee:	b002      	add	sp, #8
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <Spirit1EnableSQI>:
* @brief  this function enables SQI check
* @param  None
* @retval None
*/
void Spirit1EnableSQI(void)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	af00      	add	r7, sp, #0
  /* enable SQI check */
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	f7fe f846 	bl	8004f88 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8006efc:	2001      	movs	r0, #1
 8006efe:	f7fe f801 	bl	8004f04 <SpiritQiSqiCheck>
}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <Spirit1StartRx>:
* @brief  this function starts the RX process
* @param  None
* @retval None
*/
void Spirit1StartRx(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8006f0c:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <Spirit1StartRx+0x28>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	061b      	lsls	r3, r3, #24
 8006f12:	0e5b      	lsrs	r3, r3, #25
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b33      	cmp	r3, #51	; 0x33
 8006f18:	d102      	bne.n	8006f20 <Spirit1StartRx+0x18>
  {
    SpiritCmdStrobeSabort();
 8006f1a:	2067      	movs	r0, #103	; 0x67
 8006f1c:	f7fd f8b0 	bl	8004080 <SpiritCmdStrobeCommand>
  }
  /* RX command */
  SpiritCmdStrobeRx();
 8006f20:	f7fd fd42 	bl	80049a8 <SpiritManagementWaCmdStrobeRx>
 8006f24:	2061      	movs	r0, #97	; 0x61
 8006f26:	f7fd f8ab 	bl	8004080 <SpiritCmdStrobeCommand>
}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000458 	.word	0x20000458

08006f34 <Spirit1GetRxPacket>:
* @brief  this function receives the data
* @param  None
* @retval None
*/
void Spirit1GetRxPacket(uint8_t *buffer, uint8_t *cRxData )
{
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint8_t noofbytes = 0;
 8006f3e:	240f      	movs	r4, #15
 8006f40:	193b      	adds	r3, r7, r4
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
  /* when rx data ready read the number of received bytes */
  *cRxData=SpiritLinearFifoReadNumElementsRxFifo();
 8006f46:	f7fd fabb 	bl	80044c0 <SpiritLinearFifoReadNumElementsRxFifo>
 8006f4a:	0003      	movs	r3, r0
 8006f4c:	001a      	movs	r2, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	701a      	strb	r2, [r3, #0]
  noofbytes = *cRxData;
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	7812      	ldrb	r2, [r2, #0]
 8006f58:	701a      	strb	r2, [r3, #0]
    /* read the RX FIFO */
  SpiritSpiReadLinearFifo(noofbytes, buffer);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	193b      	adds	r3, r7, r4
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	0011      	movs	r1, r2
 8006f62:	0018      	movs	r0, r3
 8006f64:	f000 fdbe 	bl	8007ae4 <RadioSpiReadFifo>
  
  SpiritCmdStrobeFlushRxFifo();
 8006f68:	2071      	movs	r0, #113	; 0x71
 8006f6a:	f7fd f889 	bl	8004080 <SpiritCmdStrobeCommand>
}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b005      	add	sp, #20
 8006f74:	bd90      	pop	{r4, r7, pc}
	...

08006f78 <Spirit1StartTx>:
* @brief  this function starts the TX process
* @param  None
* @retval None
*/
void Spirit1StartTx(uint8_t *buffer, uint8_t size )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	000a      	movs	r2, r1
 8006f82:	1cfb      	adds	r3, r7, #3
 8006f84:	701a      	strb	r2, [r3, #0]
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8006f86:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <Spirit1StartTx+0x6c>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	0e5b      	lsrs	r3, r3, #25
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b33      	cmp	r3, #51	; 0x33
 8006f92:	d102      	bne.n	8006f9a <Spirit1StartTx+0x22>
  {
    SpiritCmdStrobeSabort();
 8006f94:	2067      	movs	r0, #103	; 0x67
 8006f96:	f7fd f873 	bl	8004080 <SpiritCmdStrobeCommand>
  }
  
#ifdef CSMA_ENABLE
  
    /* Enable CSMA */
    SpiritRadioPersistenRx(S_DISABLE);
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f7ff fb0e 	bl	80065bc <SpiritRadioPersistenRx>
    SpiritRadioCsBlanking(S_DISABLE);
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	f7ff fad3 	bl	800654c <SpiritRadioCsBlanking>

    SpiritCsmaInit(&xCsmaInit);
 8006fa6:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <Spirit1StartTx+0x70>)
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f7fd f883 	bl	80040b4 <SpiritCsmaInit>
    SpiritCsma(S_ENABLE);
 8006fae:	2001      	movs	r0, #1
 8006fb0:	f7fd f8f0 	bl	8004194 <SpiritCsma>
    SpiritQiSetRssiThresholddBm(CSMA_RSSI_THRESHOLD);
 8006fb4:	235a      	movs	r3, #90	; 0x5a
 8006fb6:	425b      	negs	r3, r3
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7fe f81f 	bl	8004ffc <SpiritQiSetRssiThresholddBm>
    
#endif 
  
  /* fit the TX FIFO */
  SpiritCmdStrobeFlushTxFifo();
 8006fbe:	2072      	movs	r0, #114	; 0x72
 8006fc0:	f7fd f85e 	bl	8004080 <SpiritCmdStrobeCommand>
  
  SpiritSpiWriteLinearFifo(size, buffer);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	1cfb      	adds	r3, r7, #3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	0011      	movs	r1, r2
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f000 fceb 	bl	80079a8 <RadioSpiWriteFifo>
  
  /* send the TX command */
  SpiritCmdStrobeTx();
 8006fd2:	f7fd fcaf 	bl	8004934 <SpiritManagementWaCmdStrobeTx>
 8006fd6:	2060      	movs	r0, #96	; 0x60
 8006fd8:	f7fd f852 	bl	8004080 <SpiritCmdStrobeCommand>
}
 8006fdc:	46c0      	nop			; (mov r8, r8)
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	b002      	add	sp, #8
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000458 	.word	0x20000458
 8006fe8:	2000007c 	.word	0x2000007c

08006fec <Spirit1ClearIRQ>:
* @brief  this function clear the IRQ status
* @param  None
* @retval None
*/
void Spirit1ClearIRQ(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  SpiritIrqClearStatus();
 8006ff0:	f7fd fa4e 	bl	8004490 <SpiritIrqClearStatus>
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af00      	add	r7, sp, #0
 8007002:	0002      	movs	r2, r0
 8007004:	1dfb      	adds	r3, r7, #7
 8007006:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8007008:	1dfb      	adds	r3, r7, #7
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10b      	bne.n	8007028 <BSP_LED_Init+0x2c>
 8007010:	4b18      	ldr	r3, [pc, #96]	; (8007074 <BSP_LED_Init+0x78>)
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	4b17      	ldr	r3, [pc, #92]	; (8007074 <BSP_LED_Init+0x78>)
 8007016:	2101      	movs	r1, #1
 8007018:	430a      	orrs	r2, r1
 800701a:	62da      	str	r2, [r3, #44]	; 0x2c
 800701c:	4b15      	ldr	r3, [pc, #84]	; (8007074 <BSP_LED_Init+0x78>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	2201      	movs	r2, #1
 8007022:	4013      	ands	r3, r2
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 8007028:	2320      	movs	r3, #32
 800702a:	001a      	movs	r2, r3
 800702c:	210c      	movs	r1, #12
 800702e:	187b      	adds	r3, r7, r1
 8007030:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007032:	187b      	adds	r3, r7, r1
 8007034:	2201      	movs	r2, #1
 8007036:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8007038:	187b      	adds	r3, r7, r1
 800703a:	2200      	movs	r2, #0
 800703c:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800703e:	187b      	adds	r3, r7, r1
 8007040:	2203      	movs	r2, #3
 8007042:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8007044:	1dfb      	adds	r3, r7, #7
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <BSP_LED_Init+0x7c>)
 800704a:	0092      	lsls	r2, r2, #2
 800704c:	58d3      	ldr	r3, [r2, r3]
 800704e:	187a      	adds	r2, r7, r1
 8007050:	0011      	movs	r1, r2
 8007052:	0018      	movs	r0, r3
 8007054:	f000 ff70 	bl	8007f38 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8007058:	1dfb      	adds	r3, r7, #7
 800705a:	781a      	ldrb	r2, [r3, #0]
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <BSP_LED_Init+0x7c>)
 800705e:	0092      	lsls	r2, r2, #2
 8007060:	58d3      	ldr	r3, [r2, r3]
 8007062:	2120      	movs	r1, #32
 8007064:	2200      	movs	r2, #0
 8007066:	0018      	movs	r0, r3
 8007068:	f001 f8dc 	bl	8008224 <HAL_GPIO_WritePin>
}
 800706c:	46c0      	nop			; (mov r8, r8)
 800706e:	46bd      	mov	sp, r7
 8007070:	b008      	add	sp, #32
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40021000 	.word	0x40021000
 8007078:	20000184 	.word	0x20000184

0800707c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	0002      	movs	r2, r0
 8007084:	1dfb      	adds	r3, r7, #7
 8007086:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8007088:	1dfb      	adds	r3, r7, #7
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <BSP_LED_Off+0x28>)
 800708e:	0092      	lsls	r2, r2, #2
 8007090:	58d3      	ldr	r3, [r2, r3]
 8007092:	2120      	movs	r1, #32
 8007094:	2200      	movs	r2, #0
 8007096:	0018      	movs	r0, r3
 8007098:	f001 f8c4 	bl	8008224 <HAL_GPIO_WritePin>
}
 800709c:	46c0      	nop			; (mov r8, r8)
 800709e:	46bd      	mov	sp, r7
 80070a0:	b002      	add	sp, #8
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000184 	.word	0x20000184

080070a8 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	0002      	movs	r2, r0
 80070b0:	1dfb      	adds	r3, r7, #7
 80070b2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80070b4:	1dfb      	adds	r3, r7, #7
 80070b6:	781a      	ldrb	r2, [r3, #0]
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <BSP_LED_Toggle+0x28>)
 80070ba:	0092      	lsls	r2, r2, #2
 80070bc:	58d3      	ldr	r3, [r2, r3]
 80070be:	2220      	movs	r2, #32
 80070c0:	0011      	movs	r1, r2
 80070c2:	0018      	movs	r0, r3
 80070c4:	f001 f8cb 	bl	800825e <HAL_GPIO_TogglePin>
}
 80070c8:	46c0      	nop			; (mov r8, r8)
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b002      	add	sp, #8
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000184 	.word	0x20000184

080070d4 <RadioGpioInit>:
*         @arg RADIO_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
*         generation capability.
* @retval None.
*/
void RadioGpioInit(RadioGpioPin xGpio, RadioGpioMode xGpioMode)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	0002      	movs	r2, r0
 80070dc:	1dfb      	adds	r3, r7, #7
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	1dbb      	adds	r3, r7, #6
 80070e2:	1c0a      	adds	r2, r1, #0
 80070e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RADIO_GPIO_PIN(xGpio));
  assert_param(IS_RADIO_GPIO_MODE(xGpioMode));
  
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 80070e6:	4b41      	ldr	r3, [pc, #260]	; (80071ec <RadioGpioInit+0x118>)
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	4b40      	ldr	r3, [pc, #256]	; (80071ec <RadioGpioInit+0x118>)
 80070ec:	2101      	movs	r1, #1
 80070ee:	430a      	orrs	r2, r1
 80070f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80070f2:	4b3e      	ldr	r3, [pc, #248]	; (80071ec <RadioGpioInit+0x118>)
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	2201      	movs	r2, #1
 80070f8:	4013      	ands	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	693b      	ldr	r3, [r7, #16]
  __GPIOC_CLK_ENABLE();
 80070fe:	4b3b      	ldr	r3, [pc, #236]	; (80071ec <RadioGpioInit+0x118>)
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	4b3a      	ldr	r3, [pc, #232]	; (80071ec <RadioGpioInit+0x118>)
 8007104:	2104      	movs	r1, #4
 8007106:	430a      	orrs	r2, r1
 8007108:	62da      	str	r2, [r3, #44]	; 0x2c
 800710a:	4b38      	ldr	r3, [pc, #224]	; (80071ec <RadioGpioInit+0x118>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	2204      	movs	r2, #4
 8007110:	4013      	ands	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 8007116:	4b35      	ldr	r3, [pc, #212]	; (80071ec <RadioGpioInit+0x118>)
 8007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711a:	4b34      	ldr	r3, [pc, #208]	; (80071ec <RadioGpioInit+0x118>)
 800711c:	2102      	movs	r1, #2
 800711e:	430a      	orrs	r2, r1
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c
 8007122:	4b32      	ldr	r3, [pc, #200]	; (80071ec <RadioGpioInit+0x118>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	2202      	movs	r2, #2
 8007128:	4013      	ands	r3, r2
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
  
  /* Configures MCU GPIO */
  if (xGpioMode == RADIO_MODE_GPIO_OUT)
 800712e:	1dbb      	adds	r3, r7, #6
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d104      	bne.n	8007140 <RadioGpioInit+0x6c>
  {
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007136:	2314      	movs	r3, #20
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	2201      	movs	r2, #1
 800713c:	605a      	str	r2, [r3, #4]
 800713e:	e003      	b.n	8007148 <RadioGpioInit+0x74>
  }
  else
  {
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007140:	2314      	movs	r3, #20
 8007142:	18fb      	adds	r3, r7, r3
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]
  }
  
  GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8007148:	1dfb      	adds	r3, r7, #7
 800714a:	781a      	ldrb	r2, [r3, #0]
 800714c:	4b28      	ldr	r3, [pc, #160]	; (80071f0 <RadioGpioInit+0x11c>)
 800714e:	0052      	lsls	r2, r2, #1
 8007150:	5ad3      	ldrh	r3, [r2, r3]
 8007152:	001a      	movs	r2, r3
 8007154:	2114      	movs	r1, #20
 8007156:	187b      	adds	r3, r7, r1
 8007158:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 800715a:	1dfb      	adds	r3, r7, #7
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	4b25      	ldr	r3, [pc, #148]	; (80071f4 <RadioGpioInit+0x120>)
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	58d2      	ldr	r2, [r2, r3]
 8007164:	187b      	adds	r3, r7, r1
 8007166:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8007168:	1dfb      	adds	r3, r7, #7
 800716a:	781a      	ldrb	r2, [r3, #0]
 800716c:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <RadioGpioInit+0x124>)
 800716e:	0092      	lsls	r2, r2, #2
 8007170:	58d2      	ldr	r2, [r2, r3]
 8007172:	187b      	adds	r3, r7, r1
 8007174:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8007176:	1dfb      	adds	r3, r7, #7
 8007178:	781a      	ldrb	r2, [r3, #0]
 800717a:	4b20      	ldr	r3, [pc, #128]	; (80071fc <RadioGpioInit+0x128>)
 800717c:	0092      	lsls	r2, r2, #2
 800717e:	58d3      	ldr	r3, [r2, r3]
 8007180:	187a      	adds	r2, r7, r1
 8007182:	0011      	movs	r1, r2
 8007184:	0018      	movs	r0, r3
 8007186:	f000 fed7 	bl	8007f38 <HAL_GPIO_Init>
  
  if (xGpioMode == RADIO_MODE_EXTI_IN)
 800718a:	1dbb      	adds	r3, r7, #6
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d127      	bne.n	80071e2 <RadioGpioInit+0x10e>
  {
    GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8007192:	1dfb      	adds	r3, r7, #7
 8007194:	781a      	ldrb	r2, [r3, #0]
 8007196:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <RadioGpioInit+0x11c>)
 8007198:	0052      	lsls	r2, r2, #1
 800719a:	5ad3      	ldrh	r3, [r2, r3]
 800719c:	001a      	movs	r2, r3
 800719e:	2114      	movs	r1, #20
 80071a0:	187b      	adds	r3, r7, r1
 80071a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 80071a4:	1dfb      	adds	r3, r7, #7
 80071a6:	781a      	ldrb	r2, [r3, #0]
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <RadioGpioInit+0x120>)
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	58d2      	ldr	r2, [r2, r3]
 80071ae:	187b      	adds	r3, r7, r1
 80071b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 80071b2:	1dfb      	adds	r3, r7, #7
 80071b4:	781a      	ldrb	r2, [r3, #0]
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <RadioGpioInit+0x124>)
 80071b8:	0092      	lsls	r2, r2, #2
 80071ba:	58d2      	ldr	r2, [r2, r3]
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Mode = aRADIO_GPIO_EXTI_MODE[xGpio];
 80071c0:	1dfb      	adds	r3, r7, #7
 80071c2:	781a      	ldrb	r2, [r3, #0]
 80071c4:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <RadioGpioInit+0x12c>)
 80071c6:	0092      	lsls	r2, r2, #2
 80071c8:	58d2      	ldr	r2, [r2, r3]
 80071ca:	187b      	adds	r3, r7, r1
 80071cc:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 80071ce:	1dfb      	adds	r3, r7, #7
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <RadioGpioInit+0x128>)
 80071d4:	0092      	lsls	r2, r2, #2
 80071d6:	58d3      	ldr	r3, [r2, r3]
 80071d8:	187a      	adds	r2, r7, r1
 80071da:	0011      	movs	r1, r2
 80071dc:	0018      	movs	r0, r3
 80071de:	f000 feab 	bl	8007f38 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    /*  NVIC_SetPriority((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]), 0x02); */
    /*  HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));     */
  } 
}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b00a      	add	sp, #40	; 0x28
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	40021000 	.word	0x40021000
 80071f0:	0800afcc 	.word	0x0800afcc
 80071f4:	0800afec 	.word	0x0800afec
 80071f8:	0800afd8 	.word	0x0800afd8
 80071fc:	20000188 	.word	0x20000188
 8007200:	0800b000 	.word	0x0800b000

08007204 <RadioGpioInterruptCmd>:
*         @arg ENABLE: Interrupt is enabled
*         @arg DISABLE: Interrupt is disabled
* @retval None.
*/
void RadioGpioInterruptCmd(RadioGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, FunctionalState xNewState)
{
 8007204:	b5b0      	push	{r4, r5, r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	0005      	movs	r5, r0
 800720c:	000c      	movs	r4, r1
 800720e:	0010      	movs	r0, r2
 8007210:	0019      	movs	r1, r3
 8007212:	1dfb      	adds	r3, r7, #7
 8007214:	1c2a      	adds	r2, r5, #0
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	1dbb      	adds	r3, r7, #6
 800721a:	1c22      	adds	r2, r4, #0
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	1d7b      	adds	r3, r7, #5
 8007220:	1c02      	adds	r2, r0, #0
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	1d3b      	adds	r3, r7, #4
 8007226:	1c0a      	adds	r2, r1, #0
 8007228:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriority((IRQn_Type) (aRADIO_GPIO_IRQn[xGpio]), nPreemption, nSubpriority);
 800722a:	1dfb      	adds	r3, r7, #7
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	4a11      	ldr	r2, [pc, #68]	; (8007274 <RadioGpioInterruptCmd+0x70>)
 8007230:	5cd3      	ldrb	r3, [r2, r3]
 8007232:	b258      	sxtb	r0, r3
 8007234:	1dbb      	adds	r3, r7, #6
 8007236:	7819      	ldrb	r1, [r3, #0]
 8007238:	1d7b      	adds	r3, r7, #5
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	001a      	movs	r2, r3
 800723e:	f000 fe39 	bl	8007eb4 <HAL_NVIC_SetPriority>
  if (!xNewState)
 8007242:	1d3b      	adds	r3, r7, #4
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d108      	bne.n	800725c <RadioGpioInterruptCmd+0x58>
  {
    HAL_NVIC_DisableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio])); 
 800724a:	1dfb      	adds	r3, r7, #7
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	4a09      	ldr	r2, [pc, #36]	; (8007274 <RadioGpioInterruptCmd+0x70>)
 8007250:	5cd3      	ldrb	r3, [r2, r3]
 8007252:	b25b      	sxtb	r3, r3
 8007254:	0018      	movs	r0, r3
 8007256:	f000 fe52 	bl	8007efe <HAL_NVIC_DisableIRQ>
  }
  else
  {
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
  }
}
 800725a:	e007      	b.n	800726c <RadioGpioInterruptCmd+0x68>
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
 800725c:	1dfb      	adds	r3, r7, #7
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	4a04      	ldr	r2, [pc, #16]	; (8007274 <RadioGpioInterruptCmd+0x70>)
 8007262:	5cd3      	ldrb	r3, [r2, r3]
 8007264:	b25b      	sxtb	r3, r3
 8007266:	0018      	movs	r0, r3
 8007268:	f000 fe39 	bl	8007ede <HAL_NVIC_EnableIRQ>
}
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	46bd      	mov	sp, r7
 8007270:	b002      	add	sp, #8
 8007272:	bdb0      	pop	{r4, r5, r7, pc}
 8007274:	0800b010 	.word	0x0800b010

08007278 <RadioGpioSetLevel>:
* @param  GPIO_PinState Level of the GPIO. This parameter can be:
*         GPIO_PIN_SET or GPIO_PIN_RESET.
* @retval None.
*/
void RadioGpioSetLevel(RadioGpioPin xGpio, GPIO_PinState xState)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	0002      	movs	r2, r0
 8007280:	1dfb      	adds	r3, r7, #7
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	1dbb      	adds	r3, r7, #6
 8007286:	1c0a      	adds	r2, r1, #0
 8007288:	701a      	strb	r2, [r3, #0]
  /* Sets the GPIO level */
  HAL_GPIO_WritePin(aRADIO_GPIO_PORT[xGpio], aRADIO_GPIO_PIN[xGpio], xState); 
 800728a:	1dfb      	adds	r3, r7, #7
 800728c:	781a      	ldrb	r2, [r3, #0]
 800728e:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <RadioGpioSetLevel+0x38>)
 8007290:	0092      	lsls	r2, r2, #2
 8007292:	58d0      	ldr	r0, [r2, r3]
 8007294:	1dfb      	adds	r3, r7, #7
 8007296:	781a      	ldrb	r2, [r3, #0]
 8007298:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <RadioGpioSetLevel+0x3c>)
 800729a:	0052      	lsls	r2, r2, #1
 800729c:	5ad1      	ldrh	r1, [r2, r3]
 800729e:	1dbb      	adds	r3, r7, #6
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	001a      	movs	r2, r3
 80072a4:	f000 ffbe 	bl	8008224 <HAL_GPIO_WritePin>
}
 80072a8:	46c0      	nop			; (mov r8, r8)
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b002      	add	sp, #8
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000188 	.word	0x20000188
 80072b4:	0800afcc 	.word	0x0800afcc

080072b8 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  /* Check the parameters */ 
  RadioGpioSetLevel(RADIO_GPIO_SDN, GPIO_PIN_SET);
 80072bc:	2101      	movs	r1, #1
 80072be:	2004      	movs	r0, #4
 80072c0:	f7ff ffda 	bl	8007278 <RadioGpioSetLevel>
}
 80072c4:	46c0      	nop			; (mov r8, r8)
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  RadioGpioSetLevel(RADIO_GPIO_SDN, GPIO_PIN_RESET);
 80072d2:	2100      	movs	r1, #0
 80072d4:	2004      	movs	r0, #4
 80072d6:	f7ff ffcf 	bl	8007278 <RadioGpioSetLevel>
  
  /* Delay to allow the circuit POR, about 700 us */
  for (volatile uint32_t Index = 0; Index < POR_TIME; Index++);
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	e002      	b.n	80072e6 <RadioExitShutdown+0x1a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3301      	adds	r3, #1
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a03      	ldr	r2, [pc, #12]	; (80072f8 <RadioExitShutdown+0x2c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d9f8      	bls.n	80072e0 <RadioExitShutdown+0x14>
}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b002      	add	sp, #8
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	00001dff 	.word	0x00001dff

080072fc <RadioShieldLedInit>:
*   This parameter can be one of the following values:
* @arg    Led_t Led
* @retval None
*/
void RadioShieldLedInit(Led_t Led)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	0002      	movs	r2, r0
 8007304:	1dfb      	adds	r3, r7, #7
 8007306:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  RADIO_SHIELD_LED_GPIO_CLK_ENABLE();
 8007308:	4b13      	ldr	r3, [pc, #76]	; (8007358 <RadioShieldLedInit+0x5c>)
 800730a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <RadioShieldLedInit+0x5c>)
 800730e:	2102      	movs	r1, #2
 8007310:	430a      	orrs	r2, r1
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <RadioShieldLedInit+0x5c>)
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	2202      	movs	r2, #2
 800731a:	4013      	ands	r3, r2
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = aLED_GPIO_PIN[Led];
 8007320:	2310      	movs	r3, #16
 8007322:	001a      	movs	r2, r3
 8007324:	210c      	movs	r1, #12
 8007326:	187b      	adds	r3, r7, r1
 8007328:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800732a:	187b      	adds	r3, r7, r1
 800732c:	2201      	movs	r2, #1
 800732e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007330:	187b      	adds	r3, r7, r1
 8007332:	2201      	movs	r2, #1
 8007334:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007336:	187b      	adds	r3, r7, r1
 8007338:	2203      	movs	r2, #3
 800733a:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(aLED_GPIO_PORT[Led], &GPIO_InitStruct);
 800733c:	1dfb      	adds	r3, r7, #7
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <RadioShieldLedInit+0x60>)
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	58d3      	ldr	r3, [r2, r3]
 8007346:	187a      	adds	r2, r7, r1
 8007348:	0011      	movs	r1, r2
 800734a:	0018      	movs	r0, r3
 800734c:	f000 fdf4 	bl	8007f38 <HAL_GPIO_Init>
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	b008      	add	sp, #32
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40021000 	.word	0x40021000
 800735c:	2000019c 	.word	0x2000019c

08007360 <RadioShieldLedOn>:
*   This parameter can be one of following parameters:
* @arg  Led_t Led
* @retval None
*/
void RadioShieldLedOn(Led_t Led)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	0002      	movs	r2, r0
 8007368:	1dfb      	adds	r3, r7, #7
 800736a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_SET); 
 800736c:	1dfb      	adds	r3, r7, #7
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	4b05      	ldr	r3, [pc, #20]	; (8007388 <RadioShieldLedOn+0x28>)
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	58d3      	ldr	r3, [r2, r3]
 8007376:	2110      	movs	r1, #16
 8007378:	2201      	movs	r2, #1
 800737a:	0018      	movs	r0, r3
 800737c:	f000 ff52 	bl	8008224 <HAL_GPIO_WritePin>
}
 8007380:	46c0      	nop			; (mov r8, r8)
 8007382:	46bd      	mov	sp, r7
 8007384:	b002      	add	sp, #8
 8007386:	bd80      	pop	{r7, pc}
 8007388:	2000019c 	.word	0x2000019c

0800738c <RadioShieldLedOff>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedOff(Led_t Led)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	0002      	movs	r2, r0
 8007394:	1dfb      	adds	r3, r7, #7
 8007396:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_RESET); 
 8007398:	1dfb      	adds	r3, r7, #7
 800739a:	781a      	ldrb	r2, [r3, #0]
 800739c:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <RadioShieldLedOff+0x28>)
 800739e:	0092      	lsls	r2, r2, #2
 80073a0:	58d3      	ldr	r3, [r2, r3]
 80073a2:	2110      	movs	r1, #16
 80073a4:	2200      	movs	r2, #0
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 ff3c 	bl	8008224 <HAL_GPIO_WritePin>
}
 80073ac:	46c0      	nop			; (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b002      	add	sp, #8
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	2000019c 	.word	0x2000019c

080073b8 <RadioShieldLedToggle>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedToggle(Led_t Led)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	0002      	movs	r2, r0
 80073c0:	1dfb      	adds	r3, r7, #7
 80073c2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led]);
 80073c4:	1dfb      	adds	r3, r7, #7
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <RadioShieldLedToggle+0x28>)
 80073ca:	0092      	lsls	r2, r2, #2
 80073cc:	58d3      	ldr	r3, [r2, r3]
 80073ce:	2210      	movs	r2, #16
 80073d0:	0011      	movs	r1, r2
 80073d2:	0018      	movs	r0, r3
 80073d4:	f000 ff43 	bl	800825e <HAL_GPIO_TogglePin>
}
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	46bd      	mov	sp, r7
 80073dc:	b002      	add	sp, #8
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	2000019c 	.word	0x2000019c

080073e4 <RadioSpiInit>:
* @brief  Initializes SPI HAL.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&pSpiHandle) == HAL_SPI_STATE_RESET)
 80073e8:	4b19      	ldr	r3, [pc, #100]	; (8007450 <RadioSpiInit+0x6c>)
 80073ea:	0018      	movs	r0, r3
 80073ec:	f002 fad4 	bl	8009998 <HAL_SPI_GetState>
 80073f0:	1e03      	subs	r3, r0, #0
 80073f2:	d129      	bne.n	8007448 <RadioSpiInit+0x64>
  {
    /* SPI Config */
    pSpiHandle.Instance               = RADIO_SPI;
 80073f4:	4b16      	ldr	r3, [pc, #88]	; (8007450 <RadioSpiInit+0x6c>)
 80073f6:	4a17      	ldr	r2, [pc, #92]	; (8007454 <RadioSpiInit+0x70>)
 80073f8:	601a      	str	r2, [r3, #0]
    pSpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <RadioSpiInit+0x6c>)
 80073fc:	2208      	movs	r2, #8
 80073fe:	61da      	str	r2, [r3, #28]
    pSpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <RadioSpiInit+0x6c>)
 8007402:	2200      	movs	r2, #0
 8007404:	609a      	str	r2, [r3, #8]
    pSpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8007406:	4b12      	ldr	r3, [pc, #72]	; (8007450 <RadioSpiInit+0x6c>)
 8007408:	2200      	movs	r2, #0
 800740a:	615a      	str	r2, [r3, #20]
    pSpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800740c:	4b10      	ldr	r3, [pc, #64]	; (8007450 <RadioSpiInit+0x6c>)
 800740e:	2200      	movs	r2, #0
 8007410:	611a      	str	r2, [r3, #16]
    pSpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8007412:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <RadioSpiInit+0x6c>)
 8007414:	2200      	movs	r2, #0
 8007416:	629a      	str	r2, [r3, #40]	; 0x28
    pSpiHandle.Init.CRCPolynomial     = 7;
 8007418:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <RadioSpiInit+0x6c>)
 800741a:	2207      	movs	r2, #7
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c
    pSpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <RadioSpiInit+0x6c>)
 8007420:	2200      	movs	r2, #0
 8007422:	60da      	str	r2, [r3, #12]
    pSpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <RadioSpiInit+0x6c>)
 8007426:	2200      	movs	r2, #0
 8007428:	621a      	str	r2, [r3, #32]
    pSpiHandle.Init.NSS               = SPI_NSS_SOFT;       
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <RadioSpiInit+0x6c>)
 800742c:	2280      	movs	r2, #128	; 0x80
 800742e:	0092      	lsls	r2, r2, #2
 8007430:	619a      	str	r2, [r3, #24]
    pSpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <RadioSpiInit+0x6c>)
 8007434:	2200      	movs	r2, #0
 8007436:	625a      	str	r2, [r3, #36]	; 0x24
    pSpiHandle.Init.Mode              = SPI_MODE_MASTER;
 8007438:	4b05      	ldr	r3, [pc, #20]	; (8007450 <RadioSpiInit+0x6c>)
 800743a:	2282      	movs	r2, #130	; 0x82
 800743c:	0052      	lsls	r2, r2, #1
 800743e:	605a      	str	r2, [r3, #4]
    
    //HAL_SPI_MspInit(&pSpiHandle);
    HAL_SPI_Init(&pSpiHandle);
 8007440:	4b03      	ldr	r3, [pc, #12]	; (8007450 <RadioSpiInit+0x6c>)
 8007442:	0018      	movs	r0, r3
 8007444:	f001 fe42 	bl	80090cc <HAL_SPI_Init>
  }
}
 8007448:	46c0      	nop			; (mov r8, r8)
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	2000045c 	.word	0x2000045c
 8007454:	40013000 	.word	0x40013000

08007458 <HAL_SPI_MspInit>:
* @brief  Initializes SPI MSP.
* @param  SPI_HandleTypeDef* pSpiHandle
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* pSpiHandle)
{
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b08d      	sub	sp, #52	; 0x34
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_InitStruct;
  if (pSpiHandle->Instance==RADIO_SPI)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a43      	ldr	r2, [pc, #268]	; (8007574 <HAL_SPI_MspInit+0x11c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d17f      	bne.n	800756a <HAL_SPI_MspInit+0x112>
  {
    /*** Configure the GPIOs ***/  
    /* Enable GPIO clock */
    RADIO_SPI_SCLK_CLK_ENABLE();
 800746a:	4b43      	ldr	r3, [pc, #268]	; (8007578 <HAL_SPI_MspInit+0x120>)
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	4b42      	ldr	r3, [pc, #264]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007470:	2102      	movs	r1, #2
 8007472:	430a      	orrs	r2, r1
 8007474:	62da      	str	r2, [r3, #44]	; 0x2c
 8007476:	4b40      	ldr	r3, [pc, #256]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	2202      	movs	r2, #2
 800747c:	4013      	ands	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	69bb      	ldr	r3, [r7, #24]
    RADIO_SPI_MISO_CLK_ENABLE();
 8007482:	4b3d      	ldr	r3, [pc, #244]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	4b3c      	ldr	r3, [pc, #240]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007488:	2101      	movs	r1, #1
 800748a:	430a      	orrs	r2, r1
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c
 800748e:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	2201      	movs	r2, #1
 8007494:	4013      	ands	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	697b      	ldr	r3, [r7, #20]
    RADIO_SPI_MOSI_CLOCK_ENABLE();
 800749a:	4b37      	ldr	r3, [pc, #220]	; (8007578 <HAL_SPI_MspInit+0x120>)
 800749c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749e:	4b36      	ldr	r3, [pc, #216]	; (8007578 <HAL_SPI_MspInit+0x120>)
 80074a0:	2101      	movs	r1, #1
 80074a2:	430a      	orrs	r2, r1
 80074a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80074a6:	4b34      	ldr	r3, [pc, #208]	; (8007578 <HAL_SPI_MspInit+0x120>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	2201      	movs	r2, #1
 80074ac:	4013      	ands	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	693b      	ldr	r3, [r7, #16]
    
    /**SPI1 GPIO Configuration */   
    
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074b2:	241c      	movs	r4, #28
 80074b4:	193b      	adds	r3, r7, r4
 80074b6:	2202      	movs	r2, #2
 80074b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074ba:	193b      	adds	r3, r7, r4
 80074bc:	2201      	movs	r2, #1
 80074be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80074c0:	193b      	adds	r3, r7, r4
 80074c2:	2203      	movs	r2, #3
 80074c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = RADIO_SPI_SCK_AF;
 80074c6:	193b      	adds	r3, r7, r4
 80074c8:	2200      	movs	r2, #0
 80074ca:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Pin = RADIO_SPI_SCK_PIN;
 80074cc:	193b      	adds	r3, r7, r4
 80074ce:	2208      	movs	r2, #8
 80074d0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_SPI_SCK_PORT, &GPIO_InitStruct);
 80074d2:	193b      	adds	r3, r7, r4
 80074d4:	4a29      	ldr	r2, [pc, #164]	; (800757c <HAL_SPI_MspInit+0x124>)
 80074d6:	0019      	movs	r1, r3
 80074d8:	0010      	movs	r0, r2
 80074da:	f000 fd2d 	bl	8007f38 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074de:	193b      	adds	r3, r7, r4
 80074e0:	2202      	movs	r2, #2
 80074e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074e4:	193b      	adds	r3, r7, r4
 80074e6:	2202      	movs	r2, #2
 80074e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80074ea:	193b      	adds	r3, r7, r4
 80074ec:	2203      	movs	r2, #3
 80074ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = RADIO_SPI_MISO_AF;
 80074f0:	193b      	adds	r3, r7, r4
 80074f2:	2200      	movs	r2, #0
 80074f4:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Pin = RADIO_SPI_MISO_PIN;
 80074f6:	193b      	adds	r3, r7, r4
 80074f8:	2240      	movs	r2, #64	; 0x40
 80074fa:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_SPI_MISO_PORT, &GPIO_InitStruct);
 80074fc:	193a      	adds	r2, r7, r4
 80074fe:	23a0      	movs	r3, #160	; 0xa0
 8007500:	05db      	lsls	r3, r3, #23
 8007502:	0011      	movs	r1, r2
 8007504:	0018      	movs	r0, r3
 8007506:	f000 fd17 	bl	8007f38 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = RADIO_SPI_MOSI_PIN;
 800750a:	193b      	adds	r3, r7, r4
 800750c:	2280      	movs	r2, #128	; 0x80
 800750e:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_SPI_MOSI_PORT, &GPIO_InitStruct); 
 8007510:	193a      	adds	r2, r7, r4
 8007512:	23a0      	movs	r3, #160	; 0xa0
 8007514:	05db      	lsls	r3, r3, #23
 8007516:	0011      	movs	r1, r2
 8007518:	0018      	movs	r0, r3
 800751a:	f000 fd0d 	bl	8007f38 <HAL_GPIO_Init>
    
    RADIO_SPI_CS_CLOCK_ENABLE();
 800751e:	4b16      	ldr	r3, [pc, #88]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007524:	2102      	movs	r1, #2
 8007526:	430a      	orrs	r2, r1
 8007528:	62da      	str	r2, [r3, #44]	; 0x2c
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <HAL_SPI_MspInit+0x120>)
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	2202      	movs	r2, #2
 8007530:	4013      	ands	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]
    
    /* Configure SPI pin: CS */
    GPIO_InitStruct.Pin = RADIO_SPI_CS_PIN;
 8007536:	0021      	movs	r1, r4
 8007538:	187b      	adds	r3, r7, r1
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800753e:	187b      	adds	r3, r7, r1
 8007540:	2201      	movs	r2, #1
 8007542:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007544:	187b      	adds	r3, r7, r1
 8007546:	2201      	movs	r2, #1
 8007548:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800754a:	187b      	adds	r3, r7, r1
 800754c:	2203      	movs	r2, #3
 800754e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(RADIO_SPI_CS_PORT, &GPIO_InitStruct);
 8007550:	187b      	adds	r3, r7, r1
 8007552:	4a0a      	ldr	r2, [pc, #40]	; (800757c <HAL_SPI_MspInit+0x124>)
 8007554:	0019      	movs	r1, r3
 8007556:	0010      	movs	r0, r2
 8007558:	f000 fcee 	bl	8007f38 <HAL_GPIO_Init>
    
    RADIO_SPI_CLK_ENABLE();
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <HAL_SPI_MspInit+0x120>)
 800755e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <HAL_SPI_MspInit+0x120>)
 8007562:	2180      	movs	r1, #128	; 0x80
 8007564:	0149      	lsls	r1, r1, #5
 8007566:	430a      	orrs	r2, r1
 8007568:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	46bd      	mov	sp, r7
 800756e:	b00d      	add	sp, #52	; 0x34
 8007570:	bd90      	pop	{r4, r7, pc}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	40013000 	.word	0x40013000
 8007578:	40021000 	.word	0x40021000
 800757c:	50000400 	.word	0x50000400

08007580 <SPI_Write>:
* @brief  SPI Write a byte to device
* @param  Value: value to be written
* @retval None
*/
static void SPI_Write(uint8_t Value)
{
 8007580:	b5b0      	push	{r4, r5, r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	0002      	movs	r2, r0
 8007588:	1dfb      	adds	r3, r7, #7
 800758a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758c:	230f      	movs	r3, #15
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
  
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8007594:	46c0      	nop			; (mov r8, r8)
 8007596:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <SPI_Write+0x50>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2202      	movs	r2, #2
 800759e:	4013      	ands	r3, r2
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d1f8      	bne.n	8007596 <SPI_Write+0x16>
  status = HAL_SPI_Transmit(&pSpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <SPI_Write+0x54>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	250f      	movs	r5, #15
 80075aa:	197c      	adds	r4, r7, r5
 80075ac:	1df9      	adds	r1, r7, #7
 80075ae:	4808      	ldr	r0, [pc, #32]	; (80075d0 <SPI_Write+0x50>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	f001 fe29 	bl	8009208 <HAL_SPI_Transmit>
 80075b6:	0003      	movs	r3, r0
 80075b8:	7023      	strb	r3, [r4, #0]
  
  /* Check the communication status */
  if (status != HAL_OK)
 80075ba:	197b      	adds	r3, r7, r5
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <SPI_Write+0x46>
  {
    /* Execute user timeout callback */
    SPI_Error();
 80075c2:	f000 f809 	bl	80075d8 <SPI_Error>
  }
}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b004      	add	sp, #16
 80075cc:	bdb0      	pop	{r4, r5, r7, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	2000045c 	.word	0x2000045c
 80075d4:	200001a0 	.word	0x200001a0

080075d8 <SPI_Error>:
* @brief  SPI error treatment function
* @param  None
* @retval None
*/
static void SPI_Error(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&pSpiHandle);
 80075dc:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <SPI_Error+0x18>)
 80075de:	0018      	movs	r0, r3
 80075e0:	f001 fde0 	bl	80091a4 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  RadioSpiInit();
 80075e4:	f7ff fefe 	bl	80073e4 <RadioSpiInit>
}
 80075e8:	46c0      	nop			; (mov r8, r8)
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	2000045c 	.word	0x2000045c

080075f4 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80075f4:	b5b0      	push	{r4, r5, r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	603a      	str	r2, [r7, #0]
 80075fc:	1dfb      	adds	r3, r7, #7
 80075fe:	1c02      	adds	r2, r0, #0
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	1dbb      	adds	r3, r7, #6
 8007604:	1c0a      	adds	r2, r1, #0
 8007606:	701a      	strb	r2, [r3, #0]
  uint8_t aHeader[2] = {0};
 8007608:	2110      	movs	r1, #16
 800760a:	187b      	adds	r3, r7, r1
 800760c:	2200      	movs	r2, #0
 800760e:	801a      	strh	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 8007610:	200e      	movs	r0, #14
 8007612:	183b      	adds	r3, r7, r0
 8007614:	2200      	movs	r2, #0
 8007616:	801a      	strh	r2, [r3, #0]
  
  StatusBytes *pStatus=(StatusBytes *)&tmpstatus;
 8007618:	183b      	adds	r3, r7, r0
 800761a:	61bb      	str	r3, [r7, #24]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 800761c:	187b      	adds	r3, r7, r1
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
  aHeader[1] = cRegAddress;
 8007622:	187b      	adds	r3, r7, r1
 8007624:	1dfa      	adds	r2, r7, #7
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 800762a:	2300      	movs	r3, #0
 800762c:	2204      	movs	r2, #4
 800762e:	2104      	movs	r1, #4
 8007630:	2003      	movs	r0, #3
 8007632:	f7ff fde7 	bl	8007204 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8007636:	4b3c      	ldr	r3, [pc, #240]	; (8007728 <RadioSpiWriteRegisters+0x134>)
 8007638:	2200      	movs	r2, #0
 800763a:	2140      	movs	r1, #64	; 0x40
 800763c:	0018      	movs	r0, r3
 800763e:	f000 fdf1 	bl	8008224 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8007642:	230c      	movs	r3, #12
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	2200      	movs	r2, #0
 8007648:	801a      	strh	r2, [r3, #0]
 800764a:	e007      	b.n	800765c <RadioSpiWriteRegisters+0x68>
 800764c:	210c      	movs	r1, #12
 800764e:	187b      	adds	r3, r7, r1
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	3301      	adds	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	187b      	adds	r3, r7, r1
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	230c      	movs	r3, #12
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	2bff      	cmp	r3, #255	; 0xff
 8007666:	d9f1      	bls.n	800764c <RadioSpiWriteRegisters+0x58>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8007668:	4b30      	ldr	r3, [pc, #192]	; (800772c <RadioSpiWriteRegisters+0x138>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	210e      	movs	r1, #14
 800766e:	000c      	movs	r4, r1
 8007670:	187a      	adds	r2, r7, r1
 8007672:	2510      	movs	r5, #16
 8007674:	1979      	adds	r1, r7, r5
 8007676:	482e      	ldr	r0, [pc, #184]	; (8007730 <RadioSpiWriteRegisters+0x13c>)
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2301      	movs	r3, #1
 800767c:	f001 ff14 	bl	80094a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8007680:	0021      	movs	r1, r4
 8007682:	187b      	adds	r3, r7, r1
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	b29a      	uxth	r2, r3
 800768a:	187b      	adds	r3, r7, r1
 800768c:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800768e:	4b27      	ldr	r3, [pc, #156]	; (800772c <RadioSpiWriteRegisters+0x138>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	187c      	adds	r4, r7, r1
 8007694:	197a      	adds	r2, r7, r5
 8007696:	1c51      	adds	r1, r2, #1
 8007698:	4825      	ldr	r0, [pc, #148]	; (8007730 <RadioSpiWriteRegisters+0x13c>)
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2301      	movs	r3, #1
 800769e:	0022      	movs	r2, r4
 80076a0:	f001 ff02 	bl	80094a8 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	e009      	b.n	80076be <RadioSpiWriteRegisters+0xca>
  {
    SPI_Write(pcBuffer[index]);
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	18d3      	adds	r3, r2, r3
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f7ff ff64 	bl	8007580 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	1dbb      	adds	r3, r7, #6
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	dbf0      	blt.n	80076aa <RadioSpiWriteRegisters+0xb6>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	4b19      	ldr	r3, [pc, #100]	; (8007730 <RadioSpiWriteRegisters+0x13c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2202      	movs	r2, #2
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d1f8      	bne.n	80076ca <RadioSpiWriteRegisters+0xd6>
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 80076d8:	4b13      	ldr	r3, [pc, #76]	; (8007728 <RadioSpiWriteRegisters+0x134>)
 80076da:	2201      	movs	r2, #1
 80076dc:	2140      	movs	r1, #64	; 0x40
 80076de:	0018      	movs	r0, r3
 80076e0:	f000 fda0 	bl	8008224 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80076e4:	2301      	movs	r3, #1
 80076e6:	2204      	movs	r2, #4
 80076e8:	2104      	movs	r1, #4
 80076ea:	2003      	movs	r0, #3
 80076ec:	f7ff fd8a 	bl	8007204 <RadioGpioInterruptCmd>
  
  return *pStatus;
 80076f0:	2414      	movs	r4, #20
 80076f2:	193a      	adds	r2, r7, r4
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	0010      	movs	r0, r2
 80076f8:	0019      	movs	r1, r3
 80076fa:	2302      	movs	r3, #2
 80076fc:	001a      	movs	r2, r3
 80076fe:	f003 fa21 	bl	800ab44 <memcpy>
 8007702:	193a      	adds	r2, r7, r4
 8007704:	2300      	movs	r3, #0
 8007706:	7811      	ldrb	r1, [r2, #0]
 8007708:	20ff      	movs	r0, #255	; 0xff
 800770a:	4001      	ands	r1, r0
 800770c:	20ff      	movs	r0, #255	; 0xff
 800770e:	4383      	bics	r3, r0
 8007710:	430b      	orrs	r3, r1
 8007712:	7852      	ldrb	r2, [r2, #1]
 8007714:	21ff      	movs	r1, #255	; 0xff
 8007716:	400a      	ands	r2, r1
 8007718:	0212      	lsls	r2, r2, #8
 800771a:	4906      	ldr	r1, [pc, #24]	; (8007734 <RadioSpiWriteRegisters+0x140>)
 800771c:	400b      	ands	r3, r1
 800771e:	4313      	orrs	r3, r2
  
}
 8007720:	1c18      	adds	r0, r3, #0
 8007722:	46bd      	mov	sp, r7
 8007724:	b008      	add	sp, #32
 8007726:	bdb0      	pop	{r4, r5, r7, pc}
 8007728:	50000400 	.word	0x50000400
 800772c:	200001a0 	.word	0x200001a0
 8007730:	2000045c 	.word	0x2000045c
 8007734:	ffff00ff 	.word	0xffff00ff

08007738 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval StatusBytes
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8007738:	b5b0      	push	{r4, r5, r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af02      	add	r7, sp, #8
 800773e:	603a      	str	r2, [r7, #0]
 8007740:	1dfb      	adds	r3, r7, #7
 8007742:	1c02      	adds	r2, r0, #0
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	1dbb      	adds	r3, r7, #6
 8007748:	1c0a      	adds	r2, r1, #0
 800774a:	701a      	strb	r2, [r3, #0]
  uint16_t tmpstatus = 0x00;
 800774c:	2112      	movs	r1, #18
 800774e:	187b      	adds	r3, r7, r1
 8007750:	2200      	movs	r2, #0
 8007752:	801a      	strh	r2, [r3, #0]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8007754:	187b      	adds	r3, r7, r1
 8007756:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8007758:	2110      	movs	r1, #16
 800775a:	187b      	adds	r3, r7, r1
 800775c:	2200      	movs	r2, #0
 800775e:	801a      	strh	r2, [r3, #0]
  uint8_t dummy = 0xFF;
 8007760:	230f      	movs	r3, #15
 8007762:	18fb      	adds	r3, r7, r3
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	701a      	strb	r2, [r3, #0]
  
  /* Built the aHeader bytes */
  aHeader[0] = READ_HEADER;
 8007768:	187b      	adds	r3, r7, r1
 800776a:	2201      	movs	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
  aHeader[1] = cRegAddress;
 800776e:	187b      	adds	r3, r7, r1
 8007770:	1dfa      	adds	r2, r7, #7
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 8007776:	2300      	movs	r3, #0
 8007778:	2204      	movs	r2, #4
 800777a:	2104      	movs	r1, #4
 800777c:	2003      	movs	r0, #3
 800777e:	f7ff fd41 	bl	8007204 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8007782:	4b3f      	ldr	r3, [pc, #252]	; (8007880 <RadioSpiReadRegisters+0x148>)
 8007784:	2200      	movs	r2, #0
 8007786:	2140      	movs	r1, #64	; 0x40
 8007788:	0018      	movs	r0, r3
 800778a:	f000 fd4b 	bl	8008224 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 800778e:	230c      	movs	r3, #12
 8007790:	18fb      	adds	r3, r7, r3
 8007792:	2200      	movs	r2, #0
 8007794:	801a      	strh	r2, [r3, #0]
 8007796:	e007      	b.n	80077a8 <RadioSpiReadRegisters+0x70>
 8007798:	210c      	movs	r1, #12
 800779a:	187b      	adds	r3, r7, r1
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3301      	adds	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	187b      	adds	r3, r7, r1
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	230c      	movs	r3, #12
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2bff      	cmp	r3, #255	; 0xff
 80077b2:	d9f1      	bls.n	8007798 <RadioSpiReadRegisters+0x60>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 80077b4:	4b33      	ldr	r3, [pc, #204]	; (8007884 <RadioSpiReadRegisters+0x14c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2112      	movs	r1, #18
 80077ba:	000c      	movs	r4, r1
 80077bc:	187a      	adds	r2, r7, r1
 80077be:	2510      	movs	r5, #16
 80077c0:	1979      	adds	r1, r7, r5
 80077c2:	4831      	ldr	r0, [pc, #196]	; (8007888 <RadioSpiReadRegisters+0x150>)
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	2301      	movs	r3, #1
 80077c8:	f001 fe6e 	bl	80094a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 80077cc:	0021      	movs	r1, r4
 80077ce:	187b      	adds	r3, r7, r1
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80077da:	4b2a      	ldr	r3, [pc, #168]	; (8007884 <RadioSpiReadRegisters+0x14c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	187c      	adds	r4, r7, r1
 80077e0:	197a      	adds	r2, r7, r5
 80077e2:	1c51      	adds	r1, r2, #1
 80077e4:	4828      	ldr	r0, [pc, #160]	; (8007888 <RadioSpiReadRegisters+0x150>)
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	2301      	movs	r3, #1
 80077ea:	0022      	movs	r2, r4
 80077ec:	f001 fe5c 	bl	80094a8 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 80077f0:	2300      	movs	r3, #0
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	e00e      	b.n	8007814 <RadioSpiReadRegisters+0xdc>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&(pcBuffer)[index], 1, SpiTimeout);
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	18d2      	adds	r2, r2, r3
 80077fc:	4b21      	ldr	r3, [pc, #132]	; (8007884 <RadioSpiReadRegisters+0x14c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	210f      	movs	r1, #15
 8007802:	1879      	adds	r1, r7, r1
 8007804:	4820      	ldr	r0, [pc, #128]	; (8007888 <RadioSpiReadRegisters+0x150>)
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	2301      	movs	r3, #1
 800780a:	f001 fe4d 	bl	80094a8 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	3301      	adds	r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	1dbb      	adds	r3, r7, #6
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	429a      	cmp	r2, r3
 800781c:	dbeb      	blt.n	80077f6 <RadioSpiReadRegisters+0xbe>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	4b19      	ldr	r3, [pc, #100]	; (8007888 <RadioSpiReadRegisters+0x150>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2202      	movs	r2, #2
 8007828:	4013      	ands	r3, r2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d1f8      	bne.n	8007820 <RadioSpiReadRegisters+0xe8>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 800782e:	4b14      	ldr	r3, [pc, #80]	; (8007880 <RadioSpiReadRegisters+0x148>)
 8007830:	2201      	movs	r2, #1
 8007832:	2140      	movs	r1, #64	; 0x40
 8007834:	0018      	movs	r0, r3
 8007836:	f000 fcf5 	bl	8008224 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 800783a:	2301      	movs	r3, #1
 800783c:	2204      	movs	r2, #4
 800783e:	2104      	movs	r1, #4
 8007840:	2003      	movs	r0, #3
 8007842:	f7ff fcdf 	bl	8007204 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8007846:	2414      	movs	r4, #20
 8007848:	193a      	adds	r2, r7, r4
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	0010      	movs	r0, r2
 800784e:	0019      	movs	r1, r3
 8007850:	2302      	movs	r3, #2
 8007852:	001a      	movs	r2, r3
 8007854:	f003 f976 	bl	800ab44 <memcpy>
 8007858:	193a      	adds	r2, r7, r4
 800785a:	2300      	movs	r3, #0
 800785c:	7811      	ldrb	r1, [r2, #0]
 800785e:	20ff      	movs	r0, #255	; 0xff
 8007860:	4001      	ands	r1, r0
 8007862:	20ff      	movs	r0, #255	; 0xff
 8007864:	4383      	bics	r3, r0
 8007866:	430b      	orrs	r3, r1
 8007868:	7852      	ldrb	r2, [r2, #1]
 800786a:	21ff      	movs	r1, #255	; 0xff
 800786c:	400a      	ands	r2, r1
 800786e:	0212      	lsls	r2, r2, #8
 8007870:	4906      	ldr	r1, [pc, #24]	; (800788c <RadioSpiReadRegisters+0x154>)
 8007872:	400b      	ands	r3, r1
 8007874:	4313      	orrs	r3, r2
  
}
 8007876:	1c18      	adds	r0, r3, #0
 8007878:	46bd      	mov	sp, r7
 800787a:	b008      	add	sp, #32
 800787c:	bdb0      	pop	{r4, r5, r7, pc}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	50000400 	.word	0x50000400
 8007884:	200001a0 	.word	0x200001a0
 8007888:	2000045c 	.word	0x2000045c
 800788c:	ffff00ff 	.word	0xffff00ff

08007890 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval StatusBytes
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8007890:	b5b0      	push	{r4, r5, r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	0002      	movs	r2, r0
 8007898:	1dfb      	adds	r3, r7, #7
 800789a:	701a      	strb	r2, [r3, #0]
  uint8_t aHeader[2] = {0};
 800789c:	210c      	movs	r1, #12
 800789e:	187b      	adds	r3, r7, r1
 80078a0:	2200      	movs	r2, #0
 80078a2:	801a      	strh	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 80078a4:	200a      	movs	r0, #10
 80078a6:	183b      	adds	r3, r7, r0
 80078a8:	2200      	movs	r2, #0
 80078aa:	801a      	strh	r2, [r3, #0]
  
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 80078ac:	183b      	adds	r3, r7, r0
 80078ae:	617b      	str	r3, [r7, #20]
  
  /* Built the aHeader bytes */
  aHeader[0] = COMMAND_HEADER;
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	701a      	strb	r2, [r3, #0]
  aHeader[1] = cCommandCode;
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	1dfa      	adds	r2, r7, #7
 80078ba:	7812      	ldrb	r2, [r2, #0]
 80078bc:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 80078be:	2300      	movs	r3, #0
 80078c0:	2204      	movs	r2, #4
 80078c2:	2104      	movs	r1, #4
 80078c4:	2003      	movs	r0, #3
 80078c6:	f7ff fc9d 	bl	8007204 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 80078ca:	4b33      	ldr	r3, [pc, #204]	; (8007998 <RadioSpiCommandStrobes+0x108>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	2140      	movs	r1, #64	; 0x40
 80078d0:	0018      	movs	r0, r3
 80078d2:	f000 fca7 	bl	8008224 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 80078d6:	2308      	movs	r3, #8
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	2200      	movs	r2, #0
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	e007      	b.n	80078f0 <RadioSpiCommandStrobes+0x60>
 80078e0:	2108      	movs	r1, #8
 80078e2:	187b      	adds	r3, r7, r1
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3301      	adds	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	187b      	adds	r3, r7, r1
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	2308      	movs	r3, #8
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2bff      	cmp	r3, #255	; 0xff
 80078fa:	d9f1      	bls.n	80078e0 <RadioSpiCommandStrobes+0x50>
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80078fc:	4b27      	ldr	r3, [pc, #156]	; (800799c <RadioSpiCommandStrobes+0x10c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	210a      	movs	r1, #10
 8007902:	000c      	movs	r4, r1
 8007904:	187a      	adds	r2, r7, r1
 8007906:	250c      	movs	r5, #12
 8007908:	1979      	adds	r1, r7, r5
 800790a:	4825      	ldr	r0, [pc, #148]	; (80079a0 <RadioSpiCommandStrobes+0x110>)
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	2301      	movs	r3, #1
 8007910:	f001 fdca 	bl	80094a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8007914:	0021      	movs	r1, r4
 8007916:	187b      	adds	r3, r7, r1
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	b29a      	uxth	r2, r3
 800791e:	187b      	adds	r3, r7, r1
 8007920:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007922:	4b1e      	ldr	r3, [pc, #120]	; (800799c <RadioSpiCommandStrobes+0x10c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	187c      	adds	r4, r7, r1
 8007928:	197a      	adds	r2, r7, r5
 800792a:	1c51      	adds	r1, r2, #1
 800792c:	481c      	ldr	r0, [pc, #112]	; (80079a0 <RadioSpiCommandStrobes+0x110>)
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	2301      	movs	r3, #1
 8007932:	0022      	movs	r2, r4
 8007934:	f001 fdb8 	bl	80094a8 <HAL_SPI_TransmitReceive>
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	4b19      	ldr	r3, [pc, #100]	; (80079a0 <RadioSpiCommandStrobes+0x110>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2202      	movs	r2, #2
 8007942:	4013      	ands	r3, r2
 8007944:	2b02      	cmp	r3, #2
 8007946:	d1f8      	bne.n	800793a <RadioSpiCommandStrobes+0xaa>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 8007948:	4b13      	ldr	r3, [pc, #76]	; (8007998 <RadioSpiCommandStrobes+0x108>)
 800794a:	2201      	movs	r2, #1
 800794c:	2140      	movs	r1, #64	; 0x40
 800794e:	0018      	movs	r0, r3
 8007950:	f000 fc68 	bl	8008224 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8007954:	2301      	movs	r3, #1
 8007956:	2204      	movs	r2, #4
 8007958:	2104      	movs	r1, #4
 800795a:	2003      	movs	r0, #3
 800795c:	f7ff fc52 	bl	8007204 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8007960:	2410      	movs	r4, #16
 8007962:	193a      	adds	r2, r7, r4
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	0010      	movs	r0, r2
 8007968:	0019      	movs	r1, r3
 800796a:	2302      	movs	r3, #2
 800796c:	001a      	movs	r2, r3
 800796e:	f003 f8e9 	bl	800ab44 <memcpy>
 8007972:	193a      	adds	r2, r7, r4
 8007974:	2300      	movs	r3, #0
 8007976:	7811      	ldrb	r1, [r2, #0]
 8007978:	20ff      	movs	r0, #255	; 0xff
 800797a:	4001      	ands	r1, r0
 800797c:	20ff      	movs	r0, #255	; 0xff
 800797e:	4383      	bics	r3, r0
 8007980:	430b      	orrs	r3, r1
 8007982:	7852      	ldrb	r2, [r2, #1]
 8007984:	21ff      	movs	r1, #255	; 0xff
 8007986:	400a      	ands	r2, r1
 8007988:	0212      	lsls	r2, r2, #8
 800798a:	4906      	ldr	r1, [pc, #24]	; (80079a4 <RadioSpiCommandStrobes+0x114>)
 800798c:	400b      	ands	r3, r1
 800798e:	4313      	orrs	r3, r2
  
}
 8007990:	1c18      	adds	r0, r3, #0
 8007992:	46bd      	mov	sp, r7
 8007994:	b006      	add	sp, #24
 8007996:	bdb0      	pop	{r4, r5, r7, pc}
 8007998:	50000400 	.word	0x50000400
 800799c:	200001a0 	.word	0x200001a0
 80079a0:	2000045c 	.word	0x2000045c
 80079a4:	ffff00ff 	.word	0xffff00ff

080079a8 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b08a      	sub	sp, #40	; 0x28
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	0002      	movs	r2, r0
 80079b0:	6039      	str	r1, [r7, #0]
 80079b2:	1dfb      	adds	r3, r7, #7
 80079b4:	701a      	strb	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 80079b6:	2112      	movs	r1, #18
 80079b8:	187b      	adds	r3, r7, r1
 80079ba:	2200      	movs	r2, #0
 80079bc:	801a      	strh	r2, [r3, #0]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 80079be:	187b      	adds	r3, r7, r1
 80079c0:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 80079c2:	2110      	movs	r1, #16
 80079c4:	187b      	adds	r3, r7, r1
 80079c6:	2200      	movs	r2, #0
 80079c8:	801a      	strh	r2, [r3, #0]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 80079ca:	187b      	adds	r3, r7, r1
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]
  aHeader[1] = LINEAR_FIFO_ADDRESS;
 80079d0:	187b      	adds	r3, r7, r1
 80079d2:	22ff      	movs	r2, #255	; 0xff
 80079d4:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 80079d6:	2300      	movs	r3, #0
 80079d8:	2204      	movs	r2, #4
 80079da:	2104      	movs	r1, #4
 80079dc:	2003      	movs	r0, #3
 80079de:	f7ff fc11 	bl	8007204 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 80079e2:	4b3c      	ldr	r3, [pc, #240]	; (8007ad4 <RadioSpiWriteFifo+0x12c>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	2140      	movs	r1, #64	; 0x40
 80079e8:	0018      	movs	r0, r3
 80079ea:	f000 fc1b 	bl	8008224 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 80079ee:	230e      	movs	r3, #14
 80079f0:	18fb      	adds	r3, r7, r3
 80079f2:	2200      	movs	r2, #0
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	e007      	b.n	8007a08 <RadioSpiWriteFifo+0x60>
 80079f8:	210e      	movs	r1, #14
 80079fa:	187b      	adds	r3, r7, r1
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3301      	adds	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	187b      	adds	r3, r7, r1
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	230e      	movs	r3, #14
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2bff      	cmp	r3, #255	; 0xff
 8007a12:	d9f1      	bls.n	80079f8 <RadioSpiWriteFifo+0x50>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007a14:	4b30      	ldr	r3, [pc, #192]	; (8007ad8 <RadioSpiWriteFifo+0x130>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2112      	movs	r1, #18
 8007a1a:	000c      	movs	r4, r1
 8007a1c:	187a      	adds	r2, r7, r1
 8007a1e:	2510      	movs	r5, #16
 8007a20:	1979      	adds	r1, r7, r5
 8007a22:	482e      	ldr	r0, [pc, #184]	; (8007adc <RadioSpiWriteFifo+0x134>)
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	2301      	movs	r3, #1
 8007a28:	f001 fd3e 	bl	80094a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8007a2c:	0021      	movs	r1, r4
 8007a2e:	187b      	adds	r3, r7, r1
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	187b      	adds	r3, r7, r1
 8007a38:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007a3a:	4b27      	ldr	r3, [pc, #156]	; (8007ad8 <RadioSpiWriteFifo+0x130>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	187c      	adds	r4, r7, r1
 8007a40:	197a      	adds	r2, r7, r5
 8007a42:	1c51      	adds	r1, r2, #1
 8007a44:	4825      	ldr	r0, [pc, #148]	; (8007adc <RadioSpiWriteFifo+0x134>)
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	0022      	movs	r2, r4
 8007a4c:	f001 fd2c 	bl	80094a8 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8007a50:	2300      	movs	r3, #0
 8007a52:	61fb      	str	r3, [r7, #28]
 8007a54:	e009      	b.n	8007a6a <RadioSpiWriteFifo+0xc2>
  {
    SPI_Write(pcBuffer[index]);
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	18d3      	adds	r3, r2, r3
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7ff fd8e 	bl	8007580 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	3301      	adds	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	1dfb      	adds	r3, r7, #7
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	dbf0      	blt.n	8007a56 <RadioSpiWriteFifo+0xae>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET); 
 8007a74:	46c0      	nop			; (mov r8, r8)
 8007a76:	4b19      	ldr	r3, [pc, #100]	; (8007adc <RadioSpiWriteFifo+0x134>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	4013      	ands	r3, r2
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d1f8      	bne.n	8007a76 <RadioSpiWriteFifo+0xce>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 8007a84:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <RadioSpiWriteFifo+0x12c>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	2140      	movs	r1, #64	; 0x40
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f000 fbca 	bl	8008224 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8007a90:	2301      	movs	r3, #1
 8007a92:	2204      	movs	r2, #4
 8007a94:	2104      	movs	r1, #4
 8007a96:	2003      	movs	r0, #3
 8007a98:	f7ff fbb4 	bl	8007204 <RadioGpioInterruptCmd>
  
  return *pStatus; 
 8007a9c:	2414      	movs	r4, #20
 8007a9e:	193a      	adds	r2, r7, r4
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	0010      	movs	r0, r2
 8007aa4:	0019      	movs	r1, r3
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	001a      	movs	r2, r3
 8007aaa:	f003 f84b 	bl	800ab44 <memcpy>
 8007aae:	193a      	adds	r2, r7, r4
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	7811      	ldrb	r1, [r2, #0]
 8007ab4:	20ff      	movs	r0, #255	; 0xff
 8007ab6:	4001      	ands	r1, r0
 8007ab8:	20ff      	movs	r0, #255	; 0xff
 8007aba:	4383      	bics	r3, r0
 8007abc:	430b      	orrs	r3, r1
 8007abe:	7852      	ldrb	r2, [r2, #1]
 8007ac0:	21ff      	movs	r1, #255	; 0xff
 8007ac2:	400a      	ands	r2, r1
 8007ac4:	0212      	lsls	r2, r2, #8
 8007ac6:	4906      	ldr	r1, [pc, #24]	; (8007ae0 <RadioSpiWriteFifo+0x138>)
 8007ac8:	400b      	ands	r3, r1
 8007aca:	4313      	orrs	r3, r2
}
 8007acc:	1c18      	adds	r0, r3, #0
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b008      	add	sp, #32
 8007ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad4:	50000400 	.word	0x50000400
 8007ad8:	200001a0 	.word	0x200001a0
 8007adc:	2000045c 	.word	0x2000045c
 8007ae0:	ffff00ff 	.word	0xffff00ff

08007ae4 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval StatusBytes
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8007ae4:	b5b0      	push	{r4, r5, r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	0002      	movs	r2, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	1dfb      	adds	r3, r7, #7
 8007af0:	701a      	strb	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 8007af2:	2112      	movs	r1, #18
 8007af4:	187b      	adds	r3, r7, r1
 8007af6:	2200      	movs	r2, #0
 8007af8:	801a      	strh	r2, [r3, #0]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8007afa:	187b      	adds	r3, r7, r1
 8007afc:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2];
  uint8_t dummy=0xFF;
 8007afe:	230f      	movs	r3, #15
 8007b00:	18fb      	adds	r3, r7, r3
 8007b02:	22ff      	movs	r2, #255	; 0xff
 8007b04:	701a      	strb	r2, [r3, #0]
  
  /* Built the aHeader bytes */
  aHeader[0]=READ_HEADER;
 8007b06:	2110      	movs	r1, #16
 8007b08:	187b      	adds	r3, r7, r1
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
  aHeader[1]=LINEAR_FIFO_ADDRESS;
 8007b0e:	187b      	adds	r3, r7, r1
 8007b10:	22ff      	movs	r2, #255	; 0xff
 8007b12:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 8007b14:	2300      	movs	r3, #0
 8007b16:	2204      	movs	r2, #4
 8007b18:	2104      	movs	r1, #4
 8007b1a:	2003      	movs	r0, #3
 8007b1c:	f7ff fb72 	bl	8007204 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8007b20:	4b3e      	ldr	r3, [pc, #248]	; (8007c1c <RadioSpiReadFifo+0x138>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	2140      	movs	r1, #64	; 0x40
 8007b26:	0018      	movs	r0, r3
 8007b28:	f000 fb7c 	bl	8008224 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	2200      	movs	r2, #0
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	e007      	b.n	8007b46 <RadioSpiReadFifo+0x62>
 8007b36:	210c      	movs	r1, #12
 8007b38:	187b      	adds	r3, r7, r1
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	187b      	adds	r3, r7, r1
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	230c      	movs	r3, #12
 8007b48:	18fb      	adds	r3, r7, r3
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2bff      	cmp	r3, #255	; 0xff
 8007b50:	d9f1      	bls.n	8007b36 <RadioSpiReadFifo+0x52>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007b52:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <RadioSpiReadFifo+0x13c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2112      	movs	r1, #18
 8007b58:	000c      	movs	r4, r1
 8007b5a:	187a      	adds	r2, r7, r1
 8007b5c:	2510      	movs	r5, #16
 8007b5e:	1979      	adds	r1, r7, r5
 8007b60:	4830      	ldr	r0, [pc, #192]	; (8007c24 <RadioSpiReadFifo+0x140>)
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	2301      	movs	r3, #1
 8007b66:	f001 fc9f 	bl	80094a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8007b6a:	0021      	movs	r1, r4
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	187b      	adds	r3, r7, r1
 8007b76:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007b78:	4b29      	ldr	r3, [pc, #164]	; (8007c20 <RadioSpiReadFifo+0x13c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	187c      	adds	r4, r7, r1
 8007b7e:	197a      	adds	r2, r7, r5
 8007b80:	1c51      	adds	r1, r2, #1
 8007b82:	4828      	ldr	r0, [pc, #160]	; (8007c24 <RadioSpiReadFifo+0x140>)
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2301      	movs	r3, #1
 8007b88:	0022      	movs	r2, r4
 8007b8a:	f001 fc8d 	bl	80094a8 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	e00e      	b.n	8007bb2 <RadioSpiReadFifo+0xce>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&pcBuffer[index], 1, SpiTimeout);
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	18d2      	adds	r2, r2, r3
 8007b9a:	4b21      	ldr	r3, [pc, #132]	; (8007c20 <RadioSpiReadFifo+0x13c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	210f      	movs	r1, #15
 8007ba0:	1879      	adds	r1, r7, r1
 8007ba2:	4820      	ldr	r0, [pc, #128]	; (8007c24 <RadioSpiReadFifo+0x140>)
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f001 fc7e 	bl	80094a8 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	1dfb      	adds	r3, r7, #7
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	dbeb      	blt.n	8007b94 <RadioSpiReadFifo+0xb0>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while(__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8007bbc:	46c0      	nop			; (mov r8, r8)
 8007bbe:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <RadioSpiReadFifo+0x140>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d1f8      	bne.n	8007bbe <RadioSpiReadFifo+0xda>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <RadioSpiReadFifo+0x138>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	2140      	movs	r1, #64	; 0x40
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	f000 fb26 	bl	8008224 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8007bd8:	2301      	movs	r3, #1
 8007bda:	2204      	movs	r2, #4
 8007bdc:	2104      	movs	r1, #4
 8007bde:	2003      	movs	r0, #3
 8007be0:	f7ff fb10 	bl	8007204 <RadioGpioInterruptCmd>
  
  return *pStatus;  
 8007be4:	2414      	movs	r4, #20
 8007be6:	193a      	adds	r2, r7, r4
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	0010      	movs	r0, r2
 8007bec:	0019      	movs	r1, r3
 8007bee:	2302      	movs	r3, #2
 8007bf0:	001a      	movs	r2, r3
 8007bf2:	f002 ffa7 	bl	800ab44 <memcpy>
 8007bf6:	193a      	adds	r2, r7, r4
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	7811      	ldrb	r1, [r2, #0]
 8007bfc:	20ff      	movs	r0, #255	; 0xff
 8007bfe:	4001      	ands	r1, r0
 8007c00:	20ff      	movs	r0, #255	; 0xff
 8007c02:	4383      	bics	r3, r0
 8007c04:	430b      	orrs	r3, r1
 8007c06:	7852      	ldrb	r2, [r2, #1]
 8007c08:	21ff      	movs	r1, #255	; 0xff
 8007c0a:	400a      	ands	r2, r1
 8007c0c:	0212      	lsls	r2, r2, #8
 8007c0e:	4906      	ldr	r1, [pc, #24]	; (8007c28 <RadioSpiReadFifo+0x144>)
 8007c10:	400b      	ands	r3, r1
 8007c12:	4313      	orrs	r3, r2
}
 8007c14:	1c18      	adds	r0, r3, #0
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b008      	add	sp, #32
 8007c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c1c:	50000400 	.word	0x50000400
 8007c20:	200001a0 	.word	0x200001a0
 8007c24:	2000045c 	.word	0x2000045c
 8007c28:	ffff00ff 	.word	0xffff00ff

08007c2c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007c32:	1dfb      	adds	r3, r7, #7
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <HAL_Init+0x3c>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <HAL_Init+0x3c>)
 8007c3e:	2140      	movs	r1, #64	; 0x40
 8007c40:	430a      	orrs	r2, r1
 8007c42:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c44:	2000      	movs	r0, #0
 8007c46:	f000 f817 	bl	8007c78 <HAL_InitTick>
 8007c4a:	1e03      	subs	r3, r0, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8007c4e:	1dfb      	adds	r3, r7, #7
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	e001      	b.n	8007c5a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007c56:	f000 f809 	bl	8007c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007c5a:	1dfb      	adds	r3, r7, #7
 8007c5c:	781b      	ldrb	r3, [r3, #0]
}
 8007c5e:	0018      	movs	r0, r3
 8007c60:	46bd      	mov	sp, r7
 8007c62:	b002      	add	sp, #8
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	40022000 	.word	0x40022000

08007c6c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007c80:	230f      	movs	r3, #15
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <HAL_InitTick+0x50>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	23fa      	movs	r3, #250	; 0xfa
 8007c8e:	0099      	lsls	r1, r3, #2
 8007c90:	0010      	movs	r0, r2
 8007c92:	f7f8 fa39 	bl	8000108 <__udivsi3>
 8007c96:	0003      	movs	r3, r0
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f000 f940 	bl	8007f1e <HAL_SYSTICK_Config>
 8007c9e:	1e03      	subs	r3, r0, #0
 8007ca0:	d004      	beq.n	8007cac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8007ca2:	230f      	movs	r3, #15
 8007ca4:	18fb      	adds	r3, r7, r3
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	e006      	b.n	8007cba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	2301      	movs	r3, #1
 8007cb0:	425b      	negs	r3, r3
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f000 f8fd 	bl	8007eb4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8007cba:	230f      	movs	r3, #15
 8007cbc:	18fb      	adds	r3, r7, r3
 8007cbe:	781b      	ldrb	r3, [r3, #0]
}
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	b004      	add	sp, #16
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	2000017c 	.word	0x2000017c

08007ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  uwTick++;
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <HAL_IncTick+0x14>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	4b02      	ldr	r3, [pc, #8]	; (8007ce0 <HAL_IncTick+0x14>)
 8007cd8:	601a      	str	r2, [r3, #0]
}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	200004b4 	.word	0x200004b4

08007ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <HAL_GetTick+0x10>)
 8007cea:	681b      	ldr	r3, [r3, #0]
}
 8007cec:	0018      	movs	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	200004b4 	.word	0x200004b4

08007cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d00:	f7ff fff0 	bl	8007ce4 <HAL_GetTick>
 8007d04:	0003      	movs	r3, r0
 8007d06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	d002      	beq.n	8007d18 <HAL_Delay+0x20>
  {
    wait++;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3301      	adds	r3, #1
 8007d16:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d18:	46c0      	nop			; (mov r8, r8)
 8007d1a:	f7ff ffe3 	bl	8007ce4 <HAL_GetTick>
 8007d1e:	0002      	movs	r2, r0
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d8f7      	bhi.n	8007d1a <HAL_Delay+0x22>
  {
  }
}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b004      	add	sp, #16
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	0002      	movs	r2, r0
 8007d3c:	1dfb      	adds	r3, r7, #7
 8007d3e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007d40:	1dfb      	adds	r3, r7, #7
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	001a      	movs	r2, r3
 8007d46:	231f      	movs	r3, #31
 8007d48:	401a      	ands	r2, r3
 8007d4a:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <NVIC_EnableIRQ+0x28>)
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	4091      	lsls	r1, r2
 8007d50:	000a      	movs	r2, r1
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	46c0      	nop			; (mov r8, r8)
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b002      	add	sp, #8
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	e000e100 	.word	0xe000e100

08007d60 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	0002      	movs	r2, r0
 8007d68:	1dfb      	adds	r3, r7, #7
 8007d6a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007d6c:	1dfb      	adds	r3, r7, #7
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	001a      	movs	r2, r3
 8007d72:	231f      	movs	r3, #31
 8007d74:	4013      	ands	r3, r2
 8007d76:	4905      	ldr	r1, [pc, #20]	; (8007d8c <NVIC_DisableIRQ+0x2c>)
 8007d78:	2201      	movs	r2, #1
 8007d7a:	409a      	lsls	r2, r3
 8007d7c:	0013      	movs	r3, r2
 8007d7e:	2280      	movs	r2, #128	; 0x80
 8007d80:	508b      	str	r3, [r1, r2]
}
 8007d82:	46c0      	nop			; (mov r8, r8)
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b002      	add	sp, #8
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	e000e100 	.word	0xe000e100

08007d90 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	0002      	movs	r2, r0
 8007d98:	6039      	str	r1, [r7, #0]
 8007d9a:	1dfb      	adds	r3, r7, #7
 8007d9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8007d9e:	1dfb      	adds	r3, r7, #7
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b7f      	cmp	r3, #127	; 0x7f
 8007da4:	d932      	bls.n	8007e0c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007da6:	4a2f      	ldr	r2, [pc, #188]	; (8007e64 <NVIC_SetPriority+0xd4>)
 8007da8:	1dfb      	adds	r3, r7, #7
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	0019      	movs	r1, r3
 8007dae:	230f      	movs	r3, #15
 8007db0:	400b      	ands	r3, r1
 8007db2:	3b08      	subs	r3, #8
 8007db4:	089b      	lsrs	r3, r3, #2
 8007db6:	3306      	adds	r3, #6
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	18d3      	adds	r3, r2, r3
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	1dfa      	adds	r2, r7, #7
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	0011      	movs	r1, r2
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	400a      	ands	r2, r1
 8007dca:	00d2      	lsls	r2, r2, #3
 8007dcc:	21ff      	movs	r1, #255	; 0xff
 8007dce:	4091      	lsls	r1, r2
 8007dd0:	000a      	movs	r2, r1
 8007dd2:	43d2      	mvns	r2, r2
 8007dd4:	401a      	ands	r2, r3
 8007dd6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	019b      	lsls	r3, r3, #6
 8007ddc:	22ff      	movs	r2, #255	; 0xff
 8007dde:	401a      	ands	r2, r3
 8007de0:	1dfb      	adds	r3, r7, #7
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	0018      	movs	r0, r3
 8007de6:	2303      	movs	r3, #3
 8007de8:	4003      	ands	r3, r0
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007dee:	481d      	ldr	r0, [pc, #116]	; (8007e64 <NVIC_SetPriority+0xd4>)
 8007df0:	1dfb      	adds	r3, r7, #7
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	001c      	movs	r4, r3
 8007df6:	230f      	movs	r3, #15
 8007df8:	4023      	ands	r3, r4
 8007dfa:	3b08      	subs	r3, #8
 8007dfc:	089b      	lsrs	r3, r3, #2
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	3306      	adds	r3, #6
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	18c3      	adds	r3, r0, r3
 8007e06:	3304      	adds	r3, #4
 8007e08:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007e0a:	e027      	b.n	8007e5c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e0c:	4a16      	ldr	r2, [pc, #88]	; (8007e68 <NVIC_SetPriority+0xd8>)
 8007e0e:	1dfb      	adds	r3, r7, #7
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	b25b      	sxtb	r3, r3
 8007e14:	089b      	lsrs	r3, r3, #2
 8007e16:	33c0      	adds	r3, #192	; 0xc0
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	589b      	ldr	r3, [r3, r2]
 8007e1c:	1dfa      	adds	r2, r7, #7
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	0011      	movs	r1, r2
 8007e22:	2203      	movs	r2, #3
 8007e24:	400a      	ands	r2, r1
 8007e26:	00d2      	lsls	r2, r2, #3
 8007e28:	21ff      	movs	r1, #255	; 0xff
 8007e2a:	4091      	lsls	r1, r2
 8007e2c:	000a      	movs	r2, r1
 8007e2e:	43d2      	mvns	r2, r2
 8007e30:	401a      	ands	r2, r3
 8007e32:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	019b      	lsls	r3, r3, #6
 8007e38:	22ff      	movs	r2, #255	; 0xff
 8007e3a:	401a      	ands	r2, r3
 8007e3c:	1dfb      	adds	r3, r7, #7
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	0018      	movs	r0, r3
 8007e42:	2303      	movs	r3, #3
 8007e44:	4003      	ands	r3, r0
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e4a:	4807      	ldr	r0, [pc, #28]	; (8007e68 <NVIC_SetPriority+0xd8>)
 8007e4c:	1dfb      	adds	r3, r7, #7
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	b25b      	sxtb	r3, r3
 8007e52:	089b      	lsrs	r3, r3, #2
 8007e54:	430a      	orrs	r2, r1
 8007e56:	33c0      	adds	r3, #192	; 0xc0
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	501a      	str	r2, [r3, r0]
}
 8007e5c:	46c0      	nop			; (mov r8, r8)
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	b003      	add	sp, #12
 8007e62:	bd90      	pop	{r4, r7, pc}
 8007e64:	e000ed00 	.word	0xe000ed00
 8007e68:	e000e100 	.word	0xe000e100

08007e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <SysTick_Config+0x40>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d901      	bls.n	8007e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e010      	b.n	8007ea4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e82:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <SysTick_Config+0x44>)
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	3a01      	subs	r2, #1
 8007e88:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	425b      	negs	r3, r3
 8007e8e:	2103      	movs	r1, #3
 8007e90:	0018      	movs	r0, r3
 8007e92:	f7ff ff7d 	bl	8007d90 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e96:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <SysTick_Config+0x44>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e9c:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <SysTick_Config+0x44>)
 8007e9e:	2207      	movs	r2, #7
 8007ea0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b002      	add	sp, #8
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	00ffffff 	.word	0x00ffffff
 8007eb0:	e000e010 	.word	0xe000e010

08007eb4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	210f      	movs	r1, #15
 8007ec0:	187b      	adds	r3, r7, r1
 8007ec2:	1c02      	adds	r2, r0, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	0011      	movs	r1, r2
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f7ff ff5d 	bl	8007d90 <NVIC_SetPriority>
}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	b004      	add	sp, #16
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	0002      	movs	r2, r0
 8007ee6:	1dfb      	adds	r3, r7, #7
 8007ee8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007eea:	1dfb      	adds	r3, r7, #7
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f7ff ff1f 	bl	8007d34 <NVIC_EnableIRQ>
}
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	b002      	add	sp, #8
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	0002      	movs	r2, r0
 8007f06:	1dfb      	adds	r3, r7, #7
 8007f08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007f0a:	1dfb      	adds	r3, r7, #7
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b25b      	sxtb	r3, r3
 8007f10:	0018      	movs	r0, r3
 8007f12:	f7ff ff25 	bl	8007d60 <NVIC_DisableIRQ>
}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	b002      	add	sp, #8
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f7ff ff9f 	bl	8007e6c <SysTick_Config>
 8007f2e:	0003      	movs	r3, r0
}
 8007f30:	0018      	movs	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	b002      	add	sp, #8
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007f4e:	e14f      	b.n	80081f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2101      	movs	r1, #1
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4091      	lsls	r1, r2
 8007f5a:	000a      	movs	r2, r1
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d100      	bne.n	8007f68 <HAL_GPIO_Init+0x30>
 8007f66:	e140      	b.n	80081ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d003      	beq.n	8007f78 <HAL_GPIO_Init+0x40>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b12      	cmp	r3, #18
 8007f76:	d123      	bne.n	8007fc0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	08da      	lsrs	r2, r3, #3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3208      	adds	r2, #8
 8007f80:	0092      	lsls	r2, r2, #2
 8007f82:	58d3      	ldr	r3, [r2, r3]
 8007f84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2207      	movs	r2, #7
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	220f      	movs	r2, #15
 8007f90:	409a      	lsls	r2, r3
 8007f92:	0013      	movs	r3, r2
 8007f94:	43da      	mvns	r2, r3
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2107      	movs	r1, #7
 8007fa4:	400b      	ands	r3, r1
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	409a      	lsls	r2, r3
 8007faa:	0013      	movs	r3, r2
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	08da      	lsrs	r2, r3, #3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3208      	adds	r2, #8
 8007fba:	0092      	lsls	r2, r2, #2
 8007fbc:	6939      	ldr	r1, [r7, #16]
 8007fbe:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d00b      	beq.n	8007fe0 <HAL_GPIO_Init+0xa8>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d007      	beq.n	8007fe0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fd4:	2b11      	cmp	r3, #17
 8007fd6:	d003      	beq.n	8007fe0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b12      	cmp	r3, #18
 8007fde:	d130      	bne.n	8008042 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	2203      	movs	r2, #3
 8007fec:	409a      	lsls	r2, r3
 8007fee:	0013      	movs	r3, r2
 8007ff0:	43da      	mvns	r2, r3
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	409a      	lsls	r2, r3
 8008002:	0013      	movs	r3, r2
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008016:	2201      	movs	r2, #1
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	409a      	lsls	r2, r3
 800801c:	0013      	movs	r3, r2
 800801e:	43da      	mvns	r2, r3
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	4013      	ands	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	2201      	movs	r2, #1
 800802e:	401a      	ands	r2, r3
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	409a      	lsls	r2, r3
 8008034:	0013      	movs	r3, r2
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	2203      	movs	r2, #3
 800804e:	409a      	lsls	r2, r3
 8008050:	0013      	movs	r3, r2
 8008052:	43da      	mvns	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4013      	ands	r3, r2
 8008058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2203      	movs	r2, #3
 8008060:	401a      	ands	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	409a      	lsls	r2, r3
 8008068:	0013      	movs	r3, r2
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	2203      	movs	r2, #3
 8008082:	409a      	lsls	r2, r3
 8008084:	0013      	movs	r3, r2
 8008086:	43da      	mvns	r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	4013      	ands	r3, r2
 800808c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	409a      	lsls	r2, r3
 8008098:	0013      	movs	r3, r2
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	2380      	movs	r3, #128	; 0x80
 80080ac:	055b      	lsls	r3, r3, #21
 80080ae:	4013      	ands	r3, r2
 80080b0:	d100      	bne.n	80080b4 <HAL_GPIO_Init+0x17c>
 80080b2:	e09a      	b.n	80081ea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080b4:	4b54      	ldr	r3, [pc, #336]	; (8008208 <HAL_GPIO_Init+0x2d0>)
 80080b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b8:	4b53      	ldr	r3, [pc, #332]	; (8008208 <HAL_GPIO_Init+0x2d0>)
 80080ba:	2101      	movs	r1, #1
 80080bc:	430a      	orrs	r2, r1
 80080be:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80080c0:	4a52      	ldr	r2, [pc, #328]	; (800820c <HAL_GPIO_Init+0x2d4>)
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	089b      	lsrs	r3, r3, #2
 80080c6:	3302      	adds	r3, #2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	589b      	ldr	r3, [r3, r2]
 80080cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2203      	movs	r2, #3
 80080d2:	4013      	ands	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	220f      	movs	r2, #15
 80080d8:	409a      	lsls	r2, r3
 80080da:	0013      	movs	r3, r2
 80080dc:	43da      	mvns	r2, r3
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	4013      	ands	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	23a0      	movs	r3, #160	; 0xa0
 80080e8:	05db      	lsls	r3, r3, #23
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d019      	beq.n	8008122 <HAL_GPIO_Init+0x1ea>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a47      	ldr	r2, [pc, #284]	; (8008210 <HAL_GPIO_Init+0x2d8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <HAL_GPIO_Init+0x1e6>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a46      	ldr	r2, [pc, #280]	; (8008214 <HAL_GPIO_Init+0x2dc>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00d      	beq.n	800811a <HAL_GPIO_Init+0x1e2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a45      	ldr	r2, [pc, #276]	; (8008218 <HAL_GPIO_Init+0x2e0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d007      	beq.n	8008116 <HAL_GPIO_Init+0x1de>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a44      	ldr	r2, [pc, #272]	; (800821c <HAL_GPIO_Init+0x2e4>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d101      	bne.n	8008112 <HAL_GPIO_Init+0x1da>
 800810e:	2305      	movs	r3, #5
 8008110:	e008      	b.n	8008124 <HAL_GPIO_Init+0x1ec>
 8008112:	2306      	movs	r3, #6
 8008114:	e006      	b.n	8008124 <HAL_GPIO_Init+0x1ec>
 8008116:	2303      	movs	r3, #3
 8008118:	e004      	b.n	8008124 <HAL_GPIO_Init+0x1ec>
 800811a:	2302      	movs	r3, #2
 800811c:	e002      	b.n	8008124 <HAL_GPIO_Init+0x1ec>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <HAL_GPIO_Init+0x1ec>
 8008122:	2300      	movs	r3, #0
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	2103      	movs	r1, #3
 8008128:	400a      	ands	r2, r1
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	4093      	lsls	r3, r2
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	4313      	orrs	r3, r2
 8008132:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008134:	4935      	ldr	r1, [pc, #212]	; (800820c <HAL_GPIO_Init+0x2d4>)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	089b      	lsrs	r3, r3, #2
 800813a:	3302      	adds	r3, #2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008142:	4b37      	ldr	r3, [pc, #220]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	43da      	mvns	r2, r3
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	4013      	ands	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	2380      	movs	r3, #128	; 0x80
 8008158:	025b      	lsls	r3, r3, #9
 800815a:	4013      	ands	r3, r2
 800815c:	d003      	beq.n	8008166 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008166:	4b2e      	ldr	r3, [pc, #184]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800816c:	4b2c      	ldr	r3, [pc, #176]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	43da      	mvns	r2, r3
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	4013      	ands	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	2380      	movs	r3, #128	; 0x80
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	4013      	ands	r3, r2
 8008186:	d003      	beq.n	8008190 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008190:	4b23      	ldr	r3, [pc, #140]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008196:	4b22      	ldr	r3, [pc, #136]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	43da      	mvns	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4013      	ands	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	2380      	movs	r3, #128	; 0x80
 80081ac:	035b      	lsls	r3, r3, #13
 80081ae:	4013      	ands	r3, r2
 80081b0:	d003      	beq.n	80081ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80081ba:	4b19      	ldr	r3, [pc, #100]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80081c0:	4b17      	ldr	r3, [pc, #92]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	43da      	mvns	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4013      	ands	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	039b      	lsls	r3, r3, #14
 80081d8:	4013      	ands	r3, r2
 80081da:	d003      	beq.n	80081e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <HAL_GPIO_Init+0x2e8>)
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	3301      	adds	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	40da      	lsrs	r2, r3
 80081f8:	1e13      	subs	r3, r2, #0
 80081fa:	d000      	beq.n	80081fe <HAL_GPIO_Init+0x2c6>
 80081fc:	e6a8      	b.n	8007f50 <HAL_GPIO_Init+0x18>
  }
}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	46bd      	mov	sp, r7
 8008202:	b006      	add	sp, #24
 8008204:	bd80      	pop	{r7, pc}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	40021000 	.word	0x40021000
 800820c:	40010000 	.word	0x40010000
 8008210:	50000400 	.word	0x50000400
 8008214:	50000800 	.word	0x50000800
 8008218:	50000c00 	.word	0x50000c00
 800821c:	50001c00 	.word	0x50001c00
 8008220:	40010400 	.word	0x40010400

08008224 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	0008      	movs	r0, r1
 800822e:	0011      	movs	r1, r2
 8008230:	1cbb      	adds	r3, r7, #2
 8008232:	1c02      	adds	r2, r0, #0
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	1c7b      	adds	r3, r7, #1
 8008238:	1c0a      	adds	r2, r1, #0
 800823a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800823c:	1c7b      	adds	r3, r7, #1
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008244:	1cbb      	adds	r3, r7, #2
 8008246:	881a      	ldrh	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800824c:	e003      	b.n	8008256 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800824e:	1cbb      	adds	r3, r7, #2
 8008250:	881a      	ldrh	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	46bd      	mov	sp, r7
 800825a:	b002      	add	sp, #8
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	000a      	movs	r2, r1
 8008268:	1cbb      	adds	r3, r7, #2
 800826a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	1cbb      	adds	r3, r7, #2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	405a      	eors	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	615a      	str	r2, [r3, #20]
}
 800827a:	46c0      	nop			; (mov r8, r8)
 800827c:	46bd      	mov	sp, r7
 800827e:	b002      	add	sp, #8
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	0002      	movs	r2, r0
 800828c:	1dbb      	adds	r3, r7, #6
 800828e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	1dba      	adds	r2, r7, #6
 8008296:	8812      	ldrh	r2, [r2, #0]
 8008298:	4013      	ands	r3, r2
 800829a:	d008      	beq.n	80082ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800829e:	1dba      	adds	r2, r7, #6
 80082a0:	8812      	ldrh	r2, [r2, #0]
 80082a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082a4:	1dbb      	adds	r3, r7, #6
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f7fb fcd9 	bl	8003c60 <HAL_GPIO_EXTI_Callback>
  }
}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	46bd      	mov	sp, r7
 80082b2:	b002      	add	sp, #8
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	40010400 	.word	0x40010400

080082bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082bc:	b5b0      	push	{r4, r5, r7, lr}
 80082be:	b08a      	sub	sp, #40	; 0x28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f000 fbab 	bl	8008a26 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082d0:	4bce      	ldr	r3, [pc, #824]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	220c      	movs	r2, #12
 80082d6:	4013      	ands	r3, r2
 80082d8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082da:	4bcc      	ldr	r3, [pc, #816]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	2380      	movs	r3, #128	; 0x80
 80082e0:	025b      	lsls	r3, r3, #9
 80082e2:	4013      	ands	r3, r2
 80082e4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	4013      	ands	r3, r2
 80082ee:	d100      	bne.n	80082f2 <HAL_RCC_OscConfig+0x36>
 80082f0:	e07e      	b.n	80083f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d007      	beq.n	8008308 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	2b0c      	cmp	r3, #12
 80082fc:	d112      	bne.n	8008324 <HAL_RCC_OscConfig+0x68>
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	2380      	movs	r3, #128	; 0x80
 8008302:	025b      	lsls	r3, r3, #9
 8008304:	429a      	cmp	r2, r3
 8008306:	d10d      	bne.n	8008324 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008308:	4bc0      	ldr	r3, [pc, #768]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	2380      	movs	r3, #128	; 0x80
 800830e:	029b      	lsls	r3, r3, #10
 8008310:	4013      	ands	r3, r2
 8008312:	d100      	bne.n	8008316 <HAL_RCC_OscConfig+0x5a>
 8008314:	e06b      	b.n	80083ee <HAL_RCC_OscConfig+0x132>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d167      	bne.n	80083ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f000 fb81 	bl	8008a26 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	025b      	lsls	r3, r3, #9
 800832c:	429a      	cmp	r2, r3
 800832e:	d107      	bne.n	8008340 <HAL_RCC_OscConfig+0x84>
 8008330:	4bb6      	ldr	r3, [pc, #728]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4bb5      	ldr	r3, [pc, #724]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008336:	2180      	movs	r1, #128	; 0x80
 8008338:	0249      	lsls	r1, r1, #9
 800833a:	430a      	orrs	r2, r1
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e027      	b.n	8008390 <HAL_RCC_OscConfig+0xd4>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	23a0      	movs	r3, #160	; 0xa0
 8008346:	02db      	lsls	r3, r3, #11
 8008348:	429a      	cmp	r2, r3
 800834a:	d10e      	bne.n	800836a <HAL_RCC_OscConfig+0xae>
 800834c:	4baf      	ldr	r3, [pc, #700]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	4bae      	ldr	r3, [pc, #696]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008352:	2180      	movs	r1, #128	; 0x80
 8008354:	02c9      	lsls	r1, r1, #11
 8008356:	430a      	orrs	r2, r1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	4bac      	ldr	r3, [pc, #688]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4bab      	ldr	r3, [pc, #684]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008360:	2180      	movs	r1, #128	; 0x80
 8008362:	0249      	lsls	r1, r1, #9
 8008364:	430a      	orrs	r2, r1
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	e012      	b.n	8008390 <HAL_RCC_OscConfig+0xd4>
 800836a:	4ba8      	ldr	r3, [pc, #672]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4ba7      	ldr	r3, [pc, #668]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008370:	49a7      	ldr	r1, [pc, #668]	; (8008610 <HAL_RCC_OscConfig+0x354>)
 8008372:	400a      	ands	r2, r1
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	4ba5      	ldr	r3, [pc, #660]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	2380      	movs	r3, #128	; 0x80
 800837c:	025b      	lsls	r3, r3, #9
 800837e:	4013      	ands	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4ba1      	ldr	r3, [pc, #644]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	4ba0      	ldr	r3, [pc, #640]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800838a:	49a2      	ldr	r1, [pc, #648]	; (8008614 <HAL_RCC_OscConfig+0x358>)
 800838c:	400a      	ands	r2, r1
 800838e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d015      	beq.n	80083c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008398:	f7ff fca4 	bl	8007ce4 <HAL_GetTick>
 800839c:	0003      	movs	r3, r0
 800839e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083a0:	e009      	b.n	80083b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083a2:	f7ff fc9f 	bl	8007ce4 <HAL_GetTick>
 80083a6:	0002      	movs	r2, r0
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b64      	cmp	r3, #100	; 0x64
 80083ae:	d902      	bls.n	80083b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	f000 fb38 	bl	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083b6:	4b95      	ldr	r3, [pc, #596]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	2380      	movs	r3, #128	; 0x80
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	4013      	ands	r3, r2
 80083c0:	d0ef      	beq.n	80083a2 <HAL_RCC_OscConfig+0xe6>
 80083c2:	e015      	b.n	80083f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c4:	f7ff fc8e 	bl	8007ce4 <HAL_GetTick>
 80083c8:	0003      	movs	r3, r0
 80083ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083ce:	f7ff fc89 	bl	8007ce4 <HAL_GetTick>
 80083d2:	0002      	movs	r2, r0
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b64      	cmp	r3, #100	; 0x64
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e322      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083e0:	4b8a      	ldr	r3, [pc, #552]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	2380      	movs	r3, #128	; 0x80
 80083e6:	029b      	lsls	r3, r3, #10
 80083e8:	4013      	ands	r3, r2
 80083ea:	d1f0      	bne.n	80083ce <HAL_RCC_OscConfig+0x112>
 80083ec:	e000      	b.n	80083f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2202      	movs	r2, #2
 80083f6:	4013      	ands	r3, r2
 80083f8:	d100      	bne.n	80083fc <HAL_RCC_OscConfig+0x140>
 80083fa:	e08a      	b.n	8008512 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	2b04      	cmp	r3, #4
 8008406:	d005      	beq.n	8008414 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2b0c      	cmp	r3, #12
 800840c:	d13d      	bne.n	800848a <HAL_RCC_OscConfig+0x1ce>
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d13a      	bne.n	800848a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008414:	4b7d      	ldr	r3, [pc, #500]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2204      	movs	r2, #4
 800841a:	4013      	ands	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_RCC_OscConfig+0x16c>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e2fe      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008428:	4b78      	ldr	r3, [pc, #480]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	4a7a      	ldr	r2, [pc, #488]	; (8008618 <HAL_RCC_OscConfig+0x35c>)
 800842e:	4013      	ands	r3, r2
 8008430:	0019      	movs	r1, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	021a      	lsls	r2, r3, #8
 8008438:	4b74      	ldr	r3, [pc, #464]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800843a:	430a      	orrs	r2, r1
 800843c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800843e:	4b73      	ldr	r3, [pc, #460]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2209      	movs	r2, #9
 8008444:	4393      	bics	r3, r2
 8008446:	0019      	movs	r1, r3
 8008448:	4b70      	ldr	r3, [pc, #448]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	430a      	orrs	r2, r1
 800844e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008450:	f000 fc1e 	bl	8008c90 <HAL_RCC_GetSysClockFreq>
 8008454:	0001      	movs	r1, r0
 8008456:	4b6d      	ldr	r3, [pc, #436]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	091b      	lsrs	r3, r3, #4
 800845c:	220f      	movs	r2, #15
 800845e:	4013      	ands	r3, r2
 8008460:	4a6e      	ldr	r2, [pc, #440]	; (800861c <HAL_RCC_OscConfig+0x360>)
 8008462:	5cd3      	ldrb	r3, [r2, r3]
 8008464:	000a      	movs	r2, r1
 8008466:	40da      	lsrs	r2, r3
 8008468:	4b6d      	ldr	r3, [pc, #436]	; (8008620 <HAL_RCC_OscConfig+0x364>)
 800846a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800846c:	2513      	movs	r5, #19
 800846e:	197c      	adds	r4, r7, r5
 8008470:	2000      	movs	r0, #0
 8008472:	f7ff fc01 	bl	8007c78 <HAL_InitTick>
 8008476:	0003      	movs	r3, r0
 8008478:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800847a:	197b      	adds	r3, r7, r5
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d047      	beq.n	8008512 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8008482:	2313      	movs	r3, #19
 8008484:	18fb      	adds	r3, r7, r3
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	e2cd      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d027      	beq.n	80084e0 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008490:	4b5e      	ldr	r3, [pc, #376]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2209      	movs	r2, #9
 8008496:	4393      	bics	r3, r2
 8008498:	0019      	movs	r1, r3
 800849a:	4b5c      	ldr	r3, [pc, #368]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	430a      	orrs	r2, r1
 80084a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a2:	f7ff fc1f 	bl	8007ce4 <HAL_GetTick>
 80084a6:	0003      	movs	r3, r0
 80084a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084ac:	f7ff fc1a 	bl	8007ce4 <HAL_GetTick>
 80084b0:	0002      	movs	r2, r0
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e2b3      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084be:	4b53      	ldr	r3, [pc, #332]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2204      	movs	r2, #4
 80084c4:	4013      	ands	r3, r2
 80084c6:	d0f1      	beq.n	80084ac <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c8:	4b50      	ldr	r3, [pc, #320]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	4a52      	ldr	r2, [pc, #328]	; (8008618 <HAL_RCC_OscConfig+0x35c>)
 80084ce:	4013      	ands	r3, r2
 80084d0:	0019      	movs	r1, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	4b4c      	ldr	r3, [pc, #304]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80084da:	430a      	orrs	r2, r1
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	e018      	b.n	8008512 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084e0:	4b4a      	ldr	r3, [pc, #296]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	4b49      	ldr	r3, [pc, #292]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80084e6:	2101      	movs	r1, #1
 80084e8:	438a      	bics	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ec:	f7ff fbfa 	bl	8007ce4 <HAL_GetTick>
 80084f0:	0003      	movs	r3, r0
 80084f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084f6:	f7ff fbf5 	bl	8007ce4 <HAL_GetTick>
 80084fa:	0002      	movs	r2, r0
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e28e      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008508:	4b40      	ldr	r3, [pc, #256]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2204      	movs	r2, #4
 800850e:	4013      	ands	r3, r2
 8008510:	d1f1      	bne.n	80084f6 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2210      	movs	r2, #16
 8008518:	4013      	ands	r3, r2
 800851a:	d100      	bne.n	800851e <HAL_RCC_OscConfig+0x262>
 800851c:	e09e      	b.n	800865c <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d13f      	bne.n	80085a4 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008524:	4b39      	ldr	r3, [pc, #228]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	2380      	movs	r3, #128	; 0x80
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4013      	ands	r3, r2
 800852e:	d005      	beq.n	800853c <HAL_RCC_OscConfig+0x280>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e274      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800853c:	4b33      	ldr	r3, [pc, #204]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4a38      	ldr	r2, [pc, #224]	; (8008624 <HAL_RCC_OscConfig+0x368>)
 8008542:	4013      	ands	r3, r2
 8008544:	0019      	movs	r1, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800854a:	4b30      	ldr	r3, [pc, #192]	; (800860c <HAL_RCC_OscConfig+0x350>)
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008550:	4b2e      	ldr	r3, [pc, #184]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	0a19      	lsrs	r1, r3, #8
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	061a      	lsls	r2, r3, #24
 800855e:	4b2b      	ldr	r3, [pc, #172]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008560:	430a      	orrs	r2, r1
 8008562:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	0b5b      	lsrs	r3, r3, #13
 800856a:	3301      	adds	r3, #1
 800856c:	2280      	movs	r2, #128	; 0x80
 800856e:	0212      	lsls	r2, r2, #8
 8008570:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008572:	4b26      	ldr	r3, [pc, #152]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	091b      	lsrs	r3, r3, #4
 8008578:	210f      	movs	r1, #15
 800857a:	400b      	ands	r3, r1
 800857c:	4927      	ldr	r1, [pc, #156]	; (800861c <HAL_RCC_OscConfig+0x360>)
 800857e:	5ccb      	ldrb	r3, [r1, r3]
 8008580:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008582:	4b27      	ldr	r3, [pc, #156]	; (8008620 <HAL_RCC_OscConfig+0x364>)
 8008584:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8008586:	2513      	movs	r5, #19
 8008588:	197c      	adds	r4, r7, r5
 800858a:	2000      	movs	r0, #0
 800858c:	f7ff fb74 	bl	8007c78 <HAL_InitTick>
 8008590:	0003      	movs	r3, r0
 8008592:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008594:	197b      	adds	r3, r7, r5
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d05f      	beq.n	800865c <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 800859c:	2313      	movs	r3, #19
 800859e:	18fb      	adds	r3, r7, r3
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	e240      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d03d      	beq.n	8008628 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80085ac:	4b17      	ldr	r3, [pc, #92]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	4b16      	ldr	r3, [pc, #88]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80085b2:	2180      	movs	r1, #128	; 0x80
 80085b4:	0049      	lsls	r1, r1, #1
 80085b6:	430a      	orrs	r2, r1
 80085b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ba:	f7ff fb93 	bl	8007ce4 <HAL_GetTick>
 80085be:	0003      	movs	r3, r0
 80085c0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085c4:	f7ff fb8e 	bl	8007ce4 <HAL_GetTick>
 80085c8:	0002      	movs	r2, r0
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e227      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80085d6:	4b0d      	ldr	r3, [pc, #52]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	2380      	movs	r3, #128	; 0x80
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4013      	ands	r3, r2
 80085e0:	d0f0      	beq.n	80085c4 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4a0f      	ldr	r2, [pc, #60]	; (8008624 <HAL_RCC_OscConfig+0x368>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	0019      	movs	r1, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085f6:	4b05      	ldr	r3, [pc, #20]	; (800860c <HAL_RCC_OscConfig+0x350>)
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	0a19      	lsrs	r1, r3, #8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	061a      	lsls	r2, r3, #24
 8008604:	4b01      	ldr	r3, [pc, #4]	; (800860c <HAL_RCC_OscConfig+0x350>)
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	e027      	b.n	800865c <HAL_RCC_OscConfig+0x3a0>
 800860c:	40021000 	.word	0x40021000
 8008610:	fffeffff 	.word	0xfffeffff
 8008614:	fffbffff 	.word	0xfffbffff
 8008618:	ffffe0ff 	.word	0xffffe0ff
 800861c:	0800ae4c 	.word	0x0800ae4c
 8008620:	2000017c 	.word	0x2000017c
 8008624:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008628:	4bbd      	ldr	r3, [pc, #756]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	4bbc      	ldr	r3, [pc, #752]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 800862e:	49bd      	ldr	r1, [pc, #756]	; (8008924 <HAL_RCC_OscConfig+0x668>)
 8008630:	400a      	ands	r2, r1
 8008632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008634:	f7ff fb56 	bl	8007ce4 <HAL_GetTick>
 8008638:	0003      	movs	r3, r0
 800863a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800863c:	e008      	b.n	8008650 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800863e:	f7ff fb51 	bl	8007ce4 <HAL_GetTick>
 8008642:	0002      	movs	r2, r0
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d901      	bls.n	8008650 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e1ea      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008650:	4bb3      	ldr	r3, [pc, #716]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	2380      	movs	r3, #128	; 0x80
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4013      	ands	r3, r2
 800865a:	d1f0      	bne.n	800863e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2208      	movs	r2, #8
 8008662:	4013      	ands	r3, r2
 8008664:	d036      	beq.n	80086d4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d019      	beq.n	80086a2 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800866e:	4bac      	ldr	r3, [pc, #688]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008672:	4bab      	ldr	r3, [pc, #684]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008674:	2101      	movs	r1, #1
 8008676:	430a      	orrs	r2, r1
 8008678:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800867a:	f7ff fb33 	bl	8007ce4 <HAL_GetTick>
 800867e:	0003      	movs	r3, r0
 8008680:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008684:	f7ff fb2e 	bl	8007ce4 <HAL_GetTick>
 8008688:	0002      	movs	r2, r0
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e1c7      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008696:	4ba2      	ldr	r3, [pc, #648]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	2202      	movs	r2, #2
 800869c:	4013      	ands	r3, r2
 800869e:	d0f1      	beq.n	8008684 <HAL_RCC_OscConfig+0x3c8>
 80086a0:	e018      	b.n	80086d4 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086a2:	4b9f      	ldr	r3, [pc, #636]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80086a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086a6:	4b9e      	ldr	r3, [pc, #632]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80086a8:	2101      	movs	r1, #1
 80086aa:	438a      	bics	r2, r1
 80086ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ae:	f7ff fb19 	bl	8007ce4 <HAL_GetTick>
 80086b2:	0003      	movs	r3, r0
 80086b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086b8:	f7ff fb14 	bl	8007ce4 <HAL_GetTick>
 80086bc:	0002      	movs	r2, r0
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e1ad      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086ca:	4b95      	ldr	r3, [pc, #596]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80086cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ce:	2202      	movs	r2, #2
 80086d0:	4013      	ands	r3, r2
 80086d2:	d1f1      	bne.n	80086b8 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2204      	movs	r2, #4
 80086da:	4013      	ands	r3, r2
 80086dc:	d100      	bne.n	80086e0 <HAL_RCC_OscConfig+0x424>
 80086de:	e0af      	b.n	8008840 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086e0:	2327      	movs	r3, #39	; 0x27
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	2200      	movs	r2, #0
 80086e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086e8:	4b8d      	ldr	r3, [pc, #564]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80086ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ec:	2380      	movs	r3, #128	; 0x80
 80086ee:	055b      	lsls	r3, r3, #21
 80086f0:	4013      	ands	r3, r2
 80086f2:	d10a      	bne.n	800870a <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086f4:	4b8a      	ldr	r3, [pc, #552]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80086f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f8:	4b89      	ldr	r3, [pc, #548]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	0549      	lsls	r1, r1, #21
 80086fe:	430a      	orrs	r2, r1
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008702:	2327      	movs	r3, #39	; 0x27
 8008704:	18fb      	adds	r3, r7, r3
 8008706:	2201      	movs	r2, #1
 8008708:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800870a:	4b87      	ldr	r3, [pc, #540]	; (8008928 <HAL_RCC_OscConfig+0x66c>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	2380      	movs	r3, #128	; 0x80
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4013      	ands	r3, r2
 8008714:	d11a      	bne.n	800874c <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008716:	4b84      	ldr	r3, [pc, #528]	; (8008928 <HAL_RCC_OscConfig+0x66c>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4b83      	ldr	r3, [pc, #524]	; (8008928 <HAL_RCC_OscConfig+0x66c>)
 800871c:	2180      	movs	r1, #128	; 0x80
 800871e:	0049      	lsls	r1, r1, #1
 8008720:	430a      	orrs	r2, r1
 8008722:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008724:	f7ff fade 	bl	8007ce4 <HAL_GetTick>
 8008728:	0003      	movs	r3, r0
 800872a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800872c:	e008      	b.n	8008740 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872e:	f7ff fad9 	bl	8007ce4 <HAL_GetTick>
 8008732:	0002      	movs	r2, r0
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b64      	cmp	r3, #100	; 0x64
 800873a:	d901      	bls.n	8008740 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e172      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008740:	4b79      	ldr	r3, [pc, #484]	; (8008928 <HAL_RCC_OscConfig+0x66c>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	2380      	movs	r3, #128	; 0x80
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	4013      	ands	r3, r2
 800874a:	d0f0      	beq.n	800872e <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	429a      	cmp	r2, r3
 8008756:	d107      	bne.n	8008768 <HAL_RCC_OscConfig+0x4ac>
 8008758:	4b71      	ldr	r3, [pc, #452]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 800875a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800875c:	4b70      	ldr	r3, [pc, #448]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 800875e:	2180      	movs	r1, #128	; 0x80
 8008760:	0049      	lsls	r1, r1, #1
 8008762:	430a      	orrs	r2, r1
 8008764:	651a      	str	r2, [r3, #80]	; 0x50
 8008766:	e031      	b.n	80087cc <HAL_RCC_OscConfig+0x510>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10c      	bne.n	800878a <HAL_RCC_OscConfig+0x4ce>
 8008770:	4b6b      	ldr	r3, [pc, #428]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008774:	4b6a      	ldr	r3, [pc, #424]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008776:	496b      	ldr	r1, [pc, #428]	; (8008924 <HAL_RCC_OscConfig+0x668>)
 8008778:	400a      	ands	r2, r1
 800877a:	651a      	str	r2, [r3, #80]	; 0x50
 800877c:	4b68      	ldr	r3, [pc, #416]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 800877e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008780:	4b67      	ldr	r3, [pc, #412]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008782:	496a      	ldr	r1, [pc, #424]	; (800892c <HAL_RCC_OscConfig+0x670>)
 8008784:	400a      	ands	r2, r1
 8008786:	651a      	str	r2, [r3, #80]	; 0x50
 8008788:	e020      	b.n	80087cc <HAL_RCC_OscConfig+0x510>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	23a0      	movs	r3, #160	; 0xa0
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	429a      	cmp	r2, r3
 8008794:	d10e      	bne.n	80087b4 <HAL_RCC_OscConfig+0x4f8>
 8008796:	4b62      	ldr	r3, [pc, #392]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800879a:	4b61      	ldr	r3, [pc, #388]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 800879c:	2180      	movs	r1, #128	; 0x80
 800879e:	00c9      	lsls	r1, r1, #3
 80087a0:	430a      	orrs	r2, r1
 80087a2:	651a      	str	r2, [r3, #80]	; 0x50
 80087a4:	4b5e      	ldr	r3, [pc, #376]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80087a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087a8:	4b5d      	ldr	r3, [pc, #372]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80087aa:	2180      	movs	r1, #128	; 0x80
 80087ac:	0049      	lsls	r1, r1, #1
 80087ae:	430a      	orrs	r2, r1
 80087b0:	651a      	str	r2, [r3, #80]	; 0x50
 80087b2:	e00b      	b.n	80087cc <HAL_RCC_OscConfig+0x510>
 80087b4:	4b5a      	ldr	r3, [pc, #360]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80087b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087b8:	4b59      	ldr	r3, [pc, #356]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80087ba:	495a      	ldr	r1, [pc, #360]	; (8008924 <HAL_RCC_OscConfig+0x668>)
 80087bc:	400a      	ands	r2, r1
 80087be:	651a      	str	r2, [r3, #80]	; 0x50
 80087c0:	4b57      	ldr	r3, [pc, #348]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80087c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087c4:	4b56      	ldr	r3, [pc, #344]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80087c6:	4959      	ldr	r1, [pc, #356]	; (800892c <HAL_RCC_OscConfig+0x670>)
 80087c8:	400a      	ands	r2, r1
 80087ca:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d015      	beq.n	8008800 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087d4:	f7ff fa86 	bl	8007ce4 <HAL_GetTick>
 80087d8:	0003      	movs	r3, r0
 80087da:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087dc:	e009      	b.n	80087f2 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087de:	f7ff fa81 	bl	8007ce4 <HAL_GetTick>
 80087e2:	0002      	movs	r2, r0
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	4a51      	ldr	r2, [pc, #324]	; (8008930 <HAL_RCC_OscConfig+0x674>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e119      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087f2:	4b4b      	ldr	r3, [pc, #300]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80087f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087f6:	2380      	movs	r3, #128	; 0x80
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4013      	ands	r3, r2
 80087fc:	d0ef      	beq.n	80087de <HAL_RCC_OscConfig+0x522>
 80087fe:	e014      	b.n	800882a <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008800:	f7ff fa70 	bl	8007ce4 <HAL_GetTick>
 8008804:	0003      	movs	r3, r0
 8008806:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008808:	e009      	b.n	800881e <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800880a:	f7ff fa6b 	bl	8007ce4 <HAL_GetTick>
 800880e:	0002      	movs	r2, r0
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	4a46      	ldr	r2, [pc, #280]	; (8008930 <HAL_RCC_OscConfig+0x674>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e103      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800881e:	4b40      	ldr	r3, [pc, #256]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008822:	2380      	movs	r3, #128	; 0x80
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4013      	ands	r3, r2
 8008828:	d1ef      	bne.n	800880a <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800882a:	2327      	movs	r3, #39	; 0x27
 800882c:	18fb      	adds	r3, r7, r3
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d105      	bne.n	8008840 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008834:	4b3a      	ldr	r3, [pc, #232]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008838:	4b39      	ldr	r3, [pc, #228]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 800883a:	493e      	ldr	r1, [pc, #248]	; (8008934 <HAL_RCC_OscConfig+0x678>)
 800883c:	400a      	ands	r2, r1
 800883e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2220      	movs	r2, #32
 8008846:	4013      	ands	r3, r2
 8008848:	d049      	beq.n	80088de <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d026      	beq.n	80088a0 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008852:	4b33      	ldr	r3, [pc, #204]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	4b32      	ldr	r3, [pc, #200]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008858:	2101      	movs	r1, #1
 800885a:	430a      	orrs	r2, r1
 800885c:	609a      	str	r2, [r3, #8]
 800885e:	4b30      	ldr	r3, [pc, #192]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008862:	4b2f      	ldr	r3, [pc, #188]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008864:	2101      	movs	r1, #1
 8008866:	430a      	orrs	r2, r1
 8008868:	635a      	str	r2, [r3, #52]	; 0x34
 800886a:	4b33      	ldr	r3, [pc, #204]	; (8008938 <HAL_RCC_OscConfig+0x67c>)
 800886c:	6a1a      	ldr	r2, [r3, #32]
 800886e:	4b32      	ldr	r3, [pc, #200]	; (8008938 <HAL_RCC_OscConfig+0x67c>)
 8008870:	2180      	movs	r1, #128	; 0x80
 8008872:	0189      	lsls	r1, r1, #6
 8008874:	430a      	orrs	r2, r1
 8008876:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008878:	f7ff fa34 	bl	8007ce4 <HAL_GetTick>
 800887c:	0003      	movs	r3, r0
 800887e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008880:	e008      	b.n	8008894 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008882:	f7ff fa2f 	bl	8007ce4 <HAL_GetTick>
 8008886:	0002      	movs	r2, r0
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d901      	bls.n	8008894 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e0c8      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008894:	4b22      	ldr	r3, [pc, #136]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	2202      	movs	r2, #2
 800889a:	4013      	ands	r3, r2
 800889c:	d0f1      	beq.n	8008882 <HAL_RCC_OscConfig+0x5c6>
 800889e:	e01e      	b.n	80088de <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80088a0:	4b1f      	ldr	r3, [pc, #124]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	4b1e      	ldr	r3, [pc, #120]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80088a6:	2101      	movs	r1, #1
 80088a8:	438a      	bics	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]
 80088ac:	4b22      	ldr	r3, [pc, #136]	; (8008938 <HAL_RCC_OscConfig+0x67c>)
 80088ae:	6a1a      	ldr	r2, [r3, #32]
 80088b0:	4b21      	ldr	r3, [pc, #132]	; (8008938 <HAL_RCC_OscConfig+0x67c>)
 80088b2:	4922      	ldr	r1, [pc, #136]	; (800893c <HAL_RCC_OscConfig+0x680>)
 80088b4:	400a      	ands	r2, r1
 80088b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b8:	f7ff fa14 	bl	8007ce4 <HAL_GetTick>
 80088bc:	0003      	movs	r3, r0
 80088be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088c2:	f7ff fa0f 	bl	8007ce4 <HAL_GetTick>
 80088c6:	0002      	movs	r2, r0
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e0a8      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088d4:	4b12      	ldr	r3, [pc, #72]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2202      	movs	r2, #2
 80088da:	4013      	ands	r3, r2
 80088dc:	d1f1      	bne.n	80088c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d100      	bne.n	80088e8 <HAL_RCC_OscConfig+0x62c>
 80088e6:	e09d      	b.n	8008a24 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2b0c      	cmp	r3, #12
 80088ec:	d100      	bne.n	80088f0 <HAL_RCC_OscConfig+0x634>
 80088ee:	e076      	b.n	80089de <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d157      	bne.n	80089a8 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f8:	4b09      	ldr	r3, [pc, #36]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	4b08      	ldr	r3, [pc, #32]	; (8008920 <HAL_RCC_OscConfig+0x664>)
 80088fe:	4910      	ldr	r1, [pc, #64]	; (8008940 <HAL_RCC_OscConfig+0x684>)
 8008900:	400a      	ands	r2, r1
 8008902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008904:	f7ff f9ee 	bl	8007ce4 <HAL_GetTick>
 8008908:	0003      	movs	r3, r0
 800890a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800890c:	e01a      	b.n	8008944 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890e:	f7ff f9e9 	bl	8007ce4 <HAL_GetTick>
 8008912:	0002      	movs	r2, r0
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d913      	bls.n	8008944 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e082      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
 8008920:	40021000 	.word	0x40021000
 8008924:	fffffeff 	.word	0xfffffeff
 8008928:	40007000 	.word	0x40007000
 800892c:	fffffbff 	.word	0xfffffbff
 8008930:	00001388 	.word	0x00001388
 8008934:	efffffff 	.word	0xefffffff
 8008938:	40010000 	.word	0x40010000
 800893c:	ffffdfff 	.word	0xffffdfff
 8008940:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008944:	4b3a      	ldr	r3, [pc, #232]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	2380      	movs	r3, #128	; 0x80
 800894a:	049b      	lsls	r3, r3, #18
 800894c:	4013      	ands	r3, r2
 800894e:	d1de      	bne.n	800890e <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008950:	4b37      	ldr	r3, [pc, #220]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	4a37      	ldr	r2, [pc, #220]	; (8008a34 <HAL_RCC_OscConfig+0x778>)
 8008956:	4013      	ands	r3, r2
 8008958:	0019      	movs	r1, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008968:	431a      	orrs	r2, r3
 800896a:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 800896c:	430a      	orrs	r2, r1
 800896e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008970:	4b2f      	ldr	r3, [pc, #188]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	4b2e      	ldr	r3, [pc, #184]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 8008976:	2180      	movs	r1, #128	; 0x80
 8008978:	0449      	lsls	r1, r1, #17
 800897a:	430a      	orrs	r2, r1
 800897c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897e:	f7ff f9b1 	bl	8007ce4 <HAL_GetTick>
 8008982:	0003      	movs	r3, r0
 8008984:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008988:	f7ff f9ac 	bl	8007ce4 <HAL_GetTick>
 800898c:	0002      	movs	r2, r0
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e045      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800899a:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	2380      	movs	r3, #128	; 0x80
 80089a0:	049b      	lsls	r3, r3, #18
 80089a2:	4013      	ands	r3, r2
 80089a4:	d0f0      	beq.n	8008988 <HAL_RCC_OscConfig+0x6cc>
 80089a6:	e03d      	b.n	8008a24 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a8:	4b21      	ldr	r3, [pc, #132]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b20      	ldr	r3, [pc, #128]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 80089ae:	4922      	ldr	r1, [pc, #136]	; (8008a38 <HAL_RCC_OscConfig+0x77c>)
 80089b0:	400a      	ands	r2, r1
 80089b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b4:	f7ff f996 	bl	8007ce4 <HAL_GetTick>
 80089b8:	0003      	movs	r3, r0
 80089ba:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80089bc:	e008      	b.n	80089d0 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089be:	f7ff f991 	bl	8007ce4 <HAL_GetTick>
 80089c2:	0002      	movs	r2, r0
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e02a      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80089d0:	4b17      	ldr	r3, [pc, #92]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	2380      	movs	r3, #128	; 0x80
 80089d6:	049b      	lsls	r3, r3, #18
 80089d8:	4013      	ands	r3, r2
 80089da:	d1f0      	bne.n	80089be <HAL_RCC_OscConfig+0x702>
 80089dc:	e022      	b.n	8008a24 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e01d      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80089ea:	4b11      	ldr	r3, [pc, #68]	; (8008a30 <HAL_RCC_OscConfig+0x774>)
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	2380      	movs	r3, #128	; 0x80
 80089f4:	025b      	lsls	r3, r3, #9
 80089f6:	401a      	ands	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d10f      	bne.n	8008a20 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008a00:	69fa      	ldr	r2, [r7, #28]
 8008a02:	23f0      	movs	r3, #240	; 0xf0
 8008a04:	039b      	lsls	r3, r3, #14
 8008a06:	401a      	ands	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d107      	bne.n	8008a20 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008a10:	69fa      	ldr	r2, [r7, #28]
 8008a12:	23c0      	movs	r3, #192	; 0xc0
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	401a      	ands	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	0018      	movs	r0, r3
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b00a      	add	sp, #40	; 0x28
 8008a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	40021000 	.word	0x40021000
 8008a34:	ff02ffff 	.word	0xff02ffff
 8008a38:	feffffff 	.word	0xfeffffff

08008a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e10d      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a50:	4b88      	ldr	r3, [pc, #544]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	4013      	ands	r3, r2
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d911      	bls.n	8008a82 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5e:	4b85      	ldr	r3, [pc, #532]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2201      	movs	r2, #1
 8008a64:	4393      	bics	r3, r2
 8008a66:	0019      	movs	r1, r3
 8008a68:	4b82      	ldr	r3, [pc, #520]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a70:	4b80      	ldr	r3, [pc, #512]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2201      	movs	r2, #1
 8008a76:	4013      	ands	r3, r2
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d001      	beq.n	8008a82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e0f4      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2202      	movs	r2, #2
 8008a88:	4013      	ands	r3, r2
 8008a8a:	d009      	beq.n	8008aa0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a8c:	4b7a      	ldr	r3, [pc, #488]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	22f0      	movs	r2, #240	; 0xf0
 8008a92:	4393      	bics	r3, r2
 8008a94:	0019      	movs	r1, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	4b77      	ldr	r3, [pc, #476]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	d100      	bne.n	8008aac <HAL_RCC_ClockConfig+0x70>
 8008aaa:	e089      	b.n	8008bc0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d107      	bne.n	8008ac4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ab4:	4b70      	ldr	r3, [pc, #448]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	2380      	movs	r3, #128	; 0x80
 8008aba:	029b      	lsls	r3, r3, #10
 8008abc:	4013      	ands	r3, r2
 8008abe:	d120      	bne.n	8008b02 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e0d3      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d107      	bne.n	8008adc <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008acc:	4b6a      	ldr	r3, [pc, #424]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	2380      	movs	r3, #128	; 0x80
 8008ad2:	049b      	lsls	r3, r3, #18
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	d114      	bne.n	8008b02 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e0c7      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d106      	bne.n	8008af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ae4:	4b64      	ldr	r3, [pc, #400]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2204      	movs	r2, #4
 8008aea:	4013      	ands	r3, r2
 8008aec:	d109      	bne.n	8008b02 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e0bc      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008af2:	4b61      	ldr	r3, [pc, #388]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	2380      	movs	r3, #128	; 0x80
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4013      	ands	r3, r2
 8008afc:	d101      	bne.n	8008b02 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e0b4      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b02:	4b5d      	ldr	r3, [pc, #372]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	2203      	movs	r2, #3
 8008b08:	4393      	bics	r3, r2
 8008b0a:	0019      	movs	r1, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	4b59      	ldr	r3, [pc, #356]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008b12:	430a      	orrs	r2, r1
 8008b14:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b16:	f7ff f8e5 	bl	8007ce4 <HAL_GetTick>
 8008b1a:	0003      	movs	r3, r0
 8008b1c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d111      	bne.n	8008b4a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b26:	e009      	b.n	8008b3c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b28:	f7ff f8dc 	bl	8007ce4 <HAL_GetTick>
 8008b2c:	0002      	movs	r2, r0
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	4a52      	ldr	r2, [pc, #328]	; (8008c7c <HAL_RCC_ClockConfig+0x240>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e097      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b3c:	4b4e      	ldr	r3, [pc, #312]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	220c      	movs	r2, #12
 8008b42:	4013      	ands	r3, r2
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d1ef      	bne.n	8008b28 <HAL_RCC_ClockConfig+0xec>
 8008b48:	e03a      	b.n	8008bc0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d111      	bne.n	8008b76 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b52:	e009      	b.n	8008b68 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b54:	f7ff f8c6 	bl	8007ce4 <HAL_GetTick>
 8008b58:	0002      	movs	r2, r0
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	4a47      	ldr	r2, [pc, #284]	; (8008c7c <HAL_RCC_ClockConfig+0x240>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d901      	bls.n	8008b68 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e081      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b68:	4b43      	ldr	r3, [pc, #268]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	220c      	movs	r2, #12
 8008b6e:	4013      	ands	r3, r2
 8008b70:	2b0c      	cmp	r3, #12
 8008b72:	d1ef      	bne.n	8008b54 <HAL_RCC_ClockConfig+0x118>
 8008b74:	e024      	b.n	8008bc0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d11b      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b7e:	e009      	b.n	8008b94 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b80:	f7ff f8b0 	bl	8007ce4 <HAL_GetTick>
 8008b84:	0002      	movs	r2, r0
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	4a3c      	ldr	r2, [pc, #240]	; (8008c7c <HAL_RCC_ClockConfig+0x240>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e06b      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b94:	4b38      	ldr	r3, [pc, #224]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	220c      	movs	r2, #12
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d1ef      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x144>
 8008ba0:	e00e      	b.n	8008bc0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ba2:	f7ff f89f 	bl	8007ce4 <HAL_GetTick>
 8008ba6:	0002      	movs	r2, r0
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	4a33      	ldr	r2, [pc, #204]	; (8008c7c <HAL_RCC_ClockConfig+0x240>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e05a      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008bb6:	4b30      	ldr	r3, [pc, #192]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	220c      	movs	r2, #12
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	d1f0      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bc0:	4b2c      	ldr	r3, [pc, #176]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d211      	bcs.n	8008bf2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bce:	4b29      	ldr	r3, [pc, #164]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4393      	bics	r3, r2
 8008bd6:	0019      	movs	r1, r3
 8008bd8:	4b26      	ldr	r3, [pc, #152]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008be0:	4b24      	ldr	r3, [pc, #144]	; (8008c74 <HAL_RCC_ClockConfig+0x238>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2201      	movs	r2, #1
 8008be6:	4013      	ands	r3, r2
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d001      	beq.n	8008bf2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e03c      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	d009      	beq.n	8008c10 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bfc:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	4a1f      	ldr	r2, [pc, #124]	; (8008c80 <HAL_RCC_ClockConfig+0x244>)
 8008c02:	4013      	ands	r3, r2
 8008c04:	0019      	movs	r1, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2208      	movs	r2, #8
 8008c16:	4013      	ands	r3, r2
 8008c18:	d00a      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c1a:	4b17      	ldr	r3, [pc, #92]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	4a19      	ldr	r2, [pc, #100]	; (8008c84 <HAL_RCC_ClockConfig+0x248>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	0019      	movs	r1, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	00da      	lsls	r2, r3, #3
 8008c2a:	4b13      	ldr	r3, [pc, #76]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c30:	f000 f82e 	bl	8008c90 <HAL_RCC_GetSysClockFreq>
 8008c34:	0001      	movs	r1, r0
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <HAL_RCC_ClockConfig+0x23c>)
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	091b      	lsrs	r3, r3, #4
 8008c3c:	220f      	movs	r2, #15
 8008c3e:	4013      	ands	r3, r2
 8008c40:	4a11      	ldr	r2, [pc, #68]	; (8008c88 <HAL_RCC_ClockConfig+0x24c>)
 8008c42:	5cd3      	ldrb	r3, [r2, r3]
 8008c44:	000a      	movs	r2, r1
 8008c46:	40da      	lsrs	r2, r3
 8008c48:	4b10      	ldr	r3, [pc, #64]	; (8008c8c <HAL_RCC_ClockConfig+0x250>)
 8008c4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8008c4c:	250b      	movs	r5, #11
 8008c4e:	197c      	adds	r4, r7, r5
 8008c50:	2000      	movs	r0, #0
 8008c52:	f7ff f811 	bl	8007c78 <HAL_InitTick>
 8008c56:	0003      	movs	r3, r0
 8008c58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008c5a:	197b      	adds	r3, r7, r5
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8008c62:	230b      	movs	r3, #11
 8008c64:	18fb      	adds	r3, r7, r3
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	e000      	b.n	8008c6c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	b004      	add	sp, #16
 8008c72:	bdb0      	pop	{r4, r5, r7, pc}
 8008c74:	40022000 	.word	0x40022000
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	00001388 	.word	0x00001388
 8008c80:	fffff8ff 	.word	0xfffff8ff
 8008c84:	ffffc7ff 	.word	0xffffc7ff
 8008c88:	0800ae4c 	.word	0x0800ae4c
 8008c8c:	2000017c 	.word	0x2000017c

08008c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008c96:	4b3b      	ldr	r3, [pc, #236]	; (8008d84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	220c      	movs	r2, #12
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	2b08      	cmp	r3, #8
 8008ca4:	d00e      	beq.n	8008cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8008ca6:	2b0c      	cmp	r3, #12
 8008ca8:	d00f      	beq.n	8008cca <HAL_RCC_GetSysClockFreq+0x3a>
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d157      	bne.n	8008d5e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008cae:	4b35      	ldr	r3, [pc, #212]	; (8008d84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2210      	movs	r2, #16
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	d002      	beq.n	8008cbe <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008cb8:	4b33      	ldr	r3, [pc, #204]	; (8008d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008cba:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008cbc:	e05d      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8008cbe:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008cc0:	613b      	str	r3, [r7, #16]
      break;
 8008cc2:	e05a      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008cc4:	4b32      	ldr	r3, [pc, #200]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x100>)
 8008cc6:	613b      	str	r3, [r7, #16]
      break;
 8008cc8:	e057      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	0c9b      	lsrs	r3, r3, #18
 8008cce:	220f      	movs	r2, #15
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	4a30      	ldr	r2, [pc, #192]	; (8008d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8008cd4:	5cd3      	ldrb	r3, [r2, r3]
 8008cd6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	0d9b      	lsrs	r3, r3, #22
 8008cdc:	2203      	movs	r2, #3
 8008cde:	4013      	ands	r3, r2
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ce4:	4b27      	ldr	r3, [pc, #156]	; (8008d84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	2380      	movs	r3, #128	; 0x80
 8008cea:	025b      	lsls	r3, r3, #9
 8008cec:	4013      	ands	r3, r2
 8008cee:	d00f      	beq.n	8008d10 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	000a      	movs	r2, r1
 8008cf4:	0152      	lsls	r2, r2, #5
 8008cf6:	1a52      	subs	r2, r2, r1
 8008cf8:	0193      	lsls	r3, r2, #6
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	185b      	adds	r3, r3, r1
 8008d00:	025b      	lsls	r3, r3, #9
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	0018      	movs	r0, r3
 8008d06:	f7f7 f9ff 	bl	8000108 <__udivsi3>
 8008d0a:	0003      	movs	r3, r0
 8008d0c:	617b      	str	r3, [r7, #20]
 8008d0e:	e023      	b.n	8008d58 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008d10:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2210      	movs	r2, #16
 8008d16:	4013      	ands	r3, r2
 8008d18:	d00f      	beq.n	8008d3a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	000a      	movs	r2, r1
 8008d1e:	0152      	lsls	r2, r2, #5
 8008d20:	1a52      	subs	r2, r2, r1
 8008d22:	0193      	lsls	r3, r2, #6
 8008d24:	1a9b      	subs	r3, r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	185b      	adds	r3, r3, r1
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f7f7 f9ea 	bl	8000108 <__udivsi3>
 8008d34:	0003      	movs	r3, r0
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	e00e      	b.n	8008d58 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	000a      	movs	r2, r1
 8008d3e:	0152      	lsls	r2, r2, #5
 8008d40:	1a52      	subs	r2, r2, r1
 8008d42:	0193      	lsls	r3, r2, #6
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	185b      	adds	r3, r3, r1
 8008d4a:	029b      	lsls	r3, r3, #10
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	0018      	movs	r0, r3
 8008d50:	f7f7 f9da 	bl	8000108 <__udivsi3>
 8008d54:	0003      	movs	r3, r0
 8008d56:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	613b      	str	r3, [r7, #16]
      break;
 8008d5c:	e00d      	b.n	8008d7a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008d5e:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	0b5b      	lsrs	r3, r3, #13
 8008d64:	2207      	movs	r2, #7
 8008d66:	4013      	ands	r3, r2
 8008d68:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	2280      	movs	r2, #128	; 0x80
 8008d70:	0212      	lsls	r2, r2, #8
 8008d72:	409a      	lsls	r2, r3
 8008d74:	0013      	movs	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]
      break;
 8008d78:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008d7a:	693b      	ldr	r3, [r7, #16]
}
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	b006      	add	sp, #24
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40021000 	.word	0x40021000
 8008d88:	003d0900 	.word	0x003d0900
 8008d8c:	00f42400 	.word	0x00f42400
 8008d90:	007a1200 	.word	0x007a1200
 8008d94:	0800ae64 	.word	0x0800ae64

08008d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
}
 8008da0:	0018      	movs	r0, r3
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	2000017c 	.word	0x2000017c

08008dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008db0:	f7ff fff2 	bl	8008d98 <HAL_RCC_GetHCLKFreq>
 8008db4:	0001      	movs	r1, r0
 8008db6:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	0a1b      	lsrs	r3, r3, #8
 8008dbc:	2207      	movs	r2, #7
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	4a04      	ldr	r2, [pc, #16]	; (8008dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008dc2:	5cd3      	ldrb	r3, [r2, r3]
 8008dc4:	40d9      	lsrs	r1, r3
 8008dc6:	000b      	movs	r3, r1
}
 8008dc8:	0018      	movs	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	0800ae5c 	.word	0x0800ae5c

08008dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ddc:	f7ff ffdc 	bl	8008d98 <HAL_RCC_GetHCLKFreq>
 8008de0:	0001      	movs	r1, r0
 8008de2:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	0adb      	lsrs	r3, r3, #11
 8008de8:	2207      	movs	r2, #7
 8008dea:	4013      	ands	r3, r2
 8008dec:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008dee:	5cd3      	ldrb	r3, [r2, r3]
 8008df0:	40d9      	lsrs	r1, r3
 8008df2:	000b      	movs	r3, r1
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	46c0      	nop			; (mov r8, r8)
 8008dfc:	40021000 	.word	0x40021000
 8008e00:	0800ae5c 	.word	0x0800ae5c

08008e04 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2220      	movs	r2, #32
 8008e12:	4013      	ands	r3, r2
 8008e14:	d106      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	2380      	movs	r3, #128	; 0x80
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	4013      	ands	r3, r2
 8008e20:	d100      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008e22:	e0dd      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8008e24:	2317      	movs	r3, #23
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e2c:	4b9c      	ldr	r3, [pc, #624]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e30:	2380      	movs	r3, #128	; 0x80
 8008e32:	055b      	lsls	r3, r3, #21
 8008e34:	4013      	ands	r3, r2
 8008e36:	d10a      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e38:	4b99      	ldr	r3, [pc, #612]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e3c:	4b98      	ldr	r3, [pc, #608]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008e3e:	2180      	movs	r1, #128	; 0x80
 8008e40:	0549      	lsls	r1, r1, #21
 8008e42:	430a      	orrs	r2, r1
 8008e44:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008e46:	2317      	movs	r3, #23
 8008e48:	18fb      	adds	r3, r7, r3
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e4e:	4b95      	ldr	r3, [pc, #596]	; (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	2380      	movs	r3, #128	; 0x80
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	4013      	ands	r3, r2
 8008e58:	d11a      	bne.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e5a:	4b92      	ldr	r3, [pc, #584]	; (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	4b91      	ldr	r3, [pc, #580]	; (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008e60:	2180      	movs	r1, #128	; 0x80
 8008e62:	0049      	lsls	r1, r1, #1
 8008e64:	430a      	orrs	r2, r1
 8008e66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e68:	f7fe ff3c 	bl	8007ce4 <HAL_GetTick>
 8008e6c:	0003      	movs	r3, r0
 8008e6e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e70:	e008      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e72:	f7fe ff37 	bl	8007ce4 <HAL_GetTick>
 8008e76:	0002      	movs	r2, r0
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b64      	cmp	r3, #100	; 0x64
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e108      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e84:	4b87      	ldr	r3, [pc, #540]	; (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	2380      	movs	r3, #128	; 0x80
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	d0f0      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008e90:	4b83      	ldr	r3, [pc, #524]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	23c0      	movs	r3, #192	; 0xc0
 8008e96:	039b      	lsls	r3, r3, #14
 8008e98:	4013      	ands	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	23c0      	movs	r3, #192	; 0xc0
 8008ea2:	039b      	lsls	r3, r3, #14
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	23c0      	movs	r3, #192	; 0xc0
 8008eb2:	039b      	lsls	r3, r3, #14
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d013      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	23c0      	movs	r3, #192	; 0xc0
 8008ec2:	029b      	lsls	r3, r3, #10
 8008ec4:	401a      	ands	r2, r3
 8008ec6:	23c0      	movs	r3, #192	; 0xc0
 8008ec8:	029b      	lsls	r3, r3, #10
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d10a      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ece:	4b74      	ldr	r3, [pc, #464]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	2380      	movs	r3, #128	; 0x80
 8008ed4:	029b      	lsls	r3, r3, #10
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	2380      	movs	r3, #128	; 0x80
 8008eda:	029b      	lsls	r3, r3, #10
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d101      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e0d8      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008ee4:	4b6e      	ldr	r3, [pc, #440]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ee8:	23c0      	movs	r3, #192	; 0xc0
 8008eea:	029b      	lsls	r3, r3, #10
 8008eec:	4013      	ands	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d049      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	23c0      	movs	r3, #192	; 0xc0
 8008efc:	029b      	lsls	r3, r3, #10
 8008efe:	4013      	ands	r3, r2
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d004      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	d10d      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	23c0      	movs	r3, #192	; 0xc0
 8008f16:	029b      	lsls	r3, r3, #10
 8008f18:	4013      	ands	r3, r2
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d034      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	4013      	ands	r3, r2
 8008f2a:	d02e      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008f2c:	4b5c      	ldr	r3, [pc, #368]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f30:	4a5d      	ldr	r2, [pc, #372]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f36:	4b5a      	ldr	r3, [pc, #360]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f3a:	4b59      	ldr	r3, [pc, #356]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f3c:	2180      	movs	r1, #128	; 0x80
 8008f3e:	0309      	lsls	r1, r1, #12
 8008f40:	430a      	orrs	r2, r1
 8008f42:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f44:	4b56      	ldr	r3, [pc, #344]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f48:	4b55      	ldr	r3, [pc, #340]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f4a:	4958      	ldr	r1, [pc, #352]	; (80090ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008f4c:	400a      	ands	r2, r1
 8008f4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008f50:	4b53      	ldr	r3, [pc, #332]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	d014      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f60:	f7fe fec0 	bl	8007ce4 <HAL_GetTick>
 8008f64:	0003      	movs	r3, r0
 8008f66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f68:	e009      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f6a:	f7fe febb 	bl	8007ce4 <HAL_GetTick>
 8008f6e:	0002      	movs	r2, r0
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	4a4e      	ldr	r2, [pc, #312]	; (80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e08b      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f7e:	4b48      	ldr	r3, [pc, #288]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f82:	2380      	movs	r3, #128	; 0x80
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4013      	ands	r3, r2
 8008f88:	d0ef      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	23c0      	movs	r3, #192	; 0xc0
 8008f90:	029b      	lsls	r3, r3, #10
 8008f92:	401a      	ands	r2, r3
 8008f94:	23c0      	movs	r3, #192	; 0xc0
 8008f96:	029b      	lsls	r3, r3, #10
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d10c      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008f9c:	4b40      	ldr	r3, [pc, #256]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a44      	ldr	r2, [pc, #272]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	0019      	movs	r1, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	23c0      	movs	r3, #192	; 0xc0
 8008fac:	039b      	lsls	r3, r3, #14
 8008fae:	401a      	ands	r2, r3
 8008fb0:	4b3b      	ldr	r3, [pc, #236]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	4b3a      	ldr	r3, [pc, #232]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008fb8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	23c0      	movs	r3, #192	; 0xc0
 8008fc0:	029b      	lsls	r3, r3, #10
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	4b36      	ldr	r3, [pc, #216]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008fca:	2317      	movs	r3, #23
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d105      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fd4:	4b32      	ldr	r3, [pc, #200]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd8:	4b31      	ldr	r3, [pc, #196]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008fda:	4937      	ldr	r1, [pc, #220]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008fdc:	400a      	ands	r2, r1
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	d009      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fea:	4b2d      	ldr	r3, [pc, #180]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fee:	2203      	movs	r2, #3
 8008ff0:	4393      	bics	r3, r2
 8008ff2:	0019      	movs	r1, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	4b29      	ldr	r3, [pc, #164]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2202      	movs	r2, #2
 8009004:	4013      	ands	r3, r2
 8009006:	d009      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009008:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800900a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800900c:	220c      	movs	r2, #12
 800900e:	4393      	bics	r3, r2
 8009010:	0019      	movs	r1, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691a      	ldr	r2, [r3, #16]
 8009016:	4b22      	ldr	r3, [pc, #136]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009018:	430a      	orrs	r2, r1
 800901a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2204      	movs	r2, #4
 8009022:	4013      	ands	r3, r2
 8009024:	d009      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009026:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902a:	4a24      	ldr	r2, [pc, #144]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800902c:	4013      	ands	r3, r2
 800902e:	0019      	movs	r1, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009036:	430a      	orrs	r2, r1
 8009038:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2208      	movs	r2, #8
 8009040:	4013      	ands	r3, r2
 8009042:	d009      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009044:	4b16      	ldr	r3, [pc, #88]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009048:	4a1d      	ldr	r2, [pc, #116]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800904a:	4013      	ands	r3, r2
 800904c:	0019      	movs	r1, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	4b13      	ldr	r3, [pc, #76]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009054:	430a      	orrs	r2, r1
 8009056:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2240      	movs	r2, #64	; 0x40
 800905e:	4013      	ands	r3, r2
 8009060:	d009      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009062:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009066:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009068:	4013      	ands	r3, r2
 800906a:	0019      	movs	r1, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1a      	ldr	r2, [r3, #32]
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009072:	430a      	orrs	r2, r1
 8009074:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2280      	movs	r2, #128	; 0x80
 800907c:	4013      	ands	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009084:	4a10      	ldr	r2, [pc, #64]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009086:	4013      	ands	r3, r2
 8009088:	0019      	movs	r1, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69da      	ldr	r2, [r3, #28]
 800908e:	4b04      	ldr	r3, [pc, #16]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009090:	430a      	orrs	r2, r1
 8009092:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	0018      	movs	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	b006      	add	sp, #24
 800909c:	bd80      	pop	{r7, pc}
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	40021000 	.word	0x40021000
 80090a4:	40007000 	.word	0x40007000
 80090a8:	fffcffff 	.word	0xfffcffff
 80090ac:	fff7ffff 	.word	0xfff7ffff
 80090b0:	00001388 	.word	0x00001388
 80090b4:	ffcfffff 	.word	0xffcfffff
 80090b8:	efffffff 	.word	0xefffffff
 80090bc:	fffff3ff 	.word	0xfffff3ff
 80090c0:	ffffcfff 	.word	0xffffcfff
 80090c4:	fbffffff 	.word	0xfbffffff
 80090c8:	fff3ffff 	.word	0xfff3ffff

080090cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e05b      	b.n	8009196 <HAL_SPI_Init+0xca>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2251      	movs	r2, #81	; 0x51
 80090e2:	5c9b      	ldrb	r3, [r3, r2]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d107      	bne.n	80090fa <HAL_SPI_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2250      	movs	r2, #80	; 0x50
 80090ee:	2100      	movs	r1, #0
 80090f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0018      	movs	r0, r3
 80090f6:	f7fe f9af 	bl	8007458 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2251      	movs	r2, #81	; 0x51
 80090fe:	2102      	movs	r1, #2
 8009100:	5499      	strb	r1, [r3, r2]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2140      	movs	r1, #64	; 0x40
 800910e:	438a      	bics	r2, r1
 8009110:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	431a      	orrs	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6999      	ldr	r1, [r3, #24]
 8009132:	2380      	movs	r3, #128	; 0x80
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	400b      	ands	r3, r1
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	431a      	orrs	r2, r3
 8009146:	0011      	movs	r1, r2
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	0c1b      	lsrs	r3, r3, #16
 800915a:	2204      	movs	r2, #4
 800915c:	4013      	ands	r3, r2
 800915e:	0019      	movs	r1, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009174:	611a      	str	r2, [r3, #16]

#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4907      	ldr	r1, [pc, #28]	; (80091a0 <HAL_SPI_Init+0xd4>)
 8009182:	400a      	ands	r2, r1
 8009184:	61da      	str	r2, [r3, #28]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2251      	movs	r2, #81	; 0x51
 8009190:	2101      	movs	r1, #1
 8009192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	0018      	movs	r0, r3
 8009198:	46bd      	mov	sp, r7
 800919a:	b002      	add	sp, #8
 800919c:	bd80      	pop	{r7, pc}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	fffff7ff 	.word	0xfffff7ff

080091a4 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e01b      	b.n	80091ee <HAL_SPI_DeInit+0x4a>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2251      	movs	r2, #81	; 0x51
 80091ba:	2102      	movs	r1, #2
 80091bc:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2140      	movs	r1, #64	; 0x40
 80091ca:	438a      	bics	r2, r1
 80091cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	0018      	movs	r0, r3
 80091d2:	f000 f810 	bl	80091f6 <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2251      	movs	r2, #81	; 0x51
 80091e0:	2100      	movs	r1, #0
 80091e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2250      	movs	r2, #80	; 0x50
 80091e8:	2100      	movs	r1, #0
 80091ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	0018      	movs	r0, r3
 80091f0:	46bd      	mov	sp, r7
 80091f2:	b002      	add	sp, #8
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit could be implenetd in the user file
   */
}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	46bd      	mov	sp, r7
 8009202:	b002      	add	sp, #8
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	1dbb      	adds	r3, r7, #6
 8009216:	801a      	strh	r2, [r3, #0]

  if(hspi->State == HAL_SPI_STATE_READY)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2251      	movs	r2, #81	; 0x51
 800921c:	5c9b      	ldrb	r3, [r3, r2]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b01      	cmp	r3, #1
 8009222:	d000      	beq.n	8009226 <HAL_SPI_Transmit+0x1e>
 8009224:	e139      	b.n	800949a <HAL_SPI_Transmit+0x292>
  {
    if((pData == NULL ) || (Size == 0U))
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_SPI_Transmit+0x2c>
 800922c:	1dbb      	adds	r3, r7, #6
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_SPI_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e131      	b.n	800949c <HAL_SPI_Transmit+0x294>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2250      	movs	r2, #80	; 0x50
 800923c:	5c9b      	ldrb	r3, [r3, r2]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_SPI_Transmit+0x3e>
 8009242:	2302      	movs	r3, #2
 8009244:	e12a      	b.n	800949c <HAL_SPI_Transmit+0x294>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2250      	movs	r2, #80	; 0x50
 800924a:	2101      	movs	r1, #1
 800924c:	5499      	strb	r1, [r3, r2]

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2251      	movs	r2, #81	; 0x51
 8009252:	2112      	movs	r1, #18
 8009254:	5499      	strb	r1, [r3, r2]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pTxBuffPtr  = pData;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1dba      	adds	r2, r7, #6
 8009266:	8812      	ldrh	r2, [r2, #0]
 8009268:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	1dba      	adds	r2, r7, #6
 800926e:	8812      	ldrh	r2, [r2, #0]
 8009270:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->TxISR = 0U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->RxISR = 0U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = 0U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = 0U;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009294:	2380      	movs	r3, #128	; 0x80
 8009296:	019b      	lsls	r3, r3, #6
 8009298:	429a      	cmp	r2, r3
 800929a:	d110      	bne.n	80092be <HAL_SPI_Transmit+0xb6>
    {
      SPI_RESET_CRC(hspi);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	497f      	ldr	r1, [pc, #508]	; (80094a4 <HAL_SPI_Transmit+0x29c>)
 80092a8:	400a      	ands	r2, r1
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2180      	movs	r1, #128	; 0x80
 80092b8:	0189      	lsls	r1, r1, #6
 80092ba:	430a      	orrs	r2, r1
 80092bc:	601a      	str	r2, [r3, #0]
    }

    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	2380      	movs	r3, #128	; 0x80
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d108      	bne.n	80092dc <HAL_SPI_Transmit+0xd4>
    {
      /* Configure communication direction : 1Line */
      SPI_1LINE_TX(hspi);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2180      	movs	r1, #128	; 0x80
 80092d6:	01c9      	lsls	r1, r1, #7
 80092d8:	430a      	orrs	r2, r1
 80092da:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2240      	movs	r2, #64	; 0x40
 80092e4:	4013      	ands	r3, r2
 80092e6:	2b40      	cmp	r3, #64	; 0x40
 80092e8:	d007      	beq.n	80092fa <HAL_SPI_Transmit+0xf2>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2140      	movs	r1, #64	; 0x40
 80092f6:	430a      	orrs	r2, r1
 80092f8:	601a      	str	r2, [r3, #0]
    }

    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d148      	bne.n	8009394 <HAL_SPI_Transmit+0x18c>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01U))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <HAL_SPI_Transmit+0x10c>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b01      	cmp	r3, #1
 8009312:	d12a      	bne.n	800936a <HAL_SPI_Transmit+0x162>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	1c59      	adds	r1, r3, #1
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	6311      	str	r1, [r2, #48]	; 0x30
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0U)
 8009334:	e019      	b.n	800936a <HAL_SPI_Transmit+0x162>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	2102      	movs	r1, #2
 800933e:	f000 fb37 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 8009342:	1e03      	subs	r3, r0, #0
 8009344:	d001      	beq.n	800934a <HAL_SPI_Transmit+0x142>
        {
          return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e0a8      	b.n	800949c <HAL_SPI_Transmit+0x294>
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934e:	1c59      	adds	r1, r3, #1
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	6311      	str	r1, [r2, #48]	; 0x30
 8009354:	781a      	ldrb	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009360:	b29b      	uxth	r3, r3
 8009362:	3b01      	subs	r3, #1
 8009364:	b29a      	uxth	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	86da      	strh	r2, [r3, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800936e:	b29b      	uxth	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e0      	bne.n	8009336 <HAL_SPI_Transmit+0x12e>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009378:	2380      	movs	r3, #128	; 0x80
 800937a:	019b      	lsls	r3, r3, #6
 800937c:	429a      	cmp	r2, r3
 800937e:	d155      	bne.n	800942c <HAL_SPI_Transmit+0x224>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2180      	movs	r1, #128	; 0x80
 800938c:	0149      	lsls	r1, r1, #5
 800938e:	430a      	orrs	r2, r1
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	e04b      	b.n	800942c <HAL_SPI_Transmit+0x224>
      }
    }
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <HAL_SPI_Transmit+0x19e>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d12e      	bne.n	8009404 <HAL_SPI_Transmit+0x1fc>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	881a      	ldrh	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b6:	1c9a      	adds	r2, r3, #2
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0U)
 80093ca:	e01b      	b.n	8009404 <HAL_SPI_Transmit+0x1fc>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	2102      	movs	r1, #2
 80093d4:	f000 faec 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 80093d8:	1e03      	subs	r3, r0, #0
 80093da:	d001      	beq.n	80093e0 <HAL_SPI_Transmit+0x1d8>
        {
          return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e05d      	b.n	800949c <HAL_SPI_Transmit+0x294>
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	881a      	ldrh	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	1c9a      	adds	r2, r3, #2
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	86da      	strh	r2, [r3, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009408:	b29b      	uxth	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1de      	bne.n	80093cc <HAL_SPI_Transmit+0x1c4>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009412:	2380      	movs	r3, #128	; 0x80
 8009414:	019b      	lsls	r3, r3, #6
 8009416:	429a      	cmp	r2, r3
 8009418:	d108      	bne.n	800942c <HAL_SPI_Transmit+0x224>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2180      	movs	r1, #128	; 0x80
 8009426:	0149      	lsls	r1, r1, #5
 8009428:	430a      	orrs	r2, r1
 800942a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	2102      	movs	r1, #2
 8009434:	f000 fabc 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 8009438:	1e03      	subs	r3, r0, #0
 800943a:	d007      	beq.n	800944c <HAL_SPI_Transmit+0x244>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009440:	2220      	movs	r2, #32
 8009442:	431a      	orrs	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e027      	b.n	800949c <HAL_SPI_Transmit+0x294>
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	2180      	movs	r1, #128	; 0x80
 8009454:	f000 faac 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 8009458:	1e03      	subs	r3, r0, #0
 800945a:	d007      	beq.n	800946c <HAL_SPI_Transmit+0x264>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009460:	2220      	movs	r2, #32
 8009462:	431a      	orrs	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e017      	b.n	800949c <HAL_SPI_Transmit+0x294>
    }

    /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d108      	bne.n	8009486 <HAL_SPI_Transmit+0x27e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	697b      	ldr	r3, [r7, #20]
    }

    hspi->State = HAL_SPI_STATE_READY;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2251      	movs	r2, #81	; 0x51
 800948a:	2101      	movs	r1, #1
 800948c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2250      	movs	r2, #80	; 0x50
 8009492:	2100      	movs	r1, #0
 8009494:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	e000      	b.n	800949c <HAL_SPI_Transmit+0x294>
  }
  else
  {
    return HAL_BUSY;
 800949a:	2302      	movs	r3, #2
  }
}
 800949c:	0018      	movs	r0, r3
 800949e:	46bd      	mov	sp, r7
 80094a0:	b006      	add	sp, #24
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	ffffdfff 	.word	0xffffdfff

080094a8 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	001a      	movs	r2, r3
 80094b6:	1cbb      	adds	r3, r7, #2
 80094b8:	801a      	strh	r2, [r3, #0]
  __IO uint16_t tmpreg = 0U;
 80094ba:	2316      	movs	r3, #22
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	2200      	movs	r2, #0
 80094c0:	801a      	strh	r2, [r3, #0]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2251      	movs	r2, #81	; 0x51
 80094c6:	5c9b      	ldrb	r3, [r3, r2]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d006      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x34>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2251      	movs	r2, #81	; 0x51
 80094d2:	5c9b      	ldrb	r3, [r3, r2]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b22      	cmp	r3, #34	; 0x22
 80094d8:	d000      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x34>
 80094da:	e255      	b.n	8009988 <HAL_SPI_TransmitReceive+0x4e0>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d006      	beq.n	80094f0 <HAL_SPI_TransmitReceive+0x48>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d003      	beq.n	80094f0 <HAL_SPI_TransmitReceive+0x48>
 80094e8:	1cbb      	adds	r3, r7, #2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <HAL_SPI_TransmitReceive+0x4c>
    {
      return  HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e24a      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2250      	movs	r2, #80	; 0x50
 80094f8:	5c9b      	ldrb	r3, [r3, r2]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_SPI_TransmitReceive+0x5a>
 80094fe:	2302      	movs	r3, #2
 8009500:	e243      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2250      	movs	r2, #80	; 0x50
 8009506:	2101      	movs	r1, #1
 8009508:	5499      	strb	r1, [r3, r2]

    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2251      	movs	r2, #81	; 0x51
 800950e:	5c9b      	ldrb	r3, [r3, r2]
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b01      	cmp	r3, #1
 8009514:	d103      	bne.n	800951e <HAL_SPI_TransmitReceive+0x76>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2251      	movs	r2, #81	; 0x51
 800951a:	2132      	movs	r1, #50	; 0x32
 800951c:	5499      	strb	r1, [r3, r2]
    }

     /* Configure communication */
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	1cba      	adds	r2, r7, #2
 800952e:	8812      	ldrh	r2, [r2, #0]
 8009530:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1cba      	adds	r2, r7, #2
 8009536:	8812      	ldrh	r2, [r2, #0]
 8009538:	87da      	strh	r2, [r3, #62]	; 0x3e

    hspi->pTxBuffPtr  = pTxData;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	1cba      	adds	r2, r7, #2
 8009544:	8812      	ldrh	r2, [r2, #0]
 8009546:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	1cba      	adds	r2, r7, #2
 800954c:	8812      	ldrh	r2, [r2, #0]
 800954e:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009560:	2380      	movs	r3, #128	; 0x80
 8009562:	019b      	lsls	r3, r3, #6
 8009564:	429a      	cmp	r2, r3
 8009566:	d110      	bne.n	800958a <HAL_SPI_TransmitReceive+0xe2>
    {
      SPI_RESET_CRC(hspi);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	49ca      	ldr	r1, [pc, #808]	; (800989c <HAL_SPI_TransmitReceive+0x3f4>)
 8009574:	400a      	ands	r2, r1
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2180      	movs	r1, #128	; 0x80
 8009584:	0189      	lsls	r1, r1, #6
 8009586:	430a      	orrs	r2, r1
 8009588:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2240      	movs	r2, #64	; 0x40
 8009592:	4013      	ands	r3, r2
 8009594:	2b40      	cmp	r3, #64	; 0x40
 8009596:	d007      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x100>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2140      	movs	r1, #64	; 0x40
 80095a4:	430a      	orrs	r2, r1
 80095a6:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	2380      	movs	r3, #128	; 0x80
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d000      	beq.n	80095b6 <HAL_SPI_TransmitReceive+0x10e>
 80095b4:	e0c8      	b.n	8009748 <HAL_SPI_TransmitReceive+0x2a0>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <HAL_SPI_TransmitReceive+0x12c>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	2382      	movs	r3, #130	; 0x82
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d116      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x150>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d111      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x150>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	881a      	ldrh	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e4:	1c9a      	adds	r2, r3, #2
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	3b01      	subs	r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d000      	beq.n	8009604 <HAL_SPI_TransmitReceive+0x15c>
 8009602:	e079      	b.n	80096f8 <HAL_SPI_TransmitReceive+0x250>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009608:	2380      	movs	r3, #128	; 0x80
 800960a:	019b      	lsls	r3, r3, #6
 800960c:	429a      	cmp	r2, r3
 800960e:	d108      	bne.n	8009622 <HAL_SPI_TransmitReceive+0x17a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2180      	movs	r1, #128	; 0x80
 800961c:	0149      	lsls	r1, r1, #5
 800961e:	430a      	orrs	r2, r1
 8009620:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	2101      	movs	r1, #1
 800962a:	f000 f9c1 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 800962e:	1e03      	subs	r3, r0, #0
 8009630:	d001      	beq.n	8009636 <HAL_SPI_TransmitReceive+0x18e>
        {
          return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e1a9      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	b292      	uxth	r2, r2
 8009642:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	1c9a      	adds	r2, r3, #2
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800965c:	e131      	b.n	80098c2 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	2102      	movs	r1, #2
 8009666:	f000 f9a3 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 800966a:	1e03      	subs	r3, r0, #0
 800966c:	d001      	beq.n	8009672 <HAL_SPI_TransmitReceive+0x1ca>
          {
            return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e18b      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009676:	881a      	ldrh	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	1c9a      	adds	r2, r3, #2
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800968c:	b29b      	uxth	r3, r3
 800968e:	3b01      	subs	r3, #1
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10e      	bne.n	80096be <HAL_SPI_TransmitReceive+0x216>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096a4:	2380      	movs	r3, #128	; 0x80
 80096a6:	019b      	lsls	r3, r3, #6
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d108      	bne.n	80096be <HAL_SPI_TransmitReceive+0x216>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2180      	movs	r1, #128	; 0x80
 80096b8:	0149      	lsls	r1, r1, #5
 80096ba:	430a      	orrs	r2, r1
 80096bc:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	2101      	movs	r1, #1
 80096c6:	f000 f973 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 80096ca:	1e03      	subs	r3, r0, #0
 80096cc:	d001      	beq.n	80096d2 <HAL_SPI_TransmitReceive+0x22a>
          {
            return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e15b      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68da      	ldr	r2, [r3, #12]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	b292      	uxth	r2, r2
 80096de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e4:	1c9a      	adds	r2, r3, #2
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1ad      	bne.n	800965e <HAL_SPI_TransmitReceive+0x1b6>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d000      	beq.n	800970c <HAL_SPI_TransmitReceive+0x264>
 800970a:	e0da      	b.n	80098c2 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	2101      	movs	r1, #1
 8009714:	f000 f94c 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 8009718:	1e03      	subs	r3, r0, #0
 800971a:	d001      	beq.n	8009720 <HAL_SPI_TransmitReceive+0x278>
          {
            return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e134      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	b292      	uxth	r2, r2
 800972c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	1c9a      	adds	r2, r3, #2
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009746:	e0bc      	b.n	80098c2 <HAL_SPI_TransmitReceive+0x41a>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <HAL_SPI_TransmitReceive+0x2be>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	2382      	movs	r3, #130	; 0x82
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	429a      	cmp	r2, r3
 800975a:	d114      	bne.n	8009786 <HAL_SPI_TransmitReceive+0x2de>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	d10f      	bne.n	8009786 <HAL_SPI_TransmitReceive+0x2de>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976a:	1c59      	adds	r1, r3, #1
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	6311      	str	r1, [r2, #48]	; 0x30
 8009770:	781a      	ldrb	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800977c:	b29b      	uxth	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800978a:	b29b      	uxth	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d000      	beq.n	8009792 <HAL_SPI_TransmitReceive+0x2ea>
 8009790:	e070      	b.n	8009874 <HAL_SPI_TransmitReceive+0x3cc>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009796:	2380      	movs	r3, #128	; 0x80
 8009798:	019b      	lsls	r3, r3, #6
 800979a:	429a      	cmp	r2, r3
 800979c:	d108      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x308>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2180      	movs	r1, #128	; 0x80
 80097aa:	0149      	lsls	r1, r1, #5
 80097ac:	430a      	orrs	r2, r1
 80097ae:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	2101      	movs	r1, #1
 80097b8:	f000 f8fa 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 80097bc:	1e03      	subs	r3, r0, #0
 80097be:	d001      	beq.n	80097c4 <HAL_SPI_TransmitReceive+0x31c>
        {
          return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e0e2      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097e0:	e06f      	b.n	80098c2 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	2102      	movs	r1, #2
 80097ea:	f000 f8e1 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 80097ee:	1e03      	subs	r3, r0, #0
 80097f0:	d001      	beq.n	80097f6 <HAL_SPI_TransmitReceive+0x34e>
          {
            return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e0c9      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	1c59      	adds	r1, r3, #1
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	6311      	str	r1, [r2, #48]	; 0x30
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b29a      	uxth	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800981a:	b29b      	uxth	r3, r3
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10e      	bne.n	800983e <HAL_SPI_TransmitReceive+0x396>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009824:	2380      	movs	r3, #128	; 0x80
 8009826:	019b      	lsls	r3, r3, #6
 8009828:	429a      	cmp	r2, r3
 800982a:	d108      	bne.n	800983e <HAL_SPI_TransmitReceive+0x396>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2180      	movs	r1, #128	; 0x80
 8009838:	0149      	lsls	r1, r1, #5
 800983a:	430a      	orrs	r2, r1
 800983c:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	2101      	movs	r1, #1
 8009846:	f000 f8b3 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 800984a:	1e03      	subs	r3, r0, #0
 800984c:	d001      	beq.n	8009852 <HAL_SPI_TransmitReceive+0x3aa>
          {
            return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e09b      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68d8      	ldr	r0, [r3, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	1c59      	adds	r1, r3, #1
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	6391      	str	r1, [r2, #56]	; 0x38
 8009862:	b2c2      	uxtb	r2, r0
 8009864:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800986a:	b29b      	uxth	r3, r3
 800986c:	3b01      	subs	r3, #1
 800986e:	b29a      	uxth	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009878:	b29b      	uxth	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1b1      	bne.n	80097e2 <HAL_SPI_TransmitReceive+0x33a>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d11d      	bne.n	80098c2 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	2101      	movs	r1, #1
 800988e:	f000 f88f 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 8009892:	1e03      	subs	r3, r0, #0
 8009894:	d004      	beq.n	80098a0 <HAL_SPI_TransmitReceive+0x3f8>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e077      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	ffffdfff 	.word	0xffffdfff
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68d8      	ldr	r0, [r3, #12]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	1c59      	adds	r1, r3, #1
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	6391      	str	r1, [r2, #56]	; 0x38
 80098b0:	b2c2      	uxtb	r2, r0
 80098b2:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098c6:	2380      	movs	r3, #128	; 0x80
 80098c8:	019b      	lsls	r3, r3, #6
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d118      	bne.n	8009900 <HAL_SPI_TransmitReceive+0x458>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	2101      	movs	r1, #1
 80098d6:	f000 f86b 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 80098da:	1e03      	subs	r3, r0, #0
 80098dc:	d007      	beq.n	80098ee <HAL_SPI_TransmitReceive+0x446>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e2:	2202      	movs	r2, #2
 80098e4:	431a      	orrs	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e04d      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	2116      	movs	r1, #22
 80098f8:	187b      	adds	r3, r7, r1
 80098fa:	801a      	strh	r2, [r3, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 80098fc:	187b      	adds	r3, r7, r1
 80098fe:	881b      	ldrh	r3, [r3, #0]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	2201      	movs	r2, #1
 8009906:	2180      	movs	r1, #128	; 0x80
 8009908:	f000 f852 	bl	80099b0 <SPI_WaitOnFlagUntilTimeout>
 800990c:	1e03      	subs	r3, r0, #0
 800990e:	d007      	beq.n	8009920 <HAL_SPI_TransmitReceive+0x478>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009914:	2220      	movs	r2, #32
 8009916:	431a      	orrs	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e034      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
    }

    hspi->State = HAL_SPI_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2251      	movs	r2, #81	; 0x51
 8009924:	2101      	movs	r1, #1
 8009926:	5499      	strb	r1, [r3, r2]

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800992c:	2380      	movs	r3, #128	; 0x80
 800992e:	019b      	lsls	r3, r3, #6
 8009930:	429a      	cmp	r2, r3
 8009932:	d123      	bne.n	800997c <HAL_SPI_TransmitReceive+0x4d4>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	2210      	movs	r2, #16
 800993c:	4013      	ands	r3, r2
 800993e:	2b10      	cmp	r3, #16
 8009940:	d11c      	bne.n	800997c <HAL_SPI_TransmitReceive+0x4d4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009946:	2202      	movs	r2, #2
 8009948:	431a      	orrs	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	490e      	ldr	r1, [pc, #56]	; (8009994 <HAL_SPI_TransmitReceive+0x4ec>)
 800995a:	400a      	ands	r2, r1
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2180      	movs	r1, #128	; 0x80
 800996a:	0189      	lsls	r1, r1, #6
 800996c:	430a      	orrs	r2, r1
 800996e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2250      	movs	r2, #80	; 0x50
 8009974:	2100      	movs	r1, #0
 8009976:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e006      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2250      	movs	r2, #80	; 0x50
 8009980:	2100      	movs	r1, #0
 8009982:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	e000      	b.n	800998a <HAL_SPI_TransmitReceive+0x4e2>
  }
  else
  {
    return HAL_BUSY;
 8009988:	2302      	movs	r3, #2
  }
}
 800998a:	0018      	movs	r0, r3
 800998c:	46bd      	mov	sp, r7
 800998e:	b006      	add	sp, #24
 8009990:	bd80      	pop	{r7, pc}
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	ffffdfff 	.word	0xffffdfff

08009998 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  return hspi->State;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2251      	movs	r2, #81	; 0x51
 80099a4:	5c9b      	ldrb	r3, [r3, r2]
 80099a6:	b2db      	uxtb	r3, r3
}
 80099a8:	0018      	movs	r0, r3
 80099aa:	46bd      	mov	sp, r7
 80099ac:	b002      	add	sp, #8
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	1dfb      	adds	r3, r7, #7
 80099be:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80099c4:	f7fe f98e 	bl	8007ce4 <HAL_GetTick>
 80099c8:	0003      	movs	r3, r0
 80099ca:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80099cc:	1dfb      	adds	r3, r7, #7
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d000      	beq.n	80099d6 <SPI_WaitOnFlagUntilTimeout+0x26>
 80099d4:	e087      	b.n	8009ae6 <SPI_WaitOnFlagUntilTimeout+0x136>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80099d6:	e03e      	b.n	8009a56 <SPI_WaitOnFlagUntilTimeout+0xa6>
    {
      if(Timeout != HAL_MAX_DELAY)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	d03b      	beq.n	8009a56 <SPI_WaitOnFlagUntilTimeout+0xa6>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <SPI_WaitOnFlagUntilTimeout+0x44>
 80099e4:	f7fe f97e 	bl	8007ce4 <HAL_GetTick>
 80099e8:	0002      	movs	r2, r0
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d230      	bcs.n	8009a56 <SPI_WaitOnFlagUntilTimeout+0xa6>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	21e0      	movs	r1, #224	; 0xe0
 8009a00:	438a      	bics	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2140      	movs	r1, #64	; 0x40
 8009a10:	438a      	bics	r2, r1
 8009a12:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a18:	2380      	movs	r3, #128	; 0x80
 8009a1a:	019b      	lsls	r3, r3, #6
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d110      	bne.n	8009a42 <SPI_WaitOnFlagUntilTimeout+0x92>
          {
            SPI_RESET_CRC(hspi);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4935      	ldr	r1, [pc, #212]	; (8009b00 <SPI_WaitOnFlagUntilTimeout+0x150>)
 8009a2c:	400a      	ands	r2, r1
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2180      	movs	r1, #128	; 0x80
 8009a3c:	0189      	lsls	r1, r1, #6
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2251      	movs	r2, #81	; 0x51
 8009a46:	2101      	movs	r1, #1
 8009a48:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2250      	movs	r2, #80	; 0x50
 8009a4e:	2100      	movs	r1, #0
 8009a50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e050      	b.n	8009af8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	4013      	ands	r3, r2
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d1b8      	bne.n	80099d8 <SPI_WaitOnFlagUntilTimeout+0x28>
 8009a66:	e046      	b.n	8009af6 <SPI_WaitOnFlagUntilTimeout+0x146>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	d03b      	beq.n	8009ae6 <SPI_WaitOnFlagUntilTimeout+0x136>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d007      	beq.n	8009a84 <SPI_WaitOnFlagUntilTimeout+0xd4>
 8009a74:	f7fe f936 	bl	8007ce4 <HAL_GetTick>
 8009a78:	0002      	movs	r2, r0
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d230      	bcs.n	8009ae6 <SPI_WaitOnFlagUntilTimeout+0x136>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	21e0      	movs	r1, #224	; 0xe0
 8009a90:	438a      	bics	r2, r1
 8009a92:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2140      	movs	r1, #64	; 0x40
 8009aa0:	438a      	bics	r2, r1
 8009aa2:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009aa8:	2380      	movs	r3, #128	; 0x80
 8009aaa:	019b      	lsls	r3, r3, #6
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d110      	bne.n	8009ad2 <SPI_WaitOnFlagUntilTimeout+0x122>
          {
            SPI_RESET_CRC(hspi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4911      	ldr	r1, [pc, #68]	; (8009b00 <SPI_WaitOnFlagUntilTimeout+0x150>)
 8009abc:	400a      	ands	r2, r1
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2180      	movs	r1, #128	; 0x80
 8009acc:	0189      	lsls	r1, r1, #6
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2251      	movs	r2, #81	; 0x51
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2250      	movs	r2, #80	; 0x50
 8009ade:	2100      	movs	r1, #0
 8009ae0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e008      	b.n	8009af8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	4013      	ands	r3, r2
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d0b8      	beq.n	8009a68 <SPI_WaitOnFlagUntilTimeout+0xb8>
        }
      }
    }
  }
  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	0018      	movs	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	b006      	add	sp, #24
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	ffffdfff 	.word	0xffffdfff

08009b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e01e      	b.n	8009b54 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2239      	movs	r2, #57	; 0x39
 8009b1a:	5c9b      	ldrb	r3, [r3, r2]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d107      	bne.n	8009b32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2238      	movs	r2, #56	; 0x38
 8009b26:	2100      	movs	r1, #0
 8009b28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f000 f815 	bl	8009b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2239      	movs	r2, #57	; 0x39
 8009b36:	2102      	movs	r1, #2
 8009b38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3304      	adds	r3, #4
 8009b42:	0019      	movs	r1, r3
 8009b44:	0010      	movs	r0, r2
 8009b46:	f000 f9df 	bl	8009f08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2239      	movs	r2, #57	; 0x39
 8009b4e:	2101      	movs	r1, #1
 8009b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	0018      	movs	r0, r3
 8009b56:	46bd      	mov	sp, r7
 8009b58:	b002      	add	sp, #8
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b64:	46c0      	nop			; (mov r8, r8)
 8009b66:	46bd      	mov	sp, r7
 8009b68:	b002      	add	sp, #8
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d124      	bne.n	8009bcc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d11d      	bne.n	8009bcc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2203      	movs	r2, #3
 8009b96:	4252      	negs	r2, r2
 8009b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	4013      	ands	r3, r2
 8009baa:	d004      	beq.n	8009bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	0018      	movs	r0, r3
 8009bb0:	f000 f992 	bl	8009ed8 <HAL_TIM_IC_CaptureCallback>
 8009bb4:	e007      	b.n	8009bc6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f000 f985 	bl	8009ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f000 f991 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	d125      	bne.n	8009c26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	2204      	movs	r2, #4
 8009be2:	4013      	ands	r3, r2
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d11e      	bne.n	8009c26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2205      	movs	r2, #5
 8009bee:	4252      	negs	r2, r2
 8009bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	23c0      	movs	r3, #192	; 0xc0
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4013      	ands	r3, r2
 8009c04:	d004      	beq.n	8009c10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f000 f965 	bl	8009ed8 <HAL_TIM_IC_CaptureCallback>
 8009c0e:	e007      	b.n	8009c20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	0018      	movs	r0, r3
 8009c14:	f000 f958 	bl	8009ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f000 f964 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	2208      	movs	r2, #8
 8009c2e:	4013      	ands	r3, r2
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d124      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	2208      	movs	r2, #8
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b08      	cmp	r3, #8
 8009c40:	d11d      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2209      	movs	r2, #9
 8009c48:	4252      	negs	r2, r2
 8009c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2204      	movs	r2, #4
 8009c50:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	2203      	movs	r2, #3
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	d004      	beq.n	8009c68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	0018      	movs	r0, r3
 8009c62:	f000 f939 	bl	8009ed8 <HAL_TIM_IC_CaptureCallback>
 8009c66:	e007      	b.n	8009c78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	f000 f92c 	bl	8009ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	0018      	movs	r0, r3
 8009c74:	f000 f938 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2210      	movs	r2, #16
 8009c86:	4013      	ands	r3, r2
 8009c88:	2b10      	cmp	r3, #16
 8009c8a:	d125      	bne.n	8009cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	2210      	movs	r2, #16
 8009c94:	4013      	ands	r3, r2
 8009c96:	2b10      	cmp	r3, #16
 8009c98:	d11e      	bne.n	8009cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2211      	movs	r2, #17
 8009ca0:	4252      	negs	r2, r2
 8009ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2208      	movs	r2, #8
 8009ca8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	69da      	ldr	r2, [r3, #28]
 8009cb0:	23c0      	movs	r3, #192	; 0xc0
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f000 f90c 	bl	8009ed8 <HAL_TIM_IC_CaptureCallback>
 8009cc0:	e007      	b.n	8009cd2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	f000 f8ff 	bl	8009ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f000 f90b 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10f      	bne.n	8009d06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	4013      	ands	r3, r2
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d108      	bne.n	8009d06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	4252      	negs	r2, r2
 8009cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	0018      	movs	r0, r3
 8009d02:	f000 f8d9 	bl	8009eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2240      	movs	r2, #64	; 0x40
 8009d0e:	4013      	ands	r3, r2
 8009d10:	2b40      	cmp	r3, #64	; 0x40
 8009d12:	d10f      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	2240      	movs	r2, #64	; 0x40
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	2b40      	cmp	r3, #64	; 0x40
 8009d20:	d108      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2241      	movs	r2, #65	; 0x41
 8009d28:	4252      	negs	r2, r2
 8009d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f000 f8e2 	bl	8009ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d34:	46c0      	nop			; (mov r8, r8)
 8009d36:	46bd      	mov	sp, r7
 8009d38:	b002      	add	sp, #8
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2238      	movs	r2, #56	; 0x38
 8009d4a:	5c9b      	ldrb	r3, [r3, r2]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_TIM_ConfigClockSource+0x18>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e0ab      	b.n	8009eac <HAL_TIM_ConfigClockSource+0x170>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2238      	movs	r2, #56	; 0x38
 8009d58:	2101      	movs	r1, #1
 8009d5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2239      	movs	r2, #57	; 0x39
 8009d60:	2102      	movs	r1, #2
 8009d62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2277      	movs	r2, #119	; 0x77
 8009d70:	4393      	bics	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4a4f      	ldr	r2, [pc, #316]	; (8009eb4 <HAL_TIM_ConfigClockSource+0x178>)
 8009d78:	4013      	ands	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b40      	cmp	r3, #64	; 0x40
 8009d8a:	d100      	bne.n	8009d8e <HAL_TIM_ConfigClockSource+0x52>
 8009d8c:	e06b      	b.n	8009e66 <HAL_TIM_ConfigClockSource+0x12a>
 8009d8e:	d80e      	bhi.n	8009dae <HAL_TIM_ConfigClockSource+0x72>
 8009d90:	2b10      	cmp	r3, #16
 8009d92:	d100      	bne.n	8009d96 <HAL_TIM_ConfigClockSource+0x5a>
 8009d94:	e077      	b.n	8009e86 <HAL_TIM_ConfigClockSource+0x14a>
 8009d96:	d803      	bhi.n	8009da0 <HAL_TIM_ConfigClockSource+0x64>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d100      	bne.n	8009d9e <HAL_TIM_ConfigClockSource+0x62>
 8009d9c:	e073      	b.n	8009e86 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009d9e:	e07c      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d100      	bne.n	8009da6 <HAL_TIM_ConfigClockSource+0x6a>
 8009da4:	e06f      	b.n	8009e86 <HAL_TIM_ConfigClockSource+0x14a>
 8009da6:	2b30      	cmp	r3, #48	; 0x30
 8009da8:	d100      	bne.n	8009dac <HAL_TIM_ConfigClockSource+0x70>
 8009daa:	e06c      	b.n	8009e86 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8009dac:	e075      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009dae:	2b70      	cmp	r3, #112	; 0x70
 8009db0:	d00e      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0x94>
 8009db2:	d804      	bhi.n	8009dbe <HAL_TIM_ConfigClockSource+0x82>
 8009db4:	2b50      	cmp	r3, #80	; 0x50
 8009db6:	d036      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0xea>
 8009db8:	2b60      	cmp	r3, #96	; 0x60
 8009dba:	d044      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8009dbc:	e06d      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009dbe:	2280      	movs	r2, #128	; 0x80
 8009dc0:	0152      	lsls	r2, r2, #5
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d068      	beq.n	8009e98 <HAL_TIM_ConfigClockSource+0x15c>
 8009dc6:	2280      	movs	r2, #128	; 0x80
 8009dc8:	0192      	lsls	r2, r2, #6
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d017      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8009dce:	e064      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6818      	ldr	r0, [r3, #0]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	6899      	ldr	r1, [r3, #8]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f000 f960 	bl	800a0a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2277      	movs	r2, #119	; 0x77
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	609a      	str	r2, [r3, #8]
      break;
 8009dfc:	e04d      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	6899      	ldr	r1, [r3, #8]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	f000 f949 	bl	800a0a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2180      	movs	r1, #128	; 0x80
 8009e1e:	01c9      	lsls	r1, r1, #7
 8009e20:	430a      	orrs	r2, r1
 8009e22:	609a      	str	r2, [r3, #8]
      break;
 8009e24:	e039      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6818      	ldr	r0, [r3, #0]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6859      	ldr	r1, [r3, #4]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	001a      	movs	r2, r3
 8009e34:	f000 f8bc 	bl	8009fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2150      	movs	r1, #80	; 0x50
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f000 f916 	bl	800a070 <TIM_ITRx_SetConfig>
      break;
 8009e44:	e029      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6859      	ldr	r1, [r3, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	001a      	movs	r2, r3
 8009e54:	f000 f8da 	bl	800a00c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2160      	movs	r1, #96	; 0x60
 8009e5e:	0018      	movs	r0, r3
 8009e60:	f000 f906 	bl	800a070 <TIM_ITRx_SetConfig>
      break;
 8009e64:	e019      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	6859      	ldr	r1, [r3, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	001a      	movs	r2, r3
 8009e74:	f000 f89c 	bl	8009fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2140      	movs	r1, #64	; 0x40
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 f8f6 	bl	800a070 <TIM_ITRx_SetConfig>
      break;
 8009e84:	e009      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	0019      	movs	r1, r3
 8009e90:	0010      	movs	r0, r2
 8009e92:	f000 f8ed 	bl	800a070 <TIM_ITRx_SetConfig>
      break;
 8009e96:	e000      	b.n	8009e9a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8009e98:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2239      	movs	r2, #57	; 0x39
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2238      	movs	r2, #56	; 0x38
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	0018      	movs	r0, r3
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	b004      	add	sp, #16
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	ffff00ff 	.word	0xffff00ff

08009eb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ec0:	46c0      	nop			; (mov r8, r8)
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b002      	add	sp, #8
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ed0:	46c0      	nop			; (mov r8, r8)
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	b002      	add	sp, #8
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ee0:	46c0      	nop			; (mov r8, r8)
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	b002      	add	sp, #8
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ef0:	46c0      	nop			; (mov r8, r8)
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b002      	add	sp, #8
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f00:	46c0      	nop			; (mov r8, r8)
 8009f02:	46bd      	mov	sp, r7
 8009f04:	b002      	add	sp, #8
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	2380      	movs	r3, #128	; 0x80
 8009f1c:	05db      	lsls	r3, r3, #23
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d007      	beq.n	8009f32 <TIM_Base_SetConfig+0x2a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a1f      	ldr	r2, [pc, #124]	; (8009fa4 <TIM_Base_SetConfig+0x9c>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d003      	beq.n	8009f32 <TIM_Base_SetConfig+0x2a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <TIM_Base_SetConfig+0xa0>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d108      	bne.n	8009f44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2270      	movs	r2, #112	; 0x70
 8009f36:	4393      	bics	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	2380      	movs	r3, #128	; 0x80
 8009f48:	05db      	lsls	r3, r3, #23
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d007      	beq.n	8009f5e <TIM_Base_SetConfig+0x56>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a14      	ldr	r2, [pc, #80]	; (8009fa4 <TIM_Base_SetConfig+0x9c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d003      	beq.n	8009f5e <TIM_Base_SetConfig+0x56>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a13      	ldr	r2, [pc, #76]	; (8009fa8 <TIM_Base_SetConfig+0xa0>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d108      	bne.n	8009f70 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4a12      	ldr	r2, [pc, #72]	; (8009fac <TIM_Base_SetConfig+0xa4>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2280      	movs	r2, #128	; 0x80
 8009f74:	4393      	bics	r3, r2
 8009f76:	001a      	movs	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	615a      	str	r2, [r3, #20]
}
 8009f9c:	46c0      	nop			; (mov r8, r8)
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	b004      	add	sp, #16
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	40010800 	.word	0x40010800
 8009fa8:	40011400 	.word	0x40011400
 8009fac:	fffffcff 	.word	0xfffffcff

08009fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4393      	bics	r3, r2
 8009fca:	001a      	movs	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	22f0      	movs	r2, #240	; 0xf0
 8009fda:	4393      	bics	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	220a      	movs	r2, #10
 8009fec:	4393      	bics	r3, r2
 8009fee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	621a      	str	r2, [r3, #32]
}
 800a004:	46c0      	nop			; (mov r8, r8)
 800a006:	46bd      	mov	sp, r7
 800a008:	b006      	add	sp, #24
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	2210      	movs	r2, #16
 800a01e:	4393      	bics	r3, r2
 800a020:	001a      	movs	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <TIM_TI2_ConfigInputStage+0x60>)
 800a036:	4013      	ands	r3, r2
 800a038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	031b      	lsls	r3, r3, #12
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4313      	orrs	r3, r2
 800a042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	22a0      	movs	r2, #160	; 0xa0
 800a048:	4393      	bics	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	4313      	orrs	r3, r2
 800a054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	621a      	str	r2, [r3, #32]
}
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	46bd      	mov	sp, r7
 800a066:	b006      	add	sp, #24
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	ffff0fff 	.word	0xffff0fff

0800a070 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2270      	movs	r2, #112	; 0x70
 800a084:	4393      	bics	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	2207      	movs	r2, #7
 800a090:	4313      	orrs	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	609a      	str	r2, [r3, #8]
}
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	46bd      	mov	sp, r7
 800a09e:	b004      	add	sp, #16
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	4a09      	ldr	r2, [pc, #36]	; (800a0e0 <TIM_ETR_SetConfig+0x3c>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	021a      	lsls	r2, r3, #8
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	609a      	str	r2, [r3, #8]
}
 800a0d8:	46c0      	nop			; (mov r8, r8)
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	b006      	add	sp, #24
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	ffff00ff 	.word	0xffff00ff

0800a0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2238      	movs	r2, #56	; 0x38
 800a0f2:	5c9b      	ldrb	r3, [r3, r2]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d101      	bne.n	800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e032      	b.n	800a162 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2238      	movs	r2, #56	; 0x38
 800a100:	2101      	movs	r1, #1
 800a102:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2239      	movs	r2, #57	; 0x39
 800a108:	2102      	movs	r1, #2
 800a10a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2270      	movs	r2, #112	; 0x70
 800a120:	4393      	bics	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2280      	movs	r2, #128	; 0x80
 800a132:	4393      	bics	r3, r2
 800a134:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2239      	movs	r2, #57	; 0x39
 800a154:	2101      	movs	r1, #1
 800a156:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2238      	movs	r2, #56	; 0x38
 800a15c:	2100      	movs	r1, #0
 800a15e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b004      	add	sp, #16
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e044      	b.n	800a208 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a182:	2b00      	cmp	r3, #0
 800a184:	d107      	bne.n	800a196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2270      	movs	r2, #112	; 0x70
 800a18a:	2100      	movs	r1, #0
 800a18c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	0018      	movs	r0, r3
 800a192:	f000 f83f 	bl	800a214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2224      	movs	r2, #36	; 0x24
 800a19a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	438a      	bics	r2, r1
 800a1aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 f838 	bl	800a224 <UART_SetConfig>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d101      	bne.n	800a1be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e024      	b.n	800a208 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f000 fb43 	bl	800a854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	490d      	ldr	r1, [pc, #52]	; (800a210 <HAL_UART_Init+0xa4>)
 800a1da:	400a      	ands	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	212a      	movs	r1, #42	; 0x2a
 800a1ea:	438a      	bics	r2, r1
 800a1ec:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	0018      	movs	r0, r3
 800a202:	f000 fbdb 	bl	800a9bc <UART_CheckIdleState>
 800a206:	0003      	movs	r3, r0
}
 800a208:	0018      	movs	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	b002      	add	sp, #8
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	ffffb7ff 	.word	0xffffb7ff

0800a214 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a21c:	46c0      	nop			; (mov r8, r8)
 800a21e:	46bd      	mov	sp, r7
 800a220:	b002      	add	sp, #8
 800a222:	bd80      	pop	{r7, pc}

0800a224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a224:	b5b0      	push	{r4, r5, r7, lr}
 800a226:	b08e      	sub	sp, #56	; 0x38
 800a228:	af00      	add	r7, sp, #0
 800a22a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a22c:	231b      	movs	r3, #27
 800a22e:	2218      	movs	r2, #24
 800a230:	4694      	mov	ip, r2
 800a232:	44bc      	add	ip, r7
 800a234:	4463      	add	r3, ip
 800a236:	2210      	movs	r2, #16
 800a238:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800a23e:	2313      	movs	r3, #19
 800a240:	2218      	movs	r2, #24
 800a242:	4694      	mov	ip, r2
 800a244:	44bc      	add	ip, r7
 800a246:	4463      	add	r3, ip
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	431a      	orrs	r2, r3
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	431a      	orrs	r2, r3
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	4313      	orrs	r3, r2
 800a266:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4ac8      	ldr	r2, [pc, #800]	; (800a590 <UART_SetConfig+0x36c>)
 800a270:	4013      	ands	r3, r2
 800a272:	0019      	movs	r1, r3
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a27a:	430a      	orrs	r2, r1
 800a27c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	4ac3      	ldr	r2, [pc, #780]	; (800a594 <UART_SetConfig+0x370>)
 800a286:	4013      	ands	r3, r2
 800a288:	0019      	movs	r1, r3
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4abd      	ldr	r2, [pc, #756]	; (800a598 <UART_SetConfig+0x374>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d004      	beq.n	800a2b0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	4ab9      	ldr	r2, [pc, #740]	; (800a59c <UART_SetConfig+0x378>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	0019      	movs	r1, r3
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4ab5      	ldr	r2, [pc, #724]	; (800a5a0 <UART_SetConfig+0x37c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d134      	bne.n	800a33a <UART_SetConfig+0x116>
 800a2d0:	4bb4      	ldr	r3, [pc, #720]	; (800a5a4 <UART_SetConfig+0x380>)
 800a2d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d015      	beq.n	800a308 <UART_SetConfig+0xe4>
 800a2dc:	d304      	bcc.n	800a2e8 <UART_SetConfig+0xc4>
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d00a      	beq.n	800a2f8 <UART_SetConfig+0xd4>
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d018      	beq.n	800a318 <UART_SetConfig+0xf4>
 800a2e6:	e01f      	b.n	800a328 <UART_SetConfig+0x104>
 800a2e8:	231b      	movs	r3, #27
 800a2ea:	2218      	movs	r2, #24
 800a2ec:	4694      	mov	ip, r2
 800a2ee:	44bc      	add	ip, r7
 800a2f0:	4463      	add	r3, ip
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	e0ab      	b.n	800a450 <UART_SetConfig+0x22c>
 800a2f8:	231b      	movs	r3, #27
 800a2fa:	2218      	movs	r2, #24
 800a2fc:	4694      	mov	ip, r2
 800a2fe:	44bc      	add	ip, r7
 800a300:	4463      	add	r3, ip
 800a302:	2202      	movs	r2, #2
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	e0a3      	b.n	800a450 <UART_SetConfig+0x22c>
 800a308:	231b      	movs	r3, #27
 800a30a:	2218      	movs	r2, #24
 800a30c:	4694      	mov	ip, r2
 800a30e:	44bc      	add	ip, r7
 800a310:	4463      	add	r3, ip
 800a312:	2204      	movs	r2, #4
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	e09b      	b.n	800a450 <UART_SetConfig+0x22c>
 800a318:	231b      	movs	r3, #27
 800a31a:	2218      	movs	r2, #24
 800a31c:	4694      	mov	ip, r2
 800a31e:	44bc      	add	ip, r7
 800a320:	4463      	add	r3, ip
 800a322:	2208      	movs	r2, #8
 800a324:	701a      	strb	r2, [r3, #0]
 800a326:	e093      	b.n	800a450 <UART_SetConfig+0x22c>
 800a328:	231b      	movs	r3, #27
 800a32a:	2218      	movs	r2, #24
 800a32c:	4694      	mov	ip, r2
 800a32e:	44bc      	add	ip, r7
 800a330:	4463      	add	r3, ip
 800a332:	2210      	movs	r2, #16
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	e08a      	b.n	800a450 <UART_SetConfig+0x22c>
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a9a      	ldr	r2, [pc, #616]	; (800a5a8 <UART_SetConfig+0x384>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d137      	bne.n	800a3b4 <UART_SetConfig+0x190>
 800a344:	4b97      	ldr	r3, [pc, #604]	; (800a5a4 <UART_SetConfig+0x380>)
 800a346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a348:	220c      	movs	r2, #12
 800a34a:	4013      	ands	r3, r2
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d018      	beq.n	800a382 <UART_SetConfig+0x15e>
 800a350:	d802      	bhi.n	800a358 <UART_SetConfig+0x134>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <UART_SetConfig+0x13e>
 800a356:	e024      	b.n	800a3a2 <UART_SetConfig+0x17e>
 800a358:	2b08      	cmp	r3, #8
 800a35a:	d00a      	beq.n	800a372 <UART_SetConfig+0x14e>
 800a35c:	2b0c      	cmp	r3, #12
 800a35e:	d018      	beq.n	800a392 <UART_SetConfig+0x16e>
 800a360:	e01f      	b.n	800a3a2 <UART_SetConfig+0x17e>
 800a362:	231b      	movs	r3, #27
 800a364:	2218      	movs	r2, #24
 800a366:	4694      	mov	ip, r2
 800a368:	44bc      	add	ip, r7
 800a36a:	4463      	add	r3, ip
 800a36c:	2200      	movs	r2, #0
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	e06e      	b.n	800a450 <UART_SetConfig+0x22c>
 800a372:	231b      	movs	r3, #27
 800a374:	2218      	movs	r2, #24
 800a376:	4694      	mov	ip, r2
 800a378:	44bc      	add	ip, r7
 800a37a:	4463      	add	r3, ip
 800a37c:	2202      	movs	r2, #2
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	e066      	b.n	800a450 <UART_SetConfig+0x22c>
 800a382:	231b      	movs	r3, #27
 800a384:	2218      	movs	r2, #24
 800a386:	4694      	mov	ip, r2
 800a388:	44bc      	add	ip, r7
 800a38a:	4463      	add	r3, ip
 800a38c:	2204      	movs	r2, #4
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	e05e      	b.n	800a450 <UART_SetConfig+0x22c>
 800a392:	231b      	movs	r3, #27
 800a394:	2218      	movs	r2, #24
 800a396:	4694      	mov	ip, r2
 800a398:	44bc      	add	ip, r7
 800a39a:	4463      	add	r3, ip
 800a39c:	2208      	movs	r2, #8
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	e056      	b.n	800a450 <UART_SetConfig+0x22c>
 800a3a2:	231b      	movs	r3, #27
 800a3a4:	2218      	movs	r2, #24
 800a3a6:	4694      	mov	ip, r2
 800a3a8:	44bc      	add	ip, r7
 800a3aa:	4463      	add	r3, ip
 800a3ac:	2210      	movs	r2, #16
 800a3ae:	701a      	strb	r2, [r3, #0]
 800a3b0:	46c0      	nop			; (mov r8, r8)
 800a3b2:	e04d      	b.n	800a450 <UART_SetConfig+0x22c>
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a77      	ldr	r2, [pc, #476]	; (800a598 <UART_SetConfig+0x374>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d141      	bne.n	800a442 <UART_SetConfig+0x21e>
 800a3be:	4b79      	ldr	r3, [pc, #484]	; (800a5a4 <UART_SetConfig+0x380>)
 800a3c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3c2:	23c0      	movs	r3, #192	; 0xc0
 800a3c4:	011b      	lsls	r3, r3, #4
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	2280      	movs	r2, #128	; 0x80
 800a3ca:	00d2      	lsls	r2, r2, #3
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d01f      	beq.n	800a410 <UART_SetConfig+0x1ec>
 800a3d0:	2280      	movs	r2, #128	; 0x80
 800a3d2:	00d2      	lsls	r2, r2, #3
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d802      	bhi.n	800a3de <UART_SetConfig+0x1ba>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d009      	beq.n	800a3f0 <UART_SetConfig+0x1cc>
 800a3dc:	e028      	b.n	800a430 <UART_SetConfig+0x20c>
 800a3de:	2280      	movs	r2, #128	; 0x80
 800a3e0:	0112      	lsls	r2, r2, #4
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00c      	beq.n	800a400 <UART_SetConfig+0x1dc>
 800a3e6:	22c0      	movs	r2, #192	; 0xc0
 800a3e8:	0112      	lsls	r2, r2, #4
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d018      	beq.n	800a420 <UART_SetConfig+0x1fc>
 800a3ee:	e01f      	b.n	800a430 <UART_SetConfig+0x20c>
 800a3f0:	231b      	movs	r3, #27
 800a3f2:	2218      	movs	r2, #24
 800a3f4:	4694      	mov	ip, r2
 800a3f6:	44bc      	add	ip, r7
 800a3f8:	4463      	add	r3, ip
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	e027      	b.n	800a450 <UART_SetConfig+0x22c>
 800a400:	231b      	movs	r3, #27
 800a402:	2218      	movs	r2, #24
 800a404:	4694      	mov	ip, r2
 800a406:	44bc      	add	ip, r7
 800a408:	4463      	add	r3, ip
 800a40a:	2202      	movs	r2, #2
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	e01f      	b.n	800a450 <UART_SetConfig+0x22c>
 800a410:	231b      	movs	r3, #27
 800a412:	2218      	movs	r2, #24
 800a414:	4694      	mov	ip, r2
 800a416:	44bc      	add	ip, r7
 800a418:	4463      	add	r3, ip
 800a41a:	2204      	movs	r2, #4
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e017      	b.n	800a450 <UART_SetConfig+0x22c>
 800a420:	231b      	movs	r3, #27
 800a422:	2218      	movs	r2, #24
 800a424:	4694      	mov	ip, r2
 800a426:	44bc      	add	ip, r7
 800a428:	4463      	add	r3, ip
 800a42a:	2208      	movs	r2, #8
 800a42c:	701a      	strb	r2, [r3, #0]
 800a42e:	e00f      	b.n	800a450 <UART_SetConfig+0x22c>
 800a430:	231b      	movs	r3, #27
 800a432:	2218      	movs	r2, #24
 800a434:	4694      	mov	ip, r2
 800a436:	44bc      	add	ip, r7
 800a438:	4463      	add	r3, ip
 800a43a:	2210      	movs	r2, #16
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	e006      	b.n	800a450 <UART_SetConfig+0x22c>
 800a442:	231b      	movs	r3, #27
 800a444:	2218      	movs	r2, #24
 800a446:	4694      	mov	ip, r2
 800a448:	44bc      	add	ip, r7
 800a44a:	4463      	add	r3, ip
 800a44c:	2210      	movs	r2, #16
 800a44e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a50      	ldr	r2, [pc, #320]	; (800a598 <UART_SetConfig+0x374>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d000      	beq.n	800a45c <UART_SetConfig+0x238>
 800a45a:	e083      	b.n	800a564 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a45c:	231b      	movs	r3, #27
 800a45e:	2218      	movs	r2, #24
 800a460:	4694      	mov	ip, r2
 800a462:	44bc      	add	ip, r7
 800a464:	4463      	add	r3, ip
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d00d      	beq.n	800a488 <UART_SetConfig+0x264>
 800a46c:	dc02      	bgt.n	800a474 <UART_SetConfig+0x250>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <UART_SetConfig+0x25a>
 800a472:	e01d      	b.n	800a4b0 <UART_SetConfig+0x28c>
 800a474:	2b04      	cmp	r3, #4
 800a476:	d012      	beq.n	800a49e <UART_SetConfig+0x27a>
 800a478:	2b08      	cmp	r3, #8
 800a47a:	d015      	beq.n	800a4a8 <UART_SetConfig+0x284>
 800a47c:	e018      	b.n	800a4b0 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a47e:	f7fe fc95 	bl	8008dac <HAL_RCC_GetPCLK1Freq>
 800a482:	0003      	movs	r3, r0
 800a484:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a486:	e01b      	b.n	800a4c0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a488:	4b46      	ldr	r3, [pc, #280]	; (800a5a4 <UART_SetConfig+0x380>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2210      	movs	r2, #16
 800a48e:	4013      	ands	r3, r2
 800a490:	d002      	beq.n	800a498 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800a492:	4b46      	ldr	r3, [pc, #280]	; (800a5ac <UART_SetConfig+0x388>)
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800a496:	e013      	b.n	800a4c0 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a498:	4b45      	ldr	r3, [pc, #276]	; (800a5b0 <UART_SetConfig+0x38c>)
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a49c:	e010      	b.n	800a4c0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a49e:	f7fe fbf7 	bl	8008c90 <HAL_RCC_GetSysClockFreq>
 800a4a2:	0003      	movs	r3, r0
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4a6:	e00b      	b.n	800a4c0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a4a8:	2380      	movs	r3, #128	; 0x80
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4ae:	e007      	b.n	800a4c0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a4b0:	2313      	movs	r3, #19
 800a4b2:	2218      	movs	r2, #24
 800a4b4:	4694      	mov	ip, r2
 800a4b6:	44bc      	add	ip, r7
 800a4b8:	4463      	add	r3, ip
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	701a      	strb	r2, [r3, #0]
        break;
 800a4be:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d100      	bne.n	800a4c8 <UART_SetConfig+0x2a4>
 800a4c6:	e1a6      	b.n	800a816 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	0013      	movs	r3, r2
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	189b      	adds	r3, r3, r2
 800a4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d305      	bcc.n	800a4e4 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d907      	bls.n	800a4f4 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 800a4e4:	2313      	movs	r3, #19
 800a4e6:	2218      	movs	r2, #24
 800a4e8:	4694      	mov	ip, r2
 800a4ea:	44bc      	add	ip, r7
 800a4ec:	4463      	add	r3, ip
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	e190      	b.n	800a816 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	6939      	ldr	r1, [r7, #16]
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	000b      	movs	r3, r1
 800a502:	0e1b      	lsrs	r3, r3, #24
 800a504:	0010      	movs	r0, r2
 800a506:	0205      	lsls	r5, r0, #8
 800a508:	431d      	orrs	r5, r3
 800a50a:	000b      	movs	r3, r1
 800a50c:	021c      	lsls	r4, r3, #8
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	085b      	lsrs	r3, r3, #1
 800a514:	60bb      	str	r3, [r7, #8]
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
 800a51a:	68b8      	ldr	r0, [r7, #8]
 800a51c:	68f9      	ldr	r1, [r7, #12]
 800a51e:	1900      	adds	r0, r0, r4
 800a520:	4169      	adcs	r1, r5
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	2300      	movs	r3, #0
 800a52a:	607b      	str	r3, [r7, #4]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f7f5 ffd8 	bl	80004e4 <__aeabi_uldivmod>
 800a534:	0003      	movs	r3, r0
 800a536:	000c      	movs	r4, r1
 800a538:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	4a1d      	ldr	r2, [pc, #116]	; (800a5b4 <UART_SetConfig+0x390>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d908      	bls.n	800a554 <UART_SetConfig+0x330>
 800a542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a544:	4a1c      	ldr	r2, [pc, #112]	; (800a5b8 <UART_SetConfig+0x394>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d804      	bhi.n	800a554 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a550:	60da      	str	r2, [r3, #12]
 800a552:	e160      	b.n	800a816 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 800a554:	2313      	movs	r3, #19
 800a556:	2218      	movs	r2, #24
 800a558:	4694      	mov	ip, r2
 800a55a:	44bc      	add	ip, r7
 800a55c:	4463      	add	r3, ip
 800a55e:	2201      	movs	r2, #1
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	e158      	b.n	800a816 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	69da      	ldr	r2, [r3, #28]
 800a568:	2380      	movs	r3, #128	; 0x80
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d000      	beq.n	800a572 <UART_SetConfig+0x34e>
 800a570:	e0c3      	b.n	800a6fa <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 800a572:	231b      	movs	r3, #27
 800a574:	2218      	movs	r2, #24
 800a576:	4694      	mov	ip, r2
 800a578:	44bc      	add	ip, r7
 800a57a:	4463      	add	r3, ip
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d900      	bls.n	800a584 <UART_SetConfig+0x360>
 800a582:	e086      	b.n	800a692 <UART_SetConfig+0x46e>
 800a584:	009a      	lsls	r2, r3, #2
 800a586:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <UART_SetConfig+0x398>)
 800a588:	18d3      	adds	r3, r2, r3
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	469f      	mov	pc, r3
 800a58e:	46c0      	nop			; (mov r8, r8)
 800a590:	efff69f3 	.word	0xefff69f3
 800a594:	ffffcfff 	.word	0xffffcfff
 800a598:	40004800 	.word	0x40004800
 800a59c:	fffff4ff 	.word	0xfffff4ff
 800a5a0:	40013800 	.word	0x40013800
 800a5a4:	40021000 	.word	0x40021000
 800a5a8:	40004400 	.word	0x40004400
 800a5ac:	003d0900 	.word	0x003d0900
 800a5b0:	00f42400 	.word	0x00f42400
 800a5b4:	000002ff 	.word	0x000002ff
 800a5b8:	000fffff 	.word	0x000fffff
 800a5bc:	0800b014 	.word	0x0800b014
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a5c0:	f7fe fbf4 	bl	8008dac <HAL_RCC_GetPCLK1Freq>
 800a5c4:	0003      	movs	r3, r0
 800a5c6:	005a      	lsls	r2, r3, #1
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	085b      	lsrs	r3, r3, #1
 800a5ce:	18d2      	adds	r2, r2, r3
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	0019      	movs	r1, r3
 800a5d6:	0010      	movs	r0, r2
 800a5d8:	f7f5 fd96 	bl	8000108 <__udivsi3>
 800a5dc:	0003      	movs	r3, r0
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5e2:	e05e      	b.n	800a6a2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a5e4:	f7fe fbf8 	bl	8008dd8 <HAL_RCC_GetPCLK2Freq>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	005a      	lsls	r2, r3, #1
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	085b      	lsrs	r3, r3, #1
 800a5f2:	18d2      	adds	r2, r2, r3
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	0019      	movs	r1, r3
 800a5fa:	0010      	movs	r0, r2
 800a5fc:	f7f5 fd84 	bl	8000108 <__udivsi3>
 800a600:	0003      	movs	r3, r0
 800a602:	b29b      	uxth	r3, r3
 800a604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a606:	e04c      	b.n	800a6a2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a608:	4b8b      	ldr	r3, [pc, #556]	; (800a838 <UART_SetConfig+0x614>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2210      	movs	r2, #16
 800a60e:	4013      	ands	r3, r2
 800a610:	d00e      	beq.n	800a630 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	085b      	lsrs	r3, r3, #1
 800a618:	4a88      	ldr	r2, [pc, #544]	; (800a83c <UART_SetConfig+0x618>)
 800a61a:	189a      	adds	r2, r3, r2
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	0019      	movs	r1, r3
 800a622:	0010      	movs	r0, r2
 800a624:	f7f5 fd70 	bl	8000108 <__udivsi3>
 800a628:	0003      	movs	r3, r0
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800a62e:	e038      	b.n	800a6a2 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	085b      	lsrs	r3, r3, #1
 800a636:	4a82      	ldr	r2, [pc, #520]	; (800a840 <UART_SetConfig+0x61c>)
 800a638:	189a      	adds	r2, r3, r2
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	0019      	movs	r1, r3
 800a640:	0010      	movs	r0, r2
 800a642:	f7f5 fd61 	bl	8000108 <__udivsi3>
 800a646:	0003      	movs	r3, r0
 800a648:	b29b      	uxth	r3, r3
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a64c:	e029      	b.n	800a6a2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a64e:	f7fe fb1f 	bl	8008c90 <HAL_RCC_GetSysClockFreq>
 800a652:	0003      	movs	r3, r0
 800a654:	005a      	lsls	r2, r3, #1
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	085b      	lsrs	r3, r3, #1
 800a65c:	18d2      	adds	r2, r2, r3
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	0019      	movs	r1, r3
 800a664:	0010      	movs	r0, r2
 800a666:	f7f5 fd4f 	bl	8000108 <__udivsi3>
 800a66a:	0003      	movs	r3, r0
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a670:	e017      	b.n	800a6a2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	2280      	movs	r2, #128	; 0x80
 800a67a:	0252      	lsls	r2, r2, #9
 800a67c:	189a      	adds	r2, r3, r2
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	0019      	movs	r1, r3
 800a684:	0010      	movs	r0, r2
 800a686:	f7f5 fd3f 	bl	8000108 <__udivsi3>
 800a68a:	0003      	movs	r3, r0
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a690:	e007      	b.n	800a6a2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a692:	2313      	movs	r3, #19
 800a694:	2218      	movs	r2, #24
 800a696:	4694      	mov	ip, r2
 800a698:	44bc      	add	ip, r7
 800a69a:	4463      	add	r3, ip
 800a69c:	2201      	movs	r2, #1
 800a69e:	701a      	strb	r2, [r3, #0]
        break;
 800a6a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	2b0f      	cmp	r3, #15
 800a6a6:	d920      	bls.n	800a6ea <UART_SetConfig+0x4c6>
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	4a66      	ldr	r2, [pc, #408]	; (800a844 <UART_SetConfig+0x620>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d81c      	bhi.n	800a6ea <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	200a      	movs	r0, #10
 800a6b6:	2418      	movs	r4, #24
 800a6b8:	193b      	adds	r3, r7, r4
 800a6ba:	181b      	adds	r3, r3, r0
 800a6bc:	210f      	movs	r1, #15
 800a6be:	438a      	bics	r2, r1
 800a6c0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	085b      	lsrs	r3, r3, #1
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	2207      	movs	r2, #7
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	b299      	uxth	r1, r3
 800a6ce:	193b      	adds	r3, r7, r4
 800a6d0:	181b      	adds	r3, r3, r0
 800a6d2:	193a      	adds	r2, r7, r4
 800a6d4:	1812      	adds	r2, r2, r0
 800a6d6:	8812      	ldrh	r2, [r2, #0]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	193a      	adds	r2, r7, r4
 800a6e2:	1812      	adds	r2, r2, r0
 800a6e4:	8812      	ldrh	r2, [r2, #0]
 800a6e6:	60da      	str	r2, [r3, #12]
 800a6e8:	e095      	b.n	800a816 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 800a6ea:	2313      	movs	r3, #19
 800a6ec:	2218      	movs	r2, #24
 800a6ee:	4694      	mov	ip, r2
 800a6f0:	44bc      	add	ip, r7
 800a6f2:	4463      	add	r3, ip
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	701a      	strb	r2, [r3, #0]
 800a6f8:	e08d      	b.n	800a816 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 800a6fa:	231b      	movs	r3, #27
 800a6fc:	2218      	movs	r2, #24
 800a6fe:	4694      	mov	ip, r2
 800a700:	44bc      	add	ip, r7
 800a702:	4463      	add	r3, ip
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2b08      	cmp	r3, #8
 800a708:	d86a      	bhi.n	800a7e0 <UART_SetConfig+0x5bc>
 800a70a:	009a      	lsls	r2, r3, #2
 800a70c:	4b4e      	ldr	r3, [pc, #312]	; (800a848 <UART_SetConfig+0x624>)
 800a70e:	18d3      	adds	r3, r2, r3
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a714:	f7fe fb4a 	bl	8008dac <HAL_RCC_GetPCLK1Freq>
 800a718:	0002      	movs	r2, r0
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	18d2      	adds	r2, r2, r3
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	0019      	movs	r1, r3
 800a728:	0010      	movs	r0, r2
 800a72a:	f7f5 fced 	bl	8000108 <__udivsi3>
 800a72e:	0003      	movs	r3, r0
 800a730:	b29b      	uxth	r3, r3
 800a732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a734:	e05c      	b.n	800a7f0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a736:	f7fe fb4f 	bl	8008dd8 <HAL_RCC_GetPCLK2Freq>
 800a73a:	0002      	movs	r2, r0
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	085b      	lsrs	r3, r3, #1
 800a742:	18d2      	adds	r2, r2, r3
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	0019      	movs	r1, r3
 800a74a:	0010      	movs	r0, r2
 800a74c:	f7f5 fcdc 	bl	8000108 <__udivsi3>
 800a750:	0003      	movs	r3, r0
 800a752:	b29b      	uxth	r3, r3
 800a754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a756:	e04b      	b.n	800a7f0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a758:	4b37      	ldr	r3, [pc, #220]	; (800a838 <UART_SetConfig+0x614>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2210      	movs	r2, #16
 800a75e:	4013      	ands	r3, r2
 800a760:	d00e      	beq.n	800a780 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	085b      	lsrs	r3, r3, #1
 800a768:	4a38      	ldr	r2, [pc, #224]	; (800a84c <UART_SetConfig+0x628>)
 800a76a:	189a      	adds	r2, r3, r2
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	0019      	movs	r1, r3
 800a772:	0010      	movs	r0, r2
 800a774:	f7f5 fcc8 	bl	8000108 <__udivsi3>
 800a778:	0003      	movs	r3, r0
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800a77e:	e037      	b.n	800a7f0 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	4a32      	ldr	r2, [pc, #200]	; (800a850 <UART_SetConfig+0x62c>)
 800a788:	189a      	adds	r2, r3, r2
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	0019      	movs	r1, r3
 800a790:	0010      	movs	r0, r2
 800a792:	f7f5 fcb9 	bl	8000108 <__udivsi3>
 800a796:	0003      	movs	r3, r0
 800a798:	b29b      	uxth	r3, r3
 800a79a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a79c:	e028      	b.n	800a7f0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a79e:	f7fe fa77 	bl	8008c90 <HAL_RCC_GetSysClockFreq>
 800a7a2:	0002      	movs	r2, r0
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	085b      	lsrs	r3, r3, #1
 800a7aa:	18d2      	adds	r2, r2, r3
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	0019      	movs	r1, r3
 800a7b2:	0010      	movs	r0, r2
 800a7b4:	f7f5 fca8 	bl	8000108 <__udivsi3>
 800a7b8:	0003      	movs	r3, r0
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7be:	e017      	b.n	800a7f0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	085b      	lsrs	r3, r3, #1
 800a7c6:	2280      	movs	r2, #128	; 0x80
 800a7c8:	0212      	lsls	r2, r2, #8
 800a7ca:	189a      	adds	r2, r3, r2
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	0019      	movs	r1, r3
 800a7d2:	0010      	movs	r0, r2
 800a7d4:	f7f5 fc98 	bl	8000108 <__udivsi3>
 800a7d8:	0003      	movs	r3, r0
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7de:	e007      	b.n	800a7f0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a7e0:	2313      	movs	r3, #19
 800a7e2:	2218      	movs	r2, #24
 800a7e4:	4694      	mov	ip, r2
 800a7e6:	44bc      	add	ip, r7
 800a7e8:	4463      	add	r3, ip
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	701a      	strb	r2, [r3, #0]
        break;
 800a7ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	2b0f      	cmp	r3, #15
 800a7f4:	d908      	bls.n	800a808 <UART_SetConfig+0x5e4>
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	4a12      	ldr	r2, [pc, #72]	; (800a844 <UART_SetConfig+0x620>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d804      	bhi.n	800a808 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a804:	60da      	str	r2, [r3, #12]
 800a806:	e006      	b.n	800a816 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 800a808:	2313      	movs	r3, #19
 800a80a:	2218      	movs	r2, #24
 800a80c:	4694      	mov	ip, r2
 800a80e:	44bc      	add	ip, r7
 800a810:	4463      	add	r3, ip
 800a812:	2201      	movs	r2, #1
 800a814:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	2200      	movs	r2, #0
 800a81a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	2200      	movs	r2, #0
 800a820:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a822:	2313      	movs	r3, #19
 800a824:	2218      	movs	r2, #24
 800a826:	4694      	mov	ip, r2
 800a828:	44bc      	add	ip, r7
 800a82a:	4463      	add	r3, ip
 800a82c:	781b      	ldrb	r3, [r3, #0]
}
 800a82e:	0018      	movs	r0, r3
 800a830:	46bd      	mov	sp, r7
 800a832:	b00e      	add	sp, #56	; 0x38
 800a834:	bdb0      	pop	{r4, r5, r7, pc}
 800a836:	46c0      	nop			; (mov r8, r8)
 800a838:	40021000 	.word	0x40021000
 800a83c:	007a1200 	.word	0x007a1200
 800a840:	01e84800 	.word	0x01e84800
 800a844:	0000ffff 	.word	0x0000ffff
 800a848:	0800b038 	.word	0x0800b038
 800a84c:	003d0900 	.word	0x003d0900
 800a850:	00f42400 	.word	0x00f42400

0800a854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	2201      	movs	r2, #1
 800a862:	4013      	ands	r3, r2
 800a864:	d00b      	beq.n	800a87e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	4a4a      	ldr	r2, [pc, #296]	; (800a998 <UART_AdvFeatureConfig+0x144>)
 800a86e:	4013      	ands	r3, r2
 800a870:	0019      	movs	r1, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	2202      	movs	r2, #2
 800a884:	4013      	ands	r3, r2
 800a886:	d00b      	beq.n	800a8a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	4a43      	ldr	r2, [pc, #268]	; (800a99c <UART_AdvFeatureConfig+0x148>)
 800a890:	4013      	ands	r3, r2
 800a892:	0019      	movs	r1, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	430a      	orrs	r2, r1
 800a89e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2204      	movs	r2, #4
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	d00b      	beq.n	800a8c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4a3b      	ldr	r2, [pc, #236]	; (800a9a0 <UART_AdvFeatureConfig+0x14c>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	0019      	movs	r1, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2208      	movs	r2, #8
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	d00b      	beq.n	800a8e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	4a34      	ldr	r2, [pc, #208]	; (800a9a4 <UART_AdvFeatureConfig+0x150>)
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	0019      	movs	r1, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2210      	movs	r2, #16
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	d00b      	beq.n	800a906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	4a2c      	ldr	r2, [pc, #176]	; (800a9a8 <UART_AdvFeatureConfig+0x154>)
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90a:	2220      	movs	r2, #32
 800a90c:	4013      	ands	r3, r2
 800a90e:	d00b      	beq.n	800a928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	4a25      	ldr	r2, [pc, #148]	; (800a9ac <UART_AdvFeatureConfig+0x158>)
 800a918:	4013      	ands	r3, r2
 800a91a:	0019      	movs	r1, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	2240      	movs	r2, #64	; 0x40
 800a92e:	4013      	ands	r3, r2
 800a930:	d01d      	beq.n	800a96e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	4a1d      	ldr	r2, [pc, #116]	; (800a9b0 <UART_AdvFeatureConfig+0x15c>)
 800a93a:	4013      	ands	r3, r2
 800a93c:	0019      	movs	r1, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	430a      	orrs	r2, r1
 800a948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a94e:	2380      	movs	r3, #128	; 0x80
 800a950:	035b      	lsls	r3, r3, #13
 800a952:	429a      	cmp	r2, r3
 800a954:	d10b      	bne.n	800a96e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	4a15      	ldr	r2, [pc, #84]	; (800a9b4 <UART_AdvFeatureConfig+0x160>)
 800a95e:	4013      	ands	r3, r2
 800a960:	0019      	movs	r1, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	2280      	movs	r2, #128	; 0x80
 800a974:	4013      	ands	r3, r2
 800a976:	d00b      	beq.n	800a990 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	4a0e      	ldr	r2, [pc, #56]	; (800a9b8 <UART_AdvFeatureConfig+0x164>)
 800a980:	4013      	ands	r3, r2
 800a982:	0019      	movs	r1, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	605a      	str	r2, [r3, #4]
  }
}
 800a990:	46c0      	nop			; (mov r8, r8)
 800a992:	46bd      	mov	sp, r7
 800a994:	b002      	add	sp, #8
 800a996:	bd80      	pop	{r7, pc}
 800a998:	fffdffff 	.word	0xfffdffff
 800a99c:	fffeffff 	.word	0xfffeffff
 800a9a0:	fffbffff 	.word	0xfffbffff
 800a9a4:	ffff7fff 	.word	0xffff7fff
 800a9a8:	ffffefff 	.word	0xffffefff
 800a9ac:	ffffdfff 	.word	0xffffdfff
 800a9b0:	ffefffff 	.word	0xffefffff
 800a9b4:	ff9fffff 	.word	0xff9fffff
 800a9b8:	fff7ffff 	.word	0xfff7ffff

0800a9bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af02      	add	r7, sp, #8
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a9ca:	f7fd f98b 	bl	8007ce4 <HAL_GetTick>
 800a9ce:	0003      	movs	r3, r0
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2208      	movs	r2, #8
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d10d      	bne.n	800a9fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	2380      	movs	r3, #128	; 0x80
 800a9e4:	0399      	lsls	r1, r3, #14
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	4b16      	ldr	r3, [pc, #88]	; (800aa44 <UART_CheckIdleState+0x88>)
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	0013      	movs	r3, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f000 f82a 	bl	800aa48 <UART_WaitOnFlagUntilTimeout>
 800a9f4:	1e03      	subs	r3, r0, #0
 800a9f6:	d001      	beq.n	800a9fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e01f      	b.n	800aa3c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2204      	movs	r2, #4
 800aa04:	4013      	ands	r3, r2
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d10d      	bne.n	800aa26 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	2380      	movs	r3, #128	; 0x80
 800aa0e:	03d9      	lsls	r1, r3, #15
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <UART_CheckIdleState+0x88>)
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	0013      	movs	r3, r2
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f000 f815 	bl	800aa48 <UART_WaitOnFlagUntilTimeout>
 800aa1e:	1e03      	subs	r3, r0, #0
 800aa20:	d001      	beq.n	800aa26 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e00a      	b.n	800aa3c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2220      	movs	r2, #32
 800aa30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2270      	movs	r2, #112	; 0x70
 800aa36:	2100      	movs	r1, #0
 800aa38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	0018      	movs	r0, r3
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	b004      	add	sp, #16
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	01ffffff 	.word	0x01ffffff

0800aa48 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	1dfb      	adds	r3, r7, #7
 800aa56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa58:	e029      	b.n	800aaae <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	d026      	beq.n	800aaae <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa60:	f7fd f940 	bl	8007ce4 <HAL_GetTick>
 800aa64:	0002      	movs	r2, r0
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d302      	bcc.n	800aa76 <UART_WaitOnFlagUntilTimeout+0x2e>
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11b      	bne.n	800aaae <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4915      	ldr	r1, [pc, #84]	; (800aad8 <UART_WaitOnFlagUntilTimeout+0x90>)
 800aa82:	400a      	ands	r2, r1
 800aa84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2101      	movs	r1, #1
 800aa92:	438a      	bics	r2, r1
 800aa94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2270      	movs	r2, #112	; 0x70
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e00f      	b.n	800aace <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	4013      	ands	r3, r2
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	425a      	negs	r2, r3
 800aabe:	4153      	adcs	r3, r2
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	001a      	movs	r2, r3
 800aac4:	1dfb      	adds	r3, r7, #7
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d0c6      	beq.n	800aa5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	0018      	movs	r0, r3
 800aad0:	46bd      	mov	sp, r7
 800aad2:	b004      	add	sp, #16
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	fffffe5f 	.word	0xfffffe5f

0800aadc <__errno>:
 800aadc:	4b01      	ldr	r3, [pc, #4]	; (800aae4 <__errno+0x8>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	4770      	bx	lr
 800aae2:	46c0      	nop			; (mov r8, r8)
 800aae4:	200001a4 	.word	0x200001a4

0800aae8 <__libc_init_array>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	2600      	movs	r6, #0
 800aaec:	4d0c      	ldr	r5, [pc, #48]	; (800ab20 <__libc_init_array+0x38>)
 800aaee:	4c0d      	ldr	r4, [pc, #52]	; (800ab24 <__libc_init_array+0x3c>)
 800aaf0:	1b64      	subs	r4, r4, r5
 800aaf2:	10a4      	asrs	r4, r4, #2
 800aaf4:	42a6      	cmp	r6, r4
 800aaf6:	d109      	bne.n	800ab0c <__libc_init_array+0x24>
 800aaf8:	2600      	movs	r6, #0
 800aafa:	f000 f8f1 	bl	800ace0 <_init>
 800aafe:	4d0a      	ldr	r5, [pc, #40]	; (800ab28 <__libc_init_array+0x40>)
 800ab00:	4c0a      	ldr	r4, [pc, #40]	; (800ab2c <__libc_init_array+0x44>)
 800ab02:	1b64      	subs	r4, r4, r5
 800ab04:	10a4      	asrs	r4, r4, #2
 800ab06:	42a6      	cmp	r6, r4
 800ab08:	d105      	bne.n	800ab16 <__libc_init_array+0x2e>
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	00b3      	lsls	r3, r6, #2
 800ab0e:	58eb      	ldr	r3, [r5, r3]
 800ab10:	4798      	blx	r3
 800ab12:	3601      	adds	r6, #1
 800ab14:	e7ee      	b.n	800aaf4 <__libc_init_array+0xc>
 800ab16:	00b3      	lsls	r3, r6, #2
 800ab18:	58eb      	ldr	r3, [r5, r3]
 800ab1a:	4798      	blx	r3
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	e7f2      	b.n	800ab06 <__libc_init_array+0x1e>
 800ab20:	0800b064 	.word	0x0800b064
 800ab24:	0800b064 	.word	0x0800b064
 800ab28:	0800b064 	.word	0x0800b064
 800ab2c:	0800b068 	.word	0x0800b068

0800ab30 <malloc>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	4b03      	ldr	r3, [pc, #12]	; (800ab40 <malloc+0x10>)
 800ab34:	0001      	movs	r1, r0
 800ab36:	6818      	ldr	r0, [r3, #0]
 800ab38:	f000 f816 	bl	800ab68 <_malloc_r>
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	200001a4 	.word	0x200001a4

0800ab44 <memcpy>:
 800ab44:	2300      	movs	r3, #0
 800ab46:	b510      	push	{r4, lr}
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d100      	bne.n	800ab4e <memcpy+0xa>
 800ab4c:	bd10      	pop	{r4, pc}
 800ab4e:	5ccc      	ldrb	r4, [r1, r3]
 800ab50:	54c4      	strb	r4, [r0, r3]
 800ab52:	3301      	adds	r3, #1
 800ab54:	e7f8      	b.n	800ab48 <memcpy+0x4>

0800ab56 <memset>:
 800ab56:	0003      	movs	r3, r0
 800ab58:	1812      	adds	r2, r2, r0
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d100      	bne.n	800ab60 <memset+0xa>
 800ab5e:	4770      	bx	lr
 800ab60:	7019      	strb	r1, [r3, #0]
 800ab62:	3301      	adds	r3, #1
 800ab64:	e7f9      	b.n	800ab5a <memset+0x4>
	...

0800ab68 <_malloc_r>:
 800ab68:	2303      	movs	r3, #3
 800ab6a:	b570      	push	{r4, r5, r6, lr}
 800ab6c:	1ccd      	adds	r5, r1, #3
 800ab6e:	439d      	bics	r5, r3
 800ab70:	3508      	adds	r5, #8
 800ab72:	0006      	movs	r6, r0
 800ab74:	2d0c      	cmp	r5, #12
 800ab76:	d21e      	bcs.n	800abb6 <_malloc_r+0x4e>
 800ab78:	250c      	movs	r5, #12
 800ab7a:	42a9      	cmp	r1, r5
 800ab7c:	d81d      	bhi.n	800abba <_malloc_r+0x52>
 800ab7e:	0030      	movs	r0, r6
 800ab80:	f000 f862 	bl	800ac48 <__malloc_lock>
 800ab84:	4a25      	ldr	r2, [pc, #148]	; (800ac1c <_malloc_r+0xb4>)
 800ab86:	6814      	ldr	r4, [r2, #0]
 800ab88:	0021      	movs	r1, r4
 800ab8a:	2900      	cmp	r1, #0
 800ab8c:	d119      	bne.n	800abc2 <_malloc_r+0x5a>
 800ab8e:	4c24      	ldr	r4, [pc, #144]	; (800ac20 <_malloc_r+0xb8>)
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <_malloc_r+0x36>
 800ab96:	0030      	movs	r0, r6
 800ab98:	f000 f844 	bl	800ac24 <_sbrk_r>
 800ab9c:	6020      	str	r0, [r4, #0]
 800ab9e:	0029      	movs	r1, r5
 800aba0:	0030      	movs	r0, r6
 800aba2:	f000 f83f 	bl	800ac24 <_sbrk_r>
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	d12b      	bne.n	800ac02 <_malloc_r+0x9a>
 800abaa:	230c      	movs	r3, #12
 800abac:	0030      	movs	r0, r6
 800abae:	6033      	str	r3, [r6, #0]
 800abb0:	f000 f84b 	bl	800ac4a <__malloc_unlock>
 800abb4:	e003      	b.n	800abbe <_malloc_r+0x56>
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	dadf      	bge.n	800ab7a <_malloc_r+0x12>
 800abba:	230c      	movs	r3, #12
 800abbc:	6033      	str	r3, [r6, #0]
 800abbe:	2000      	movs	r0, #0
 800abc0:	bd70      	pop	{r4, r5, r6, pc}
 800abc2:	680b      	ldr	r3, [r1, #0]
 800abc4:	1b5b      	subs	r3, r3, r5
 800abc6:	d419      	bmi.n	800abfc <_malloc_r+0x94>
 800abc8:	2b0b      	cmp	r3, #11
 800abca:	d903      	bls.n	800abd4 <_malloc_r+0x6c>
 800abcc:	600b      	str	r3, [r1, #0]
 800abce:	18cc      	adds	r4, r1, r3
 800abd0:	6025      	str	r5, [r4, #0]
 800abd2:	e003      	b.n	800abdc <_malloc_r+0x74>
 800abd4:	684b      	ldr	r3, [r1, #4]
 800abd6:	428c      	cmp	r4, r1
 800abd8:	d10d      	bne.n	800abf6 <_malloc_r+0x8e>
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	0030      	movs	r0, r6
 800abde:	f000 f834 	bl	800ac4a <__malloc_unlock>
 800abe2:	0020      	movs	r0, r4
 800abe4:	2207      	movs	r2, #7
 800abe6:	300b      	adds	r0, #11
 800abe8:	1d23      	adds	r3, r4, #4
 800abea:	4390      	bics	r0, r2
 800abec:	1ac3      	subs	r3, r0, r3
 800abee:	d0e7      	beq.n	800abc0 <_malloc_r+0x58>
 800abf0:	425a      	negs	r2, r3
 800abf2:	50e2      	str	r2, [r4, r3]
 800abf4:	e7e4      	b.n	800abc0 <_malloc_r+0x58>
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	000c      	movs	r4, r1
 800abfa:	e7ef      	b.n	800abdc <_malloc_r+0x74>
 800abfc:	000c      	movs	r4, r1
 800abfe:	6849      	ldr	r1, [r1, #4]
 800ac00:	e7c3      	b.n	800ab8a <_malloc_r+0x22>
 800ac02:	2303      	movs	r3, #3
 800ac04:	1cc4      	adds	r4, r0, #3
 800ac06:	439c      	bics	r4, r3
 800ac08:	42a0      	cmp	r0, r4
 800ac0a:	d0e1      	beq.n	800abd0 <_malloc_r+0x68>
 800ac0c:	1a21      	subs	r1, r4, r0
 800ac0e:	0030      	movs	r0, r6
 800ac10:	f000 f808 	bl	800ac24 <_sbrk_r>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d1db      	bne.n	800abd0 <_malloc_r+0x68>
 800ac18:	e7c7      	b.n	800abaa <_malloc_r+0x42>
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	20000320 	.word	0x20000320
 800ac20:	20000324 	.word	0x20000324

0800ac24 <_sbrk_r>:
 800ac24:	2300      	movs	r3, #0
 800ac26:	b570      	push	{r4, r5, r6, lr}
 800ac28:	4c06      	ldr	r4, [pc, #24]	; (800ac44 <_sbrk_r+0x20>)
 800ac2a:	0005      	movs	r5, r0
 800ac2c:	0008      	movs	r0, r1
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	f7f9 f888 	bl	8003d44 <_sbrk>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d103      	bne.n	800ac40 <_sbrk_r+0x1c>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d000      	beq.n	800ac40 <_sbrk_r+0x1c>
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	200004b8 	.word	0x200004b8

0800ac48 <__malloc_lock>:
 800ac48:	4770      	bx	lr

0800ac4a <__malloc_unlock>:
 800ac4a:	4770      	bx	lr

0800ac4c <round>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	004a      	lsls	r2, r1, #1
 800ac50:	0007      	movs	r7, r0
 800ac52:	481f      	ldr	r0, [pc, #124]	; (800acd0 <round+0x84>)
 800ac54:	0d52      	lsrs	r2, r2, #21
 800ac56:	1815      	adds	r5, r2, r0
 800ac58:	000e      	movs	r6, r1
 800ac5a:	2d13      	cmp	r5, #19
 800ac5c:	dc18      	bgt.n	800ac90 <round+0x44>
 800ac5e:	2d00      	cmp	r5, #0
 800ac60:	da09      	bge.n	800ac76 <round+0x2a>
 800ac62:	0fcb      	lsrs	r3, r1, #31
 800ac64:	07db      	lsls	r3, r3, #31
 800ac66:	2200      	movs	r2, #0
 800ac68:	1c69      	adds	r1, r5, #1
 800ac6a:	d101      	bne.n	800ac70 <round+0x24>
 800ac6c:	4919      	ldr	r1, [pc, #100]	; (800acd4 <round+0x88>)
 800ac6e:	430b      	orrs	r3, r1
 800ac70:	0019      	movs	r1, r3
 800ac72:	0010      	movs	r0, r2
 800ac74:	e017      	b.n	800aca6 <round+0x5a>
 800ac76:	4a18      	ldr	r2, [pc, #96]	; (800acd8 <round+0x8c>)
 800ac78:	412a      	asrs	r2, r5
 800ac7a:	420a      	tst	r2, r1
 800ac7c:	d101      	bne.n	800ac82 <round+0x36>
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	d012      	beq.n	800aca8 <round+0x5c>
 800ac82:	2380      	movs	r3, #128	; 0x80
 800ac84:	031b      	lsls	r3, r3, #12
 800ac86:	412b      	asrs	r3, r5
 800ac88:	199b      	adds	r3, r3, r6
 800ac8a:	4393      	bics	r3, r2
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	e7ef      	b.n	800ac70 <round+0x24>
 800ac90:	2d33      	cmp	r5, #51	; 0x33
 800ac92:	dd0b      	ble.n	800acac <round+0x60>
 800ac94:	2380      	movs	r3, #128	; 0x80
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	429d      	cmp	r5, r3
 800ac9a:	d105      	bne.n	800aca8 <round+0x5c>
 800ac9c:	003a      	movs	r2, r7
 800ac9e:	000b      	movs	r3, r1
 800aca0:	0038      	movs	r0, r7
 800aca2:	f7f6 fc49 	bl	8001538 <__aeabi_dadd>
 800aca6:	0007      	movs	r7, r0
 800aca8:	0038      	movs	r0, r7
 800acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acac:	2601      	movs	r6, #1
 800acae:	480b      	ldr	r0, [pc, #44]	; (800acdc <round+0x90>)
 800acb0:	4276      	negs	r6, r6
 800acb2:	1812      	adds	r2, r2, r0
 800acb4:	40d6      	lsrs	r6, r2
 800acb6:	423e      	tst	r6, r7
 800acb8:	d0f6      	beq.n	800aca8 <round+0x5c>
 800acba:	2233      	movs	r2, #51	; 0x33
 800acbc:	1b55      	subs	r5, r2, r5
 800acbe:	3a32      	subs	r2, #50	; 0x32
 800acc0:	40aa      	lsls	r2, r5
 800acc2:	19d2      	adds	r2, r2, r7
 800acc4:	42ba      	cmp	r2, r7
 800acc6:	41a4      	sbcs	r4, r4
 800acc8:	4264      	negs	r4, r4
 800acca:	190b      	adds	r3, r1, r4
 800accc:	43b2      	bics	r2, r6
 800acce:	e7cf      	b.n	800ac70 <round+0x24>
 800acd0:	fffffc01 	.word	0xfffffc01
 800acd4:	3ff00000 	.word	0x3ff00000
 800acd8:	000fffff 	.word	0x000fffff
 800acdc:	fffffbed 	.word	0xfffffbed

0800ace0 <_init>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	46c0      	nop			; (mov r8, r8)
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr

0800acec <_fini>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	46c0      	nop			; (mov r8, r8)
 800acf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf2:	bc08      	pop	{r3}
 800acf4:	469e      	mov	lr, r3
 800acf6:	4770      	bx	lr
