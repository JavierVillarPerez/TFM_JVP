
ROBIM_SDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007538  08007538  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007540  08007540  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e0  08007728  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08007728  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000201aa  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004838  00000000  00000000  000403ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001980  00000000  00000000  00044bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001768  00000000  00000000  00046578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c172  00000000  00000000  00047ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c70  00000000  00000000  00063e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009eb8f  00000000  00000000  00077ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa0  00000000  00000000  001166cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e0 	.word	0x200001e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007358 	.word	0x08007358

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e4 	.word	0x200001e4
 80001d4:	08007358 	.word	0x08007358

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b972 	b.w	8000dc0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	4688      	mov	r8, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14b      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4615      	mov	r5, r2
 8000b06:	d967      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0720 	rsb	r7, r2, #32
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	ea47 0803 	orr.w	r8, r7, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b2c:	fa1f fc85 	uxth.w	ip, r5
 8000b30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b38:	fb07 f10c 	mul.w	r1, r7, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b46:	f080 811b 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8118 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b50:	3f02      	subs	r7, #2
 8000b52:	442b      	add	r3, r5
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b68:	45a4      	cmp	ip, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8107 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	f240 8104 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	442c      	add	r4, r5
 8000b80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b84:	eba4 040c 	sub.w	r4, r4, ip
 8000b88:	2700      	movs	r7, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xbe>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80eb 	beq.w	8000d7a <__udivmoddi4+0x286>
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e9c6 0100 	strd	r0, r1, [r6]
 8000baa:	4638      	mov	r0, r7
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f783 	clz	r7, r3
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d147      	bne.n	8000c4a <__udivmoddi4+0x156>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd0>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80fa 	bhi.w	8000db8 <__udivmoddi4+0x2c4>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000bd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xe8>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 808f 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be6:	1b49      	subs	r1, r1, r5
 8000be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bec:	fa1f f885 	uxth.w	r8, r5
 8000bf0:	2701      	movs	r7, #1
 8000bf2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb08 f10c 	mul.w	r1, r8, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4299      	cmp	r1, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x14c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x14a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80b6 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e79f      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4e:	40bb      	lsls	r3, r7
 8000c50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c58:	fa01 f407 	lsl.w	r4, r1, r7
 8000c5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c68:	4325      	orrs	r5, r4
 8000c6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6e:	0c2c      	lsrs	r4, r5, #16
 8000c70:	fb08 3319 	mls	r3, r8, r9, r3
 8000c74:	fa1f fa8e 	uxth.w	sl, lr
 8000c78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c80:	429c      	cmp	r4, r3
 8000c82:	fa02 f207 	lsl.w	r2, r2, r7
 8000c86:	fa00 f107 	lsl.w	r1, r0, r7
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c94:	f080 8087 	bcs.w	8000da6 <__udivmoddi4+0x2b2>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f240 8084 	bls.w	8000da6 <__udivmoddi4+0x2b2>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4473      	add	r3, lr
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb8:	45a2      	cmp	sl, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	d26b      	bcs.n	8000d9e <__udivmoddi4+0x2aa>
 8000cc6:	45a2      	cmp	sl, r4
 8000cc8:	d969      	bls.n	8000d9e <__udivmoddi4+0x2aa>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4474      	add	r4, lr
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd6:	eba4 040a 	sub.w	r4, r4, sl
 8000cda:	454c      	cmp	r4, r9
 8000cdc:	46c2      	mov	sl, r8
 8000cde:	464b      	mov	r3, r9
 8000ce0:	d354      	bcc.n	8000d8c <__udivmoddi4+0x298>
 8000ce2:	d051      	beq.n	8000d88 <__udivmoddi4+0x294>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d069      	beq.n	8000dbc <__udivmoddi4+0x2c8>
 8000ce8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cec:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	40fc      	lsrs	r4, r7
 8000cf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000d00:	2700      	movs	r7, #0
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f703 	lsr.w	r7, r0, r3
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	4338      	orrs	r0, r7
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d22:	fa1f f885 	uxth.w	r8, r5
 8000d26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2e:	fb07 f308 	mul.w	r3, r7, r8
 8000d32:	428b      	cmp	r3, r1
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x256>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d40:	d22f      	bcs.n	8000da2 <__udivmoddi4+0x2ae>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d92d      	bls.n	8000da2 <__udivmoddi4+0x2ae>
 8000d46:	3f02      	subs	r7, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	b281      	uxth	r1, r0
 8000d4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb00 f308 	mul.w	r3, r0, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x27e>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d68:	d217      	bcs.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d915      	bls.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1ac9      	subs	r1, r1, r3
 8000d74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d78:	e73b      	b.n	8000bf2 <__udivmoddi4+0xfe>
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e709      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d80:	4607      	mov	r7, r0
 8000d82:	e6e7      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d84:	4618      	mov	r0, r3
 8000d86:	e6fb      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d88:	4541      	cmp	r1, r8
 8000d8a:	d2ab      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d90:	eb69 020e 	sbc.w	r2, r9, lr
 8000d94:	3801      	subs	r0, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	e7a4      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9a:	4660      	mov	r0, ip
 8000d9c:	e7e9      	b.n	8000d72 <__udivmoddi4+0x27e>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	e795      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da2:	4667      	mov	r7, ip
 8000da4:	e7d1      	b.n	8000d4a <__udivmoddi4+0x256>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e77c      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000daa:	3802      	subs	r0, #2
 8000dac:	442c      	add	r4, r5
 8000dae:	e747      	b.n	8000c40 <__udivmoddi4+0x14c>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	e72f      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db8:	4638      	mov	r0, r7
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xda>
 8000dbc:	4637      	mov	r7, r6
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0xa0>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000dcc:	2008      	movs	r0, #8
 8000dce:	f006 f9fd 	bl	80071cc <malloc>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 f805 	bl	8000de8 <fsm_init>
  return this;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e01c      	b.n	8000e56 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d113      	bne.n	8000e50 <fsm_fire+0x44>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00c      	beq.n	8000e50 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <fsm_fire+0x54>
        t->out(this);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
      break;
 8000e4e:	e007      	b.n	8000e60 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3310      	adds	r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dade      	bge.n	8000e1c <fsm_fire+0x10>
    }
  }
}
 8000e5e:	e000      	b.n	8000e62 <fsm_fire+0x56>
      break;
 8000e60:	bf00      	nop
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f004 f9ce 	bl	8005210 <HAL_Init>

  /* USER CODE BEGIN Init */
  Clock_Enable();
 8000e74:	f000 f99e 	bl	80011b4 <Clock_Enable>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f81a 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 f904 	bl	8001088 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e80:	f000 f880 	bl	8000f84 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e84:	f000 f8b4 	bl	8000ff0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize LEDs*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  RadioShieldLedInit(RADIO_SHIELD_LED);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f003 fd9f 	bl	80049cc <RadioShieldLedInit>
#endif
  BSP_LED_Init(LED2);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f003 fc86 	bl	80047a0 <BSP_LED_Init>
  HAL_Radio_Init();
 8000e94:	f000 fbbe 	bl	8001614 <HAL_Radio_Init>
  P2P_Init();
 8000e98:	f000 fc60 	bl	800175c <P2P_Init>
  HAL_TIM_OC_Start_IT(&htim2,0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <main+0x40>)
 8000ea0:	f005 fe8c 	bl	8006bbc <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	P2P_Process();
 8000ea4:	f000 fbc6 	bl	8001634 <P2P_Process>
 8000ea8:	e7fc      	b.n	8000ea4 <main+0x38>
 8000eaa:	bf00      	nop
 8000eac:	20000354 	.word	0x20000354

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	; 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 f98c 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <SystemClock_Config+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000efc:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <SystemClock_Config+0xd0>)
 8000efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <SystemClock_Config+0xd0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f24:	2310      	movs	r3, #16
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f28:	23c0      	movs	r3, #192	; 0xc0
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 fdef 	bl	8005b1c <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f44:	f000 f99e 	bl	8001284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 f849 	bl	8005ffc <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f70:	f000 f988 	bl	8001284 <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3750      	adds	r7, #80	; 0x50
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <MX_SPI1_Init+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000f90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fb8:	2208      	movs	r2, #8
 8000fba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fd0:	220a      	movs	r2, #10
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_SPI1_Init+0x64>)
 8000fd6:	f005 f9a9 	bl	800632c <HAL_SPI_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe0:	f000 f950 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200002fc 	.word	0x200002fc
 8000fec:	40013000 	.word	0x40013000

08000ff0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_TIM2_Init+0x94>)
 800100e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001012:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_TIM2_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_TIM2_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_TIM2_Init+0x94>)
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_TIM2_Init+0x94>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_TIM2_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <MX_TIM2_Init+0x94>)
 8001036:	f005 fd95 	bl	8006b64 <HAL_TIM_Base_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001040:	f000 f920 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_TIM2_Init+0x94>)
 8001052:	f005 fe2b 	bl	8006cac <HAL_TIM_ConfigClockSource>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800105c:	f000 f912 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_TIM2_Init+0x94>)
 800106e:	f006 f815 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001078:	f000 f904 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000354 	.word	0x20000354

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a37      	ldr	r2, [pc, #220]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <MX_GPIO_Init+0x118>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NUCLEO_LED_PIN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80010f8:	482a      	ldr	r0, [pc, #168]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010fa:	f004 fcc3 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_S_CS_Pin|SPI1_H_CS_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2160      	movs	r1, #96	; 0x60
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <MX_GPIO_Init+0x120>)
 8001104:	f004 fcbe 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_Pin PC7 */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|GPIO_PIN_7;
 8001108:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_GPIO_Init+0x124>)
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	4824      	ldr	r0, [pc, #144]	; (80011b0 <MX_GPIO_Init+0x128>)
 800111e:	f004 fa4d 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pin : NUCLEO_LED_PIN_Pin */
  GPIO_InitStruct.Pin = NUCLEO_LED_PIN_Pin;
 8001122:	2320      	movs	r3, #32
 8001124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NUCLEO_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4619      	mov	r1, r3
 8001138:	481a      	ldr	r0, [pc, #104]	; (80011a4 <MX_GPIO_Init+0x11c>)
 800113a:	f004 fa3f 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_GPIO_Init+0x11c>)
 8001158:	f004 fa30 	bl	80055bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_S_CS_Pin SPI1_H_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_S_CS_Pin|SPI1_H_CS_Pin;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_GPIO_Init+0x120>)
 8001174:	f004 fa22 	bl	80055bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2017      	movs	r0, #23
 800117e:	f004 f9d8 	bl	8005532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001182:	2017      	movs	r0, #23
 8001184:	f004 f9f1 	bl	800556a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f004 f9d0 	bl	8005532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	; 0x28
 8001194:	f004 f9e9 	bl	800556a <HAL_NVIC_EnableIRQ>

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	10110000 	.word	0x10110000
 80011b0:	40020800 	.word	0x40020800

080011b4 <Clock_Enable>:

/* USER CODE BEGIN 4 */
void Clock_Enable(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
  __GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <Clock_Enable+0x84>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <Clock_Enable+0x84>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <Clock_Enable+0x84>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <Clock_Enable+0x84>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <Clock_Enable+0x84>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <Clock_Enable+0x84>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <Clock_Enable+0x84>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <Clock_Enable+0x84>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <Clock_Enable+0x84>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __GPIOD_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <Clock_Enable+0x84>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <Clock_Enable+0x84>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <Clock_Enable+0x84>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <check_Rx_count>:
{
	Rx_count++;
}

FlagStatus check_Rx_count(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
	FlagStatus retval = RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
	if(Rx_count >= 100) //Debug value 100 for 10 secs. Final value 10000 for 10 secs.
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <check_Rx_count+0x2c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b63      	cmp	r3, #99	; 0x63
 800124c:	d904      	bls.n	8001258 <check_Rx_count+0x1c>
	{
		retval = SET;
 800124e:	2301      	movs	r3, #1
 8001250:	71fb      	strb	r3, [r7, #7]
		Rx_count = 0;
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <check_Rx_count+0x2c>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
	}
	return retval;
 8001258:	79fb      	ldrb	r3, [r7, #7]
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000394 	.word	0x20000394

0800126c <reset_RX_count>:

void reset_RX_count(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	Rx_count = 0;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <reset_RX_count+0x14>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	20000394 	.word	0x20000394

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <time_out_rx>:

radio_select_t selectedBand;

/* Private function prototypes -----------------------------------------------*/
static int time_out_rx(fsm_t* this)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

	return ((Spirit1_RX_timeout)||(check_Rx_count()));
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <time_out_rx+0x2c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <time_out_rx+0x1c>
 80012a6:	f7ff ffc9 	bl	800123c <check_Rx_count>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <time_out_rx+0x20>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <time_out_rx+0x22>
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000262 	.word	0x20000262

080012c4 <tx_flag>:

static int tx_flag(fsm_t* this)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	return tx_value;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <tx_flag+0x18>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000263 	.word	0x20000263

080012e0 <rx_flag>:

static int rx_flag(fsm_t* this)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	return xRxDoneFlag;
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <rx_flag+0x1c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000260 	.word	0x20000260

08001300 <data_received>:


static int data_received(fsm_t* this)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	if(xRxFrame.Cmd == LED_TOGGLE) return 1;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <data_received+0x24>)
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d101      	bne.n	8001314 <data_received+0x14>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <data_received+0x16>
	else return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000270 	.word	0x20000270

08001328 <ack_received>:

static int ack_received(fsm_t* this)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    if(xRxFrame.Cmd == ACK_OK) return 1;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <ack_received+0x24>)
 8001332:	78db      	ldrb	r3, [r3, #3]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <ack_received+0x14>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <ack_received+0x16>
    else return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000270 	.word	0x20000270

08001350 <multicast>:

static int multicast(fsm_t* this)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	if ((dest_addr == MULTICAST_ADDRESS) || (dest_addr == BROADCAST_ADDRESS)) return 1;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <multicast+0x2c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2bee      	cmp	r3, #238	; 0xee
 800135e:	d003      	beq.n	8001368 <multicast+0x18>
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <multicast+0x2c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2bff      	cmp	r3, #255	; 0xff
 8001366:	d101      	bne.n	800136c <multicast+0x1c>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <multicast+0x1e>
	else return 0;
 800136c:	2300      	movs	r3, #0

}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200003a0 	.word	0x200003a0

08001380 <address_known>:

static int address_known(fsm_t* this)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if ((dest_addr != MULTICAST_ADDRESS) && (dest_addr != BROADCAST_ADDRESS)) return 1;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <address_known+0x2c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2bee      	cmp	r3, #238	; 0xee
 800138e:	d005      	beq.n	800139c <address_known+0x1c>
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <address_known+0x2c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2bff      	cmp	r3, #255	; 0xff
 8001396:	d001      	beq.n	800139c <address_known+0x1c>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <address_known+0x1e>
	else return 0;
 800139c:	2300      	movs	r3, #0

}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200003a0 	.word	0x200003a0

080013b0 <tx_done>:

static int tx_done(fsm_t* this)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	return xTxDoneFlag;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <tx_done+0x1c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000261 	.word	0x20000261

080013d0 <ACK_confirm>:


static int ACK_confirm (fsm_t* this)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	return ACK_Process;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <ACK_confirm+0x18>)
 80013da:	781b      	ldrb	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	200003a2 	.word	0x200003a2

080013ec <EN_Rx>:

void EN_Rx(fsm_t* this)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    AppliReceiveBuff(aReceiveBuffer, RxLength);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <EN_Rx+0x44>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	480e      	ldr	r0, [pc, #56]	; (8001434 <EN_Rx+0x48>)
 80013fc:	f000 f980 	bl	8001700 <AppliReceiveBuff>
    Spirit1_RX_timeout = RESET;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <EN_Rx+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    reset_RX_count();
 8001406:	f7ff ff31 	bl	800126c <reset_RX_count>
    BSP_LED_Toggle(LED2);
 800140a:	2000      	movs	r0, #0
 800140c:	f003 fa16 	bl	800483c <BSP_LED_Toggle>

	xTxDoneFlag = RESET;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <EN_Rx+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 8001416:	2000      	movs	r0, #0
 8001418:	f003 fb1a 	bl	8004a50 <RadioShieldLedOff>
#endif
    ACK_Process = RESET;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <EN_Rx+0x54>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    IDLE_Process = SET;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <EN_Rx+0x58>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200001fc 	.word	0x200001fc
 8001434:	20000200 	.word	0x20000200
 8001438:	20000262 	.word	0x20000262
 800143c:	20000261 	.word	0x20000261
 8001440:	200003a2 	.word	0x200003a2
 8001444:	200003b4 	.word	0x200003b4

08001448 <send_data>:

void send_data(fsm_t* this)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	tx_value = RESET;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <send_data+0x54>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
	xTxFrame.Cmd = LED_TOGGLE;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <send_data+0x58>)
 8001458:	22ff      	movs	r2, #255	; 0xff
 800145a:	70da      	strb	r2, [r3, #3]
	xTxFrame.CmdLen = 0x01;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <send_data+0x58>)
 800145e:	2201      	movs	r2, #1
 8001460:	709a      	strb	r2, [r3, #2]
	xTxFrame.Cmdtag = txCounter++;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <send_data+0x5c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	b291      	uxth	r1, r2
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <send_data+0x5c>)
 800146c:	8011      	strh	r1, [r2, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <send_data+0x58>)
 8001472:	701a      	strb	r2, [r3, #0]
	xTxFrame.CmdType = APPLI_CMD;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <send_data+0x58>)
 8001476:	2211      	movs	r2, #17
 8001478:	705a      	strb	r2, [r3, #1]
	xTxFrame.DataBuff = aTransmitBuffer;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <send_data+0x58>)
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <send_data+0x60>)
 800147e:	609a      	str	r2, [r3, #8]
	xTxFrame.DataLen = TxLength;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <send_data+0x64>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <send_data+0x58>)
 8001486:	711a      	strb	r2, [r3, #4]
	AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <send_data+0x58>)
 800148a:	791b      	ldrb	r3, [r3, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <send_data+0x58>)
 8001490:	f000 f8dc 	bl	800164c <AppliSendBuff>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000263 	.word	0x20000263
 80014a0:	20000264 	.word	0x20000264
 80014a4:	200002de 	.word	0x200002de
 80014a8:	20000088 	.word	0x20000088
 80014ac:	20000084 	.word	0x20000084

080014b0 <read_RX_Data>:

void read_RX_Data(fsm_t* this)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	xRxDoneFlag = RESET;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <read_RX_Data+0x70>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]

	Spirit1GetRxPacket(aReceiveBuffer,&RxLength);
 80014be:	4919      	ldr	r1, [pc, #100]	; (8001524 <read_RX_Data+0x74>)
 80014c0:	4819      	ldr	r0, [pc, #100]	; (8001528 <read_RX_Data+0x78>)
 80014c2:	f003 f915 	bl	80046f0 <Spirit1GetRxPacket>
	/*rRSSIValue = Spirit1GetRssiTH();*/
	/*rRSSIValue = S2LPGetRssiTH();*/
	xRxFrame.Cmd = aReceiveBuffer[0];
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <read_RX_Data+0x78>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <read_RX_Data+0x7c>)
 80014cc:	70da      	strb	r2, [r3, #3]
	xRxFrame.CmdLen = aReceiveBuffer[1];
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <read_RX_Data+0x78>)
 80014d0:	785a      	ldrb	r2, [r3, #1]
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <read_RX_Data+0x7c>)
 80014d4:	709a      	strb	r2, [r3, #2]
	xRxFrame.Cmdtag = aReceiveBuffer[2];
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <read_RX_Data+0x78>)
 80014d8:	789a      	ldrb	r2, [r3, #2]
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <read_RX_Data+0x7c>)
 80014dc:	701a      	strb	r2, [r3, #0]
	xRxFrame.CmdType = aReceiveBuffer[3];
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <read_RX_Data+0x78>)
 80014e0:	78da      	ldrb	r2, [r3, #3]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <read_RX_Data+0x7c>)
 80014e4:	705a      	strb	r2, [r3, #1]
	xRxFrame.DataLen = aReceiveBuffer[4];
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <read_RX_Data+0x78>)
 80014e8:	791a      	ldrb	r2, [r3, #4]
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <read_RX_Data+0x7c>)
 80014ec:	711a      	strb	r2, [r3, #4]

	/*FIXED BUG IN DATA RECEPTION*/
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 80014ee:	2305      	movs	r3, #5
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e008      	b.n	8001506 <read_RX_Data+0x56>
	{
	  temp_DataBuff[xIndex] = aReceiveBuffer[xIndex];
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	490b      	ldr	r1, [pc, #44]	; (8001528 <read_RX_Data+0x78>)
 80014fa:	5c89      	ldrb	r1, [r1, r2]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <read_RX_Data+0x80>)
 80014fe:	54d1      	strb	r1, [r2, r3]
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <read_RX_Data+0x74>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3f1      	bcc.n	80014f4 <read_RX_Data+0x44>
	}

	xRxFrame.DataBuff= temp_DataBuff;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <read_RX_Data+0x7c>)
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <read_RX_Data+0x80>)
 8001514:	609a      	str	r2, [r3, #8]
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000260 	.word	0x20000260
 8001524:	200001fc 	.word	0x200001fc
 8001528:	20000200 	.word	0x20000200
 800152c:	20000270 	.word	0x20000270
 8001530:	200002e0 	.word	0x200002e0

08001534 <LED_ON>:

void LED_ON(fsm_t* this)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOn(RADIO_SHIELD_LED);
 800153c:	2000      	movs	r0, #0
 800153e:	f003 fa73 	bl	8004a28 <RadioShieldLedOn>
#endif
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 8001542:	f001 fa8d 	bl	8002a60 <SpiritPktCommonGetReceivedDestAddress>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	4b03      	ldr	r3, [pc, #12]	; (8001558 <LED_ON+0x24>)
 800154c:	701a      	strb	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200003a0 	.word	0x200003a0

0800155c <LED_Toggle>:

void LED_Toggle(fsm_t* this)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]

    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 8001568:	f001 fa7a 	bl	8002a60 <SpiritPktCommonGetReceivedDestAddress>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <LED_Toggle+0x54>)
 8001572:	701a      	strb	r2, [r3, #0]

#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
	HAL_Delay(DELAY_TX_LED_GLOW);
 8001574:	20c8      	movs	r0, #200	; 0xc8
 8001576:	f003 febd 	bl	80052f4 <HAL_Delay>
#endif
	for(; ledToggleCtr<5; ledToggleCtr++)
 800157a:	e008      	b.n	800158e <LED_Toggle+0x32>
	{
		/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
		#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
		RadioShieldLedToggle(RADIO_SHIELD_LED);
 800157c:	2000      	movs	r0, #0
 800157e:	f003 fa7b 	bl	8004a78 <RadioShieldLedToggle>
		#endif
		HAL_Delay(DELAY_RX_LED_TOGGLE);
 8001582:	2064      	movs	r0, #100	; 0x64
 8001584:	f003 feb6 	bl	80052f4 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	3301      	adds	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d9f3      	bls.n	800157c <LED_Toggle+0x20>
	}
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 8001594:	2000      	movs	r0, #0
 8001596:	f003 fa5b 	bl	8004a50 <RadioShieldLedOff>
#endif
    BSP_LED_Off(LED2);
 800159a:	2000      	movs	r0, #0
 800159c:	f003 f93a 	bl	8004814 <BSP_LED_Off>

    ACK_Process = SET;
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <LED_Toggle+0x58>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200003a0 	.word	0x200003a0
 80015b4:	200003a2 	.word	0x200003a2

080015b8 <send_ACK>:

void send_ACK(fsm_t* this)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	  xTxFrame.Cmd = ACK_OK;
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <send_ACK+0x4c>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	70da      	strb	r2, [r3, #3]
	  xTxFrame.CmdLen = 0x01;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <send_ACK+0x4c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	709a      	strb	r2, [r3, #2]
	  xTxFrame.Cmdtag = xRxFrame.Cmdtag;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <send_ACK+0x50>)
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <send_ACK+0x4c>)
 80015d2:	701a      	strb	r2, [r3, #0]
	  xTxFrame.CmdType = APPLI_CMD;
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <send_ACK+0x4c>)
 80015d6:	2211      	movs	r2, #17
 80015d8:	705a      	strb	r2, [r3, #1]
	  xTxFrame.DataBuff = aTransmitBuffer;
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <send_ACK+0x4c>)
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <send_ACK+0x54>)
 80015de:	609a      	str	r2, [r3, #8]
	  xTxFrame.DataLen = TxLength;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <send_ACK+0x58>)
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <send_ACK+0x4c>)
 80015e6:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(DELAY_TX_LED_GLOW);
 80015e8:	20c8      	movs	r0, #200	; 0xc8
 80015ea:	f003 fe83 	bl	80052f4 <HAL_Delay>

	  AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <send_ACK+0x4c>)
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <send_ACK+0x4c>)
 80015f6:	f000 f829 	bl	800164c <AppliSendBuff>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000264 	.word	0x20000264
 8001608:	20000270 	.word	0x20000270
 800160c:	20000088 	.word	0x20000088
 8001610:	20000084 	.word	0x20000084

08001614 <HAL_Radio_Init>:
* @brief  Initializes RF Transceiver's HAL.
* @param  None
* @retval None.
*/
void HAL_Radio_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  pRadioDriver = &radio_cb;
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_Radio_Init+0x18>)
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_Radio_Init+0x1c>)
 800161c:	601a      	str	r2, [r3, #0]
  pRadioDriver->Init( ); 
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_Radio_Init+0x18>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4798      	blx	r3
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200003a8 	.word	0x200003a8
 8001630:	20000000 	.word	0x20000000

08001634 <P2P_Process>:
*         uint8_t* pRxBuff = Pointer to aReceiveBuffer
*         uint8_t cRxlen= length of aReceiveBuffer
* @retval None.
*/
void P2P_Process(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	fsm_fire(radio_fsm);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <P2P_Process+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fbe5 	bl	8000e0c <fsm_fire>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003b0 	.word	0x200003b0

0800164c <AppliSendBuff>:
* @param  AppliFrame_t *xTxFrame = Pointer to AppliFrame_t structure 
*         uint8_t cTxlen = Length of aTransmitBuffer
* @retval None
*/
void AppliSendBuff(AppliFrame_t *xTxFrame, uint8_t cTxlen)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  uint8_t xIndex = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
  uint8_t trxLength = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	73bb      	strb	r3, [r7, #14]
  
#ifdef USE_BASIC_PROTOCOL
  SpiritPktBasicAddressesInit(&xAddressInit);
 8001660:	4823      	ldr	r0, [pc, #140]	; (80016f0 <AppliSendBuff+0xa4>)
 8001662:	f001 f8c9 	bl	80027f8 <SpiritPktBasicAddressesInit>
#endif  
  
  TxFrameBuff[0] = xTxFrame->Cmd;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	78da      	ldrb	r2, [r3, #3]
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <AppliSendBuff+0xa8>)
 800166c:	701a      	strb	r2, [r3, #0]
  TxFrameBuff[1] = xTxFrame->CmdLen;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	789a      	ldrb	r2, [r3, #2]
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <AppliSendBuff+0xa8>)
 8001674:	705a      	strb	r2, [r3, #1]
  TxFrameBuff[2] = xTxFrame->Cmdtag;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781a      	ldrb	r2, [r3, #0]
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <AppliSendBuff+0xa8>)
 800167c:	709a      	strb	r2, [r3, #2]
  TxFrameBuff[3] = xTxFrame->CmdType;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	785a      	ldrb	r2, [r3, #1]
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <AppliSendBuff+0xa8>)
 8001684:	70da      	strb	r2, [r3, #3]
  TxFrameBuff[4] = xTxFrame->DataLen;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	791a      	ldrb	r2, [r3, #4]
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <AppliSendBuff+0xa8>)
 800168c:	711a      	strb	r2, [r3, #4]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 800168e:	e00b      	b.n	80016a8 <AppliSendBuff+0x5c>
  {
    TxFrameBuff[xIndex+5] =  xTxFrame->DataBuff[xIndex];
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	441a      	add	r2, r3
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	3305      	adds	r3, #5
 800169c:	7811      	ldrb	r1, [r2, #0]
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <AppliSendBuff+0xa8>)
 80016a0:	54d1      	strb	r1, [r2, r3]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3301      	adds	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3ee      	bcc.n	8001690 <AppliSendBuff+0x44>
  }

  trxLength = (xIndex+5);
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	3305      	adds	r3, #5
 80016b6:	73bb      	strb	r3, [r7, #14]

  /* Spirit IRQs disable */
  Spirit1DisableIrq();
 80016b8:	f002 ffc7 	bl	800464a <Spirit1DisableIrq>
  /* Spirit IRQs enable */
  Spirit1EnableTxIrq();
 80016bc:	f002 ffac 	bl	8004618 <Spirit1EnableTxIrq>
  /* payload length config */
  Spirit1SetPayloadlength(trxLength);
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 ff8d 	bl	80045e2 <Spirit1SetPayloadlength>
  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 80016c8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80016f8 <AppliSendBuff+0xac>
 80016cc:	f002 ffc4 	bl	8004658 <Spirit1SetRxTimeout>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 80016d0:	f003 f860 	bl	8004794 <Spirit1ClearIRQ>
  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <AppliSendBuff+0xb0>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 ff90 	bl	80045fe <Spirit1SetDestinationAddress>
  /* send the TX command */
  Spirit1StartTx(TxFrameBuff, trxLength);
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <AppliSendBuff+0xa8>)
 80016e4:	f003 f820 	bl	8004728 <Spirit1StartTx>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000074 	.word	0x20000074
 80016f4:	2000027c 	.word	0x2000027c
 80016f8:	00000000 	.word	0x00000000
 80016fc:	200003a1 	.word	0x200003a1

08001700 <AppliReceiveBuff>:
* @param  uint8_t *RxFrameBuff = Pointer to ReceiveBuffer
*         uint8_t cRxlen = length of ReceiveBuffer
* @retval None
*/
void AppliReceiveBuff(uint8_t *RxFrameBuff, uint8_t cRxlen)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  /*float rRSSIValue = 0;*/
//  SW_RX_timeout = SET;
  exitCounter = TIME_TO_EXIT_RX;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <AppliReceiveBuff+0x4c>)
 800170e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001712:	801a      	strh	r2, [r3, #0]
  SpiritPktBasicAddressesInit(&xAddressInit);
 8001714:	480e      	ldr	r0, [pc, #56]	; (8001750 <AppliReceiveBuff+0x50>)
 8001716:	f001 f86f 	bl	80027f8 <SpiritPktBasicAddressesInit>

  Spirit1DisableIrq();
 800171a:	f002 ff96 	bl	800464a <Spirit1DisableIrq>
  Spirit1EnableRxIrq();
 800171e:	f002 ff83 	bl	8004628 <Spirit1EnableRxIrq>

  /* payload length config */
  Spirit1SetPayloadlength(PAYLOAD_LEN);
 8001722:	2019      	movs	r0, #25
 8001724:	f002 ff5d 	bl	80045e2 <Spirit1SetPayloadlength>

  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8001728:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001754 <AppliReceiveBuff+0x54>
 800172c:	f002 ff94 	bl	8004658 <Spirit1SetRxTimeout>

  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <AppliReceiveBuff+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f002 ff62 	bl	80045fe <Spirit1SetDestinationAddress>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 800173a:	f003 f82b 	bl	8004794 <Spirit1ClearIRQ>
  /* RX command */ 
  Spirit1StartRx();
 800173e:	f002 ffc1 	bl	80046c4 <Spirit1StartRx>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200002dc 	.word	0x200002dc
 8001750:	20000074 	.word	0x20000074
 8001754:	00000000 	.word	0x00000000
 8001758:	200003a1 	.word	0x200003a1

0800175c <P2P_Init>:
* communication
* @param  None
* @retval None
*/
void P2P_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  DestinationAddr = DESTINATION_ADDRESS;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <P2P_Init+0x5c>)
 8001762:	2244      	movs	r2, #68	; 0x44
 8001764:	701a      	strb	r2, [r3, #0]
  pRadioDriver->GpioIrq(&xGpioIRQ);
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <P2P_Init+0x60>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4814      	ldr	r0, [pc, #80]	; (80017c0 <P2P_Init+0x64>)
 800176e:	4798      	blx	r3

  /*Configure 868 transceiver*/
  selectedBand.conf_868 = SET;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <P2P_Init+0x68>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
  selectedBand.conf_433 = RESET;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <P2P_Init+0x68>)
 8001778:	2200      	movs	r2, #0
 800177a:	705a      	strb	r2, [r3, #1]
  Spirit1RadioInit(&xRadioInit);
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <P2P_Init+0x6c>)
 800177e:	f002 ff0a 	bl	8004596 <Spirit1RadioInit>
  Spirit1SetPower(POWER_INDEX, POWER_DBM);
 8001782:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80017cc <P2P_Init+0x70>
 8001786:	2007      	movs	r0, #7
 8001788:	f002 ff10 	bl	80045ac <Spirit1SetPower>
  Spirit1PacketConfig();
 800178c:	f002 ff23 	bl	80045d6 <Spirit1PacketConfig>
  Spirit1EnableSQI();
 8001790:	f002 ff8d 	bl	80046ae <Spirit1EnableSQI>
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001794:	f06f 0081 	mvn.w	r0, #129	; 0x81
 8001798:	f001 f9e6 	bl	8002b68 <SpiritQiSetRssiThresholddBm>
//  Spirit1PacketConfig();
//  Spirit1EnableSQI();
//  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);


  radio_fsm = fsm_new (radio_states);
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <P2P_Init+0x74>)
 800179e:	f7ff fb11 	bl	8000dc4 <fsm_new>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <P2P_Init+0x78>)
 80017a6:	601a      	str	r2, [r3, #0]

  /*868MHz band as predetermined band*/
  selectedBand.conf_433 = RESET;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <P2P_Init+0x68>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	705a      	strb	r2, [r3, #1]
  selectedBand.conf_868 = SET;
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <P2P_Init+0x68>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200003a1 	.word	0x200003a1
 80017bc:	200003a8 	.word	0x200003a8
 80017c0:	20000044 	.word	0x20000044
 80017c4:	200003ac 	.word	0x200003ac
 80017c8:	20000048 	.word	0x20000048
 80017cc:	4139999a 	.word	0x4139999a
 80017d0:	2000009c 	.word	0x2000009c
 80017d4:	200003b0 	.word	0x200003b0

080017d8 <BasicProtocolInit>:
* @brief  This function initializes the BASIC Packet handler of S2LP
* @param  None
* @retval None
*/
void BasicProtocolInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* RAdio Packet config */
	SpiritPktBasicInit(&xBasicInit);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <BasicProtocolInit+0x10>)
 80017de:	f000 ff33 	bl	8002648 <SpiritPktBasicInit>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000064 	.word	0x20000064

080017ec <bandSelect>:

radio_select_t bandSelect(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	return selectedBand;
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <bandSelect+0x28>)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	8812      	ldrh	r2, [r2, #0]
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	793a      	ldrb	r2, [r7, #4]
 80017fe:	f362 0307 	bfi	r3, r2, #0, #8
 8001802:	797a      	ldrb	r2, [r7, #5]
 8001804:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	200003ac 	.word	0x200003ac

08001818 <P2PInterruptHandler>:
*         to manage the S2LP IRQ configured to be notified on the S2LP GPIO_3.
* @param  None
* @retval None
*/
void P2PInterruptHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	SpiritIrqGetStatus(&xIrqStatus);
 800181c:	4828      	ldr	r0, [pc, #160]	; (80018c0 <P2PInterruptHandler+0xa8>)
 800181e:	f000 fc83 	bl	8002128 <SpiritIrqGetStatus>
  
  
  /* Check the SPIRIT1 TX_DATA_SENT IRQ flag */
  if(
     (xIrqStatus.IRQ_TX_DATA_SENT) 
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <P2PInterruptHandler+0xa8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	b2db      	uxtb	r3, r3
  if(
 800182c:	2b00      	cmp	r3, #0
 800182e:	d106      	bne.n	800183e <P2PInterruptHandler+0x26>
       
#ifdef CSMA_ENABLE
       ||(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <P2PInterruptHandler+0xa8>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d019      	beq.n	8001872 <P2PInterruptHandler+0x5a>
#endif
         )
  {
#ifdef CSMA_ENABLE
	SpiritCsma(S_DISABLE);
 800183e:	2000      	movs	r0, #0
 8001840:	f000 fb58 	bl	8001ef4 <SpiritCsma>
	SpiritRadioPersistenRx(S_ENABLE);	/*To comeback to RX state*/
 8001844:	2001      	movs	r0, #1
 8001846:	f002 faff 	bl	8003e48 <SpiritRadioPersistenRx>
	SpiritRadioCsBlanking(S_ENABLE);
 800184a:	2001      	movs	r0, #1
 800184c:	f002 facc 	bl	8003de8 <SpiritRadioCsBlanking>
    
    if(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <P2PInterruptHandler+0xa8>)
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <P2PInterruptHandler+0x4c>
    {
    	SpiritCmdStrobeSabort();
 800185e:	2067      	movs	r0, #103	; 0x67
 8001860:	f000 facc 	bl	8001dfc <SpiritCmdStrobeCommand>
    }
    SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001864:	f06f 0081 	mvn.w	r0, #129	; 0x81
 8001868:	f001 f97e 	bl	8002b68 <SpiritQiSetRssiThresholddBm>
    
    
#endif
    
    xTxDoneFlag = SET;
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <P2PInterruptHandler+0xac>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check the S2LP RX_DATA_READY IRQ flag */
  if((xIrqStatus.IRQ_RX_DATA_READY))
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <P2PInterruptHandler+0xa8>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <P2PInterruptHandler+0x6e>
  {
    xRxDoneFlag = SET;   
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <P2PInterruptHandler+0xb0>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
  }
  
  /* Restart receive after receive timeout*/
  if (xIrqStatus.IRQ_RX_TIMEOUT)
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <P2PInterruptHandler+0xa8>)
 8001888:	78db      	ldrb	r3, [r3, #3]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <P2PInterruptHandler+0x8c>
  {
    Spirit1_RX_timeout = SET; 
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <P2PInterruptHandler+0xb4>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeRx();
 800189a:	f000 fea5 	bl	80025e8 <SpiritManagementWaCmdStrobeRx>
 800189e:	2061      	movs	r0, #97	; 0x61
 80018a0:	f000 faac 	bl	8001dfc <SpiritCmdStrobeCommand>
    
  }
  
  /* Check the S2LP RX_DATA_DISC IRQ flag */
  if(xIrqStatus.IRQ_RX_DATA_DISC)
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <P2PInterruptHandler+0xa8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <P2PInterruptHandler+0xa4>
  {      
    /* RX command - to ensure the device will be ready for the next reception */
	  SpiritCmdStrobeRx();
 80018b2:	f000 fe99 	bl	80025e8 <SpiritManagementWaCmdStrobeRx>
 80018b6:	2061      	movs	r0, #97	; 0x61
 80018b8:	f000 faa0 	bl	8001dfc <SpiritCmdStrobeCommand>
    
  }  
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000398 	.word	0x20000398
 80018c4:	20000261 	.word	0x20000261
 80018c8:	20000260 	.word	0x20000260
 80018cc:	20000262 	.word	0x20000262

080018d0 <HAL_GPIO_EXTI_Callback>:
* @param uint16_t GPIO_Pin
* @retval None
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  PushButtonStatusData = RESET;
  wakeupCounter = LPM_WAKEUP_TIME; 
  dataSendCounter = DATA_SEND_TIME;
  dataSendCounter++;
#endif
  if(GPIO_Pin==USER_BUTTON_PIN)
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e0:	d110      	bne.n	8001904 <HAL_GPIO_EXTI_Callback+0x34>
  {

	/*It will be an USB interrupt, not a button*/
	tx_value = SET;
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_GPIO_EXTI_Callback+0x48>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]

	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 80018e8:	e008      	b.n	80018fc <HAL_GPIO_EXTI_Callback+0x2c>
	{
		aTransmitBuffer[i] = i*2;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	0052      	lsls	r2, r2, #1
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_GPIO_EXTI_Callback+0x4c>)
 80018f4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	3301      	adds	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b13      	cmp	r3, #19
 8001900:	d9f3      	bls.n	80018ea <HAL_GPIO_EXTI_Callback+0x1a>
      P2PInterruptHandler();
    }
  
#endif
  
}
 8001902:	e004      	b.n	800190e <HAL_GPIO_EXTI_Callback+0x3e>
    if(GPIO_Pin==RADIO_GPIO_3_EXTI_LINE)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	2b80      	cmp	r3, #128	; 0x80
 8001908:	d101      	bne.n	800190e <HAL_GPIO_EXTI_Callback+0x3e>
      P2PInterruptHandler();
 800190a:	f7ff ff85 	bl	8001818 <P2PInterruptHandler>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000263 	.word	0x20000263
 800191c:	20000088 	.word	0x20000088

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_MspInit+0x4c>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x4c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <HAL_SPI_MspInit+0xc0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d149      	bne.n	8001a26 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_SPI_MspInit+0xc4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e6:	23c0      	movs	r3, #192	; 0xc0
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f6:	2305      	movs	r3, #5
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <HAL_SPI_MspInit+0xc8>)
 8001a02:	f003 fddb 	bl	80055bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a06:	2308      	movs	r3, #8
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a12:	2302      	movs	r3, #2
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a16:	2305      	movs	r3, #5
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4806      	ldr	r0, [pc, #24]	; (8001a3c <HAL_SPI_MspInit+0xcc>)
 8001a22:	f003 fdcb 	bl	80055bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40013000 	.word	0x40013000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_SPI_MspDeInit+0x38>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10d      	bne.n	8001a6e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_SPI_MspDeInit+0x3c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_SPI_MspDeInit+0x3c>)
 8001a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001a5e:	21c0      	movs	r1, #192	; 0xc0
 8001a60:	4807      	ldr	r0, [pc, #28]	; (8001a80 <HAL_SPI_MspDeInit+0x40>)
 8001a62:	f003 ff2d 	bl	80058c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8001a66:	2108      	movs	r1, #8
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <HAL_SPI_MspDeInit+0x44>)
 8001a6a:	f003 ff29 	bl	80058c0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40013000 	.word	0x40013000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020400 	.word	0x40020400

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d10d      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1c:	f003 fbca 	bl	80052b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b28:	2080      	movs	r0, #128	; 0x80
 8001b2a:	f003 ffdf 	bl	8005aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b3a:	f003 ffd7 	bl	8005aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f005 fb00 	bl	8007178 <__errno>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20010000 	.word	0x20010000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	200002e4 	.word	0x200002e4
 8001bac:	20000420 	.word	0x20000420

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <SystemInit+0x28>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <SystemInit+0x28>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SystemInit+0x28>)
 8001bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bca:	609a      	str	r2, [r3, #8]
#endif
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001be0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001be2:	e003      	b.n	8001bec <LoopCopyDataInit>

08001be4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001be6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bea:	3104      	adds	r1, #4

08001bec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bf4:	d3f6      	bcc.n	8001be4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bf8:	e002      	b.n	8001c00 <LoopFillZerobss>

08001bfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bfc:	f842 3b04 	str.w	r3, [r2], #4

08001c00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c04:	d3f9      	bcc.n	8001bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c06:	f7ff ffd3 	bl	8001bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f005 fabb 	bl	8007184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0e:	f7ff f92d 	bl	8000e6c <main>
  bx  lr    
 8001c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001c18:	08007548 	.word	0x08007548
  ldr  r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c20:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001c24:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001c28:	2000041c 	.word	0x2000041c

08001c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC_IRQHandler>
	...

08001c30 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001c3a:	f107 030f 	add.w	r3, r7, #15
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2101      	movs	r1, #1
 8001c42:	2050      	movs	r0, #80	; 0x50
 8001c44:	f003 f842 	bl	8004ccc <RadioSpiReadRegisters>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <SpiritCalibrationVco+0x6c>)
 8001c4c:	b212      	sxth	r2, r2
 8001c4e:	4611      	mov	r1, r2
 8001c50:	7019      	strb	r1, [r3, #0]
 8001c52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c56:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e004      	b.n	8001c74 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f023 0302 	bic.w	r3, r3, #2
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001c74:	f107 030f 	add.w	r3, r7, #15
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2050      	movs	r0, #80	; 0x50
 8001c7e:	f002 ff79 	bl	8004b74 <RadioSpiWriteRegisters>
 8001c82:	4602      	mov	r2, r0
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SpiritCalibrationVco+0x6c>)
 8001c86:	b212      	sxth	r2, r2
 8001c88:	4611      	mov	r1, r2
 8001c8a:	7019      	strb	r1, [r3, #0]
 8001c8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c90:	705a      	strb	r2, [r3, #1]

}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200003b8 	.word	0x200003b8

08001ca0 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2101      	movs	r1, #1
 8001cac:	20e5      	movs	r0, #229	; 0xe5
 8001cae:	f003 f80d 	bl	8004ccc <RadioSpiReadRegisters>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <SpiritCalibrationGetVcoCalData+0x34>)
 8001cb6:	b212      	sxth	r2, r2
 8001cb8:	4611      	mov	r1, r2
 8001cba:	7019      	strb	r1, [r3, #0]
 8001cbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cc0:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cc8:	b2db      	uxtb	r3, r3

}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200003b8 	.word	0x200003b8

08001cd8 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001ce2:	f107 030f 	add.w	r3, r7, #15
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2101      	movs	r1, #1
 8001cea:	206e      	movs	r0, #110	; 0x6e
 8001cec:	f002 ffee 	bl	8004ccc <RadioSpiReadRegisters>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001cf4:	b212      	sxth	r2, r2
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	7019      	strb	r1, [r3, #0]
 8001cfa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cfe:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001d14:	f107 030f 	add.w	r3, r7, #15
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	206e      	movs	r0, #110	; 0x6e
 8001d1e:	f002 ff29 	bl	8004b74 <RadioSpiWriteRegisters>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001d26:	b212      	sxth	r2, r2
 8001d28:	4611      	mov	r1, r2
 8001d2a:	7019      	strb	r1, [r3, #0]
 8001d2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d30:	705a      	strb	r2, [r3, #1]

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200003b8 	.word	0x200003b8

08001d40 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001d4a:	f107 030f 	add.w	r3, r7, #15
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2101      	movs	r1, #1
 8001d52:	206f      	movs	r0, #111	; 0x6f
 8001d54:	f002 ffba 	bl	8004ccc <RadioSpiReadRegisters>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001d5c:	b212      	sxth	r2, r2
 8001d5e:	4611      	mov	r1, r2
 8001d60:	7019      	strb	r1, [r3, #0]
 8001d62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d66:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001d7c:	f107 030f 	add.w	r3, r7, #15
 8001d80:	461a      	mov	r2, r3
 8001d82:	2101      	movs	r1, #1
 8001d84:	206f      	movs	r0, #111	; 0x6f
 8001d86:	f002 fef5 	bl	8004b74 <RadioSpiWriteRegisters>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001d8e:	b212      	sxth	r2, r2
 8001d90:	4611      	mov	r1, r2
 8001d92:	7019      	strb	r1, [r3, #0]
 8001d94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d98:	705a      	strb	r2, [r3, #1]

}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200003b8 	.word	0x200003b8

08001da8 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	461a      	mov	r2, r3
 8001db8:	2101      	movs	r1, #1
 8001dba:	209e      	movs	r0, #158	; 0x9e
 8001dbc:	f002 ff86 	bl	8004ccc <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	f023 0306 	bic.w	r3, r3, #6
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e004      	b.n	8001de6 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001de6:	f107 030f 	add.w	r3, r7, #15
 8001dea:	461a      	mov	r2, r3
 8001dec:	2101      	movs	r1, #1
 8001dee:	209e      	movs	r0, #158	; 0x9e
 8001df0:	f002 fec0 	bl	8004b74 <RadioSpiWriteRegisters>
  
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 f811 	bl	8004e30 <RadioSpiCommandStrobes>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SpiritCmdStrobeCommand+0x2c>)
 8001e12:	b212      	sxth	r2, r2
 8001e14:	4611      	mov	r1, r2
 8001e16:	7019      	strb	r1, [r3, #0]
 8001e18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e1c:	705a      	strb	r2, [r3, #1]
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200003b8 	.word	0x200003b8

08001e2c <SpiritCsmaInit>:
 * @param  pxCsmaInit Csma init structure.
 *         This parameter is a pointer to @ref CsmaInit.
 * @retval None.
 */
void SpiritCsmaInit(CsmaInit* pxCsmaInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_BU_COUNTER_SEED(pxCsmaInit->nBuCounterSeed));
  s_assert_param(IS_BU_PRESCALER(pxCsmaInit->cBuPrescaler));
  s_assert_param(IS_CMAX_NB(pxCsmaInit->cMaxNb));

  /* CSMA BU counter seed (MSB) config */
  tempRegValue[0] = (uint8_t)(pxCsmaInit->nBuCounterSeed >> 8);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	889b      	ldrh	r3, [r3, #4]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	723b      	strb	r3, [r7, #8]

  /* CSMA BU counter seed (LSB) config */
  tempRegValue[1] = (uint8_t) pxCsmaInit->nBuCounterSeed;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	889b      	ldrh	r3, [r3, #4]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	727b      	strb	r3, [r7, #9]

  /* CSMA BU prescaler config and CCA period config */
  tempRegValue[2] = (pxCsmaInit->cBuPrescaler << 2) | pxCsmaInit->xMultiplierTbit;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	799b      	ldrb	r3, [r3, #6]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	b25a      	sxtb	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	72bb      	strb	r3, [r7, #10]

  /* CSMA CCA length config and max number of back-off */
  tempRegValue[3] = (pxCsmaInit->xCcaLength | pxCsmaInit->cMaxNb);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	789a      	ldrb	r2, [r3, #2]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	78db      	ldrb	r3, [r3, #3]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	72fb      	strb	r3, [r7, #11]

  /* Reads the PROTOCOL1_BASE register value, to write the SEED_RELOAD and CSMA_PERS_ON fields */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	3304      	adds	r3, #4
 8001e72:	461a      	mov	r2, r3
 8001e74:	2101      	movs	r1, #1
 8001e76:	2051      	movs	r0, #81	; 0x51
 8001e78:	f002 ff28 	bl	8004ccc <RadioSpiReadRegisters>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <SpiritCsmaInit+0xc4>)
 8001e80:	b212      	sxth	r2, r2
 8001e82:	4611      	mov	r1, r2
 8001e84:	7019      	strb	r1, [r3, #0]
 8001e86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e8a:	705a      	strb	r2, [r3, #1]

  /* Writes the new value for persistent mode */
  if(pxCsmaInit->xCsmaPersistentMode==S_ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <SpiritCsmaInit+0x74>
  {
    tempRegValue[4] |= PROTOCOL1_CSMA_PERS_ON_MASK;
 8001e94:	7b3b      	ldrb	r3, [r7, #12]
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	733b      	strb	r3, [r7, #12]
 8001e9e:	e004      	b.n	8001eaa <SpiritCsmaInit+0x7e>
  }
  else
  {
    tempRegValue[4] &= ~PROTOCOL1_CSMA_PERS_ON_MASK;
 8001ea0:	7b3b      	ldrb	r3, [r7, #12]
 8001ea2:	f023 0302 	bic.w	r3, r3, #2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	733b      	strb	r3, [r7, #12]
  }

  /* Writes PROTOCOL1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	3304      	adds	r3, #4
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	2051      	movs	r0, #81	; 0x51
 8001eb6:	f002 fe5d 	bl	8004b74 <RadioSpiWriteRegisters>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <SpiritCsmaInit+0xc4>)
 8001ebe:	b212      	sxth	r2, r2
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	7019      	strb	r1, [r3, #0]
 8001ec4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ec8:	705a      	strb	r2, [r3, #1]

  /* Writes CSMA_CONFIGx_BASE registers */
  g_xStatus = SpiritSpiWriteRegisters(CSMA_CONFIG3_BASE, 4, tempRegValue);
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	2064      	movs	r0, #100	; 0x64
 8001ed4:	f002 fe4e 	bl	8004b74 <RadioSpiWriteRegisters>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <SpiritCsmaInit+0xc4>)
 8001edc:	b212      	sxth	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	7019      	strb	r1, [r3, #0]
 8001ee2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ee6:	705a      	strb	r2, [r3, #1]

}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200003b8 	.word	0x200003b8

08001ef4 <SpiritCsma>:
 * @param  xNewState the state of the CSMA mode.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCsma(SpiritFunctionalState xNewState)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PROTOCOL1 register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8001efe:	f107 030f 	add.w	r3, r7, #15
 8001f02:	461a      	mov	r2, r3
 8001f04:	2101      	movs	r1, #1
 8001f06:	2051      	movs	r0, #81	; 0x51
 8001f08:	f002 fee0 	bl	8004ccc <RadioSpiReadRegisters>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <SpiritCsma+0x6c>)
 8001f10:	b212      	sxth	r2, r2
 8001f12:	4611      	mov	r1, r2
 8001f14:	7019      	strb	r1, [r3, #0]
 8001f16:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f1a:	705a      	strb	r2, [r3, #1]

  /* Sets or resets the CSMA enable bit */
  if(xNewState==S_ENABLE)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <SpiritCsma+0x3a>
  {
    tempRegValue |= PROTOCOL1_CSMA_ON_MASK;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e004      	b.n	8001f38 <SpiritCsma+0x44>
  }
  else
  {
    tempRegValue &= ~PROTOCOL1_CSMA_ON_MASK;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the new value on the PROTOCOL1 register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8001f38:	f107 030f 	add.w	r3, r7, #15
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2101      	movs	r1, #1
 8001f40:	2051      	movs	r0, #81	; 0x51
 8001f42:	f002 fe17 	bl	8004b74 <RadioSpiWriteRegisters>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SpiritCsma+0x6c>)
 8001f4a:	b212      	sxth	r2, r2
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	7019      	strb	r1, [r3, #0]
 8001f50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f54:	705a      	strb	r2, [r3, #1]

}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003b8 	.word	0x200003b8

08001f64 <SpiritGeneralSetExtRef>:
 * @param  xExtMode new state for the external reference.
 *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
 * @retval None.
 */
void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_MODE_EXT(xExtMode));

  /* Reads the ANA_FUNC_CONF0_BASE register value */
  SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001f6e:	f107 030f 	add.w	r3, r7, #15
 8001f72:	461a      	mov	r2, r3
 8001f74:	2101      	movs	r1, #1
 8001f76:	2001      	movs	r0, #1
 8001f78:	f002 fea8 	bl	8004ccc <RadioSpiReadRegisters>

  /* Build the value to write */
  if(xExtMode == MODE_EXT_XO)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d105      	bne.n	8001f8e <SpiritGeneralSetExtRef+0x2a>
  {
    tempRegValue &= ~EXT_REF_MASK;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	f023 0310 	bic.w	r3, r3, #16
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e004      	b.n	8001f98 <SpiritGeneralSetExtRef+0x34>
  }
  else
  {
    tempRegValue |= EXT_REF_MASK;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	f043 0310 	orr.w	r3, r3, #16
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001f98:	f107 030f 	add.w	r3, r7, #15
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f002 fde7 	bl	8004b74 <RadioSpiWriteRegisters>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SpiritGeneralSetExtRef+0x5c>)
 8001faa:	b212      	sxth	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	7019      	strb	r1, [r3, #0]
 8001fb0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fb4:	705a      	strb	r2, [r3, #1]

}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200003b8 	.word	0x200003b8

08001fc4 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	785a      	ldrb	r2, [r3, #1]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f107 020f 	add.w	r2, r7, #15
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f002 fdc3 	bl	8004b74 <RadioSpiWriteRegisters>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SpiritGpioInit+0x44>)
 8001ff2:	b212      	sxth	r2, r2
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	7019      	strb	r1, [r3, #0]
 8001ff8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ffc:	705a      	strb	r2, [r3, #1]

}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200003b8 	.word	0x200003b8

0800200c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <SpiritIrqDeInit+0x20>
  {
    uint32_t tempValue = 0x00000000;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
    
    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6013      	str	r3, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	461a      	mov	r2, r3
 8002032:	2104      	movs	r1, #4
 8002034:	2090      	movs	r0, #144	; 0x90
 8002036:	f002 fd9d 	bl	8004b74 <RadioSpiWriteRegisters>
 800203a:	4602      	mov	r2, r0
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SpiritIrqDeInit+0x48>)
 800203e:	b212      	sxth	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	7019      	strb	r1, [r3, #0]
 8002044:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002048:	705a      	strb	r2, [r3, #1]
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003b8 	.word	0x200003b8

08002058 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	461a      	mov	r2, r3
 800206e:	2104      	movs	r1, #4
 8002070:	2090      	movs	r0, #144	; 0x90
 8002072:	f002 fe2b 	bl	8004ccc <RadioSpiReadRegisters>
 8002076:	4602      	mov	r2, r0
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <SpiritIrq+0xcc>)
 800207a:	b212      	sxth	r2, r2
 800207c:	4611      	mov	r1, r2
 800207e:	7019      	strb	r1, [r3, #0]
 8002080:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002084:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	74fb      	strb	r3, [r7, #19]
 800208a:	e012      	b.n	80020b2 <SpiritIrq+0x5a>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	f107 0218 	add.w	r2, r7, #24
 8002092:	4413      	add	r3, r2
 8002094:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002098:	461a      	mov	r2, r3
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	f1c3 0303 	rsb	r3, r3, #3
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4413      	add	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	3301      	adds	r3, #1
 80020b0:	74fb      	strb	r3, [r7, #19]
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d9e9      	bls.n	800208c <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <SpiritIrq+0x72>
  {
    tempValue &= (~xIrq);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4013      	ands	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e003      	b.n	80020d2 <SpiritIrq+0x7a>
  }
  else
  {
    tempValue |= (xIrq);
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	74bb      	strb	r3, [r7, #18]
 80020d6:	e00f      	b.n	80020f8 <SpiritIrq+0xa0>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80020d8:	7cbb      	ldrb	r3, [r7, #18]
 80020da:	f1c3 0303 	rsb	r3, r3, #3
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	40da      	lsrs	r2, r3
 80020e4:	7cbb      	ldrb	r3, [r7, #18]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f107 0118 	add.w	r1, r7, #24
 80020ec:	440b      	add	r3, r1
 80020ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 80020f2:	7cbb      	ldrb	r3, [r7, #18]
 80020f4:	3301      	adds	r3, #1
 80020f6:	74bb      	strb	r3, [r7, #18]
 80020f8:	7cbb      	ldrb	r3, [r7, #18]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d9ec      	bls.n	80020d8 <SpiritIrq+0x80>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	461a      	mov	r2, r3
 8002104:	2104      	movs	r1, #4
 8002106:	2090      	movs	r0, #144	; 0x90
 8002108:	f002 fd34 	bl	8004b74 <RadioSpiWriteRegisters>
 800210c:	4602      	mov	r2, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SpiritIrq+0xcc>)
 8002110:	b212      	sxth	r2, r2
 8002112:	4611      	mov	r1, r2
 8002114:	7019      	strb	r1, [r3, #0]
 8002116:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800211a:	705a      	strb	r2, [r3, #1]

}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200003b8 	.word	0x200003b8

08002128 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	461a      	mov	r2, r3
 800213a:	2104      	movs	r1, #4
 800213c:	20fa      	movs	r0, #250	; 0xfa
 800213e:	f002 fdc5 	bl	8004ccc <RadioSpiReadRegisters>
 8002142:	4602      	mov	r2, r0
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <SpiritIrqGetStatus+0x60>)
 8002146:	b212      	sxth	r2, r2
 8002148:	4611      	mov	r1, r2
 800214a:	7019      	strb	r1, [r3, #0]
 800214c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002150:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002152:	2300      	movs	r3, #0
 8002154:	74fb      	strb	r3, [r7, #19]
 8002156:	e00f      	b.n	8002178 <SpiritIrqGetStatus+0x50>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	f1c3 0303 	rsb	r3, r3, #3
 800215e:	f107 0218 	add.w	r2, r7, #24
 8002162:	4413      	add	r3, r2
 8002164:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	3301      	adds	r3, #1
 8002176:	74fb      	strb	r3, [r7, #19]
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d9ec      	bls.n	8002158 <SpiritIrqGetStatus+0x30>
  }
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200003b8 	.word	0x200003b8

0800218c <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	461a      	mov	r2, r3
 8002196:	2104      	movs	r1, #4
 8002198:	20fa      	movs	r0, #250	; 0xfa
 800219a:	f002 fd97 	bl	8004ccc <RadioSpiReadRegisters>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <SpiritIrqClearStatus+0x2c>)
 80021a2:	b212      	sxth	r2, r2
 80021a4:	4611      	mov	r1, r2
 80021a6:	7019      	strb	r1, [r3, #0]
 80021a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021ac:	705a      	strb	r2, [r3, #1]

}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200003b8 	.word	0x200003b8

080021bc <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	461a      	mov	r2, r3
 80021c6:	2101      	movs	r1, #1
 80021c8:	20e7      	movs	r0, #231	; 0xe7
 80021ca:	f002 fd7f 	bl	8004ccc <RadioSpiReadRegisters>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 80021d2:	b212      	sxth	r2, r2
 80021d4:	4611      	mov	r1, r2
 80021d6:	7019      	strb	r1, [r3, #0]
 80021d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021dc:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e4:	b2db      	uxtb	r3, r3

}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200003b8 	.word	0x200003b8

080021f4 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80021f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021f8:	b08a      	sub	sp, #40	; 0x28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a70      	ldr	r2, [pc, #448]	; (80023c4 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d907      	bls.n	8002216 <SpiritManagementSetFrequencyBase+0x22>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a6f      	ldr	r2, [pc, #444]	; (80023c8 <SpiritManagementSetFrequencyBase+0x1d4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d803      	bhi.n	8002216 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002214:	e01a      	b.n	800224c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a6c      	ldr	r2, [pc, #432]	; (80023cc <SpiritManagementSetFrequencyBase+0x1d8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d907      	bls.n	800222e <SpiritManagementSetFrequencyBase+0x3a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a6b      	ldr	r2, [pc, #428]	; (80023d0 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d803      	bhi.n	800222e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800222c:	e00e      	b.n	800224c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a68      	ldr	r2, [pc, #416]	; (80023d4 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d907      	bls.n	8002246 <SpiritManagementSetFrequencyBase+0x52>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a67      	ldr	r2, [pc, #412]	; (80023d8 <SpiritManagementSetFrequencyBase+0x1e4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d803      	bhi.n	8002246 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 800223e:	2302      	movs	r3, #2
 8002240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002244:	e002      	b.n	800224c <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8002246:	2303      	movs	r3, #3
 8002248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800224c:	f001 f806 	bl	800325c <SpiritRadioGetFrequencyOffset>
 8002250:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002252:	f000 ffe3 	bl	800321c <SpiritRadioGetChannelSpace>
 8002256:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002258:	f000 ffc8 	bl	80031ec <SpiritRadioGetChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	441a      	add	r2, r3
 8002266:	7efb      	ldrb	r3, [r7, #27]
 8002268:	69f9      	ldr	r1, [r7, #28]
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002272:	f001 fe49 	bl	8003f08 <SpiritRadioGetRefDiv>
 8002276:	4603      	mov	r3, r0
 8002278:	3301      	adds	r3, #1
 800227a:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 800227c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002280:	2b03      	cmp	r3, #3
 8002282:	d83a      	bhi.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
 8002284:	a201      	add	r2, pc, #4	; (adr r2, 800228c <SpiritManagementSetFrequencyBase+0x98>)
 8002286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228a:	bf00      	nop
 800228c:	080022e5 	.word	0x080022e5
 8002290:	080022cd 	.word	0x080022cd
 8002294:	080022b5 	.word	0x080022b5
 8002298:	0800229d 	.word	0x0800229d
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4a4f      	ldr	r2, [pc, #316]	; (80023dc <SpiritManagementSetFrequencyBase+0x1e8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d803      	bhi.n	80022ac <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fd7f 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80022aa:	e026      	b.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7ff fd7b 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80022b2:	e022      	b.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4a4a      	ldr	r2, [pc, #296]	; (80023e0 <SpiritManagementSetFrequencyBase+0x1ec>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d803      	bhi.n	80022c4 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff fd73 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80022c2:	e01a      	b.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7ff fd6f 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80022ca:	e016      	b.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4a45      	ldr	r2, [pc, #276]	; (80023e4 <SpiritManagementSetFrequencyBase+0x1f0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d803      	bhi.n	80022dc <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fd67 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80022da:	e00e      	b.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80022dc:	2001      	movs	r0, #1
 80022de:	f7ff fd63 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80022e2:	e00a      	b.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <SpiritManagementSetFrequencyBase+0x1f4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d803      	bhi.n	80022f4 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff fd5b 	bl	8001da8 <SpiritCalibrationSelectVco>
 80022f2:	e002      	b.n	80022fa <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff fd57 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f000 fe8e 	bl	800301c <SpiritRadioSearchWCP>
 8002300:	4603      	mov	r3, r0
 8002302:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe f8a9 	bl	800045c <__aeabi_ui2d>
 800230a:	4604      	mov	r4, r0
 800230c:	460d      	mov	r5, r1
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002316:	4935      	ldr	r1, [pc, #212]	; (80023ec <SpiritManagementSetFrequencyBase+0x1f8>)
 8002318:	5c8a      	ldrb	r2, [r1, r2]
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f8ac 	bl	800047c <__aeabi_i2d>
 8002324:	4680      	mov	r8, r0
 8002326:	4689      	mov	r9, r1
 8002328:	f001 fe62 	bl	8003ff0 <SpiritRadioGetXtalFrequency>
 800232c:	4603      	mov	r3, r0
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f894 	bl	800045c <__aeabi_ui2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4640      	mov	r0, r8
 800233a:	4649      	mov	r1, r9
 800233c:	f7fe fa32 	bl	80007a4 <__aeabi_ddiv>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4620      	mov	r0, r4
 8002346:	4629      	mov	r1, r5
 8002348:	f7fe f902 	bl	8000550 <__aeabi_dmul>
 800234c:	4603      	mov	r3, r0
 800234e:	460c      	mov	r4, r1
 8002350:	4618      	mov	r0, r3
 8002352:	4621      	mov	r1, r4
 8002354:	f7fe fb96 	bl	8000a84 <__aeabi_d2uiz>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	0d5b      	lsrs	r3, r3, #21
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	b2da      	uxtb	r2, r3
 8002368:	7cbb      	ldrb	r3, [r7, #18]
 800236a:	015b      	lsls	r3, r3, #5
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b2db      	uxtb	r3, r3
 8002372:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	0b5b      	lsrs	r3, r3, #13
 8002378:	b2db      	uxtb	r3, r3
 800237a:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	b2da      	uxtb	r2, r3
 800238c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002390:	4917      	ldr	r1, [pc, #92]	; (80023f0 <SpiritManagementSetFrequencyBase+0x1fc>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	4313      	orrs	r3, r2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	461a      	mov	r2, r3
 80023a0:	2104      	movs	r1, #4
 80023a2:	2008      	movs	r0, #8
 80023a4:	f002 fbe6 	bl	8004b74 <RadioSpiWriteRegisters>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <SpiritManagementSetFrequencyBase+0x200>)
 80023ac:	b212      	sxth	r2, r2
 80023ae:	4611      	mov	r1, r2
 80023b0:	7019      	strb	r1, [r3, #0]
 80023b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023b6:	705a      	strb	r2, [r3, #1]
}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023c2:	bf00      	nop
 80023c4:	2e5f567f 	.word	0x2e5f567f
 80023c8:	390c2fe0 	.word	0x390c2fe0
 80023cc:	1701e47f 	.word	0x1701e47f
 80023d0:	1c146a60 	.word	0x1c146a60
 80023d4:	11d260bf 	.word	0x11d260bf
 80023d8:	14ced7e0 	.word	0x14ced7e0
 80023dc:	099cf4e1 	.word	0x099cf4e1
 80023e0:	1339e9c3 	.word	0x1339e9c3
 80023e4:	19a28d05 	.word	0x19a28d05
 80023e8:	33451a0a 	.word	0x33451a0a
 80023ec:	08007398 	.word	0x08007398
 80023f0:	08007394 	.word	0x08007394
 80023f4:	200003b8 	.word	0x200003b8

080023f8 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002406:	f001 fdf3 	bl	8003ff0 <SpiritRadioGetXtalFrequency>
 800240a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800240c:	2300      	movs	r3, #0
 800240e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4a57      	ldr	r2, [pc, #348]	; (8002570 <SpiritManagementWaVcoCalibration+0x178>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d90f      	bls.n	8002438 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002418:	f001 fd76 	bl	8003f08 <SpiritRadioGetRefDiv>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002426:	f001 f87b 	bl	8003520 <SpiritRadioGetFrequencyBase>
 800242a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800242c:	2001      	movs	r0, #1
 800242e:	f001 fd3b 	bl	8003ea8 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fede 	bl	80021f4 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002438:	f001 f872 	bl	8003520 <SpiritRadioGetFrequencyBase>
 800243c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800243e:	2325      	movs	r3, #37	; 0x25
 8002440:	707b      	strb	r3, [r7, #1]
 8002442:	1c7b      	adds	r3, r7, #1
 8002444:	461a      	mov	r2, r3
 8002446:	2101      	movs	r1, #1
 8002448:	20a1      	movs	r0, #161	; 0xa1
 800244a:	f002 fb93 	bl	8004b74 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fbee 	bl	8001c30 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002454:	f001 ffa4 	bl	80043a0 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d10d      	bne.n	8002482 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800246a:	2062      	movs	r0, #98	; 0x62
 800246c:	f7ff fcc6 	bl	8001dfc <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002470:	f001 ff96 	bl	80043a0 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002474:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b03      	cmp	r3, #3
 8002480:	d1f6      	bne.n	8002470 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 8002482:	2066      	movs	r0, #102	; 0x66
 8002484:	f7ff fcba 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002488:	2300      	movs	r3, #0
 800248a:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 800248c:	f001 ff88 	bl	80043a0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b13      	cmp	r3, #19
 800249c:	d106      	bne.n	80024ac <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 800249e:	7b7b      	ldrb	r3, [r7, #13]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	737a      	strb	r2, [r7, #13]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d101      	bne.n	80024ac <SpiritManagementWaVcoCalibration+0xb4>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e05d      	b.n	8002568 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d1e8      	bne.n	800248c <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80024ba:	f7ff fbf1 	bl	8001ca0 <SpiritCalibrationGetVcoCalData>
 80024be:	4603      	mov	r3, r0
 80024c0:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80024c2:	2062      	movs	r0, #98	; 0x62
 80024c4:	f7ff fc9a 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80024c8:	f001 ff6a 	bl	80043a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d1f6      	bne.n	80024c8 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80024da:	2065      	movs	r0, #101	; 0x65
 80024dc:	f7ff fc8e 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80024e4:	f001 ff5c 	bl	80043a0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b13      	cmp	r3, #19
 80024f4:	d106      	bne.n	8002504 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80024f6:	7b7b      	ldrb	r3, [r7, #13]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	737a      	strb	r2, [r7, #13]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d101      	bne.n	8002504 <SpiritManagementWaVcoCalibration+0x10c>
 8002500:	2301      	movs	r3, #1
 8002502:	e031      	b.n	8002568 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b0f      	cmp	r3, #15
 8002510:	d1e8      	bne.n	80024e4 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002512:	f7ff fbc5 	bl	8001ca0 <SpiritCalibrationGetVcoCalData>
 8002516:	4603      	mov	r3, r0
 8002518:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800251a:	2062      	movs	r0, #98	; 0x62
 800251c:	f7ff fc6e 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002520:	f001 ff3e 	bl	80043a0 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <SpiritManagementWaVcoCalibration+0x17c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b03      	cmp	r3, #3
 8002530:	d1f6      	bne.n	8002520 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002532:	7bbb      	ldrb	r3, [r7, #14]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002538:	2063      	movs	r0, #99	; 0x63
 800253a:	f7ff fc5f 	bl	8001dfc <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff fb76 	bl	8001c30 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800254a:	2000      	movs	r0, #0
 800254c:	f001 fcac 	bl	8003ea8 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fe4f 	bl	80021f4 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fbbd 	bl	8001cd8 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800255e:	78bb      	ldrb	r3, [r7, #2]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fbed 	bl	8001d40 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	01c9c380 	.word	0x01c9c380
 8002574:	200003b8 	.word	0x200003b8

08002578 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <SpiritManagementWaCmdStrobeTx+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <SpiritManagementWaCmdStrobeTx+0x68>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d908      	bls.n	80025a4 <SpiritManagementWaCmdStrobeTx+0x2c>
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <SpiritManagementWaCmdStrobeTx+0x64>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d803      	bhi.n	80025a4 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 800259c:	20c0      	movs	r0, #192	; 0xc0
 800259e:	f001 fb99 	bl	8003cd4 <SpiritRadioSetPACwc>
 80025a2:	e002      	b.n	80025aa <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f001 fb95 	bl	8003cd4 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80025aa:	2311      	movs	r3, #17
 80025ac:	71fb      	strb	r3, [r7, #7]
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	461a      	mov	r2, r3
 80025b2:	2101      	movs	r1, #1
 80025b4:	20a9      	movs	r0, #169	; 0xa9
 80025b6:	f002 fadd 	bl	8004b74 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80025ba:	2320      	movs	r3, #32
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	461a      	mov	r2, r3
 80025c2:	2101      	movs	r1, #1
 80025c4:	20a5      	movs	r0, #165	; 0xa5
 80025c6:	f002 fad5 	bl	8004b74 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80025ca:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <SpiritManagementWaCmdStrobeTx+0x60>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
  }
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000150 	.word	0x20000150
 80025dc:	200002e8 	.word	0x200002e8
 80025e0:	08f0d17f 	.word	0x08f0d17f
 80025e4:	1c03a180 	.word	0x1c03a180

080025e8 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <SpiritManagementWaCmdStrobeRx+0x34>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d00d      	beq.n	8002614 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 80025f8:	2398      	movs	r3, #152	; 0x98
 80025fa:	71fb      	strb	r3, [r7, #7]
 80025fc:	1dfb      	adds	r3, r7, #7
 80025fe:	461a      	mov	r2, r3
 8002600:	2101      	movs	r1, #1
 8002602:	20a5      	movs	r0, #165	; 0xa5
 8002604:	f002 fab6 	bl	8004b74 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002608:	2000      	movs	r0, #0
 800260a:	f001 fb63 	bl	8003cd4 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800260e:	4b03      	ldr	r3, [pc, #12]	; (800261c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
  }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000150 	.word	0x20000150

08002620 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SpiritManagementWaTRxFcMem+0x20>)
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <SpiritManagementWaTRxFcMem+0x24>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	20000150 	.word	0x20000150
 8002644:	200002e8 	.word	0x200002e8

08002648 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	461a      	mov	r2, r3
 8002656:	2101      	movs	r1, #1
 8002658:	2051      	movs	r0, #81	; 0x51
 800265a:	f002 fb37 	bl	8004ccc <RadioSpiReadRegisters>
 800265e:	4602      	mov	r2, r0
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <SpiritPktBasicInit+0x1ac>)
 8002662:	b212      	sxth	r2, r2
 8002664:	4611      	mov	r1, r2
 8002666:	7019      	strb	r1, [r3, #0]
 8002668:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800266c:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800266e:	7a3b      	ldrb	r3, [r7, #8]
 8002670:	f023 0320 	bic.w	r3, r3, #32
 8002674:	b2db      	uxtb	r3, r3
 8002676:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002678:	7a3b      	ldrb	r3, [r7, #8]
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	461a      	mov	r2, r3
 8002688:	2101      	movs	r1, #1
 800268a:	2051      	movs	r0, #81	; 0x51
 800268c:	f002 fa72 	bl	8004b74 <RadioSpiWriteRegisters>
 8002690:	4602      	mov	r2, r0
 8002692:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <SpiritPktBasicInit+0x1ac>)
 8002694:	b212      	sxth	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	7019      	strb	r1, [r3, #0]
 800269a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800269e:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	461a      	mov	r2, r3
 80026a6:	2101      	movs	r1, #1
 80026a8:	204f      	movs	r0, #79	; 0x4f
 80026aa:	f002 fb0f 	bl	8004ccc <RadioSpiReadRegisters>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <SpiritPktBasicInit+0x1ac>)
 80026b2:	b212      	sxth	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	7019      	strb	r1, [r3, #0]
 80026b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026bc:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 80026be:	7a3b      	ldrb	r3, [r7, #8]
 80026c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	461a      	mov	r2, r3
 80026ce:	2101      	movs	r1, #1
 80026d0:	204f      	movs	r0, #79	; 0x4f
 80026d2:	f002 fa4f 	bl	8004b74 <RadioSpiWriteRegisters>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <SpiritPktBasicInit+0x1ac>)
 80026da:	b212      	sxth	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	7019      	strb	r1, [r3, #0]
 80026e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026e4:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7b1b      	ldrb	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 80026ee:	2308      	movs	r3, #8
 80026f0:	723b      	strb	r3, [r7, #8]
 80026f2:	e001      	b.n	80026f8 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80026f4:	2300      	movs	r3, #0
 80026f6:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 80026f8:	7a3a      	ldrb	r2, [r7, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7adb      	ldrb	r3, [r3, #11]
 80026fe:	4313      	orrs	r3, r2
 8002700:	b2db      	uxtb	r3, r3
 8002702:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7a5b      	ldrb	r3, [r3, #9]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <SpiritPktBasicInit+0xca>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7a5b      	ldrb	r3, [r3, #9]
 8002716:	3b01      	subs	r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	4313      	orrs	r3, r2
 8002726:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 800272c:	4313      	orrs	r3, r2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7a9b      	ldrb	r3, [r3, #10]
 8002736:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7b9b      	ldrb	r3, [r3, #14]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d104      	bne.n	800274a <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	f043 0310 	orr.w	r3, r3, #16
 8002746:	b2db      	uxtb	r3, r3
 8002748:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7b5b      	ldrb	r3, [r3, #13]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d104      	bne.n	800275c <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	461a      	mov	r2, r3
 8002762:	2104      	movs	r1, #4
 8002764:	2030      	movs	r0, #48	; 0x30
 8002766:	f002 fa05 	bl	8004b74 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e01f      	b.n	80027b0 <SpiritPktBasicInit+0x168>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f1c3 0303 	rsb	r3, r3, #3
 800277e:	429a      	cmp	r2, r3
 8002780:	da07      	bge.n	8002792 <SpiritPktBasicInit+0x14a>
    {
      tempRegValue[i]=0;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	f107 0210 	add.w	r2, r7, #16
 8002788:	4413      	add	r3, r2
 800278a:	2200      	movs	r2, #0
 800278c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002790:	e00b      	b.n	80027aa <SpiritPktBasicInit+0x162>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	40da      	lsrs	r2, r3
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	f107 0110 	add.w	r1, r7, #16
 80027a4:	440b      	add	r3, r1
 80027a6:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3301      	adds	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d9dc      	bls.n	8002770 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7a9b      	ldrb	r3, [r3, #10]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <SpiritPktBasicInit+0x17e>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f8fc 	bl	80029bc <SpiritPktCommonFilterOnCrc>
 80027c4:	e002      	b.n	80027cc <SpiritPktBasicInit+0x184>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f000 f8f8 	bl	80029bc <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	461a      	mov	r2, r3
 80027d2:	2104      	movs	r1, #4
 80027d4:	2036      	movs	r0, #54	; 0x36
 80027d6:	f002 f9cd 	bl	8004b74 <RadioSpiWriteRegisters>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SpiritPktBasicInit+0x1ac>)
 80027de:	b212      	sxth	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	7019      	strb	r1, [r3, #0]
 80027e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027e8:	705a      	strb	r2, [r3, #1]

}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200003b8 	.word	0x200003b8

080027f8 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	461a      	mov	r2, r3
 8002806:	2101      	movs	r1, #1
 8002808:	204f      	movs	r0, #79	; 0x4f
 800280a:	f002 fa5f 	bl	8004ccc <RadioSpiReadRegisters>
 800280e:	4602      	mov	r2, r0
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <SpiritPktBasicAddressesInit+0xd8>)
 8002812:	b212      	sxth	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	7019      	strb	r1, [r3, #0]
 8002818:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800281c:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002826:	7b3b      	ldrb	r3, [r7, #12]
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	b2db      	uxtb	r3, r3
 800282e:	733b      	strb	r3, [r7, #12]
 8002830:	e004      	b.n	800283c <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002832:	7b3b      	ldrb	r3, [r7, #12]
 8002834:	f023 0308 	bic.w	r3, r3, #8
 8002838:	b2db      	uxtb	r3, r3
 800283a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	789b      	ldrb	r3, [r3, #2]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d105      	bne.n	8002850 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002844:	7b3b      	ldrb	r3, [r7, #12]
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	b2db      	uxtb	r3, r3
 800284c:	733b      	strb	r3, [r7, #12]
 800284e:	e004      	b.n	800285a <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002850:	7b3b      	ldrb	r3, [r7, #12]
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	b2db      	uxtb	r3, r3
 8002858:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	791b      	ldrb	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002862:	7b3b      	ldrb	r3, [r7, #12]
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	b2db      	uxtb	r3, r3
 800286a:	733b      	strb	r3, [r7, #12]
 800286c:	e004      	b.n	8002878 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800286e:	7b3b      	ldrb	r3, [r7, #12]
 8002870:	f023 0302 	bic.w	r3, r3, #2
 8002874:	b2db      	uxtb	r3, r3
 8002876:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	461a      	mov	r2, r3
 800287e:	2101      	movs	r1, #1
 8002880:	204f      	movs	r0, #79	; 0x4f
 8002882:	f002 f977 	bl	8004b74 <RadioSpiWriteRegisters>
 8002886:	4602      	mov	r2, r0
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <SpiritPktBasicAddressesInit+0xd8>)
 800288a:	b212      	sxth	r2, r2
 800288c:	4611      	mov	r1, r2
 800288e:	7019      	strb	r1, [r3, #0]
 8002890:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002894:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	795b      	ldrb	r3, [r3, #5]
 800289a:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	78db      	ldrb	r3, [r3, #3]
 80028a0:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	461a      	mov	r2, r3
 80028ae:	2103      	movs	r1, #3
 80028b0:	204c      	movs	r0, #76	; 0x4c
 80028b2:	f002 f95f 	bl	8004b74 <RadioSpiWriteRegisters>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <SpiritPktBasicAddressesInit+0xd8>)
 80028ba:	b212      	sxth	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	7019      	strb	r1, [r3, #0]
 80028c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028c4:	705a      	strb	r2, [r3, #1]
  
  
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200003b8 	.word	0x200003b8

080028d4 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	461a      	mov	r2, r3
 80028de:	2101      	movs	r1, #1
 80028e0:	2030      	movs	r0, #48	; 0x30
 80028e2:	f002 f9f3 	bl	8004ccc <RadioSpiReadRegisters>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <SpiritPktBasicGetAddressField+0x3c>)
 80028ea:	b212      	sxth	r2, r2
 80028ec:	4611      	mov	r1, r2
 80028ee:	7019      	strb	r1, [r3, #0]
 80028f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028f4:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	f003 0318 	and.w	r3, r3, #24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8002904:	2300      	movs	r3, #0
  }

}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200003b8 	.word	0x200003b8

08002914 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 800291e:	2300      	movs	r3, #0
 8002920:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8002922:	f7ff ffd7 	bl	80028d4 <SpiritPktBasicGetAddressField>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 800292c:	2301      	movs	r3, #1
 800292e:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8002930:	f000 f828 	bl	8002984 <SpiritPktCommonGetControlLength>
 8002934:	4603      	mov	r3, r0
 8002936:	b29a      	uxth	r2, r3
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	4413      	add	r3, r2
 800293c:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4413      	add	r3, r2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	4413      	add	r3, r2
 8002952:	121b      	asrs	r3, r3, #8
 8002954:	b2db      	uxtb	r3, r3
 8002956:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	461a      	mov	r2, r3
 800295e:	2102      	movs	r1, #2
 8002960:	2034      	movs	r0, #52	; 0x34
 8002962:	f002 f907 	bl	8004b74 <RadioSpiWriteRegisters>
 8002966:	4602      	mov	r2, r0
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <SpiritPktBasicSetPayloadLength+0x6c>)
 800296a:	b212      	sxth	r2, r2
 800296c:	4611      	mov	r1, r2
 800296e:	7019      	strb	r1, [r3, #0]
 8002970:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002974:	705a      	strb	r2, [r3, #1]

}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200003b8 	.word	0x200003b8

08002984 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	461a      	mov	r2, r3
 800298e:	2101      	movs	r1, #1
 8002990:	2030      	movs	r0, #48	; 0x30
 8002992:	f002 f99b 	bl	8004ccc <RadioSpiReadRegisters>
 8002996:	4602      	mov	r2, r0
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <SpiritPktCommonGetControlLength+0x34>)
 800299a:	b212      	sxth	r2, r2
 800299c:	4611      	mov	r1, r2
 800299e:	7019      	strb	r1, [r3, #0]
 80029a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029a4:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	b2db      	uxtb	r3, r3

}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200003b8 	.word	0x200003b8

080029bc <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80029c6:	f107 030f 	add.w	r3, r7, #15
 80029ca:	461a      	mov	r2, r3
 80029cc:	2101      	movs	r1, #1
 80029ce:	204f      	movs	r0, #79	; 0x4f
 80029d0:	f002 f97c 	bl	8004ccc <RadioSpiReadRegisters>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <SpiritPktCommonFilterOnCrc+0x6c>)
 80029d8:	b212      	sxth	r2, r2
 80029da:	4611      	mov	r1, r2
 80029dc:	7019      	strb	r1, [r3, #0]
 80029de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029e2:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e004      	b.n	8002a00 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002a00:	f107 030f 	add.w	r3, r7, #15
 8002a04:	461a      	mov	r2, r3
 8002a06:	2101      	movs	r1, #1
 8002a08:	204f      	movs	r0, #79	; 0x4f
 8002a0a:	f002 f8b3 	bl	8004b74 <RadioSpiWriteRegisters>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002a12:	b212      	sxth	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	7019      	strb	r1, [r3, #0]
 8002a18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a1c:	705a      	strb	r2, [r3, #1]

}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200003b8 	.word	0x200003b8

08002a2c <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	204b      	movs	r0, #75	; 0x4b
 8002a3e:	f002 f899 	bl	8004b74 <RadioSpiWriteRegisters>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SpiritPktCommonSetDestinationAddress+0x30>)
 8002a46:	b212      	sxth	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	7019      	strb	r1, [r3, #0]
 8002a4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a50:	705a      	strb	r2, [r3, #1]

}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200003b8 	.word	0x200003b8

08002a60 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	20d3      	movs	r0, #211	; 0xd3
 8002a6e:	f002 f92d 	bl	8004ccc <RadioSpiReadRegisters>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8002a76:	b212      	sxth	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	7019      	strb	r1, [r3, #0]
 8002a7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a80:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002a82:	79fb      	ldrb	r3, [r7, #7]

}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200003b8 	.word	0x200003b8

08002a90 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002a9a:	f107 030f 	add.w	r3, r7, #15
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	203a      	movs	r0, #58	; 0x3a
 8002aa4:	f002 f912 	bl	8004ccc <RadioSpiReadRegisters>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <SpiritQiSqiCheck+0x6c>)
 8002aac:	b212      	sxth	r2, r2
 8002aae:	4611      	mov	r1, r2
 8002ab0:	7019      	strb	r1, [r3, #0]
 8002ab2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ab6:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e004      	b.n	8002ad4 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	f023 0302 	bic.w	r3, r3, #2
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002ad4:	f107 030f 	add.w	r3, r7, #15
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2101      	movs	r1, #1
 8002adc:	203a      	movs	r0, #58	; 0x3a
 8002ade:	f002 f849 	bl	8004b74 <RadioSpiWriteRegisters>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <SpiritQiSqiCheck+0x6c>)
 8002ae6:	b212      	sxth	r2, r2
 8002ae8:	4611      	mov	r1, r2
 8002aea:	7019      	strb	r1, [r3, #0]
 8002aec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002af0:	705a      	strb	r2, [r3, #1]

}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200003b8 	.word	0x200003b8

08002b00 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002b0a:	f107 030f 	add.w	r3, r7, #15
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2101      	movs	r1, #1
 8002b12:	203a      	movs	r0, #58	; 0x3a
 8002b14:	f002 f8da 	bl	8004ccc <RadioSpiReadRegisters>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <SpiritQiSetSqiThreshold+0x64>)
 8002b1c:	b212      	sxth	r2, r2
 8002b1e:	4611      	mov	r1, r2
 8002b20:	7019      	strb	r1, [r3, #0]
 8002b22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b26:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002b3c:	f107 030f 	add.w	r3, r7, #15
 8002b40:	461a      	mov	r2, r3
 8002b42:	2101      	movs	r1, #1
 8002b44:	203a      	movs	r0, #58	; 0x3a
 8002b46:	f002 f815 	bl	8004b74 <RadioSpiWriteRegisters>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <SpiritQiSetSqiThreshold+0x64>)
 8002b4e:	b212      	sxth	r2, r2
 8002b50:	4611      	mov	r1, r2
 8002b52:	7019      	strb	r1, [r3, #0]
 8002b54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b58:	705a      	strb	r2, [r3, #1]

}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200003b8 	.word	0x200003b8

08002b68 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3382      	adds	r3, #130	; 0x82
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002b7c:	f107 030f 	add.w	r3, r7, #15
 8002b80:	461a      	mov	r2, r3
 8002b82:	2101      	movs	r1, #1
 8002b84:	2022      	movs	r0, #34	; 0x22
 8002b86:	f001 fff5 	bl	8004b74 <RadioSpiWriteRegisters>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002b8e:	b212      	sxth	r2, r2
 8002b90:	4611      	mov	r1, r2
 8002b92:	7019      	strb	r1, [r3, #0]
 8002b94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b98:	705a      	strb	r2, [r3, #1]

}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200003b8 	.word	0x200003b8

08002ba8 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b08d      	sub	sp, #52	; 0x34
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002bb0:	23a0      	movs	r3, #160	; 0xa0
 8002bb2:	747b      	strb	r3, [r7, #17]
 8002bb4:	f107 0311 	add.w	r3, r7, #17
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2101      	movs	r1, #1
 8002bbc:	209f      	movs	r0, #159	; 0x9f
 8002bbe:	f001 ffd9 	bl	8004b74 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be0:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8002ec0 <SpiritRadioInit+0x318>
 8002be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bec:	ee17 3a90 	vmov	r3, s15
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002bf2:	2063      	movs	r0, #99	; 0x63
 8002bf4:	f002 f91c 	bl	8004e30 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73bb      	strb	r3, [r7, #14]
 8002bfc:	e004      	b.n	8002c08 <SpiritRadioInit+0x60>
 8002bfe:	7bbb      	ldrb	r3, [r7, #14]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	73bb      	strb	r3, [r7, #14]
 8002c08:	7bbb      	ldrb	r3, [r7, #14]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2bff      	cmp	r3, #255	; 0xff
 8002c0e:	d1f6      	bne.n	8002bfe <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002c10:	f001 fbc6 	bl	80043a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002c14:	4bab      	ldr	r3, [pc, #684]	; (8002ec4 <SpiritRadioInit+0x31c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d1ea      	bne.n	8002bf8 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002c22:	4ba9      	ldr	r3, [pc, #676]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4aa9      	ldr	r2, [pc, #676]	; (8002ecc <SpiritRadioInit+0x324>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d803      	bhi.n	8002c34 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f001 f98d 	bl	8003f4c <SpiritRadioSetDigDiv>
 8002c32:	e002      	b.n	8002c3a <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002c34:	2001      	movs	r0, #1
 8002c36:	f001 f989 	bl	8003f4c <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002c3a:	2062      	movs	r0, #98	; 0x62
 8002c3c:	f002 f8f8 	bl	8004e30 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002c40:	2300      	movs	r3, #0
 8002c42:	737b      	strb	r3, [r7, #13]
 8002c44:	e004      	b.n	8002c50 <SpiritRadioInit+0xa8>
 8002c46:	7b7b      	ldrb	r3, [r7, #13]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	737b      	strb	r3, [r7, #13]
 8002c50:	7b7b      	ldrb	r3, [r7, #13]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2bff      	cmp	r3, #255	; 0xff
 8002c56:	d1f6      	bne.n	8002c46 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002c58:	f001 fba2 	bl	80043a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002c5c:	4b99      	ldr	r3, [pc, #612]	; (8002ec4 <SpiritRadioInit+0x31c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d1ea      	bne.n	8002c40 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c74:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002ed0 <SpiritRadioInit+0x328>
 8002c78:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c7c:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c90:	ee17 3a90 	vmov	r3, s15
 8002c94:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002c96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002ca6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	025a      	lsls	r2, r3, #9
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fca9 	bl	8002620 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	20a3      	movs	r0, #163	; 0xa3
 8002cd8:	f001 fff8 	bl	8004ccc <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002cdc:	7c3b      	ldrb	r3, [r7, #16]
 8002cde:	f023 0302 	bic.w	r3, r3, #2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	743b      	strb	r3, [r7, #16]
 8002ce6:	f107 0310 	add.w	r3, r7, #16
 8002cea:	461a      	mov	r2, r3
 8002cec:	2101      	movs	r1, #1
 8002cee:	20a3      	movs	r0, #163	; 0xa3
 8002cf0:	f001 ff40 	bl	8004b74 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f107 0216 	add.w	r2, r7, #22
 8002cfc:	f107 0117 	add.w	r1, r7, #23
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fc59 	bl	80035b8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7b5a      	ldrb	r2, [r3, #13]
 8002d0e:	7dbb      	ldrb	r3, [r7, #22]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	201c      	movs	r0, #28
 8002d20:	f001 ffd4 	bl	8004ccc <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f107 0214 	add.w	r2, r7, #20
 8002d2c:	f107 0115 	add.w	r1, r7, #21
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fde1 	bl	80038f8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002d36:	7d3b      	ldrb	r3, [r7, #20]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	b25a      	sxtb	r2, r3
 8002d3c:	7c3b      	ldrb	r3, [r7, #16]
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	4313      	orrs	r3, r2
 8002d48:	b25a      	sxtb	r2, r3
 8002d4a:	7d7b      	ldrb	r3, [r7, #21]
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f107 0212 	add.w	r2, r7, #18
 8002d5e:	f107 0113 	add.w	r1, r7, #19
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fcdc 	bl	8003720 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	b25a      	sxtb	r2, r3
 8002d6e:	7cbb      	ldrb	r3, [r7, #18]
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0b1b      	lsrs	r3, r3, #12
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d88:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002ed4 <SpiritRadioInit+0x32c>
 8002d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d90:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002ed8 <SpiritRadioInit+0x330>
 8002d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002d9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbc:	dd0a      	ble.n	8002dd4 <SpiritRadioInit+0x22c>
 8002dbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc6:	edc7 7a00 	vstr	s15, [r7]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e007      	b.n	8002de4 <SpiritRadioInit+0x23c>
 8002dd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ddc:	edc7 7a00 	vstr	s15, [r7]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a38      	ldr	r2, [pc, #224]	; (8002ecc <SpiritRadioInit+0x324>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d802      	bhi.n	8002df6 <SpiritRadioInit+0x24e>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	777b      	strb	r3, [r7, #29]
 8002df4:	e035      	b.n	8002e62 <SpiritRadioInit+0x2ba>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0b5b      	lsrs	r3, r3, #13
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e04:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002ed4 <SpiritRadioInit+0x32c>
 8002e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e0c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002ed8 <SpiritRadioInit+0x330>
 8002e10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002e18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	dd0a      	ble.n	8002e50 <SpiritRadioInit+0x2a8>
 8002e3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e42:	edc7 7a00 	vstr	s15, [r7]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e007      	b.n	8002e60 <SpiritRadioInit+0x2b8>
 8002e50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e58:	edc7 7a00 	vstr	s15, [r7]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002e62:	f107 030f 	add.w	r3, r7, #15
 8002e66:	461a      	mov	r2, r3
 8002e68:	2101      	movs	r1, #1
 8002e6a:	2007      	movs	r0, #7
 8002e6c:	f001 fe82 	bl	8004b74 <RadioSpiWriteRegisters>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <SpiritRadioInit+0x31c>)
 8002e74:	b212      	sxth	r2, r2
 8002e76:	4611      	mov	r1, r2
 8002e78:	7019      	strb	r1, [r3, #0]
 8002e7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e7e:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <SpiritRadioInit+0x334>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d92a      	bls.n	8002ee0 <SpiritRadioInit+0x338>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <SpiritRadioInit+0x320>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fae3 	bl	800045c <__aeabi_ui2d>
 8002e96:	2301      	movs	r3, #1
 8002e98:	461c      	mov	r4, r3
 8002e9a:	a307      	add	r3, pc, #28	; (adr r3, 8002eb8 <SpiritRadioInit+0x310>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fddc 	bl	8000a5c <__aeabi_dcmpge>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <SpiritRadioInit+0x306>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	461c      	mov	r4, r3
 8002eae:	b2e3      	uxtb	r3, r4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f879 	bl	8002fa8 <SpiritRadioSetXtalFlag>
 8002eb6:	e028      	b.n	8002f0a <SpiritRadioInit+0x362>
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	4177d784 	.word	0x4177d784
 8002ec0:	49742400 	.word	0x49742400
 8002ec4:	200003b8 	.word	0x200003b8
 8002ec8:	200002ec 	.word	0x200002ec
 8002ecc:	01c9c37f 	.word	0x01c9c37f
 8002ed0:	48800000 	.word	0x48800000
 8002ed4:	49afd520 	.word	0x49afd520
 8002ed8:	42800000 	.word	0x42800000
 8002edc:	01c9c380 	.word	0x01c9c380
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <SpiritRadioInit+0x3f8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd fab9 	bl	800045c <__aeabi_ui2d>
 8002eea:	2301      	movs	r3, #1
 8002eec:	461c      	mov	r4, r3
 8002eee:	a32a      	add	r3, pc, #168	; (adr r3, 8002f98 <SpiritRadioInit+0x3f0>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd fdb2 	bl	8000a5c <__aeabi_dcmpge>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <SpiritRadioInit+0x35a>
 8002efe:	2300      	movs	r3, #0
 8002f00:	461c      	mov	r4, r3
 8002f02:	b2e3      	uxtb	r3, r4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f84f 	bl	8002fa8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2101      	movs	r1, #1
 8002f12:	206c      	movs	r0, #108	; 0x6c
 8002f14:	f001 fe2e 	bl	8004b74 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002f18:	f107 031c 	add.w	r3, r7, #28
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2104      	movs	r1, #4
 8002f20:	200c      	movs	r0, #12
 8002f22:	f001 fe27 	bl	8004b74 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002f26:	f107 0318 	add.w	r3, r7, #24
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	201a      	movs	r0, #26
 8002f30:	f001 fe20 	bl	8004b74 <RadioSpiWriteRegisters>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <SpiritRadioInit+0x3fc>)
 8002f38:	b212      	sxth	r2, r2
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	7019      	strb	r1, [r3, #0]
 8002f3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f42:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002f44:	2001      	movs	r0, #1
 8002f46:	f000 ff1d 	bl	8003d84 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002f4e:	23e3      	movs	r3, #227	; 0xe3
 8002f50:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	461a      	mov	r2, r3
 8002f58:	2102      	movs	r1, #2
 8002f5a:	2099      	movs	r0, #153	; 0x99
 8002f5c:	f001 fe0a 	bl	8004b74 <RadioSpiWriteRegisters>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <SpiritRadioInit+0x3fc>)
 8002f64:	b212      	sxth	r2, r2
 8002f66:	4611      	mov	r1, r2
 8002f68:	7019      	strb	r1, [r3, #0]
 8002f6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f6e:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002f70:	2322      	movs	r3, #34	; 0x22
 8002f72:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	20bc      	movs	r0, #188	; 0xbc
 8002f7e:	f001 fdf9 	bl	8004b74 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f9ac 	bl	80032e4 <SpiritRadioSetFrequencyBase>
 8002f8c:	4603      	mov	r3, r0
  
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3734      	adds	r7, #52	; 0x34
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd90      	pop	{r4, r7, pc}
 8002f96:	bf00      	nop
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	4177d784 	.word	0x4177d784
 8002fa0:	200002ec 	.word	0x200002ec
 8002fa4:	200003b8 	.word	0x200003b8

08002fa8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002fb6:	f107 030f 	add.w	r3, r7, #15
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f001 fe84 	bl	8004ccc <RadioSpiReadRegisters>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <SpiritRadioSetXtalFlag+0x70>)
 8002fc8:	b212      	sxth	r2, r2
 8002fca:	4611      	mov	r1, r2
 8002fcc:	7019      	strb	r1, [r3, #0]
 8002fce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fd2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e004      	b.n	8002ff0 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002ff0:	f107 030f 	add.w	r3, r7, #15
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f001 fdbb 	bl	8004b74 <RadioSpiWriteRegisters>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SpiritRadioSetXtalFlag+0x70>)
 8003002:	b212      	sxth	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	7019      	strb	r1, [r3, #0]
 8003008:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800300c:	705a      	strb	r2, [r3, #1]
  
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200003b8 	.word	0x200003b8

0800301c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 800302c:	2300      	movs	r3, #0
 800302e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3a      	ldr	r2, [pc, #232]	; (800311c <SpiritRadioSearchWCP+0x100>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d906      	bls.n	8003046 <SpiritRadioSearchWCP+0x2a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a39      	ldr	r2, [pc, #228]	; (8003120 <SpiritRadioSearchWCP+0x104>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d802      	bhi.n	8003046 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003040:	2306      	movs	r3, #6
 8003042:	73bb      	strb	r3, [r7, #14]
 8003044:	e01f      	b.n	8003086 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a36      	ldr	r2, [pc, #216]	; (8003124 <SpiritRadioSearchWCP+0x108>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d906      	bls.n	800305c <SpiritRadioSearchWCP+0x40>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a35      	ldr	r2, [pc, #212]	; (8003128 <SpiritRadioSearchWCP+0x10c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d802      	bhi.n	800305c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8003056:	230c      	movs	r3, #12
 8003058:	73bb      	strb	r3, [r7, #14]
 800305a:	e014      	b.n	8003086 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a33      	ldr	r2, [pc, #204]	; (800312c <SpiritRadioSearchWCP+0x110>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d906      	bls.n	8003072 <SpiritRadioSearchWCP+0x56>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a32      	ldr	r2, [pc, #200]	; (8003130 <SpiritRadioSearchWCP+0x114>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d802      	bhi.n	8003072 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 800306c:	2310      	movs	r3, #16
 800306e:	73bb      	strb	r3, [r7, #14]
 8003070:	e009      	b.n	8003086 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <SpiritRadioSearchWCP+0x118>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d905      	bls.n	8003086 <SpiritRadioSearchWCP+0x6a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2e      	ldr	r2, [pc, #184]	; (8003138 <SpiritRadioSearchWCP+0x11c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d801      	bhi.n	8003086 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8003082:	2320      	movs	r3, #32
 8003084:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a2c      	ldr	r2, [pc, #176]	; (800313c <SpiritRadioSearchWCP+0x120>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	7bba      	ldrb	r2, [r7, #14]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8003098:	f241 631f 	movw	r3, #5663	; 0x161f
 800309c:	461a      	mov	r2, r3
 800309e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a2:	fb03 f302 	mul.w	r3, r3, r2
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80030ac:	230f      	movs	r3, #15
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e023      	b.n	80030fa <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	e005      	b.n	80030c4 <SpiritRadioSearchWCP+0xa8>
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c8:	2b0e      	cmp	r3, #14
 80030ca:	dc0c      	bgt.n	80030e6 <SpiritRadioSearchWCP+0xca>
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <SpiritRadioSearchWCP+0x124>)
 80030d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030dc:	fb03 f302 	mul.w	r3, r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d8e8      	bhi.n	80030b8 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <SpiritRadioSearchWCP+0xde>
      i--;
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	425a      	negs	r2, r3
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	f002 0207 	and.w	r2, r2, #7
 8003108:	bf58      	it	pl
 800310a:	4253      	negpl	r3, r2
 800310c:	b25b      	sxtb	r3, r3
 800310e:	b2db      	uxtb	r3, r3
  
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	2e5f567f 	.word	0x2e5f567f
 8003120:	390c2fe0 	.word	0x390c2fe0
 8003124:	1701e47f 	.word	0x1701e47f
 8003128:	1c146a60 	.word	0x1c146a60
 800312c:	11d260bf 	.word	0x11d260bf
 8003130:	14ced7e0 	.word	0x14ced7e0
 8003134:	08e18f3f 	.word	0x08e18f3f
 8003138:	0a6fd060 	.word	0x0a6fd060
 800313c:	10624dd3 	.word	0x10624dd3
 8003140:	08007458 	.word	0x08007458

08003144 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	461a      	mov	r2, r3
 800314e:	2104      	movs	r1, #4
 8003150:	2008      	movs	r0, #8
 8003152:	f001 fdbb 	bl	8004ccc <RadioSpiReadRegisters>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <SpiritRadioGetSynthWord+0x48>)
 800315a:	b212      	sxth	r2, r2
 800315c:	4611      	mov	r1, r2
 800315e:	7019      	strb	r1, [r3, #0]
 8003160:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003164:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003166:	793b      	ldrb	r3, [r7, #4]
 8003168:	055b      	lsls	r3, r3, #21
 800316a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 800316e:	797b      	ldrb	r3, [r7, #5]
 8003170:	035b      	lsls	r3, r3, #13
 8003172:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003174:	79bb      	ldrb	r3, [r7, #6]
 8003176:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003178:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 800317a:	79fa      	ldrb	r2, [r7, #7]
 800317c:	08d2      	lsrs	r2, r2, #3
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	4413      	add	r3, r2
  
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200003b8 	.word	0x200003b8

08003190 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	461a      	mov	r2, r3
 800319a:	2101      	movs	r1, #1
 800319c:	200b      	movs	r0, #11
 800319e:	f001 fd95 	bl	8004ccc <RadioSpiReadRegisters>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <SpiritRadioGetBand+0x58>)
 80031a6:	b212      	sxth	r2, r2
 80031a8:	4611      	mov	r1, r2
 80031aa:	7019      	strb	r1, [r3, #0]
 80031ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031b0:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 80031bc:	2300      	movs	r3, #0
 80031be:	e00e      	b.n	80031de <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d101      	bne.n	80031ce <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e007      	b.n	80031de <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d101      	bne.n	80031dc <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 80031d8:	2302      	movs	r3, #2
 80031da:	e000      	b.n	80031de <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 80031dc:	2303      	movs	r3, #3
  }
  
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200003b8 	.word	0x200003b8

080031ec <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	461a      	mov	r2, r3
 80031f6:	2101      	movs	r1, #1
 80031f8:	206c      	movs	r0, #108	; 0x6c
 80031fa:	f001 fd67 	bl	8004ccc <RadioSpiReadRegisters>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SpiritRadioGetChannel+0x2c>)
 8003202:	b212      	sxth	r2, r2
 8003204:	4611      	mov	r1, r2
 8003206:	7019      	strb	r1, [r3, #0]
 8003208:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800320c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800320e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	200003b8 	.word	0x200003b8

0800321c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	461a      	mov	r2, r3
 8003226:	2101      	movs	r1, #1
 8003228:	200c      	movs	r0, #12
 800322a:	f001 fd4f 	bl	8004ccc <RadioSpiReadRegisters>
 800322e:	4602      	mov	r2, r0
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <SpiritRadioGetChannelSpace+0x38>)
 8003232:	b212      	sxth	r2, r2
 8003234:	4611      	mov	r1, r2
 8003236:	7019      	strb	r1, [r3, #0]
 8003238:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800323c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	461a      	mov	r2, r3
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <SpiritRadioGetChannelSpace+0x3c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fb03 f302 	mul.w	r3, r3, r2
 800324a:	0bdb      	lsrs	r3, r3, #15
  
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200003b8 	.word	0x200003b8
 8003258:	200002ec 	.word	0x200002ec

0800325c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	461a      	mov	r2, r3
 8003266:	2102      	movs	r1, #2
 8003268:	200e      	movs	r0, #14
 800326a:	f001 fd2f 	bl	8004ccc <RadioSpiReadRegisters>
 800326e:	4602      	mov	r2, r0
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <SpiritRadioGetFrequencyOffset+0x80>)
 8003272:	b212      	sxth	r2, r2
 8003274:	4611      	mov	r1, r2
 8003276:	7019      	strb	r1, [r3, #0]
 8003278:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800327c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 800327e:	793b      	ldrb	r3, [r7, #4]
 8003280:	b29b      	uxth	r3, r3
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	b29a      	uxth	r2, r3
 8003286:	797b      	ldrb	r3, [r7, #5]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4413      	add	r3, r2
 800328c:	b29b      	uxth	r3, r3
 800328e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80032a0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	e004      	b.n	80032b4 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80032b4:	1cbb      	adds	r3, r7, #2
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80032ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <SpiritRadioGetFrequencyOffset+0x84>)
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da03      	bge.n	80032d2 <SpiritRadioGetFrequencyOffset+0x76>
 80032ca:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80032ce:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80032d2:	149b      	asrs	r3, r3, #18
  
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200003b8 	.word	0x200003b8
 80032e0:	200002ec 	.word	0x200002ec

080032e4 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 80032e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e8:	b08a      	sub	sp, #40	; 0x28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a79      	ldr	r2, [pc, #484]	; (80034dc <SpiritRadioSetFrequencyBase+0x1f8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d907      	bls.n	800330c <SpiritRadioSetFrequencyBase+0x28>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a78      	ldr	r2, [pc, #480]	; (80034e0 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d803      	bhi.n	800330c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800330a:	e022      	b.n	8003352 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a75      	ldr	r2, [pc, #468]	; (80034e4 <SpiritRadioSetFrequencyBase+0x200>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d907      	bls.n	8003324 <SpiritRadioSetFrequencyBase+0x40>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a74      	ldr	r2, [pc, #464]	; (80034e8 <SpiritRadioSetFrequencyBase+0x204>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d803      	bhi.n	8003324 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003322:	e016      	b.n	8003352 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a71      	ldr	r2, [pc, #452]	; (80034ec <SpiritRadioSetFrequencyBase+0x208>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d907      	bls.n	800333c <SpiritRadioSetFrequencyBase+0x58>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a70      	ldr	r2, [pc, #448]	; (80034f0 <SpiritRadioSetFrequencyBase+0x20c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d803      	bhi.n	800333c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003334:	2302      	movs	r3, #2
 8003336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800333a:	e00a      	b.n	8003352 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a6d      	ldr	r2, [pc, #436]	; (80034f4 <SpiritRadioSetFrequencyBase+0x210>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d906      	bls.n	8003352 <SpiritRadioSetFrequencyBase+0x6e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a6c      	ldr	r2, [pc, #432]	; (80034f8 <SpiritRadioSetFrequencyBase+0x214>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d802      	bhi.n	8003352 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800334c:	2303      	movs	r3, #3
 800334e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003352:	f7ff ff83 	bl	800325c <SpiritRadioGetFrequencyOffset>
 8003356:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003358:	f7ff ff60 	bl	800321c <SpiritRadioGetChannelSpace>
 800335c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800335e:	f7ff ff45 	bl	80031ec <SpiritRadioGetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003366:	6a3a      	ldr	r2, [r7, #32]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	441a      	add	r2, r3
 800336c:	7efb      	ldrb	r3, [r7, #27]
 800336e:	69f9      	ldr	r1, [r7, #28]
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003378:	f000 fdc6 	bl	8003f08 <SpiritRadioGetRefDiv>
 800337c:	4603      	mov	r3, r0
 800337e:	3301      	adds	r3, #1
 8003380:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003386:	2b03      	cmp	r3, #3
 8003388:	d839      	bhi.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
 800338a:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <SpiritRadioSetFrequencyBase+0xac>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033e9 	.word	0x080033e9
 8003394:	080033d1 	.word	0x080033d1
 8003398:	080033b9 	.word	0x080033b9
 800339c:	080033a1 	.word	0x080033a1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	4a56      	ldr	r2, [pc, #344]	; (80034fc <SpiritRadioSetFrequencyBase+0x218>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d803      	bhi.n	80033b0 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fe fcfd 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80033ae:	e026      	b.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80033b0:	2001      	movs	r0, #1
 80033b2:	f7fe fcf9 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80033b6:	e022      	b.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4a51      	ldr	r2, [pc, #324]	; (8003500 <SpiritRadioSetFrequencyBase+0x21c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d803      	bhi.n	80033c8 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fe fcf1 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80033c6:	e01a      	b.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80033c8:	2001      	movs	r0, #1
 80033ca:	f7fe fced 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80033ce:	e016      	b.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <SpiritRadioSetFrequencyBase+0x220>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d803      	bhi.n	80033e0 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fe fce5 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80033de:	e00e      	b.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80033e0:	2001      	movs	r0, #1
 80033e2:	f7fe fce1 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80033e6:	e00a      	b.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	4a47      	ldr	r2, [pc, #284]	; (8003508 <SpiritRadioSetFrequencyBase+0x224>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d803      	bhi.n	80033f8 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7fe fcd9 	bl	8001da8 <SpiritCalibrationSelectVco>
 80033f6:	e002      	b.n	80033fe <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f7fe fcd5 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff fe0c 	bl	800301c <SpiritRadioSearchWCP>
 8003404:	4603      	mov	r3, r0
 8003406:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340c:	4a3f      	ldr	r2, [pc, #252]	; (800350c <SpiritRadioSetFrequencyBase+0x228>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	fb03 f302 	mul.w	r3, r3, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f81f 	bl	800045c <__aeabi_ui2d>
 800341e:	4604      	mov	r4, r0
 8003420:	460d      	mov	r5, r1
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	049b      	lsls	r3, r3, #18
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f828 	bl	800047c <__aeabi_i2d>
 800342c:	4680      	mov	r8, r0
 800342e:	4689      	mov	r9, r1
 8003430:	4b37      	ldr	r3, [pc, #220]	; (8003510 <SpiritRadioSetFrequencyBase+0x22c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f811 	bl	800045c <__aeabi_ui2d>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4640      	mov	r0, r8
 8003440:	4649      	mov	r1, r9
 8003442:	f7fd f9af 	bl	80007a4 <__aeabi_ddiv>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fd f87f 	bl	8000550 <__aeabi_dmul>
 8003452:	4603      	mov	r3, r0
 8003454:	460c      	mov	r4, r1
 8003456:	4618      	mov	r0, r3
 8003458:	4621      	mov	r1, r4
 800345a:	f7fd fb13 	bl	8000a84 <__aeabi_d2uiz>
 800345e:	4603      	mov	r3, r0
 8003460:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	0d5b      	lsrs	r3, r3, #21
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	b2da      	uxtb	r2, r3
 800346e:	7cbb      	ldrb	r3, [r7, #18]
 8003470:	015b      	lsls	r3, r3, #5
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4313      	orrs	r3, r2
 8003476:	b2db      	uxtb	r3, r3
 8003478:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0b5b      	lsrs	r3, r3, #13
 800347e:	b2db      	uxtb	r3, r3
 8003480:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	b2db      	uxtb	r3, r3
 8003488:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003496:	491f      	ldr	r1, [pc, #124]	; (8003514 <SpiritRadioSetFrequencyBase+0x230>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	4313      	orrs	r3, r2
 800349c:	b2db      	uxtb	r3, r3
 800349e:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	461a      	mov	r2, r3
 80034a6:	2104      	movs	r1, #4
 80034a8:	2008      	movs	r0, #8
 80034aa:	f001 fb63 	bl	8004b74 <RadioSpiWriteRegisters>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <SpiritRadioSetFrequencyBase+0x234>)
 80034b2:	b212      	sxth	r2, r2
 80034b4:	4611      	mov	r1, r2
 80034b6:	7019      	strb	r1, [r3, #0]
 80034b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034bc:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <SpiritRadioSetFrequencyBase+0x238>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d103      	bne.n	80034ce <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80034c6:	f7fe ff97 	bl	80023f8 <SpiritManagementWaVcoCalibration>
 80034ca:	4603      	mov	r3, r0
 80034cc:	e000      	b.n	80034d0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034da:	bf00      	nop
 80034dc:	2e5f567f 	.word	0x2e5f567f
 80034e0:	390c2fe0 	.word	0x390c2fe0
 80034e4:	1701e47f 	.word	0x1701e47f
 80034e8:	1c146a60 	.word	0x1c146a60
 80034ec:	11d260bf 	.word	0x11d260bf
 80034f0:	14ced7e0 	.word	0x14ced7e0
 80034f4:	08e18f3f 	.word	0x08e18f3f
 80034f8:	0a6fd060 	.word	0x0a6fd060
 80034fc:	099cf4e1 	.word	0x099cf4e1
 8003500:	1339e9c3 	.word	0x1339e9c3
 8003504:	19a28d05 	.word	0x19a28d05
 8003508:	33451a0a 	.word	0x33451a0a
 800350c:	0800739c 	.word	0x0800739c
 8003510:	200002ec 	.word	0x200002ec
 8003514:	080073a0 	.word	0x080073a0
 8003518:	200003b8 	.word	0x200003b8
 800351c:	20000151 	.word	0x20000151

08003520 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003528:	f7ff fe0c 	bl	8003144 <SpiritRadioGetSynthWord>
 800352c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800352e:	f7ff fe2f 	bl	8003190 <SpiritRadioGetBand>
 8003532:	4603      	mov	r3, r0
 8003534:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003536:	f000 fce7 	bl	8003f08 <SpiritRadioGetRefDiv>
 800353a:	4603      	mov	r3, r0
 800353c:	3301      	adds	r3, #1
 800353e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fc ff8b 	bl	800045c <__aeabi_ui2d>
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <SpiritRadioGetFrequencyBase+0x90>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fc ff84 	bl	800045c <__aeabi_ui2d>
 8003554:	4680      	mov	r8, r0
 8003556:	4689      	mov	r9, r1
 8003558:	78bb      	ldrb	r3, [r7, #2]
 800355a:	049b      	lsls	r3, r3, #18
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	4915      	ldr	r1, [pc, #84]	; (80035b4 <SpiritRadioGetFrequencyBase+0x94>)
 8003560:	5c8a      	ldrb	r2, [r1, r2]
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc ff88 	bl	800047c <__aeabi_i2d>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4640      	mov	r0, r8
 8003572:	4649      	mov	r1, r9
 8003574:	f7fd f916 	bl	80007a4 <__aeabi_ddiv>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4620      	mov	r0, r4
 800357e:	4629      	mov	r1, r5
 8003580:	f7fc ffe6 	bl	8000550 <__aeabi_dmul>
 8003584:	4603      	mov	r3, r0
 8003586:	460c      	mov	r4, r1
 8003588:	ec44 3b17 	vmov	d7, r3, r4
 800358c:	eeb0 0a47 	vmov.f32	s0, s14
 8003590:	eef0 0a67 	vmov.f32	s1, s15
 8003594:	f003 fe96 	bl	80072c4 <round>
 8003598:	ec54 3b10 	vmov	r3, r4, d0
 800359c:	4618      	mov	r0, r3
 800359e:	4621      	mov	r1, r4
 80035a0:	f7fd fa70 	bl	8000a84 <__aeabi_d2uiz>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035b0:	200002ec 	.word	0x200002ec
 80035b4:	0800739c 	.word	0x0800739c

080035b8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80035c8:	230f      	movs	r3, #15
 80035ca:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80035d0:	f000 fcec 	bl	8003fac <SpiritRadioGetDigDiv>
 80035d4:	4603      	mov	r3, r0
 80035d6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80035d8:	e015      	b.n	8003606 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80035da:	4b50      	ldr	r3, [pc, #320]	; (800371c <SpiritRadioSearchDatarateME+0x164>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035e2:	f1c3 0114 	rsb	r1, r3, #20
 80035e6:	7ebb      	ldrb	r3, [r7, #26]
 80035e8:	440b      	add	r3, r1
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	763b      	strb	r3, [r7, #24]
 80035f8:	e005      	b.n	8003606 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80035fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003606:	7e3b      	ldrb	r3, [r7, #24]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <SpiritRadioSearchDatarateME+0x5e>
 800360e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003612:	2b00      	cmp	r3, #0
 8003614:	dae1      	bge.n	80035da <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003616:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800361a:	2b00      	cmp	r3, #0
 800361c:	da01      	bge.n	8003622 <SpiritRadioSearchDatarateME+0x6a>
 800361e:	2300      	movs	r3, #0
 8003620:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003622:	7ffa      	ldrb	r2, [r7, #31]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003628:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800362c:	f1c3 0317 	rsb	r3, r3, #23
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	409a      	lsls	r2, r3
 8003634:	4b39      	ldr	r3, [pc, #228]	; (800371c <SpiritRadioSearchDatarateME+0x164>)
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	7ebb      	ldrb	r3, [r7, #26]
 800363a:	3305      	adds	r3, #5
 800363c:	fa21 f303 	lsr.w	r3, r1, r3
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003646:	2300      	movs	r3, #0
 8003648:	77bb      	strb	r3, [r7, #30]
 800364a:	e033      	b.n	80036b4 <SpiritRadioSearchDatarateME+0xfc>
  {
    if((cMantissaTmp+j-1))
 800364c:	7e7a      	ldrb	r2, [r7, #25]
 800364e:	7fbb      	ldrb	r3, [r7, #30]
 8003650:	4413      	add	r3, r2
 8003652:	2b01      	cmp	r3, #1
 8003654:	d022      	beq.n	800369c <SpiritRadioSearchDatarateME+0xe4>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	b29a      	uxth	r2, r3
 800365a:	7e7b      	ldrb	r3, [r7, #25]
 800365c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003660:	7fbb      	ldrb	r3, [r7, #30]
 8003662:	440b      	add	r3, r1
 8003664:	3b01      	subs	r3, #1
 8003666:	4618      	mov	r0, r3
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <SpiritRadioSearchDatarateME+0x164>)
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	7ebb      	ldrb	r3, [r7, #26]
 800366e:	3305      	adds	r3, #5
 8003670:	fa21 f303 	lsr.w	r3, r1, r3
 8003674:	fb03 f100 	mul.w	r1, r3, r0
 8003678:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800367c:	f1c3 0317 	rsb	r3, r3, #23
 8003680:	fa21 f303 	lsr.w	r3, r1, r3
 8003684:	b29b      	uxth	r3, r3
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	b29a      	uxth	r2, r3
 800368a:	7fbb      	ldrb	r3, [r7, #30]
 800368c:	b212      	sxth	r2, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	f107 0120 	add.w	r1, r7, #32
 8003694:	440b      	add	r3, r1
 8003696:	f823 2c10 	strh.w	r2, [r3, #-16]
 800369a:	e008      	b.n	80036ae <SpiritRadioSearchDatarateME+0xf6>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800369c:	7fbb      	ldrb	r3, [r7, #30]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	f107 0220 	add.w	r2, r7, #32
 80036a4:	4413      	add	r3, r2
 80036a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80036aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80036ae:	7fbb      	ldrb	r3, [r7, #30]
 80036b0:	3301      	adds	r3, #1
 80036b2:	77bb      	strb	r3, [r7, #30]
 80036b4:	7fbb      	ldrb	r3, [r7, #30]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d9c8      	bls.n	800364c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80036ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036be:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	76fb      	strb	r3, [r7, #27]
 80036c4:	e023      	b.n	800370e <SpiritRadioSearchDatarateME+0x156>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80036c6:	7efb      	ldrb	r3, [r7, #27]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	f107 0220 	add.w	r2, r7, #32
 80036ce:	4413      	add	r3, r2
 80036d0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80036d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80036d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80036dc:	8bbb      	ldrh	r3, [r7, #28]
 80036de:	429a      	cmp	r2, r3
 80036e0:	da12      	bge.n	8003708 <SpiritRadioSearchDatarateME+0x150>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80036e2:	7efb      	ldrb	r3, [r7, #27]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	f107 0220 	add.w	r2, r7, #32
 80036ea:	4413      	add	r3, r2
 80036ec:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bfb8      	it	lt
 80036f4:	425b      	neglt	r3, r3
 80036f6:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80036f8:	7e7a      	ldrb	r2, [r7, #25]
 80036fa:	7efb      	ldrb	r3, [r7, #27]
 80036fc:	4413      	add	r3, r2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003708:	7efb      	ldrb	r3, [r7, #27]
 800370a:	3301      	adds	r3, #1
 800370c:	76fb      	strb	r3, [r7, #27]
 800370e:	7efb      	ldrb	r3, [r7, #27]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d9d8      	bls.n	80036c6 <SpiritRadioSearchDatarateME+0x10e>
    }
  }
  
}
 8003714:	bf00      	nop
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	200002ec 	.word	0x200002ec

08003720 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003732:	f000 fc3b 	bl	8003fac <SpiritRadioGetDigDiv>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 800373c:	2302      	movs	r3, #2
 800373e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003742:	e002      	b.n	800374a <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800374a:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <SpiritRadioSearchChannelBwME+0x1c4>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	4a64      	ldr	r2, [pc, #400]	; (80038e8 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003766:	e006      	b.n	8003776 <SpiritRadioSearchChannelBwME+0x56>
 8003768:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800376c:	b2db      	uxtb	r3, r3
 800376e:	3301      	adds	r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800377a:	2b59      	cmp	r3, #89	; 0x59
 800377c:	dc0f      	bgt.n	800379e <SpiritRadioSearchChannelBwME+0x7e>
 800377e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003782:	4a5a      	ldr	r2, [pc, #360]	; (80038ec <SpiritRadioSearchChannelBwME+0x1cc>)
 8003784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003788:	461a      	mov	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fb03 f302 	mul.w	r3, r3, r2
 8003790:	4a57      	ldr	r2, [pc, #348]	; (80038f0 <SpiritRadioSearchChannelBwME+0x1d0>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0adb      	lsrs	r3, r3, #11
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	429a      	cmp	r2, r3
 800379c:	d3e4      	bcc.n	8003768 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800379e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d07d      	beq.n	80038a2 <SpiritRadioSearchChannelBwME+0x182>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80037a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037aa:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80037b2:	e03e      	b.n	8003832 <SpiritRadioSearchChannelBwME+0x112>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80037b4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80037b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037bc:	4413      	add	r3, r2
 80037be:	3b01      	subs	r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da07      	bge.n	80037d4 <SpiritRadioSearchChannelBwME+0xb4>
 80037c4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80037c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037cc:	4413      	add	r3, r2
 80037ce:	3b01      	subs	r3, #1
 80037d0:	2b59      	cmp	r3, #89	; 0x59
 80037d2:	dc1f      	bgt.n	8003814 <SpiritRadioSearchChannelBwME+0xf4>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	f997 101b 	ldrsb.w	r1, [r7, #27]
 80037dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037e0:	440b      	add	r3, r1
 80037e2:	3b01      	subs	r3, #1
 80037e4:	4941      	ldr	r1, [pc, #260]	; (80038ec <SpiritRadioSearchChannelBwME+0x1cc>)
 80037e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80037ea:	4619      	mov	r1, r3
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	fb03 f301 	mul.w	r3, r3, r1
 80037f2:	493f      	ldr	r1, [pc, #252]	; (80038f0 <SpiritRadioSearchChannelBwME+0x1d0>)
 80037f4:	fba1 1303 	umull	r1, r3, r1, r3
 80037f8:	0adb      	lsrs	r3, r3, #11
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	b29a      	uxth	r2, r3
 8003800:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003804:	b212      	sxth	r2, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800380c:	440b      	add	r3, r1
 800380e:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003812:	e009      	b.n	8003828 <SpiritRadioSearchChannelBwME+0x108>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003814:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800381e:	4413      	add	r3, r2
 8003820:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003824:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003828:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800382c:	3301      	adds	r3, #1
 800382e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003832:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003836:	2b02      	cmp	r3, #2
 8003838:	d9bc      	bls.n	80037b4 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 800383a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800383e:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003846:	e028      	b.n	800389a <SpiritRadioSearchChannelBwME+0x17a>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003848:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003852:	4413      	add	r3, r2
 8003854:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003858:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800385c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003862:	429a      	cmp	r2, r3
 8003864:	da14      	bge.n	8003890 <SpiritRadioSearchChannelBwME+0x170>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003866:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003870:	4413      	add	r3, r2
 8003872:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfb8      	it	lt
 800387a:	425b      	neglt	r3, r3
 800387c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800387e:	7efa      	ldrb	r2, [r7, #27]
 8003880:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003884:	4413      	add	r3, r2
 8003886:	b2db      	uxtb	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003890:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003894:	3301      	adds	r3, #1
 8003896:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800389a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d9d2      	bls.n	8003848 <SpiritRadioSearchChannelBwME+0x128>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80038a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <SpiritRadioSearchChannelBwME+0x1d4>)
 80038a8:	fb82 1203 	smull	r1, r2, r2, r3
 80038ac:	1052      	asrs	r2, r2, #1
 80038ae:	17db      	asrs	r3, r3, #31
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80038ba:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <SpiritRadioSearchChannelBwME+0x1d4>)
 80038c0:	fb83 1302 	smull	r1, r3, r3, r2
 80038c4:	1059      	asrs	r1, r3, #1
 80038c6:	17d3      	asrs	r3, r2, #31
 80038c8:	1ac9      	subs	r1, r1, r3
 80038ca:	460b      	mov	r3, r1
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	701a      	strb	r2, [r3, #0]
  
}
 80038da:	bf00      	nop
 80038dc:	3728      	adds	r7, #40	; 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200002ec 	.word	0x200002ec
 80038e8:	51eb851f 	.word	0x51eb851f
 80038ec:	080073a4 	.word	0x080073a4
 80038f0:	c9a633fd 	.word	0xc9a633fd
 80038f4:	38e38e39 	.word	0x38e38e39

080038f8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003908:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <SpiritRadioSearchFreqDevME+0x160>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003914:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003a5c <SpiritRadioSearchFreqDevME+0x164>
 8003918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800391c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003920:	2300      	movs	r3, #0
 8003922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003926:	e028      	b.n	800397a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800392c:	2201      	movs	r2, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fda2 	bl	800047c <__aeabi_i2d>
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <SpiritRadioSearchFreqDevME+0x168>)
 800393e:	f7fc fe07 	bl	8000550 <__aeabi_dmul>
 8003942:	4603      	mov	r3, r0
 8003944:	460c      	mov	r4, r1
 8003946:	4618      	mov	r0, r3
 8003948:	4621      	mov	r1, r4
 800394a:	f7fd f89b 	bl	8000a84 <__aeabi_d2uiz>
 800394e:	ee07 0a90 	vmov	s15, r0
 8003952:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003956:	edd7 7a06 	vldr	s15, [r7, #24]
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003962:	ee17 3a90 	vmov	r3, s15
 8003966:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	429a      	cmp	r2, r3
 800396e:	d309      	bcc.n	8003984 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003974:	3301      	adds	r3, #1
 8003976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800397a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800397e:	2b09      	cmp	r3, #9
 8003980:	d9d2      	bls.n	8003928 <SpiritRadioSearchFreqDevME+0x30>
 8003982:	e000      	b.n	8003986 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003984:	bf00      	nop
  }
  (*pcE) = i;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800398c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800398e:	2300      	movs	r3, #0
 8003990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003994:	e043      	b.n	8003a1e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800399a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fd6c 	bl	800047c <__aeabi_i2d>
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <SpiritRadioSearchFreqDevME+0x16c>)
 80039aa:	f7fc fc1b 	bl	80001e4 <__adddf3>
 80039ae:	4603      	mov	r3, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	4618      	mov	r0, r3
 80039b4:	4621      	mov	r1, r4
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039be:	f7fc fef1 	bl	80007a4 <__aeabi_ddiv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	4625      	mov	r5, r4
 80039c8:	461c      	mov	r4, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	2301      	movs	r3, #1
 80039d2:	4093      	lsls	r3, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc fd51 	bl	800047c <__aeabi_i2d>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	f7fc fdb5 	bl	8000550 <__aeabi_dmul>
 80039e6:	4603      	mov	r3, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	4618      	mov	r0, r3
 80039ec:	4621      	mov	r1, r4
 80039ee:	f7fd f849 	bl	8000a84 <__aeabi_d2uiz>
 80039f2:	ee07 0a90 	vmov	s15, r0
 80039f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a06:	ee17 3a90 	vmov	r3, s15
 8003a0a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d309      	bcc.n	8003a28 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	d9b7      	bls.n	8003996 <SpiritRadioSearchFreqDevME+0x9e>
 8003a26:	e000      	b.n	8003a2a <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003a28:	bf00      	nop
  }
  
  (*pcM)=i;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a30:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	1ad2      	subs	r2, r2, r3
 8003a38:	69f9      	ldr	r1, [r7, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1acb      	subs	r3, r1, r3
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d205      	bcs.n	8003a4e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	701a      	strb	r2, [r3, #0]
  
}
 8003a4e:	bf00      	nop
 8003a50:	3728      	adds	r7, #40	; 0x28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bdb0      	pop	{r4, r5, r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200002ec 	.word	0x200002ec
 8003a5c:	48800000 	.word	0x48800000
 8003a60:	401e0000 	.word	0x401e0000
 8003a64:	40200000 	.word	0x40200000

08003a68 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i;
  uint8_t j=0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a74      	ldr	r2, [pc, #464]	; (8003c4c <SpiritRadioGetdBm2Reg+0x1e4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d90c      	bls.n	8003a9a <SpiritRadioGetdBm2Reg+0x32>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a73      	ldr	r2, [pc, #460]	; (8003c50 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d808      	bhi.n	8003a9a <SpiritRadioGetdBm2Reg+0x32>
  {
    i=0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a71      	ldr	r2, [pc, #452]	; (8003c54 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d822      	bhi.n	8003ada <SpiritRadioGetdBm2Reg+0x72>
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
 8003a98:	e01f      	b.n	8003ada <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a6e      	ldr	r2, [pc, #440]	; (8003c58 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d906      	bls.n	8003ab0 <SpiritRadioGetdBm2Reg+0x48>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a6d      	ldr	r2, [pc, #436]	; (8003c5c <SpiritRadioGetdBm2Reg+0x1f4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d802      	bhi.n	8003ab0 <SpiritRadioGetdBm2Reg+0x48>
  {
    i=2;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	75fb      	strb	r3, [r7, #23]
 8003aae:	e014      	b.n	8003ada <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a6b      	ldr	r2, [pc, #428]	; (8003c60 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d906      	bls.n	8003ac6 <SpiritRadioGetdBm2Reg+0x5e>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a6a      	ldr	r2, [pc, #424]	; (8003c64 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d802      	bhi.n	8003ac6 <SpiritRadioGetdBm2Reg+0x5e>
  {
    i=3;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	75fb      	strb	r3, [r7, #23]
 8003ac4:	e009      	b.n	8003ada <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a67      	ldr	r2, [pc, #412]	; (8003c68 <SpiritRadioGetdBm2Reg+0x200>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d905      	bls.n	8003ada <SpiritRadioGetdBm2Reg+0x72>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <SpiritRadioGetdBm2Reg+0x204>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d801      	bhi.n	8003ada <SpiritRadioGetdBm2Reg+0x72>
  {
    i=4;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	dd2f      	ble.n	8003b4c <SpiritRadioGetdBm2Reg+0xe4>
 8003aec:	7dfa      	ldrb	r2, [r7, #23]
 8003aee:	4960      	ldr	r1, [pc, #384]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	440b      	add	r3, r1
 8003afa:	3308      	adds	r3, #8
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b08:	7dfa      	ldrb	r2, [r7, #23]
 8003b0a:	4959      	ldr	r1, [pc, #356]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	330c      	adds	r3, #12
 8003b18:	ed93 6a00 	vldr	s12, [r3]
 8003b1c:	7dfa      	ldrb	r2, [r7, #23]
 8003b1e:	4954      	ldr	r1, [pc, #336]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	edd3 6a00 	vldr	s13, [r3]
 8003b30:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b38:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b44:	dd02      	ble.n	8003b4c <SpiritRadioGetdBm2Reg+0xe4>
      j=0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75bb      	strb	r3, [r7, #22]
 8003b4a:	e035      	b.n	8003bb8 <SpiritRadioGetdBm2Reg+0x150>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b58:	d82e      	bhi.n	8003bb8 <SpiritRadioGetdBm2Reg+0x150>
 8003b5a:	7dfa      	ldrb	r2, [r7, #23]
 8003b5c:	4944      	ldr	r1, [pc, #272]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3308      	adds	r3, #8
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003c74 <SpiritRadioGetdBm2Reg+0x20c>
 8003b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b76:	7dfa      	ldrb	r2, [r7, #23]
 8003b78:	493d      	ldr	r1, [pc, #244]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	330c      	adds	r3, #12
 8003b86:	ed93 6a00 	vldr	s12, [r3]
 8003b8a:	7dfa      	ldrb	r2, [r7, #23]
 8003b8c:	4938      	ldr	r1, [pc, #224]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	3308      	adds	r3, #8
 8003b9a:	edd3 6a00 	vldr	s13, [r3]
 8003b9e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d501      	bpl.n	8003bb8 <SpiritRadioGetdBm2Reg+0x150>
      j=2;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003bb8:	7dfa      	ldrb	r2, [r7, #23]
 8003bba:	7dbb      	ldrb	r3, [r7, #22]
 8003bbc:	0059      	lsls	r1, r3, #1
 8003bbe:	482c      	ldr	r0, [pc, #176]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4403      	add	r3, r0
 8003bce:	ed93 7a00 	vldr	s14, [r3]
 8003bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bda:	7dfa      	ldrb	r2, [r7, #23]
 8003bdc:	7dbb      	ldrb	r3, [r7, #22]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	1c59      	adds	r1, r3, #1
 8003be2:	4823      	ldr	r0, [pc, #140]	; (8003c70 <SpiritRadioGetdBm2Reg+0x208>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	440b      	add	r3, r1
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4403      	add	r3, r0
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0e:	d503      	bpl.n	8003c18 <SpiritRadioGetdBm2Reg+0x1b0>
    fReg=1;
 8003c10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	e00a      	b.n	8003c2e <SpiritRadioGetdBm2Reg+0x1c6>
  else if(fReg>90) 
 8003c18:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c1c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003c78 <SpiritRadioGetdBm2Reg+0x210>
 8003c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	dd01      	ble.n	8003c2e <SpiritRadioGetdBm2Reg+0x1c6>
    fReg=90;
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <SpiritRadioGetdBm2Reg+0x214>)
 8003c2c:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003c2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c3a:	793b      	ldrb	r3, [r7, #4]
 8003c3c:	b2db      	uxtb	r3, r3
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2e5f567f 	.word	0x2e5f567f
 8003c50:	390c2fe0 	.word	0x390c2fe0
 8003c54:	35a4e8ff 	.word	0x35a4e8ff
 8003c58:	1701e47f 	.word	0x1701e47f
 8003c5c:	1c146a60 	.word	0x1c146a60
 8003c60:	11d260bf 	.word	0x11d260bf
 8003c64:	14ced7e0 	.word	0x14ced7e0
 8003c68:	08e18f3f 	.word	0x08e18f3f
 8003c6c:	0a6fd060 	.word	0x0a6fd060
 8003c70:	08007478 	.word	0x08007478
 8003c74:	42200000 	.word	0x42200000
 8003c78:	42b40000 	.word	0x42b40000
 8003c7c:	42b40000 	.word	0x42b40000

08003c80 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	ed87 0a00 	vstr	s0, [r7]
 8003c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003c8e:	f7ff fc47 	bl	8003520 <SpiritRadioGetFrequencyBase>
 8003c92:	4603      	mov	r3, r0
 8003c94:	ed97 0a00 	vldr	s0, [r7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fee5 	bl	8003a68 <SpiritRadioGetdBm2Reg>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f1c3 0317 	rsb	r3, r3, #23
 8003ca8:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003caa:	f107 020e 	add.w	r2, r7, #14
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 ff5e 	bl	8004b74 <RadioSpiWriteRegisters>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <SpiritRadioSetPALeveldBm+0x50>)
 8003cbc:	b212      	sxth	r2, r2
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	7019      	strb	r1, [r3, #0]
 8003cc2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cc6:	705a      	strb	r2, [r3, #1]
  
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	200003b8 	.word	0x200003b8

08003cd4 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003cde:	f107 030f 	add.w	r3, r7, #15
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2018      	movs	r0, #24
 8003ce8:	f000 fff0 	bl	8004ccc <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003d00:	f107 030f 	add.w	r3, r7, #15
 8003d04:	461a      	mov	r2, r3
 8003d06:	2101      	movs	r1, #1
 8003d08:	2018      	movs	r0, #24
 8003d0a:	f000 ff33 	bl	8004b74 <RadioSpiWriteRegisters>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <SpiritRadioSetPACwc+0x54>)
 8003d12:	b212      	sxth	r2, r2
 8003d14:	4611      	mov	r1, r2
 8003d16:	7019      	strb	r1, [r3, #0]
 8003d18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d1c:	705a      	strb	r2, [r3, #1]
  
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200003b8 	.word	0x200003b8

08003d2c <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003d36:	f107 030f 	add.w	r3, r7, #15
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	2018      	movs	r0, #24
 8003d40:	f000 ffc4 	bl	8004ccc <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	f023 0307 	bic.w	r3, r3, #7
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003d58:	f107 030f 	add.w	r3, r7, #15
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2101      	movs	r1, #1
 8003d60:	2018      	movs	r0, #24
 8003d62:	f000 ff07 	bl	8004b74 <RadioSpiWriteRegisters>
 8003d66:	4602      	mov	r2, r0
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003d6a:	b212      	sxth	r2, r2
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	7019      	strb	r1, [r3, #0]
 8003d70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d74:	705a      	strb	r2, [r3, #1]
  
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200003b8 	.word	0x200003b8

08003d84 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003d92:	f107 030f 	add.w	r3, r7, #15
 8003d96:	461a      	mov	r2, r3
 8003d98:	2101      	movs	r1, #1
 8003d9a:	201e      	movs	r0, #30
 8003d9c:	f000 ff96 	bl	8004ccc <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e004      	b.n	8003dbc <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003dbc:	f107 030f 	add.w	r3, r7, #15
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	201e      	movs	r0, #30
 8003dc6:	f000 fed5 	bl	8004b74 <RadioSpiWriteRegisters>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003dce:	b212      	sxth	r2, r2
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	7019      	strb	r1, [r3, #0]
 8003dd4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003dd8:	705a      	strb	r2, [r3, #1]
  
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200003b8 	.word	0x200003b8

08003de8 <SpiritRadioCsBlanking>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the ANT_SELECT_CONF_BASE and mask the CS_BLANKING BIT field */
  SpiritSpiReadRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8003df2:	f107 030f 	add.w	r3, r7, #15
 8003df6:	461a      	mov	r2, r3
 8003df8:	2101      	movs	r1, #1
 8003dfa:	2027      	movs	r0, #39	; 0x27
 8003dfc:	f000 ff66 	bl	8004ccc <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <SpiritRadioCsBlanking+0x2a>
  {
    tempRegValue |= ANT_SELECT_CS_BLANKING_MASK;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	f043 0310 	orr.w	r3, r3, #16
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	e004      	b.n	8003e1c <SpiritRadioCsBlanking+0x34>
  }
  else
  {
    tempRegValue &= (~ANT_SELECT_CS_BLANKING_MASK);
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	f023 0310 	bic.w	r3, r3, #16
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the ANT_SELECT_CONF register */
  g_xStatus = SpiritSpiWriteRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8003e1c:	f107 030f 	add.w	r3, r7, #15
 8003e20:	461a      	mov	r2, r3
 8003e22:	2101      	movs	r1, #1
 8003e24:	2027      	movs	r0, #39	; 0x27
 8003e26:	f000 fea5 	bl	8004b74 <RadioSpiWriteRegisters>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <SpiritRadioCsBlanking+0x5c>)
 8003e2e:	b212      	sxth	r2, r2
 8003e30:	4611      	mov	r1, r2
 8003e32:	7019      	strb	r1, [r3, #0]
 8003e34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e38:	705a      	strb	r2, [r3, #1]
  
  
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	200003b8 	.word	0x200003b8

08003e48 <SpiritRadioPersistenRx>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the PROTOCOL0_BASE and mask the PROTOCOL0_PERS_RX_MASK bitfield */
  SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8003e52:	f107 030f 	add.w	r3, r7, #15
 8003e56:	461a      	mov	r2, r3
 8003e58:	2101      	movs	r1, #1
 8003e5a:	2052      	movs	r0, #82	; 0x52
 8003e5c:	f000 ff36 	bl	8004ccc <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <SpiritRadioPersistenRx+0x2a>
  {
    tempRegValue |= PROTOCOL0_PERS_RX_MASK;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e004      	b.n	8003e7c <SpiritRadioPersistenRx+0x34>
  }
  else
  {
    tempRegValue &= (~PROTOCOL0_PERS_RX_MASK);
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	f023 0302 	bic.w	r3, r3, #2
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the PROTOCOL0_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8003e7c:	f107 030f 	add.w	r3, r7, #15
 8003e80:	461a      	mov	r2, r3
 8003e82:	2101      	movs	r1, #1
 8003e84:	2052      	movs	r0, #82	; 0x52
 8003e86:	f000 fe75 	bl	8004b74 <RadioSpiWriteRegisters>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <SpiritRadioPersistenRx+0x5c>)
 8003e8e:	b212      	sxth	r2, r2
 8003e90:	4611      	mov	r1, r2
 8003e92:	7019      	strb	r1, [r3, #0]
 8003e94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e98:	705a      	strb	r2, [r3, #1]
  
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200003b8 	.word	0x200003b8

08003ea8 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003eb2:	f107 030f 	add.w	r3, r7, #15
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2101      	movs	r1, #1
 8003eba:	209e      	movs	r0, #158	; 0x9e
 8003ebc:	f000 ff06 	bl	8004ccc <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e004      	b.n	8003edc <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003edc:	f107 030f 	add.w	r3, r7, #15
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	209e      	movs	r0, #158	; 0x9e
 8003ee6:	f000 fe45 	bl	8004b74 <RadioSpiWriteRegisters>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <SpiritRadioSetRefDiv+0x5c>)
 8003eee:	b212      	sxth	r2, r2
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	7019      	strb	r1, [r3, #0]
 8003ef4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ef8:	705a      	strb	r2, [r3, #1]
  
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200003b8 	.word	0x200003b8

08003f08 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	461a      	mov	r2, r3
 8003f12:	2101      	movs	r1, #1
 8003f14:	209e      	movs	r0, #158	; 0x9e
 8003f16:	f000 fed9 	bl	8004ccc <RadioSpiReadRegisters>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <SpiritRadioGetRefDiv+0x40>)
 8003f1e:	b212      	sxth	r2, r2
 8003f20:	4611      	mov	r1, r2
 8003f22:	7019      	strb	r1, [r3, #0]
 8003f24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f28:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	09db      	lsrs	r3, r3, #7
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003f3c:	2300      	movs	r3, #0
  }
  
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200003b8 	.word	0x200003b8

08003f4c <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003f56:	f107 030f 	add.w	r3, r7, #15
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	20b4      	movs	r0, #180	; 0xb4
 8003f60:	f000 feb4 	bl	8004ccc <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	f023 0308 	bic.w	r3, r3, #8
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e004      	b.n	8003f80 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	f043 0308 	orr.w	r3, r3, #8
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003f80:	f107 030f 	add.w	r3, r7, #15
 8003f84:	461a      	mov	r2, r3
 8003f86:	2101      	movs	r1, #1
 8003f88:	20b4      	movs	r0, #180	; 0xb4
 8003f8a:	f000 fdf3 	bl	8004b74 <RadioSpiWriteRegisters>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <SpiritRadioSetDigDiv+0x5c>)
 8003f92:	b212      	sxth	r2, r2
 8003f94:	4611      	mov	r1, r2
 8003f96:	7019      	strb	r1, [r3, #0]
 8003f98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f9c:	705a      	strb	r2, [r3, #1]
  
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200003b8 	.word	0x200003b8

08003fac <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	20b4      	movs	r0, #180	; 0xb4
 8003fba:	f000 fe87 	bl	8004ccc <RadioSpiReadRegisters>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <SpiritRadioGetDigDiv+0x40>)
 8003fc2:	b212      	sxth	r2, r2
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	7019      	strb	r1, [r3, #0]
 8003fc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fcc:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003fe0:	2301      	movs	r3, #1
  }
  
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200003b8 	.word	0x200003b8

08003ff0 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <SpiritRadioGetXtalFrequency+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	200002ec 	.word	0x200002ec

08004008 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <SpiritRadioSetXtalFrequency+0x1c>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	200002ec 	.word	0x200002ec

08004028 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8004032:	f107 020c 	add.w	r2, r7, #12
 8004036:	f107 030c 	add.w	r3, r7, #12
 800403a:	3301      	adds	r3, #1
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	ed97 0a01 	vldr	s0, [r7, #4]
 8004044:	f000 f830 	bl	80040a8 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	461a      	mov	r2, r3
 800404e:	2102      	movs	r1, #2
 8004050:	2053      	movs	r0, #83	; 0x53
 8004052:	f000 fd8f 	bl	8004b74 <RadioSpiWriteRegisters>
 8004056:	4602      	mov	r2, r0
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <SpiritTimerSetRxTimeoutMs+0x48>)
 800405a:	b212      	sxth	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	7019      	strb	r1, [r3, #0]
 8004060:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004064:	705a      	strb	r2, [r3, #1]

}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200003b8 	.word	0x200003b8

08004074 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 800407e:	1dfb      	adds	r3, r7, #7
 8004080:	461a      	mov	r2, r3
 8004082:	2101      	movs	r1, #1
 8004084:	2054      	movs	r0, #84	; 0x54
 8004086:	f000 fd75 	bl	8004b74 <RadioSpiWriteRegisters>
 800408a:	4602      	mov	r2, r0
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <SpiritTimerSetRxTimeoutCounter+0x30>)
 800408e:	b212      	sxth	r2, r2
 8004090:	4611      	mov	r1, r2
 8004092:	7019      	strb	r1, [r3, #0]
 8004094:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004098:	705a      	strb	r2, [r3, #1]

}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200003b8 	.word	0x200003b8

080040a8 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80040b2:	60b8      	str	r0, [r7, #8]
 80040b4:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 80040b6:	f7ff ff9b 	bl	8003ff0 <SpiritRadioGetXtalFrequency>
 80040ba:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4a91      	ldr	r2, [pc, #580]	; (8004304 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d902      	bls.n	80040ca <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040dc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004308 <SpiritTimerComputeRxTimeoutValues+0x260>
 80040e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e8:	ee17 3a90 	vmov	r3, s15
 80040ec:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f64f 5201 	movw	r2, #64769	; 0xfd01
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d906      	bls.n	8004106 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	22ff      	movs	r2, #255	; 0xff
 80040fc:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	701a      	strb	r2, [r3, #0]
    return;
 8004104:	e0fa      	b.n	80042fc <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4a80      	ldr	r2, [pc, #512]	; (800430c <SpiritTimerComputeRxTimeoutValues+0x264>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	09db      	lsrs	r3, r3, #7
 8004110:	b2db      	uxtb	r3, r3
 8004112:	3302      	adds	r3, #2
 8004114:	b2da      	uxtb	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	fbb3 f3f2 	udiv	r3, r3, r2
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004148:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004308 <SpiritTimerComputeRxTimeoutValues+0x260>
 800414c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	dd1d      	ble.n	80041ac <SpiritTimerComputeRxTimeoutValues+0x104>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004308 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004190:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041aa:	e01e      	b.n	80041ea <SpiritTimerComputeRxTimeoutValues+0x142>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	ee07 3a90 	vmov	s15, r3
 80041b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004308 <SpiritTimerComputeRxTimeoutValues+0x260>
 80041cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041de:	edd7 7a03 	vldr	s15, [r7, #12]
 80041e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e6:	eef1 7a67 	vneg.f32	s15, s15
 80041ea:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2bff      	cmp	r3, #255	; 0xff
 80041f4:	d06e      	beq.n	80042d4 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004214:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004308 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004218:	ee67 6a87 	vmul.f32	s13, s15, s14
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	edd7 7a03 	vldr	s15, [r7, #12]
 800422e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	dd1e      	ble.n	800427a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004308 <SpiritTimerComputeRxTimeoutValues+0x260>
 800425e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004270:	edd7 7a03 	vldr	s15, [r7, #12]
 8004274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004278:	e01f      	b.n	80042ba <SpiritTimerComputeRxTimeoutValues+0x212>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004298:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004308 <SpiritTimerComputeRxTimeoutValues+0x260>
 800429c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80042b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042b6:	eef1 7a67 	vneg.f32	s15, s15
 80042ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80042be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d505      	bpl.n	80042d4 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	3b01      	subs	r3, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d906      	bls.n	80042f6 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e002      	b.n	80042fc <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
}
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	01c9c380 	.word	0x01c9c380
 8004308:	4993b480 	.word	0x4993b480
 800430c:	80808081 	.word	0x80808081

08004310 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800431a:	f107 030c 	add.w	r3, r7, #12
 800431e:	461a      	mov	r2, r3
 8004320:	2102      	movs	r1, #2
 8004322:	204f      	movs	r0, #79	; 0x4f
 8004324:	f000 fcd2 	bl	8004ccc <RadioSpiReadRegisters>
 8004328:	4602      	mov	r2, r0
 800432a:	4b1c      	ldr	r3, [pc, #112]	; (800439c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 800432c:	b212      	sxth	r2, r2
 800432e:	4611      	mov	r1, r2
 8004330:	7019      	strb	r1, [r3, #0]
 8004332:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004336:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004338:	7b3b      	ldrb	r3, [r7, #12]
 800433a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433e:	b2db      	uxtb	r3, r3
 8004340:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004342:	7b3b      	ldrb	r3, [r7, #12]
 8004344:	b25a      	sxtb	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	b25b      	sxtb	r3, r3
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	b25b      	sxtb	r3, r3
 8004352:	4313      	orrs	r3, r2
 8004354:	b25b      	sxtb	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800435a:	7b7b      	ldrb	r3, [r7, #13]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	b2db      	uxtb	r3, r3
 8004362:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004364:	7b7b      	ldrb	r3, [r7, #13]
 8004366:	b25a      	sxtb	r2, r3
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	015b      	lsls	r3, r3, #5
 800436c:	b25b      	sxtb	r3, r3
 800436e:	4313      	orrs	r3, r2
 8004370:	b25b      	sxtb	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004376:	f107 030c 	add.w	r3, r7, #12
 800437a:	461a      	mov	r2, r3
 800437c:	2102      	movs	r1, #2
 800437e:	204f      	movs	r0, #79	; 0x4f
 8004380:	f000 fbf8 	bl	8004b74 <RadioSpiWriteRegisters>
 8004384:	4602      	mov	r2, r0
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004388:	b212      	sxth	r2, r2
 800438a:	4611      	mov	r1, r2
 800438c:	7019      	strb	r1, [r3, #0]
 800438e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004392:	705a      	strb	r2, [r3, #1]

}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	200003b8 	.word	0x200003b8

080043a0 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	461a      	mov	r2, r3
 80043aa:	2102      	movs	r1, #2
 80043ac:	20c0      	movs	r0, #192	; 0xc0
 80043ae:	f000 fc8d 	bl	8004ccc <RadioSpiReadRegisters>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <SpiritRefreshStatus+0x44>)
 80043b6:	b212      	sxth	r2, r2
 80043b8:	4611      	mov	r1, r2
 80043ba:	7019      	strb	r1, [r3, #0]
 80043bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80043c0:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <SpiritRefreshStatus+0x44>)
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d1ec      	bne.n	80043a6 <SpiritRefreshStatus+0x6>
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <SpiritRefreshStatus+0x48>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d1e5      	bne.n	80043a6 <SpiritRefreshStatus+0x6>

}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200003b8 	.word	0x200003b8
 80043e8:	200003b9 	.word	0x200003b9

080043ec <Spirit1InterfaceInit>:
* @brief  Read the status register.
* @param  None
* @retval Status
*/
void Spirit1InterfaceInit(void)
{ 
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Initialize the SDN pin micro side */
  RadioGpioInit(RADIO_GPIO_SDN,RADIO_MODE_GPIO_OUT);
 80043f0:	2102      	movs	r1, #2
 80043f2:	2004      	movs	r0, #4
 80043f4:	f000 fa36 	bl	8004864 <RadioGpioInit>

  SpiritSpiInit();
 80043f8:	f000 fb52 	bl	8004aa0 <RadioSpiInit>
     
  /* Board management */   
//  SpiritEnterShutdown();
//  SpiritExitShutdown();
//
  SpiritManagementIdentificationRFBoard();
 80043fc:	f000 f814 	bl	8004428 <SpiritManagementIdentificationRFBoard>
    
  /* Initialize the signals to drive the range extender application board */
  SpiritManagementRangeExtInit(); 
 8004400:	f000 f836 	bl	8004470 <SpiritManagementRangeExtInit>
  
  /* Micro EXTI config */      
  RadioGpioInit(RADIO_GPIO_3,RADIO_MODE_EXTI_IN);
 8004404:	2101      	movs	r1, #1
 8004406:	2003      	movs	r0, #3
 8004408:	f000 fa2c 	bl	8004864 <RadioGpioInit>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,DISABLE); 
 800440c:	2300      	movs	r3, #0
 800440e:	2204      	movs	r2, #4
 8004410:	2104      	movs	r1, #4
 8004412:	2003      	movs	r0, #3
 8004414:	f000 faaa 	bl	800496c <RadioGpioInterruptCmd>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,ENABLE);
 8004418:	2301      	movs	r3, #1
 800441a:	2204      	movs	r2, #4
 800441c:	2104      	movs	r1, #4
 800441e:	2003      	movs	r0, #3
 8004420:	f000 faa4 	bl	800496c <RadioGpioInterruptCmd>
}
 8004424:	bf00      	nop
 8004426:	bd80      	pop	{r7, pc}

08004428 <SpiritManagementIdentificationRFBoard>:
* @brief  Identifies the SPIRIT1 Xtal frequency and version.
* @param  None
* @retval Status
*/
void SpiritManagementIdentificationRFBoard(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 800442e:	2300      	movs	r3, #0
 8004430:	71fb      	strb	r3, [r7, #7]
 8004432:	e004      	b.n	800443e <SpiritManagementIdentificationRFBoard+0x16>
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3301      	adds	r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	71fb      	strb	r3, [r7, #7]
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2bff      	cmp	r3, #255	; 0xff
 8004444:	d1f6      	bne.n	8004434 <SpiritManagementIdentificationRFBoard+0xc>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8004446:	f7ff ffab 	bl	80043a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <SpiritManagementIdentificationRFBoard+0x40>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b03      	cmp	r3, #3
 8004456:	d1ea      	bne.n	800442e <SpiritManagementIdentificationRFBoard+0x6>

    SpiritRadioSetXtalFrequency(XTAL_FREQUENCY);        
 8004458:	4804      	ldr	r0, [pc, #16]	; (800446c <SpiritManagementIdentificationRFBoard+0x44>)
 800445a:	f7ff fdd5 	bl	8004008 <SpiritRadioSetXtalFrequency>
    //SpiritGeneralSetSpiritVersion(SPIRIT_VERSION); 
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	200003b8 	.word	0x200003b8
 800446c:	02faf080 	.word	0x02faf080

08004470 <SpiritManagementRangeExtInit>:
/**
* @defgroup RANGE_EXT_MANAGEMENT_FUNCTIONS              SDK SPIRIT Management Range Extender Functions
* @{
*/
void SpiritManagementRangeExtInit(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
  RangeExtType range_type = SpiritManagementGetRangeExtender();
 8004476:	f000 f877 	bl	8004568 <SpiritManagementGetRangeExtender>
 800447a:	4603      	mov	r3, r0
 800447c:	77fb      	strb	r3, [r7, #31]
  
  if(range_type==RANGE_EXT_SKYWORKS_169) {
 800447e:	7ffb      	ldrb	r3, [r7, #31]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d135      	bne.n	80044f0 <SpiritManagementRangeExtInit+0x80>
    /* TCXO optimization power consumption */
    SpiritGeneralSetExtRef(MODE_EXT_XIN);
 8004484:	2001      	movs	r0, #1
 8004486:	f7fd fd6d 	bl	8001f64 <SpiritGeneralSetExtRef>
    uint8_t tmp = 0x01; SpiritSpiWriteRegisters(0xB6,1,&tmp);
 800448a:	2301      	movs	r3, #1
 800448c:	71fb      	strb	r3, [r7, #7]
 800448e:	1dfb      	adds	r3, r7, #7
 8004490:	461a      	mov	r2, r3
 8004492:	2101      	movs	r1, #1
 8004494:	20b6      	movs	r0, #182	; 0xb6
 8004496:	f000 fb6d 	bl	8004b74 <RadioSpiWriteRegisters>
    
    /* CSD control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 800449a:	4a2e      	ldr	r2, [pc, #184]	; (8004554 <SpiritManagementRangeExtInit+0xe4>)
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	4611      	mov	r1, r2
 80044a4:	8019      	strh	r1, [r3, #0]
 80044a6:	3302      	adds	r3, #2
 80044a8:	0c12      	lsrs	r2, r2, #16
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd fd87 	bl	8001fc4 <SpiritGpioInit>
    
    /* CTX/BYP control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <SpiritManagementRangeExtInit+0xe8>)
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	4611      	mov	r1, r2
 80044c0:	8019      	strh	r1, [r3, #0]
 80044c2:	3302      	adds	r3, #2
 80044c4:	0c12      	lsrs	r2, r2, #16
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fd fd79 	bl	8001fc4 <SpiritGpioInit>
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 80044d2:	4a22      	ldr	r2, [pc, #136]	; (800455c <SpiritManagementRangeExtInit+0xec>)
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	4611      	mov	r1, r2
 80044dc:	8019      	strh	r1, [r3, #0]
 80044de:	3302      	adds	r3, #2
 80044e0:	0c12      	lsrs	r2, r2, #16
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	f107 0310 	add.w	r3, r7, #16
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fd6b 	bl	8001fc4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
  }
}
 80044ee:	e02c      	b.n	800454a <SpiritManagementRangeExtInit+0xda>
  else if(range_type==RANGE_EXT_SKYWORKS_868) {   
 80044f0:	7ffb      	ldrb	r3, [r7, #31]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d129      	bne.n	800454a <SpiritManagementRangeExtInit+0xda>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 80044f6:	4a17      	ldr	r2, [pc, #92]	; (8004554 <SpiritManagementRangeExtInit+0xe4>)
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	4611      	mov	r1, r2
 8004500:	8019      	strh	r1, [r3, #0]
 8004502:	3302      	adds	r3, #2
 8004504:	0c12      	lsrs	r2, r2, #16
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fd59 	bl	8001fc4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 8004512:	4a13      	ldr	r2, [pc, #76]	; (8004560 <SpiritManagementRangeExtInit+0xf0>)
 8004514:	f107 0318 	add.w	r3, r7, #24
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	4611      	mov	r1, r2
 800451c:	8019      	strh	r1, [r3, #0]
 800451e:	3302      	adds	r3, #2
 8004520:	0c12      	lsrs	r2, r2, #16
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	f107 0318 	add.w	r3, r7, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd fd4b 	bl	8001fc4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 800452e:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <SpiritManagementRangeExtInit+0xf4>)
 8004530:	f107 031c 	add.w	r3, r7, #28
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	4611      	mov	r1, r2
 8004538:	8019      	strh	r1, [r3, #0]
 800453a:	3302      	adds	r3, #2
 800453c:	0c12      	lsrs	r2, r2, #16
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	f107 031c 	add.w	r3, r7, #28
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fd3d 	bl	8001fc4 <SpiritGpioInit>
}
 800454a:	bf00      	nop
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	08007370 	.word	0x08007370
 8004558:	08007374 	.word	0x08007374
 800455c:	08007378 	.word	0x08007378
 8004560:	0800737c 	.word	0x0800737c
 8004564:	08007380 	.word	0x08007380

08004568 <SpiritManagementGetRangeExtender>:
* @brief  returns the spirit1 range extender type
* @param  None
* @retval RangeExtType
*/
RangeExtType SpiritManagementGetRangeExtender(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return xRangeExtType;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <SpiritManagementGetRangeExtender+0x14>)
 800456e:	781b      	ldrb	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	200002f0 	.word	0x200002f0

08004580 <Spirit1GpioIrqInit>:
* @brief  this function intializes the spirit1 gpio irq for TX and Rx
* @param  None
* @retval None
*/
void Spirit1GpioIrqInit(SGpioInit *pGpioIRQ)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Spirit IRQ config */
  SpiritGpioInit(pGpioIRQ);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fd fd1b 	bl	8001fc4 <SpiritGpioInit>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <Spirit1RadioInit>:
* @brief  this function used to receive RX packet
* @param  None
* @retval None
*/
void Spirit1RadioInit(SRadioInit *pRadioInit)
{    
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Spirit Radio config */
  SpiritRadioInit(pRadioInit);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fe fb02 	bl	8002ba8 <SpiritRadioInit>

}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <Spirit1SetPower>:
* @brief  this function sets the radio power
* @param  uint8_t cIndex, float fPowerdBm
* @retval None
*/
void Spirit1SetPower(uint8_t cIndex, float fPowerdBm)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	ed87 0a00 	vstr	s0, [r7]
 80045b8:	71fb      	strb	r3, [r7, #7]
  /* Spirit Radio set power */
  SpiritRadioSetPALeveldBm(cIndex,fPowerdBm);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	ed97 0a00 	vldr	s0, [r7]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fb5d 	bl	8003c80 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(cIndex);
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fbaf 	bl	8003d2c <SpiritRadioSetPALevelMaxIndex>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <Spirit1PacketConfig>:
* @brief  this function sets the packet configuration according to the protocol used
* @param  None
* @retval None
*/
void Spirit1PacketConfig(void)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	af00      	add	r7, sp, #0
  
  STackProtocolInit();
   
#elif defined(USE_BASIC_PROTOCOL)
  
  BasicProtocolInit();
 80045da:	f7fd f8fd 	bl	80017d8 <BasicProtocolInit>
  
#endif
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <Spirit1SetPayloadlength>:
* @brief  this function sets the payload length
* @param  uint8_t length
* @retval None
*/
void Spirit1SetPayloadlength(uint8_t length)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	71fb      	strb	r3, [r7, #7]
    /* Payload length config */
  SpiritPktStackSetPayloadLength(length);
  
#elif defined(USE_BASIC_PROTOCOL)
  /* payload length config */
  SpiritPktBasicSetPayloadLength(length);
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe f98f 	bl	8002914 <SpiritPktBasicSetPayloadLength>
#endif
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <Spirit1SetDestinationAddress>:
* @brief  this function sets the destination address
* @param  uint8_t adress
* @retval None
*/
void Spirit1SetDestinationAddress(uint8_t address)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
#if defined(USE_STack_PROTOCOL)
  /* Destination address */
  SpiritPktStackSetDestinationAddress(address);
#elif defined(USE_BASIC_PROTOCOL)
  /* destination address */
  SpiritPktBasicSetDestinationAddress(address);
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fa0e 	bl	8002a2c <SpiritPktCommonSetDestinationAddress>
#endif
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <Spirit1EnableTxIrq>:
* @brief  this function enables the Tx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableTxIrq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrq(TX_DATA_SENT, S_ENABLE); 
 800461c:	2101      	movs	r1, #1
 800461e:	2004      	movs	r0, #4
 8004620:	f7fd fd1a 	bl	8002058 <SpiritIrq>
#if defined(USE_STack_LLP)
  SpiritIrq(MAX_RE_TX_REACH, S_ENABLE);
#endif  
}
 8004624:	bf00      	nop
 8004626:	bd80      	pop	{r7, pc}

08004628 <Spirit1EnableRxIrq>:
* @brief  this function enables the Rx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableRxIrq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
    /* Spirit IRQs enable */
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 800462c:	2101      	movs	r1, #1
 800462e:	2001      	movs	r0, #1
 8004630:	f7fd fd12 	bl	8002058 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE); 
 8004634:	2101      	movs	r1, #1
 8004636:	2002      	movs	r0, #2
 8004638:	f7fd fd0e 	bl	8002058 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800463c:	2101      	movs	r1, #1
 800463e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004642:	f7fd fd09 	bl	8002058 <SpiritIrq>
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}

0800464a <Spirit1DisableIrq>:
* @brief  this function disable IRQs
* @param  None
* @retval None
*/
void Spirit1DisableIrq(void)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrqDeInit(NULL);
 800464e:	2000      	movs	r0, #0
 8004650:	f7fd fcdc 	bl	800200c <SpiritIrqDeInit>
}
 8004654:	bf00      	nop
 8004656:	bd80      	pop	{r7, pc}

08004658 <Spirit1SetRxTimeout>:
* @brief  this function set the receive timeout period
* @param  None
* @retval None
*/
void Spirit1SetRxTimeout(float cRxTimeOut)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	ed87 0a01 	vstr	s0, [r7, #4]
  if(cRxTimeOut == 0)
 8004662:	edd7 7a01 	vldr	s15, [r7, #4]
 8004666:	eef5 7a40 	vcmp.f32	s15, #0.0
 800466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466e:	d106      	bne.n	800467e <Spirit1SetRxTimeout+0x26>
  {
    /* rx timeout config */
    SET_INFINITE_RX_TIMEOUT();
 8004670:	2000      	movs	r0, #0
 8004672:	f7ff fcff 	bl	8004074 <SpiritTimerSetRxTimeoutCounter>
    SpiritTimerSetRxTimeoutStopCondition(ANY_ABOVE_THRESHOLD);
 8004676:	200f      	movs	r0, #15
 8004678:	f7ff fe4a 	bl	8004310 <SpiritTimerSetRxTimeoutStopCondition>
    /* RX timeout config */
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
    Spirit1EnableSQI();
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
  }
}
 800467c:	e008      	b.n	8004690 <Spirit1SetRxTimeout+0x38>
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
 800467e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004682:	f7ff fcd1 	bl	8004028 <SpiritTimerSetRxTimeoutMs>
    Spirit1EnableSQI();
 8004686:	f000 f812 	bl	80046ae <Spirit1EnableSQI>
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
 800468a:	2006      	movs	r0, #6
 800468c:	f7ff fe40 	bl	8004310 <SpiritTimerSetRxTimeoutStopCondition>
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <Spirit1SetRssiTH>:
* @brief  this function sets the RSSI threshold
* @param  int dbmValue
* @retval None
*/
void Spirit1SetRssiTH(int dbmValue)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  SpiritQiSetRssiThresholddBm(dbmValue);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fe fa61 	bl	8002b68 <SpiritQiSetRssiThresholddBm>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <Spirit1EnableSQI>:
* @brief  this function enables SQI check
* @param  None
* @retval None
*/
void Spirit1EnableSQI(void)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	af00      	add	r7, sp, #0
  /* enable SQI check */
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fe fa24 	bl	8002b00 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80046b8:	2001      	movs	r0, #1
 80046ba:	f7fe f9e9 	bl	8002a90 <SpiritQiSqiCheck>
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <Spirit1StartRx>:
* @brief  this function starts the RX process
* @param  None
* @retval None
*/
void Spirit1StartRx(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <Spirit1StartRx+0x28>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b33      	cmp	r3, #51	; 0x33
 80046d4:	d102      	bne.n	80046dc <Spirit1StartRx+0x18>
  {
    SpiritCmdStrobeSabort();
 80046d6:	2067      	movs	r0, #103	; 0x67
 80046d8:	f7fd fb90 	bl	8001dfc <SpiritCmdStrobeCommand>
  }
  /* RX command */
  SpiritCmdStrobeRx();
 80046dc:	f7fd ff84 	bl	80025e8 <SpiritManagementWaCmdStrobeRx>
 80046e0:	2061      	movs	r0, #97	; 0x61
 80046e2:	f7fd fb8b 	bl	8001dfc <SpiritCmdStrobeCommand>
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	200003b8 	.word	0x200003b8

080046f0 <Spirit1GetRxPacket>:
* @brief  this function receives the data
* @param  None
* @retval None
*/
void Spirit1GetRxPacket(uint8_t *buffer, uint8_t *cRxData )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint8_t noofbytes = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  /* when rx data ready read the number of received bytes */
  *cRxData=SpiritLinearFifoReadNumElementsRxFifo();
 80046fe:	f7fd fd5d 	bl	80021bc <SpiritLinearFifoReadNumElementsRxFifo>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	701a      	strb	r2, [r3, #0]
  noofbytes = *cRxData;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	73fb      	strb	r3, [r7, #15]
    /* read the RX FIFO */
  SpiritSpiReadLinearFifo(noofbytes, buffer);
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fccd 	bl	80050b4 <RadioSpiReadFifo>
  
  SpiritCmdStrobeFlushRxFifo();
 800471a:	2071      	movs	r0, #113	; 0x71
 800471c:	f7fd fb6e 	bl	8001dfc <SpiritCmdStrobeCommand>
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <Spirit1StartTx>:
* @brief  this function starts the TX process
* @param  None
* @retval None
*/
void Spirit1StartTx(uint8_t *buffer, uint8_t size )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8004734:	4b15      	ldr	r3, [pc, #84]	; (800478c <Spirit1StartTx+0x64>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b33      	cmp	r3, #51	; 0x33
 8004740:	d102      	bne.n	8004748 <Spirit1StartTx+0x20>
  {
    SpiritCmdStrobeSabort();
 8004742:	2067      	movs	r0, #103	; 0x67
 8004744:	f7fd fb5a 	bl	8001dfc <SpiritCmdStrobeCommand>
  }
  
#ifdef CSMA_ENABLE
  
    /* Enable CSMA */
    SpiritRadioPersistenRx(S_DISABLE);
 8004748:	2000      	movs	r0, #0
 800474a:	f7ff fb7d 	bl	8003e48 <SpiritRadioPersistenRx>
    SpiritRadioCsBlanking(S_DISABLE);
 800474e:	2000      	movs	r0, #0
 8004750:	f7ff fb4a 	bl	8003de8 <SpiritRadioCsBlanking>

    SpiritCsmaInit(&xCsmaInit);
 8004754:	480e      	ldr	r0, [pc, #56]	; (8004790 <Spirit1StartTx+0x68>)
 8004756:	f7fd fb69 	bl	8001e2c <SpiritCsmaInit>
    SpiritCsma(S_ENABLE);
 800475a:	2001      	movs	r0, #1
 800475c:	f7fd fbca 	bl	8001ef4 <SpiritCsma>
    SpiritQiSetRssiThresholddBm(CSMA_RSSI_THRESHOLD);
 8004760:	f06f 0069 	mvn.w	r0, #105	; 0x69
 8004764:	f7fe fa00 	bl	8002b68 <SpiritQiSetRssiThresholddBm>
    
#endif 
  
  /* fit the TX FIFO */
  SpiritCmdStrobeFlushTxFifo();
 8004768:	2072      	movs	r0, #114	; 0x72
 800476a:	f7fd fb47 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  SpiritSpiWriteLinearFifo(size, buffer);
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fbf4 	bl	8004f60 <RadioSpiWriteFifo>
  
  /* send the TX command */
  SpiritCmdStrobeTx();
 8004778:	f7fd fefe 	bl	8002578 <SpiritManagementWaCmdStrobeTx>
 800477c:	2060      	movs	r0, #96	; 0x60
 800477e:	f7fd fb3d 	bl	8001dfc <SpiritCmdStrobeCommand>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	200003b8 	.word	0x200003b8
 8004790:	2000007c 	.word	0x2000007c

08004794 <Spirit1ClearIRQ>:
* @brief  this function clear the IRQ status
* @param  None
* @retval None
*/
void Spirit1ClearIRQ(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  SpiritIrqClearStatus();
 8004798:	f7fd fcf8 	bl	800218c <SpiritIrqClearStatus>
}
 800479c:	bf00      	nop
 800479e:	bd80      	pop	{r7, pc}

080047a0 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <BSP_LED_Init+0x2c>
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	4b15      	ldr	r3, [pc, #84]	; (800480c <BSP_LED_Init+0x6c>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	4a14      	ldr	r2, [pc, #80]	; (800480c <BSP_LED_Init+0x6c>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6313      	str	r3, [r2, #48]	; 0x30
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <BSP_LED_Init+0x6c>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 80047cc:	2320      	movs	r3, #32
 80047ce:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047d0:	2301      	movs	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d8:	2303      	movs	r3, #3
 80047da:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <BSP_LED_Init+0x70>)
 80047e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e4:	f107 020c 	add.w	r2, r7, #12
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fee6 	bl	80055bc <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4a07      	ldr	r2, [pc, #28]	; (8004810 <BSP_LED_Init+0x70>)
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	2120      	movs	r1, #32
 80047fa:	2200      	movs	r2, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 f941 	bl	8005a84 <HAL_GPIO_WritePin>
}
 8004802:	bf00      	nop
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	20000154 	.word	0x20000154

08004814 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	4a05      	ldr	r2, [pc, #20]	; (8004838 <BSP_LED_Off+0x24>)
 8004822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004826:	2120      	movs	r1, #32
 8004828:	2200      	movs	r2, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f001 f92a 	bl	8005a84 <HAL_GPIO_WritePin>
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000154 	.word	0x20000154

0800483c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	4a05      	ldr	r2, [pc, #20]	; (8004860 <BSP_LED_Toggle+0x24>)
 800484a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484e:	2220      	movs	r2, #32
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f92f 	bl	8005ab6 <HAL_GPIO_TogglePin>
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000154 	.word	0x20000154

08004864 <RadioGpioInit>:
*         @arg RADIO_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
*         generation capability.
* @retval None.
*/
void RadioGpioInit(RadioGpioPin xGpio, RadioGpioMode xGpioMode)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	460a      	mov	r2, r1
 800486e:	71fb      	strb	r3, [r7, #7]
 8004870:	4613      	mov	r3, r2
 8004872:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RADIO_GPIO_PIN(xGpio));
  assert_param(IS_RADIO_GPIO_MODE(xGpioMode));
  
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	4b36      	ldr	r3, [pc, #216]	; (8004954 <RadioGpioInit+0xf0>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	4a35      	ldr	r2, [pc, #212]	; (8004954 <RadioGpioInit+0xf0>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6313      	str	r3, [r2, #48]	; 0x30
 8004884:	4b33      	ldr	r3, [pc, #204]	; (8004954 <RadioGpioInit+0xf0>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	693b      	ldr	r3, [r7, #16]
  __GPIOC_CLK_ENABLE();
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <RadioGpioInit+0xf0>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <RadioGpioInit+0xf0>)
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	6313      	str	r3, [r2, #48]	; 0x30
 80048a0:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <RadioGpioInit+0xf0>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 80048ac:	2300      	movs	r3, #0
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <RadioGpioInit+0xf0>)
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <RadioGpioInit+0xf0>)
 80048b6:	f043 0302 	orr.w	r3, r3, #2
 80048ba:	6313      	str	r3, [r2, #48]	; 0x30
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <RadioGpioInit+0xf0>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
  
  /* Configures MCU GPIO */
  if (xGpioMode == RADIO_MODE_GPIO_OUT)
 80048c8:	79bb      	ldrb	r3, [r7, #6]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d102      	bne.n	80048d4 <RadioGpioInit+0x70>
  {
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e001      	b.n	80048d8 <RadioGpioInit+0x74>
  }
  else
  {
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
  }
  
  GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <RadioGpioInit+0xf4>)
 80048dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <RadioGpioInit+0xf8>)
 80048e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <RadioGpioInit+0xfc>)
 80048f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <RadioGpioInit+0x100>)
 80048fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fe:	f107 0214 	add.w	r2, r7, #20
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fe59 	bl	80055bc <HAL_GPIO_Init>
  
  if (xGpioMode == RADIO_MODE_EXTI_IN)
 800490a:	79bb      	ldrb	r3, [r7, #6]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d11d      	bne.n	800494c <RadioGpioInit+0xe8>
  {
    GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	4a11      	ldr	r2, [pc, #68]	; (8004958 <RadioGpioInit+0xf4>)
 8004914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	4a0f      	ldr	r2, [pc, #60]	; (800495c <RadioGpioInit+0xf8>)
 800491e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <RadioGpioInit+0xfc>)
 8004928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = aRADIO_GPIO_EXTI_MODE[xGpio];
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <RadioGpioInit+0x104>)
 8004932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004936:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <RadioGpioInit+0x100>)
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	f107 0214 	add.w	r2, r7, #20
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fe38 	bl	80055bc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    /*  NVIC_SetPriority((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]), 0x02); */
    /*  HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));     */
  } 
}
 800494c:	bf00      	nop
 800494e:	3728      	adds	r7, #40	; 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	080074f0 	.word	0x080074f0
 800495c:	08007510 	.word	0x08007510
 8004960:	080074fc 	.word	0x080074fc
 8004964:	20000158 	.word	0x20000158
 8004968:	08007524 	.word	0x08007524

0800496c <RadioGpioInterruptCmd>:
*         @arg ENABLE: Interrupt is enabled
*         @arg DISABLE: Interrupt is disabled
* @retval None.
*/
void RadioGpioInterruptCmd(RadioGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, FunctionalState xNewState)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	4604      	mov	r4, r0
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	461a      	mov	r2, r3
 800497a:	4623      	mov	r3, r4
 800497c:	71fb      	strb	r3, [r7, #7]
 800497e:	4603      	mov	r3, r0
 8004980:	71bb      	strb	r3, [r7, #6]
 8004982:	460b      	mov	r3, r1
 8004984:	717b      	strb	r3, [r7, #5]
 8004986:	4613      	mov	r3, r2
 8004988:	713b      	strb	r3, [r7, #4]
  HAL_NVIC_SetPriority((IRQn_Type) (aRADIO_GPIO_IRQn[xGpio]), nPreemption, nSubpriority);
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <RadioGpioInterruptCmd+0x5c>)
 800498e:	5cd3      	ldrb	r3, [r2, r3]
 8004990:	b25b      	sxtb	r3, r3
 8004992:	79b9      	ldrb	r1, [r7, #6]
 8004994:	797a      	ldrb	r2, [r7, #5]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fdcb 	bl	8005532 <HAL_NVIC_SetPriority>
  if (!xNewState)
 800499c:	793b      	ldrb	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <RadioGpioInterruptCmd+0x46>
  {
    HAL_NVIC_DisableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio])); 
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <RadioGpioInterruptCmd+0x5c>)
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fdeb 	bl	8005586 <HAL_NVIC_DisableIRQ>
  }
  else
  {
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
  }
}
 80049b0:	e006      	b.n	80049c0 <RadioGpioInterruptCmd+0x54>
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <RadioGpioInterruptCmd+0x5c>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	b25b      	sxtb	r3, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fdd5 	bl	800556a <HAL_NVIC_EnableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd90      	pop	{r4, r7, pc}
 80049c8:	08007534 	.word	0x08007534

080049cc <RadioShieldLedInit>:
*   This parameter can be one of the following values:
* @arg    Led_t Led
* @retval None
*/
void RadioShieldLedInit(Led_t Led)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  RADIO_SHIELD_LED_GPIO_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <RadioShieldLedInit+0x54>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <RadioShieldLedInit+0x54>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6313      	str	r3, [r2, #48]	; 0x30
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <RadioShieldLedInit+0x54>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = aLED_GPIO_PIN[Led];
 80049f2:	2310      	movs	r3, #16
 80049f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049f6:	2301      	movs	r3, #1
 80049f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049fa:	2301      	movs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80049fe:	2303      	movs	r3, #3
 8004a00:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(aLED_GPIO_PORT[Led], &GPIO_InitStruct);
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <RadioShieldLedInit+0x58>)
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0a:	f107 020c 	add.w	r2, r7, #12
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fdd3 	bl	80055bc <HAL_GPIO_Init>
}
 8004a16:	bf00      	nop
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	2000016c 	.word	0x2000016c

08004a28 <RadioShieldLedOn>:
*   This parameter can be one of following parameters:
* @arg  Led_t Led
* @retval None
*/
void RadioShieldLedOn(Led_t Led)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_SET); 
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <RadioShieldLedOn+0x24>)
 8004a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3a:	2110      	movs	r1, #16
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 f820 	bl	8005a84 <HAL_GPIO_WritePin>
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000016c 	.word	0x2000016c

08004a50 <RadioShieldLedOff>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedOff(Led_t Led)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <RadioShieldLedOff+0x24>)
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a62:	2110      	movs	r1, #16
 8004a64:	2200      	movs	r2, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 f80c 	bl	8005a84 <HAL_GPIO_WritePin>
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	2000016c 	.word	0x2000016c

08004a78 <RadioShieldLedToggle>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedToggle(Led_t Led)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led]);
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <RadioShieldLedToggle+0x24>)
 8004a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8a:	2210      	movs	r2, #16
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 f811 	bl	8005ab6 <HAL_GPIO_TogglePin>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	2000016c 	.word	0x2000016c

08004aa0 <RadioSpiInit>:
* @brief  Initializes SPI HAL.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&pSpiHandle) == HAL_SPI_STATE_RESET)
 8004aa4:	4818      	ldr	r0, [pc, #96]	; (8004b08 <RadioSpiInit+0x68>)
 8004aa6:	f001 ffa3 	bl	80069f0 <HAL_SPI_GetState>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d128      	bne.n	8004b02 <RadioSpiInit+0x62>
  {
    /* SPI Config */
    pSpiHandle.Instance               = RADIO_SPI;
 8004ab0:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <RadioSpiInit+0x68>)
 8004ab2:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <RadioSpiInit+0x6c>)
 8004ab4:	601a      	str	r2, [r3, #0]
    pSpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <RadioSpiInit+0x68>)
 8004ab8:	2208      	movs	r2, #8
 8004aba:	61da      	str	r2, [r3, #28]
    pSpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <RadioSpiInit+0x68>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
    pSpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <RadioSpiInit+0x68>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	615a      	str	r2, [r3, #20]
    pSpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <RadioSpiInit+0x68>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]
    pSpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <RadioSpiInit+0x68>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
    pSpiHandle.Init.CRCPolynomial     = 7;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <RadioSpiInit+0x68>)
 8004ad6:	2207      	movs	r2, #7
 8004ad8:	62da      	str	r2, [r3, #44]	; 0x2c
    pSpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <RadioSpiInit+0x68>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]
    pSpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <RadioSpiInit+0x68>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	621a      	str	r2, [r3, #32]
    pSpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <RadioSpiInit+0x68>)
 8004ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aec:	619a      	str	r2, [r3, #24]
    pSpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <RadioSpiInit+0x68>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
    pSpiHandle.Init.Mode              = SPI_MODE_MASTER;
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <RadioSpiInit+0x68>)
 8004af6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004afa:	605a      	str	r2, [r3, #4]

    //HAL_SPI_MspInit(&pSpiHandle);
    HAL_SPI_Init(&pSpiHandle);
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <RadioSpiInit+0x68>)
 8004afe:	f001 fc15 	bl	800632c <HAL_SPI_Init>
  }
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	200003bc 	.word	0x200003bc
 8004b0c:	40013000 	.word	0x40013000

08004b10 <SPI_Write>:
* @brief  SPI Write a byte to device
* @param  Value: value to be written
* @retval None
*/
static void SPI_Write(uint8_t Value)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004b1e:	bf00      	nop
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <SPI_Write+0x44>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d1f8      	bne.n	8004b20 <SPI_Write+0x10>
  status = HAL_SPI_Transmit(&pSpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <SPI_Write+0x48>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	1df9      	adds	r1, r7, #7
 8004b34:	2201      	movs	r2, #1
 8004b36:	4807      	ldr	r0, [pc, #28]	; (8004b54 <SPI_Write+0x44>)
 8004b38:	f001 fc84 	bl	8006444 <HAL_SPI_Transmit>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if (status != HAL_OK)
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <SPI_Write+0x3a>
  {
    /* Execute user timeout callback */
    SPI_Error();
 8004b46:	f000 f809 	bl	8004b5c <SPI_Error>
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	200003bc 	.word	0x200003bc
 8004b58:	20000170 	.word	0x20000170

08004b5c <SPI_Error>:
* @brief  SPI error treatment function
* @param  None
* @retval None
*/
static void SPI_Error(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&pSpiHandle);
 8004b60:	4803      	ldr	r0, [pc, #12]	; (8004b70 <SPI_Error+0x14>)
 8004b62:	f001 fc47 	bl	80063f4 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  RadioSpiInit();
 8004b66:	f7ff ff9b 	bl	8004aa0 <RadioSpiInit>
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200003bc 	.word	0x200003bc

08004b74 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	603a      	str	r2, [r7, #0]
 8004b7e:	71fb      	strb	r3, [r7, #7]
 8004b80:	460b      	mov	r3, r1
 8004b82:	71bb      	strb	r3, [r7, #6]
  uint8_t aHeader[2] = {0};
 8004b84:	2300      	movs	r3, #0
 8004b86:	823b      	strh	r3, [r7, #16]
  uint16_t tmpstatus = 0x0000;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	81fb      	strh	r3, [r7, #14]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus=(StatusBytes *)&tmpstatus;
 8004b8c:	f107 030e 	add.w	r3, r7, #14
 8004b90:	61bb      	str	r3, [r7, #24]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8004b92:	2300      	movs	r3, #0
 8004b94:	743b      	strb	r3, [r7, #16]
  aHeader[1] = cRegAddress;
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	2003      	movs	r0, #3
 8004ba2:	f7ff fee3 	bl	800496c <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004ba6:	f7fc fe21 	bl	80017ec <bandSelect>
 8004baa:	4603      	mov	r3, r0
 8004bac:	81bb      	strh	r3, [r7, #12]
  if(selectedBand.conf_868 == SET)
 8004bae:	7b3b      	ldrb	r3, [r7, #12]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10a      	bne.n	8004bca <RadioSpiWriteRegisters+0x56>
  {
	  RadioSpiHCSLow();
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2140      	movs	r1, #64	; 0x40
 8004bb8:	4841      	ldr	r0, [pc, #260]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004bba:	f000 ff63 	bl	8005a84 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2120      	movs	r1, #32
 8004bc2:	483f      	ldr	r0, [pc, #252]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004bc4:	f000 ff5e 	bl	8005a84 <HAL_GPIO_WritePin>
 8004bc8:	e017      	b.n	8004bfa <RadioSpiWriteRegisters+0x86>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004bca:	7b7b      	ldrb	r3, [r7, #13]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10a      	bne.n	8004be6 <RadioSpiWriteRegisters+0x72>
	  {
		  RadioSpiHCSHigh();
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	2140      	movs	r1, #64	; 0x40
 8004bd4:	483a      	ldr	r0, [pc, #232]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004bd6:	f000 ff55 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2120      	movs	r1, #32
 8004bde:	4838      	ldr	r0, [pc, #224]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004be0:	f000 ff50 	bl	8005a84 <HAL_GPIO_WritePin>
 8004be4:	e009      	b.n	8004bfa <RadioSpiWriteRegisters+0x86>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004be6:	2200      	movs	r2, #0
 8004be8:	2140      	movs	r1, #64	; 0x40
 8004bea:	4835      	ldr	r0, [pc, #212]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004bec:	f000 ff4a 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	2120      	movs	r1, #32
 8004bf4:	4832      	ldr	r0, [pc, #200]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004bf6:	f000 ff45 	bl	8005a84 <HAL_GPIO_WritePin>
	  }
  }
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	e004      	b.n	8004c0a <RadioSpiWriteRegisters+0x96>
 8004c00:	897b      	ldrh	r3, [r7, #10]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	817b      	strh	r3, [r7, #10]
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c12:	d3f5      	bcc.n	8004c00 <RadioSpiWriteRegisters+0x8c>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <RadioSpiWriteRegisters+0x150>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f107 020e 	add.w	r2, r7, #14
 8004c1c:	f107 0110 	add.w	r1, r7, #16
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	2301      	movs	r3, #1
 8004c24:	4828      	ldr	r0, [pc, #160]	; (8004cc8 <RadioSpiWriteRegisters+0x154>)
 8004c26:	f001 fd41 	bl	80066ac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	81fb      	strh	r3, [r7, #14]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <RadioSpiWriteRegisters+0x150>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f107 000e 	add.w	r0, r7, #14
 8004c3a:	f107 0210 	add.w	r2, r7, #16
 8004c3e:	1c51      	adds	r1, r2, #1
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2301      	movs	r3, #1
 8004c44:	4602      	mov	r2, r0
 8004c46:	4820      	ldr	r0, [pc, #128]	; (8004cc8 <RadioSpiWriteRegisters+0x154>)
 8004c48:	f001 fd30 	bl	80066ac <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	e009      	b.n	8004c66 <RadioSpiWriteRegisters+0xf2>
  {
    SPI_Write(pcBuffer[index]);
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff ff58 	bl	8004b10 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	79bb      	ldrb	r3, [r7, #6]
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	dbf1      	blt.n	8004c52 <RadioSpiWriteRegisters+0xde>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004c6e:	bf00      	nop
 8004c70:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <RadioSpiWriteRegisters+0x154>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d1f8      	bne.n	8004c70 <RadioSpiWriteRegisters+0xfc>
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004c7e:	2201      	movs	r2, #1
 8004c80:	2140      	movs	r1, #64	; 0x40
 8004c82:	480f      	ldr	r0, [pc, #60]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004c84:	f000 fefe 	bl	8005a84 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004c88:	2201      	movs	r2, #1
 8004c8a:	2120      	movs	r1, #32
 8004c8c:	480c      	ldr	r0, [pc, #48]	; (8004cc0 <RadioSpiWriteRegisters+0x14c>)
 8004c8e:	f000 fef9 	bl	8005a84 <HAL_GPIO_WritePin>

  
  SPI_EXIT_CRITICAL();
 8004c92:	2301      	movs	r3, #1
 8004c94:	2204      	movs	r2, #4
 8004c96:	2104      	movs	r1, #4
 8004c98:	2003      	movs	r0, #3
 8004c9a:	f7ff fe67 	bl	800496c <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	7d3a      	ldrb	r2, [r7, #20]
 8004cac:	f362 0307 	bfi	r3, r2, #0, #8
 8004cb0:	7d7a      	ldrb	r2, [r7, #21]
 8004cb2:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40020400 	.word	0x40020400
 8004cc4:	20000170 	.word	0x20000170
 8004cc8:	200003bc 	.word	0x200003bc

08004ccc <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval StatusBytes
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	603a      	str	r2, [r7, #0]
 8004cd6:	71fb      	strb	r3, [r7, #7]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	71bb      	strb	r3, [r7, #6]
  uint16_t tmpstatus = 0x00;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004ce0:	f107 0312 	add.w	r3, r7, #18
 8004ce4:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	81bb      	strh	r3, [r7, #12]
  uint8_t dummy = 0xFF;
 8004cea:	23ff      	movs	r3, #255	; 0xff
 8004cec:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0] = READ_HEADER;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	733b      	strb	r3, [r7, #12]
  aHeader[1] = cRegAddress;
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	2104      	movs	r1, #4
 8004cfc:	2003      	movs	r0, #3
 8004cfe:	f7ff fe35 	bl	800496c <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004d02:	f7fc fd73 	bl	80017ec <bandSelect>
 8004d06:	4603      	mov	r3, r0
 8004d08:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004d0a:	7c3b      	ldrb	r3, [r7, #16]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10a      	bne.n	8004d26 <RadioSpiReadRegisters+0x5a>
  {
	  RadioSpiHCSLow();
 8004d10:	2200      	movs	r2, #0
 8004d12:	2140      	movs	r1, #64	; 0x40
 8004d14:	4843      	ldr	r0, [pc, #268]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004d16:	f000 feb5 	bl	8005a84 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	2120      	movs	r1, #32
 8004d1e:	4841      	ldr	r0, [pc, #260]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004d20:	f000 feb0 	bl	8005a84 <HAL_GPIO_WritePin>
 8004d24:	e017      	b.n	8004d56 <RadioSpiReadRegisters+0x8a>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004d26:	7c7b      	ldrb	r3, [r7, #17]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d10a      	bne.n	8004d42 <RadioSpiReadRegisters+0x76>
	  {
		  RadioSpiHCSHigh();
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	2140      	movs	r1, #64	; 0x40
 8004d30:	483c      	ldr	r0, [pc, #240]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004d32:	f000 fea7 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004d36:	2200      	movs	r2, #0
 8004d38:	2120      	movs	r1, #32
 8004d3a:	483a      	ldr	r0, [pc, #232]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004d3c:	f000 fea2 	bl	8005a84 <HAL_GPIO_WritePin>
 8004d40:	e009      	b.n	8004d56 <RadioSpiReadRegisters+0x8a>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004d42:	2200      	movs	r2, #0
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	4837      	ldr	r0, [pc, #220]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004d48:	f000 fe9c 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2120      	movs	r1, #32
 8004d50:	4834      	ldr	r0, [pc, #208]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004d52:	f000 fe97 	bl	8005a84 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004d56:	2300      	movs	r3, #0
 8004d58:	813b      	strh	r3, [r7, #8]
 8004d5a:	e004      	b.n	8004d66 <RadioSpiReadRegisters+0x9a>
 8004d5c:	893b      	ldrh	r3, [r7, #8]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	813b      	strh	r3, [r7, #8]
 8004d66:	893b      	ldrh	r3, [r7, #8]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6e:	d3f5      	bcc.n	8004d5c <RadioSpiReadRegisters+0x90>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8004d70:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <RadioSpiReadRegisters+0x15c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f107 0212 	add.w	r2, r7, #18
 8004d78:	f107 010c 	add.w	r1, r7, #12
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2301      	movs	r3, #1
 8004d80:	482a      	ldr	r0, [pc, #168]	; (8004e2c <RadioSpiReadRegisters+0x160>)
 8004d82:	f001 fc93 	bl	80066ac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8004d86:	8a7b      	ldrh	r3, [r7, #18]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004d8e:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <RadioSpiReadRegisters+0x15c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f107 0012 	add.w	r0, r7, #18
 8004d96:	f107 020c 	add.w	r2, r7, #12
 8004d9a:	1c51      	adds	r1, r2, #1
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4602      	mov	r2, r0
 8004da2:	4822      	ldr	r0, [pc, #136]	; (8004e2c <RadioSpiReadRegisters+0x160>)
 8004da4:	f001 fc82 	bl	80066ac <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e00e      	b.n	8004dcc <RadioSpiReadRegisters+0x100>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&(pcBuffer)[index], 1, SpiTimeout);
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	441a      	add	r2, r3
 8004db4:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <RadioSpiReadRegisters+0x15c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f107 010b 	add.w	r1, r7, #11
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	481a      	ldr	r0, [pc, #104]	; (8004e2c <RadioSpiReadRegisters+0x160>)
 8004dc2:	f001 fc73 	bl	80066ac <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	79bb      	ldrb	r3, [r7, #6]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	dbec      	blt.n	8004dae <RadioSpiReadRegisters+0xe2>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004dd4:	bf00      	nop
 8004dd6:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <RadioSpiReadRegisters+0x160>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d1f8      	bne.n	8004dd6 <RadioSpiReadRegisters+0x10a>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004de4:	2201      	movs	r2, #1
 8004de6:	2140      	movs	r1, #64	; 0x40
 8004de8:	480e      	ldr	r0, [pc, #56]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004dea:	f000 fe4b 	bl	8005a84 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004dee:	2201      	movs	r2, #1
 8004df0:	2120      	movs	r1, #32
 8004df2:	480c      	ldr	r0, [pc, #48]	; (8004e24 <RadioSpiReadRegisters+0x158>)
 8004df4:	f000 fe46 	bl	8005a84 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8004df8:	2301      	movs	r3, #1
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	2003      	movs	r0, #3
 8004e00:	f7ff fdb4 	bl	800496c <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	8812      	ldrh	r2, [r2, #0]
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	7d3a      	ldrb	r2, [r7, #20]
 8004e12:	f362 0307 	bfi	r3, r2, #0, #8
 8004e16:	7d7a      	ldrb	r2, [r7, #21]
 8004e18:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40020400 	.word	0x40020400
 8004e28:	20000170 	.word	0x20000170
 8004e2c:	200003bc 	.word	0x200003bc

08004e30 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval StatusBytes
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
  uint8_t aHeader[2] = {0};
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpstatus = 0x0000;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004e42:	f107 0312 	add.w	r3, r7, #18
 8004e46:	61fb      	str	r3, [r7, #28]
  
  /* Built the aHeader bytes */
  aHeader[0] = COMMAND_HEADER;
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	753b      	strb	r3, [r7, #20]
  aHeader[1] = cCommandCode;
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	757b      	strb	r3, [r7, #21]
  
  SPI_ENTER_CRITICAL();
 8004e50:	2300      	movs	r3, #0
 8004e52:	2204      	movs	r2, #4
 8004e54:	2104      	movs	r1, #4
 8004e56:	2003      	movs	r0, #3
 8004e58:	f7ff fd88 	bl	800496c <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004e5c:	f7fc fcc6 	bl	80017ec <bandSelect>
 8004e60:	4603      	mov	r3, r0
 8004e62:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004e64:	7c3b      	ldrb	r3, [r7, #16]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10a      	bne.n	8004e80 <RadioSpiCommandStrobes+0x50>
  {
	  RadioSpiHCSLow();
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2140      	movs	r1, #64	; 0x40
 8004e6e:	4839      	ldr	r0, [pc, #228]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004e70:	f000 fe08 	bl	8005a84 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004e74:	2201      	movs	r2, #1
 8004e76:	2120      	movs	r1, #32
 8004e78:	4836      	ldr	r0, [pc, #216]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004e7a:	f000 fe03 	bl	8005a84 <HAL_GPIO_WritePin>
 8004e7e:	e017      	b.n	8004eb0 <RadioSpiCommandStrobes+0x80>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004e80:	7c7b      	ldrb	r3, [r7, #17]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10a      	bne.n	8004e9c <RadioSpiCommandStrobes+0x6c>
	  {
		  RadioSpiHCSHigh();
 8004e86:	2201      	movs	r2, #1
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	4832      	ldr	r0, [pc, #200]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004e8c:	f000 fdfa 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004e90:	2200      	movs	r2, #0
 8004e92:	2120      	movs	r1, #32
 8004e94:	482f      	ldr	r0, [pc, #188]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004e96:	f000 fdf5 	bl	8005a84 <HAL_GPIO_WritePin>
 8004e9a:	e009      	b.n	8004eb0 <RadioSpiCommandStrobes+0x80>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2140      	movs	r1, #64	; 0x40
 8004ea0:	482c      	ldr	r0, [pc, #176]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004ea2:	f000 fdef 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	482a      	ldr	r0, [pc, #168]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004eac:	f000 fdea 	bl	8005a84 <HAL_GPIO_WritePin>
	  }
  }

  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	81fb      	strh	r3, [r7, #14]
 8004eb4:	e004      	b.n	8004ec0 <RadioSpiCommandStrobes+0x90>
 8004eb6:	89fb      	ldrh	r3, [r7, #14]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	81fb      	strh	r3, [r7, #14]
 8004ec0:	89fb      	ldrh	r3, [r7, #14]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec8:	d3f5      	bcc.n	8004eb6 <RadioSpiCommandStrobes+0x86>
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <RadioSpiCommandStrobes+0x128>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f107 0212 	add.w	r2, r7, #18
 8004ed2:	f107 0114 	add.w	r1, r7, #20
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4820      	ldr	r0, [pc, #128]	; (8004f5c <RadioSpiCommandStrobes+0x12c>)
 8004edc:	f001 fbe6 	bl	80066ac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8004ee0:	8a7b      	ldrh	r3, [r7, #18]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <RadioSpiCommandStrobes+0x128>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f107 0012 	add.w	r0, r7, #18
 8004ef0:	f107 0214 	add.w	r2, r7, #20
 8004ef4:	1c51      	adds	r1, r2, #1
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4602      	mov	r2, r0
 8004efc:	4817      	ldr	r0, [pc, #92]	; (8004f5c <RadioSpiCommandStrobes+0x12c>)
 8004efe:	f001 fbd5 	bl	80066ac <HAL_SPI_TransmitReceive>
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004f02:	bf00      	nop
 8004f04:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <RadioSpiCommandStrobes+0x12c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d1f8      	bne.n	8004f04 <RadioSpiCommandStrobes+0xd4>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004f12:	2201      	movs	r2, #1
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	480f      	ldr	r0, [pc, #60]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004f18:	f000 fdb4 	bl	8005a84 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2120      	movs	r1, #32
 8004f20:	480c      	ldr	r0, [pc, #48]	; (8004f54 <RadioSpiCommandStrobes+0x124>)
 8004f22:	f000 fdaf 	bl	8005a84 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004f26:	2301      	movs	r3, #1
 8004f28:	2204      	movs	r2, #4
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	2003      	movs	r0, #3
 8004f2e:	f7ff fd1d 	bl	800496c <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	f107 0318 	add.w	r3, r7, #24
 8004f38:	8812      	ldrh	r2, [r2, #0]
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	7e3a      	ldrb	r2, [r7, #24]
 8004f40:	f362 0307 	bfi	r3, r2, #0, #8
 8004f44:	7e7a      	ldrb	r2, [r7, #25]
 8004f46:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40020400 	.word	0x40020400
 8004f58:	20000170 	.word	0x20000170
 8004f5c:	200003bc 	.word	0x200003bc

08004f60 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	4603      	mov	r3, r0
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;

  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004f70:	f107 0312 	add.w	r3, r7, #18
 8004f74:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8004f76:	2300      	movs	r3, #0
 8004f78:	81bb      	strh	r3, [r7, #12]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	733b      	strb	r3, [r7, #12]
  aHeader[1] = LINEAR_FIFO_ADDRESS;
 8004f7e:	23ff      	movs	r3, #255	; 0xff
 8004f80:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8004f82:	2300      	movs	r3, #0
 8004f84:	2204      	movs	r2, #4
 8004f86:	2104      	movs	r1, #4
 8004f88:	2003      	movs	r0, #3
 8004f8a:	f7ff fcef 	bl	800496c <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004f8e:	f7fc fc2d 	bl	80017ec <bandSelect>
 8004f92:	4603      	mov	r3, r0
 8004f94:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004f96:	7c3b      	ldrb	r3, [r7, #16]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10a      	bne.n	8004fb2 <RadioSpiWriteFifo+0x52>
  {
	  RadioSpiHCSLow();
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2140      	movs	r1, #64	; 0x40
 8004fa0:	4841      	ldr	r0, [pc, #260]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 8004fa2:	f000 fd6f 	bl	8005a84 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	2120      	movs	r1, #32
 8004faa:	483f      	ldr	r0, [pc, #252]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 8004fac:	f000 fd6a 	bl	8005a84 <HAL_GPIO_WritePin>
 8004fb0:	e017      	b.n	8004fe2 <RadioSpiWriteFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004fb2:	7c7b      	ldrb	r3, [r7, #17]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10a      	bne.n	8004fce <RadioSpiWriteFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 8004fb8:	2201      	movs	r2, #1
 8004fba:	2140      	movs	r1, #64	; 0x40
 8004fbc:	483a      	ldr	r0, [pc, #232]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 8004fbe:	f000 fd61 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	4838      	ldr	r0, [pc, #224]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 8004fc8:	f000 fd5c 	bl	8005a84 <HAL_GPIO_WritePin>
 8004fcc:	e009      	b.n	8004fe2 <RadioSpiWriteFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	4835      	ldr	r0, [pc, #212]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 8004fd4:	f000 fd56 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004fd8:	2201      	movs	r2, #1
 8004fda:	2120      	movs	r1, #32
 8004fdc:	4832      	ldr	r0, [pc, #200]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 8004fde:	f000 fd51 	bl	8005a84 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	817b      	strh	r3, [r7, #10]
 8004fe6:	e004      	b.n	8004ff2 <RadioSpiWriteFifo+0x92>
 8004fe8:	897b      	ldrh	r3, [r7, #10]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3301      	adds	r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	817b      	strh	r3, [r7, #10]
 8004ff2:	897b      	ldrh	r3, [r7, #10]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffa:	d3f5      	bcc.n	8004fe8 <RadioSpiWriteFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <RadioSpiWriteFifo+0x14c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f107 0212 	add.w	r2, r7, #18
 8005004:	f107 010c 	add.w	r1, r7, #12
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	2301      	movs	r3, #1
 800500c:	4828      	ldr	r0, [pc, #160]	; (80050b0 <RadioSpiWriteFifo+0x150>)
 800500e:	f001 fb4d 	bl	80066ac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8005012:	8a7b      	ldrh	r3, [r7, #18]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	b29b      	uxth	r3, r3
 8005018:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <RadioSpiWriteFifo+0x14c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f107 0012 	add.w	r0, r7, #18
 8005022:	f107 020c 	add.w	r2, r7, #12
 8005026:	1c51      	adds	r1, r2, #1
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2301      	movs	r3, #1
 800502c:	4602      	mov	r2, r0
 800502e:	4820      	ldr	r0, [pc, #128]	; (80050b0 <RadioSpiWriteFifo+0x150>)
 8005030:	f001 fb3c 	bl	80066ac <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8005034:	2300      	movs	r3, #0
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e009      	b.n	800504e <RadioSpiWriteFifo+0xee>
  {
    SPI_Write(pcBuffer[index]);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	4413      	add	r3, r2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fd64 	bl	8004b10 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	3301      	adds	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	429a      	cmp	r2, r3
 8005054:	dbf1      	blt.n	800503a <RadioSpiWriteFifo+0xda>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET); 
 8005056:	bf00      	nop
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <RadioSpiWriteFifo+0x150>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b02      	cmp	r3, #2
 8005064:	d1f8      	bne.n	8005058 <RadioSpiWriteFifo+0xf8>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8005066:	2201      	movs	r2, #1
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	480f      	ldr	r0, [pc, #60]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 800506c:	f000 fd0a 	bl	8005a84 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8005070:	2201      	movs	r2, #1
 8005072:	2120      	movs	r1, #32
 8005074:	480c      	ldr	r0, [pc, #48]	; (80050a8 <RadioSpiWriteFifo+0x148>)
 8005076:	f000 fd05 	bl	8005a84 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 800507a:	2301      	movs	r3, #1
 800507c:	2204      	movs	r2, #4
 800507e:	2104      	movs	r1, #4
 8005080:	2003      	movs	r0, #3
 8005082:	f7ff fc73 	bl	800496c <RadioGpioInterruptCmd>
  
  return *pStatus; 
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	f107 0314 	add.w	r3, r7, #20
 800508c:	8812      	ldrh	r2, [r2, #0]
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	2300      	movs	r3, #0
 8005092:	7d3a      	ldrb	r2, [r7, #20]
 8005094:	f362 0307 	bfi	r3, r2, #0, #8
 8005098:	7d7a      	ldrb	r2, [r7, #21]
 800509a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40020400 	.word	0x40020400
 80050ac:	20000170 	.word	0x20000170
 80050b0:	200003bc 	.word	0x200003bc

080050b4 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval StatusBytes
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	4603      	mov	r3, r0
 80050bc:	6039      	str	r1, [r7, #0]
 80050be:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 80050c0:	2300      	movs	r3, #0
 80050c2:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 80050c4:	f107 0312 	add.w	r3, r7, #18
 80050c8:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2];
  uint8_t dummy=0xFF;
 80050ca:	23ff      	movs	r3, #255	; 0xff
 80050cc:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0]=READ_HEADER;
 80050ce:	2301      	movs	r3, #1
 80050d0:	733b      	strb	r3, [r7, #12]
  aHeader[1]=LINEAR_FIFO_ADDRESS;
 80050d2:	23ff      	movs	r3, #255	; 0xff
 80050d4:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 80050d6:	2300      	movs	r3, #0
 80050d8:	2204      	movs	r2, #4
 80050da:	2104      	movs	r1, #4
 80050dc:	2003      	movs	r0, #3
 80050de:	f7ff fc45 	bl	800496c <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 80050e2:	f7fc fb83 	bl	80017ec <bandSelect>
 80050e6:	4603      	mov	r3, r0
 80050e8:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 80050ea:	7c3b      	ldrb	r3, [r7, #16]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d10a      	bne.n	8005106 <RadioSpiReadFifo+0x52>
  {
	  RadioSpiHCSLow();
 80050f0:	2200      	movs	r2, #0
 80050f2:	2140      	movs	r1, #64	; 0x40
 80050f4:	4843      	ldr	r0, [pc, #268]	; (8005204 <RadioSpiReadFifo+0x150>)
 80050f6:	f000 fcc5 	bl	8005a84 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 80050fa:	2201      	movs	r2, #1
 80050fc:	2120      	movs	r1, #32
 80050fe:	4841      	ldr	r0, [pc, #260]	; (8005204 <RadioSpiReadFifo+0x150>)
 8005100:	f000 fcc0 	bl	8005a84 <HAL_GPIO_WritePin>
 8005104:	e017      	b.n	8005136 <RadioSpiReadFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8005106:	7c7b      	ldrb	r3, [r7, #17]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d10a      	bne.n	8005122 <RadioSpiReadFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 800510c:	2201      	movs	r2, #1
 800510e:	2140      	movs	r1, #64	; 0x40
 8005110:	483c      	ldr	r0, [pc, #240]	; (8005204 <RadioSpiReadFifo+0x150>)
 8005112:	f000 fcb7 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8005116:	2200      	movs	r2, #0
 8005118:	2120      	movs	r1, #32
 800511a:	483a      	ldr	r0, [pc, #232]	; (8005204 <RadioSpiReadFifo+0x150>)
 800511c:	f000 fcb2 	bl	8005a84 <HAL_GPIO_WritePin>
 8005120:	e009      	b.n	8005136 <RadioSpiReadFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8005122:	2200      	movs	r2, #0
 8005124:	2140      	movs	r1, #64	; 0x40
 8005126:	4837      	ldr	r0, [pc, #220]	; (8005204 <RadioSpiReadFifo+0x150>)
 8005128:	f000 fcac 	bl	8005a84 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 800512c:	2201      	movs	r2, #1
 800512e:	2120      	movs	r1, #32
 8005130:	4834      	ldr	r0, [pc, #208]	; (8005204 <RadioSpiReadFifo+0x150>)
 8005132:	f000 fca7 	bl	8005a84 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8005136:	2300      	movs	r3, #0
 8005138:	813b      	strh	r3, [r7, #8]
 800513a:	e004      	b.n	8005146 <RadioSpiReadFifo+0x92>
 800513c:	893b      	ldrh	r3, [r7, #8]
 800513e:	b29b      	uxth	r3, r3
 8005140:	3301      	adds	r3, #1
 8005142:	b29b      	uxth	r3, r3
 8005144:	813b      	strh	r3, [r7, #8]
 8005146:	893b      	ldrh	r3, [r7, #8]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514e:	d3f5      	bcc.n	800513c <RadioSpiReadFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <RadioSpiReadFifo+0x154>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f107 0212 	add.w	r2, r7, #18
 8005158:	f107 010c 	add.w	r1, r7, #12
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	2301      	movs	r3, #1
 8005160:	482a      	ldr	r0, [pc, #168]	; (800520c <RadioSpiReadFifo+0x158>)
 8005162:	f001 faa3 	bl	80066ac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8005166:	8a7b      	ldrh	r3, [r7, #18]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	b29b      	uxth	r3, r3
 800516c:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <RadioSpiReadFifo+0x154>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f107 0012 	add.w	r0, r7, #18
 8005176:	f107 020c 	add.w	r2, r7, #12
 800517a:	1c51      	adds	r1, r2, #1
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	2301      	movs	r3, #1
 8005180:	4602      	mov	r2, r0
 8005182:	4822      	ldr	r0, [pc, #136]	; (800520c <RadioSpiReadFifo+0x158>)
 8005184:	f001 fa92 	bl	80066ac <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	e00e      	b.n	80051ac <RadioSpiReadFifo+0xf8>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&pcBuffer[index], 1, SpiTimeout);
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	441a      	add	r2, r3
 8005194:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <RadioSpiReadFifo+0x154>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f107 010b 	add.w	r1, r7, #11
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2301      	movs	r3, #1
 80051a0:	481a      	ldr	r0, [pc, #104]	; (800520c <RadioSpiReadFifo+0x158>)
 80051a2:	f001 fa83 	bl	80066ac <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	dbec      	blt.n	800518e <RadioSpiReadFifo+0xda>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while(__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 80051b4:	bf00      	nop
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <RadioSpiReadFifo+0x158>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d1f8      	bne.n	80051b6 <RadioSpiReadFifo+0x102>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 80051c4:	2201      	movs	r2, #1
 80051c6:	2140      	movs	r1, #64	; 0x40
 80051c8:	480e      	ldr	r0, [pc, #56]	; (8005204 <RadioSpiReadFifo+0x150>)
 80051ca:	f000 fc5b 	bl	8005a84 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 80051ce:	2201      	movs	r2, #1
 80051d0:	2120      	movs	r1, #32
 80051d2:	480c      	ldr	r0, [pc, #48]	; (8005204 <RadioSpiReadFifo+0x150>)
 80051d4:	f000 fc56 	bl	8005a84 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80051d8:	2301      	movs	r3, #1
 80051da:	2204      	movs	r2, #4
 80051dc:	2104      	movs	r1, #4
 80051de:	2003      	movs	r0, #3
 80051e0:	f7ff fbc4 	bl	800496c <RadioGpioInterruptCmd>
  
  return *pStatus;  
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	f107 0314 	add.w	r3, r7, #20
 80051ea:	8812      	ldrh	r2, [r2, #0]
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	2300      	movs	r3, #0
 80051f0:	7d3a      	ldrb	r2, [r7, #20]
 80051f2:	f362 0307 	bfi	r3, r2, #0, #8
 80051f6:	7d7a      	ldrb	r2, [r7, #21]
 80051f8:	f362 230f 	bfi	r3, r2, #8, #8
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40020400 	.word	0x40020400
 8005208:	20000170 	.word	0x20000170
 800520c:	200003bc 	.word	0x200003bc

08005210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <HAL_Init+0x40>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <HAL_Init+0x40>)
 800521a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800521e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_Init+0x40>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <HAL_Init+0x40>)
 8005226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800522a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <HAL_Init+0x40>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a07      	ldr	r2, [pc, #28]	; (8005250 <HAL_Init+0x40>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005238:	2003      	movs	r0, #3
 800523a:	f000 f96f 	bl	800551c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800523e:	2000      	movs	r0, #0
 8005240:	f000 f808 	bl	8005254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005244:	f7fc fb6c 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023c00 	.word	0x40023c00

08005254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800525c:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_InitTick+0x54>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <HAL_InitTick+0x58>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	4619      	mov	r1, r3
 8005266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800526a:	fbb3 f3f1 	udiv	r3, r3, r1
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f995 	bl	80055a2 <HAL_SYSTICK_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e00e      	b.n	80052a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d80a      	bhi.n	800529e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005288:	2200      	movs	r2, #0
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	f000 f94f 	bl	8005532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005294:	4a06      	ldr	r2, [pc, #24]	; (80052b0 <HAL_InitTick+0x5c>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	2000014c 	.word	0x2000014c
 80052ac:	20000178 	.word	0x20000178
 80052b0:	20000174 	.word	0x20000174

080052b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_IncTick+0x20>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_IncTick+0x24>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4413      	add	r3, r2
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <HAL_IncTick+0x24>)
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	bf00      	nop
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000178 	.word	0x20000178
 80052d8:	20000414 	.word	0x20000414

080052dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return uwTick;
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <HAL_GetTick+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000414 	.word	0x20000414

080052f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7ff ffee 	bl	80052dc <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d005      	beq.n	800531a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_Delay+0x40>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800531a:	bf00      	nop
 800531c:	f7ff ffde 	bl	80052dc <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d8f7      	bhi.n	800531c <HAL_Delay+0x28>
  {
  }
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000178 	.word	0x20000178

08005338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <__NVIC_SetPriorityGrouping+0x44>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <__NVIC_SetPriorityGrouping+0x44>)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	60d3      	str	r3, [r2, #12]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <__NVIC_GetPriorityGrouping+0x18>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	f003 0307 	and.w	r3, r3, #7
}
 800538e:	4618      	mov	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db0b      	blt.n	80053c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	f003 021f 	and.w	r2, r3, #31
 80053b4:	4907      	ldr	r1, [pc, #28]	; (80053d4 <__NVIC_EnableIRQ+0x38>)
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2001      	movs	r0, #1
 80053be:	fa00 f202 	lsl.w	r2, r0, r2
 80053c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000e100 	.word	0xe000e100

080053d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db10      	blt.n	800540c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	f003 021f 	and.w	r2, r3, #31
 80053f0:	4909      	ldr	r1, [pc, #36]	; (8005418 <__NVIC_DisableIRQ+0x40>)
 80053f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2001      	movs	r0, #1
 80053fa:	fa00 f202 	lsl.w	r2, r0, r2
 80053fe:	3320      	adds	r3, #32
 8005400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005404:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005408:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	e000e100 	.word	0xe000e100

0800541c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	2b00      	cmp	r3, #0
 800542e:	db0a      	blt.n	8005446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	490c      	ldr	r1, [pc, #48]	; (8005468 <__NVIC_SetPriority+0x4c>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	440b      	add	r3, r1
 8005440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005444:	e00a      	b.n	800545c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4908      	ldr	r1, [pc, #32]	; (800546c <__NVIC_SetPriority+0x50>)
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	3b04      	subs	r3, #4
 8005454:	0112      	lsls	r2, r2, #4
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	440b      	add	r3, r1
 800545a:	761a      	strb	r2, [r3, #24]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	e000e100 	.word	0xe000e100
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f1c3 0307 	rsb	r3, r3, #7
 800548a:	2b04      	cmp	r3, #4
 800548c:	bf28      	it	cs
 800548e:	2304      	movcs	r3, #4
 8005490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3304      	adds	r3, #4
 8005496:	2b06      	cmp	r3, #6
 8005498:	d902      	bls.n	80054a0 <NVIC_EncodePriority+0x30>
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3b03      	subs	r3, #3
 800549e:	e000      	b.n	80054a2 <NVIC_EncodePriority+0x32>
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43da      	mvns	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	401a      	ands	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b8:	f04f 31ff 	mov.w	r1, #4294967295
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	43d9      	mvns	r1, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c8:	4313      	orrs	r3, r2
         );
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3724      	adds	r7, #36	; 0x24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054e8:	d301      	bcc.n	80054ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054ea:	2301      	movs	r3, #1
 80054ec:	e00f      	b.n	800550e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ee:	4a0a      	ldr	r2, [pc, #40]	; (8005518 <SysTick_Config+0x40>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054f6:	210f      	movs	r1, #15
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	f7ff ff8e 	bl	800541c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <SysTick_Config+0x40>)
 8005502:	2200      	movs	r2, #0
 8005504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005506:	4b04      	ldr	r3, [pc, #16]	; (8005518 <SysTick_Config+0x40>)
 8005508:	2207      	movs	r2, #7
 800550a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	e000e010 	.word	0xe000e010

0800551c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff07 	bl	8005338 <__NVIC_SetPriorityGrouping>
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005532:	b580      	push	{r7, lr}
 8005534:	b086      	sub	sp, #24
 8005536:	af00      	add	r7, sp, #0
 8005538:	4603      	mov	r3, r0
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005544:	f7ff ff1c 	bl	8005380 <__NVIC_GetPriorityGrouping>
 8005548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	6978      	ldr	r0, [r7, #20]
 8005550:	f7ff ff8e 	bl	8005470 <NVIC_EncodePriority>
 8005554:	4602      	mov	r2, r0
 8005556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ff5d 	bl	800541c <__NVIC_SetPriority>
}
 8005562:	bf00      	nop
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	4603      	mov	r3, r0
 8005572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff0f 	bl	800539c <__NVIC_EnableIRQ>
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	4603      	mov	r3, r0
 800558e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff1f 	bl	80053d8 <__NVIC_DisableIRQ>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ff94 	bl	80054d8 <SysTick_Config>
 80055b0:	4603      	mov	r3, r0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	e159      	b.n	800588c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055d8:	2201      	movs	r2, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	f040 8148 	bne.w	8005886 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d00b      	beq.n	8005616 <HAL_GPIO_Init+0x5a>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d007      	beq.n	8005616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800560a:	2b11      	cmp	r3, #17
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b12      	cmp	r3, #18
 8005614:	d130      	bne.n	8005678 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	2203      	movs	r2, #3
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4313      	orrs	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800564c:	2201      	movs	r2, #1
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 0201 	and.w	r2, r3, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	2203      	movs	r2, #3
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0xfc>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b12      	cmp	r3, #18
 80056b6:	d123      	bne.n	8005700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	220f      	movs	r2, #15
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	08da      	lsrs	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3208      	adds	r2, #8
 80056fa:	69b9      	ldr	r1, [r7, #24]
 80056fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	2203      	movs	r2, #3
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0203 	and.w	r2, r3, #3
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80a2 	beq.w	8005886 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	4b56      	ldr	r3, [pc, #344]	; (80058a0 <HAL_GPIO_Init+0x2e4>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	4a55      	ldr	r2, [pc, #340]	; (80058a0 <HAL_GPIO_Init+0x2e4>)
 800574c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005750:	6453      	str	r3, [r2, #68]	; 0x44
 8005752:	4b53      	ldr	r3, [pc, #332]	; (80058a0 <HAL_GPIO_Init+0x2e4>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800575e:	4a51      	ldr	r2, [pc, #324]	; (80058a4 <HAL_GPIO_Init+0x2e8>)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	3302      	adds	r3, #2
 8005766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	220f      	movs	r2, #15
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a48      	ldr	r2, [pc, #288]	; (80058a8 <HAL_GPIO_Init+0x2ec>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d019      	beq.n	80057be <HAL_GPIO_Init+0x202>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a47      	ldr	r2, [pc, #284]	; (80058ac <HAL_GPIO_Init+0x2f0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_GPIO_Init+0x1fe>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a46      	ldr	r2, [pc, #280]	; (80058b0 <HAL_GPIO_Init+0x2f4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00d      	beq.n	80057b6 <HAL_GPIO_Init+0x1fa>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a45      	ldr	r2, [pc, #276]	; (80058b4 <HAL_GPIO_Init+0x2f8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d007      	beq.n	80057b2 <HAL_GPIO_Init+0x1f6>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a44      	ldr	r2, [pc, #272]	; (80058b8 <HAL_GPIO_Init+0x2fc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_GPIO_Init+0x1f2>
 80057aa:	2304      	movs	r3, #4
 80057ac:	e008      	b.n	80057c0 <HAL_GPIO_Init+0x204>
 80057ae:	2307      	movs	r3, #7
 80057b0:	e006      	b.n	80057c0 <HAL_GPIO_Init+0x204>
 80057b2:	2303      	movs	r3, #3
 80057b4:	e004      	b.n	80057c0 <HAL_GPIO_Init+0x204>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e002      	b.n	80057c0 <HAL_GPIO_Init+0x204>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <HAL_GPIO_Init+0x204>
 80057be:	2300      	movs	r3, #0
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	f002 0203 	and.w	r2, r2, #3
 80057c6:	0092      	lsls	r2, r2, #2
 80057c8:	4093      	lsls	r3, r2
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057d0:	4934      	ldr	r1, [pc, #208]	; (80058a4 <HAL_GPIO_Init+0x2e8>)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	3302      	adds	r3, #2
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057de:	4b37      	ldr	r3, [pc, #220]	; (80058bc <HAL_GPIO_Init+0x300>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005802:	4a2e      	ldr	r2, [pc, #184]	; (80058bc <HAL_GPIO_Init+0x300>)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005808:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <HAL_GPIO_Init+0x300>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800582c:	4a23      	ldr	r2, [pc, #140]	; (80058bc <HAL_GPIO_Init+0x300>)
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005832:	4b22      	ldr	r3, [pc, #136]	; (80058bc <HAL_GPIO_Init+0x300>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005856:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_GPIO_Init+0x300>)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800585c:	4b17      	ldr	r3, [pc, #92]	; (80058bc <HAL_GPIO_Init+0x300>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005880:	4a0e      	ldr	r2, [pc, #56]	; (80058bc <HAL_GPIO_Init+0x300>)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3301      	adds	r3, #1
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b0f      	cmp	r3, #15
 8005890:	f67f aea2 	bls.w	80055d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005894:	bf00      	nop
 8005896:	3724      	adds	r7, #36	; 0x24
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40023800 	.word	0x40023800
 80058a4:	40013800 	.word	0x40013800
 80058a8:	40020000 	.word	0x40020000
 80058ac:	40020400 	.word	0x40020400
 80058b0:	40020800 	.word	0x40020800
 80058b4:	40020c00 	.word	0x40020c00
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40013c00 	.word	0x40013c00

080058c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e0bb      	b.n	8005a54 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058dc:	2201      	movs	r2, #1
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4013      	ands	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	f040 80ab 	bne.w	8005a4e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058f8:	4a5b      	ldr	r2, [pc, #364]	; (8005a68 <HAL_GPIO_DeInit+0x1a8>)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	089b      	lsrs	r3, r3, #2
 80058fe:	3302      	adds	r3, #2
 8005900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005904:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	220f      	movs	r2, #15
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	4013      	ands	r3, r2
 8005918:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a53      	ldr	r2, [pc, #332]	; (8005a6c <HAL_GPIO_DeInit+0x1ac>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d019      	beq.n	8005956 <HAL_GPIO_DeInit+0x96>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a52      	ldr	r2, [pc, #328]	; (8005a70 <HAL_GPIO_DeInit+0x1b0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_GPIO_DeInit+0x92>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a51      	ldr	r2, [pc, #324]	; (8005a74 <HAL_GPIO_DeInit+0x1b4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00d      	beq.n	800594e <HAL_GPIO_DeInit+0x8e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a50      	ldr	r2, [pc, #320]	; (8005a78 <HAL_GPIO_DeInit+0x1b8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <HAL_GPIO_DeInit+0x8a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a4f      	ldr	r2, [pc, #316]	; (8005a7c <HAL_GPIO_DeInit+0x1bc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_GPIO_DeInit+0x86>
 8005942:	2304      	movs	r3, #4
 8005944:	e008      	b.n	8005958 <HAL_GPIO_DeInit+0x98>
 8005946:	2307      	movs	r3, #7
 8005948:	e006      	b.n	8005958 <HAL_GPIO_DeInit+0x98>
 800594a:	2303      	movs	r3, #3
 800594c:	e004      	b.n	8005958 <HAL_GPIO_DeInit+0x98>
 800594e:	2302      	movs	r3, #2
 8005950:	e002      	b.n	8005958 <HAL_GPIO_DeInit+0x98>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_GPIO_DeInit+0x98>
 8005956:	2300      	movs	r3, #0
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	f002 0203 	and.w	r2, r2, #3
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	4093      	lsls	r3, r2
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	d132      	bne.n	80059ce <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005968:	4b45      	ldr	r3, [pc, #276]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	43db      	mvns	r3, r3
 8005970:	4943      	ldr	r1, [pc, #268]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 8005972:	4013      	ands	r3, r2
 8005974:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005976:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	43db      	mvns	r3, r3
 800597e:	4940      	ldr	r1, [pc, #256]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 8005980:	4013      	ands	r3, r2
 8005982:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005984:	4b3e      	ldr	r3, [pc, #248]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	43db      	mvns	r3, r3
 800598c:	493c      	ldr	r1, [pc, #240]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 800598e:	4013      	ands	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005992:	4b3b      	ldr	r3, [pc, #236]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	43db      	mvns	r3, r3
 800599a:	4939      	ldr	r1, [pc, #228]	; (8005a80 <HAL_GPIO_DeInit+0x1c0>)
 800599c:	4013      	ands	r3, r2
 800599e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	220f      	movs	r2, #15
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80059b0:	4a2d      	ldr	r2, [pc, #180]	; (8005a68 <HAL_GPIO_DeInit+0x1a8>)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	089b      	lsrs	r3, r3, #2
 80059b6:	3302      	adds	r3, #2
 80059b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	43da      	mvns	r2, r3
 80059c0:	4829      	ldr	r0, [pc, #164]	; (8005a68 <HAL_GPIO_DeInit+0x1a8>)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	400a      	ands	r2, r1
 80059c8:	3302      	adds	r3, #2
 80059ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	2103      	movs	r1, #3
 80059d8:	fa01 f303 	lsl.w	r3, r1, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	08da      	lsrs	r2, r3, #3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3208      	adds	r2, #8
 80059ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	220f      	movs	r2, #15
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	08d2      	lsrs	r2, r2, #3
 8005a04:	4019      	ands	r1, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3208      	adds	r2, #8
 8005a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	2103      	movs	r1, #3
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	401a      	ands	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	2101      	movs	r1, #1
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	401a      	ands	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	2103      	movs	r1, #3
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	43db      	mvns	r3, r3
 8005a48:	401a      	ands	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3301      	adds	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	f67f af40 	bls.w	80058dc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40013800 	.word	0x40013800
 8005a6c:	40020000 	.word	0x40020000
 8005a70:	40020400 	.word	0x40020400
 8005a74:	40020800 	.word	0x40020800
 8005a78:	40020c00 	.word	0x40020c00
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40013c00 	.word	0x40013c00

08005a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
 8005a90:	4613      	mov	r3, r2
 8005a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a94:	787b      	ldrb	r3, [r7, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aa0:	e003      	b.n	8005aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	041a      	lsls	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	619a      	str	r2, [r3, #24]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	401a      	ands	r2, r3
 8005aca:	887b      	ldrh	r3, [r7, #2]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d104      	bne.n	8005ada <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ad0:	887b      	ldrh	r3, [r7, #2]
 8005ad2:	041a      	lsls	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005ad8:	e002      	b.n	8005ae0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005af6:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005af8:	695a      	ldr	r2, [r3, #20]
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b02:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fb fee0 	bl	80018d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40013c00 	.word	0x40013c00

08005b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e25b      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d075      	beq.n	8005c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b3a:	4ba3      	ldr	r3, [pc, #652]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d00c      	beq.n	8005b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b46:	4ba0      	ldr	r3, [pc, #640]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d112      	bne.n	8005b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b52:	4b9d      	ldr	r3, [pc, #628]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b5e:	d10b      	bne.n	8005b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b60:	4b99      	ldr	r3, [pc, #612]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d05b      	beq.n	8005c24 <HAL_RCC_OscConfig+0x108>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d157      	bne.n	8005c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e236      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d106      	bne.n	8005b90 <HAL_RCC_OscConfig+0x74>
 8005b82:	4b91      	ldr	r3, [pc, #580]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a90      	ldr	r2, [pc, #576]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e01d      	b.n	8005bcc <HAL_RCC_OscConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b98:	d10c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x98>
 8005b9a:	4b8b      	ldr	r3, [pc, #556]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a8a      	ldr	r2, [pc, #552]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	4b88      	ldr	r3, [pc, #544]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a87      	ldr	r2, [pc, #540]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCC_OscConfig+0xb0>
 8005bb4:	4b84      	ldr	r3, [pc, #528]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a83      	ldr	r2, [pc, #524]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b81      	ldr	r3, [pc, #516]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a80      	ldr	r2, [pc, #512]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd4:	f7ff fb82 	bl	80052dc <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bdc:	f7ff fb7e 	bl	80052dc <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	; 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e1fb      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bee:	4b76      	ldr	r3, [pc, #472]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0xc0>
 8005bfa:	e014      	b.n	8005c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7ff fb6e 	bl	80052dc <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c04:	f7ff fb6a 	bl	80052dc <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	; 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e1e7      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c16:	4b6c      	ldr	r3, [pc, #432]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0xe8>
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d063      	beq.n	8005cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c32:	4b65      	ldr	r3, [pc, #404]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c3e:	4b62      	ldr	r3, [pc, #392]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d11c      	bne.n	8005c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c4a:	4b5f      	ldr	r3, [pc, #380]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d116      	bne.n	8005c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c56:	4b5c      	ldr	r3, [pc, #368]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_RCC_OscConfig+0x152>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e1bb      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6e:	4b56      	ldr	r3, [pc, #344]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4952      	ldr	r1, [pc, #328]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c82:	e03a      	b.n	8005cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d020      	beq.n	8005cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c8c:	4b4f      	ldr	r3, [pc, #316]	; (8005dcc <HAL_RCC_OscConfig+0x2b0>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7ff fb23 	bl	80052dc <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c9a:	f7ff fb1f 	bl	80052dc <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e19c      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cac:	4b46      	ldr	r3, [pc, #280]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb8:	4b43      	ldr	r3, [pc, #268]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4940      	ldr	r1, [pc, #256]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	600b      	str	r3, [r1, #0]
 8005ccc:	e015      	b.n	8005cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cce:	4b3f      	ldr	r3, [pc, #252]	; (8005dcc <HAL_RCC_OscConfig+0x2b0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7ff fb02 	bl	80052dc <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cdc:	f7ff fafe 	bl	80052dc <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e17b      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cee:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d030      	beq.n	8005d68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d0e:	4b30      	ldr	r3, [pc, #192]	; (8005dd0 <HAL_RCC_OscConfig+0x2b4>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d14:	f7ff fae2 	bl	80052dc <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d1c:	f7ff fade 	bl	80052dc <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e15b      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x200>
 8005d3a:	e015      	b.n	8005d68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d3c:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <HAL_RCC_OscConfig+0x2b4>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d42:	f7ff facb 	bl	80052dc <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d4a:	f7ff fac7 	bl	80052dc <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e144      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f0      	bne.n	8005d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80a0 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7a:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10f      	bne.n	8005da6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	4a0e      	ldr	r2, [pc, #56]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d94:	6413      	str	r3, [r2, #64]	; 0x40
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <HAL_RCC_OscConfig+0x2ac>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_RCC_OscConfig+0x2b8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d121      	bne.n	8005df6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <HAL_RCC_OscConfig+0x2b8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <HAL_RCC_OscConfig+0x2b8>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbe:	f7ff fa8d 	bl	80052dc <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc4:	e011      	b.n	8005dea <HAL_RCC_OscConfig+0x2ce>
 8005dc6:	bf00      	nop
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	42470000 	.word	0x42470000
 8005dd0:	42470e80 	.word	0x42470e80
 8005dd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd8:	f7ff fa80 	bl	80052dc <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0fd      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dea:	4b81      	ldr	r3, [pc, #516]	; (8005ff0 <HAL_RCC_OscConfig+0x4d4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d106      	bne.n	8005e0c <HAL_RCC_OscConfig+0x2f0>
 8005dfe:	4b7d      	ldr	r3, [pc, #500]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	4a7c      	ldr	r2, [pc, #496]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0a:	e01c      	b.n	8005e46 <HAL_RCC_OscConfig+0x32a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b05      	cmp	r3, #5
 8005e12:	d10c      	bne.n	8005e2e <HAL_RCC_OscConfig+0x312>
 8005e14:	4b77      	ldr	r3, [pc, #476]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e18:	4a76      	ldr	r2, [pc, #472]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e1a:	f043 0304 	orr.w	r3, r3, #4
 8005e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e20:	4b74      	ldr	r3, [pc, #464]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	4a73      	ldr	r2, [pc, #460]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2c:	e00b      	b.n	8005e46 <HAL_RCC_OscConfig+0x32a>
 8005e2e:	4b71      	ldr	r3, [pc, #452]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	4a70      	ldr	r2, [pc, #448]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3a:	4b6e      	ldr	r3, [pc, #440]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	4a6d      	ldr	r2, [pc, #436]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e40:	f023 0304 	bic.w	r3, r3, #4
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d015      	beq.n	8005e7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4e:	f7ff fa45 	bl	80052dc <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e54:	e00a      	b.n	8005e6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e56:	f7ff fa41 	bl	80052dc <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e0bc      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6c:	4b61      	ldr	r3, [pc, #388]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0ee      	beq.n	8005e56 <HAL_RCC_OscConfig+0x33a>
 8005e78:	e014      	b.n	8005ea4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e7a:	f7ff fa2f 	bl	80052dc <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e80:	e00a      	b.n	8005e98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7ff fa2b 	bl	80052dc <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e0a6      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e98:	4b56      	ldr	r3, [pc, #344]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1ee      	bne.n	8005e82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eaa:	4b52      	ldr	r3, [pc, #328]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	4a51      	ldr	r2, [pc, #324]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8092 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ec0:	4b4c      	ldr	r3, [pc, #304]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 030c 	and.w	r3, r3, #12
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d05c      	beq.n	8005f86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d141      	bne.n	8005f58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed4:	4b48      	ldr	r3, [pc, #288]	; (8005ff8 <HAL_RCC_OscConfig+0x4dc>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eda:	f7ff f9ff 	bl	80052dc <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7ff f9fb 	bl	80052dc <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e078      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef4:	4b3f      	ldr	r3, [pc, #252]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f0      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	019b      	lsls	r3, r3, #6
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	061b      	lsls	r3, r3, #24
 8005f24:	4933      	ldr	r1, [pc, #204]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f2a:	4b33      	ldr	r3, [pc, #204]	; (8005ff8 <HAL_RCC_OscConfig+0x4dc>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f30:	f7ff f9d4 	bl	80052dc <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f38:	f7ff f9d0 	bl	80052dc <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e04d      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x41c>
 8005f56:	e045      	b.n	8005fe4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f58:	4b27      	ldr	r3, [pc, #156]	; (8005ff8 <HAL_RCC_OscConfig+0x4dc>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5e:	f7ff f9bd 	bl	80052dc <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f66:	f7ff f9b9 	bl	80052dc <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e036      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f78:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f0      	bne.n	8005f66 <HAL_RCC_OscConfig+0x44a>
 8005f84:	e02e      	b.n	8005fe4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e029      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f92:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <HAL_RCC_OscConfig+0x4d8>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d11c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d115      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fba:	4013      	ands	r3, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d10d      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d001      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40007000 	.word	0x40007000
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	42470060 	.word	0x42470060

08005ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0cc      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b68      	ldr	r3, [pc, #416]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d90c      	bls.n	8006038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b65      	ldr	r3, [pc, #404]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006026:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0b8      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006050:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4a58      	ldr	r2, [pc, #352]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800605a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006068:	4b53      	ldr	r3, [pc, #332]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4a52      	ldr	r2, [pc, #328]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006074:	4b50      	ldr	r3, [pc, #320]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	494d      	ldr	r1, [pc, #308]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	4313      	orrs	r3, r2
 8006084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d044      	beq.n	800611c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609a:	4b47      	ldr	r3, [pc, #284]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d119      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e07f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d003      	beq.n	80060ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d107      	bne.n	80060ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ba:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e06f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ca:	4b3b      	ldr	r3, [pc, #236]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e067      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060da:	4b37      	ldr	r3, [pc, #220]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 0203 	bic.w	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4934      	ldr	r1, [pc, #208]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ec:	f7ff f8f6 	bl	80052dc <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f2:	e00a      	b.n	800610a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f4:	f7ff f8f2 	bl	80052dc <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e04f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 020c 	and.w	r2, r3, #12
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	429a      	cmp	r2, r3
 800611a:	d1eb      	bne.n	80060f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d20c      	bcs.n	8006144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e032      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006150:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4916      	ldr	r1, [pc, #88]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	490e      	ldr	r1, [pc, #56]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006182:	f000 f821 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8006186:	4601      	mov	r1, r0
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006194:	5cd3      	ldrb	r3, [r2, r3]
 8006196:	fa21 f303 	lsr.w	r3, r1, r3
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800619c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_ClockConfig+0x1c8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff f856 	bl	8005254 <HAL_InitTick>

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40023c00 	.word	0x40023c00
 80061b8:	40023800 	.word	0x40023800
 80061bc:	08007384 	.word	0x08007384
 80061c0:	2000014c 	.word	0x2000014c
 80061c4:	20000174 	.word	0x20000174

080061c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	2300      	movs	r3, #0
 80061d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061de:	4b50      	ldr	r3, [pc, #320]	; (8006320 <HAL_RCC_GetSysClockFreq+0x158>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 030c 	and.w	r3, r3, #12
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d007      	beq.n	80061fa <HAL_RCC_GetSysClockFreq+0x32>
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d008      	beq.n	8006200 <HAL_RCC_GetSysClockFreq+0x38>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 808d 	bne.w	800630e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f4:	4b4b      	ldr	r3, [pc, #300]	; (8006324 <HAL_RCC_GetSysClockFreq+0x15c>)
 80061f6:	60bb      	str	r3, [r7, #8]
       break;
 80061f8:	e08c      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061fa:	4b4b      	ldr	r3, [pc, #300]	; (8006328 <HAL_RCC_GetSysClockFreq+0x160>)
 80061fc:	60bb      	str	r3, [r7, #8]
      break;
 80061fe:	e089      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006200:	4b47      	ldr	r3, [pc, #284]	; (8006320 <HAL_RCC_GetSysClockFreq+0x158>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800620a:	4b45      	ldr	r3, [pc, #276]	; (8006320 <HAL_RCC_GetSysClockFreq+0x158>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d023      	beq.n	800625e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006216:	4b42      	ldr	r3, [pc, #264]	; (8006320 <HAL_RCC_GetSysClockFreq+0x158>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	f04f 0400 	mov.w	r4, #0
 8006220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	ea03 0501 	and.w	r5, r3, r1
 800622c:	ea04 0602 	and.w	r6, r4, r2
 8006230:	4a3d      	ldr	r2, [pc, #244]	; (8006328 <HAL_RCC_GetSysClockFreq+0x160>)
 8006232:	fb02 f106 	mul.w	r1, r2, r6
 8006236:	2200      	movs	r2, #0
 8006238:	fb02 f205 	mul.w	r2, r2, r5
 800623c:	440a      	add	r2, r1
 800623e:	493a      	ldr	r1, [pc, #232]	; (8006328 <HAL_RCC_GetSysClockFreq+0x160>)
 8006240:	fba5 0101 	umull	r0, r1, r5, r1
 8006244:	1853      	adds	r3, r2, r1
 8006246:	4619      	mov	r1, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f04f 0400 	mov.w	r4, #0
 800624e:	461a      	mov	r2, r3
 8006250:	4623      	mov	r3, r4
 8006252:	f7fa fc37 	bl	8000ac4 <__aeabi_uldivmod>
 8006256:	4603      	mov	r3, r0
 8006258:	460c      	mov	r4, r1
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e049      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625e:	4b30      	ldr	r3, [pc, #192]	; (8006320 <HAL_RCC_GetSysClockFreq+0x158>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	f04f 0400 	mov.w	r4, #0
 8006268:	f240 11ff 	movw	r1, #511	; 0x1ff
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	ea03 0501 	and.w	r5, r3, r1
 8006274:	ea04 0602 	and.w	r6, r4, r2
 8006278:	4629      	mov	r1, r5
 800627a:	4632      	mov	r2, r6
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	f04f 0400 	mov.w	r4, #0
 8006284:	0154      	lsls	r4, r2, #5
 8006286:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800628a:	014b      	lsls	r3, r1, #5
 800628c:	4619      	mov	r1, r3
 800628e:	4622      	mov	r2, r4
 8006290:	1b49      	subs	r1, r1, r5
 8006292:	eb62 0206 	sbc.w	r2, r2, r6
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	f04f 0400 	mov.w	r4, #0
 800629e:	0194      	lsls	r4, r2, #6
 80062a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80062a4:	018b      	lsls	r3, r1, #6
 80062a6:	1a5b      	subs	r3, r3, r1
 80062a8:	eb64 0402 	sbc.w	r4, r4, r2
 80062ac:	f04f 0100 	mov.w	r1, #0
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	00e2      	lsls	r2, r4, #3
 80062b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80062ba:	00d9      	lsls	r1, r3, #3
 80062bc:	460b      	mov	r3, r1
 80062be:	4614      	mov	r4, r2
 80062c0:	195b      	adds	r3, r3, r5
 80062c2:	eb44 0406 	adc.w	r4, r4, r6
 80062c6:	f04f 0100 	mov.w	r1, #0
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	02a2      	lsls	r2, r4, #10
 80062d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80062d4:	0299      	lsls	r1, r3, #10
 80062d6:	460b      	mov	r3, r1
 80062d8:	4614      	mov	r4, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	4621      	mov	r1, r4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f04f 0400 	mov.w	r4, #0
 80062e4:	461a      	mov	r2, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	f7fa fbec 	bl	8000ac4 <__aeabi_uldivmod>
 80062ec:	4603      	mov	r3, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <HAL_RCC_GetSysClockFreq+0x158>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	3301      	adds	r3, #1
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	fbb2 f3f3 	udiv	r3, r2, r3
 800630a:	60bb      	str	r3, [r7, #8]
      break;
 800630c:	e002      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800630e:	4b05      	ldr	r3, [pc, #20]	; (8006324 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006310:	60bb      	str	r3, [r7, #8]
      break;
 8006312:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006314:	68bb      	ldr	r3, [r7, #8]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631e:	bf00      	nop
 8006320:	40023800 	.word	0x40023800
 8006324:	00f42400 	.word	0x00f42400
 8006328:	017d7840 	.word	0x017d7840

0800632c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e056      	b.n	80063ec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fb fb09 	bl	8001970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006374:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	ea42 0103 	orr.w	r1, r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	0c1b      	lsrs	r3, r3, #16
 80063bc:	f003 0104 	and.w	r1, r3, #4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e01a      	b.n	800643c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800641c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb fb0e 	bl	8001a40 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_SPI_Transmit+0x22>
 8006462:	2302      	movs	r3, #2
 8006464:	e11e      	b.n	80066a4 <HAL_SPI_Transmit+0x260>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800646e:	f7fe ff35 	bl	80052dc <HAL_GetTick>
 8006472:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d002      	beq.n	800648a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006484:	2302      	movs	r3, #2
 8006486:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006488:	e103      	b.n	8006692 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SPI_Transmit+0x52>
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	77fb      	strb	r3, [r7, #31]
    goto error;
 800649a:	e0fa      	b.n	8006692 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2203      	movs	r2, #3
 80064a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e2:	d107      	bne.n	80064f4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d007      	beq.n	8006512 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651a:	d14b      	bne.n	80065b4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_SPI_Transmit+0xe6>
 8006524:	8afb      	ldrh	r3, [r7, #22]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d13e      	bne.n	80065a8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	1c9a      	adds	r2, r3, #2
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800654e:	e02b      	b.n	80065a8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d112      	bne.n	8006584 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	1c9a      	adds	r2, r3, #2
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	86da      	strh	r2, [r3, #54]	; 0x36
 8006582:	e011      	b.n	80065a8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006584:	f7fe feaa 	bl	80052dc <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d803      	bhi.n	800659c <HAL_SPI_Transmit+0x158>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d102      	bne.n	80065a2 <HAL_SPI_Transmit+0x15e>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d102      	bne.n	80065a8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065a6:	e074      	b.n	8006692 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1ce      	bne.n	8006550 <HAL_SPI_Transmit+0x10c>
 80065b2:	e04c      	b.n	800664e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_SPI_Transmit+0x17e>
 80065bc:	8afb      	ldrh	r3, [r7, #22]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d140      	bne.n	8006644 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065e8:	e02c      	b.n	8006644 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d113      	bne.n	8006620 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	330c      	adds	r3, #12
 8006602:	7812      	ldrb	r2, [r2, #0]
 8006604:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	86da      	strh	r2, [r3, #54]	; 0x36
 800661e:	e011      	b.n	8006644 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006620:	f7fe fe5c 	bl	80052dc <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d803      	bhi.n	8006638 <HAL_SPI_Transmit+0x1f4>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d102      	bne.n	800663e <HAL_SPI_Transmit+0x1fa>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006642:	e026      	b.n	8006692 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1cd      	bne.n	80065ea <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fa44 	bl	8006ae0 <SPI_EndRxTxTransaction>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e000      	b.n	8006692 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006690:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3720      	adds	r7, #32
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066ba:	2301      	movs	r3, #1
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x26>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e18a      	b.n	80069e8 <HAL_SPI_TransmitReceive+0x33c>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066da:	f7fe fdff 	bl	80052dc <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066f0:	887b      	ldrh	r3, [r7, #2]
 80066f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d00f      	beq.n	800671c <HAL_SPI_TransmitReceive+0x70>
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006702:	d107      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x68>
 800670c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006710:	2b04      	cmp	r3, #4
 8006712:	d003      	beq.n	800671c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006714:	2302      	movs	r3, #2
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800671a:	e15b      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_SPI_TransmitReceive+0x82>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_SPI_TransmitReceive+0x82>
 8006728:	887b      	ldrh	r3, [r7, #2]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006734:	e14e      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b04      	cmp	r3, #4
 8006740:	d003      	beq.n	800674a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2205      	movs	r2, #5
 8006746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	887a      	ldrh	r2, [r7, #2]
 800675a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	887a      	ldrh	r2, [r7, #2]
 8006772:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d007      	beq.n	800679e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800679c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a6:	d178      	bne.n	800689a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_SPI_TransmitReceive+0x10a>
 80067b0:	8b7b      	ldrh	r3, [r7, #26]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d166      	bne.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	881a      	ldrh	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	1c9a      	adds	r2, r3, #2
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067da:	e053      	b.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d11b      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x176>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d016      	beq.n	8006822 <HAL_SPI_TransmitReceive+0x176>
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d113      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	1c9a      	adds	r2, r3, #2
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d119      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x1b8>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	b292      	uxth	r2, r2
 8006846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	1c9a      	adds	r2, r3, #2
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006860:	2301      	movs	r3, #1
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006864:	f7fe fd3a 	bl	80052dc <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006870:	429a      	cmp	r2, r3
 8006872:	d807      	bhi.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d003      	beq.n	8006884 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006882:	e0a7      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1a6      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x130>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1a1      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x130>
 8006898:	e07c      	b.n	8006994 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x1fc>
 80068a2:	8b7b      	ldrh	r3, [r7, #26]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d16b      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ce:	e057      	b.n	8006980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d11c      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x26c>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d017      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x26c>
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d114      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d119      	bne.n	800695a <HAL_SPI_TransmitReceive+0x2ae>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d014      	beq.n	800695a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006956:	2301      	movs	r3, #1
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800695a:	f7fe fcbf 	bl	80052dc <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006966:	429a      	cmp	r2, r3
 8006968:	d803      	bhi.n	8006972 <HAL_SPI_TransmitReceive+0x2c6>
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d102      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x2cc>
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800697e:	e029      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1a2      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x224>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d19d      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f8a1 	bl	8006ae0 <SPI_EndRxTxTransaction>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80069b0:	e010      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	e000      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069fe:	b2db      	uxtb	r3, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a1c:	e04c      	b.n	8006ab8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d048      	beq.n	8006ab8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a26:	f7fe fc59 	bl	80052dc <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d902      	bls.n	8006a3c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d13d      	bne.n	8006ab8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a54:	d111      	bne.n	8006a7a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5e:	d004      	beq.n	8006a6a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a68:	d107      	bne.n	8006a7a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a82:	d10f      	bne.n	8006aa4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e00f      	b.n	8006ad8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d1a3      	bne.n	8006a1e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006aec:	4b1b      	ldr	r3, [pc, #108]	; (8006b5c <SPI_EndRxTxTransaction+0x7c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <SPI_EndRxTxTransaction+0x80>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	0d5b      	lsrs	r3, r3, #21
 8006af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b0a:	d112      	bne.n	8006b32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	2180      	movs	r1, #128	; 0x80
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff ff78 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d016      	beq.n	8006b50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e00f      	b.n	8006b52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d0f2      	beq.n	8006b32 <SPI_EndRxTxTransaction+0x52>
 8006b4c:	e000      	b.n	8006b50 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b4e:	bf00      	nop
  }

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	2000014c 	.word	0x2000014c
 8006b60:	165e9f81 	.word	0x165e9f81

08006b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e01d      	b.n	8006bb2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fa ff7c 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f000 f93a 	bl	8006e1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b0c      	cmp	r3, #12
 8006bca:	d841      	bhi.n	8006c50 <HAL_TIM_OC_Start_IT+0x94>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <HAL_TIM_OC_Start_IT+0x18>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006c09 	.word	0x08006c09
 8006bd8:	08006c51 	.word	0x08006c51
 8006bdc:	08006c51 	.word	0x08006c51
 8006be0:	08006c51 	.word	0x08006c51
 8006be4:	08006c1b 	.word	0x08006c1b
 8006be8:	08006c51 	.word	0x08006c51
 8006bec:	08006c51 	.word	0x08006c51
 8006bf0:	08006c51 	.word	0x08006c51
 8006bf4:	08006c2d 	.word	0x08006c2d
 8006bf8:	08006c51 	.word	0x08006c51
 8006bfc:	08006c51 	.word	0x08006c51
 8006c00:	08006c51 	.word	0x08006c51
 8006c04:	08006c3f 	.word	0x08006c3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0202 	orr.w	r2, r2, #2
 8006c16:	60da      	str	r2, [r3, #12]
      break;
 8006c18:	e01b      	b.n	8006c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0204 	orr.w	r2, r2, #4
 8006c28:	60da      	str	r2, [r3, #12]
      break;
 8006c2a:	e012      	b.n	8006c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0208 	orr.w	r2, r2, #8
 8006c3a:	60da      	str	r2, [r3, #12]
      break;
 8006c3c:	e009      	b.n	8006c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0210 	orr.w	r2, r2, #16
 8006c4c:	60da      	str	r2, [r3, #12]
      break;
 8006c4e:	e000      	b.n	8006c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8006c50:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2201      	movs	r2, #1
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 f9f8 	bl	8007050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <HAL_TIM_OC_Start_IT+0xec>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d107      	bne.n	8006c7a <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	d007      	beq.n	8006c9c <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40010000 	.word	0x40010000

08006cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_ConfigClockSource+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0a6      	b.n	8006e12 <HAL_TIM_ConfigClockSource+0x166>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d067      	beq.n	8006dcc <HAL_TIM_ConfigClockSource+0x120>
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	d80b      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x6c>
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d073      	beq.n	8006dec <HAL_TIM_ConfigClockSource+0x140>
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d802      	bhi.n	8006d0e <HAL_TIM_ConfigClockSource+0x62>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d06f      	beq.n	8006dec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d0c:	e078      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d06c      	beq.n	8006dec <HAL_TIM_ConfigClockSource+0x140>
 8006d12:	2b30      	cmp	r3, #48	; 0x30
 8006d14:	d06a      	beq.n	8006dec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d16:	e073      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d18:	2b70      	cmp	r3, #112	; 0x70
 8006d1a:	d00d      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0x8c>
 8006d1c:	2b70      	cmp	r3, #112	; 0x70
 8006d1e:	d804      	bhi.n	8006d2a <HAL_TIM_ConfigClockSource+0x7e>
 8006d20:	2b50      	cmp	r3, #80	; 0x50
 8006d22:	d033      	beq.n	8006d8c <HAL_TIM_ConfigClockSource+0xe0>
 8006d24:	2b60      	cmp	r3, #96	; 0x60
 8006d26:	d041      	beq.n	8006dac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d28:	e06a      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2e:	d066      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0x152>
 8006d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d34:	d017      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d36:	e063      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6899      	ldr	r1, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f000 f962 	bl	8007010 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	609a      	str	r2, [r3, #8]
      break;
 8006d64:	e04c      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6899      	ldr	r1, [r3, #8]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f000 f94b 	bl	8007010 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d88:	609a      	str	r2, [r3, #8]
      break;
 8006d8a:	e039      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	6859      	ldr	r1, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f000 f8bf 	bl	8006f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2150      	movs	r1, #80	; 0x50
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 f918 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006daa:	e029      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	6859      	ldr	r1, [r3, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	461a      	mov	r2, r3
 8006dba:	f000 f8de 	bl	8006f7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2160      	movs	r1, #96	; 0x60
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f908 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006dca:	e019      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	6859      	ldr	r1, [r3, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f000 f89f 	bl	8006f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2140      	movs	r1, #64	; 0x40
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 f8f8 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006dea:	e009      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f000 f8ef 	bl	8006fda <TIM_ITRx_SetConfig>
      break;
 8006dfc:	e000      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a34      	ldr	r2, [pc, #208]	; (8006f00 <TIM_Base_SetConfig+0xe4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00f      	beq.n	8006e54 <TIM_Base_SetConfig+0x38>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3a:	d00b      	beq.n	8006e54 <TIM_Base_SetConfig+0x38>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a31      	ldr	r2, [pc, #196]	; (8006f04 <TIM_Base_SetConfig+0xe8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d007      	beq.n	8006e54 <TIM_Base_SetConfig+0x38>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a30      	ldr	r2, [pc, #192]	; (8006f08 <TIM_Base_SetConfig+0xec>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_Base_SetConfig+0x38>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2f      	ldr	r2, [pc, #188]	; (8006f0c <TIM_Base_SetConfig+0xf0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d108      	bne.n	8006e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a25      	ldr	r2, [pc, #148]	; (8006f00 <TIM_Base_SetConfig+0xe4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01b      	beq.n	8006ea6 <TIM_Base_SetConfig+0x8a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e74:	d017      	beq.n	8006ea6 <TIM_Base_SetConfig+0x8a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a22      	ldr	r2, [pc, #136]	; (8006f04 <TIM_Base_SetConfig+0xe8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <TIM_Base_SetConfig+0x8a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a21      	ldr	r2, [pc, #132]	; (8006f08 <TIM_Base_SetConfig+0xec>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_Base_SetConfig+0x8a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a20      	ldr	r2, [pc, #128]	; (8006f0c <TIM_Base_SetConfig+0xf0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_Base_SetConfig+0x8a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <TIM_Base_SetConfig+0xf4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_Base_SetConfig+0x8a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <TIM_Base_SetConfig+0xf8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_Base_SetConfig+0x8a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <TIM_Base_SetConfig+0xfc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d108      	bne.n	8006eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a08      	ldr	r2, [pc, #32]	; (8006f00 <TIM_Base_SetConfig+0xe4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d103      	bne.n	8006eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	615a      	str	r2, [r3, #20]
}
 8006ef2:	bf00      	nop
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	40010000 	.word	0x40010000
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800
 8006f0c:	40000c00 	.word	0x40000c00
 8006f10:	40014000 	.word	0x40014000
 8006f14:	40014400 	.word	0x40014400
 8006f18:	40014800 	.word	0x40014800

08006f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0201 	bic.w	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f023 030a 	bic.w	r3, r3, #10
 8006f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0210 	bic.w	r2, r3, #16
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	031b      	lsls	r3, r3, #12
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f043 0307 	orr.w	r3, r3, #7
 8006ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800702a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	021a      	lsls	r2, r3, #8
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	431a      	orrs	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4313      	orrs	r3, r2
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	609a      	str	r2, [r3, #8]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2201      	movs	r2, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	fa01 f303 	lsl.w	r3, r1, r3
 8007088:	431a      	orrs	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e050      	b.n	8007156 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d018      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007100:	d013      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a18      	ldr	r2, [pc, #96]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a16      	ldr	r2, [pc, #88]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a15      	ldr	r2, [pc, #84]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a13      	ldr	r2, [pc, #76]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d10c      	bne.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	4313      	orrs	r3, r2
 800713a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40010000 	.word	0x40010000
 8007168:	40000400 	.word	0x40000400
 800716c:	40000800 	.word	0x40000800
 8007170:	40000c00 	.word	0x40000c00
 8007174:	40014000 	.word	0x40014000

08007178 <__errno>:
 8007178:	4b01      	ldr	r3, [pc, #4]	; (8007180 <__errno+0x8>)
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	2000017c 	.word	0x2000017c

08007184 <__libc_init_array>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4e0d      	ldr	r6, [pc, #52]	; (80071bc <__libc_init_array+0x38>)
 8007188:	4c0d      	ldr	r4, [pc, #52]	; (80071c0 <__libc_init_array+0x3c>)
 800718a:	1ba4      	subs	r4, r4, r6
 800718c:	10a4      	asrs	r4, r4, #2
 800718e:	2500      	movs	r5, #0
 8007190:	42a5      	cmp	r5, r4
 8007192:	d109      	bne.n	80071a8 <__libc_init_array+0x24>
 8007194:	4e0b      	ldr	r6, [pc, #44]	; (80071c4 <__libc_init_array+0x40>)
 8007196:	4c0c      	ldr	r4, [pc, #48]	; (80071c8 <__libc_init_array+0x44>)
 8007198:	f000 f8de 	bl	8007358 <_init>
 800719c:	1ba4      	subs	r4, r4, r6
 800719e:	10a4      	asrs	r4, r4, #2
 80071a0:	2500      	movs	r5, #0
 80071a2:	42a5      	cmp	r5, r4
 80071a4:	d105      	bne.n	80071b2 <__libc_init_array+0x2e>
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071ac:	4798      	blx	r3
 80071ae:	3501      	adds	r5, #1
 80071b0:	e7ee      	b.n	8007190 <__libc_init_array+0xc>
 80071b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071b6:	4798      	blx	r3
 80071b8:	3501      	adds	r5, #1
 80071ba:	e7f2      	b.n	80071a2 <__libc_init_array+0x1e>
 80071bc:	08007540 	.word	0x08007540
 80071c0:	08007540 	.word	0x08007540
 80071c4:	08007540 	.word	0x08007540
 80071c8:	08007544 	.word	0x08007544

080071cc <malloc>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <malloc+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f000 b80b 	b.w	80071ec <_malloc_r>
 80071d6:	bf00      	nop
 80071d8:	2000017c 	.word	0x2000017c

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <_malloc_r>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	1ccd      	adds	r5, r1, #3
 80071f0:	f025 0503 	bic.w	r5, r5, #3
 80071f4:	3508      	adds	r5, #8
 80071f6:	2d0c      	cmp	r5, #12
 80071f8:	bf38      	it	cc
 80071fa:	250c      	movcc	r5, #12
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	4606      	mov	r6, r0
 8007200:	db01      	blt.n	8007206 <_malloc_r+0x1a>
 8007202:	42a9      	cmp	r1, r5
 8007204:	d903      	bls.n	800720e <_malloc_r+0x22>
 8007206:	230c      	movs	r3, #12
 8007208:	6033      	str	r3, [r6, #0]
 800720a:	2000      	movs	r0, #0
 800720c:	bd70      	pop	{r4, r5, r6, pc}
 800720e:	f000 f857 	bl	80072c0 <__malloc_lock>
 8007212:	4a21      	ldr	r2, [pc, #132]	; (8007298 <_malloc_r+0xac>)
 8007214:	6814      	ldr	r4, [r2, #0]
 8007216:	4621      	mov	r1, r4
 8007218:	b991      	cbnz	r1, 8007240 <_malloc_r+0x54>
 800721a:	4c20      	ldr	r4, [pc, #128]	; (800729c <_malloc_r+0xb0>)
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	b91b      	cbnz	r3, 8007228 <_malloc_r+0x3c>
 8007220:	4630      	mov	r0, r6
 8007222:	f000 f83d 	bl	80072a0 <_sbrk_r>
 8007226:	6020      	str	r0, [r4, #0]
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f000 f838 	bl	80072a0 <_sbrk_r>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d124      	bne.n	800727e <_malloc_r+0x92>
 8007234:	230c      	movs	r3, #12
 8007236:	6033      	str	r3, [r6, #0]
 8007238:	4630      	mov	r0, r6
 800723a:	f000 f842 	bl	80072c2 <__malloc_unlock>
 800723e:	e7e4      	b.n	800720a <_malloc_r+0x1e>
 8007240:	680b      	ldr	r3, [r1, #0]
 8007242:	1b5b      	subs	r3, r3, r5
 8007244:	d418      	bmi.n	8007278 <_malloc_r+0x8c>
 8007246:	2b0b      	cmp	r3, #11
 8007248:	d90f      	bls.n	800726a <_malloc_r+0x7e>
 800724a:	600b      	str	r3, [r1, #0]
 800724c:	50cd      	str	r5, [r1, r3]
 800724e:	18cc      	adds	r4, r1, r3
 8007250:	4630      	mov	r0, r6
 8007252:	f000 f836 	bl	80072c2 <__malloc_unlock>
 8007256:	f104 000b 	add.w	r0, r4, #11
 800725a:	1d23      	adds	r3, r4, #4
 800725c:	f020 0007 	bic.w	r0, r0, #7
 8007260:	1ac3      	subs	r3, r0, r3
 8007262:	d0d3      	beq.n	800720c <_malloc_r+0x20>
 8007264:	425a      	negs	r2, r3
 8007266:	50e2      	str	r2, [r4, r3]
 8007268:	e7d0      	b.n	800720c <_malloc_r+0x20>
 800726a:	428c      	cmp	r4, r1
 800726c:	684b      	ldr	r3, [r1, #4]
 800726e:	bf16      	itet	ne
 8007270:	6063      	strne	r3, [r4, #4]
 8007272:	6013      	streq	r3, [r2, #0]
 8007274:	460c      	movne	r4, r1
 8007276:	e7eb      	b.n	8007250 <_malloc_r+0x64>
 8007278:	460c      	mov	r4, r1
 800727a:	6849      	ldr	r1, [r1, #4]
 800727c:	e7cc      	b.n	8007218 <_malloc_r+0x2c>
 800727e:	1cc4      	adds	r4, r0, #3
 8007280:	f024 0403 	bic.w	r4, r4, #3
 8007284:	42a0      	cmp	r0, r4
 8007286:	d005      	beq.n	8007294 <_malloc_r+0xa8>
 8007288:	1a21      	subs	r1, r4, r0
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f808 	bl	80072a0 <_sbrk_r>
 8007290:	3001      	adds	r0, #1
 8007292:	d0cf      	beq.n	8007234 <_malloc_r+0x48>
 8007294:	6025      	str	r5, [r4, #0]
 8007296:	e7db      	b.n	8007250 <_malloc_r+0x64>
 8007298:	200002f4 	.word	0x200002f4
 800729c:	200002f8 	.word	0x200002f8

080072a0 <_sbrk_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4c06      	ldr	r4, [pc, #24]	; (80072bc <_sbrk_r+0x1c>)
 80072a4:	2300      	movs	r3, #0
 80072a6:	4605      	mov	r5, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	f7fa fc4a 	bl	8001b44 <_sbrk>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_sbrk_r+0x1a>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_sbrk_r+0x1a>
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	20000418 	.word	0x20000418

080072c0 <__malloc_lock>:
 80072c0:	4770      	bx	lr

080072c2 <__malloc_unlock>:
 80072c2:	4770      	bx	lr

080072c4 <round>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	ec57 6b10 	vmov	r6, r7, d0
 80072ca:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80072ce:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80072d2:	2c13      	cmp	r4, #19
 80072d4:	463b      	mov	r3, r7
 80072d6:	463d      	mov	r5, r7
 80072d8:	dc17      	bgt.n	800730a <round+0x46>
 80072da:	2c00      	cmp	r4, #0
 80072dc:	da09      	bge.n	80072f2 <round+0x2e>
 80072de:	3401      	adds	r4, #1
 80072e0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80072e4:	d103      	bne.n	80072ee <round+0x2a>
 80072e6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072ee:	2100      	movs	r1, #0
 80072f0:	e02c      	b.n	800734c <round+0x88>
 80072f2:	4a18      	ldr	r2, [pc, #96]	; (8007354 <round+0x90>)
 80072f4:	4122      	asrs	r2, r4
 80072f6:	4217      	tst	r7, r2
 80072f8:	d100      	bne.n	80072fc <round+0x38>
 80072fa:	b19e      	cbz	r6, 8007324 <round+0x60>
 80072fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007300:	4123      	asrs	r3, r4
 8007302:	442b      	add	r3, r5
 8007304:	ea23 0302 	bic.w	r3, r3, r2
 8007308:	e7f1      	b.n	80072ee <round+0x2a>
 800730a:	2c33      	cmp	r4, #51	; 0x33
 800730c:	dd0d      	ble.n	800732a <round+0x66>
 800730e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007312:	d107      	bne.n	8007324 <round+0x60>
 8007314:	4630      	mov	r0, r6
 8007316:	4639      	mov	r1, r7
 8007318:	ee10 2a10 	vmov	r2, s0
 800731c:	f7f8 ff62 	bl	80001e4 <__adddf3>
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	ec47 6b10 	vmov	d0, r6, r7
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800732e:	f04f 30ff 	mov.w	r0, #4294967295
 8007332:	40d0      	lsrs	r0, r2
 8007334:	4206      	tst	r6, r0
 8007336:	d0f5      	beq.n	8007324 <round+0x60>
 8007338:	2201      	movs	r2, #1
 800733a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800733e:	fa02 f404 	lsl.w	r4, r2, r4
 8007342:	1931      	adds	r1, r6, r4
 8007344:	bf28      	it	cs
 8007346:	189b      	addcs	r3, r3, r2
 8007348:	ea21 0100 	bic.w	r1, r1, r0
 800734c:	461f      	mov	r7, r3
 800734e:	460e      	mov	r6, r1
 8007350:	e7e8      	b.n	8007324 <round+0x60>
 8007352:	bf00      	nop
 8007354:	000fffff 	.word	0x000fffff

08007358 <_init>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	bf00      	nop
 800735c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735e:	bc08      	pop	{r3}
 8007360:	469e      	mov	lr, r3
 8007362:	4770      	bx	lr

08007364 <_fini>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr
