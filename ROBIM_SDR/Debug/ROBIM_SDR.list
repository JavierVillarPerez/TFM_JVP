
ROBIM_SDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007554  08007554  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  08007554  08007554  00017554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800755c  0800755c  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08007564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000258  080077bc  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080077bc  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f175  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045cd  00000000  00000000  0003f3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c0  00000000  00000000  000439d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016b8  00000000  00000000  00045290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd54  00000000  00000000  00046948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000133ec  00000000  00000000  0006269c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e90a  00000000  00000000  00075a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067bc  00000000  00000000  00114410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000258 	.word	0x20000258
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080073b8 	.word	0x080073b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000025c 	.word	0x2000025c
 80001d4:	080073b8 	.word	0x080073b8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b972 	b.w	8000dc0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	4688      	mov	r8, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14b      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4615      	mov	r5, r2
 8000b06:	d967      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0720 	rsb	r7, r2, #32
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	ea47 0803 	orr.w	r8, r7, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b2c:	fa1f fc85 	uxth.w	ip, r5
 8000b30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b38:	fb07 f10c 	mul.w	r1, r7, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b46:	f080 811b 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8118 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b50:	3f02      	subs	r7, #2
 8000b52:	442b      	add	r3, r5
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b68:	45a4      	cmp	ip, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8107 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	f240 8104 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	442c      	add	r4, r5
 8000b80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b84:	eba4 040c 	sub.w	r4, r4, ip
 8000b88:	2700      	movs	r7, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xbe>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80eb 	beq.w	8000d7a <__udivmoddi4+0x286>
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e9c6 0100 	strd	r0, r1, [r6]
 8000baa:	4638      	mov	r0, r7
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f783 	clz	r7, r3
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d147      	bne.n	8000c4a <__udivmoddi4+0x156>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd0>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80fa 	bhi.w	8000db8 <__udivmoddi4+0x2c4>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000bd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xe8>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 808f 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be6:	1b49      	subs	r1, r1, r5
 8000be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bec:	fa1f f885 	uxth.w	r8, r5
 8000bf0:	2701      	movs	r7, #1
 8000bf2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb08 f10c 	mul.w	r1, r8, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4299      	cmp	r1, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x14c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x14a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80b6 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e79f      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4e:	40bb      	lsls	r3, r7
 8000c50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c58:	fa01 f407 	lsl.w	r4, r1, r7
 8000c5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c68:	4325      	orrs	r5, r4
 8000c6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6e:	0c2c      	lsrs	r4, r5, #16
 8000c70:	fb08 3319 	mls	r3, r8, r9, r3
 8000c74:	fa1f fa8e 	uxth.w	sl, lr
 8000c78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c80:	429c      	cmp	r4, r3
 8000c82:	fa02 f207 	lsl.w	r2, r2, r7
 8000c86:	fa00 f107 	lsl.w	r1, r0, r7
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c94:	f080 8087 	bcs.w	8000da6 <__udivmoddi4+0x2b2>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f240 8084 	bls.w	8000da6 <__udivmoddi4+0x2b2>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4473      	add	r3, lr
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb8:	45a2      	cmp	sl, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	d26b      	bcs.n	8000d9e <__udivmoddi4+0x2aa>
 8000cc6:	45a2      	cmp	sl, r4
 8000cc8:	d969      	bls.n	8000d9e <__udivmoddi4+0x2aa>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4474      	add	r4, lr
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd6:	eba4 040a 	sub.w	r4, r4, sl
 8000cda:	454c      	cmp	r4, r9
 8000cdc:	46c2      	mov	sl, r8
 8000cde:	464b      	mov	r3, r9
 8000ce0:	d354      	bcc.n	8000d8c <__udivmoddi4+0x298>
 8000ce2:	d051      	beq.n	8000d88 <__udivmoddi4+0x294>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d069      	beq.n	8000dbc <__udivmoddi4+0x2c8>
 8000ce8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cec:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	40fc      	lsrs	r4, r7
 8000cf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000d00:	2700      	movs	r7, #0
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f703 	lsr.w	r7, r0, r3
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	4338      	orrs	r0, r7
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d22:	fa1f f885 	uxth.w	r8, r5
 8000d26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2e:	fb07 f308 	mul.w	r3, r7, r8
 8000d32:	428b      	cmp	r3, r1
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x256>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d40:	d22f      	bcs.n	8000da2 <__udivmoddi4+0x2ae>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d92d      	bls.n	8000da2 <__udivmoddi4+0x2ae>
 8000d46:	3f02      	subs	r7, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	b281      	uxth	r1, r0
 8000d4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb00 f308 	mul.w	r3, r0, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x27e>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d68:	d217      	bcs.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d915      	bls.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1ac9      	subs	r1, r1, r3
 8000d74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d78:	e73b      	b.n	8000bf2 <__udivmoddi4+0xfe>
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e709      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d80:	4607      	mov	r7, r0
 8000d82:	e6e7      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d84:	4618      	mov	r0, r3
 8000d86:	e6fb      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d88:	4541      	cmp	r1, r8
 8000d8a:	d2ab      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d90:	eb69 020e 	sbc.w	r2, r9, lr
 8000d94:	3801      	subs	r0, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	e7a4      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9a:	4660      	mov	r0, ip
 8000d9c:	e7e9      	b.n	8000d72 <__udivmoddi4+0x27e>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	e795      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da2:	4667      	mov	r7, ip
 8000da4:	e7d1      	b.n	8000d4a <__udivmoddi4+0x256>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e77c      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000daa:	3802      	subs	r0, #2
 8000dac:	442c      	add	r4, r5
 8000dae:	e747      	b.n	8000c40 <__udivmoddi4+0x14c>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	e72f      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db8:	4638      	mov	r0, r7
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xda>
 8000dbc:	4637      	mov	r7, r6
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0xa0>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000dcc:	2008      	movs	r0, #8
 8000dce:	f006 fa2d 	bl	800722c <malloc>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 f805 	bl	8000de8 <fsm_init>
  return this;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e01c      	b.n	8000e56 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d113      	bne.n	8000e50 <fsm_fire+0x44>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00c      	beq.n	8000e50 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <fsm_fire+0x54>
        t->out(this);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
      break;
 8000e4e:	e007      	b.n	8000e60 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3310      	adds	r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dade      	bge.n	8000e1c <fsm_fire+0x10>
    }
  }
}
 8000e5e:	e000      	b.n	8000e62 <fsm_fire+0x56>
      break;
 8000e60:	bf00      	nop
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f004 f9fe 	bl	8005270 <HAL_Init>

  /* USER CODE BEGIN Init */
  Clock_Enable();
 8000e74:	f000 f9ba 	bl	80011ec <Clock_Enable>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f814 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 f8fe 	bl	800107c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e80:	f000 f87a 	bl	8000f78 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e84:	f000 f8ae 	bl	8000fe4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Radio_Init();
 8000e88:	f000 fcce 	bl	8001828 <HAL_Radio_Init>
  APP_Init();
 8000e8c:	f000 fd84 	bl	8001998 <APP_Init>
  HAL_TIM_OC_Start_IT(&htim2,0);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <main+0x34>)
 8000e94:	f005 fec2 	bl	8006c1c <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	APP_Process();
 8000e98:	f000 fcd6 	bl	8001848 <APP_Process>
 8000e9c:	e7fc      	b.n	8000e98 <main+0x2c>
 8000e9e:	bf00      	nop
 8000ea0:	200003cc 	.word	0x200003cc

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 f9c2 	bl	800723c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <SystemClock_Config+0xcc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <SystemClock_Config+0xcc>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <SystemClock_Config+0xd0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <SystemClock_Config+0xd0>)
 8000ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f1c:	23c0      	movs	r3, #192	; 0xc0
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 fe25 	bl	8005b7c <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f38:	f000 f9c0 	bl	80012bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2302      	movs	r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2101      	movs	r1, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 f87f 	bl	800605c <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f64:	f000 f9aa 	bl	80012bc <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3750      	adds	r7, #80	; 0x50
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f7e:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <MX_SPI1_Init+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_SPI1_Init+0x64>)
 8000fca:	f005 f9df 	bl	800638c <HAL_SPI_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fd4:	f000 f972 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000374 	.word	0x20000374
 8000fe0:	40013000 	.word	0x40013000

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM2_Init+0x94>)
 8001002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_TIM2_Init+0x94>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_TIM2_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM2_Init+0x94>)
 8001016:	f04f 32ff 	mov.w	r2, #4294967295
 800101a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_TIM2_Init+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM2_Init+0x94>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_TIM2_Init+0x94>)
 800102a:	f005 fdcb 	bl	8006bc4 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001034:	f000 f942 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_TIM2_Init+0x94>)
 8001046:	f005 fe61 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 f934 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_TIM2_Init+0x94>)
 8001062:	f006 f84b 	bl	80070fc <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800106c:	f000 f926 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200003cc 	.word	0x200003cc

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <MX_GPIO_Init+0x158>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <MX_GPIO_Init+0x158>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <MX_GPIO_Init+0x158>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <MX_GPIO_Init+0x158>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a47      	ldr	r2, [pc, #284]	; (80011d4 <MX_GPIO_Init+0x158>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <MX_GPIO_Init+0x158>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <MX_GPIO_Init+0x158>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <MX_GPIO_Init+0x158>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <MX_GPIO_Init+0x158>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_S_CS_Pin|SPI1_H_CS_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2103      	movs	r1, #3
 80010ea:	483b      	ldr	r0, [pc, #236]	; (80011d8 <MX_GPIO_Init+0x15c>)
 80010ec:	f004 fcfa 	bl	8005ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_868_Pin|LED_433_Pin|LED1_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80010f6:	4839      	ldr	r0, [pc, #228]	; (80011dc <MX_GPIO_Init+0x160>)
 80010f8:	f004 fcf4 	bl	8005ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	4837      	ldr	r0, [pc, #220]	; (80011e0 <MX_GPIO_Init+0x164>)
 8001104:	f004 fcee 	bl	8005ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <MX_GPIO_Init+0x168>)
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	482f      	ldr	r0, [pc, #188]	; (80011dc <MX_GPIO_Init+0x160>)
 800111e:	f004 fa7d 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pin : SP1_433_IrQ_Pin */
  GPIO_InitStruct.Pin = SP1_433_IrQ_Pin;
 8001122:	2310      	movs	r3, #16
 8001124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_GPIO_Init+0x16c>)
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SP1_433_IrQ_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	482a      	ldr	r0, [pc, #168]	; (80011e0 <MX_GPIO_Init+0x164>)
 8001136:	f004 fa71 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_S_CS_Pin SPI1_H_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_S_CS_Pin|SPI1_H_CS_Pin;
 800113a:	2303      	movs	r3, #3
 800113c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4619      	mov	r1, r3
 8001150:	4821      	ldr	r0, [pc, #132]	; (80011d8 <MX_GPIO_Init+0x15c>)
 8001152:	f004 fa63 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pin : SP1_868_IrQ_Pin */
  GPIO_InitStruct.Pin = SP1_868_IrQ_Pin;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_GPIO_Init+0x168>)
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SP1_868_IrQ_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	481b      	ldr	r0, [pc, #108]	; (80011d8 <MX_GPIO_Init+0x15c>)
 800116c:	f004 fa56 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_868_Pin LED_433_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED_868_Pin|LED_433_Pin|LED1_Pin;
 8001170:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_GPIO_Init+0x160>)
 800118a:	f004 fa47 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800118e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4619      	mov	r1, r3
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <MX_GPIO_Init+0x164>)
 80011a8:	f004 fa38 	bl	800561c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	200a      	movs	r0, #10
 80011b2:	f004 f9ee 	bl	8005592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011b6:	200a      	movs	r0, #10
 80011b8:	f004 fa07 	bl	80055ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2028      	movs	r0, #40	; 0x28
 80011c2:	f004 f9e6 	bl	8005592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c6:	2028      	movs	r0, #40	; 0x28
 80011c8:	f004 f9ff 	bl	80055ca <HAL_NVIC_EnableIRQ>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	10110000 	.word	0x10110000
 80011e8:	10210000 	.word	0x10210000

080011ec <Clock_Enable>:

/* USER CODE BEGIN 4 */
void Clock_Enable(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
  __GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <Clock_Enable+0x84>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <Clock_Enable+0x84>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <Clock_Enable+0x84>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <Clock_Enable+0x84>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <Clock_Enable+0x84>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <Clock_Enable+0x84>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <Clock_Enable+0x84>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <Clock_Enable+0x84>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <Clock_Enable+0x84>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __GPIOD_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <Clock_Enable+0x84>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <Clock_Enable+0x84>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <Clock_Enable+0x84>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <check_Rx_count>:
{
	Rx_count++;
}

FlagStatus check_Rx_count(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
	FlagStatus retval = RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
	if(Rx_count >= 100) //Debug value 100 for 10 secs. Final value 10000 for 10 secs.
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <check_Rx_count+0x2c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b63      	cmp	r3, #99	; 0x63
 8001284:	d904      	bls.n	8001290 <check_Rx_count+0x1c>
	{
		retval = SET;
 8001286:	2301      	movs	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
		Rx_count = 0;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <check_Rx_count+0x2c>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
	}
	return retval;
 8001290:	79fb      	ldrb	r3, [r7, #7]
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000040c 	.word	0x2000040c

080012a4 <reset_RX_count>:

void reset_RX_count(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	Rx_count = 0;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <reset_RX_count+0x14>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	2000040c 	.word	0x2000040c

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <time_out_rx>:

radio_select_t selectedBand;

/* Private function prototypes -----------------------------------------------*/
static int time_out_rx(fsm_t* this)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

	return ((Spirit1_RX_timeout)||(check_Rx_count()));
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <time_out_rx+0x2c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d104      	bne.n	80012e8 <time_out_rx+0x1c>
 80012de:	f7ff ffc9 	bl	8001274 <check_Rx_count>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <time_out_rx+0x20>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <time_out_rx+0x22>
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002da 	.word	0x200002da

080012fc <tx_flag>:

static int tx_flag(fsm_t* this)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	return tx_value;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <tx_flag+0x18>)
 8001306:	781b      	ldrb	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	200002db 	.word	0x200002db

08001318 <rx_flag>:

static int rx_flag(fsm_t* this)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	return xRxDoneFlag;
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <rx_flag+0x1c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200002d8 	.word	0x200002d8

08001338 <data_received>:


static int data_received(fsm_t* this)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(xRxFrame.Cmd == LED_TOGGLE) return 1;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <data_received+0x24>)
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	2bff      	cmp	r3, #255	; 0xff
 8001346:	d101      	bne.n	800134c <data_received+0x14>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <data_received+0x16>
	else return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200002e8 	.word	0x200002e8

08001360 <ack_received>:

static int ack_received(fsm_t* this)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    if(xRxFrame.Cmd == ACK_OK) return 1;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <ack_received+0x24>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <ack_received+0x14>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <ack_received+0x16>
    else return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200002e8 	.word	0x200002e8

08001388 <multicast>:

static int multicast(fsm_t* this)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	if ((dest_addr == MULTICAST_ADDRESS) || (dest_addr == BROADCAST_ADDRESS)) return 1;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <multicast+0x2c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2bee      	cmp	r3, #238	; 0xee
 8001396:	d003      	beq.n	80013a0 <multicast+0x18>
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <multicast+0x2c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2bff      	cmp	r3, #255	; 0xff
 800139e:	d101      	bne.n	80013a4 <multicast+0x1c>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <multicast+0x1e>
	else return 0;
 80013a4:	2300      	movs	r3, #0

}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000420 	.word	0x20000420

080013b8 <address_known>:

static int address_known(fsm_t* this)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	if ((dest_addr != MULTICAST_ADDRESS) && (dest_addr != BROADCAST_ADDRESS)) return 1;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <address_known+0x2c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2bee      	cmp	r3, #238	; 0xee
 80013c6:	d005      	beq.n	80013d4 <address_known+0x1c>
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <address_known+0x2c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2bff      	cmp	r3, #255	; 0xff
 80013ce:	d001      	beq.n	80013d4 <address_known+0x1c>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <address_known+0x1e>
	else return 0;
 80013d4:	2300      	movs	r3, #0

}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000420 	.word	0x20000420

080013e8 <tx_done>:

static int tx_done(fsm_t* this)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	return xTxDoneFlag;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <tx_done+0x1c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200002d9 	.word	0x200002d9

08001408 <switch_channel>:

static int switch_channel(fsm_t* this)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	return CCAxItFlag;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <switch_channel+0x18>)
 8001412:	781b      	ldrb	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000410 	.word	0x20000410

08001424 <ACK_confirm>:


static int ACK_confirm (fsm_t* this)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	return ACK_Process;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <ACK_confirm+0x18>)
 800142e:	781b      	ldrb	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000422 	.word	0x20000422

08001440 <EN_Rx>:


void EN_Rx(fsm_t* this)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

	selectedBand.conf_433 = !(selectedBand.conf_433);
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <EN_Rx+0x74>)
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <EN_Rx+0x74>)
 800145a:	705a      	strb	r2, [r3, #1]
	selectedBand.conf_868 = !(selectedBand.conf_868);
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <EN_Rx+0x74>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <EN_Rx+0x74>)
 800146e:	701a      	strb	r2, [r3, #0]

    AppliReceiveBuff(aReceiveBuffer, RxLength);
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <EN_Rx+0x78>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <EN_Rx+0x7c>)
 8001478:	f000 fa60 	bl	800193c <AppliReceiveBuff>
    Spirit1_RX_timeout = RESET;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <EN_Rx+0x80>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
    reset_RX_count();
 8001482:	f7ff ff0f 	bl	80012a4 <reset_RX_count>

    /*Default state LED ON*/
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <EN_Rx+0x84>)
 800148e:	f004 fb29 	bl	8005ae4 <HAL_GPIO_WritePin>

	xTxDoneFlag = RESET;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <EN_Rx+0x88>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 8001498:	2000      	movs	r0, #0
 800149a:	f003 fb1b 	bl	8004ad4 <RadioShieldLedOff>
#endif
    ACK_Process = RESET;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <EN_Rx+0x8c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
    IDLE_Process = SET;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <EN_Rx+0x90>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000430 	.word	0x20000430
 80014b8:	20000274 	.word	0x20000274
 80014bc:	20000278 	.word	0x20000278
 80014c0:	200002da 	.word	0x200002da
 80014c4:	40020800 	.word	0x40020800
 80014c8:	200002d9 	.word	0x200002d9
 80014cc:	20000422 	.word	0x20000422
 80014d0:	2000043c 	.word	0x2000043c

080014d4 <send_data>:

void send_data(fsm_t* this)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	CCAxItFlag = RESET;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <send_data+0x5c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]

	tx_value = RESET;
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <send_data+0x60>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
	xTxFrame.Cmd = LED_TOGGLE;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <send_data+0x64>)
 80014ea:	22ff      	movs	r2, #255	; 0xff
 80014ec:	70da      	strb	r2, [r3, #3]
	xTxFrame.CmdLen = 0x01;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <send_data+0x64>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	709a      	strb	r2, [r3, #2]
	xTxFrame.Cmdtag = txCounter++;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <send_data+0x68>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	b291      	uxth	r1, r2
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <send_data+0x68>)
 80014fe:	8011      	strh	r1, [r2, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <send_data+0x64>)
 8001504:	701a      	strb	r2, [r3, #0]
	xTxFrame.CmdType = APPLI_CMD;
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <send_data+0x64>)
 8001508:	2211      	movs	r2, #17
 800150a:	705a      	strb	r2, [r3, #1]
	xTxFrame.DataBuff = aTransmitBuffer;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <send_data+0x64>)
 800150e:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <send_data+0x6c>)
 8001510:	609a      	str	r2, [r3, #8]
	xTxFrame.DataLen = TxLength;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <send_data+0x70>)
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <send_data+0x64>)
 8001518:	711a      	strb	r2, [r3, #4]
	AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <send_data+0x64>)
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <send_data+0x64>)
 8001522:	f000 f9b1 	bl	8001888 <AppliSendBuff>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000410 	.word	0x20000410
 8001534:	200002db 	.word	0x200002db
 8001538:	200002dc 	.word	0x200002dc
 800153c:	20000356 	.word	0x20000356
 8001540:	20000088 	.word	0x20000088
 8001544:	20000084 	.word	0x20000084

08001548 <read_RX_Data>:

void read_RX_Data(fsm_t* this)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	Spirit1GetRxPacket(aReceiveBuffer,&RxLength);
 8001550:	4917      	ldr	r1, [pc, #92]	; (80015b0 <read_RX_Data+0x68>)
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <read_RX_Data+0x6c>)
 8001554:	f003 fa36 	bl	80049c4 <Spirit1GetRxPacket>

	xRxFrame.Cmd = aReceiveBuffer[0];
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <read_RX_Data+0x6c>)
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <read_RX_Data+0x70>)
 800155e:	70da      	strb	r2, [r3, #3]
	xRxFrame.CmdLen = aReceiveBuffer[1];
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <read_RX_Data+0x6c>)
 8001562:	785a      	ldrb	r2, [r3, #1]
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <read_RX_Data+0x70>)
 8001566:	709a      	strb	r2, [r3, #2]
	xRxFrame.Cmdtag = aReceiveBuffer[2];
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <read_RX_Data+0x6c>)
 800156a:	789a      	ldrb	r2, [r3, #2]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <read_RX_Data+0x70>)
 800156e:	701a      	strb	r2, [r3, #0]
	xRxFrame.CmdType = aReceiveBuffer[3];
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <read_RX_Data+0x6c>)
 8001572:	78da      	ldrb	r2, [r3, #3]
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <read_RX_Data+0x70>)
 8001576:	705a      	strb	r2, [r3, #1]
	xRxFrame.DataLen = aReceiveBuffer[4];
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <read_RX_Data+0x6c>)
 800157a:	791a      	ldrb	r2, [r3, #4]
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <read_RX_Data+0x70>)
 800157e:	711a      	strb	r2, [r3, #4]

	/*FIXED BUG IN DATA RECEPTION*/
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 8001580:	2305      	movs	r3, #5
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e008      	b.n	8001598 <read_RX_Data+0x50>
	{
	  temp_DataBuff[xIndex] = aReceiveBuffer[xIndex];
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <read_RX_Data+0x6c>)
 800158c:	5c89      	ldrb	r1, [r1, r2]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <read_RX_Data+0x74>)
 8001590:	54d1      	strb	r1, [r2, r3]
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	3301      	adds	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <read_RX_Data+0x68>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3f1      	bcc.n	8001586 <read_RX_Data+0x3e>
	}

	xRxFrame.DataBuff= temp_DataBuff;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <read_RX_Data+0x70>)
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <read_RX_Data+0x74>)
 80015a6:	609a      	str	r2, [r3, #8]
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000274 	.word	0x20000274
 80015b4:	20000278 	.word	0x20000278
 80015b8:	200002e8 	.word	0x200002e8
 80015bc:	20000358 	.word	0x20000358

080015c0 <read_address>:

void read_address(fsm_t* this)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 80015c8:	f001 fbc8 	bl	8002d5c <SpiritPktCommonGetReceivedDestAddress>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <read_address+0x1c>)
 80015d2:	701a      	strb	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000420 	.word	0x20000420

080015e0 <read_ACK_address>:

void read_ACK_address(fsm_t* this)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 80015e8:	f001 fbb8 	bl	8002d5c <SpiritPktCommonGetReceivedDestAddress>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <read_ACK_address+0x24>)
 80015f2:	701a      	strb	r2, [r3, #0]
    ACK_Process = SET;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <read_ACK_address+0x28>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000420 	.word	0x20000420
 8001608:	20000422 	.word	0x20000422

0800160c <send_ACK>:

void send_ACK(fsm_t* this)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	  xTxFrame.Cmd = ACK_OK;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <send_ACK+0x4c>)
 8001616:	2201      	movs	r2, #1
 8001618:	70da      	strb	r2, [r3, #3]
	  xTxFrame.CmdLen = 0x01;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <send_ACK+0x4c>)
 800161c:	2201      	movs	r2, #1
 800161e:	709a      	strb	r2, [r3, #2]
	  xTxFrame.Cmdtag = xRxFrame.Cmdtag;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <send_ACK+0x50>)
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <send_ACK+0x4c>)
 8001626:	701a      	strb	r2, [r3, #0]
	  xTxFrame.CmdType = APPLI_CMD;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <send_ACK+0x4c>)
 800162a:	2211      	movs	r2, #17
 800162c:	705a      	strb	r2, [r3, #1]
	  xTxFrame.DataBuff = aTransmitBuffer;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <send_ACK+0x4c>)
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <send_ACK+0x54>)
 8001632:	609a      	str	r2, [r3, #8]
	  xTxFrame.DataLen = TxLength;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <send_ACK+0x58>)
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <send_ACK+0x4c>)
 800163a:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(DELAY_TX_LED_GLOW);
 800163c:	20c8      	movs	r0, #200	; 0xc8
 800163e:	f003 fe89 	bl	8005354 <HAL_Delay>

	  AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <send_ACK+0x4c>)
 8001644:	791b      	ldrb	r3, [r3, #4]
 8001646:	4619      	mov	r1, r3
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <send_ACK+0x4c>)
 800164a:	f000 f91d 	bl	8001888 <AppliSendBuff>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200002dc 	.word	0x200002dc
 800165c:	200002e8 	.word	0x200002e8
 8001660:	20000088 	.word	0x20000088
 8001664:	20000084 	.word	0x20000084

08001668 <TxFlag433>:



/*LED IN/OUT STATE MACHINE*/
static int TxFlag433(fsm_t* this)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	return (tx_value && selectedBand.conf_433);
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <TxFlag433+0x2c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <TxFlag433+0x1c>
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <TxFlag433+0x30>)
 800167a:	785b      	ldrb	r3, [r3, #1]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <TxFlag433+0x1c>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <TxFlag433+0x1e>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200002db 	.word	0x200002db
 8001698:	20000430 	.word	0x20000430

0800169c <RxFlag433>:

static int RxFlag433(fsm_t* this)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	return (xRxDoneFlag && selectedBand.conf_433);
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <RxFlag433+0x2c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <RxFlag433+0x1e>
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <RxFlag433+0x30>)
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <RxFlag433+0x1e>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <RxFlag433+0x20>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	200002d8 	.word	0x200002d8
 80016cc:	20000430 	.word	0x20000430

080016d0 <TxFlag868>:

static int TxFlag868(fsm_t* this)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	return (tx_value && selectedBand.conf_868);
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <TxFlag868+0x2c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <TxFlag868+0x1c>
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <TxFlag868+0x30>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <TxFlag868+0x1c>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <TxFlag868+0x1e>
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200002db 	.word	0x200002db
 8001700:	20000430 	.word	0x20000430

08001704 <RxFlag868>:

static int RxFlag868(fsm_t* this)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	return (xRxDoneFlag && selectedBand.conf_868);
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <RxFlag868+0x2c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <RxFlag868+0x1e>
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <RxFlag868+0x30>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <RxFlag868+0x1e>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <RxFlag868+0x20>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	200002d8 	.word	0x200002d8
 8001734:	20000430 	.word	0x20000430

08001738 <LED_ON>:


void LED_ON(fsm_t* this)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

	for(; ledToggleCtr<5; ledToggleCtr++)
 8001744:	e021      	b.n	800178a <LED_ON+0x52>
	{
		if		(selectedBand.conf_433) HAL_GPIO_TogglePin(LED_433_GPIO_Port, LED_433_Pin);
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <LED_ON+0x60>)
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <LED_ON+0x20>
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	4812      	ldr	r0, [pc, #72]	; (800179c <LED_ON+0x64>)
 8001752:	f004 f9e0 	bl	8005b16 <HAL_GPIO_TogglePin>
 8001756:	e012      	b.n	800177e <LED_ON+0x46>
		else if (selectedBand.conf_868) HAL_GPIO_TogglePin(LED_868_GPIO_Port, LED_868_Pin);
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <LED_ON+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <LED_ON+0x32>
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <LED_ON+0x64>)
 8001764:	f004 f9d7 	bl	8005b16 <HAL_GPIO_TogglePin>
 8001768:	e009      	b.n	800177e <LED_ON+0x46>
		else
		{
			/*BOTH LEDS ON IF ERROR*/
			HAL_GPIO_WritePin(LED_433_GPIO_Port, LED_433_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <LED_ON+0x64>)
 8001770:	f004 f9b8 	bl	8005ae4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_868_GPIO_Port, LED_868_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <LED_ON+0x64>)
 800177a:	f004 f9b3 	bl	8005ae4 <HAL_GPIO_WritePin>
		}
		HAL_Delay(DELAY_RX_LED_TOGGLE);
 800177e:	2064      	movs	r0, #100	; 0x64
 8001780:	f003 fde8 	bl	8005354 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	3301      	adds	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d9da      	bls.n	8001746 <LED_ON+0xe>
	}
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000430 	.word	0x20000430
 800179c:	40020800 	.word	0x40020800

080017a0 <LED_Toggle>:

void LED_Toggle(fsm_t* this)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

	for(; ledToggleCtr<5; ledToggleCtr++)
 80017ac:	e02c      	b.n	8001808 <LED_Toggle+0x68>
	{
		if (xRxDoneFlag)
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <LED_Toggle+0x7c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01f      	beq.n	80017f8 <LED_Toggle+0x58>
		{
			if		(selectedBand.conf_433) HAL_GPIO_TogglePin(LED_433_GPIO_Port, LED_433_Pin);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <LED_Toggle+0x80>)
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <LED_Toggle+0x2a>
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <LED_Toggle+0x84>)
 80017c4:	f004 f9a7 	bl	8005b16 <HAL_GPIO_TogglePin>
 80017c8:	e012      	b.n	80017f0 <LED_Toggle+0x50>
			else if (selectedBand.conf_868) HAL_GPIO_TogglePin(LED_868_GPIO_Port, LED_868_Pin);
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <LED_Toggle+0x80>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <LED_Toggle+0x3c>
 80017d2:	2140      	movs	r1, #64	; 0x40
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <LED_Toggle+0x84>)
 80017d6:	f004 f99e 	bl	8005b16 <HAL_GPIO_TogglePin>
 80017da:	e009      	b.n	80017f0 <LED_Toggle+0x50>
			else
			{
				/*BOTH LEDS ON IF ERROR*/
				HAL_GPIO_WritePin(LED_433_GPIO_Port, LED_433_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	4810      	ldr	r0, [pc, #64]	; (8001824 <LED_Toggle+0x84>)
 80017e2:	f004 f97f 	bl	8005ae4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_868_GPIO_Port, LED_868_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2140      	movs	r1, #64	; 0x40
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <LED_Toggle+0x84>)
 80017ec:	f004 f97a 	bl	8005ae4 <HAL_GPIO_WritePin>
			}
			HAL_Delay(DELAY_RX_LED_TOGGLE);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f003 fdaf 	bl	8005354 <HAL_Delay>
 80017f6:	e004      	b.n	8001802 <LED_Toggle+0x62>
		}
		else
		{
			 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80017f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <LED_Toggle+0x84>)
 80017fe:	f004 f98a 	bl	8005b16 <HAL_GPIO_TogglePin>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	3301      	adds	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d9cf      	bls.n	80017ae <LED_Toggle+0xe>
		}
	}
    xRxDoneFlag = RESET;
 800180e:	4b03      	ldr	r3, [pc, #12]	; (800181c <LED_Toggle+0x7c>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200002d8 	.word	0x200002d8
 8001820:	20000430 	.word	0x20000430
 8001824:	40020800 	.word	0x40020800

08001828 <HAL_Radio_Init>:
* @brief  Initializes RF Transceiver's HAL.
* @param  None
* @retval None.
*/
void HAL_Radio_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  pRadioDriver = &radio_cb;
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <HAL_Radio_Init+0x18>)
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <HAL_Radio_Init+0x1c>)
 8001830:	601a      	str	r2, [r3, #0]
  pRadioDriver->Init( ); 
 8001832:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_Radio_Init+0x18>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4798      	blx	r3
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000428 	.word	0x20000428
 8001844:	20000000 	.word	0x20000000

08001848 <APP_Process>:
*         uint8_t* pRxBuff = Pointer to aReceiveBuffer
*         uint8_t cRxlen= length of aReceiveBuffer
* @retval None.
*/
void APP_Process(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	fsm_fire(radio_fsm);
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <APP_Process+0x30>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fadb 	bl	8000e0c <fsm_fire>
	fsm_fire(LED433_fsm);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <APP_Process+0x34>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fad6 	bl	8000e0c <fsm_fire>
	fsm_fire(LED868_fsm);
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <APP_Process+0x38>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fad1 	bl	8000e0c <fsm_fire>
	fsm_fire(LED1_fsm);
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <APP_Process+0x3c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff facc 	bl	8000e0c <fsm_fire>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000438 	.word	0x20000438
 800187c:	2000042c 	.word	0x2000042c
 8001880:	20000434 	.word	0x20000434
 8001884:	20000414 	.word	0x20000414

08001888 <AppliSendBuff>:
* @param  AppliFrame_t *xTxFrame = Pointer to AppliFrame_t structure 
*         uint8_t cTxlen = Length of aTransmitBuffer
* @retval None
*/
void AppliSendBuff(AppliFrame_t *xTxFrame, uint8_t cTxlen)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  uint8_t xIndex = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]
  uint8_t trxLength = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	73bb      	strb	r3, [r7, #14]
  
#ifdef USE_BASIC_PROTOCOL
  SpiritPktBasicAddressesInit(&xAddressInit);
 800189c:	4823      	ldr	r0, [pc, #140]	; (800192c <AppliSendBuff+0xa4>)
 800189e:	f001 f929 	bl	8002af4 <SpiritPktBasicAddressesInit>
#endif  
  
  TxFrameBuff[0] = xTxFrame->Cmd;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	78da      	ldrb	r2, [r3, #3]
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <AppliSendBuff+0xa8>)
 80018a8:	701a      	strb	r2, [r3, #0]
  TxFrameBuff[1] = xTxFrame->CmdLen;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	789a      	ldrb	r2, [r3, #2]
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <AppliSendBuff+0xa8>)
 80018b0:	705a      	strb	r2, [r3, #1]
  TxFrameBuff[2] = xTxFrame->Cmdtag;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <AppliSendBuff+0xa8>)
 80018b8:	709a      	strb	r2, [r3, #2]
  TxFrameBuff[3] = xTxFrame->CmdType;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	785a      	ldrb	r2, [r3, #1]
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <AppliSendBuff+0xa8>)
 80018c0:	70da      	strb	r2, [r3, #3]
  TxFrameBuff[4] = xTxFrame->DataLen;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791a      	ldrb	r2, [r3, #4]
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <AppliSendBuff+0xa8>)
 80018c8:	711a      	strb	r2, [r3, #4]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 80018ca:	e00b      	b.n	80018e4 <AppliSendBuff+0x5c>
  {
    TxFrameBuff[xIndex+5] =  xTxFrame->DataBuff[xIndex];
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	441a      	add	r2, r3
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	3305      	adds	r3, #5
 80018d8:	7811      	ldrb	r1, [r2, #0]
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <AppliSendBuff+0xa8>)
 80018dc:	54d1      	strb	r1, [r2, r3]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	3301      	adds	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	791b      	ldrb	r3, [r3, #4]
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d3ee      	bcc.n	80018cc <AppliSendBuff+0x44>
  }

  trxLength = (xIndex+5);
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3305      	adds	r3, #5
 80018f2:	73bb      	strb	r3, [r7, #14]

  /* Spirit IRQs disable */
  Spirit1DisableIrq();
 80018f4:	f003 f813 	bl	800491e <Spirit1DisableIrq>
  /* Spirit IRQs enable */
  Spirit1EnableTxIrq();
 80018f8:	f002 fff8 	bl	80048ec <Spirit1EnableTxIrq>
  /* payload length config */
  Spirit1SetPayloadlength(trxLength);
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 ffd9 	bl	80048b6 <Spirit1SetPayloadlength>
  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8001904:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001934 <AppliSendBuff+0xac>
 8001908:	f003 f810 	bl	800492c <Spirit1SetRxTimeout>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 800190c:	f003 f8ac 	bl	8004a68 <Spirit1ClearIRQ>
  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <AppliSendBuff+0xb0>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 ffdc 	bl	80048d2 <Spirit1SetDestinationAddress>
  /* send the TX command */
  Spirit1StartTx(TxFrameBuff, trxLength);
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	4619      	mov	r1, r3
 800191e:	4804      	ldr	r0, [pc, #16]	; (8001930 <AppliSendBuff+0xa8>)
 8001920:	f003 f86c 	bl	80049fc <Spirit1StartTx>
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000074 	.word	0x20000074
 8001930:	200002f4 	.word	0x200002f4
 8001934:	00000000 	.word	0x00000000
 8001938:	20000421 	.word	0x20000421

0800193c <AppliReceiveBuff>:
* @param  uint8_t *RxFrameBuff = Pointer to ReceiveBuffer
*         uint8_t cRxlen = length of ReceiveBuffer
* @retval None
*/
void AppliReceiveBuff(uint8_t *RxFrameBuff, uint8_t cRxlen)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
  /*float rRSSIValue = 0;*/
//  SW_RX_timeout = SET;
  exitCounter = TIME_TO_EXIT_RX;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <AppliReceiveBuff+0x4c>)
 800194a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800194e:	801a      	strh	r2, [r3, #0]
  SpiritPktBasicAddressesInit(&xAddressInit);
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <AppliReceiveBuff+0x50>)
 8001952:	f001 f8cf 	bl	8002af4 <SpiritPktBasicAddressesInit>

  Spirit1DisableIrq();
 8001956:	f002 ffe2 	bl	800491e <Spirit1DisableIrq>
  Spirit1EnableRxIrq();
 800195a:	f002 ffcf 	bl	80048fc <Spirit1EnableRxIrq>

  /* payload length config */
  Spirit1SetPayloadlength(PAYLOAD_LEN);
 800195e:	2019      	movs	r0, #25
 8001960:	f002 ffa9 	bl	80048b6 <Spirit1SetPayloadlength>

  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8001964:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001990 <AppliReceiveBuff+0x54>
 8001968:	f002 ffe0 	bl	800492c <Spirit1SetRxTimeout>

  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <AppliReceiveBuff+0x58>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 ffae 	bl	80048d2 <Spirit1SetDestinationAddress>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 8001976:	f003 f877 	bl	8004a68 <Spirit1ClearIRQ>
  /* RX command */ 
  Spirit1StartRx();
 800197a:	f003 f80d 	bl	8004998 <Spirit1StartRx>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000354 	.word	0x20000354
 800198c:	20000074 	.word	0x20000074
 8001990:	00000000 	.word	0x00000000
 8001994:	20000421 	.word	0x20000421

08001998 <APP_Init>:
* 		  communication
* @param  None
* @retval None
*/
void APP_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  DestinationAddr = DESTINATION_ADDRESS;
 800199c:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <APP_Init+0xb8>)
 800199e:	2244      	movs	r2, #68	; 0x44
 80019a0:	701a      	strb	r2, [r3, #0]

  pRadioDriver->GpioIrq(&xGpioIRQ); //Set SPIRIT1_GPIO3 as EXTI to notice tx/rx flags.
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <APP_Init+0xbc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	482b      	ldr	r0, [pc, #172]	; (8001a58 <APP_Init+0xc0>)
 80019aa:	4798      	blx	r3

  /*Configure 868 transceiver*/
  selectedBand.conf_868 = SET;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <APP_Init+0xc4>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
  selectedBand.conf_433 = RESET;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <APP_Init+0xc4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	705a      	strb	r2, [r3, #1]
  Spirit1RadioInit(&xRadioInit);
 80019b8:	4829      	ldr	r0, [pc, #164]	; (8001a60 <APP_Init+0xc8>)
 80019ba:	f002 ff56 	bl	800486a <Spirit1RadioInit>
  Spirit1SetPower(POWER_INDEX, POWER_DBM);
 80019be:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001a64 <APP_Init+0xcc>
 80019c2:	2007      	movs	r0, #7
 80019c4:	f002 ff5c 	bl	8004880 <Spirit1SetPower>
  Spirit1PacketConfig();
 80019c8:	f002 ff6f 	bl	80048aa <Spirit1PacketConfig>
  Spirit1EnableSQI();
 80019cc:	f002 ffd9 	bl	8004982 <Spirit1EnableSQI>
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80019d0:	f06f 0081 	mvn.w	r0, #129	; 0x81
 80019d4:	f001 fa46 	bl	8002e64 <SpiritQiSetRssiThresholddBm>

  /*Configure 433 transceiver
   * It cant be tested on evaluation board*/
  selectedBand.conf_868 = RESET;
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <APP_Init+0xc4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
  selectedBand.conf_433 = SET;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <APP_Init+0xc4>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	705a      	strb	r2, [r3, #1]
  Spirit1RadioInit(&xRadioInit);
 80019e4:	481e      	ldr	r0, [pc, #120]	; (8001a60 <APP_Init+0xc8>)
 80019e6:	f002 ff40 	bl	800486a <Spirit1RadioInit>
  Spirit1SetPower(POWER_INDEX, POWER_DBM);
 80019ea:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001a64 <APP_Init+0xcc>
 80019ee:	2007      	movs	r0, #7
 80019f0:	f002 ff46 	bl	8004880 <Spirit1SetPower>
  Spirit1PacketConfig();
 80019f4:	f002 ff59 	bl	80048aa <Spirit1PacketConfig>
  Spirit1EnableSQI();
 80019f8:	f002 ffc3 	bl	8004982 <Spirit1EnableSQI>
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80019fc:	f06f 0081 	mvn.w	r0, #129	; 0x81
 8001a00:	f001 fa30 	bl	8002e64 <SpiritQiSetRssiThresholddBm>


  radio_fsm  = fsm_new (radio_states);
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <APP_Init+0xd0>)
 8001a06:	f7ff f9dd 	bl	8000dc4 <fsm_new>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <APP_Init+0xd4>)
 8001a0e:	601a      	str	r2, [r3, #0]
  LED433_fsm = fsm_new (LED_433_states);
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <APP_Init+0xd8>)
 8001a12:	f7ff f9d7 	bl	8000dc4 <fsm_new>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <APP_Init+0xdc>)
 8001a1a:	601a      	str	r2, [r3, #0]
  LED868_fsm = fsm_new (LED_868_states);
 8001a1c:	4816      	ldr	r0, [pc, #88]	; (8001a78 <APP_Init+0xe0>)
 8001a1e:	f7ff f9d1 	bl	8000dc4 <fsm_new>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <APP_Init+0xe4>)
 8001a26:	601a      	str	r2, [r3, #0]
  LED1_fsm   = fsm_new (LED1_states);
 8001a28:	4815      	ldr	r0, [pc, #84]	; (8001a80 <APP_Init+0xe8>)
 8001a2a:	f7ff f9cb 	bl	8000dc4 <fsm_new>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <APP_Init+0xec>)
 8001a32:	601a      	str	r2, [r3, #0]

  /*868MHz band as default band*/
  selectedBand.conf_433 = RESET;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <APP_Init+0xc4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	705a      	strb	r2, [r3, #1]
  selectedBand.conf_868 = SET;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <APP_Init+0xc4>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]

  CCAxItFlag = RESET;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <APP_Init+0xf0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
  CCAxItCount = 0;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <APP_Init+0xf4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000421 	.word	0x20000421
 8001a54:	20000428 	.word	0x20000428
 8001a58:	20000044 	.word	0x20000044
 8001a5c:	20000430 	.word	0x20000430
 8001a60:	20000048 	.word	0x20000048
 8001a64:	4139999a 	.word	0x4139999a
 8001a68:	2000009c 	.word	0x2000009c
 8001a6c:	20000438 	.word	0x20000438
 8001a70:	2000015c 	.word	0x2000015c
 8001a74:	2000042c 	.word	0x2000042c
 8001a78:	2000018c 	.word	0x2000018c
 8001a7c:	20000434 	.word	0x20000434
 8001a80:	200001bc 	.word	0x200001bc
 8001a84:	20000414 	.word	0x20000414
 8001a88:	20000410 	.word	0x20000410
 8001a8c:	20000432 	.word	0x20000432

08001a90 <BasicProtocolInit>:
* @brief  This function initializes the BASIC Packet handler of S2LP
* @param  None
* @retval None
*/
void BasicProtocolInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* RAdio Packet config */
	SpiritPktBasicInit(&xBasicInit);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <BasicProtocolInit+0x10>)
 8001a96:	f000 ff55 	bl	8002944 <SpiritPktBasicInit>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000064 	.word	0x20000064

08001aa4 <bandSelect>:

radio_select_t bandSelect(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
	return selectedBand;
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <bandSelect+0x28>)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	801a      	strh	r2, [r3, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	793a      	ldrb	r2, [r7, #4]
 8001ab6:	f362 0307 	bfi	r3, r2, #0, #8
 8001aba:	797a      	ldrb	r2, [r7, #5]
 8001abc:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	20000430 	.word	0x20000430

08001ad0 <P2PInterruptHandler>:
*         to manage the S2LP IRQ configured to be notified on the S2LP GPIO_3.
* @param  None
* @retval None
*/
void P2PInterruptHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0

  SpiritIrqGetStatus(&xIrqStatus);
 8001ad4:	483f      	ldr	r0, [pc, #252]	; (8001bd4 <P2PInterruptHandler+0x104>)
 8001ad6:	f000 fca5 	bl	8002424 <SpiritIrqGetStatus>
  
  
  /* Check the SPIRIT1 TX_DATA_SENT IRQ flag */
  if((xIrqStatus.IRQ_TX_DATA_SENT) ||(xIrqStatus.IRQ_MAX_BO_CCA_REACH))
 8001ada:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <P2PInterruptHandler+0x104>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <P2PInterruptHandler+0x26>
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <P2PInterruptHandler+0x104>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d047      	beq.n	8001b86 <P2PInterruptHandler+0xb6>
  {

	xTxDoneFlag = SET;
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <P2PInterruptHandler+0x108>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
	/*This transceiver returns to RX state,
	 * it needs to launch READY state again.*/
	SpiritCsma(S_DISABLE);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 fb77 	bl	80021f0 <SpiritCsma>
	SpiritRadioPersistenRx(S_ENABLE);	/*To comeback to RX state*/
 8001b02:	2001      	movs	r0, #1
 8001b04:	f002 fb20 	bl	8004148 <SpiritRadioPersistenRx>
	SpiritRadioCsBlanking(S_ENABLE);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f002 faed 	bl	80040e8 <SpiritRadioCsBlanking>

	SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001b0e:	f06f 0081 	mvn.w	r0, #129	; 0x81
 8001b12:	f001 f9a7 	bl	8002e64 <SpiritQiSetRssiThresholddBm>

	SpiritCmdStrobeSabort();
 8001b16:	2067      	movs	r0, #103	; 0x67
 8001b18:	f000 faee 	bl	80020f8 <SpiritCmdStrobeCommand>

	if(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <P2PInterruptHandler+0x104>)
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d02d      	beq.n	8001b86 <P2PInterruptHandler+0xb6>
	{
		if(CCAxItCount < CCA_MAX_IT)
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <P2PInterruptHandler+0x10c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d820      	bhi.n	8001b74 <P2PInterruptHandler+0xa4>
		{
			selectedBand.conf_433 = !(selectedBand.conf_433);
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <P2PInterruptHandler+0x110>)
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf0c      	ite	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <P2PInterruptHandler+0x110>)
 8001b44:	705a      	strb	r2, [r3, #1]
			selectedBand.conf_868 = !(selectedBand.conf_868);
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <P2PInterruptHandler+0x110>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf0c      	ite	eq
 8001b4e:	2301      	moveq	r3, #1
 8001b50:	2300      	movne	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <P2PInterruptHandler+0x110>)
 8001b58:	701a      	strb	r2, [r3, #0]
			CCAxItFlag = SET;
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <P2PInterruptHandler+0x114>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
			xTxDoneFlag = RESET;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <P2PInterruptHandler+0x108>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
			CCAxItCount++;
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <P2PInterruptHandler+0x10c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <P2PInterruptHandler+0x10c>)
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e008      	b.n	8001b86 <P2PInterruptHandler+0xb6>
		}
		else
		{
			CCAxItCount = 0;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <P2PInterruptHandler+0x10c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
			CCAxItFlag = RESET;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <P2PInterruptHandler+0x114>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
			xTxDoneFlag = SET;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <P2PInterruptHandler+0x108>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
		}
	}
  }
  
  /* Check the S2LP RX_DATA_READY IRQ flag */
  if((xIrqStatus.IRQ_RX_DATA_READY))
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <P2PInterruptHandler+0x104>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <P2PInterruptHandler+0xca>
  {
    xRxDoneFlag = SET;   
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <P2PInterruptHandler+0x118>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
  }
  
  /* Restart receive after receive timeout*/
  if (xIrqStatus.IRQ_RX_TIMEOUT)
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <P2PInterruptHandler+0x104>)
 8001b9c:	78db      	ldrb	r3, [r3, #3]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <P2PInterruptHandler+0xe8>
  {
    Spirit1_RX_timeout = SET; 
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <P2PInterruptHandler+0x11c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeRx();
 8001bae:	f000 fe99 	bl	80028e4 <SpiritManagementWaCmdStrobeRx>
 8001bb2:	2061      	movs	r0, #97	; 0x61
 8001bb4:	f000 faa0 	bl	80020f8 <SpiritCmdStrobeCommand>
    
  }
  
  /* Check the SPIRIT1 RX_DATA_DISC IRQ flag */
  if(xIrqStatus.IRQ_RX_DATA_DISC)
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <P2PInterruptHandler+0x104>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <P2PInterruptHandler+0x100>
  {      
    /* RX command - to ensure the device will be ready for the next reception */
	  SpiritCmdStrobeRx();
 8001bc6:	f000 fe8d 	bl	80028e4 <SpiritManagementWaCmdStrobeRx>
 8001bca:	2061      	movs	r0, #97	; 0x61
 8001bcc:	f000 fa94 	bl	80020f8 <SpiritCmdStrobeCommand>
    
  }  
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000418 	.word	0x20000418
 8001bd8:	200002d9 	.word	0x200002d9
 8001bdc:	20000432 	.word	0x20000432
 8001be0:	20000430 	.word	0x20000430
 8001be4:	20000410 	.word	0x20000410
 8001be8:	200002d8 	.word	0x200002d8
 8001bec:	200002da 	.word	0x200002da

08001bf0 <HAL_GPIO_EXTI_Callback>:
* @param uint16_t GPIO_Pin
* @retval None
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
  PushButtonStatusData = RESET;
  wakeupCounter = LPM_WAKEUP_TIME; 
  dataSendCounter = DATA_SEND_TIME;
  dataSendCounter++;
#endif
	if(GPIO_Pin==USER_BUTTON_PIN)
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c00:	d110      	bne.n	8001c24 <HAL_GPIO_EXTI_Callback+0x34>
	{

	/*It will be an USB interrupt, not a button*/
	tx_value = SET;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x48>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]

	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 8001c08:	e008      	b.n	8001c1c <HAL_GPIO_EXTI_Callback+0x2c>
	{
		aTransmitBuffer[i] = i*2;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	0052      	lsls	r2, r2, #1
 8001c10:	b2d1      	uxtb	r1, r2
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c14:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b13      	cmp	r3, #19
 8001c20:	d9f3      	bls.n	8001c0a <HAL_GPIO_EXTI_Callback+0x1a>
      P2PInterruptHandler();
    }
  
#endif
  
}
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_EXTI_Callback+0x3e>
    if(GPIO_Pin==RADIO_GPIO_3_EXTI_LINE)
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	2b80      	cmp	r3, #128	; 0x80
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_EXTI_Callback+0x3e>
      P2PInterruptHandler();
 8001c2a:	f7ff ff51 	bl	8001ad0 <P2PInterruptHandler>
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200002db 	.word	0x200002db
 8001c3c:	20000088 	.word	0x20000088

08001c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <HAL_SPI_MspInit+0xa4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d13b      	bne.n	8001d2a <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_SPI_MspInit+0xa8>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_SPI_MspInit+0xa8>)
 8001cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_SPI_MspInit+0xa8>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_SPI_MspInit+0xa8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_SPI_MspInit+0xa8>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_SPI_MspInit+0xa8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cea:	2320      	movs	r3, #32
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <HAL_SPI_MspInit+0xac>)
 8001d06:	f003 fc89 	bl	800561c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <HAL_SPI_MspInit+0xac>)
 8001d26:	f003 fc79 	bl	800561c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40013000 	.word	0x40013000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_SPI_MspDeInit+0x30>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d109      	bne.n	8001d66 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_SPI_MspDeInit+0x34>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_SPI_MspDeInit+0x34>)
 8001d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001d5e:	21e0      	movs	r1, #224	; 0xe0
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_SPI_MspDeInit+0x38>)
 8001d62:	f003 fddd 	bl	8005920 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40013000 	.word	0x40013000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d10d      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_TIM_Base_MspInit+0x3c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_TIM_Base_MspInit+0x3c>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_TIM_Base_MspInit+0x3c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e10:	f003 fa80 	bl	8005314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e1c:	2010      	movs	r0, #16
 8001e1e:	f003 fe95 	bl	8005b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e2e:	f003 fe8d 	bl	8005b4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e36:	f003 fe89 	bl	8005b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f005 f9b2 	bl	80071d8 <__errno>
 8001e74:	4602      	mov	r2, r0
 8001e76:	230c      	movs	r3, #12
 8001e78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20010000 	.word	0x20010000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	2000035c 	.word	0x2000035c
 8001ea8:	20000450 	.word	0x20000450

08001eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <SystemInit+0x28>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <SystemInit+0x28>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SystemInit+0x28>)
 8001ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ede:	e003      	b.n	8001ee8 <LoopCopyDataInit>

08001ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ee6:	3104      	adds	r1, #4

08001ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ef0:	d3f6      	bcc.n	8001ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ef4:	e002      	b.n	8001efc <LoopFillZerobss>

08001ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ef8:	f842 3b04 	str.w	r3, [r2], #4

08001efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f00:	d3f9      	bcc.n	8001ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ffd3 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f005 f96d 	bl	80071e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe ffaf 	bl	8000e6c <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001f14:	08007564 	.word	0x08007564
  ldr  r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f1c:	20000258 	.word	0x20000258
  ldr  r2, =_sbss
 8001f20:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 8001f24:	2000044c 	.word	0x2000044c

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>
	...

08001f2c <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001f36:	f107 030f 	add.w	r3, r7, #15
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2050      	movs	r0, #80	; 0x50
 8001f40:	f002 fef4 	bl	8004d2c <RadioSpiReadRegisters>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <SpiritCalibrationVco+0x6c>)
 8001f48:	b212      	sxth	r2, r2
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	7019      	strb	r1, [r3, #0]
 8001f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f52:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d105      	bne.n	8001f66 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e004      	b.n	8001f70 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	f023 0302 	bic.w	r3, r3, #2
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001f70:	f107 030f 	add.w	r3, r7, #15
 8001f74:	461a      	mov	r2, r3
 8001f76:	2101      	movs	r1, #1
 8001f78:	2050      	movs	r0, #80	; 0x50
 8001f7a:	f002 fe2b 	bl	8004bd4 <RadioSpiWriteRegisters>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SpiritCalibrationVco+0x6c>)
 8001f82:	b212      	sxth	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	7019      	strb	r1, [r3, #0]
 8001f88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f8c:	705a      	strb	r2, [r3, #1]

}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000440 	.word	0x20000440

08001f9c <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	20e5      	movs	r0, #229	; 0xe5
 8001faa:	f002 febf 	bl	8004d2c <RadioSpiReadRegisters>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <SpiritCalibrationGetVcoCalData+0x34>)
 8001fb2:	b212      	sxth	r2, r2
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	7019      	strb	r1, [r3, #0]
 8001fb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fbc:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc4:	b2db      	uxtb	r3, r3

}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000440 	.word	0x20000440

08001fd4 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001fde:	f107 030f 	add.w	r3, r7, #15
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	206e      	movs	r0, #110	; 0x6e
 8001fe8:	f002 fea0 	bl	8004d2c <RadioSpiReadRegisters>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001ff0:	b212      	sxth	r2, r2
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	7019      	strb	r1, [r3, #0]
 8001ff6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ffa:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002002:	b2db      	uxtb	r3, r3
 8002004:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	4313      	orrs	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8002010:	f107 030f 	add.w	r3, r7, #15
 8002014:	461a      	mov	r2, r3
 8002016:	2101      	movs	r1, #1
 8002018:	206e      	movs	r0, #110	; 0x6e
 800201a:	f002 fddb 	bl	8004bd4 <RadioSpiWriteRegisters>
 800201e:	4602      	mov	r2, r0
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8002022:	b212      	sxth	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	7019      	strb	r1, [r3, #0]
 8002028:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800202c:	705a      	strb	r2, [r3, #1]

}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000440 	.word	0x20000440

0800203c <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8002046:	f107 030f 	add.w	r3, r7, #15
 800204a:	461a      	mov	r2, r3
 800204c:	2101      	movs	r1, #1
 800204e:	206f      	movs	r0, #111	; 0x6f
 8002050:	f002 fe6c 	bl	8004d2c <RadioSpiReadRegisters>
 8002054:	4602      	mov	r2, r0
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8002058:	b212      	sxth	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	7019      	strb	r1, [r3, #0]
 800205e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002062:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800206a:	b2db      	uxtb	r3, r3
 800206c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	4313      	orrs	r3, r2
 8002074:	b2db      	uxtb	r3, r3
 8002076:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8002078:	f107 030f 	add.w	r3, r7, #15
 800207c:	461a      	mov	r2, r3
 800207e:	2101      	movs	r1, #1
 8002080:	206f      	movs	r0, #111	; 0x6f
 8002082:	f002 fda7 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002086:	4602      	mov	r2, r0
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800208a:	b212      	sxth	r2, r2
 800208c:	4611      	mov	r1, r2
 800208e:	7019      	strb	r1, [r3, #0]
 8002090:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002094:	705a      	strb	r2, [r3, #1]

}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000440 	.word	0x20000440

080020a4 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80020ae:	f107 030f 	add.w	r3, r7, #15
 80020b2:	461a      	mov	r2, r3
 80020b4:	2101      	movs	r1, #1
 80020b6:	209e      	movs	r0, #158	; 0x9e
 80020b8:	f002 fe38 	bl	8004d2c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	f023 0306 	bic.w	r3, r3, #6
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e004      	b.n	80020e2 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 80020e2:	f107 030f 	add.w	r3, r7, #15
 80020e6:	461a      	mov	r2, r3
 80020e8:	2101      	movs	r1, #1
 80020ea:	209e      	movs	r0, #158	; 0x9e
 80020ec:	f002 fd72 	bl	8004bd4 <RadioSpiWriteRegisters>
  
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fec3 	bl	8004e90 <RadioSpiCommandStrobes>
 800210a:	4602      	mov	r2, r0
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SpiritCmdStrobeCommand+0x2c>)
 800210e:	b212      	sxth	r2, r2
 8002110:	4611      	mov	r1, r2
 8002112:	7019      	strb	r1, [r3, #0]
 8002114:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002118:	705a      	strb	r2, [r3, #1]
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000440 	.word	0x20000440

08002128 <SpiritCsmaInit>:
 * @param  pxCsmaInit Csma init structure.
 *         This parameter is a pointer to @ref CsmaInit.
 * @retval None.
 */
void SpiritCsmaInit(CsmaInit* pxCsmaInit)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_BU_COUNTER_SEED(pxCsmaInit->nBuCounterSeed));
  s_assert_param(IS_BU_PRESCALER(pxCsmaInit->cBuPrescaler));
  s_assert_param(IS_CMAX_NB(pxCsmaInit->cMaxNb));

  /* CSMA BU counter seed (MSB) config */
  tempRegValue[0] = (uint8_t)(pxCsmaInit->nBuCounterSeed >> 8);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	889b      	ldrh	r3, [r3, #4]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	b29b      	uxth	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	723b      	strb	r3, [r7, #8]

  /* CSMA BU counter seed (LSB) config */
  tempRegValue[1] = (uint8_t) pxCsmaInit->nBuCounterSeed;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	889b      	ldrh	r3, [r3, #4]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	727b      	strb	r3, [r7, #9]

  /* CSMA BU prescaler config and CCA period config */
  tempRegValue[2] = (pxCsmaInit->cBuPrescaler << 2) | pxCsmaInit->xMultiplierTbit;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	799b      	ldrb	r3, [r3, #6]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	b25a      	sxtb	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b25b      	sxtb	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	72bb      	strb	r3, [r7, #10]

  /* CSMA CCA length config and max number of back-off */
  tempRegValue[3] = (pxCsmaInit->xCcaLength | pxCsmaInit->cMaxNb);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	789a      	ldrb	r2, [r3, #2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	78db      	ldrb	r3, [r3, #3]
 8002162:	4313      	orrs	r3, r2
 8002164:	b2db      	uxtb	r3, r3
 8002166:	72fb      	strb	r3, [r7, #11]

  /* Reads the PROTOCOL1_BASE register value, to write the SEED_RELOAD and CSMA_PERS_ON fields */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	3304      	adds	r3, #4
 800216e:	461a      	mov	r2, r3
 8002170:	2101      	movs	r1, #1
 8002172:	2051      	movs	r0, #81	; 0x51
 8002174:	f002 fdda 	bl	8004d2c <RadioSpiReadRegisters>
 8002178:	4602      	mov	r2, r0
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <SpiritCsmaInit+0xc4>)
 800217c:	b212      	sxth	r2, r2
 800217e:	4611      	mov	r1, r2
 8002180:	7019      	strb	r1, [r3, #0]
 8002182:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002186:	705a      	strb	r2, [r3, #1]

  /* Writes the new value for persistent mode */
  if(pxCsmaInit->xCsmaPersistentMode==S_ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <SpiritCsmaInit+0x74>
  {
    tempRegValue[4] |= PROTOCOL1_CSMA_PERS_ON_MASK;
 8002190:	7b3b      	ldrb	r3, [r7, #12]
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	b2db      	uxtb	r3, r3
 8002198:	733b      	strb	r3, [r7, #12]
 800219a:	e004      	b.n	80021a6 <SpiritCsmaInit+0x7e>
  }
  else
  {
    tempRegValue[4] &= ~PROTOCOL1_CSMA_PERS_ON_MASK;
 800219c:	7b3b      	ldrb	r3, [r7, #12]
 800219e:	f023 0302 	bic.w	r3, r3, #2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	733b      	strb	r3, [r7, #12]
  }

  /* Writes PROTOCOL1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	3304      	adds	r3, #4
 80021ac:	461a      	mov	r2, r3
 80021ae:	2101      	movs	r1, #1
 80021b0:	2051      	movs	r0, #81	; 0x51
 80021b2:	f002 fd0f 	bl	8004bd4 <RadioSpiWriteRegisters>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <SpiritCsmaInit+0xc4>)
 80021ba:	b212      	sxth	r2, r2
 80021bc:	4611      	mov	r1, r2
 80021be:	7019      	strb	r1, [r3, #0]
 80021c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021c4:	705a      	strb	r2, [r3, #1]

  /* Writes CSMA_CONFIGx_BASE registers */
  g_xStatus = SpiritSpiWriteRegisters(CSMA_CONFIG3_BASE, 4, tempRegValue);
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	461a      	mov	r2, r3
 80021cc:	2104      	movs	r1, #4
 80021ce:	2064      	movs	r0, #100	; 0x64
 80021d0:	f002 fd00 	bl	8004bd4 <RadioSpiWriteRegisters>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SpiritCsmaInit+0xc4>)
 80021d8:	b212      	sxth	r2, r2
 80021da:	4611      	mov	r1, r2
 80021dc:	7019      	strb	r1, [r3, #0]
 80021de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021e2:	705a      	strb	r2, [r3, #1]

}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000440 	.word	0x20000440

080021f0 <SpiritCsma>:
 * @param  xNewState the state of the CSMA mode.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCsma(SpiritFunctionalState xNewState)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PROTOCOL1 register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 80021fa:	f107 030f 	add.w	r3, r7, #15
 80021fe:	461a      	mov	r2, r3
 8002200:	2101      	movs	r1, #1
 8002202:	2051      	movs	r0, #81	; 0x51
 8002204:	f002 fd92 	bl	8004d2c <RadioSpiReadRegisters>
 8002208:	4602      	mov	r2, r0
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <SpiritCsma+0x6c>)
 800220c:	b212      	sxth	r2, r2
 800220e:	4611      	mov	r1, r2
 8002210:	7019      	strb	r1, [r3, #0]
 8002212:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002216:	705a      	strb	r2, [r3, #1]

  /* Sets or resets the CSMA enable bit */
  if(xNewState==S_ENABLE)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <SpiritCsma+0x3a>
  {
    tempRegValue |= PROTOCOL1_CSMA_ON_MASK;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	b2db      	uxtb	r3, r3
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e004      	b.n	8002234 <SpiritCsma+0x44>
  }
  else
  {
    tempRegValue &= ~PROTOCOL1_CSMA_ON_MASK;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	b2db      	uxtb	r3, r3
 8002232:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the new value on the PROTOCOL1 register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8002234:	f107 030f 	add.w	r3, r7, #15
 8002238:	461a      	mov	r2, r3
 800223a:	2101      	movs	r1, #1
 800223c:	2051      	movs	r0, #81	; 0x51
 800223e:	f002 fcc9 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002242:	4602      	mov	r2, r0
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SpiritCsma+0x6c>)
 8002246:	b212      	sxth	r2, r2
 8002248:	4611      	mov	r1, r2
 800224a:	7019      	strb	r1, [r3, #0]
 800224c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002250:	705a      	strb	r2, [r3, #1]

}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000440 	.word	0x20000440

08002260 <SpiritGeneralSetExtRef>:
 * @param  xExtMode new state for the external reference.
 *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
 * @retval None.
 */
void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_MODE_EXT(xExtMode));

  /* Reads the ANA_FUNC_CONF0_BASE register value */
  SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800226a:	f107 030f 	add.w	r3, r7, #15
 800226e:	461a      	mov	r2, r3
 8002270:	2101      	movs	r1, #1
 8002272:	2001      	movs	r0, #1
 8002274:	f002 fd5a 	bl	8004d2c <RadioSpiReadRegisters>

  /* Build the value to write */
  if(xExtMode == MODE_EXT_XO)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <SpiritGeneralSetExtRef+0x2a>
  {
    tempRegValue &= ~EXT_REF_MASK;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	f023 0310 	bic.w	r3, r3, #16
 8002284:	b2db      	uxtb	r3, r3
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e004      	b.n	8002294 <SpiritGeneralSetExtRef+0x34>
  }
  else
  {
    tempRegValue |= EXT_REF_MASK;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	b2db      	uxtb	r3, r3
 8002292:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002294:	f107 030f 	add.w	r3, r7, #15
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	2001      	movs	r0, #1
 800229e:	f002 fc99 	bl	8004bd4 <RadioSpiWriteRegisters>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SpiritGeneralSetExtRef+0x5c>)
 80022a6:	b212      	sxth	r2, r2
 80022a8:	4611      	mov	r1, r2
 80022aa:	7019      	strb	r1, [r3, #0]
 80022ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022b0:	705a      	strb	r2, [r3, #1]

}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000440 	.word	0x20000440

080022c0 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	785a      	ldrb	r2, [r3, #1]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	789b      	ldrb	r3, [r3, #2]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f107 020f 	add.w	r2, r7, #15
 80022e2:	2101      	movs	r1, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fc75 	bl	8004bd4 <RadioSpiWriteRegisters>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SpiritGpioInit+0x44>)
 80022ee:	b212      	sxth	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	7019      	strb	r1, [r3, #0]
 80022f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022f8:	705a      	strb	r2, [r3, #1]

}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000440 	.word	0x20000440

08002308 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <SpiritIrqDeInit+0x20>
  {
    uint32_t tempValue = 0x00000000;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
    
    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6013      	str	r3, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	461a      	mov	r2, r3
 800232e:	2104      	movs	r1, #4
 8002330:	2090      	movs	r0, #144	; 0x90
 8002332:	f002 fc4f 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002336:	4602      	mov	r2, r0
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SpiritIrqDeInit+0x48>)
 800233a:	b212      	sxth	r2, r2
 800233c:	4611      	mov	r1, r2
 800233e:	7019      	strb	r1, [r3, #0]
 8002340:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002344:	705a      	strb	r2, [r3, #1]
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000440 	.word	0x20000440

08002354 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	461a      	mov	r2, r3
 800236a:	2104      	movs	r1, #4
 800236c:	2090      	movs	r0, #144	; 0x90
 800236e:	f002 fcdd 	bl	8004d2c <RadioSpiReadRegisters>
 8002372:	4602      	mov	r2, r0
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <SpiritIrq+0xcc>)
 8002376:	b212      	sxth	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	7019      	strb	r1, [r3, #0]
 800237c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002380:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	74fb      	strb	r3, [r7, #19]
 8002386:	e012      	b.n	80023ae <SpiritIrq+0x5a>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	f107 0218 	add.w	r2, r7, #24
 800238e:	4413      	add	r3, r2
 8002390:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002394:	461a      	mov	r2, r3
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	f1c3 0303 	rsb	r3, r3, #3
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4413      	add	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	3301      	adds	r3, #1
 80023ac:	74fb      	strb	r3, [r7, #19]
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d9e9      	bls.n	8002388 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <SpiritIrq+0x72>
  {
    tempValue &= (~xIrq);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	43db      	mvns	r3, r3
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4013      	ands	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e003      	b.n	80023ce <SpiritIrq+0x7a>
  }
  else
  {
    tempValue |= (xIrq);
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	74bb      	strb	r3, [r7, #18]
 80023d2:	e00f      	b.n	80023f4 <SpiritIrq+0xa0>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80023d4:	7cbb      	ldrb	r3, [r7, #18]
 80023d6:	f1c3 0303 	rsb	r3, r3, #3
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	40da      	lsrs	r2, r3
 80023e0:	7cbb      	ldrb	r3, [r7, #18]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f107 0118 	add.w	r1, r7, #24
 80023e8:	440b      	add	r3, r1
 80023ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 80023ee:	7cbb      	ldrb	r3, [r7, #18]
 80023f0:	3301      	adds	r3, #1
 80023f2:	74bb      	strb	r3, [r7, #18]
 80023f4:	7cbb      	ldrb	r3, [r7, #18]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d9ec      	bls.n	80023d4 <SpiritIrq+0x80>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	461a      	mov	r2, r3
 8002400:	2104      	movs	r1, #4
 8002402:	2090      	movs	r0, #144	; 0x90
 8002404:	f002 fbe6 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SpiritIrq+0xcc>)
 800240c:	b212      	sxth	r2, r2
 800240e:	4611      	mov	r1, r2
 8002410:	7019      	strb	r1, [r3, #0]
 8002412:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002416:	705a      	strb	r2, [r3, #1]

}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000440 	.word	0x20000440

08002424 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	461a      	mov	r2, r3
 8002436:	2104      	movs	r1, #4
 8002438:	20fa      	movs	r0, #250	; 0xfa
 800243a:	f002 fc77 	bl	8004d2c <RadioSpiReadRegisters>
 800243e:	4602      	mov	r2, r0
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <SpiritIrqGetStatus+0x60>)
 8002442:	b212      	sxth	r2, r2
 8002444:	4611      	mov	r1, r2
 8002446:	7019      	strb	r1, [r3, #0]
 8002448:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800244c:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 800244e:	2300      	movs	r3, #0
 8002450:	74fb      	strb	r3, [r7, #19]
 8002452:	e00f      	b.n	8002474 <SpiritIrqGetStatus+0x50>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	f1c3 0303 	rsb	r3, r3, #3
 800245a:	f107 0218 	add.w	r2, r7, #24
 800245e:	4413      	add	r3, r2
 8002460:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	3301      	adds	r3, #1
 8002472:	74fb      	strb	r3, [r7, #19]
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d9ec      	bls.n	8002454 <SpiritIrqGetStatus+0x30>
  }
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000440 	.word	0x20000440

08002488 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	461a      	mov	r2, r3
 8002492:	2104      	movs	r1, #4
 8002494:	20fa      	movs	r0, #250	; 0xfa
 8002496:	f002 fc49 	bl	8004d2c <RadioSpiReadRegisters>
 800249a:	4602      	mov	r2, r0
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SpiritIrqClearStatus+0x2c>)
 800249e:	b212      	sxth	r2, r2
 80024a0:	4611      	mov	r1, r2
 80024a2:	7019      	strb	r1, [r3, #0]
 80024a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024a8:	705a      	strb	r2, [r3, #1]

}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000440 	.word	0x20000440

080024b8 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	461a      	mov	r2, r3
 80024c2:	2101      	movs	r1, #1
 80024c4:	20e7      	movs	r0, #231	; 0xe7
 80024c6:	f002 fc31 	bl	8004d2c <RadioSpiReadRegisters>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 80024ce:	b212      	sxth	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	7019      	strb	r1, [r3, #0]
 80024d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024d8:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e0:	b2db      	uxtb	r3, r3

}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000440 	.word	0x20000440

080024f0 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80024f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024f4:	b08a      	sub	sp, #40	; 0x28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a70      	ldr	r2, [pc, #448]	; (80026c0 <SpiritManagementSetFrequencyBase+0x1d0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d907      	bls.n	8002512 <SpiritManagementSetFrequencyBase+0x22>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a6f      	ldr	r2, [pc, #444]	; (80026c4 <SpiritManagementSetFrequencyBase+0x1d4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d803      	bhi.n	8002512 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002510:	e01a      	b.n	8002548 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a6c      	ldr	r2, [pc, #432]	; (80026c8 <SpiritManagementSetFrequencyBase+0x1d8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d907      	bls.n	800252a <SpiritManagementSetFrequencyBase+0x3a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a6b      	ldr	r2, [pc, #428]	; (80026cc <SpiritManagementSetFrequencyBase+0x1dc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d803      	bhi.n	800252a <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002528:	e00e      	b.n	8002548 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a68      	ldr	r2, [pc, #416]	; (80026d0 <SpiritManagementSetFrequencyBase+0x1e0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d907      	bls.n	8002542 <SpiritManagementSetFrequencyBase+0x52>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a67      	ldr	r2, [pc, #412]	; (80026d4 <SpiritManagementSetFrequencyBase+0x1e4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d803      	bhi.n	8002542 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 800253a:	2302      	movs	r3, #2
 800253c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002540:	e002      	b.n	8002548 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8002542:	2303      	movs	r3, #3
 8002544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002548:	f001 f808 	bl	800355c <SpiritRadioGetFrequencyOffset>
 800254c:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800254e:	f000 ffe5 	bl	800351c <SpiritRadioGetChannelSpace>
 8002552:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002554:	f000 ffca 	bl	80034ec <SpiritRadioGetChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	441a      	add	r2, r3
 8002562:	7efb      	ldrb	r3, [r7, #27]
 8002564:	69f9      	ldr	r1, [r7, #28]
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 800256e:	f001 fe4b 	bl	8004208 <SpiritRadioGetRefDiv>
 8002572:	4603      	mov	r3, r0
 8002574:	3301      	adds	r3, #1
 8002576:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8002578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800257c:	2b03      	cmp	r3, #3
 800257e:	d83a      	bhi.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <SpiritManagementSetFrequencyBase+0x98>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	080025e1 	.word	0x080025e1
 800258c:	080025c9 	.word	0x080025c9
 8002590:	080025b1 	.word	0x080025b1
 8002594:	08002599 	.word	0x08002599
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	4a4f      	ldr	r2, [pc, #316]	; (80026d8 <SpiritManagementSetFrequencyBase+0x1e8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d803      	bhi.n	80025a8 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7ff fd7f 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80025a6:	e026      	b.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff fd7b 	bl	80020a4 <SpiritCalibrationSelectVco>
    break;
 80025ae:	e022      	b.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4a4a      	ldr	r2, [pc, #296]	; (80026dc <SpiritManagementSetFrequencyBase+0x1ec>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d803      	bhi.n	80025c0 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff fd73 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80025be:	e01a      	b.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff fd6f 	bl	80020a4 <SpiritCalibrationSelectVco>
    break;
 80025c6:	e016      	b.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4a45      	ldr	r2, [pc, #276]	; (80026e0 <SpiritManagementSetFrequencyBase+0x1f0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d803      	bhi.n	80025d8 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff fd67 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80025d6:	e00e      	b.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80025d8:	2001      	movs	r0, #1
 80025da:	f7ff fd63 	bl	80020a4 <SpiritCalibrationSelectVco>
    break;
 80025de:	e00a      	b.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4a40      	ldr	r2, [pc, #256]	; (80026e4 <SpiritManagementSetFrequencyBase+0x1f4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d803      	bhi.n	80025f0 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff fd5b 	bl	80020a4 <SpiritCalibrationSelectVco>
 80025ee:	e002      	b.n	80025f6 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff fd57 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f000 fe90 	bl	800331c <SpiritRadioSearchWCP>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fd ff2b 	bl	800045c <__aeabi_ui2d>
 8002606:	4604      	mov	r4, r0
 8002608:	460d      	mov	r5, r1
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	049b      	lsls	r3, r3, #18
 800260e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002612:	4935      	ldr	r1, [pc, #212]	; (80026e8 <SpiritManagementSetFrequencyBase+0x1f8>)
 8002614:	5c8a      	ldrb	r2, [r1, r2]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff2e 	bl	800047c <__aeabi_i2d>
 8002620:	4680      	mov	r8, r0
 8002622:	4689      	mov	r9, r1
 8002624:	f001 fe64 	bl	80042f0 <SpiritRadioGetXtalFrequency>
 8002628:	4603      	mov	r3, r0
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd ff16 	bl	800045c <__aeabi_ui2d>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4640      	mov	r0, r8
 8002636:	4649      	mov	r1, r9
 8002638:	f7fe f8b4 	bl	80007a4 <__aeabi_ddiv>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fd ff84 	bl	8000550 <__aeabi_dmul>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	4618      	mov	r0, r3
 800264e:	4621      	mov	r1, r4
 8002650:	f7fe fa18 	bl	8000a84 <__aeabi_d2uiz>
 8002654:	4603      	mov	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	0d5b      	lsrs	r3, r3, #21
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	b2da      	uxtb	r2, r3
 8002664:	7cbb      	ldrb	r3, [r7, #18]
 8002666:	015b      	lsls	r3, r3, #5
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0b5b      	lsrs	r3, r3, #13
 8002674:	b2db      	uxtb	r3, r3
 8002676:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	b2db      	uxtb	r3, r3
 800267e:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	b2da      	uxtb	r2, r3
 8002688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268c:	4917      	ldr	r1, [pc, #92]	; (80026ec <SpiritManagementSetFrequencyBase+0x1fc>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	4313      	orrs	r3, r2
 8002692:	b2db      	uxtb	r3, r3
 8002694:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	461a      	mov	r2, r3
 800269c:	2104      	movs	r1, #4
 800269e:	2008      	movs	r0, #8
 80026a0:	f002 fa98 	bl	8004bd4 <RadioSpiWriteRegisters>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <SpiritManagementSetFrequencyBase+0x200>)
 80026a8:	b212      	sxth	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	7019      	strb	r1, [r3, #0]
 80026ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026b2:	705a      	strb	r2, [r3, #1]
}
 80026b4:	bf00      	nop
 80026b6:	3728      	adds	r7, #40	; 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026be:	bf00      	nop
 80026c0:	2e5f567f 	.word	0x2e5f567f
 80026c4:	390c2fe0 	.word	0x390c2fe0
 80026c8:	1701e47f 	.word	0x1701e47f
 80026cc:	1c146a60 	.word	0x1c146a60
 80026d0:	11d260bf 	.word	0x11d260bf
 80026d4:	14ced7e0 	.word	0x14ced7e0
 80026d8:	099cf4e1 	.word	0x099cf4e1
 80026dc:	1339e9c3 	.word	0x1339e9c3
 80026e0:	19a28d05 	.word	0x19a28d05
 80026e4:	33451a0a 	.word	0x33451a0a
 80026e8:	080073f8 	.word	0x080073f8
 80026ec:	080073f4 	.word	0x080073f4
 80026f0:	20000440 	.word	0x20000440

080026f4 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002702:	f001 fdf5 	bl	80042f0 <SpiritRadioGetXtalFrequency>
 8002706:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002708:	2300      	movs	r3, #0
 800270a:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4a57      	ldr	r2, [pc, #348]	; (800286c <SpiritManagementWaVcoCalibration+0x178>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d90f      	bls.n	8002734 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002714:	f001 fd78 	bl	8004208 <SpiritRadioGetRefDiv>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002722:	f001 f87d 	bl	8003820 <SpiritRadioGetFrequencyBase>
 8002726:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002728:	2001      	movs	r0, #1
 800272a:	f001 fd3d 	bl	80041a8 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fede 	bl	80024f0 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002734:	f001 f874 	bl	8003820 <SpiritRadioGetFrequencyBase>
 8002738:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800273a:	2325      	movs	r3, #37	; 0x25
 800273c:	707b      	strb	r3, [r7, #1]
 800273e:	1c7b      	adds	r3, r7, #1
 8002740:	461a      	mov	r2, r3
 8002742:	2101      	movs	r1, #1
 8002744:	20a1      	movs	r0, #161	; 0xa1
 8002746:	f002 fa45 	bl	8004bd4 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800274a:	2001      	movs	r0, #1
 800274c:	f7ff fbee 	bl	8001f2c <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002750:	f001 ffa6 	bl	80046a0 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d10d      	bne.n	800277e <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8002766:	2062      	movs	r0, #98	; 0x62
 8002768:	f7ff fcc6 	bl	80020f8 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 800276c:	f001 ff98 	bl	80046a0 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002770:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b03      	cmp	r3, #3
 800277c:	d1f6      	bne.n	800276c <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 800277e:	2066      	movs	r0, #102	; 0x66
 8002780:	f7ff fcba 	bl	80020f8 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002784:	2300      	movs	r3, #0
 8002786:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002788:	f001 ff8a 	bl	80046a0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b13      	cmp	r3, #19
 8002798:	d106      	bne.n	80027a8 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	737a      	strb	r2, [r7, #13]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d101      	bne.n	80027a8 <SpiritManagementWaVcoCalibration+0xb4>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e05d      	b.n	8002864 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d1e8      	bne.n	8002788 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80027b6:	f7ff fbf1 	bl	8001f9c <SpiritCalibrationGetVcoCalData>
 80027ba:	4603      	mov	r3, r0
 80027bc:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80027be:	2062      	movs	r0, #98	; 0x62
 80027c0:	f7ff fc9a 	bl	80020f8 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80027c4:	f001 ff6c 	bl	80046a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d1f6      	bne.n	80027c4 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80027d6:	2065      	movs	r0, #101	; 0x65
 80027d8:	f7ff fc8e 	bl	80020f8 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80027dc:	2300      	movs	r3, #0
 80027de:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80027e0:	f001 ff5e 	bl	80046a0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b13      	cmp	r3, #19
 80027f0:	d106      	bne.n	8002800 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80027f2:	7b7b      	ldrb	r3, [r7, #13]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	737a      	strb	r2, [r7, #13]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d101      	bne.n	8002800 <SpiritManagementWaVcoCalibration+0x10c>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e031      	b.n	8002864 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b0f      	cmp	r3, #15
 800280c:	d1e8      	bne.n	80027e0 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800280e:	f7ff fbc5 	bl	8001f9c <SpiritCalibrationGetVcoCalData>
 8002812:	4603      	mov	r3, r0
 8002814:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002816:	2062      	movs	r0, #98	; 0x62
 8002818:	f7ff fc6e 	bl	80020f8 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 800281c:	f001 ff40 	bl	80046a0 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <SpiritManagementWaVcoCalibration+0x17c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b03      	cmp	r3, #3
 800282c:	d1f6      	bne.n	800281c <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002834:	2063      	movs	r0, #99	; 0x63
 8002836:	f7ff fc5f 	bl	80020f8 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff fb76 	bl	8001f2c <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002846:	2000      	movs	r0, #0
 8002848:	f001 fcae 	bl	80041a8 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fe4f 	bl	80024f0 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fbbd 	bl	8001fd4 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fbed 	bl	800203c <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	01c9c380 	.word	0x01c9c380
 8002870:	20000440 	.word	0x20000440

08002874 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <SpiritManagementWaCmdStrobeTx+0x60>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <SpiritManagementWaCmdStrobeTx+0x68>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d908      	bls.n	80028a0 <SpiritManagementWaCmdStrobeTx+0x2c>
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d803      	bhi.n	80028a0 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002898:	20c0      	movs	r0, #192	; 0xc0
 800289a:	f001 fb9b 	bl	8003fd4 <SpiritRadioSetPACwc>
 800289e:	e002      	b.n	80028a6 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f001 fb97 	bl	8003fd4 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80028a6:	2311      	movs	r3, #17
 80028a8:	71fb      	strb	r3, [r7, #7]
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	461a      	mov	r2, r3
 80028ae:	2101      	movs	r1, #1
 80028b0:	20a9      	movs	r0, #169	; 0xa9
 80028b2:	f002 f98f 	bl	8004bd4 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80028b6:	2320      	movs	r3, #32
 80028b8:	71fb      	strb	r3, [r7, #7]
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	461a      	mov	r2, r3
 80028be:	2101      	movs	r1, #1
 80028c0:	20a5      	movs	r0, #165	; 0xa5
 80028c2:	f002 f987 	bl	8004bd4 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80028c6:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <SpiritManagementWaCmdStrobeTx+0x60>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
  }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200001e0 	.word	0x200001e0
 80028d8:	20000360 	.word	0x20000360
 80028dc:	08f0d17f 	.word	0x08f0d17f
 80028e0:	1c03a180 	.word	0x1c03a180

080028e4 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <SpiritManagementWaCmdStrobeRx+0x34>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00d      	beq.n	8002910 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 80028f4:	2398      	movs	r3, #152	; 0x98
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	461a      	mov	r2, r3
 80028fc:	2101      	movs	r1, #1
 80028fe:	20a5      	movs	r0, #165	; 0xa5
 8002900:	f002 f968 	bl	8004bd4 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002904:	2000      	movs	r0, #0
 8002906:	f001 fb65 	bl	8003fd4 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800290a:	4b03      	ldr	r3, [pc, #12]	; (8002918 <SpiritManagementWaCmdStrobeRx+0x34>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	200001e0 	.word	0x200001e0

0800291c <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SpiritManagementWaTRxFcMem+0x20>)
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <SpiritManagementWaTRxFcMem+0x24>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	200001e0 	.word	0x200001e0
 8002940:	20000360 	.word	0x20000360

08002944 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	461a      	mov	r2, r3
 8002952:	2101      	movs	r1, #1
 8002954:	2051      	movs	r0, #81	; 0x51
 8002956:	f002 f9e9 	bl	8004d2c <RadioSpiReadRegisters>
 800295a:	4602      	mov	r2, r0
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <SpiritPktBasicInit+0x1ac>)
 800295e:	b212      	sxth	r2, r2
 8002960:	4611      	mov	r1, r2
 8002962:	7019      	strb	r1, [r3, #0]
 8002964:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002968:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800296a:	7a3b      	ldrb	r3, [r7, #8]
 800296c:	f023 0320 	bic.w	r3, r3, #32
 8002970:	b2db      	uxtb	r3, r3
 8002972:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002974:	7a3b      	ldrb	r3, [r7, #8]
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	461a      	mov	r2, r3
 8002984:	2101      	movs	r1, #1
 8002986:	2051      	movs	r0, #81	; 0x51
 8002988:	f002 f924 	bl	8004bd4 <RadioSpiWriteRegisters>
 800298c:	4602      	mov	r2, r0
 800298e:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <SpiritPktBasicInit+0x1ac>)
 8002990:	b212      	sxth	r2, r2
 8002992:	4611      	mov	r1, r2
 8002994:	7019      	strb	r1, [r3, #0]
 8002996:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800299a:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800299c:	f107 0308 	add.w	r3, r7, #8
 80029a0:	461a      	mov	r2, r3
 80029a2:	2101      	movs	r1, #1
 80029a4:	204f      	movs	r0, #79	; 0x4f
 80029a6:	f002 f9c1 	bl	8004d2c <RadioSpiReadRegisters>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <SpiritPktBasicInit+0x1ac>)
 80029ae:	b212      	sxth	r2, r2
 80029b0:	4611      	mov	r1, r2
 80029b2:	7019      	strb	r1, [r3, #0]
 80029b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029b8:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 80029ba:	7a3b      	ldrb	r3, [r7, #8]
 80029bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	461a      	mov	r2, r3
 80029ca:	2101      	movs	r1, #1
 80029cc:	204f      	movs	r0, #79	; 0x4f
 80029ce:	f002 f901 	bl	8004bd4 <RadioSpiWriteRegisters>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <SpiritPktBasicInit+0x1ac>)
 80029d6:	b212      	sxth	r2, r2
 80029d8:	4611      	mov	r1, r2
 80029da:	7019      	strb	r1, [r3, #0]
 80029dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029e0:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7b1b      	ldrb	r3, [r3, #12]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 80029ea:	2308      	movs	r3, #8
 80029ec:	723b      	strb	r3, [r7, #8]
 80029ee:	e001      	b.n	80029f4 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80029f0:	2300      	movs	r3, #0
 80029f2:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 80029f4:	7a3a      	ldrb	r2, [r7, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7adb      	ldrb	r3, [r3, #11]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7a5b      	ldrb	r3, [r3, #9]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <SpiritPktBasicInit+0xca>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7a5b      	ldrb	r3, [r3, #9]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7a9b      	ldrb	r3, [r3, #10]
 8002a32:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7b9b      	ldrb	r3, [r3, #14]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d104      	bne.n	8002a46 <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	f043 0310 	orr.w	r3, r3, #16
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7b5b      	ldrb	r3, [r3, #13]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d104      	bne.n	8002a58 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002a58:	f107 0308 	add.w	r3, r7, #8
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2104      	movs	r1, #4
 8002a60:	2030      	movs	r0, #48	; 0x30
 8002a62:	f002 f8b7 	bl	8004bd4 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e01f      	b.n	8002aac <SpiritPktBasicInit+0x168>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	785b      	ldrb	r3, [r3, #1]
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f1c3 0303 	rsb	r3, r3, #3
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	da07      	bge.n	8002a8e <SpiritPktBasicInit+0x14a>
    {
      tempRegValue[i]=0;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	f107 0210 	add.w	r2, r7, #16
 8002a84:	4413      	add	r3, r2
 8002a86:	2200      	movs	r2, #0
 8002a88:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002a8c:	e00b      	b.n	8002aa6 <SpiritPktBasicInit+0x162>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	40da      	lsrs	r2, r3
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f107 0110 	add.w	r1, r7, #16
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d9dc      	bls.n	8002a6c <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7a9b      	ldrb	r3, [r3, #10]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <SpiritPktBasicInit+0x17e>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f000 f8fc 	bl	8002cb8 <SpiritPktCommonFilterOnCrc>
 8002ac0:	e002      	b.n	8002ac8 <SpiritPktBasicInit+0x184>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f000 f8f8 	bl	8002cb8 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	461a      	mov	r2, r3
 8002ace:	2104      	movs	r1, #4
 8002ad0:	2036      	movs	r0, #54	; 0x36
 8002ad2:	f002 f87f 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SpiritPktBasicInit+0x1ac>)
 8002ada:	b212      	sxth	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	7019      	strb	r1, [r3, #0]
 8002ae0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae4:	705a      	strb	r2, [r3, #1]

}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000440 	.word	0x20000440

08002af4 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	461a      	mov	r2, r3
 8002b02:	2101      	movs	r1, #1
 8002b04:	204f      	movs	r0, #79	; 0x4f
 8002b06:	f002 f911 	bl	8004d2c <RadioSpiReadRegisters>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <SpiritPktBasicAddressesInit+0xd8>)
 8002b0e:	b212      	sxth	r2, r2
 8002b10:	4611      	mov	r1, r2
 8002b12:	7019      	strb	r1, [r3, #0]
 8002b14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b18:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002b22:	7b3b      	ldrb	r3, [r7, #12]
 8002b24:	f043 0308 	orr.w	r3, r3, #8
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	733b      	strb	r3, [r7, #12]
 8002b2c:	e004      	b.n	8002b38 <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002b2e:	7b3b      	ldrb	r3, [r7, #12]
 8002b30:	f023 0308 	bic.w	r3, r3, #8
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	789b      	ldrb	r3, [r3, #2]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002b40:	7b3b      	ldrb	r3, [r7, #12]
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	733b      	strb	r3, [r7, #12]
 8002b4a:	e004      	b.n	8002b56 <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002b4c:	7b3b      	ldrb	r3, [r7, #12]
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002b5e:	7b3b      	ldrb	r3, [r7, #12]
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	733b      	strb	r3, [r7, #12]
 8002b68:	e004      	b.n	8002b74 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002b6a:	7b3b      	ldrb	r3, [r7, #12]
 8002b6c:	f023 0302 	bic.w	r3, r3, #2
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	204f      	movs	r0, #79	; 0x4f
 8002b7e:	f002 f829 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <SpiritPktBasicAddressesInit+0xd8>)
 8002b86:	b212      	sxth	r2, r2
 8002b88:	4611      	mov	r1, r2
 8002b8a:	7019      	strb	r1, [r3, #0]
 8002b8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b90:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	795b      	ldrb	r3, [r3, #5]
 8002b96:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	78db      	ldrb	r3, [r3, #3]
 8002b9c:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2103      	movs	r1, #3
 8002bac:	204c      	movs	r0, #76	; 0x4c
 8002bae:	f002 f811 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SpiritPktBasicAddressesInit+0xd8>)
 8002bb6:	b212      	sxth	r2, r2
 8002bb8:	4611      	mov	r1, r2
 8002bba:	7019      	strb	r1, [r3, #0]
 8002bbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bc0:	705a      	strb	r2, [r3, #1]
  
  
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000440 	.word	0x20000440

08002bd0 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2101      	movs	r1, #1
 8002bdc:	2030      	movs	r0, #48	; 0x30
 8002bde:	f002 f8a5 	bl	8004d2c <RadioSpiReadRegisters>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <SpiritPktBasicGetAddressField+0x3c>)
 8002be6:	b212      	sxth	r2, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	7019      	strb	r1, [r3, #0]
 8002bec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bf0:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 0318 	and.w	r3, r3, #24
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8002c00:	2300      	movs	r3, #0
  }

}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000440 	.word	0x20000440

08002c10 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8002c1e:	f7ff ffd7 	bl	8002bd0 <SpiritPktBasicGetAddressField>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8002c2c:	f000 f828 	bl	8002c80 <SpiritPktCommonGetControlLength>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	89fb      	ldrh	r3, [r7, #14]
 8002c36:	4413      	add	r3, r2
 8002c38:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	121b      	asrs	r3, r3, #8
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	2034      	movs	r0, #52	; 0x34
 8002c5e:	f001 ffb9 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <SpiritPktBasicSetPayloadLength+0x6c>)
 8002c66:	b212      	sxth	r2, r2
 8002c68:	4611      	mov	r1, r2
 8002c6a:	7019      	strb	r1, [r3, #0]
 8002c6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c70:	705a      	strb	r2, [r3, #1]

}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000440 	.word	0x20000440

08002c80 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2030      	movs	r0, #48	; 0x30
 8002c8e:	f002 f84d 	bl	8004d2c <RadioSpiReadRegisters>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <SpiritPktCommonGetControlLength+0x34>)
 8002c96:	b212      	sxth	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	7019      	strb	r1, [r3, #0]
 8002c9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ca0:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	b2db      	uxtb	r3, r3

}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000440 	.word	0x20000440

08002cb8 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002cc2:	f107 030f 	add.w	r3, r7, #15
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2101      	movs	r1, #1
 8002cca:	204f      	movs	r0, #79	; 0x4f
 8002ccc:	f002 f82e 	bl	8004d2c <RadioSpiReadRegisters>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002cd4:	b212      	sxth	r2, r2
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	7019      	strb	r1, [r3, #0]
 8002cda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cde:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e004      	b.n	8002cfc <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002cfc:	f107 030f 	add.w	r3, r7, #15
 8002d00:	461a      	mov	r2, r3
 8002d02:	2101      	movs	r1, #1
 8002d04:	204f      	movs	r0, #79	; 0x4f
 8002d06:	f001 ff65 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002d0e:	b212      	sxth	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	7019      	strb	r1, [r3, #0]
 8002d14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d18:	705a      	strb	r2, [r3, #1]

}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000440 	.word	0x20000440

08002d28 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002d32:	1dfb      	adds	r3, r7, #7
 8002d34:	461a      	mov	r2, r3
 8002d36:	2101      	movs	r1, #1
 8002d38:	204b      	movs	r0, #75	; 0x4b
 8002d3a:	f001 ff4b 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002d42:	b212      	sxth	r2, r2
 8002d44:	4611      	mov	r1, r2
 8002d46:	7019      	strb	r1, [r3, #0]
 8002d48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d4c:	705a      	strb	r2, [r3, #1]

}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000440 	.word	0x20000440

08002d5c <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	461a      	mov	r2, r3
 8002d66:	2101      	movs	r1, #1
 8002d68:	20d3      	movs	r0, #211	; 0xd3
 8002d6a:	f001 ffdf 	bl	8004d2c <RadioSpiReadRegisters>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8002d72:	b212      	sxth	r2, r2
 8002d74:	4611      	mov	r1, r2
 8002d76:	7019      	strb	r1, [r3, #0]
 8002d78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d7c:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002d7e:	79fb      	ldrb	r3, [r7, #7]

}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000440 	.word	0x20000440

08002d8c <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002d96:	f107 030f 	add.w	r3, r7, #15
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	203a      	movs	r0, #58	; 0x3a
 8002da0:	f001 ffc4 	bl	8004d2c <RadioSpiReadRegisters>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <SpiritQiSqiCheck+0x6c>)
 8002da8:	b212      	sxth	r2, r2
 8002daa:	4611      	mov	r1, r2
 8002dac:	7019      	strb	r1, [r3, #0]
 8002dae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002db2:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e004      	b.n	8002dd0 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	f023 0302 	bic.w	r3, r3, #2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002dd0:	f107 030f 	add.w	r3, r7, #15
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	203a      	movs	r0, #58	; 0x3a
 8002dda:	f001 fefb 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SpiritQiSqiCheck+0x6c>)
 8002de2:	b212      	sxth	r2, r2
 8002de4:	4611      	mov	r1, r2
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dec:	705a      	strb	r2, [r3, #1]

}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000440 	.word	0x20000440

08002dfc <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002e06:	f107 030f 	add.w	r3, r7, #15
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	203a      	movs	r0, #58	; 0x3a
 8002e10:	f001 ff8c 	bl	8004d2c <RadioSpiReadRegisters>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <SpiritQiSetSqiThreshold+0x64>)
 8002e18:	b212      	sxth	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	7019      	strb	r1, [r3, #0]
 8002e1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e22:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002e38:	f107 030f 	add.w	r3, r7, #15
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2101      	movs	r1, #1
 8002e40:	203a      	movs	r0, #58	; 0x3a
 8002e42:	f001 fec7 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SpiritQiSetSqiThreshold+0x64>)
 8002e4a:	b212      	sxth	r2, r2
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	7019      	strb	r1, [r3, #0]
 8002e50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e54:	705a      	strb	r2, [r3, #1]

}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000440 	.word	0x20000440

08002e64 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3382      	adds	r3, #130	; 0x82
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002e78:	f107 030f 	add.w	r3, r7, #15
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2101      	movs	r1, #1
 8002e80:	2022      	movs	r0, #34	; 0x22
 8002e82:	f001 fea7 	bl	8004bd4 <RadioSpiWriteRegisters>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002e8a:	b212      	sxth	r2, r2
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	7019      	strb	r1, [r3, #0]
 8002e90:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e94:	705a      	strb	r2, [r3, #1]

}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000440 	.word	0x20000440
 8002ea4:	00000000 	.word	0x00000000

08002ea8 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b08d      	sub	sp, #52	; 0x34
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002eb0:	23a0      	movs	r3, #160	; 0xa0
 8002eb2:	747b      	strb	r3, [r7, #17]
 8002eb4:	f107 0311 	add.w	r3, r7, #17
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2101      	movs	r1, #1
 8002ebc:	209f      	movs	r0, #159	; 0x9f
 8002ebe:	f001 fe89 	bl	8004bd4 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee0:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80031c0 <SpiritRadioInit+0x318>
 8002ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eec:	ee17 3a90 	vmov	r3, s15
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002ef2:	2063      	movs	r0, #99	; 0x63
 8002ef4:	f001 ffcc 	bl	8004e90 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73bb      	strb	r3, [r7, #14]
 8002efc:	e004      	b.n	8002f08 <SpiritRadioInit+0x60>
 8002efe:	7bbb      	ldrb	r3, [r7, #14]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	73bb      	strb	r3, [r7, #14]
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2bff      	cmp	r3, #255	; 0xff
 8002f0e:	d1f6      	bne.n	8002efe <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002f10:	f001 fbc6 	bl	80046a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002f14:	4bab      	ldr	r3, [pc, #684]	; (80031c4 <SpiritRadioInit+0x31c>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d1ea      	bne.n	8002ef8 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002f22:	4ba9      	ldr	r3, [pc, #676]	; (80031c8 <SpiritRadioInit+0x320>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4aa9      	ldr	r2, [pc, #676]	; (80031cc <SpiritRadioInit+0x324>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d803      	bhi.n	8002f34 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f001 f98d 	bl	800424c <SpiritRadioSetDigDiv>
 8002f32:	e002      	b.n	8002f3a <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f001 f989 	bl	800424c <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002f3a:	2062      	movs	r0, #98	; 0x62
 8002f3c:	f001 ffa8 	bl	8004e90 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002f40:	2300      	movs	r3, #0
 8002f42:	737b      	strb	r3, [r7, #13]
 8002f44:	e004      	b.n	8002f50 <SpiritRadioInit+0xa8>
 8002f46:	7b7b      	ldrb	r3, [r7, #13]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	737b      	strb	r3, [r7, #13]
 8002f50:	7b7b      	ldrb	r3, [r7, #13]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d1f6      	bne.n	8002f46 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002f58:	f001 fba2 	bl	80046a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002f5c:	4b99      	ldr	r3, [pc, #612]	; (80031c4 <SpiritRadioInit+0x31c>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d1ea      	bne.n	8002f40 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f74:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80031d0 <SpiritRadioInit+0x328>
 8002f78:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f7c:	4b92      	ldr	r3, [pc, #584]	; (80031c8 <SpiritRadioInit+0x320>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f90:	ee17 3a90 	vmov	r3, s15
 8002f94:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002fa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	025a      	lsls	r2, r3, #9
 8002fb2:	4b85      	ldr	r3, [pc, #532]	; (80031c8 <SpiritRadioInit+0x320>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fca7 	bl	800291c <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002fce:	f107 0310 	add.w	r3, r7, #16
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	20a3      	movs	r0, #163	; 0xa3
 8002fd8:	f001 fea8 	bl	8004d2c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002fdc:	7c3b      	ldrb	r3, [r7, #16]
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	743b      	strb	r3, [r7, #16]
 8002fe6:	f107 0310 	add.w	r3, r7, #16
 8002fea:	461a      	mov	r2, r3
 8002fec:	2101      	movs	r1, #1
 8002fee:	20a3      	movs	r0, #163	; 0xa3
 8002ff0:	f001 fdf0 	bl	8004bd4 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f107 0216 	add.w	r2, r7, #22
 8002ffc:	f107 0117 	add.w	r1, r7, #23
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fc59 	bl	80038b8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7b5a      	ldrb	r2, [r3, #13]
 800300e:	7dbb      	ldrb	r3, [r7, #22]
 8003010:	4313      	orrs	r3, r2
 8003012:	b2db      	uxtb	r3, r3
 8003014:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8003016:	f107 0310 	add.w	r3, r7, #16
 800301a:	461a      	mov	r2, r3
 800301c:	2101      	movs	r1, #1
 800301e:	201c      	movs	r0, #28
 8003020:	f001 fe84 	bl	8004d2c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f107 0214 	add.w	r2, r7, #20
 800302c:	f107 0115 	add.w	r1, r7, #21
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fde1 	bl	8003bf8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8003036:	7d3b      	ldrb	r3, [r7, #20]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	b25a      	sxtb	r2, r3
 800303c:	7c3b      	ldrb	r3, [r7, #16]
 800303e:	b25b      	sxtb	r3, r3
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	b25b      	sxtb	r3, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	b25a      	sxtb	r2, r3
 800304a:	7d7b      	ldrb	r3, [r7, #21]
 800304c:	b25b      	sxtb	r3, r3
 800304e:	4313      	orrs	r3, r2
 8003050:	b25b      	sxtb	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f107 0212 	add.w	r2, r7, #18
 800305e:	f107 0113 	add.w	r1, r7, #19
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fcdc 	bl	8003a20 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	b25a      	sxtb	r2, r3
 800306e:	7cbb      	ldrb	r3, [r7, #18]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	4313      	orrs	r3, r2
 8003074:	b25b      	sxtb	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 800307a:	4b53      	ldr	r3, [pc, #332]	; (80031c8 <SpiritRadioInit+0x320>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0b1b      	lsrs	r3, r3, #12
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003088:	eddf 6a52 	vldr	s13, [pc, #328]	; 80031d4 <SpiritRadioInit+0x32c>
 800308c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003090:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80031d8 <SpiritRadioInit+0x330>
 8003094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003098:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800309c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	dd0a      	ble.n	80030d4 <SpiritRadioInit+0x22c>
 80030be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c6:	edc7 7a00 	vstr	s15, [r7]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e007      	b.n	80030e4 <SpiritRadioInit+0x23c>
 80030d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030dc:	edc7 7a00 	vstr	s15, [r7]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80030e6:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <SpiritRadioInit+0x320>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a38      	ldr	r2, [pc, #224]	; (80031cc <SpiritRadioInit+0x324>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d802      	bhi.n	80030f6 <SpiritRadioInit+0x24e>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	777b      	strb	r3, [r7, #29]
 80030f4:	e035      	b.n	8003162 <SpiritRadioInit+0x2ba>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <SpiritRadioInit+0x320>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	0b5b      	lsrs	r3, r3, #13
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003104:	eddf 6a33 	vldr	s13, [pc, #204]	; 80031d4 <SpiritRadioInit+0x32c>
 8003108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80031d8 <SpiritRadioInit+0x330>
 8003110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003114:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8003118:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800311c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003124:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003138:	dd0a      	ble.n	8003150 <SpiritRadioInit+0x2a8>
 800313a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800313e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003142:	edc7 7a00 	vstr	s15, [r7]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3301      	adds	r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e007      	b.n	8003160 <SpiritRadioInit+0x2b8>
 8003150:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003158:	edc7 7a00 	vstr	s15, [r7]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8003162:	f107 030f 	add.w	r3, r7, #15
 8003166:	461a      	mov	r2, r3
 8003168:	2101      	movs	r1, #1
 800316a:	2007      	movs	r0, #7
 800316c:	f001 fd32 	bl	8004bd4 <RadioSpiWriteRegisters>
 8003170:	4602      	mov	r2, r0
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <SpiritRadioInit+0x31c>)
 8003174:	b212      	sxth	r2, r2
 8003176:	4611      	mov	r1, r2
 8003178:	7019      	strb	r1, [r3, #0]
 800317a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800317e:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <SpiritRadioInit+0x320>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <SpiritRadioInit+0x334>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d92a      	bls.n	80031e0 <SpiritRadioInit+0x338>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <SpiritRadioInit+0x320>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f963 	bl	800045c <__aeabi_ui2d>
 8003196:	2301      	movs	r3, #1
 8003198:	461c      	mov	r4, r3
 800319a:	a307      	add	r3, pc, #28	; (adr r3, 80031b8 <SpiritRadioInit+0x310>)
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f7fd fc5c 	bl	8000a5c <__aeabi_dcmpge>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <SpiritRadioInit+0x306>
 80031aa:	2300      	movs	r3, #0
 80031ac:	461c      	mov	r4, r3
 80031ae:	b2e3      	uxtb	r3, r4
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f879 	bl	80032a8 <SpiritRadioSetXtalFlag>
 80031b6:	e028      	b.n	800320a <SpiritRadioInit+0x362>
 80031b8:	00000000 	.word	0x00000000
 80031bc:	4177d784 	.word	0x4177d784
 80031c0:	49742400 	.word	0x49742400
 80031c4:	20000440 	.word	0x20000440
 80031c8:	20000364 	.word	0x20000364
 80031cc:	01c9c37f 	.word	0x01c9c37f
 80031d0:	48800000 	.word	0x48800000
 80031d4:	49afd520 	.word	0x49afd520
 80031d8:	42800000 	.word	0x42800000
 80031dc:	01c9c380 	.word	0x01c9c380
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <SpiritRadioInit+0x3f8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd f939 	bl	800045c <__aeabi_ui2d>
 80031ea:	2301      	movs	r3, #1
 80031ec:	461c      	mov	r4, r3
 80031ee:	a32a      	add	r3, pc, #168	; (adr r3, 8003298 <SpiritRadioInit+0x3f0>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd fc32 	bl	8000a5c <__aeabi_dcmpge>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <SpiritRadioInit+0x35a>
 80031fe:	2300      	movs	r3, #0
 8003200:	461c      	mov	r4, r3
 8003202:	b2e3      	uxtb	r3, r4
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f84f 	bl	80032a8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	330c      	adds	r3, #12
 800320e:	461a      	mov	r2, r3
 8003210:	2101      	movs	r1, #1
 8003212:	206c      	movs	r0, #108	; 0x6c
 8003214:	f001 fcde 	bl	8004bd4 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	461a      	mov	r2, r3
 800321e:	2104      	movs	r1, #4
 8003220:	200c      	movs	r0, #12
 8003222:	f001 fcd7 	bl	8004bd4 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8003226:	f107 0318 	add.w	r3, r7, #24
 800322a:	461a      	mov	r2, r3
 800322c:	2104      	movs	r1, #4
 800322e:	201a      	movs	r0, #26
 8003230:	f001 fcd0 	bl	8004bd4 <RadioSpiWriteRegisters>
 8003234:	4602      	mov	r2, r0
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <SpiritRadioInit+0x3fc>)
 8003238:	b212      	sxth	r2, r2
 800323a:	4611      	mov	r1, r2
 800323c:	7019      	strb	r1, [r3, #0]
 800323e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003242:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8003244:	2001      	movs	r0, #1
 8003246:	f000 ff1d 	bl	8004084 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 800324e:	23e3      	movs	r3, #227	; 0xe3
 8003250:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	461a      	mov	r2, r3
 8003258:	2102      	movs	r1, #2
 800325a:	2099      	movs	r0, #153	; 0x99
 800325c:	f001 fcba 	bl	8004bd4 <RadioSpiWriteRegisters>
 8003260:	4602      	mov	r2, r0
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <SpiritRadioInit+0x3fc>)
 8003264:	b212      	sxth	r2, r2
 8003266:	4611      	mov	r1, r2
 8003268:	7019      	strb	r1, [r3, #0]
 800326a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800326e:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8003270:	2322      	movs	r3, #34	; 0x22
 8003272:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	461a      	mov	r2, r3
 800327a:	2101      	movs	r1, #1
 800327c:	20bc      	movs	r0, #188	; 0xbc
 800327e:	f001 fca9 	bl	8004bd4 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f9ac 	bl	80035e4 <SpiritRadioSetFrequencyBase>
 800328c:	4603      	mov	r3, r0
  
}
 800328e:	4618      	mov	r0, r3
 8003290:	3734      	adds	r7, #52	; 0x34
 8003292:	46bd      	mov	sp, r7
 8003294:	bd90      	pop	{r4, r7, pc}
 8003296:	bf00      	nop
 8003298:	00000000 	.word	0x00000000
 800329c:	4177d784 	.word	0x4177d784
 80032a0:	20000364 	.word	0x20000364
 80032a4:	20000440 	.word	0x20000440

080032a8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80032b6:	f107 030f 	add.w	r3, r7, #15
 80032ba:	461a      	mov	r2, r3
 80032bc:	2101      	movs	r1, #1
 80032be:	2001      	movs	r0, #1
 80032c0:	f001 fd34 	bl	8004d2c <RadioSpiReadRegisters>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <SpiritRadioSetXtalFlag+0x70>)
 80032c8:	b212      	sxth	r2, r2
 80032ca:	4611      	mov	r1, r2
 80032cc:	7019      	strb	r1, [r3, #0]
 80032ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032d2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d105      	bne.n	80032e6 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e004      	b.n	80032f0 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80032f0:	f107 030f 	add.w	r3, r7, #15
 80032f4:	461a      	mov	r2, r3
 80032f6:	2101      	movs	r1, #1
 80032f8:	2001      	movs	r0, #1
 80032fa:	f001 fc6b 	bl	8004bd4 <RadioSpiWriteRegisters>
 80032fe:	4602      	mov	r2, r0
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SpiritRadioSetXtalFlag+0x70>)
 8003302:	b212      	sxth	r2, r2
 8003304:	4611      	mov	r1, r2
 8003306:	7019      	strb	r1, [r3, #0]
 8003308:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800330c:	705a      	strb	r2, [r3, #1]
  
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000440 	.word	0x20000440

0800331c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 800332c:	2300      	movs	r3, #0
 800332e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3a      	ldr	r2, [pc, #232]	; (800341c <SpiritRadioSearchWCP+0x100>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d906      	bls.n	8003346 <SpiritRadioSearchWCP+0x2a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a39      	ldr	r2, [pc, #228]	; (8003420 <SpiritRadioSearchWCP+0x104>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d802      	bhi.n	8003346 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003340:	2306      	movs	r3, #6
 8003342:	73bb      	strb	r3, [r7, #14]
 8003344:	e01f      	b.n	8003386 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a36      	ldr	r2, [pc, #216]	; (8003424 <SpiritRadioSearchWCP+0x108>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d906      	bls.n	800335c <SpiritRadioSearchWCP+0x40>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a35      	ldr	r2, [pc, #212]	; (8003428 <SpiritRadioSearchWCP+0x10c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d802      	bhi.n	800335c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8003356:	230c      	movs	r3, #12
 8003358:	73bb      	strb	r3, [r7, #14]
 800335a:	e014      	b.n	8003386 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a33      	ldr	r2, [pc, #204]	; (800342c <SpiritRadioSearchWCP+0x110>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d906      	bls.n	8003372 <SpiritRadioSearchWCP+0x56>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a32      	ldr	r2, [pc, #200]	; (8003430 <SpiritRadioSearchWCP+0x114>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d802      	bhi.n	8003372 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 800336c:	2310      	movs	r3, #16
 800336e:	73bb      	strb	r3, [r7, #14]
 8003370:	e009      	b.n	8003386 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <SpiritRadioSearchWCP+0x118>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d905      	bls.n	8003386 <SpiritRadioSearchWCP+0x6a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a2e      	ldr	r2, [pc, #184]	; (8003438 <SpiritRadioSearchWCP+0x11c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d801      	bhi.n	8003386 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8003382:	2320      	movs	r3, #32
 8003384:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2c      	ldr	r2, [pc, #176]	; (800343c <SpiritRadioSearchWCP+0x120>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	7bba      	ldrb	r2, [r7, #14]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8003398:	f241 631f 	movw	r3, #5663	; 0x161f
 800339c:	461a      	mov	r2, r3
 800339e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a2:	fb03 f302 	mul.w	r3, r3, r2
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80033ac:	230f      	movs	r3, #15
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e023      	b.n	80033fa <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	e005      	b.n	80033c4 <SpiritRadioSearchWCP+0xa8>
 80033b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c8:	2b0e      	cmp	r3, #14
 80033ca:	dc0c      	bgt.n	80033e6 <SpiritRadioSearchWCP+0xca>
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <SpiritRadioSearchWCP+0x124>)
 80033d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033dc:	fb03 f302 	mul.w	r3, r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d8e8      	bhi.n	80033b8 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <SpiritRadioSearchWCP+0xde>
      i--;
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	425a      	negs	r2, r3
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	f002 0207 	and.w	r2, r2, #7
 8003408:	bf58      	it	pl
 800340a:	4253      	negpl	r3, r2
 800340c:	b25b      	sxtb	r3, r3
 800340e:	b2db      	uxtb	r3, r3
  
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	2e5f567f 	.word	0x2e5f567f
 8003420:	390c2fe0 	.word	0x390c2fe0
 8003424:	1701e47f 	.word	0x1701e47f
 8003428:	1c146a60 	.word	0x1c146a60
 800342c:	11d260bf 	.word	0x11d260bf
 8003430:	14ced7e0 	.word	0x14ced7e0
 8003434:	08e18f3f 	.word	0x08e18f3f
 8003438:	0a6fd060 	.word	0x0a6fd060
 800343c:	10624dd3 	.word	0x10624dd3
 8003440:	080074b8 	.word	0x080074b8

08003444 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	461a      	mov	r2, r3
 800344e:	2104      	movs	r1, #4
 8003450:	2008      	movs	r0, #8
 8003452:	f001 fc6b 	bl	8004d2c <RadioSpiReadRegisters>
 8003456:	4602      	mov	r2, r0
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <SpiritRadioGetSynthWord+0x48>)
 800345a:	b212      	sxth	r2, r2
 800345c:	4611      	mov	r1, r2
 800345e:	7019      	strb	r1, [r3, #0]
 8003460:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003464:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003466:	793b      	ldrb	r3, [r7, #4]
 8003468:	055b      	lsls	r3, r3, #21
 800346a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 800346e:	797b      	ldrb	r3, [r7, #5]
 8003470:	035b      	lsls	r3, r3, #13
 8003472:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003474:	79bb      	ldrb	r3, [r7, #6]
 8003476:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003478:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 800347a:	79fa      	ldrb	r2, [r7, #7]
 800347c:	08d2      	lsrs	r2, r2, #3
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	4413      	add	r3, r2
  
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000440 	.word	0x20000440

08003490 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8003496:	1dfb      	adds	r3, r7, #7
 8003498:	461a      	mov	r2, r3
 800349a:	2101      	movs	r1, #1
 800349c:	200b      	movs	r0, #11
 800349e:	f001 fc45 	bl	8004d2c <RadioSpiReadRegisters>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <SpiritRadioGetBand+0x58>)
 80034a6:	b212      	sxth	r2, r2
 80034a8:	4611      	mov	r1, r2
 80034aa:	7019      	strb	r1, [r3, #0]
 80034ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034b0:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 80034bc:	2300      	movs	r3, #0
 80034be:	e00e      	b.n	80034de <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d101      	bne.n	80034ce <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e007      	b.n	80034de <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d101      	bne.n	80034dc <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 80034d8:	2302      	movs	r3, #2
 80034da:	e000      	b.n	80034de <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 80034dc:	2303      	movs	r3, #3
  }
  
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000440 	.word	0x20000440

080034ec <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 80034f2:	1dfb      	adds	r3, r7, #7
 80034f4:	461a      	mov	r2, r3
 80034f6:	2101      	movs	r1, #1
 80034f8:	206c      	movs	r0, #108	; 0x6c
 80034fa:	f001 fc17 	bl	8004d2c <RadioSpiReadRegisters>
 80034fe:	4602      	mov	r2, r0
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <SpiritRadioGetChannel+0x2c>)
 8003502:	b212      	sxth	r2, r2
 8003504:	4611      	mov	r1, r2
 8003506:	7019      	strb	r1, [r3, #0]
 8003508:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800350c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800350e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000440 	.word	0x20000440

0800351c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	461a      	mov	r2, r3
 8003526:	2101      	movs	r1, #1
 8003528:	200c      	movs	r0, #12
 800352a:	f001 fbff 	bl	8004d2c <RadioSpiReadRegisters>
 800352e:	4602      	mov	r2, r0
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <SpiritRadioGetChannelSpace+0x38>)
 8003532:	b212      	sxth	r2, r2
 8003534:	4611      	mov	r1, r2
 8003536:	7019      	strb	r1, [r3, #0]
 8003538:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800353c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	461a      	mov	r2, r3
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SpiritRadioGetChannelSpace+0x3c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fb03 f302 	mul.w	r3, r3, r2
 800354a:	0bdb      	lsrs	r3, r3, #15
  
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000440 	.word	0x20000440
 8003558:	20000364 	.word	0x20000364

0800355c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003562:	1d3b      	adds	r3, r7, #4
 8003564:	461a      	mov	r2, r3
 8003566:	2102      	movs	r1, #2
 8003568:	200e      	movs	r0, #14
 800356a:	f001 fbdf 	bl	8004d2c <RadioSpiReadRegisters>
 800356e:	4602      	mov	r2, r0
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <SpiritRadioGetFrequencyOffset+0x80>)
 8003572:	b212      	sxth	r2, r2
 8003574:	4611      	mov	r1, r2
 8003576:	7019      	strb	r1, [r3, #0]
 8003578:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800357c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 800357e:	793b      	ldrb	r3, [r7, #4]
 8003580:	b29b      	uxth	r3, r3
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	b29a      	uxth	r2, r3
 8003586:	797b      	ldrb	r3, [r7, #5]
 8003588:	b29b      	uxth	r3, r3
 800358a:	4413      	add	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80035a0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	e004      	b.n	80035b4 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80035b4:	1cbb      	adds	r3, r7, #2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80035ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035be:	4a08      	ldr	r2, [pc, #32]	; (80035e0 <SpiritRadioGetFrequencyOffset+0x84>)
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da03      	bge.n	80035d2 <SpiritRadioGetFrequencyOffset+0x76>
 80035ca:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80035ce:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80035d2:	149b      	asrs	r3, r3, #18
  
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000440 	.word	0x20000440
 80035e0:	20000364 	.word	0x20000364

080035e4 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 80035e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035e8:	b08a      	sub	sp, #40	; 0x28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a79      	ldr	r2, [pc, #484]	; (80037dc <SpiritRadioSetFrequencyBase+0x1f8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d907      	bls.n	800360c <SpiritRadioSetFrequencyBase+0x28>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a78      	ldr	r2, [pc, #480]	; (80037e0 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d803      	bhi.n	800360c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800360a:	e022      	b.n	8003652 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a75      	ldr	r2, [pc, #468]	; (80037e4 <SpiritRadioSetFrequencyBase+0x200>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d907      	bls.n	8003624 <SpiritRadioSetFrequencyBase+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a74      	ldr	r2, [pc, #464]	; (80037e8 <SpiritRadioSetFrequencyBase+0x204>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d803      	bhi.n	8003624 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003622:	e016      	b.n	8003652 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a71      	ldr	r2, [pc, #452]	; (80037ec <SpiritRadioSetFrequencyBase+0x208>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d907      	bls.n	800363c <SpiritRadioSetFrequencyBase+0x58>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a70      	ldr	r2, [pc, #448]	; (80037f0 <SpiritRadioSetFrequencyBase+0x20c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d803      	bhi.n	800363c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003634:	2302      	movs	r3, #2
 8003636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800363a:	e00a      	b.n	8003652 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a6d      	ldr	r2, [pc, #436]	; (80037f4 <SpiritRadioSetFrequencyBase+0x210>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d906      	bls.n	8003652 <SpiritRadioSetFrequencyBase+0x6e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a6c      	ldr	r2, [pc, #432]	; (80037f8 <SpiritRadioSetFrequencyBase+0x214>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d802      	bhi.n	8003652 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800364c:	2303      	movs	r3, #3
 800364e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003652:	f7ff ff83 	bl	800355c <SpiritRadioGetFrequencyOffset>
 8003656:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003658:	f7ff ff60 	bl	800351c <SpiritRadioGetChannelSpace>
 800365c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800365e:	f7ff ff45 	bl	80034ec <SpiritRadioGetChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003666:	6a3a      	ldr	r2, [r7, #32]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	441a      	add	r2, r3
 800366c:	7efb      	ldrb	r3, [r7, #27]
 800366e:	69f9      	ldr	r1, [r7, #28]
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003678:	f000 fdc6 	bl	8004208 <SpiritRadioGetRefDiv>
 800367c:	4603      	mov	r3, r0
 800367e:	3301      	adds	r3, #1
 8003680:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003686:	2b03      	cmp	r3, #3
 8003688:	d839      	bhi.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <SpiritRadioSetFrequencyBase+0xac>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036d1 	.word	0x080036d1
 8003698:	080036b9 	.word	0x080036b9
 800369c:	080036a1 	.word	0x080036a1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4a56      	ldr	r2, [pc, #344]	; (80037fc <SpiritRadioSetFrequencyBase+0x218>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d803      	bhi.n	80036b0 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7fe fcfb 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80036ae:	e026      	b.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80036b0:	2001      	movs	r0, #1
 80036b2:	f7fe fcf7 	bl	80020a4 <SpiritCalibrationSelectVco>
    break;
 80036b6:	e022      	b.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	4a51      	ldr	r2, [pc, #324]	; (8003800 <SpiritRadioSetFrequencyBase+0x21c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d803      	bhi.n	80036c8 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fe fcef 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80036c6:	e01a      	b.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7fe fceb 	bl	80020a4 <SpiritCalibrationSelectVco>
    break;
 80036ce:	e016      	b.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4a4c      	ldr	r2, [pc, #304]	; (8003804 <SpiritRadioSetFrequencyBase+0x220>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d803      	bhi.n	80036e0 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80036d8:	2000      	movs	r0, #0
 80036da:	f7fe fce3 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80036de:	e00e      	b.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7fe fcdf 	bl	80020a4 <SpiritCalibrationSelectVco>
    break;
 80036e6:	e00a      	b.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	4a47      	ldr	r2, [pc, #284]	; (8003808 <SpiritRadioSetFrequencyBase+0x224>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d803      	bhi.n	80036f8 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f7fe fcd7 	bl	80020a4 <SpiritCalibrationSelectVco>
 80036f6:	e002      	b.n	80036fe <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7fe fcd3 	bl	80020a4 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80036fe:	6978      	ldr	r0, [r7, #20]
 8003700:	f7ff fe0c 	bl	800331c <SpiritRadioSearchWCP>
 8003704:	4603      	mov	r3, r0
 8003706:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800370c:	4a3f      	ldr	r2, [pc, #252]	; (800380c <SpiritRadioSetFrequencyBase+0x228>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	461a      	mov	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	fb03 f302 	mul.w	r3, r3, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc fe9f 	bl	800045c <__aeabi_ui2d>
 800371e:	4604      	mov	r4, r0
 8003720:	460d      	mov	r5, r1
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	049b      	lsls	r3, r3, #18
 8003726:	4618      	mov	r0, r3
 8003728:	f7fc fea8 	bl	800047c <__aeabi_i2d>
 800372c:	4680      	mov	r8, r0
 800372e:	4689      	mov	r9, r1
 8003730:	4b37      	ldr	r3, [pc, #220]	; (8003810 <SpiritRadioSetFrequencyBase+0x22c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fe91 	bl	800045c <__aeabi_ui2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4640      	mov	r0, r8
 8003740:	4649      	mov	r1, r9
 8003742:	f7fd f82f 	bl	80007a4 <__aeabi_ddiv>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4620      	mov	r0, r4
 800374c:	4629      	mov	r1, r5
 800374e:	f7fc feff 	bl	8000550 <__aeabi_dmul>
 8003752:	4603      	mov	r3, r0
 8003754:	460c      	mov	r4, r1
 8003756:	4618      	mov	r0, r3
 8003758:	4621      	mov	r1, r4
 800375a:	f7fd f993 	bl	8000a84 <__aeabi_d2uiz>
 800375e:	4603      	mov	r3, r0
 8003760:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	0d5b      	lsrs	r3, r3, #21
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	b2da      	uxtb	r2, r3
 800376e:	7cbb      	ldrb	r3, [r7, #18]
 8003770:	015b      	lsls	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4313      	orrs	r3, r2
 8003776:	b2db      	uxtb	r3, r3
 8003778:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	0b5b      	lsrs	r3, r3, #13
 800377e:	b2db      	uxtb	r3, r3
 8003780:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	b2db      	uxtb	r3, r3
 8003788:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	b2da      	uxtb	r2, r3
 8003792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003796:	491f      	ldr	r1, [pc, #124]	; (8003814 <SpiritRadioSetFrequencyBase+0x230>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	4313      	orrs	r3, r2
 800379c:	b2db      	uxtb	r3, r3
 800379e:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	461a      	mov	r2, r3
 80037a6:	2104      	movs	r1, #4
 80037a8:	2008      	movs	r0, #8
 80037aa:	f001 fa13 	bl	8004bd4 <RadioSpiWriteRegisters>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <SpiritRadioSetFrequencyBase+0x234>)
 80037b2:	b212      	sxth	r2, r2
 80037b4:	4611      	mov	r1, r2
 80037b6:	7019      	strb	r1, [r3, #0]
 80037b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037bc:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <SpiritRadioSetFrequencyBase+0x238>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d103      	bne.n	80037ce <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80037c6:	f7fe ff95 	bl	80026f4 <SpiritManagementWaVcoCalibration>
 80037ca:	4603      	mov	r3, r0
 80037cc:	e000      	b.n	80037d0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3728      	adds	r7, #40	; 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037da:	bf00      	nop
 80037dc:	2e5f567f 	.word	0x2e5f567f
 80037e0:	390c2fe0 	.word	0x390c2fe0
 80037e4:	1701e47f 	.word	0x1701e47f
 80037e8:	1c146a60 	.word	0x1c146a60
 80037ec:	11d260bf 	.word	0x11d260bf
 80037f0:	14ced7e0 	.word	0x14ced7e0
 80037f4:	08e18f3f 	.word	0x08e18f3f
 80037f8:	0a6fd060 	.word	0x0a6fd060
 80037fc:	099cf4e1 	.word	0x099cf4e1
 8003800:	1339e9c3 	.word	0x1339e9c3
 8003804:	19a28d05 	.word	0x19a28d05
 8003808:	33451a0a 	.word	0x33451a0a
 800380c:	080073fc 	.word	0x080073fc
 8003810:	20000364 	.word	0x20000364
 8003814:	08007400 	.word	0x08007400
 8003818:	20000440 	.word	0x20000440
 800381c:	200001e1 	.word	0x200001e1

08003820 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003820:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003828:	f7ff fe0c 	bl	8003444 <SpiritRadioGetSynthWord>
 800382c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800382e:	f7ff fe2f 	bl	8003490 <SpiritRadioGetBand>
 8003832:	4603      	mov	r3, r0
 8003834:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003836:	f000 fce7 	bl	8004208 <SpiritRadioGetRefDiv>
 800383a:	4603      	mov	r3, r0
 800383c:	3301      	adds	r3, #1
 800383e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7fc fe0b 	bl	800045c <__aeabi_ui2d>
 8003846:	4604      	mov	r4, r0
 8003848:	460d      	mov	r5, r1
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <SpiritRadioGetFrequencyBase+0x90>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe04 	bl	800045c <__aeabi_ui2d>
 8003854:	4680      	mov	r8, r0
 8003856:	4689      	mov	r9, r1
 8003858:	78bb      	ldrb	r3, [r7, #2]
 800385a:	049b      	lsls	r3, r3, #18
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	4915      	ldr	r1, [pc, #84]	; (80038b4 <SpiritRadioGetFrequencyBase+0x94>)
 8003860:	5c8a      	ldrb	r2, [r1, r2]
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fe08 	bl	800047c <__aeabi_i2d>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4640      	mov	r0, r8
 8003872:	4649      	mov	r1, r9
 8003874:	f7fc ff96 	bl	80007a4 <__aeabi_ddiv>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	f7fc fe66 	bl	8000550 <__aeabi_dmul>
 8003884:	4603      	mov	r3, r0
 8003886:	460c      	mov	r4, r1
 8003888:	ec44 3b17 	vmov	d7, r3, r4
 800388c:	eeb0 0a47 	vmov.f32	s0, s14
 8003890:	eef0 0a67 	vmov.f32	s1, s15
 8003894:	f003 fd46 	bl	8007324 <round>
 8003898:	ec54 3b10 	vmov	r3, r4, d0
 800389c:	4618      	mov	r0, r3
 800389e:	4621      	mov	r1, r4
 80038a0:	f7fd f8f0 	bl	8000a84 <__aeabi_d2uiz>
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038b0:	20000364 	.word	0x20000364
 80038b4:	080073fc 	.word	0x080073fc

080038b8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80038c8:	230f      	movs	r3, #15
 80038ca:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80038d0:	f000 fcec 	bl	80042ac <SpiritRadioGetDigDiv>
 80038d4:	4603      	mov	r3, r0
 80038d6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80038d8:	e015      	b.n	8003906 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80038da:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <SpiritRadioSearchDatarateME+0x164>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038e2:	f1c3 0114 	rsb	r1, r3, #20
 80038e6:	7ebb      	ldrb	r3, [r7, #26]
 80038e8:	440b      	add	r3, r1
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	763b      	strb	r3, [r7, #24]
 80038f8:	e005      	b.n	8003906 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80038fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b2db      	uxtb	r3, r3
 8003904:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003906:	7e3b      	ldrb	r3, [r7, #24]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <SpiritRadioSearchDatarateME+0x5e>
 800390e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003912:	2b00      	cmp	r3, #0
 8003914:	dae1      	bge.n	80038da <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003916:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800391a:	2b00      	cmp	r3, #0
 800391c:	da01      	bge.n	8003922 <SpiritRadioSearchDatarateME+0x6a>
 800391e:	2300      	movs	r3, #0
 8003920:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003922:	7ffa      	ldrb	r2, [r7, #31]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003928:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800392c:	f1c3 0317 	rsb	r3, r3, #23
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	409a      	lsls	r2, r3
 8003934:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <SpiritRadioSearchDatarateME+0x164>)
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	7ebb      	ldrb	r3, [r7, #26]
 800393a:	3305      	adds	r3, #5
 800393c:	fa21 f303 	lsr.w	r3, r1, r3
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003946:	2300      	movs	r3, #0
 8003948:	77bb      	strb	r3, [r7, #30]
 800394a:	e033      	b.n	80039b4 <SpiritRadioSearchDatarateME+0xfc>
  {
    if((cMantissaTmp+j-1))
 800394c:	7e7a      	ldrb	r2, [r7, #25]
 800394e:	7fbb      	ldrb	r3, [r7, #30]
 8003950:	4413      	add	r3, r2
 8003952:	2b01      	cmp	r3, #1
 8003954:	d022      	beq.n	800399c <SpiritRadioSearchDatarateME+0xe4>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	b29a      	uxth	r2, r3
 800395a:	7e7b      	ldrb	r3, [r7, #25]
 800395c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003960:	7fbb      	ldrb	r3, [r7, #30]
 8003962:	440b      	add	r3, r1
 8003964:	3b01      	subs	r3, #1
 8003966:	4618      	mov	r0, r3
 8003968:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <SpiritRadioSearchDatarateME+0x164>)
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	7ebb      	ldrb	r3, [r7, #26]
 800396e:	3305      	adds	r3, #5
 8003970:	fa21 f303 	lsr.w	r3, r1, r3
 8003974:	fb03 f100 	mul.w	r1, r3, r0
 8003978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800397c:	f1c3 0317 	rsb	r3, r3, #23
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
 8003984:	b29b      	uxth	r3, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	b29a      	uxth	r2, r3
 800398a:	7fbb      	ldrb	r3, [r7, #30]
 800398c:	b212      	sxth	r2, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	f107 0120 	add.w	r1, r7, #32
 8003994:	440b      	add	r3, r1
 8003996:	f823 2c10 	strh.w	r2, [r3, #-16]
 800399a:	e008      	b.n	80039ae <SpiritRadioSearchDatarateME+0xf6>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800399c:	7fbb      	ldrb	r3, [r7, #30]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	f107 0220 	add.w	r2, r7, #32
 80039a4:	4413      	add	r3, r2
 80039a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80039aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80039ae:	7fbb      	ldrb	r3, [r7, #30]
 80039b0:	3301      	adds	r3, #1
 80039b2:	77bb      	strb	r3, [r7, #30]
 80039b4:	7fbb      	ldrb	r3, [r7, #30]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d9c8      	bls.n	800394c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80039ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039be:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	76fb      	strb	r3, [r7, #27]
 80039c4:	e023      	b.n	8003a0e <SpiritRadioSearchDatarateME+0x156>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80039c6:	7efb      	ldrb	r3, [r7, #27]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	f107 0220 	add.w	r2, r7, #32
 80039ce:	4413      	add	r3, r2
 80039d0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80039d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80039d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80039dc:	8bbb      	ldrh	r3, [r7, #28]
 80039de:	429a      	cmp	r2, r3
 80039e0:	da12      	bge.n	8003a08 <SpiritRadioSearchDatarateME+0x150>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80039e2:	7efb      	ldrb	r3, [r7, #27]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	f107 0220 	add.w	r2, r7, #32
 80039ea:	4413      	add	r3, r2
 80039ec:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bfb8      	it	lt
 80039f4:	425b      	neglt	r3, r3
 80039f6:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80039f8:	7e7a      	ldrb	r2, [r7, #25]
 80039fa:	7efb      	ldrb	r3, [r7, #27]
 80039fc:	4413      	add	r3, r2
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003a08:	7efb      	ldrb	r3, [r7, #27]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	7efb      	ldrb	r3, [r7, #27]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d9d8      	bls.n	80039c6 <SpiritRadioSearchDatarateME+0x10e>
    }
  }
  
}
 8003a14:	bf00      	nop
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000364 	.word	0x20000364

08003a20 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003a32:	f000 fc3b 	bl	80042ac <SpiritRadioGetDigDiv>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a42:	e002      	b.n	8003a4a <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003a4a:	4b66      	ldr	r3, [pc, #408]	; (8003be4 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	4a64      	ldr	r2, [pc, #400]	; (8003be8 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a66:	e006      	b.n	8003a76 <SpiritRadioSearchChannelBwME+0x56>
 8003a68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a7a:	2b59      	cmp	r3, #89	; 0x59
 8003a7c:	dc0f      	bgt.n	8003a9e <SpiritRadioSearchChannelBwME+0x7e>
 8003a7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a82:	4a5a      	ldr	r2, [pc, #360]	; (8003bec <SpiritRadioSearchChannelBwME+0x1cc>)
 8003a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fb03 f302 	mul.w	r3, r3, r2
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <SpiritRadioSearchChannelBwME+0x1d0>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0adb      	lsrs	r3, r3, #11
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3e4      	bcc.n	8003a68 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003a9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d07d      	beq.n	8003ba2 <SpiritRadioSearchChannelBwME+0x182>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aaa:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003ab2:	e03e      	b.n	8003b32 <SpiritRadioSearchChannelBwME+0x112>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003ab4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003ab8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003abc:	4413      	add	r3, r2
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da07      	bge.n	8003ad4 <SpiritRadioSearchChannelBwME+0xb4>
 8003ac4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003ac8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003acc:	4413      	add	r3, r2
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	2b59      	cmp	r3, #89	; 0x59
 8003ad2:	dc1f      	bgt.n	8003b14 <SpiritRadioSearchChannelBwME+0xf4>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003adc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	4941      	ldr	r1, [pc, #260]	; (8003bec <SpiritRadioSearchChannelBwME+0x1cc>)
 8003ae6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003aea:	4619      	mov	r1, r3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	fb03 f301 	mul.w	r3, r3, r1
 8003af2:	493f      	ldr	r1, [pc, #252]	; (8003bf0 <SpiritRadioSearchChannelBwME+0x1d0>)
 8003af4:	fba1 1303 	umull	r1, r3, r1, r3
 8003af8:	0adb      	lsrs	r3, r3, #11
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b04:	b212      	sxth	r2, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003b12:	e009      	b.n	8003b28 <SpiritRadioSearchChannelBwME+0x108>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003b14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b1e:	4413      	add	r3, r2
 8003b20:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003b24:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003b28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003b32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d9bc      	bls.n	8003ab4 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b3e:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003b46:	e028      	b.n	8003b9a <SpiritRadioSearchChannelBwME+0x17a>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003b48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b52:	4413      	add	r3, r2
 8003b54:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003b58:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003b5c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b62:	429a      	cmp	r2, r3
 8003b64:	da14      	bge.n	8003b90 <SpiritRadioSearchChannelBwME+0x170>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003b66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b70:	4413      	add	r3, r2
 8003b72:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bfb8      	it	lt
 8003b7a:	425b      	neglt	r3, r3
 8003b7c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003b7e:	7efa      	ldrb	r2, [r7, #27]
 8003b80:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b84:	4413      	add	r3, r2
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003b90:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b94:	3301      	adds	r3, #1
 8003b96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003b9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d9d2      	bls.n	8003b48 <SpiritRadioSearchChannelBwME+0x128>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003ba2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <SpiritRadioSearchChannelBwME+0x1d4>)
 8003ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8003bac:	1052      	asrs	r2, r2, #1
 8003bae:	17db      	asrs	r3, r3, #31
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	b25b      	sxtb	r3, r3
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003bba:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <SpiritRadioSearchChannelBwME+0x1d4>)
 8003bc0:	fb83 1302 	smull	r1, r3, r3, r2
 8003bc4:	1059      	asrs	r1, r3, #1
 8003bc6:	17d3      	asrs	r3, r2, #31
 8003bc8:	1ac9      	subs	r1, r1, r3
 8003bca:	460b      	mov	r3, r1
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	701a      	strb	r2, [r3, #0]
  
}
 8003bda:	bf00      	nop
 8003bdc:	3728      	adds	r7, #40	; 0x28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000364 	.word	0x20000364
 8003be8:	51eb851f 	.word	0x51eb851f
 8003bec:	08007404 	.word	0x08007404
 8003bf0:	c9a633fd 	.word	0xc9a633fd
 8003bf4:	38e38e39 	.word	0x38e38e39

08003bf8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003bf8:	b5b0      	push	{r4, r5, r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <SpiritRadioSearchFreqDevME+0x160>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c14:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003d5c <SpiritRadioSearchFreqDevME+0x164>
 8003c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c1c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c26:	e028      	b.n	8003c7a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fc22 	bl	800047c <__aeabi_i2d>
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	4b48      	ldr	r3, [pc, #288]	; (8003d60 <SpiritRadioSearchFreqDevME+0x168>)
 8003c3e:	f7fc fc87 	bl	8000550 <__aeabi_dmul>
 8003c42:	4603      	mov	r3, r0
 8003c44:	460c      	mov	r4, r1
 8003c46:	4618      	mov	r0, r3
 8003c48:	4621      	mov	r1, r4
 8003c4a:	f7fc ff1b 	bl	8000a84 <__aeabi_d2uiz>
 8003c4e:	ee07 0a90 	vmov	s15, r0
 8003c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c56:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c62:	ee17 3a90 	vmov	r3, s15
 8003c66:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d309      	bcc.n	8003c84 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c74:	3301      	adds	r3, #1
 8003c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c7e:	2b09      	cmp	r3, #9
 8003c80:	d9d2      	bls.n	8003c28 <SpiritRadioSearchFreqDevME+0x30>
 8003c82:	e000      	b.n	8003c86 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003c84:	bf00      	nop
  }
  (*pcE) = i;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c8c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c94:	e043      	b.n	8003d1e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fbec 	bl	800047c <__aeabi_i2d>
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <SpiritRadioSearchFreqDevME+0x16c>)
 8003caa:	f7fc fa9b 	bl	80001e4 <__adddf3>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cbe:	f7fc fd71 	bl	80007a4 <__aeabi_ddiv>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	4625      	mov	r5, r4
 8003cc8:	461c      	mov	r4, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4093      	lsls	r3, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fbd1 	bl	800047c <__aeabi_i2d>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f7fc fc35 	bl	8000550 <__aeabi_dmul>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460c      	mov	r4, r1
 8003cea:	4618      	mov	r0, r3
 8003cec:	4621      	mov	r1, r4
 8003cee:	f7fc fec9 	bl	8000a84 <__aeabi_d2uiz>
 8003cf2:	ee07 0a90 	vmov	s15, r0
 8003cf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d06:	ee17 3a90 	vmov	r3, s15
 8003d0a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d309      	bcc.n	8003d28 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d22:	2b07      	cmp	r3, #7
 8003d24:	d9b7      	bls.n	8003c96 <SpiritRadioSearchFreqDevME+0x9e>
 8003d26:	e000      	b.n	8003d2a <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003d28:	bf00      	nop
  }
  
  (*pcM)=i;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d30:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	69f9      	ldr	r1, [r7, #28]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1acb      	subs	r3, r1, r3
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d205      	bcs.n	8003d4e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	701a      	strb	r2, [r3, #0]
  
}
 8003d4e:	bf00      	nop
 8003d50:	3728      	adds	r7, #40	; 0x28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bdb0      	pop	{r4, r5, r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000364 	.word	0x20000364
 8003d5c:	48800000 	.word	0x48800000
 8003d60:	401e0000 	.word	0x401e0000
 8003d64:	40200000 	.word	0x40200000

08003d68 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i;
  uint8_t j=0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a74      	ldr	r2, [pc, #464]	; (8003f4c <SpiritRadioGetdBm2Reg+0x1e4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d90c      	bls.n	8003d9a <SpiritRadioGetdBm2Reg+0x32>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a73      	ldr	r2, [pc, #460]	; (8003f50 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d808      	bhi.n	8003d9a <SpiritRadioGetdBm2Reg+0x32>
  {
    i=0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a71      	ldr	r2, [pc, #452]	; (8003f54 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d822      	bhi.n	8003dda <SpiritRadioGetdBm2Reg+0x72>
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
 8003d98:	e01f      	b.n	8003dda <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a6e      	ldr	r2, [pc, #440]	; (8003f58 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d906      	bls.n	8003db0 <SpiritRadioGetdBm2Reg+0x48>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a6d      	ldr	r2, [pc, #436]	; (8003f5c <SpiritRadioGetdBm2Reg+0x1f4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d802      	bhi.n	8003db0 <SpiritRadioGetdBm2Reg+0x48>
  {
    i=2;
 8003daa:	2302      	movs	r3, #2
 8003dac:	75fb      	strb	r3, [r7, #23]
 8003dae:	e014      	b.n	8003dda <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a6b      	ldr	r2, [pc, #428]	; (8003f60 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d906      	bls.n	8003dc6 <SpiritRadioGetdBm2Reg+0x5e>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a6a      	ldr	r2, [pc, #424]	; (8003f64 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d802      	bhi.n	8003dc6 <SpiritRadioGetdBm2Reg+0x5e>
  {
    i=3;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	75fb      	strb	r3, [r7, #23]
 8003dc4:	e009      	b.n	8003dda <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a67      	ldr	r2, [pc, #412]	; (8003f68 <SpiritRadioGetdBm2Reg+0x200>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d905      	bls.n	8003dda <SpiritRadioGetdBm2Reg+0x72>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a66      	ldr	r2, [pc, #408]	; (8003f6c <SpiritRadioGetdBm2Reg+0x204>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d801      	bhi.n	8003dda <SpiritRadioGetdBm2Reg+0x72>
  {
    i=4;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8003de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dea:	dd2f      	ble.n	8003e4c <SpiritRadioGetdBm2Reg+0xe4>
 8003dec:	7dfa      	ldrb	r2, [r7, #23]
 8003dee:	4960      	ldr	r1, [pc, #384]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	440b      	add	r3, r1
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	edd3 7a00 	vldr	s15, [r3]
 8003e00:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e08:	7dfa      	ldrb	r2, [r7, #23]
 8003e0a:	4959      	ldr	r1, [pc, #356]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	440b      	add	r3, r1
 8003e16:	330c      	adds	r3, #12
 8003e18:	ed93 6a00 	vldr	s12, [r3]
 8003e1c:	7dfa      	ldrb	r2, [r7, #23]
 8003e1e:	4954      	ldr	r1, [pc, #336]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	edd3 6a00 	vldr	s13, [r3]
 8003e30:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e38:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e44:	dd02      	ble.n	8003e4c <SpiritRadioGetdBm2Reg+0xe4>
      j=0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75bb      	strb	r3, [r7, #22]
 8003e4a:	e035      	b.n	8003eb8 <SpiritRadioGetdBm2Reg+0x150>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	d82e      	bhi.n	8003eb8 <SpiritRadioGetdBm2Reg+0x150>
 8003e5a:	7dfa      	ldrb	r2, [r7, #23]
 8003e5c:	4944      	ldr	r1, [pc, #272]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003e5e:	4613      	mov	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	440b      	add	r3, r1
 8003e68:	3308      	adds	r3, #8
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003f74 <SpiritRadioGetdBm2Reg+0x20c>
 8003e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e76:	7dfa      	ldrb	r2, [r7, #23]
 8003e78:	493d      	ldr	r1, [pc, #244]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	330c      	adds	r3, #12
 8003e86:	ed93 6a00 	vldr	s12, [r3]
 8003e8a:	7dfa      	ldrb	r2, [r7, #23]
 8003e8c:	4938      	ldr	r1, [pc, #224]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	3308      	adds	r3, #8
 8003e9a:	edd3 6a00 	vldr	s13, [r3]
 8003e9e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb2:	d501      	bpl.n	8003eb8 <SpiritRadioGetdBm2Reg+0x150>
      j=2;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003eb8:	7dfa      	ldrb	r2, [r7, #23]
 8003eba:	7dbb      	ldrb	r3, [r7, #22]
 8003ebc:	0059      	lsls	r1, r3, #1
 8003ebe:	482c      	ldr	r0, [pc, #176]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	440b      	add	r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4403      	add	r3, r0
 8003ece:	ed93 7a00 	vldr	s14, [r3]
 8003ed2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eda:	7dfa      	ldrb	r2, [r7, #23]
 8003edc:	7dbb      	ldrb	r3, [r7, #22]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	1c59      	adds	r1, r3, #1
 8003ee2:	4823      	ldr	r0, [pc, #140]	; (8003f70 <SpiritRadioGetdBm2Reg+0x208>)
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	440b      	add	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4403      	add	r3, r0
 8003ef2:	edd3 7a00 	vldr	s15, [r3]
 8003ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efa:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0e:	d503      	bpl.n	8003f18 <SpiritRadioGetdBm2Reg+0x1b0>
    fReg=1;
 8003f10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e00a      	b.n	8003f2e <SpiritRadioGetdBm2Reg+0x1c6>
  else if(fReg>90) 
 8003f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f1c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003f78 <SpiritRadioGetdBm2Reg+0x210>
 8003f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f28:	dd01      	ble.n	8003f2e <SpiritRadioGetdBm2Reg+0x1c6>
    fReg=90;
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <SpiritRadioGetdBm2Reg+0x214>)
 8003f2c:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003f2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f36:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f3a:	793b      	ldrb	r3, [r7, #4]
 8003f3c:	b2db      	uxtb	r3, r3
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2e5f567f 	.word	0x2e5f567f
 8003f50:	390c2fe0 	.word	0x390c2fe0
 8003f54:	35a4e8ff 	.word	0x35a4e8ff
 8003f58:	1701e47f 	.word	0x1701e47f
 8003f5c:	1c146a60 	.word	0x1c146a60
 8003f60:	11d260bf 	.word	0x11d260bf
 8003f64:	14ced7e0 	.word	0x14ced7e0
 8003f68:	08e18f3f 	.word	0x08e18f3f
 8003f6c:	0a6fd060 	.word	0x0a6fd060
 8003f70:	080074d8 	.word	0x080074d8
 8003f74:	42200000 	.word	0x42200000
 8003f78:	42b40000 	.word	0x42b40000
 8003f7c:	42b40000 	.word	0x42b40000

08003f80 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	ed87 0a00 	vstr	s0, [r7]
 8003f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003f8e:	f7ff fc47 	bl	8003820 <SpiritRadioGetFrequencyBase>
 8003f92:	4603      	mov	r3, r0
 8003f94:	ed97 0a00 	vldr	s0, [r7]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fee5 	bl	8003d68 <SpiritRadioGetdBm2Reg>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	f1c3 0317 	rsb	r3, r3, #23
 8003fa8:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003faa:	f107 020e 	add.w	r2, r7, #14
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fe0e 	bl	8004bd4 <RadioSpiWriteRegisters>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <SpiritRadioSetPALeveldBm+0x50>)
 8003fbc:	b212      	sxth	r2, r2
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	7019      	strb	r1, [r3, #0]
 8003fc2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fc6:	705a      	strb	r2, [r3, #1]
  
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000440 	.word	0x20000440

08003fd4 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003fde:	f107 030f 	add.w	r3, r7, #15
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	2018      	movs	r0, #24
 8003fe8:	f000 fea0 	bl	8004d2c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004000:	f107 030f 	add.w	r3, r7, #15
 8004004:	461a      	mov	r2, r3
 8004006:	2101      	movs	r1, #1
 8004008:	2018      	movs	r0, #24
 800400a:	f000 fde3 	bl	8004bd4 <RadioSpiWriteRegisters>
 800400e:	4602      	mov	r2, r0
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <SpiritRadioSetPACwc+0x54>)
 8004012:	b212      	sxth	r2, r2
 8004014:	4611      	mov	r1, r2
 8004016:	7019      	strb	r1, [r3, #0]
 8004018:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800401c:	705a      	strb	r2, [r3, #1]
  
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000440 	.word	0x20000440

0800402c <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004036:	f107 030f 	add.w	r3, r7, #15
 800403a:	461a      	mov	r2, r3
 800403c:	2101      	movs	r1, #1
 800403e:	2018      	movs	r0, #24
 8004040:	f000 fe74 	bl	8004d2c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	b2db      	uxtb	r3, r3
 800404c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	4313      	orrs	r3, r2
 8004054:	b2db      	uxtb	r3, r3
 8004056:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004058:	f107 030f 	add.w	r3, r7, #15
 800405c:	461a      	mov	r2, r3
 800405e:	2101      	movs	r1, #1
 8004060:	2018      	movs	r0, #24
 8004062:	f000 fdb7 	bl	8004bd4 <RadioSpiWriteRegisters>
 8004066:	4602      	mov	r2, r0
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800406a:	b212      	sxth	r2, r2
 800406c:	4611      	mov	r1, r2
 800406e:	7019      	strb	r1, [r3, #0]
 8004070:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004074:	705a      	strb	r2, [r3, #1]
  
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000440 	.word	0x20000440

08004084 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8004092:	f107 030f 	add.w	r3, r7, #15
 8004096:	461a      	mov	r2, r3
 8004098:	2101      	movs	r1, #1
 800409a:	201e      	movs	r0, #30
 800409c:	f000 fe46 	bl	8004d2c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	e004      	b.n	80040bc <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80040bc:	f107 030f 	add.w	r3, r7, #15
 80040c0:	461a      	mov	r2, r3
 80040c2:	2101      	movs	r1, #1
 80040c4:	201e      	movs	r0, #30
 80040c6:	f000 fd85 	bl	8004bd4 <RadioSpiWriteRegisters>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <SpiritRadioAFCFreezeOnSync+0x60>)
 80040ce:	b212      	sxth	r2, r2
 80040d0:	4611      	mov	r1, r2
 80040d2:	7019      	strb	r1, [r3, #0]
 80040d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040d8:	705a      	strb	r2, [r3, #1]
  
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000440 	.word	0x20000440

080040e8 <SpiritRadioCsBlanking>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the ANT_SELECT_CONF_BASE and mask the CS_BLANKING BIT field */
  SpiritSpiReadRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 80040f2:	f107 030f 	add.w	r3, r7, #15
 80040f6:	461a      	mov	r2, r3
 80040f8:	2101      	movs	r1, #1
 80040fa:	2027      	movs	r0, #39	; 0x27
 80040fc:	f000 fe16 	bl	8004d2c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <SpiritRadioCsBlanking+0x2a>
  {
    tempRegValue |= ANT_SELECT_CS_BLANKING_MASK;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	f043 0310 	orr.w	r3, r3, #16
 800410c:	b2db      	uxtb	r3, r3
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	e004      	b.n	800411c <SpiritRadioCsBlanking+0x34>
  }
  else
  {
    tempRegValue &= (~ANT_SELECT_CS_BLANKING_MASK);
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	b2db      	uxtb	r3, r3
 800411a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the ANT_SELECT_CONF register */
  g_xStatus = SpiritSpiWriteRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 800411c:	f107 030f 	add.w	r3, r7, #15
 8004120:	461a      	mov	r2, r3
 8004122:	2101      	movs	r1, #1
 8004124:	2027      	movs	r0, #39	; 0x27
 8004126:	f000 fd55 	bl	8004bd4 <RadioSpiWriteRegisters>
 800412a:	4602      	mov	r2, r0
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <SpiritRadioCsBlanking+0x5c>)
 800412e:	b212      	sxth	r2, r2
 8004130:	4611      	mov	r1, r2
 8004132:	7019      	strb	r1, [r3, #0]
 8004134:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004138:	705a      	strb	r2, [r3, #1]
  
  
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000440 	.word	0x20000440

08004148 <SpiritRadioPersistenRx>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the PROTOCOL0_BASE and mask the PROTOCOL0_PERS_RX_MASK bitfield */
  SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8004152:	f107 030f 	add.w	r3, r7, #15
 8004156:	461a      	mov	r2, r3
 8004158:	2101      	movs	r1, #1
 800415a:	2052      	movs	r0, #82	; 0x52
 800415c:	f000 fde6 	bl	8004d2c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <SpiritRadioPersistenRx+0x2a>
  {
    tempRegValue |= PROTOCOL0_PERS_RX_MASK;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	b2db      	uxtb	r3, r3
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e004      	b.n	800417c <SpiritRadioPersistenRx+0x34>
  }
  else
  {
    tempRegValue &= (~PROTOCOL0_PERS_RX_MASK);
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	f023 0302 	bic.w	r3, r3, #2
 8004178:	b2db      	uxtb	r3, r3
 800417a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the PROTOCOL0_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 800417c:	f107 030f 	add.w	r3, r7, #15
 8004180:	461a      	mov	r2, r3
 8004182:	2101      	movs	r1, #1
 8004184:	2052      	movs	r0, #82	; 0x52
 8004186:	f000 fd25 	bl	8004bd4 <RadioSpiWriteRegisters>
 800418a:	4602      	mov	r2, r0
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <SpiritRadioPersistenRx+0x5c>)
 800418e:	b212      	sxth	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	7019      	strb	r1, [r3, #0]
 8004194:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004198:	705a      	strb	r2, [r3, #1]
  
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000440 	.word	0x20000440

080041a8 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80041b2:	f107 030f 	add.w	r3, r7, #15
 80041b6:	461a      	mov	r2, r3
 80041b8:	2101      	movs	r1, #1
 80041ba:	209e      	movs	r0, #158	; 0x9e
 80041bc:	f000 fdb6 	bl	8004d2c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e004      	b.n	80041dc <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80041dc:	f107 030f 	add.w	r3, r7, #15
 80041e0:	461a      	mov	r2, r3
 80041e2:	2101      	movs	r1, #1
 80041e4:	209e      	movs	r0, #158	; 0x9e
 80041e6:	f000 fcf5 	bl	8004bd4 <RadioSpiWriteRegisters>
 80041ea:	4602      	mov	r2, r0
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <SpiritRadioSetRefDiv+0x5c>)
 80041ee:	b212      	sxth	r2, r2
 80041f0:	4611      	mov	r1, r2
 80041f2:	7019      	strb	r1, [r3, #0]
 80041f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041f8:	705a      	strb	r2, [r3, #1]
  
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000440 	.word	0x20000440

08004208 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	461a      	mov	r2, r3
 8004212:	2101      	movs	r1, #1
 8004214:	209e      	movs	r0, #158	; 0x9e
 8004216:	f000 fd89 	bl	8004d2c <RadioSpiReadRegisters>
 800421a:	4602      	mov	r2, r0
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <SpiritRadioGetRefDiv+0x40>)
 800421e:	b212      	sxth	r2, r2
 8004220:	4611      	mov	r1, r2
 8004222:	7019      	strb	r1, [r3, #0]
 8004224:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004228:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 800423c:	2300      	movs	r3, #0
  }
  
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000440 	.word	0x20000440

0800424c <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004256:	f107 030f 	add.w	r3, r7, #15
 800425a:	461a      	mov	r2, r3
 800425c:	2101      	movs	r1, #1
 800425e:	20b4      	movs	r0, #180	; 0xb4
 8004260:	f000 fd64 	bl	8004d2c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d105      	bne.n	8004276 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	f023 0308 	bic.w	r3, r3, #8
 8004270:	b2db      	uxtb	r3, r3
 8004272:	73fb      	strb	r3, [r7, #15]
 8004274:	e004      	b.n	8004280 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	f043 0308 	orr.w	r3, r3, #8
 800427c:	b2db      	uxtb	r3, r3
 800427e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004280:	f107 030f 	add.w	r3, r7, #15
 8004284:	461a      	mov	r2, r3
 8004286:	2101      	movs	r1, #1
 8004288:	20b4      	movs	r0, #180	; 0xb4
 800428a:	f000 fca3 	bl	8004bd4 <RadioSpiWriteRegisters>
 800428e:	4602      	mov	r2, r0
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <SpiritRadioSetDigDiv+0x5c>)
 8004292:	b212      	sxth	r2, r2
 8004294:	4611      	mov	r1, r2
 8004296:	7019      	strb	r1, [r3, #0]
 8004298:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800429c:	705a      	strb	r2, [r3, #1]
  
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000440 	.word	0x20000440

080042ac <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80042b2:	1dfb      	adds	r3, r7, #7
 80042b4:	461a      	mov	r2, r3
 80042b6:	2101      	movs	r1, #1
 80042b8:	20b4      	movs	r0, #180	; 0xb4
 80042ba:	f000 fd37 	bl	8004d2c <RadioSpiReadRegisters>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <SpiritRadioGetDigDiv+0x40>)
 80042c2:	b212      	sxth	r2, r2
 80042c4:	4611      	mov	r1, r2
 80042c6:	7019      	strb	r1, [r3, #0]
 80042c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80042cc:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	08db      	lsrs	r3, r3, #3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 80042e0:	2301      	movs	r3, #1
  }
  
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000440 	.word	0x20000440

080042f0 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <SpiritRadioGetXtalFrequency+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000364 	.word	0x20000364

08004308 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <SpiritRadioSetXtalFrequency+0x1c>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000364 	.word	0x20000364

08004328 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8004332:	f107 020c 	add.w	r2, r7, #12
 8004336:	f107 030c 	add.w	r3, r7, #12
 800433a:	3301      	adds	r3, #1
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	ed97 0a01 	vldr	s0, [r7, #4]
 8004344:	f000 f830 	bl	80043a8 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8004348:	f107 030c 	add.w	r3, r7, #12
 800434c:	461a      	mov	r2, r3
 800434e:	2102      	movs	r1, #2
 8004350:	2053      	movs	r0, #83	; 0x53
 8004352:	f000 fc3f 	bl	8004bd4 <RadioSpiWriteRegisters>
 8004356:	4602      	mov	r2, r0
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <SpiritTimerSetRxTimeoutMs+0x48>)
 800435a:	b212      	sxth	r2, r2
 800435c:	4611      	mov	r1, r2
 800435e:	7019      	strb	r1, [r3, #0]
 8004360:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004364:	705a      	strb	r2, [r3, #1]

}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000440 	.word	0x20000440

08004374 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 800437e:	1dfb      	adds	r3, r7, #7
 8004380:	461a      	mov	r2, r3
 8004382:	2101      	movs	r1, #1
 8004384:	2054      	movs	r0, #84	; 0x54
 8004386:	f000 fc25 	bl	8004bd4 <RadioSpiWriteRegisters>
 800438a:	4602      	mov	r2, r0
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <SpiritTimerSetRxTimeoutCounter+0x30>)
 800438e:	b212      	sxth	r2, r2
 8004390:	4611      	mov	r1, r2
 8004392:	7019      	strb	r1, [r3, #0]
 8004394:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004398:	705a      	strb	r2, [r3, #1]

}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000440 	.word	0x20000440

080043a8 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80043b2:	60b8      	str	r0, [r7, #8]
 80043b4:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 80043b6:	f7ff ff9b 	bl	80042f0 <SpiritRadioGetXtalFrequency>
 80043ba:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4a91      	ldr	r2, [pc, #580]	; (8004604 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d902      	bls.n	80043ca <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043dc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004608 <SpiritTimerComputeRxTimeoutValues+0x260>
 80043e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e8:	ee17 3a90 	vmov	r3, s15
 80043ec:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f64f 5201 	movw	r2, #64769	; 0xfd01
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d906      	bls.n	8004406 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	22ff      	movs	r2, #255	; 0xff
 80043fc:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	22ff      	movs	r2, #255	; 0xff
 8004402:	701a      	strb	r2, [r3, #0]
    return;
 8004404:	e0fa      	b.n	80045fc <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4a80      	ldr	r2, [pc, #512]	; (800460c <SpiritTimerComputeRxTimeoutValues+0x264>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	b2db      	uxtb	r3, r3
 8004412:	3302      	adds	r3, #2
 8004414:	b2da      	uxtb	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fbb3 f3f2 	udiv	r3, r3, r2
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004448:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004608 <SpiritTimerComputeRxTimeoutValues+0x260>
 800444c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	dd1d      	ble.n	80044ac <SpiritTimerComputeRxTimeoutValues+0x104>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004608 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004490:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80044a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044aa:	e01e      	b.n	80044ea <SpiritTimerComputeRxTimeoutValues+0x142>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004608 <SpiritTimerComputeRxTimeoutValues+0x260>
 80044cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044de:	edd7 7a03 	vldr	s15, [r7, #12]
 80044e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e6:	eef1 7a67 	vneg.f32	s15, s15
 80044ea:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2bff      	cmp	r3, #255	; 0xff
 80044f4:	d06e      	beq.n	80045d4 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004514:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004608 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004518:	ee67 6a87 	vmul.f32	s13, s15, s14
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452a:	edd7 7a03 	vldr	s15, [r7, #12]
 800452e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004532:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	dd1e      	ble.n	800457a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004608 <SpiritTimerComputeRxTimeoutValues+0x260>
 800455e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004570:	edd7 7a03 	vldr	s15, [r7, #12]
 8004574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004578:	e01f      	b.n	80045ba <SpiritTimerComputeRxTimeoutValues+0x212>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004598:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004608 <SpiritTimerComputeRxTimeoutValues+0x260>
 800459c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045b6:	eef1 7a67 	vneg.f32	s15, s15
 80045ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80045be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	d505      	bpl.n	80045d4 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	3b01      	subs	r3, #1
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d906      	bls.n	80045f6 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e002      	b.n	80045fc <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
}
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	01c9c380 	.word	0x01c9c380
 8004608:	4993b480 	.word	0x4993b480
 800460c:	80808081 	.word	0x80808081

08004610 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800461a:	f107 030c 	add.w	r3, r7, #12
 800461e:	461a      	mov	r2, r3
 8004620:	2102      	movs	r1, #2
 8004622:	204f      	movs	r0, #79	; 0x4f
 8004624:	f000 fb82 	bl	8004d2c <RadioSpiReadRegisters>
 8004628:	4602      	mov	r2, r0
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 800462c:	b212      	sxth	r2, r2
 800462e:	4611      	mov	r1, r2
 8004630:	7019      	strb	r1, [r3, #0]
 8004632:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004636:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004638:	7b3b      	ldrb	r3, [r7, #12]
 800463a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463e:	b2db      	uxtb	r3, r3
 8004640:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004642:	7b3b      	ldrb	r3, [r7, #12]
 8004644:	b25a      	sxtb	r2, r3
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	b25b      	sxtb	r3, r3
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	b25b      	sxtb	r3, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	b25b      	sxtb	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800465a:	7b7b      	ldrb	r3, [r7, #13]
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	b2db      	uxtb	r3, r3
 8004662:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004664:	7b7b      	ldrb	r3, [r7, #13]
 8004666:	b25a      	sxtb	r2, r3
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	015b      	lsls	r3, r3, #5
 800466c:	b25b      	sxtb	r3, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	b25b      	sxtb	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004676:	f107 030c 	add.w	r3, r7, #12
 800467a:	461a      	mov	r2, r3
 800467c:	2102      	movs	r1, #2
 800467e:	204f      	movs	r0, #79	; 0x4f
 8004680:	f000 faa8 	bl	8004bd4 <RadioSpiWriteRegisters>
 8004684:	4602      	mov	r2, r0
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004688:	b212      	sxth	r2, r2
 800468a:	4611      	mov	r1, r2
 800468c:	7019      	strb	r1, [r3, #0]
 800468e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004692:	705a      	strb	r2, [r3, #1]

}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000440 	.word	0x20000440

080046a0 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	461a      	mov	r2, r3
 80046aa:	2102      	movs	r1, #2
 80046ac:	20c0      	movs	r0, #192	; 0xc0
 80046ae:	f000 fb3d 	bl	8004d2c <RadioSpiReadRegisters>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <SpiritRefreshStatus+0x44>)
 80046b6:	b212      	sxth	r2, r2
 80046b8:	4611      	mov	r1, r2
 80046ba:	7019      	strb	r1, [r3, #0]
 80046bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80046c0:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <SpiritRefreshStatus+0x44>)
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d1ec      	bne.n	80046a6 <SpiritRefreshStatus+0x6>
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <SpiritRefreshStatus+0x48>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d1e5      	bne.n	80046a6 <SpiritRefreshStatus+0x6>

}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000440 	.word	0x20000440
 80046e8:	20000441 	.word	0x20000441

080046ec <Spirit1InterfaceInit>:
* @brief  Read the status register.
* @param  None
* @retval Status
*/
void Spirit1InterfaceInit(void)
{ 
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
     
  /* Board management */   
//  SpiritEnterShutdown();
//  SpiritExitShutdown();
//
  SpiritManagementIdentificationRFBoard();
 80046f0:	f000 f804 	bl	80046fc <SpiritManagementIdentificationRFBoard>
    
  /* Initialize the signals to drive the range extender application board */
  SpiritManagementRangeExtInit(); 
 80046f4:	f000 f826 	bl	8004744 <SpiritManagementRangeExtInit>
  
}
 80046f8:	bf00      	nop
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SpiritManagementIdentificationRFBoard>:
* @brief  Identifies the SPIRIT1 Xtal frequency and version.
* @param  None
* @retval Status
*/
void SpiritManagementIdentificationRFBoard(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8004702:	2300      	movs	r3, #0
 8004704:	71fb      	strb	r3, [r7, #7]
 8004706:	e004      	b.n	8004712 <SpiritManagementIdentificationRFBoard+0x16>
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	3301      	adds	r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	71fb      	strb	r3, [r7, #7]
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2bff      	cmp	r3, #255	; 0xff
 8004718:	d1f6      	bne.n	8004708 <SpiritManagementIdentificationRFBoard+0xc>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 800471a:	f7ff ffc1 	bl	80046a0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <SpiritManagementIdentificationRFBoard+0x40>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b03      	cmp	r3, #3
 800472a:	d1ea      	bne.n	8004702 <SpiritManagementIdentificationRFBoard+0x6>

    SpiritRadioSetXtalFrequency(XTAL_FREQUENCY);        
 800472c:	4804      	ldr	r0, [pc, #16]	; (8004740 <SpiritManagementIdentificationRFBoard+0x44>)
 800472e:	f7ff fdeb 	bl	8004308 <SpiritRadioSetXtalFrequency>
    //SpiritGeneralSetSpiritVersion(SPIRIT_VERSION); 
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000440 	.word	0x20000440
 8004740:	02faf080 	.word	0x02faf080

08004744 <SpiritManagementRangeExtInit>:
/**
* @defgroup RANGE_EXT_MANAGEMENT_FUNCTIONS              SDK SPIRIT Management Range Extender Functions
* @{
*/
void SpiritManagementRangeExtInit(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
  RangeExtType range_type = SpiritManagementGetRangeExtender();
 800474a:	f000 f877 	bl	800483c <SpiritManagementGetRangeExtender>
 800474e:	4603      	mov	r3, r0
 8004750:	77fb      	strb	r3, [r7, #31]
  
  if(range_type==RANGE_EXT_SKYWORKS_169) {
 8004752:	7ffb      	ldrb	r3, [r7, #31]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d135      	bne.n	80047c4 <SpiritManagementRangeExtInit+0x80>
    /* TCXO optimization power consumption */
    SpiritGeneralSetExtRef(MODE_EXT_XIN);
 8004758:	2001      	movs	r0, #1
 800475a:	f7fd fd81 	bl	8002260 <SpiritGeneralSetExtRef>
    uint8_t tmp = 0x01; SpiritSpiWriteRegisters(0xB6,1,&tmp);
 800475e:	2301      	movs	r3, #1
 8004760:	71fb      	strb	r3, [r7, #7]
 8004762:	1dfb      	adds	r3, r7, #7
 8004764:	461a      	mov	r2, r3
 8004766:	2101      	movs	r1, #1
 8004768:	20b6      	movs	r0, #182	; 0xb6
 800476a:	f000 fa33 	bl	8004bd4 <RadioSpiWriteRegisters>
    
    /* CSD control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 800476e:	4a2e      	ldr	r2, [pc, #184]	; (8004828 <SpiritManagementRangeExtInit+0xe4>)
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	4611      	mov	r1, r2
 8004778:	8019      	strh	r1, [r3, #0]
 800477a:	3302      	adds	r3, #2
 800477c:	0c12      	lsrs	r2, r2, #16
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	f107 0308 	add.w	r3, r7, #8
 8004784:	4618      	mov	r0, r3
 8004786:	f7fd fd9b 	bl	80022c0 <SpiritGpioInit>
    
    /* CTX/BYP control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 800478a:	4a28      	ldr	r2, [pc, #160]	; (800482c <SpiritManagementRangeExtInit+0xe8>)
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	4611      	mov	r1, r2
 8004794:	8019      	strh	r1, [r3, #0]
 8004796:	3302      	adds	r3, #2
 8004798:	0c12      	lsrs	r2, r2, #16
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd fd8d 	bl	80022c0 <SpiritGpioInit>
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 80047a6:	4a22      	ldr	r2, [pc, #136]	; (8004830 <SpiritManagementRangeExtInit+0xec>)
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	4611      	mov	r1, r2
 80047b0:	8019      	strh	r1, [r3, #0]
 80047b2:	3302      	adds	r3, #2
 80047b4:	0c12      	lsrs	r2, r2, #16
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	f107 0310 	add.w	r3, r7, #16
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fd fd7f 	bl	80022c0 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
  }
}
 80047c2:	e02c      	b.n	800481e <SpiritManagementRangeExtInit+0xda>
  else if(range_type==RANGE_EXT_SKYWORKS_868) {   
 80047c4:	7ffb      	ldrb	r3, [r7, #31]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d129      	bne.n	800481e <SpiritManagementRangeExtInit+0xda>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 80047ca:	4a17      	ldr	r2, [pc, #92]	; (8004828 <SpiritManagementRangeExtInit+0xe4>)
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	4611      	mov	r1, r2
 80047d4:	8019      	strh	r1, [r3, #0]
 80047d6:	3302      	adds	r3, #2
 80047d8:	0c12      	lsrs	r2, r2, #16
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fd fd6d 	bl	80022c0 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <SpiritManagementRangeExtInit+0xf0>)
 80047e8:	f107 0318 	add.w	r3, r7, #24
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4611      	mov	r1, r2
 80047f0:	8019      	strh	r1, [r3, #0]
 80047f2:	3302      	adds	r3, #2
 80047f4:	0c12      	lsrs	r2, r2, #16
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	f107 0318 	add.w	r3, r7, #24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd fd5f 	bl	80022c0 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 8004802:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <SpiritManagementRangeExtInit+0xf4>)
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	4611      	mov	r1, r2
 800480c:	8019      	strh	r1, [r3, #0]
 800480e:	3302      	adds	r3, #2
 8004810:	0c12      	lsrs	r2, r2, #16
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	f107 031c 	add.w	r3, r7, #28
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd fd51 	bl	80022c0 <SpiritGpioInit>
}
 800481e:	bf00      	nop
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	080073d0 	.word	0x080073d0
 800482c:	080073d4 	.word	0x080073d4
 8004830:	080073d8 	.word	0x080073d8
 8004834:	080073dc 	.word	0x080073dc
 8004838:	080073e0 	.word	0x080073e0

0800483c <SpiritManagementGetRangeExtender>:
* @brief  returns the spirit1 range extender type
* @param  None
* @retval RangeExtType
*/
RangeExtType SpiritManagementGetRangeExtender(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return xRangeExtType;
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <SpiritManagementGetRangeExtender+0x14>)
 8004842:	781b      	ldrb	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000368 	.word	0x20000368

08004854 <Spirit1GpioIrqInit>:
* @brief  this function intializes the spirit1 gpio irq for TX and Rx
* @param  None
* @retval None
*/
void Spirit1GpioIrqInit(SGpioInit *pGpioIRQ)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Spirit IRQ config */
  SpiritGpioInit(pGpioIRQ);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fd fd2f 	bl	80022c0 <SpiritGpioInit>
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <Spirit1RadioInit>:
* @brief  this function used to receive RX packet
* @param  None
* @retval None
*/
void Spirit1RadioInit(SRadioInit *pRadioInit)
{    
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Spirit Radio config */
  SpiritRadioInit(pRadioInit);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fe fb18 	bl	8002ea8 <SpiritRadioInit>

}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <Spirit1SetPower>:
* @brief  this function sets the radio power
* @param  uint8_t cIndex, float fPowerdBm
* @retval None
*/
void Spirit1SetPower(uint8_t cIndex, float fPowerdBm)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	ed87 0a00 	vstr	s0, [r7]
 800488c:	71fb      	strb	r3, [r7, #7]
  /* Spirit Radio set power */
  SpiritRadioSetPALeveldBm(cIndex,fPowerdBm);
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	ed97 0a00 	vldr	s0, [r7]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fb73 	bl	8003f80 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(cIndex);
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fbc5 	bl	800402c <SpiritRadioSetPALevelMaxIndex>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <Spirit1PacketConfig>:
* @brief  this function sets the packet configuration according to the protocol used
* @param  None
* @retval None
*/
void Spirit1PacketConfig(void)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	af00      	add	r7, sp, #0
  
  STackProtocolInit();
   
#elif defined(USE_BASIC_PROTOCOL)
  
  BasicProtocolInit();
 80048ae:	f7fd f8ef 	bl	8001a90 <BasicProtocolInit>
  
#endif
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <Spirit1SetPayloadlength>:
* @brief  this function sets the payload length
* @param  uint8_t length
* @retval None
*/
void Spirit1SetPayloadlength(uint8_t length)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4603      	mov	r3, r0
 80048be:	71fb      	strb	r3, [r7, #7]
    /* Payload length config */
  SpiritPktStackSetPayloadLength(length);
  
#elif defined(USE_BASIC_PROTOCOL)
  /* payload length config */
  SpiritPktBasicSetPayloadLength(length);
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe f9a3 	bl	8002c10 <SpiritPktBasicSetPayloadLength>
#endif
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <Spirit1SetDestinationAddress>:
* @brief  this function sets the destination address
* @param  uint8_t adress
* @retval None
*/
void Spirit1SetDestinationAddress(uint8_t address)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	71fb      	strb	r3, [r7, #7]
#if defined(USE_STack_PROTOCOL)
  /* Destination address */
  SpiritPktStackSetDestinationAddress(address);
#elif defined(USE_BASIC_PROTOCOL)
  /* destination address */
  SpiritPktBasicSetDestinationAddress(address);
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fa22 	bl	8002d28 <SpiritPktCommonSetDestinationAddress>
#endif
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <Spirit1EnableTxIrq>:
* @brief  this function enables the Tx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableTxIrq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrq(TX_DATA_SENT, S_ENABLE); 
 80048f0:	2101      	movs	r1, #1
 80048f2:	2004      	movs	r0, #4
 80048f4:	f7fd fd2e 	bl	8002354 <SpiritIrq>
#if defined(USE_STack_LLP)
  SpiritIrq(MAX_RE_TX_REACH, S_ENABLE);
#endif  
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <Spirit1EnableRxIrq>:
* @brief  this function enables the Rx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableRxIrq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
    /* Spirit IRQs enable */
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8004900:	2101      	movs	r1, #1
 8004902:	2001      	movs	r0, #1
 8004904:	f7fd fd26 	bl	8002354 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE); 
 8004908:	2101      	movs	r1, #1
 800490a:	2002      	movs	r0, #2
 800490c:	f7fd fd22 	bl	8002354 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8004910:	2101      	movs	r1, #1
 8004912:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004916:	f7fd fd1d 	bl	8002354 <SpiritIrq>
}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}

0800491e <Spirit1DisableIrq>:
* @brief  this function disable IRQs
* @param  None
* @retval None
*/
void Spirit1DisableIrq(void)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrqDeInit(NULL);
 8004922:	2000      	movs	r0, #0
 8004924:	f7fd fcf0 	bl	8002308 <SpiritIrqDeInit>
}
 8004928:	bf00      	nop
 800492a:	bd80      	pop	{r7, pc}

0800492c <Spirit1SetRxTimeout>:
* @brief  this function set the receive timeout period
* @param  None
* @retval None
*/
void Spirit1SetRxTimeout(float cRxTimeOut)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	ed87 0a01 	vstr	s0, [r7, #4]
  if(cRxTimeOut == 0)
 8004936:	edd7 7a01 	vldr	s15, [r7, #4]
 800493a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800493e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004942:	d106      	bne.n	8004952 <Spirit1SetRxTimeout+0x26>
  {
    /* rx timeout config */
    SET_INFINITE_RX_TIMEOUT();
 8004944:	2000      	movs	r0, #0
 8004946:	f7ff fd15 	bl	8004374 <SpiritTimerSetRxTimeoutCounter>
    SpiritTimerSetRxTimeoutStopCondition(ANY_ABOVE_THRESHOLD);
 800494a:	200f      	movs	r0, #15
 800494c:	f7ff fe60 	bl	8004610 <SpiritTimerSetRxTimeoutStopCondition>
    /* RX timeout config */
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
    Spirit1EnableSQI();
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
  }
}
 8004950:	e008      	b.n	8004964 <Spirit1SetRxTimeout+0x38>
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
 8004952:	ed97 0a01 	vldr	s0, [r7, #4]
 8004956:	f7ff fce7 	bl	8004328 <SpiritTimerSetRxTimeoutMs>
    Spirit1EnableSQI();
 800495a:	f000 f812 	bl	8004982 <Spirit1EnableSQI>
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
 800495e:	2006      	movs	r0, #6
 8004960:	f7ff fe56 	bl	8004610 <SpiritTimerSetRxTimeoutStopCondition>
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <Spirit1SetRssiTH>:
* @brief  this function sets the RSSI threshold
* @param  int dbmValue
* @retval None
*/
void Spirit1SetRssiTH(int dbmValue)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  SpiritQiSetRssiThresholddBm(dbmValue);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fe fa75 	bl	8002e64 <SpiritQiSetRssiThresholddBm>
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <Spirit1EnableSQI>:
* @brief  this function enables SQI check
* @param  None
* @retval None
*/
void Spirit1EnableSQI(void)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	af00      	add	r7, sp, #0
  /* enable SQI check */
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8004986:	2000      	movs	r0, #0
 8004988:	f7fe fa38 	bl	8002dfc <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 800498c:	2001      	movs	r0, #1
 800498e:	f7fe f9fd 	bl	8002d8c <SpiritQiSqiCheck>
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <Spirit1StartRx>:
* @brief  this function starts the RX process
* @param  None
* @retval None
*/
void Spirit1StartRx(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 800499c:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <Spirit1StartRx+0x28>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b33      	cmp	r3, #51	; 0x33
 80049a8:	d102      	bne.n	80049b0 <Spirit1StartRx+0x18>
  {
    SpiritCmdStrobeSabort();
 80049aa:	2067      	movs	r0, #103	; 0x67
 80049ac:	f7fd fba4 	bl	80020f8 <SpiritCmdStrobeCommand>
  }
  /* RX command */
  SpiritCmdStrobeRx();
 80049b0:	f7fd ff98 	bl	80028e4 <SpiritManagementWaCmdStrobeRx>
 80049b4:	2061      	movs	r0, #97	; 0x61
 80049b6:	f7fd fb9f 	bl	80020f8 <SpiritCmdStrobeCommand>
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000440 	.word	0x20000440

080049c4 <Spirit1GetRxPacket>:
* @brief  this function receives the data
* @param  None
* @retval None
*/
void Spirit1GetRxPacket(uint8_t *buffer, uint8_t *cRxData )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint8_t noofbytes = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  /* when rx data ready read the number of received bytes */
  *cRxData=SpiritLinearFifoReadNumElementsRxFifo();
 80049d2:	f7fd fd71 	bl	80024b8 <SpiritLinearFifoReadNumElementsRxFifo>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	701a      	strb	r2, [r3, #0]
  noofbytes = *cRxData;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	73fb      	strb	r3, [r7, #15]
    /* read the RX FIFO */
  SpiritSpiReadLinearFifo(noofbytes, buffer);
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fb93 	bl	8005114 <RadioSpiReadFifo>
  
  SpiritCmdStrobeFlushRxFifo();
 80049ee:	2071      	movs	r0, #113	; 0x71
 80049f0:	f7fd fb82 	bl	80020f8 <SpiritCmdStrobeCommand>
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <Spirit1StartTx>:
* @brief  this function starts the TX process
* @param  None
* @retval None
*/
void Spirit1StartTx(uint8_t *buffer, uint8_t size )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <Spirit1StartTx+0x64>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b33      	cmp	r3, #51	; 0x33
 8004a14:	d102      	bne.n	8004a1c <Spirit1StartTx+0x20>
  {
    SpiritCmdStrobeSabort();
 8004a16:	2067      	movs	r0, #103	; 0x67
 8004a18:	f7fd fb6e 	bl	80020f8 <SpiritCmdStrobeCommand>
  }
  
#ifdef CSMA_ENABLE
  
    /* Enable CSMA */
    SpiritRadioPersistenRx(S_DISABLE);
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7ff fb93 	bl	8004148 <SpiritRadioPersistenRx>
    SpiritRadioCsBlanking(S_DISABLE);
 8004a22:	2000      	movs	r0, #0
 8004a24:	f7ff fb60 	bl	80040e8 <SpiritRadioCsBlanking>

    SpiritCsmaInit(&xCsmaInit);
 8004a28:	480e      	ldr	r0, [pc, #56]	; (8004a64 <Spirit1StartTx+0x68>)
 8004a2a:	f7fd fb7d 	bl	8002128 <SpiritCsmaInit>
    SpiritCsma(S_ENABLE);
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f7fd fbde 	bl	80021f0 <SpiritCsma>
    SpiritQiSetRssiThresholddBm(CSMA_RSSI_THRESHOLD);
 8004a34:	f06f 0069 	mvn.w	r0, #105	; 0x69
 8004a38:	f7fe fa14 	bl	8002e64 <SpiritQiSetRssiThresholddBm>
    
#endif 
  
  /* fit the TX FIFO */
  SpiritCmdStrobeFlushTxFifo();
 8004a3c:	2072      	movs	r0, #114	; 0x72
 8004a3e:	f7fd fb5b 	bl	80020f8 <SpiritCmdStrobeCommand>
  
  SpiritSpiWriteLinearFifo(size, buffer);
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 faba 	bl	8004fc0 <RadioSpiWriteFifo>
  
  /* send the TX command */
  SpiritCmdStrobeTx();
 8004a4c:	f7fd ff12 	bl	8002874 <SpiritManagementWaCmdStrobeTx>
 8004a50:	2060      	movs	r0, #96	; 0x60
 8004a52:	f7fd fb51 	bl	80020f8 <SpiritCmdStrobeCommand>
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000440 	.word	0x20000440
 8004a64:	2000007c 	.word	0x2000007c

08004a68 <Spirit1ClearIRQ>:
* @brief  this function clear the IRQ status
* @param  None
* @retval None
*/
void Spirit1ClearIRQ(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  SpiritIrqClearStatus();
 8004a6c:	f7fd fd0c 	bl	8002488 <SpiritIrqClearStatus>
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <RadioGpioInterruptCmd>:
*         @arg ENABLE: Interrupt is enabled
*         @arg DISABLE: Interrupt is disabled
* @retval None.
*/
void RadioGpioInterruptCmd(RadioGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, FunctionalState xNewState)
{
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	4623      	mov	r3, r4
 8004a84:	71fb      	strb	r3, [r7, #7]
 8004a86:	4603      	mov	r3, r0
 8004a88:	71bb      	strb	r3, [r7, #6]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	717b      	strb	r3, [r7, #5]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	713b      	strb	r3, [r7, #4]
  HAL_NVIC_SetPriority((IRQn_Type) (aRADIO_GPIO_IRQn[xGpio]), nPreemption, nSubpriority);
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <RadioGpioInterruptCmd+0x5c>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	79b9      	ldrb	r1, [r7, #6]
 8004a9c:	797a      	ldrb	r2, [r7, #5]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fd77 	bl	8005592 <HAL_NVIC_SetPriority>
  if (!xNewState)
 8004aa4:	793b      	ldrb	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d107      	bne.n	8004aba <RadioGpioInterruptCmd+0x46>
  {
    HAL_NVIC_DisableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio])); 
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <RadioGpioInterruptCmd+0x5c>)
 8004aae:	5cd3      	ldrb	r3, [r2, r3]
 8004ab0:	b25b      	sxtb	r3, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fd97 	bl	80055e6 <HAL_NVIC_DisableIRQ>
  }
  else
  {
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
  }
}
 8004ab8:	e006      	b.n	8004ac8 <RadioGpioInterruptCmd+0x54>
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	4a04      	ldr	r2, [pc, #16]	; (8004ad0 <RadioGpioInterruptCmd+0x5c>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fd81 	bl	80055ca <HAL_NVIC_EnableIRQ>
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd90      	pop	{r4, r7, pc}
 8004ad0:	08007550 	.word	0x08007550

08004ad4 <RadioShieldLedOff>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedOff(Led_t Led)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <RadioShieldLedOff+0x24>)
 8004ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae6:	2110      	movs	r1, #16
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fffa 	bl	8005ae4 <HAL_GPIO_WritePin>
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	200001e4 	.word	0x200001e4

08004afc <RadioSpiInit>:
* @brief  Initializes SPI HAL.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8004b00:	4819      	ldr	r0, [pc, #100]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b02:	f001 ffa5 	bl	8006a50 <HAL_SPI_GetState>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d12b      	bne.n	8004b64 <RadioSpiInit+0x68>
  {
    /* SPI Config */
    hspi1.Instance               = RADIO_SPI;
 8004b0c:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <RadioSpiInit+0x70>)
 8004b10:	601a      	str	r2, [r3, #0]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b14:	2208      	movs	r2, #8
 8004b16:	61da      	str	r2, [r3, #28]
    hspi1.Init.Direction         = SPI_DIRECTION_2LINES;
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
    hspi1.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	615a      	str	r2, [r3, #20]
    hspi1.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	611a      	str	r2, [r3, #16]
    hspi1.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial     = 7;
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b32:	2207      	movs	r2, #7
 8004b34:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.DataSize          = SPI_DATASIZE_8BIT;
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	60da      	str	r2, [r3, #12]
    hspi1.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	621a      	str	r2, [r3, #32]
    hspi1.Init.NSS               = SPI_NSS_SOFT;
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b48:	619a      	str	r2, [r3, #24]
    hspi1.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.Mode              = SPI_MODE_MASTER;
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b52:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b56:	605a      	str	r2, [r3, #4]

    HAL_SPI_MspInit(&hspi1);
 8004b58:	4803      	ldr	r0, [pc, #12]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b5a:	f7fd f899 	bl	8001c90 <HAL_SPI_MspInit>
    HAL_SPI_Init(&hspi1);
 8004b5e:	4802      	ldr	r0, [pc, #8]	; (8004b68 <RadioSpiInit+0x6c>)
 8004b60:	f001 fc14 	bl	800638c <HAL_SPI_Init>
  }
}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000374 	.word	0x20000374
 8004b6c:	40013000 	.word	0x40013000

08004b70 <SPI_Write>:
* @brief  SPI Write a byte to device
* @param  Value: value to be written
* @retval None
*/
static void SPI_Write(uint8_t Value)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 8004b7e:	bf00      	nop
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <SPI_Write+0x44>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d1f8      	bne.n	8004b80 <SPI_Write+0x10>
  status = HAL_SPI_Transmit(&hspi1, (uint8_t*) &Value, 1, SpiTimeout);
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <SPI_Write+0x48>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1df9      	adds	r1, r7, #7
 8004b94:	2201      	movs	r2, #1
 8004b96:	4807      	ldr	r0, [pc, #28]	; (8004bb4 <SPI_Write+0x44>)
 8004b98:	f001 fc84 	bl	80064a4 <HAL_SPI_Transmit>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if (status != HAL_OK)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <SPI_Write+0x3a>
  {
    /* Execute user timeout callback */
    SPI_Error();
 8004ba6:	f000 f809 	bl	8004bbc <SPI_Error>
  }
}
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000374 	.word	0x20000374
 8004bb8:	200001e8 	.word	0x200001e8

08004bbc <SPI_Error>:
* @brief  SPI error treatment function
* @param  None
* @retval None
*/
static void SPI_Error(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hspi1);
 8004bc0:	4803      	ldr	r0, [pc, #12]	; (8004bd0 <SPI_Error+0x14>)
 8004bc2:	f001 fc47 	bl	8006454 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  RadioSpiInit();
 8004bc6:	f7ff ff99 	bl	8004afc <RadioSpiInit>
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000374 	.word	0x20000374

08004bd4 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	4603      	mov	r3, r0
 8004bdc:	603a      	str	r2, [r7, #0]
 8004bde:	71fb      	strb	r3, [r7, #7]
 8004be0:	460b      	mov	r3, r1
 8004be2:	71bb      	strb	r3, [r7, #6]
  uint8_t aHeader[2] = {0};
 8004be4:	2300      	movs	r3, #0
 8004be6:	823b      	strh	r3, [r7, #16]
  uint16_t tmpstatus = 0x0000;
 8004be8:	2300      	movs	r3, #0
 8004bea:	81fb      	strh	r3, [r7, #14]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus=(StatusBytes *)&tmpstatus;
 8004bec:	f107 030e 	add.w	r3, r7, #14
 8004bf0:	61bb      	str	r3, [r7, #24]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	743b      	strb	r3, [r7, #16]
  aHeader[1] = cRegAddress;
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	2104      	movs	r1, #4
 8004c00:	2003      	movs	r0, #3
 8004c02:	f7ff ff37 	bl	8004a74 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004c06:	f7fc ff4d 	bl	8001aa4 <bandSelect>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	81bb      	strh	r3, [r7, #12]
  if(selectedBand.conf_868 == SET)
 8004c0e:	7b3b      	ldrb	r3, [r7, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10a      	bne.n	8004c2a <RadioSpiWriteRegisters+0x56>
  {
	  RadioSpiHCSLow();
 8004c14:	2200      	movs	r2, #0
 8004c16:	2102      	movs	r1, #2
 8004c18:	4841      	ldr	r0, [pc, #260]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004c1a:	f000 ff63 	bl	8005ae4 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004c1e:	2201      	movs	r2, #1
 8004c20:	2101      	movs	r1, #1
 8004c22:	483f      	ldr	r0, [pc, #252]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004c24:	f000 ff5e 	bl	8005ae4 <HAL_GPIO_WritePin>
 8004c28:	e017      	b.n	8004c5a <RadioSpiWriteRegisters+0x86>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004c2a:	7b7b      	ldrb	r3, [r7, #13]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10a      	bne.n	8004c46 <RadioSpiWriteRegisters+0x72>
	  {
		  RadioSpiHCSHigh();
 8004c30:	2201      	movs	r2, #1
 8004c32:	2102      	movs	r1, #2
 8004c34:	483a      	ldr	r0, [pc, #232]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004c36:	f000 ff55 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4838      	ldr	r0, [pc, #224]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004c40:	f000 ff50 	bl	8005ae4 <HAL_GPIO_WritePin>
 8004c44:	e009      	b.n	8004c5a <RadioSpiWriteRegisters+0x86>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004c46:	2200      	movs	r2, #0
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4835      	ldr	r0, [pc, #212]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004c4c:	f000 ff4a 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004c50:	2201      	movs	r2, #1
 8004c52:	2101      	movs	r1, #1
 8004c54:	4832      	ldr	r0, [pc, #200]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004c56:	f000 ff45 	bl	8005ae4 <HAL_GPIO_WritePin>
	  }
  }
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	817b      	strh	r3, [r7, #10]
 8004c5e:	e004      	b.n	8004c6a <RadioSpiWriteRegisters+0x96>
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	817b      	strh	r3, [r7, #10]
 8004c6a:	897b      	ldrh	r3, [r7, #10]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c72:	d3f5      	bcc.n	8004c60 <RadioSpiWriteRegisters+0x8c>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <RadioSpiWriteRegisters+0x150>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f107 020e 	add.w	r2, r7, #14
 8004c7c:	f107 0110 	add.w	r1, r7, #16
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	2301      	movs	r3, #1
 8004c84:	4828      	ldr	r0, [pc, #160]	; (8004d28 <RadioSpiWriteRegisters+0x154>)
 8004c86:	f001 fd41 	bl	800670c <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	81fb      	strh	r3, [r7, #14]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <RadioSpiWriteRegisters+0x150>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f107 000e 	add.w	r0, r7, #14
 8004c9a:	f107 0210 	add.w	r2, r7, #16
 8004c9e:	1c51      	adds	r1, r2, #1
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4820      	ldr	r0, [pc, #128]	; (8004d28 <RadioSpiWriteRegisters+0x154>)
 8004ca8:	f001 fd30 	bl	800670c <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	e009      	b.n	8004cc6 <RadioSpiWriteRegisters+0xf2>
  {
    SPI_Write(pcBuffer[index]);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ff58 	bl	8004b70 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	79bb      	ldrb	r3, [r7, #6]
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	dbf1      	blt.n	8004cb2 <RadioSpiWriteRegisters+0xde>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 8004cce:	bf00      	nop
 8004cd0:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <RadioSpiWriteRegisters+0x154>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d1f8      	bne.n	8004cd0 <RadioSpiWriteRegisters+0xfc>
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004cde:	2201      	movs	r2, #1
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	480f      	ldr	r0, [pc, #60]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004ce4:	f000 fefe 	bl	8005ae4 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004ce8:	2201      	movs	r2, #1
 8004cea:	2101      	movs	r1, #1
 8004cec:	480c      	ldr	r0, [pc, #48]	; (8004d20 <RadioSpiWriteRegisters+0x14c>)
 8004cee:	f000 fef9 	bl	8005ae4 <HAL_GPIO_WritePin>

  
  SPI_EXIT_CRITICAL();
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	f7ff febb 	bl	8004a74 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	7d3a      	ldrb	r2, [r7, #20]
 8004d0c:	f362 0307 	bfi	r3, r2, #0, #8
 8004d10:	7d7a      	ldrb	r2, [r7, #21]
 8004d12:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40020400 	.word	0x40020400
 8004d24:	200001e8 	.word	0x200001e8
 8004d28:	20000374 	.word	0x20000374

08004d2c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval StatusBytes
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	4603      	mov	r3, r0
 8004d34:	603a      	str	r2, [r7, #0]
 8004d36:	71fb      	strb	r3, [r7, #7]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	71bb      	strb	r3, [r7, #6]
  uint16_t tmpstatus = 0x00;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004d40:	f107 0312 	add.w	r3, r7, #18
 8004d44:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8004d46:	2300      	movs	r3, #0
 8004d48:	81bb      	strh	r3, [r7, #12]
  uint8_t dummy = 0xFF;
 8004d4a:	23ff      	movs	r3, #255	; 0xff
 8004d4c:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0] = READ_HEADER;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	733b      	strb	r3, [r7, #12]
  aHeader[1] = cRegAddress;
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8004d56:	2300      	movs	r3, #0
 8004d58:	2204      	movs	r2, #4
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	2003      	movs	r0, #3
 8004d5e:	f7ff fe89 	bl	8004a74 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004d62:	f7fc fe9f 	bl	8001aa4 <bandSelect>
 8004d66:	4603      	mov	r3, r0
 8004d68:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004d6a:	7c3b      	ldrb	r3, [r7, #16]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d10a      	bne.n	8004d86 <RadioSpiReadRegisters+0x5a>
  {
	  RadioSpiHCSLow();
 8004d70:	2200      	movs	r2, #0
 8004d72:	2102      	movs	r1, #2
 8004d74:	4843      	ldr	r0, [pc, #268]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004d76:	f000 feb5 	bl	8005ae4 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4841      	ldr	r0, [pc, #260]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004d80:	f000 feb0 	bl	8005ae4 <HAL_GPIO_WritePin>
 8004d84:	e017      	b.n	8004db6 <RadioSpiReadRegisters+0x8a>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004d86:	7c7b      	ldrb	r3, [r7, #17]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d10a      	bne.n	8004da2 <RadioSpiReadRegisters+0x76>
	  {
		  RadioSpiHCSHigh();
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2102      	movs	r1, #2
 8004d90:	483c      	ldr	r0, [pc, #240]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004d92:	f000 fea7 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004d96:	2200      	movs	r2, #0
 8004d98:	2101      	movs	r1, #1
 8004d9a:	483a      	ldr	r0, [pc, #232]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004d9c:	f000 fea2 	bl	8005ae4 <HAL_GPIO_WritePin>
 8004da0:	e009      	b.n	8004db6 <RadioSpiReadRegisters+0x8a>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004da2:	2200      	movs	r2, #0
 8004da4:	2102      	movs	r1, #2
 8004da6:	4837      	ldr	r0, [pc, #220]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004da8:	f000 fe9c 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004dac:	2201      	movs	r2, #1
 8004dae:	2101      	movs	r1, #1
 8004db0:	4834      	ldr	r0, [pc, #208]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004db2:	f000 fe97 	bl	8005ae4 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004db6:	2300      	movs	r3, #0
 8004db8:	813b      	strh	r3, [r7, #8]
 8004dba:	e004      	b.n	8004dc6 <RadioSpiReadRegisters+0x9a>
 8004dbc:	893b      	ldrh	r3, [r7, #8]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	813b      	strh	r3, [r7, #8]
 8004dc6:	893b      	ldrh	r3, [r7, #8]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dce:	d3f5      	bcc.n	8004dbc <RadioSpiReadRegisters+0x90>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8004dd0:	4b2d      	ldr	r3, [pc, #180]	; (8004e88 <RadioSpiReadRegisters+0x15c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f107 0212 	add.w	r2, r7, #18
 8004dd8:	f107 010c 	add.w	r1, r7, #12
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2301      	movs	r3, #1
 8004de0:	482a      	ldr	r0, [pc, #168]	; (8004e8c <RadioSpiReadRegisters+0x160>)
 8004de2:	f001 fc93 	bl	800670c <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8004de6:	8a7b      	ldrh	r3, [r7, #18]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004dee:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <RadioSpiReadRegisters+0x15c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f107 0012 	add.w	r0, r7, #18
 8004df6:	f107 020c 	add.w	r2, r7, #12
 8004dfa:	1c51      	adds	r1, r2, #1
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4602      	mov	r2, r0
 8004e02:	4822      	ldr	r0, [pc, #136]	; (8004e8c <RadioSpiReadRegisters+0x160>)
 8004e04:	f001 fc82 	bl	800670c <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e00e      	b.n	8004e2c <RadioSpiReadRegisters+0x100>
  { 
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&dummy, (uint8_t *)&(pcBuffer)[index], 1, SpiTimeout);
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	441a      	add	r2, r3
 8004e14:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <RadioSpiReadRegisters+0x15c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f107 010b 	add.w	r1, r7, #11
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	481a      	ldr	r0, [pc, #104]	; (8004e8c <RadioSpiReadRegisters+0x160>)
 8004e22:	f001 fc73 	bl	800670c <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	79bb      	ldrb	r3, [r7, #6]
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	dbec      	blt.n	8004e0e <RadioSpiReadRegisters+0xe2>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 8004e34:	bf00      	nop
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <RadioSpiReadRegisters+0x160>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d1f8      	bne.n	8004e36 <RadioSpiReadRegisters+0x10a>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004e44:	2201      	movs	r2, #1
 8004e46:	2102      	movs	r1, #2
 8004e48:	480e      	ldr	r0, [pc, #56]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004e4a:	f000 fe4b 	bl	8005ae4 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2101      	movs	r1, #1
 8004e52:	480c      	ldr	r0, [pc, #48]	; (8004e84 <RadioSpiReadRegisters+0x158>)
 8004e54:	f000 fe46 	bl	8005ae4 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8004e58:	2301      	movs	r3, #1
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	2003      	movs	r0, #3
 8004e60:	f7ff fe08 	bl	8004a74 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	8812      	ldrh	r2, [r2, #0]
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	7d3a      	ldrb	r2, [r7, #20]
 8004e72:	f362 0307 	bfi	r3, r2, #0, #8
 8004e76:	7d7a      	ldrb	r2, [r7, #21]
 8004e78:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40020400 	.word	0x40020400
 8004e88:	200001e8 	.word	0x200001e8
 8004e8c:	20000374 	.word	0x20000374

08004e90 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval StatusBytes
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
  uint8_t aHeader[2] = {0};
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpstatus = 0x0000;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004ea2:	f107 0312 	add.w	r3, r7, #18
 8004ea6:	61fb      	str	r3, [r7, #28]
  
  /* Built the aHeader bytes */
  aHeader[0] = COMMAND_HEADER;
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	753b      	strb	r3, [r7, #20]
  aHeader[1] = cCommandCode;
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	757b      	strb	r3, [r7, #21]
  
  SPI_ENTER_CRITICAL();
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	2003      	movs	r0, #3
 8004eb8:	f7ff fddc 	bl	8004a74 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004ebc:	f7fc fdf2 	bl	8001aa4 <bandSelect>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004ec4:	7c3b      	ldrb	r3, [r7, #16]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10a      	bne.n	8004ee0 <RadioSpiCommandStrobes+0x50>
  {
	  RadioSpiHCSLow();
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2102      	movs	r1, #2
 8004ece:	4839      	ldr	r0, [pc, #228]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004ed0:	f000 fe08 	bl	8005ae4 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4836      	ldr	r0, [pc, #216]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004eda:	f000 fe03 	bl	8005ae4 <HAL_GPIO_WritePin>
 8004ede:	e017      	b.n	8004f10 <RadioSpiCommandStrobes+0x80>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004ee0:	7c7b      	ldrb	r3, [r7, #17]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10a      	bne.n	8004efc <RadioSpiCommandStrobes+0x6c>
	  {
		  RadioSpiHCSHigh();
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2102      	movs	r1, #2
 8004eea:	4832      	ldr	r0, [pc, #200]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004eec:	f000 fdfa 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	482f      	ldr	r0, [pc, #188]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004ef6:	f000 fdf5 	bl	8005ae4 <HAL_GPIO_WritePin>
 8004efa:	e009      	b.n	8004f10 <RadioSpiCommandStrobes+0x80>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004efc:	2200      	movs	r2, #0
 8004efe:	2102      	movs	r1, #2
 8004f00:	482c      	ldr	r0, [pc, #176]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004f02:	f000 fdef 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004f06:	2201      	movs	r2, #1
 8004f08:	2101      	movs	r1, #1
 8004f0a:	482a      	ldr	r0, [pc, #168]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004f0c:	f000 fdea 	bl	8005ae4 <HAL_GPIO_WritePin>
	  }
  }

  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004f10:	2300      	movs	r3, #0
 8004f12:	81fb      	strh	r3, [r7, #14]
 8004f14:	e004      	b.n	8004f20 <RadioSpiCommandStrobes+0x90>
 8004f16:	89fb      	ldrh	r3, [r7, #14]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	81fb      	strh	r3, [r7, #14]
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f28:	d3f5      	bcc.n	8004f16 <RadioSpiCommandStrobes+0x86>
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <RadioSpiCommandStrobes+0x128>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f107 0212 	add.w	r2, r7, #18
 8004f32:	f107 0114 	add.w	r1, r7, #20
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4820      	ldr	r0, [pc, #128]	; (8004fbc <RadioSpiCommandStrobes+0x12c>)
 8004f3c:	f001 fbe6 	bl	800670c <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8004f40:	8a7b      	ldrh	r3, [r7, #18]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004f48:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <RadioSpiCommandStrobes+0x128>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f107 0012 	add.w	r0, r7, #18
 8004f50:	f107 0214 	add.w	r2, r7, #20
 8004f54:	1c51      	adds	r1, r2, #1
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4817      	ldr	r0, [pc, #92]	; (8004fbc <RadioSpiCommandStrobes+0x12c>)
 8004f5e:	f001 fbd5 	bl	800670c <HAL_SPI_TransmitReceive>
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 8004f62:	bf00      	nop
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <RadioSpiCommandStrobes+0x12c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d1f8      	bne.n	8004f64 <RadioSpiCommandStrobes+0xd4>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004f72:	2201      	movs	r2, #1
 8004f74:	2102      	movs	r1, #2
 8004f76:	480f      	ldr	r0, [pc, #60]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004f78:	f000 fdb4 	bl	8005ae4 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2101      	movs	r1, #1
 8004f80:	480c      	ldr	r0, [pc, #48]	; (8004fb4 <RadioSpiCommandStrobes+0x124>)
 8004f82:	f000 fdaf 	bl	8005ae4 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004f86:	2301      	movs	r3, #1
 8004f88:	2204      	movs	r2, #4
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	2003      	movs	r0, #3
 8004f8e:	f7ff fd71 	bl	8004a74 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	f107 0318 	add.w	r3, r7, #24
 8004f98:	8812      	ldrh	r2, [r2, #0]
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	7e3a      	ldrb	r2, [r7, #24]
 8004fa0:	f362 0307 	bfi	r3, r2, #0, #8
 8004fa4:	7e7a      	ldrb	r2, [r7, #25]
 8004fa6:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40020400 	.word	0x40020400
 8004fb8:	200001e8 	.word	0x200001e8
 8004fbc:	20000374 	.word	0x20000374

08004fc0 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;

  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004fd0:	f107 0312 	add.w	r3, r7, #18
 8004fd4:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	81bb      	strh	r3, [r7, #12]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	733b      	strb	r3, [r7, #12]
  aHeader[1] = LINEAR_FIFO_ADDRESS;
 8004fde:	23ff      	movs	r3, #255	; 0xff
 8004fe0:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	2104      	movs	r1, #4
 8004fe8:	2003      	movs	r0, #3
 8004fea:	f7ff fd43 	bl	8004a74 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004fee:	f7fc fd59 	bl	8001aa4 <bandSelect>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004ff6:	7c3b      	ldrb	r3, [r7, #16]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d10a      	bne.n	8005012 <RadioSpiWriteFifo+0x52>
  {
	  RadioSpiHCSLow();
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2102      	movs	r1, #2
 8005000:	4841      	ldr	r0, [pc, #260]	; (8005108 <RadioSpiWriteFifo+0x148>)
 8005002:	f000 fd6f 	bl	8005ae4 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8005006:	2201      	movs	r2, #1
 8005008:	2101      	movs	r1, #1
 800500a:	483f      	ldr	r0, [pc, #252]	; (8005108 <RadioSpiWriteFifo+0x148>)
 800500c:	f000 fd6a 	bl	8005ae4 <HAL_GPIO_WritePin>
 8005010:	e017      	b.n	8005042 <RadioSpiWriteFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8005012:	7c7b      	ldrb	r3, [r7, #17]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10a      	bne.n	800502e <RadioSpiWriteFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 8005018:	2201      	movs	r2, #1
 800501a:	2102      	movs	r1, #2
 800501c:	483a      	ldr	r0, [pc, #232]	; (8005108 <RadioSpiWriteFifo+0x148>)
 800501e:	f000 fd61 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8005022:	2200      	movs	r2, #0
 8005024:	2101      	movs	r1, #1
 8005026:	4838      	ldr	r0, [pc, #224]	; (8005108 <RadioSpiWriteFifo+0x148>)
 8005028:	f000 fd5c 	bl	8005ae4 <HAL_GPIO_WritePin>
 800502c:	e009      	b.n	8005042 <RadioSpiWriteFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 800502e:	2200      	movs	r2, #0
 8005030:	2102      	movs	r1, #2
 8005032:	4835      	ldr	r0, [pc, #212]	; (8005108 <RadioSpiWriteFifo+0x148>)
 8005034:	f000 fd56 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8005038:	2201      	movs	r2, #1
 800503a:	2101      	movs	r1, #1
 800503c:	4832      	ldr	r0, [pc, #200]	; (8005108 <RadioSpiWriteFifo+0x148>)
 800503e:	f000 fd51 	bl	8005ae4 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8005042:	2300      	movs	r3, #0
 8005044:	817b      	strh	r3, [r7, #10]
 8005046:	e004      	b.n	8005052 <RadioSpiWriteFifo+0x92>
 8005048:	897b      	ldrh	r3, [r7, #10]
 800504a:	b29b      	uxth	r3, r3
 800504c:	3301      	adds	r3, #1
 800504e:	b29b      	uxth	r3, r3
 8005050:	817b      	strh	r3, [r7, #10]
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505a:	d3f5      	bcc.n	8005048 <RadioSpiWriteFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800505c:	4b2b      	ldr	r3, [pc, #172]	; (800510c <RadioSpiWriteFifo+0x14c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f107 0212 	add.w	r2, r7, #18
 8005064:	f107 010c 	add.w	r1, r7, #12
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	2301      	movs	r3, #1
 800506c:	4828      	ldr	r0, [pc, #160]	; (8005110 <RadioSpiWriteFifo+0x150>)
 800506e:	f001 fb4d 	bl	800670c <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8005072:	8a7b      	ldrh	r3, [r7, #18]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	b29b      	uxth	r3, r3
 8005078:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800507a:	4b24      	ldr	r3, [pc, #144]	; (800510c <RadioSpiWriteFifo+0x14c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f107 0012 	add.w	r0, r7, #18
 8005082:	f107 020c 	add.w	r2, r7, #12
 8005086:	1c51      	adds	r1, r2, #1
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	2301      	movs	r3, #1
 800508c:	4602      	mov	r2, r0
 800508e:	4820      	ldr	r0, [pc, #128]	; (8005110 <RadioSpiWriteFifo+0x150>)
 8005090:	f001 fb3c 	bl	800670c <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	e009      	b.n	80050ae <RadioSpiWriteFifo+0xee>
  {
    SPI_Write(pcBuffer[index]);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fd64 	bl	8004b70 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	dbf1      	blt.n	800509a <RadioSpiWriteFifo+0xda>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 80050b6:	bf00      	nop
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <RadioSpiWriteFifo+0x150>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d1f8      	bne.n	80050b8 <RadioSpiWriteFifo+0xf8>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 80050c6:	2201      	movs	r2, #1
 80050c8:	2102      	movs	r1, #2
 80050ca:	480f      	ldr	r0, [pc, #60]	; (8005108 <RadioSpiWriteFifo+0x148>)
 80050cc:	f000 fd0a 	bl	8005ae4 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 80050d0:	2201      	movs	r2, #1
 80050d2:	2101      	movs	r1, #1
 80050d4:	480c      	ldr	r0, [pc, #48]	; (8005108 <RadioSpiWriteFifo+0x148>)
 80050d6:	f000 fd05 	bl	8005ae4 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80050da:	2301      	movs	r3, #1
 80050dc:	2204      	movs	r2, #4
 80050de:	2104      	movs	r1, #4
 80050e0:	2003      	movs	r0, #3
 80050e2:	f7ff fcc7 	bl	8004a74 <RadioGpioInterruptCmd>
  
  return *pStatus; 
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	f107 0314 	add.w	r3, r7, #20
 80050ec:	8812      	ldrh	r2, [r2, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	7d3a      	ldrb	r2, [r7, #20]
 80050f4:	f362 0307 	bfi	r3, r2, #0, #8
 80050f8:	7d7a      	ldrb	r2, [r7, #21]
 80050fa:	f362 230f 	bfi	r3, r2, #8, #8
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40020400 	.word	0x40020400
 800510c:	200001e8 	.word	0x200001e8
 8005110:	20000374 	.word	0x20000374

08005114 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval StatusBytes
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af02      	add	r7, sp, #8
 800511a:	4603      	mov	r3, r0
 800511c:	6039      	str	r1, [r7, #0]
 800511e:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 8005120:	2300      	movs	r3, #0
 8005122:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8005124:	f107 0312 	add.w	r3, r7, #18
 8005128:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2];
  uint8_t dummy=0xFF;
 800512a:	23ff      	movs	r3, #255	; 0xff
 800512c:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0]=READ_HEADER;
 800512e:	2301      	movs	r3, #1
 8005130:	733b      	strb	r3, [r7, #12]
  aHeader[1]=LINEAR_FIFO_ADDRESS;
 8005132:	23ff      	movs	r3, #255	; 0xff
 8005134:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8005136:	2300      	movs	r3, #0
 8005138:	2204      	movs	r2, #4
 800513a:	2104      	movs	r1, #4
 800513c:	2003      	movs	r0, #3
 800513e:	f7ff fc99 	bl	8004a74 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8005142:	f7fc fcaf 	bl	8001aa4 <bandSelect>
 8005146:	4603      	mov	r3, r0
 8005148:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 800514a:	7c3b      	ldrb	r3, [r7, #16]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10a      	bne.n	8005166 <RadioSpiReadFifo+0x52>
  {
	  RadioSpiHCSLow();
 8005150:	2200      	movs	r2, #0
 8005152:	2102      	movs	r1, #2
 8005154:	4843      	ldr	r0, [pc, #268]	; (8005264 <RadioSpiReadFifo+0x150>)
 8005156:	f000 fcc5 	bl	8005ae4 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 800515a:	2201      	movs	r2, #1
 800515c:	2101      	movs	r1, #1
 800515e:	4841      	ldr	r0, [pc, #260]	; (8005264 <RadioSpiReadFifo+0x150>)
 8005160:	f000 fcc0 	bl	8005ae4 <HAL_GPIO_WritePin>
 8005164:	e017      	b.n	8005196 <RadioSpiReadFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8005166:	7c7b      	ldrb	r3, [r7, #17]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10a      	bne.n	8005182 <RadioSpiReadFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 800516c:	2201      	movs	r2, #1
 800516e:	2102      	movs	r1, #2
 8005170:	483c      	ldr	r0, [pc, #240]	; (8005264 <RadioSpiReadFifo+0x150>)
 8005172:	f000 fcb7 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8005176:	2200      	movs	r2, #0
 8005178:	2101      	movs	r1, #1
 800517a:	483a      	ldr	r0, [pc, #232]	; (8005264 <RadioSpiReadFifo+0x150>)
 800517c:	f000 fcb2 	bl	8005ae4 <HAL_GPIO_WritePin>
 8005180:	e009      	b.n	8005196 <RadioSpiReadFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8005182:	2200      	movs	r2, #0
 8005184:	2102      	movs	r1, #2
 8005186:	4837      	ldr	r0, [pc, #220]	; (8005264 <RadioSpiReadFifo+0x150>)
 8005188:	f000 fcac 	bl	8005ae4 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 800518c:	2201      	movs	r2, #1
 800518e:	2101      	movs	r1, #1
 8005190:	4834      	ldr	r0, [pc, #208]	; (8005264 <RadioSpiReadFifo+0x150>)
 8005192:	f000 fca7 	bl	8005ae4 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8005196:	2300      	movs	r3, #0
 8005198:	813b      	strh	r3, [r7, #8]
 800519a:	e004      	b.n	80051a6 <RadioSpiReadFifo+0x92>
 800519c:	893b      	ldrh	r3, [r7, #8]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3301      	adds	r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	813b      	strh	r3, [r7, #8]
 80051a6:	893b      	ldrh	r3, [r7, #8]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ae:	d3f5      	bcc.n	800519c <RadioSpiReadFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80051b0:	4b2d      	ldr	r3, [pc, #180]	; (8005268 <RadioSpiReadFifo+0x154>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f107 0212 	add.w	r2, r7, #18
 80051b8:	f107 010c 	add.w	r1, r7, #12
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2301      	movs	r3, #1
 80051c0:	482a      	ldr	r0, [pc, #168]	; (800526c <RadioSpiReadFifo+0x158>)
 80051c2:	f001 faa3 	bl	800670c <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 80051c6:	8a7b      	ldrh	r3, [r7, #18]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <RadioSpiReadFifo+0x154>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f107 0012 	add.w	r0, r7, #18
 80051d6:	f107 020c 	add.w	r2, r7, #12
 80051da:	1c51      	adds	r1, r2, #1
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	2301      	movs	r3, #1
 80051e0:	4602      	mov	r2, r0
 80051e2:	4822      	ldr	r0, [pc, #136]	; (800526c <RadioSpiReadFifo+0x158>)
 80051e4:	f001 fa92 	bl	800670c <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e00e      	b.n	800520c <RadioSpiReadFifo+0xf8>
  { 
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&dummy, (uint8_t *)&pcBuffer[index], 1, SpiTimeout);
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	441a      	add	r2, r3
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <RadioSpiReadFifo+0x154>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f107 010b 	add.w	r1, r7, #11
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2301      	movs	r3, #1
 8005200:	481a      	ldr	r0, [pc, #104]	; (800526c <RadioSpiReadFifo+0x158>)
 8005202:	f001 fa83 	bl	800670c <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3301      	adds	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	429a      	cmp	r2, r3
 8005212:	dbec      	blt.n	80051ee <RadioSpiReadFifo+0xda>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET);
 8005214:	bf00      	nop
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <RadioSpiReadFifo+0x158>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d1f8      	bne.n	8005216 <RadioSpiReadFifo+0x102>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8005224:	2201      	movs	r2, #1
 8005226:	2102      	movs	r1, #2
 8005228:	480e      	ldr	r0, [pc, #56]	; (8005264 <RadioSpiReadFifo+0x150>)
 800522a:	f000 fc5b 	bl	8005ae4 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 800522e:	2201      	movs	r2, #1
 8005230:	2101      	movs	r1, #1
 8005232:	480c      	ldr	r0, [pc, #48]	; (8005264 <RadioSpiReadFifo+0x150>)
 8005234:	f000 fc56 	bl	8005ae4 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8005238:	2301      	movs	r3, #1
 800523a:	2204      	movs	r2, #4
 800523c:	2104      	movs	r1, #4
 800523e:	2003      	movs	r0, #3
 8005240:	f7ff fc18 	bl	8004a74 <RadioGpioInterruptCmd>
  
  return *pStatus;  
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	f107 0314 	add.w	r3, r7, #20
 800524a:	8812      	ldrh	r2, [r2, #0]
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	7d3a      	ldrb	r2, [r7, #20]
 8005252:	f362 0307 	bfi	r3, r2, #0, #8
 8005256:	7d7a      	ldrb	r2, [r7, #21]
 8005258:	f362 230f 	bfi	r3, r2, #8, #8
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40020400 	.word	0x40020400
 8005268:	200001e8 	.word	0x200001e8
 800526c:	20000374 	.word	0x20000374

08005270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_Init+0x40>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <HAL_Init+0x40>)
 800527a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800527e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_Init+0x40>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <HAL_Init+0x40>)
 8005286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800528a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <HAL_Init+0x40>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <HAL_Init+0x40>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005298:	2003      	movs	r0, #3
 800529a:	f000 f96f 	bl	800557c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800529e:	2000      	movs	r0, #0
 80052a0:	f000 f808 	bl	80052b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052a4:	f7fc fccc 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023c00 	.word	0x40023c00

080052b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052bc:	4b12      	ldr	r3, [pc, #72]	; (8005308 <HAL_InitTick+0x54>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b12      	ldr	r3, [pc, #72]	; (800530c <HAL_InitTick+0x58>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f995 	bl	8005602 <HAL_SYSTICK_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e00e      	b.n	8005300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d80a      	bhi.n	80052fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052e8:	2200      	movs	r2, #0
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	f000 f94f 	bl	8005592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052f4:	4a06      	ldr	r2, [pc, #24]	; (8005310 <HAL_InitTick+0x5c>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200001dc 	.word	0x200001dc
 800530c:	200001f0 	.word	0x200001f0
 8005310:	200001ec 	.word	0x200001ec

08005314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_IncTick+0x20>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_IncTick+0x24>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4413      	add	r3, r2
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <HAL_IncTick+0x24>)
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	200001f0 	.word	0x200001f0
 8005338:	20000444 	.word	0x20000444

0800533c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return uwTick;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <HAL_GetTick+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000444 	.word	0x20000444

08005354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800535c:	f7ff ffee 	bl	800533c <HAL_GetTick>
 8005360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d005      	beq.n	800537a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_Delay+0x40>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800537a:	bf00      	nop
 800537c:	f7ff ffde 	bl	800533c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	429a      	cmp	r2, r3
 800538a:	d8f7      	bhi.n	800537c <HAL_Delay+0x28>
  {
  }
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	200001f0 	.word	0x200001f0

08005398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <__NVIC_SetPriorityGrouping+0x44>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053b4:	4013      	ands	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ca:	4a04      	ldr	r2, [pc, #16]	; (80053dc <__NVIC_SetPriorityGrouping+0x44>)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	60d3      	str	r3, [r2, #12]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e4:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <__NVIC_GetPriorityGrouping+0x18>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	f003 0307 	and.w	r3, r3, #7
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540a:	2b00      	cmp	r3, #0
 800540c:	db0b      	blt.n	8005426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	f003 021f 	and.w	r2, r3, #31
 8005414:	4907      	ldr	r1, [pc, #28]	; (8005434 <__NVIC_EnableIRQ+0x38>)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2001      	movs	r0, #1
 800541e:	fa00 f202 	lsl.w	r2, r0, r2
 8005422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	e000e100 	.word	0xe000e100

08005438 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db10      	blt.n	800546c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	f003 021f 	and.w	r2, r3, #31
 8005450:	4909      	ldr	r1, [pc, #36]	; (8005478 <__NVIC_DisableIRQ+0x40>)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2001      	movs	r0, #1
 800545a:	fa00 f202 	lsl.w	r2, r0, r2
 800545e:	3320      	adds	r3, #32
 8005460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005464:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005468:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100

0800547c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548c:	2b00      	cmp	r3, #0
 800548e:	db0a      	blt.n	80054a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	490c      	ldr	r1, [pc, #48]	; (80054c8 <__NVIC_SetPriority+0x4c>)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	440b      	add	r3, r1
 80054a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054a4:	e00a      	b.n	80054bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4908      	ldr	r1, [pc, #32]	; (80054cc <__NVIC_SetPriority+0x50>)
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3b04      	subs	r3, #4
 80054b4:	0112      	lsls	r2, r2, #4
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	440b      	add	r3, r1
 80054ba:	761a      	strb	r2, [r3, #24]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	e000e100 	.word	0xe000e100
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f1c3 0307 	rsb	r3, r3, #7
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	bf28      	it	cs
 80054ee:	2304      	movcs	r3, #4
 80054f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d902      	bls.n	8005500 <NVIC_EncodePriority+0x30>
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3b03      	subs	r3, #3
 80054fe:	e000      	b.n	8005502 <NVIC_EncodePriority+0x32>
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005504:	f04f 32ff 	mov.w	r2, #4294967295
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43da      	mvns	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	401a      	ands	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005518:	f04f 31ff 	mov.w	r1, #4294967295
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	43d9      	mvns	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005528:	4313      	orrs	r3, r2
         );
}
 800552a:	4618      	mov	r0, r3
 800552c:	3724      	adds	r7, #36	; 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3b01      	subs	r3, #1
 8005544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005548:	d301      	bcc.n	800554e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800554a:	2301      	movs	r3, #1
 800554c:	e00f      	b.n	800556e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800554e:	4a0a      	ldr	r2, [pc, #40]	; (8005578 <SysTick_Config+0x40>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005556:	210f      	movs	r1, #15
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	f7ff ff8e 	bl	800547c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <SysTick_Config+0x40>)
 8005562:	2200      	movs	r2, #0
 8005564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005566:	4b04      	ldr	r3, [pc, #16]	; (8005578 <SysTick_Config+0x40>)
 8005568:	2207      	movs	r2, #7
 800556a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	e000e010 	.word	0xe000e010

0800557c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ff07 	bl	8005398 <__NVIC_SetPriorityGrouping>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005592:	b580      	push	{r7, lr}
 8005594:	b086      	sub	sp, #24
 8005596:	af00      	add	r7, sp, #0
 8005598:	4603      	mov	r3, r0
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055a4:	f7ff ff1c 	bl	80053e0 <__NVIC_GetPriorityGrouping>
 80055a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	6978      	ldr	r0, [r7, #20]
 80055b0:	f7ff ff8e 	bl	80054d0 <NVIC_EncodePriority>
 80055b4:	4602      	mov	r2, r0
 80055b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ba:	4611      	mov	r1, r2
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ff5d 	bl	800547c <__NVIC_SetPriority>
}
 80055c2:	bf00      	nop
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	4603      	mov	r3, r0
 80055d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff ff0f 	bl	80053fc <__NVIC_EnableIRQ>
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	4603      	mov	r3, r0
 80055ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff1f 	bl	8005438 <__NVIC_DisableIRQ>
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff94 	bl	8005538 <SysTick_Config>
 8005610:	4603      	mov	r3, r0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800562e:	2300      	movs	r3, #0
 8005630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005632:	2300      	movs	r3, #0
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	e159      	b.n	80058ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005638:	2201      	movs	r2, #1
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	429a      	cmp	r2, r3
 8005652:	f040 8148 	bne.w	80058e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d00b      	beq.n	8005676 <HAL_GPIO_Init+0x5a>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d007      	beq.n	8005676 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800566a:	2b11      	cmp	r3, #17
 800566c:	d003      	beq.n	8005676 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b12      	cmp	r3, #18
 8005674:	d130      	bne.n	80056d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	2203      	movs	r2, #3
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056ac:	2201      	movs	r2, #1
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 0201 	and.w	r2, r3, #1
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	2203      	movs	r2, #3
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d003      	beq.n	8005718 <HAL_GPIO_Init+0xfc>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b12      	cmp	r3, #18
 8005716:	d123      	bne.n	8005760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	220f      	movs	r2, #15
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	08da      	lsrs	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3208      	adds	r2, #8
 800575a:	69b9      	ldr	r1, [r7, #24]
 800575c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	2203      	movs	r2, #3
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f003 0203 	and.w	r2, r3, #3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a2 	beq.w	80058e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	4b56      	ldr	r3, [pc, #344]	; (8005900 <HAL_GPIO_Init+0x2e4>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	4a55      	ldr	r2, [pc, #340]	; (8005900 <HAL_GPIO_Init+0x2e4>)
 80057ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057b0:	6453      	str	r3, [r2, #68]	; 0x44
 80057b2:	4b53      	ldr	r3, [pc, #332]	; (8005900 <HAL_GPIO_Init+0x2e4>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057be:	4a51      	ldr	r2, [pc, #324]	; (8005904 <HAL_GPIO_Init+0x2e8>)
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	089b      	lsrs	r3, r3, #2
 80057c4:	3302      	adds	r3, #2
 80057c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	220f      	movs	r2, #15
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a48      	ldr	r2, [pc, #288]	; (8005908 <HAL_GPIO_Init+0x2ec>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d019      	beq.n	800581e <HAL_GPIO_Init+0x202>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a47      	ldr	r2, [pc, #284]	; (800590c <HAL_GPIO_Init+0x2f0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <HAL_GPIO_Init+0x1fe>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a46      	ldr	r2, [pc, #280]	; (8005910 <HAL_GPIO_Init+0x2f4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00d      	beq.n	8005816 <HAL_GPIO_Init+0x1fa>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a45      	ldr	r2, [pc, #276]	; (8005914 <HAL_GPIO_Init+0x2f8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <HAL_GPIO_Init+0x1f6>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a44      	ldr	r2, [pc, #272]	; (8005918 <HAL_GPIO_Init+0x2fc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <HAL_GPIO_Init+0x1f2>
 800580a:	2304      	movs	r3, #4
 800580c:	e008      	b.n	8005820 <HAL_GPIO_Init+0x204>
 800580e:	2307      	movs	r3, #7
 8005810:	e006      	b.n	8005820 <HAL_GPIO_Init+0x204>
 8005812:	2303      	movs	r3, #3
 8005814:	e004      	b.n	8005820 <HAL_GPIO_Init+0x204>
 8005816:	2302      	movs	r3, #2
 8005818:	e002      	b.n	8005820 <HAL_GPIO_Init+0x204>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_GPIO_Init+0x204>
 800581e:	2300      	movs	r3, #0
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	f002 0203 	and.w	r2, r2, #3
 8005826:	0092      	lsls	r2, r2, #2
 8005828:	4093      	lsls	r3, r2
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005830:	4934      	ldr	r1, [pc, #208]	; (8005904 <HAL_GPIO_Init+0x2e8>)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	089b      	lsrs	r3, r3, #2
 8005836:	3302      	adds	r3, #2
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <HAL_GPIO_Init+0x300>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	43db      	mvns	r3, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4013      	ands	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005862:	4a2e      	ldr	r2, [pc, #184]	; (800591c <HAL_GPIO_Init+0x300>)
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005868:	4b2c      	ldr	r3, [pc, #176]	; (800591c <HAL_GPIO_Init+0x300>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800588c:	4a23      	ldr	r2, [pc, #140]	; (800591c <HAL_GPIO_Init+0x300>)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005892:	4b22      	ldr	r3, [pc, #136]	; (800591c <HAL_GPIO_Init+0x300>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058b6:	4a19      	ldr	r2, [pc, #100]	; (800591c <HAL_GPIO_Init+0x300>)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058bc:	4b17      	ldr	r3, [pc, #92]	; (800591c <HAL_GPIO_Init+0x300>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058e0:	4a0e      	ldr	r2, [pc, #56]	; (800591c <HAL_GPIO_Init+0x300>)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3301      	adds	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	f67f aea2 	bls.w	8005638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058f4:	bf00      	nop
 80058f6:	3724      	adds	r7, #36	; 0x24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40023800 	.word	0x40023800
 8005904:	40013800 	.word	0x40013800
 8005908:	40020000 	.word	0x40020000
 800590c:	40020400 	.word	0x40020400
 8005910:	40020800 	.word	0x40020800
 8005914:	40020c00 	.word	0x40020c00
 8005918:	40021000 	.word	0x40021000
 800591c:	40013c00 	.word	0x40013c00

08005920 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005932:	2300      	movs	r3, #0
 8005934:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e0bb      	b.n	8005ab4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800593c:	2201      	movs	r2, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	429a      	cmp	r2, r3
 8005954:	f040 80ab 	bne.w	8005aae <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005958:	4a5b      	ldr	r2, [pc, #364]	; (8005ac8 <HAL_GPIO_DeInit+0x1a8>)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	089b      	lsrs	r3, r3, #2
 800595e:	3302      	adds	r3, #2
 8005960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005964:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	220f      	movs	r2, #15
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a53      	ldr	r2, [pc, #332]	; (8005acc <HAL_GPIO_DeInit+0x1ac>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d019      	beq.n	80059b6 <HAL_GPIO_DeInit+0x96>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a52      	ldr	r2, [pc, #328]	; (8005ad0 <HAL_GPIO_DeInit+0x1b0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_GPIO_DeInit+0x92>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a51      	ldr	r2, [pc, #324]	; (8005ad4 <HAL_GPIO_DeInit+0x1b4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00d      	beq.n	80059ae <HAL_GPIO_DeInit+0x8e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a50      	ldr	r2, [pc, #320]	; (8005ad8 <HAL_GPIO_DeInit+0x1b8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <HAL_GPIO_DeInit+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a4f      	ldr	r2, [pc, #316]	; (8005adc <HAL_GPIO_DeInit+0x1bc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <HAL_GPIO_DeInit+0x86>
 80059a2:	2304      	movs	r3, #4
 80059a4:	e008      	b.n	80059b8 <HAL_GPIO_DeInit+0x98>
 80059a6:	2307      	movs	r3, #7
 80059a8:	e006      	b.n	80059b8 <HAL_GPIO_DeInit+0x98>
 80059aa:	2303      	movs	r3, #3
 80059ac:	e004      	b.n	80059b8 <HAL_GPIO_DeInit+0x98>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e002      	b.n	80059b8 <HAL_GPIO_DeInit+0x98>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_GPIO_DeInit+0x98>
 80059b6:	2300      	movs	r3, #0
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	f002 0203 	and.w	r2, r2, #3
 80059be:	0092      	lsls	r2, r2, #2
 80059c0:	4093      	lsls	r3, r2
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d132      	bne.n	8005a2e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80059c8:	4b45      	ldr	r3, [pc, #276]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	4943      	ldr	r1, [pc, #268]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80059d6:	4b42      	ldr	r3, [pc, #264]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	43db      	mvns	r3, r3
 80059de:	4940      	ldr	r1, [pc, #256]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80059e4:	4b3e      	ldr	r3, [pc, #248]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	493c      	ldr	r1, [pc, #240]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80059f2:	4b3b      	ldr	r3, [pc, #236]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	4939      	ldr	r1, [pc, #228]	; (8005ae0 <HAL_GPIO_DeInit+0x1c0>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	220f      	movs	r2, #15
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a10:	4a2d      	ldr	r2, [pc, #180]	; (8005ac8 <HAL_GPIO_DeInit+0x1a8>)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	3302      	adds	r3, #2
 8005a18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	4829      	ldr	r0, [pc, #164]	; (8005ac8 <HAL_GPIO_DeInit+0x1a8>)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	400a      	ands	r2, r1
 8005a28:	3302      	adds	r3, #2
 8005a2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	2103      	movs	r1, #3
 8005a38:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	401a      	ands	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	08da      	lsrs	r2, r3, #3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3208      	adds	r2, #8
 8005a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	220f      	movs	r2, #15
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	08d2      	lsrs	r2, r2, #3
 8005a64:	4019      	ands	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3208      	adds	r2, #8
 8005a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	2103      	movs	r1, #3
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	401a      	ands	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	2101      	movs	r1, #1
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	401a      	ands	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	401a      	ands	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	f67f af40 	bls.w	800593c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40013800 	.word	0x40013800
 8005acc:	40020000 	.word	0x40020000
 8005ad0:	40020400 	.word	0x40020400
 8005ad4:	40020800 	.word	0x40020800
 8005ad8:	40020c00 	.word	0x40020c00
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	40013c00 	.word	0x40013c00

08005ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	807b      	strh	r3, [r7, #2]
 8005af0:	4613      	mov	r3, r2
 8005af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005af4:	787b      	ldrb	r3, [r7, #1]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b00:	e003      	b.n	8005b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b02:	887b      	ldrh	r3, [r7, #2]
 8005b04:	041a      	lsls	r2, r3, #16
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	619a      	str	r2, [r3, #24]
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	887b      	ldrh	r3, [r7, #2]
 8005b28:	401a      	ands	r2, r3
 8005b2a:	887b      	ldrh	r3, [r7, #2]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d104      	bne.n	8005b3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	041a      	lsls	r2, r3, #16
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005b38:	e002      	b.n	8005b40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	619a      	str	r2, [r3, #24]
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d006      	beq.n	8005b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b62:	4a05      	ldr	r2, [pc, #20]	; (8005b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fc f840 	bl	8001bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40013c00 	.word	0x40013c00

08005b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e25b      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d075      	beq.n	8005c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b9a:	4ba3      	ldr	r3, [pc, #652]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 030c 	and.w	r3, r3, #12
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ba6:	4ba0      	ldr	r3, [pc, #640]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d112      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bb2:	4b9d      	ldr	r3, [pc, #628]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bbe:	d10b      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc0:	4b99      	ldr	r3, [pc, #612]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05b      	beq.n	8005c84 <HAL_RCC_OscConfig+0x108>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d157      	bne.n	8005c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e236      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be0:	d106      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x74>
 8005be2:	4b91      	ldr	r3, [pc, #580]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a90      	ldr	r2, [pc, #576]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e01d      	b.n	8005c2c <HAL_RCC_OscConfig+0xb0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x98>
 8005bfa:	4b8b      	ldr	r3, [pc, #556]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a8a      	ldr	r2, [pc, #552]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	4b88      	ldr	r3, [pc, #544]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a87      	ldr	r2, [pc, #540]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e00b      	b.n	8005c2c <HAL_RCC_OscConfig+0xb0>
 8005c14:	4b84      	ldr	r3, [pc, #528]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a83      	ldr	r2, [pc, #524]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	4b81      	ldr	r3, [pc, #516]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a80      	ldr	r2, [pc, #512]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7ff fb82 	bl	800533c <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c3c:	f7ff fb7e 	bl	800533c <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b64      	cmp	r3, #100	; 0x64
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e1fb      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4e:	4b76      	ldr	r3, [pc, #472]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0xc0>
 8005c5a:	e014      	b.n	8005c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5c:	f7ff fb6e 	bl	800533c <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c64:	f7ff fb6a 	bl	800533c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	; 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e1e7      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c76:	4b6c      	ldr	r3, [pc, #432]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_OscConfig+0xe8>
 8005c82:	e000      	b.n	8005c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d063      	beq.n	8005d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c92:	4b65      	ldr	r3, [pc, #404]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c9e:	4b62      	ldr	r3, [pc, #392]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d11c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005caa:	4b5f      	ldr	r3, [pc, #380]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d116      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cb6:	4b5c      	ldr	r3, [pc, #368]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_RCC_OscConfig+0x152>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d001      	beq.n	8005cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e1bb      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cce:	4b56      	ldr	r3, [pc, #344]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	4952      	ldr	r1, [pc, #328]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ce2:	e03a      	b.n	8005d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d020      	beq.n	8005d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cec:	4b4f      	ldr	r3, [pc, #316]	; (8005e2c <HAL_RCC_OscConfig+0x2b0>)
 8005cee:	2201      	movs	r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf2:	f7ff fb23 	bl	800533c <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cfa:	f7ff fb1f 	bl	800533c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e19c      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d0c:	4b46      	ldr	r3, [pc, #280]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d18:	4b43      	ldr	r3, [pc, #268]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4940      	ldr	r1, [pc, #256]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]
 8005d2c:	e015      	b.n	8005d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <HAL_RCC_OscConfig+0x2b0>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d34:	f7ff fb02 	bl	800533c <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d3c:	f7ff fafe 	bl	800533c <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e17b      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d4e:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f0      	bne.n	8005d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d030      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d016      	beq.n	8005d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6e:	4b30      	ldr	r3, [pc, #192]	; (8005e30 <HAL_RCC_OscConfig+0x2b4>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7ff fae2 	bl	800533c <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d7c:	f7ff fade 	bl	800533c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e15b      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d8e:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCC_OscConfig+0x200>
 8005d9a:	e015      	b.n	8005dc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d9c:	4b24      	ldr	r3, [pc, #144]	; (8005e30 <HAL_RCC_OscConfig+0x2b4>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da2:	f7ff facb 	bl	800533c <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005daa:	f7ff fac7 	bl	800533c <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e144      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f0      	bne.n	8005daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80a0 	beq.w	8005f16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10f      	bne.n	8005e06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	4a0e      	ldr	r2, [pc, #56]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6413      	str	r3, [r2, #64]	; 0x40
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCC_OscConfig+0x2b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d121      	bne.n	8005e56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <HAL_RCC_OscConfig+0x2b8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a07      	ldr	r2, [pc, #28]	; (8005e34 <HAL_RCC_OscConfig+0x2b8>)
 8005e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e1e:	f7ff fa8d 	bl	800533c <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e24:	e011      	b.n	8005e4a <HAL_RCC_OscConfig+0x2ce>
 8005e26:	bf00      	nop
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	42470000 	.word	0x42470000
 8005e30:	42470e80 	.word	0x42470e80
 8005e34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7ff fa80 	bl	800533c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0fd      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4a:	4b81      	ldr	r3, [pc, #516]	; (8006050 <HAL_RCC_OscConfig+0x4d4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d106      	bne.n	8005e6c <HAL_RCC_OscConfig+0x2f0>
 8005e5e:	4b7d      	ldr	r3, [pc, #500]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	4a7c      	ldr	r2, [pc, #496]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6a:	e01c      	b.n	8005ea6 <HAL_RCC_OscConfig+0x32a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b05      	cmp	r3, #5
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCC_OscConfig+0x312>
 8005e74:	4b77      	ldr	r3, [pc, #476]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e78:	4a76      	ldr	r2, [pc, #472]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e7a:	f043 0304 	orr.w	r3, r3, #4
 8005e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e80:	4b74      	ldr	r3, [pc, #464]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	4a73      	ldr	r2, [pc, #460]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8c:	e00b      	b.n	8005ea6 <HAL_RCC_OscConfig+0x32a>
 8005e8e:	4b71      	ldr	r3, [pc, #452]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e92:	4a70      	ldr	r2, [pc, #448]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9a:	4b6e      	ldr	r3, [pc, #440]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	4a6d      	ldr	r2, [pc, #436]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005ea0:	f023 0304 	bic.w	r3, r3, #4
 8005ea4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d015      	beq.n	8005eda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7ff fa45 	bl	800533c <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb4:	e00a      	b.n	8005ecc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb6:	f7ff fa41 	bl	800533c <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e0bc      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ecc:	4b61      	ldr	r3, [pc, #388]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0ee      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x33a>
 8005ed8:	e014      	b.n	8005f04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eda:	f7ff fa2f 	bl	800533c <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee2:	f7ff fa2b 	bl	800533c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e0a6      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef8:	4b56      	ldr	r3, [pc, #344]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ee      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d105      	bne.n	8005f16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f0a:	4b52      	ldr	r3, [pc, #328]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a51      	ldr	r2, [pc, #324]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 8092 	beq.w	8006044 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f20:	4b4c      	ldr	r3, [pc, #304]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d05c      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d141      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f34:	4b48      	ldr	r3, [pc, #288]	; (8006058 <HAL_RCC_OscConfig+0x4dc>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3a:	f7ff f9ff 	bl	800533c <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f42:	f7ff f9fb 	bl	800533c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e078      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f54:	4b3f      	ldr	r3, [pc, #252]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	019b      	lsls	r3, r3, #6
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	4933      	ldr	r1, [pc, #204]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f8a:	4b33      	ldr	r3, [pc, #204]	; (8006058 <HAL_RCC_OscConfig+0x4dc>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7ff f9d4 	bl	800533c <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f98:	f7ff f9d0 	bl	800533c <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e04d      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005faa:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0x41c>
 8005fb6:	e045      	b.n	8006044 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb8:	4b27      	ldr	r3, [pc, #156]	; (8006058 <HAL_RCC_OscConfig+0x4dc>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbe:	f7ff f9bd 	bl	800533c <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc6:	f7ff f9b9 	bl	800533c <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e036      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd8:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x44a>
 8005fe4:	e02e      	b.n	8006044 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e029      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ff2:	4b18      	ldr	r3, [pc, #96]	; (8006054 <HAL_RCC_OscConfig+0x4d8>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	429a      	cmp	r2, r3
 8006004:	d11c      	bne.n	8006040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006010:	429a      	cmp	r2, r3
 8006012:	d115      	bne.n	8006040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800601a:	4013      	ands	r3, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006020:	4293      	cmp	r3, r2
 8006022:	d10d      	bne.n	8006040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800602e:	429a      	cmp	r2, r3
 8006030:	d106      	bne.n	8006040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40007000 	.word	0x40007000
 8006054:	40023800 	.word	0x40023800
 8006058:	42470060 	.word	0x42470060

0800605c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0cc      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006070:	4b68      	ldr	r3, [pc, #416]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d90c      	bls.n	8006098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	4b65      	ldr	r3, [pc, #404]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006086:	4b63      	ldr	r3, [pc, #396]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d001      	beq.n	8006098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0b8      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d020      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b0:	4b59      	ldr	r3, [pc, #356]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4a58      	ldr	r2, [pc, #352]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060c8:	4b53      	ldr	r3, [pc, #332]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	4a52      	ldr	r2, [pc, #328]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d4:	4b50      	ldr	r3, [pc, #320]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	494d      	ldr	r1, [pc, #308]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d044      	beq.n	800617c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d107      	bne.n	800610a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fa:	4b47      	ldr	r3, [pc, #284]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d119      	bne.n	800613a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e07f      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d003      	beq.n	800611a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006116:	2b03      	cmp	r3, #3
 8006118:	d107      	bne.n	800612a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611a:	4b3f      	ldr	r3, [pc, #252]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d109      	bne.n	800613a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e06f      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800612a:	4b3b      	ldr	r3, [pc, #236]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e067      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800613a:	4b37      	ldr	r3, [pc, #220]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f023 0203 	bic.w	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4934      	ldr	r1, [pc, #208]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800614c:	f7ff f8f6 	bl	800533c <HAL_GetTick>
 8006150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006152:	e00a      	b.n	800616a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006154:	f7ff f8f2 	bl	800533c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e04f      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616a:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 020c 	and.w	r2, r3, #12
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	429a      	cmp	r2, r3
 800617a:	d1eb      	bne.n	8006154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800617c:	4b25      	ldr	r3, [pc, #148]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d20c      	bcs.n	80061a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b22      	ldr	r3, [pc, #136]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b20      	ldr	r3, [pc, #128]	; (8006214 <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e032      	b.n	800620a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b0:	4b19      	ldr	r3, [pc, #100]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	4916      	ldr	r1, [pc, #88]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	490e      	ldr	r1, [pc, #56]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061e2:	f000 f821 	bl	8006228 <HAL_RCC_GetSysClockFreq>
 80061e6:	4601      	mov	r1, r0
 80061e8:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	4a0a      	ldr	r2, [pc, #40]	; (800621c <HAL_RCC_ClockConfig+0x1c0>)
 80061f4:	5cd3      	ldrb	r3, [r2, r3]
 80061f6:	fa21 f303 	lsr.w	r3, r1, r3
 80061fa:	4a09      	ldr	r2, [pc, #36]	; (8006220 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HAL_RCC_ClockConfig+0x1c8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f856 	bl	80052b4 <HAL_InitTick>

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40023c00 	.word	0x40023c00
 8006218:	40023800 	.word	0x40023800
 800621c:	080073e4 	.word	0x080073e4
 8006220:	200001dc 	.word	0x200001dc
 8006224:	200001ec 	.word	0x200001ec

08006228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	2300      	movs	r3, #0
 8006238:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800623e:	4b50      	ldr	r3, [pc, #320]	; (8006380 <HAL_RCC_GetSysClockFreq+0x158>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 030c 	and.w	r3, r3, #12
 8006246:	2b04      	cmp	r3, #4
 8006248:	d007      	beq.n	800625a <HAL_RCC_GetSysClockFreq+0x32>
 800624a:	2b08      	cmp	r3, #8
 800624c:	d008      	beq.n	8006260 <HAL_RCC_GetSysClockFreq+0x38>
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 808d 	bne.w	800636e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006254:	4b4b      	ldr	r3, [pc, #300]	; (8006384 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006256:	60bb      	str	r3, [r7, #8]
       break;
 8006258:	e08c      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800625a:	4b4b      	ldr	r3, [pc, #300]	; (8006388 <HAL_RCC_GetSysClockFreq+0x160>)
 800625c:	60bb      	str	r3, [r7, #8]
      break;
 800625e:	e089      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006260:	4b47      	ldr	r3, [pc, #284]	; (8006380 <HAL_RCC_GetSysClockFreq+0x158>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006268:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800626a:	4b45      	ldr	r3, [pc, #276]	; (8006380 <HAL_RCC_GetSysClockFreq+0x158>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d023      	beq.n	80062be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006276:	4b42      	ldr	r3, [pc, #264]	; (8006380 <HAL_RCC_GetSysClockFreq+0x158>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	099b      	lsrs	r3, r3, #6
 800627c:	f04f 0400 	mov.w	r4, #0
 8006280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	ea03 0501 	and.w	r5, r3, r1
 800628c:	ea04 0602 	and.w	r6, r4, r2
 8006290:	4a3d      	ldr	r2, [pc, #244]	; (8006388 <HAL_RCC_GetSysClockFreq+0x160>)
 8006292:	fb02 f106 	mul.w	r1, r2, r6
 8006296:	2200      	movs	r2, #0
 8006298:	fb02 f205 	mul.w	r2, r2, r5
 800629c:	440a      	add	r2, r1
 800629e:	493a      	ldr	r1, [pc, #232]	; (8006388 <HAL_RCC_GetSysClockFreq+0x160>)
 80062a0:	fba5 0101 	umull	r0, r1, r5, r1
 80062a4:	1853      	adds	r3, r2, r1
 80062a6:	4619      	mov	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f04f 0400 	mov.w	r4, #0
 80062ae:	461a      	mov	r2, r3
 80062b0:	4623      	mov	r3, r4
 80062b2:	f7fa fc07 	bl	8000ac4 <__aeabi_uldivmod>
 80062b6:	4603      	mov	r3, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e049      	b.n	8006352 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062be:	4b30      	ldr	r3, [pc, #192]	; (8006380 <HAL_RCC_GetSysClockFreq+0x158>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	099b      	lsrs	r3, r3, #6
 80062c4:	f04f 0400 	mov.w	r4, #0
 80062c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	ea03 0501 	and.w	r5, r3, r1
 80062d4:	ea04 0602 	and.w	r6, r4, r2
 80062d8:	4629      	mov	r1, r5
 80062da:	4632      	mov	r2, r6
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	f04f 0400 	mov.w	r4, #0
 80062e4:	0154      	lsls	r4, r2, #5
 80062e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062ea:	014b      	lsls	r3, r1, #5
 80062ec:	4619      	mov	r1, r3
 80062ee:	4622      	mov	r2, r4
 80062f0:	1b49      	subs	r1, r1, r5
 80062f2:	eb62 0206 	sbc.w	r2, r2, r6
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	f04f 0400 	mov.w	r4, #0
 80062fe:	0194      	lsls	r4, r2, #6
 8006300:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006304:	018b      	lsls	r3, r1, #6
 8006306:	1a5b      	subs	r3, r3, r1
 8006308:	eb64 0402 	sbc.w	r4, r4, r2
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	00e2      	lsls	r2, r4, #3
 8006316:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800631a:	00d9      	lsls	r1, r3, #3
 800631c:	460b      	mov	r3, r1
 800631e:	4614      	mov	r4, r2
 8006320:	195b      	adds	r3, r3, r5
 8006322:	eb44 0406 	adc.w	r4, r4, r6
 8006326:	f04f 0100 	mov.w	r1, #0
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	02a2      	lsls	r2, r4, #10
 8006330:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006334:	0299      	lsls	r1, r3, #10
 8006336:	460b      	mov	r3, r1
 8006338:	4614      	mov	r4, r2
 800633a:	4618      	mov	r0, r3
 800633c:	4621      	mov	r1, r4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f04f 0400 	mov.w	r4, #0
 8006344:	461a      	mov	r2, r3
 8006346:	4623      	mov	r3, r4
 8006348:	f7fa fbbc 	bl	8000ac4 <__aeabi_uldivmod>
 800634c:	4603      	mov	r3, r0
 800634e:	460c      	mov	r4, r1
 8006350:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <HAL_RCC_GetSysClockFreq+0x158>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	3301      	adds	r3, #1
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	60bb      	str	r3, [r7, #8]
      break;
 800636c:	e002      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800636e:	4b05      	ldr	r3, [pc, #20]	; (8006384 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006370:	60bb      	str	r3, [r7, #8]
      break;
 8006372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006374:	68bb      	ldr	r3, [r7, #8]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800
 8006384:	00f42400 	.word	0x00f42400
 8006388:	017d7840 	.word	0x017d7840

0800638c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e056      	b.n	800644c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fb fc69 	bl	8001c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	ea42 0103 	orr.w	r1, r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	0c1b      	lsrs	r3, r3, #16
 800641c:	f003 0104 	and.w	r1, r3, #4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800643a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e01a      	b.n	800649c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fb fc5e 	bl	8001d40 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_SPI_Transmit+0x22>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e11e      	b.n	8006704 <HAL_SPI_Transmit+0x260>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ce:	f7fe ff35 	bl	800533c <HAL_GetTick>
 80064d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d002      	beq.n	80064ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
 80064e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064e8:	e103      	b.n	80066f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_Transmit+0x52>
 80064f0:	88fb      	ldrh	r3, [r7, #6]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064fa:	e0fa      	b.n	80066f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2203      	movs	r2, #3
 8006500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	88fa      	ldrh	r2, [r7, #6]
 800651a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006542:	d107      	bne.n	8006554 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006552:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d007      	beq.n	8006572 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657a:	d14b      	bne.n	8006614 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <HAL_SPI_Transmit+0xe6>
 8006584:	8afb      	ldrh	r3, [r7, #22]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d13e      	bne.n	8006608 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	881a      	ldrh	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	1c9a      	adds	r2, r3, #2
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ae:	e02b      	b.n	8006608 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d112      	bne.n	80065e4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	881a      	ldrh	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80065e2:	e011      	b.n	8006608 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e4:	f7fe feaa 	bl	800533c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d803      	bhi.n	80065fc <HAL_SPI_Transmit+0x158>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d102      	bne.n	8006602 <HAL_SPI_Transmit+0x15e>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006606:	e074      	b.n	80066f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1ce      	bne.n	80065b0 <HAL_SPI_Transmit+0x10c>
 8006612:	e04c      	b.n	80066ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_SPI_Transmit+0x17e>
 800661c:	8afb      	ldrh	r3, [r7, #22]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d140      	bne.n	80066a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006648:	e02c      	b.n	80066a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	d113      	bne.n	8006680 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	86da      	strh	r2, [r3, #54]	; 0x36
 800667e:	e011      	b.n	80066a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006680:	f7fe fe5c 	bl	800533c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d803      	bhi.n	8006698 <HAL_SPI_Transmit+0x1f4>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d102      	bne.n	800669e <HAL_SPI_Transmit+0x1fa>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066a2:	e026      	b.n	80066f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1cd      	bne.n	800664a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fa44 	bl	8006b40 <SPI_EndRxTxTransaction>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e000      	b.n	80066f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80066f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006702:	7ffb      	ldrb	r3, [r7, #31]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3720      	adds	r7, #32
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08c      	sub	sp, #48	; 0x30
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800671a:	2301      	movs	r3, #1
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x26>
 800672e:	2302      	movs	r3, #2
 8006730:	e18a      	b.n	8006a48 <HAL_SPI_TransmitReceive+0x33c>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673a:	f7fe fdff 	bl	800533c <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006750:	887b      	ldrh	r3, [r7, #2]
 8006752:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006758:	2b01      	cmp	r3, #1
 800675a:	d00f      	beq.n	800677c <HAL_SPI_TransmitReceive+0x70>
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006762:	d107      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x68>
 800676c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006770:	2b04      	cmp	r3, #4
 8006772:	d003      	beq.n	800677c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006774:	2302      	movs	r3, #2
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800677a:	e15b      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_SPI_TransmitReceive+0x82>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_SPI_TransmitReceive+0x82>
 8006788:	887b      	ldrh	r3, [r7, #2]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006794:	e14e      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d003      	beq.n	80067aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2205      	movs	r2, #5
 80067a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	887a      	ldrh	r2, [r7, #2]
 80067ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	887a      	ldrh	r2, [r7, #2]
 80067d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d007      	beq.n	80067fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006806:	d178      	bne.n	80068fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_SPI_TransmitReceive+0x10a>
 8006810:	8b7b      	ldrh	r3, [r7, #26]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d166      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	881a      	ldrh	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	1c9a      	adds	r2, r3, #2
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800683a:	e053      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b02      	cmp	r3, #2
 8006848:	d11b      	bne.n	8006882 <HAL_SPI_TransmitReceive+0x176>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d016      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x176>
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	2b01      	cmp	r3, #1
 8006858:	d113      	bne.n	8006882 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	881a      	ldrh	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	1c9a      	adds	r2, r3, #2
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b01      	cmp	r3, #1
 800688e:	d119      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x1b8>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d014      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	b292      	uxth	r2, r2
 80068a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068c0:	2301      	movs	r3, #1
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068c4:	f7fe fd3a 	bl	800533c <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d807      	bhi.n	80068e4 <HAL_SPI_TransmitReceive+0x1d8>
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d003      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068e2:	e0a7      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1a6      	bne.n	800683c <HAL_SPI_TransmitReceive+0x130>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1a1      	bne.n	800683c <HAL_SPI_TransmitReceive+0x130>
 80068f8:	e07c      	b.n	80069f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_SPI_TransmitReceive+0x1fc>
 8006902:	8b7b      	ldrh	r3, [r7, #26]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d16b      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	7812      	ldrb	r2, [r2, #0]
 8006914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692e:	e057      	b.n	80069e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b02      	cmp	r3, #2
 800693c:	d11c      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x26c>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d017      	beq.n	8006978 <HAL_SPI_TransmitReceive+0x26c>
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	2b01      	cmp	r3, #1
 800694c:	d114      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d119      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x2ae>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d014      	beq.n	80069ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069b6:	2301      	movs	r3, #1
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069ba:	f7fe fcbf 	bl	800533c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d803      	bhi.n	80069d2 <HAL_SPI_TransmitReceive+0x2c6>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d102      	bne.n	80069d8 <HAL_SPI_TransmitReceive+0x2cc>
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d103      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069de:	e029      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1a2      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x224>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d19d      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f8a1 	bl	8006b40 <SPI_EndRxTxTransaction>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a10:	e010      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	e000      	b.n	8006a34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3730      	adds	r7, #48	; 0x30
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a5e:	b2db      	uxtb	r3, r3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7c:	e04c      	b.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d048      	beq.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a86:	f7fe fc59 	bl	800533c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d902      	bls.n	8006a9c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d13d      	bne.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006aaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab4:	d111      	bne.n	8006ada <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006abe:	d004      	beq.n	8006aca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac8:	d107      	bne.n	8006ada <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae2:	d10f      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e00f      	b.n	8006b38 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4013      	ands	r3, r2
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	bf0c      	ite	eq
 8006b28:	2301      	moveq	r3, #1
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d1a3      	bne.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <SPI_EndRxTxTransaction+0x7c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <SPI_EndRxTxTransaction+0x80>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	0d5b      	lsrs	r3, r3, #21
 8006b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b5c:	fb02 f303 	mul.w	r3, r2, r3
 8006b60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b6a:	d112      	bne.n	8006b92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	2180      	movs	r1, #128	; 0x80
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff ff78 	bl	8006a6c <SPI_WaitFlagStateUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d016      	beq.n	8006bb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	f043 0220 	orr.w	r2, r3, #32
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e00f      	b.n	8006bb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b80      	cmp	r3, #128	; 0x80
 8006baa:	d0f2      	beq.n	8006b92 <SPI_EndRxTxTransaction+0x52>
 8006bac:	e000      	b.n	8006bb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006bae:	bf00      	nop
  }

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200001dc 	.word	0x200001dc
 8006bc0:	165e9f81 	.word	0x165e9f81

08006bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e01d      	b.n	8006c12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fb f8c6 	bl	8001d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f000 f93a 	bl	8006e7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b0c      	cmp	r3, #12
 8006c2a:	d841      	bhi.n	8006cb0 <HAL_TIM_OC_Start_IT+0x94>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <HAL_TIM_OC_Start_IT+0x18>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c69 	.word	0x08006c69
 8006c38:	08006cb1 	.word	0x08006cb1
 8006c3c:	08006cb1 	.word	0x08006cb1
 8006c40:	08006cb1 	.word	0x08006cb1
 8006c44:	08006c7b 	.word	0x08006c7b
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006cb1 	.word	0x08006cb1
 8006c50:	08006cb1 	.word	0x08006cb1
 8006c54:	08006c8d 	.word	0x08006c8d
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006c9f 	.word	0x08006c9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0202 	orr.w	r2, r2, #2
 8006c76:	60da      	str	r2, [r3, #12]
      break;
 8006c78:	e01b      	b.n	8006cb2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0204 	orr.w	r2, r2, #4
 8006c88:	60da      	str	r2, [r3, #12]
      break;
 8006c8a:	e012      	b.n	8006cb2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0208 	orr.w	r2, r2, #8
 8006c9a:	60da      	str	r2, [r3, #12]
      break;
 8006c9c:	e009      	b.n	8006cb2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0210 	orr.w	r2, r2, #16
 8006cac:	60da      	str	r2, [r3, #12]
      break;
 8006cae:	e000      	b.n	8006cb2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8006cb0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f9f8 	bl	80070b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <HAL_TIM_OC_Start_IT+0xec>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d107      	bne.n	8006cda <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b06      	cmp	r3, #6
 8006cea:	d007      	beq.n	8006cfc <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40010000 	.word	0x40010000

08006d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIM_ConfigClockSource+0x18>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e0a6      	b.n	8006e72 <HAL_TIM_ConfigClockSource+0x166>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d067      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0x120>
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	d80b      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x6c>
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d073      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x140>
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d802      	bhi.n	8006d6e <HAL_TIM_ConfigClockSource+0x62>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d06f      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d6c:	e078      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d06c      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x140>
 8006d72:	2b30      	cmp	r3, #48	; 0x30
 8006d74:	d06a      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d76:	e073      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d78:	2b70      	cmp	r3, #112	; 0x70
 8006d7a:	d00d      	beq.n	8006d98 <HAL_TIM_ConfigClockSource+0x8c>
 8006d7c:	2b70      	cmp	r3, #112	; 0x70
 8006d7e:	d804      	bhi.n	8006d8a <HAL_TIM_ConfigClockSource+0x7e>
 8006d80:	2b50      	cmp	r3, #80	; 0x50
 8006d82:	d033      	beq.n	8006dec <HAL_TIM_ConfigClockSource+0xe0>
 8006d84:	2b60      	cmp	r3, #96	; 0x60
 8006d86:	d041      	beq.n	8006e0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d88:	e06a      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8e:	d066      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0x152>
 8006d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d94:	d017      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d96:	e063      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6899      	ldr	r1, [r3, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f000 f962 	bl	8007070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	609a      	str	r2, [r3, #8]
      break;
 8006dc4:	e04c      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6899      	ldr	r1, [r3, #8]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f000 f94b 	bl	8007070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006de8:	609a      	str	r2, [r3, #8]
      break;
 8006dea:	e039      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	6859      	ldr	r1, [r3, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f000 f8bf 	bl	8006f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2150      	movs	r1, #80	; 0x50
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 f918 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006e0a:	e029      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	6859      	ldr	r1, [r3, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f000 f8de 	bl	8006fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2160      	movs	r1, #96	; 0x60
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 f908 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006e2a:	e019      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6859      	ldr	r1, [r3, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f000 f89f 	bl	8006f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2140      	movs	r1, #64	; 0x40
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 f8f8 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006e4a:	e009      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f000 f8ef 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006e5c:	e000      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a34      	ldr	r2, [pc, #208]	; (8006f60 <TIM_Base_SetConfig+0xe4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00f      	beq.n	8006eb4 <TIM_Base_SetConfig+0x38>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d00b      	beq.n	8006eb4 <TIM_Base_SetConfig+0x38>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a31      	ldr	r2, [pc, #196]	; (8006f64 <TIM_Base_SetConfig+0xe8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d007      	beq.n	8006eb4 <TIM_Base_SetConfig+0x38>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a30      	ldr	r2, [pc, #192]	; (8006f68 <TIM_Base_SetConfig+0xec>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_Base_SetConfig+0x38>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a2f      	ldr	r2, [pc, #188]	; (8006f6c <TIM_Base_SetConfig+0xf0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d108      	bne.n	8006ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a25      	ldr	r2, [pc, #148]	; (8006f60 <TIM_Base_SetConfig+0xe4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d01b      	beq.n	8006f06 <TIM_Base_SetConfig+0x8a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed4:	d017      	beq.n	8006f06 <TIM_Base_SetConfig+0x8a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a22      	ldr	r2, [pc, #136]	; (8006f64 <TIM_Base_SetConfig+0xe8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <TIM_Base_SetConfig+0x8a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <TIM_Base_SetConfig+0xec>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00f      	beq.n	8006f06 <TIM_Base_SetConfig+0x8a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <TIM_Base_SetConfig+0xf0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00b      	beq.n	8006f06 <TIM_Base_SetConfig+0x8a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <TIM_Base_SetConfig+0xf4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d007      	beq.n	8006f06 <TIM_Base_SetConfig+0x8a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <TIM_Base_SetConfig+0xf8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <TIM_Base_SetConfig+0x8a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <TIM_Base_SetConfig+0xfc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d108      	bne.n	8006f18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a08      	ldr	r2, [pc, #32]	; (8006f60 <TIM_Base_SetConfig+0xe4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d103      	bne.n	8006f4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	615a      	str	r2, [r3, #20]
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40010000 	.word	0x40010000
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40000800 	.word	0x40000800
 8006f6c:	40000c00 	.word	0x40000c00
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0201 	bic.w	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 030a 	bic.w	r3, r3, #10
 8006fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0210 	bic.w	r2, r3, #16
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	f043 0307 	orr.w	r3, r3, #7
 800705c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	609a      	str	r2, [r3, #8]
}
 8007064:	bf00      	nop
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800708a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	021a      	lsls	r2, r3, #8
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	431a      	orrs	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4313      	orrs	r3, r2
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	609a      	str	r2, [r3, #8]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2201      	movs	r2, #1
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	401a      	ands	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	fa01 f303 	lsl.w	r3, r1, r3
 80070e8:	431a      	orrs	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
	...

080070fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007110:	2302      	movs	r3, #2
 8007112:	e050      	b.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d018      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d013      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00e      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a16      	ldr	r2, [pc, #88]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d009      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d004      	beq.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d10c      	bne.n	80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4313      	orrs	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40014000 	.word	0x40014000

080071d8 <__errno>:
 80071d8:	4b01      	ldr	r3, [pc, #4]	; (80071e0 <__errno+0x8>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	200001f4 	.word	0x200001f4

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4e0d      	ldr	r6, [pc, #52]	; (800721c <__libc_init_array+0x38>)
 80071e8:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <__libc_init_array+0x3c>)
 80071ea:	1ba4      	subs	r4, r4, r6
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	2500      	movs	r5, #0
 80071f0:	42a5      	cmp	r5, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	4e0b      	ldr	r6, [pc, #44]	; (8007224 <__libc_init_array+0x40>)
 80071f6:	4c0c      	ldr	r4, [pc, #48]	; (8007228 <__libc_init_array+0x44>)
 80071f8:	f000 f8de 	bl	80073b8 <_init>
 80071fc:	1ba4      	subs	r4, r4, r6
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	2500      	movs	r5, #0
 8007202:	42a5      	cmp	r5, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800720c:	4798      	blx	r3
 800720e:	3501      	adds	r5, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007216:	4798      	blx	r3
 8007218:	3501      	adds	r5, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	0800755c 	.word	0x0800755c
 8007220:	0800755c 	.word	0x0800755c
 8007224:	0800755c 	.word	0x0800755c
 8007228:	08007560 	.word	0x08007560

0800722c <malloc>:
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <malloc+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f000 b80b 	b.w	800724c <_malloc_r>
 8007236:	bf00      	nop
 8007238:	200001f4 	.word	0x200001f4

0800723c <memset>:
 800723c:	4402      	add	r2, r0
 800723e:	4603      	mov	r3, r0
 8007240:	4293      	cmp	r3, r2
 8007242:	d100      	bne.n	8007246 <memset+0xa>
 8007244:	4770      	bx	lr
 8007246:	f803 1b01 	strb.w	r1, [r3], #1
 800724a:	e7f9      	b.n	8007240 <memset+0x4>

0800724c <_malloc_r>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	1ccd      	adds	r5, r1, #3
 8007250:	f025 0503 	bic.w	r5, r5, #3
 8007254:	3508      	adds	r5, #8
 8007256:	2d0c      	cmp	r5, #12
 8007258:	bf38      	it	cc
 800725a:	250c      	movcc	r5, #12
 800725c:	2d00      	cmp	r5, #0
 800725e:	4606      	mov	r6, r0
 8007260:	db01      	blt.n	8007266 <_malloc_r+0x1a>
 8007262:	42a9      	cmp	r1, r5
 8007264:	d903      	bls.n	800726e <_malloc_r+0x22>
 8007266:	230c      	movs	r3, #12
 8007268:	6033      	str	r3, [r6, #0]
 800726a:	2000      	movs	r0, #0
 800726c:	bd70      	pop	{r4, r5, r6, pc}
 800726e:	f000 f857 	bl	8007320 <__malloc_lock>
 8007272:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <_malloc_r+0xac>)
 8007274:	6814      	ldr	r4, [r2, #0]
 8007276:	4621      	mov	r1, r4
 8007278:	b991      	cbnz	r1, 80072a0 <_malloc_r+0x54>
 800727a:	4c20      	ldr	r4, [pc, #128]	; (80072fc <_malloc_r+0xb0>)
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	b91b      	cbnz	r3, 8007288 <_malloc_r+0x3c>
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f83d 	bl	8007300 <_sbrk_r>
 8007286:	6020      	str	r0, [r4, #0]
 8007288:	4629      	mov	r1, r5
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f838 	bl	8007300 <_sbrk_r>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d124      	bne.n	80072de <_malloc_r+0x92>
 8007294:	230c      	movs	r3, #12
 8007296:	6033      	str	r3, [r6, #0]
 8007298:	4630      	mov	r0, r6
 800729a:	f000 f842 	bl	8007322 <__malloc_unlock>
 800729e:	e7e4      	b.n	800726a <_malloc_r+0x1e>
 80072a0:	680b      	ldr	r3, [r1, #0]
 80072a2:	1b5b      	subs	r3, r3, r5
 80072a4:	d418      	bmi.n	80072d8 <_malloc_r+0x8c>
 80072a6:	2b0b      	cmp	r3, #11
 80072a8:	d90f      	bls.n	80072ca <_malloc_r+0x7e>
 80072aa:	600b      	str	r3, [r1, #0]
 80072ac:	50cd      	str	r5, [r1, r3]
 80072ae:	18cc      	adds	r4, r1, r3
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f836 	bl	8007322 <__malloc_unlock>
 80072b6:	f104 000b 	add.w	r0, r4, #11
 80072ba:	1d23      	adds	r3, r4, #4
 80072bc:	f020 0007 	bic.w	r0, r0, #7
 80072c0:	1ac3      	subs	r3, r0, r3
 80072c2:	d0d3      	beq.n	800726c <_malloc_r+0x20>
 80072c4:	425a      	negs	r2, r3
 80072c6:	50e2      	str	r2, [r4, r3]
 80072c8:	e7d0      	b.n	800726c <_malloc_r+0x20>
 80072ca:	428c      	cmp	r4, r1
 80072cc:	684b      	ldr	r3, [r1, #4]
 80072ce:	bf16      	itet	ne
 80072d0:	6063      	strne	r3, [r4, #4]
 80072d2:	6013      	streq	r3, [r2, #0]
 80072d4:	460c      	movne	r4, r1
 80072d6:	e7eb      	b.n	80072b0 <_malloc_r+0x64>
 80072d8:	460c      	mov	r4, r1
 80072da:	6849      	ldr	r1, [r1, #4]
 80072dc:	e7cc      	b.n	8007278 <_malloc_r+0x2c>
 80072de:	1cc4      	adds	r4, r0, #3
 80072e0:	f024 0403 	bic.w	r4, r4, #3
 80072e4:	42a0      	cmp	r0, r4
 80072e6:	d005      	beq.n	80072f4 <_malloc_r+0xa8>
 80072e8:	1a21      	subs	r1, r4, r0
 80072ea:	4630      	mov	r0, r6
 80072ec:	f000 f808 	bl	8007300 <_sbrk_r>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d0cf      	beq.n	8007294 <_malloc_r+0x48>
 80072f4:	6025      	str	r5, [r4, #0]
 80072f6:	e7db      	b.n	80072b0 <_malloc_r+0x64>
 80072f8:	2000036c 	.word	0x2000036c
 80072fc:	20000370 	.word	0x20000370

08007300 <_sbrk_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4c06      	ldr	r4, [pc, #24]	; (800731c <_sbrk_r+0x1c>)
 8007304:	2300      	movs	r3, #0
 8007306:	4605      	mov	r5, r0
 8007308:	4608      	mov	r0, r1
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	f7fa fd98 	bl	8001e40 <_sbrk>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_sbrk_r+0x1a>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	b103      	cbz	r3, 800731a <_sbrk_r+0x1a>
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20000448 	.word	0x20000448

08007320 <__malloc_lock>:
 8007320:	4770      	bx	lr

08007322 <__malloc_unlock>:
 8007322:	4770      	bx	lr

08007324 <round>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	ec57 6b10 	vmov	r6, r7, d0
 800732a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800732e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007332:	2c13      	cmp	r4, #19
 8007334:	463b      	mov	r3, r7
 8007336:	463d      	mov	r5, r7
 8007338:	dc17      	bgt.n	800736a <round+0x46>
 800733a:	2c00      	cmp	r4, #0
 800733c:	da09      	bge.n	8007352 <round+0x2e>
 800733e:	3401      	adds	r4, #1
 8007340:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007344:	d103      	bne.n	800734e <round+0x2a>
 8007346:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800734a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800734e:	2100      	movs	r1, #0
 8007350:	e02c      	b.n	80073ac <round+0x88>
 8007352:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <round+0x90>)
 8007354:	4122      	asrs	r2, r4
 8007356:	4217      	tst	r7, r2
 8007358:	d100      	bne.n	800735c <round+0x38>
 800735a:	b19e      	cbz	r6, 8007384 <round+0x60>
 800735c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007360:	4123      	asrs	r3, r4
 8007362:	442b      	add	r3, r5
 8007364:	ea23 0302 	bic.w	r3, r3, r2
 8007368:	e7f1      	b.n	800734e <round+0x2a>
 800736a:	2c33      	cmp	r4, #51	; 0x33
 800736c:	dd0d      	ble.n	800738a <round+0x66>
 800736e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007372:	d107      	bne.n	8007384 <round+0x60>
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	ee10 2a10 	vmov	r2, s0
 800737c:	f7f8 ff32 	bl	80001e4 <__adddf3>
 8007380:	4606      	mov	r6, r0
 8007382:	460f      	mov	r7, r1
 8007384:	ec47 6b10 	vmov	d0, r6, r7
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800738e:	f04f 30ff 	mov.w	r0, #4294967295
 8007392:	40d0      	lsrs	r0, r2
 8007394:	4206      	tst	r6, r0
 8007396:	d0f5      	beq.n	8007384 <round+0x60>
 8007398:	2201      	movs	r2, #1
 800739a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800739e:	fa02 f404 	lsl.w	r4, r2, r4
 80073a2:	1931      	adds	r1, r6, r4
 80073a4:	bf28      	it	cs
 80073a6:	189b      	addcs	r3, r3, r2
 80073a8:	ea21 0100 	bic.w	r1, r1, r0
 80073ac:	461f      	mov	r7, r3
 80073ae:	460e      	mov	r6, r1
 80073b0:	e7e8      	b.n	8007384 <round+0x60>
 80073b2:	bf00      	nop
 80073b4:	000fffff 	.word	0x000fffff

080073b8 <_init>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr

080073c4 <_fini>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr
