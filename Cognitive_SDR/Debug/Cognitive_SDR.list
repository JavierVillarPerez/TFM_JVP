
Cognitive_SDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c4  080059c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059cc  080059cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000074  08005a48  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005a48  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016061  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fcd  00000000  00000000  00036105  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b0  00000000  00000000  000390d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001148  00000000  00000000  0003a388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a01b  00000000  00000000  0003b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df2e  00000000  00000000  000554eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096f8d  00000000  00000000  00063419  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d0  00000000  00000000  000fa424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057b0 	.word	0x080057b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080057b0 	.word	0x080057b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <S2LPCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref S2LPCmd.
 * @retval None.
 */
void S2LPCmdStrobeCommand(S2LPCmd xCommandCode)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_S2LP_CMD(xCommandCode));

  g_xStatus = S2LPSpiCommandStrobes((uint8_t) xCommandCode);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fa31 	bl	80019f4 <RadioSpiCommandStrobes>
 8000592:	4602      	mov	r2, r0
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <S2LPCmdStrobeCommand+0x2c>)
 8000596:	b212      	sxth	r2, r2
 8000598:	4611      	mov	r1, r2
 800059a:	7019      	strb	r1, [r3, #0]
 800059c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80005a0:	705a      	strb	r2, [r3, #1]
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000a0 	.word	0x200000a0

080005b0 <S2LPGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified S2LP GPIO.
 * @retval None.
 */
void S2LPGpioInit(SGpioInit* pxGpioInitStruct)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  s_assert_param(IS_S2LP_GPIO(pxGpioInitStruct->xS2LPGpioPin));
  s_assert_param(IS_S2LP_GPIO_MODE(pxGpioInitStruct->xS2LPGpioMode));
  s_assert_param(IS_S2LP_GPIO_IO(pxGpioInitStruct->xS2LPGpioIO));

  tmp = ((uint8_t)(pxGpioInitStruct->xS2LPGpioMode) | (uint8_t)(pxGpioInitStruct->xS2LPGpioIO));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	785a      	ldrb	r2, [r3, #1]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	73fb      	strb	r3, [r7, #15]
  g_xStatus = S2LPSpiWriteRegisters(pxGpioInitStruct->xS2LPGpioPin, 1, &tmp);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	f107 020f 	add.w	r2, r7, #15
 80005ce:	2101      	movs	r1, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f94d 	bl	8001870 <RadioSpiWriteRegisters>
 80005d6:	4602      	mov	r2, r0
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <S2LPGpioInit+0x40>)
 80005da:	b212      	sxth	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	7019      	strb	r1, [r3, #0]
 80005e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80005e4:	705a      	strb	r2, [r3, #1]

}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000a0 	.word	0x200000a0

080005f4 <S2LPGpioIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref S2LPIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void S2LPGpioIrqDeInit(S2LPIrqs* pxIrqInit)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint8_t tmp[4] = {0x00,0x00,0x00,0x00};
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <S2LPGpioIrqDeInit+0x20>
    uint32_t tempValue = 0x00000000;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
    
    *pxIrqInit = (*(S2LPIrqs*)&tempValue);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6013      	str	r3, [r2, #0]
  }

  g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmp);
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	461a      	mov	r2, r3
 800061a:	2104      	movs	r1, #4
 800061c:	2050      	movs	r0, #80	; 0x50
 800061e:	f001 f927 	bl	8001870 <RadioSpiWriteRegisters>
 8000622:	4602      	mov	r2, r0
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <S2LPGpioIrqDeInit+0x48>)
 8000626:	b212      	sxth	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	7019      	strb	r1, [r3, #0]
 800062c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000630:	705a      	strb	r2, [r3, #1]
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000a0 	.word	0x200000a0

08000640 <S2LPGpioIrqConfig>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void S2LPGpioIrqConfig(IrqList xIrq, SFunctionalState xNewState)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
  uint8_t tmpBuffer[4];
  uint32_t tempValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  s_assert_param(IS_S2LP_IRQ_LIST(xIrq));
  s_assert_param(IS_SFUNCTIONAL_STATE(xNewState));

  S2LPSpiReadRegisters(IRQ_MASK3_ADDR, 4, tmpBuffer);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	461a      	mov	r2, r3
 8000656:	2104      	movs	r1, #4
 8000658:	2050      	movs	r0, #80	; 0x50
 800065a:	f001 f965 	bl	8001928 <RadioSpiReadRegisters>

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++) {
 800065e:	2300      	movs	r3, #0
 8000660:	74fb      	strb	r3, [r7, #19]
 8000662:	e012      	b.n	800068a <S2LPGpioIrqConfig+0x4a>
    tempValue += ((uint32_t)tmpBuffer[i])<<(8*(3-i));
 8000664:	7cfb      	ldrb	r3, [r7, #19]
 8000666:	f107 0218 	add.w	r2, r7, #24
 800066a:	4413      	add	r3, r2
 800066c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000670:	461a      	mov	r2, r3
 8000672:	7cfb      	ldrb	r3, [r7, #19]
 8000674:	f1c3 0303 	rsb	r3, r3, #3
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++) {
 8000684:	7cfb      	ldrb	r3, [r7, #19]
 8000686:	3301      	adds	r3, #1
 8000688:	74fb      	strb	r3, [r7, #19]
 800068a:	7cfb      	ldrb	r3, [r7, #19]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d9e9      	bls.n	8000664 <S2LPGpioIrqConfig+0x24>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE) {
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d105      	bne.n	80006a2 <S2LPGpioIrqConfig+0x62>
    tempValue &= (~xIrq);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	43db      	mvns	r3, r3
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	4013      	ands	r3, r2
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e003      	b.n	80006aa <S2LPGpioIrqConfig+0x6a>
  }
  else {
    tempValue |= (xIrq);
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	74bb      	strb	r3, [r7, #18]
 80006ae:	e00f      	b.n	80006d0 <S2LPGpioIrqConfig+0x90>
    tmpBuffer[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80006b0:	7cbb      	ldrb	r3, [r7, #18]
 80006b2:	f1c3 0303 	rsb	r3, r3, #3
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	7cbb      	ldrb	r3, [r7, #18]
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	f107 0118 	add.w	r1, r7, #24
 80006c4:	440b      	add	r3, r1
 80006c6:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++) {
 80006ca:	7cbb      	ldrb	r3, [r7, #18]
 80006cc:	3301      	adds	r3, #1
 80006ce:	74bb      	strb	r3, [r7, #18]
 80006d0:	7cbb      	ldrb	r3, [r7, #18]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d9ec      	bls.n	80006b0 <S2LPGpioIrqConfig+0x70>
  }
  
  g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmpBuffer);
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	461a      	mov	r2, r3
 80006dc:	2104      	movs	r1, #4
 80006de:	2050      	movs	r0, #80	; 0x50
 80006e0:	f001 f8c6 	bl	8001870 <RadioSpiWriteRegisters>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <S2LPGpioIrqConfig+0xbc>)
 80006e8:	b212      	sxth	r2, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	7019      	strb	r1, [r3, #0]
 80006ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80006f2:	705a      	strb	r2, [r3, #1]

}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000a0 	.word	0x200000a0

08000700 <S2LPPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void S2LPPktCommonFilterOnCrc(SFunctionalState xNewState)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  s_assert_param(IS_SFUNCTIONAL_STATE(xNewState));

  S2LPSpiReadRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
 800070a:	f107 030f 	add.w	r3, r7, #15
 800070e:	461a      	mov	r2, r3
 8000710:	2101      	movs	r1, #1
 8000712:	2040      	movs	r0, #64	; 0x40
 8000714:	f001 f908 	bl	8001928 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE) {
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d105      	bne.n	800072a <S2LPPktCommonFilterOnCrc+0x2a>
    tmp |= CRC_FLT_REGMASK;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e004      	b.n	8000734 <S2LPPktCommonFilterOnCrc+0x34>
  }
  else {
    tmp &= ~CRC_FLT_REGMASK;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	73fb      	strb	r3, [r7, #15]
  }
  g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	461a      	mov	r2, r3
 800073a:	2101      	movs	r1, #1
 800073c:	2040      	movs	r0, #64	; 0x40
 800073e:	f001 f897 	bl	8001870 <RadioSpiWriteRegisters>
 8000742:	4602      	mov	r2, r0
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <S2LPPktCommonFilterOnCrc+0x5c>)
 8000746:	b212      	sxth	r2, r2
 8000748:	4611      	mov	r1, r2
 800074a:	7019      	strb	r1, [r3, #0]
 800074c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000750:	705a      	strb	r2, [r3, #1]

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000a0 	.word	0x200000a0

08000760 <S2LPPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void S2LPPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SFUNCTIONAL_STATE(pxPktBasicInit->xFixVarLength));
  s_assert_param(IS_SFUNCTIONAL_STATE(pxPktBasicInit->xAddressField));
  s_assert_param(IS_SFUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SFUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));

  S2LPPktWMbusSetSubmode(WMBUS_SUBMODE_NOT_CONFIGURED);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 f91f 	bl	80009ac <S2LPPktWMbusSetSubmode>
  
  /* Always set the automatic packet filtering */
  S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmpBuffer[0]);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	461a      	mov	r2, r3
 8000774:	2101      	movs	r1, #1
 8000776:	203a      	movs	r0, #58	; 0x3a
 8000778:	f001 f8d6 	bl	8001928 <RadioSpiReadRegisters>
  tmpBuffer[0] |= AUTO_PCKT_FLT_REGMASK;
 800077c:	7a3b      	ldrb	r3, [r7, #8]
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	723b      	strb	r3, [r7, #8]
  S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmpBuffer[0]);
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	461a      	mov	r2, r3
 800078c:	2101      	movs	r1, #1
 800078e:	203a      	movs	r0, #58	; 0x3a
 8000790:	f001 f86e 	bl	8001870 <RadioSpiWriteRegisters>

  tmpBuffer[0] = ((pxPktBasicInit->xSyncLength)<<2) | (uint8_t)((pxPktBasicInit->xPreambleLength)>>8);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	789b      	ldrb	r3, [r3, #2]
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	b25a      	sxtb	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	723b      	strb	r3, [r7, #8]
  tmpBuffer[1] = (uint8_t)(pxPktBasicInit->xPreambleLength);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	727b      	strb	r3, [r7, #9]
  tmpBuffer[2] = (((uint8_t)pxPktBasicInit->xAddressField)<<3);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7adb      	ldrb	r3, [r3, #11]
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	72bb      	strb	r3, [r7, #10]
  
  if((pxPktBasicInit->cExtendedPktLenField)==S_ENABLE)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a5b      	ldrb	r3, [r3, #9]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d104      	bne.n	80007d2 <S2LPPktBasicInit+0x72>
  {
    tmpBuffer[2]|=0x80;
 80007c8:	7abb      	ldrb	r3, [r7, #10]
 80007ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	72bb      	strb	r3, [r7, #10]
  }
  
  S2LPSpiReadRegisters(PCKTCTRL3_ADDR, 1, &tmpBuffer[3]);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	3303      	adds	r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	2101      	movs	r1, #1
 80007dc:	202e      	movs	r0, #46	; 0x2e
 80007de:	f001 f8a3 	bl	8001928 <RadioSpiReadRegisters>
  tmpBuffer[3] &= ~(PCKT_FRMT_REGMASK | RX_MODE_REGMASK);
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	72fb      	strb	r3, [r7, #11]
  tmpBuffer[3] |= PKT_FORMAT_BASIC_CODE;
 80007ec:	7afb      	ldrb	r3, [r7, #11]
 80007ee:	72fb      	strb	r3, [r7, #11]
  
  S2LPSpiReadRegisters(PCKTCTRL2_ADDR, 2, &tmpBuffer[4]);
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	3304      	adds	r3, #4
 80007f6:	461a      	mov	r2, r3
 80007f8:	2102      	movs	r1, #2
 80007fa:	202f      	movs	r0, #47	; 0x2f
 80007fc:	f001 f894 	bl	8001928 <RadioSpiReadRegisters>
  
  if(pxPktBasicInit->xFixVarLength == S_ENABLE) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a1b      	ldrb	r3, [r3, #8]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d105      	bne.n	8000814 <S2LPPktBasicInit+0xb4>
     tmpBuffer[4] |= FIX_VAR_LEN_REGMASK;
 8000808:	7b3b      	ldrb	r3, [r7, #12]
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	733b      	strb	r3, [r7, #12]
 8000812:	e004      	b.n	800081e <S2LPPktBasicInit+0xbe>
  }
  else {
     tmpBuffer[4] &= ~FIX_VAR_LEN_REGMASK;
 8000814:	7b3b      	ldrb	r3, [r7, #12]
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	733b      	strb	r3, [r7, #12]
  }
  tmpBuffer[4] &= ~(MANCHESTER_EN_REGMASK | MBUS_3OF6_EN_REGMASK);
 800081e:	7b3b      	ldrb	r3, [r7, #12]
 8000820:	f023 0306 	bic.w	r3, r3, #6
 8000824:	b2db      	uxtb	r3, r3
 8000826:	733b      	strb	r3, [r7, #12]
  
  tmpBuffer[5] &= ~(CRC_MODE_REGMASK | TXSOURCE_REGMASK);
 8000828:	7b7b      	ldrb	r3, [r7, #13]
 800082a:	f003 0313 	and.w	r3, r3, #19
 800082e:	b2db      	uxtb	r3, r3
 8000830:	737b      	strb	r3, [r7, #13]
  tmpBuffer[5] |= (uint8_t)pxPktBasicInit->xCrcMode;
 8000832:	7b7a      	ldrb	r2, [r7, #13]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7a9b      	ldrb	r3, [r3, #10]
 8000838:	4313      	orrs	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	737b      	strb	r3, [r7, #13]
  
  if(pxPktBasicInit->xDataWhitening == S_ENABLE) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7b5b      	ldrb	r3, [r3, #13]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d105      	bne.n	8000852 <S2LPPktBasicInit+0xf2>
     tmpBuffer[5] |= WHIT_EN_REGMASK;
 8000846:	7b7b      	ldrb	r3, [r7, #13]
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	b2db      	uxtb	r3, r3
 800084e:	737b      	strb	r3, [r7, #13]
 8000850:	e004      	b.n	800085c <S2LPPktBasicInit+0xfc>
  }
  else {
     tmpBuffer[5] &= ~WHIT_EN_REGMASK;
 8000852:	7b7b      	ldrb	r3, [r7, #13]
 8000854:	f023 0310 	bic.w	r3, r3, #16
 8000858:	b2db      	uxtb	r3, r3
 800085a:	737b      	strb	r3, [r7, #13]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7b1b      	ldrb	r3, [r3, #12]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d105      	bne.n	8000870 <S2LPPktBasicInit+0x110>
  {
     tmpBuffer[5] |= FEC_EN_REGMASK;
 8000864:	7b7b      	ldrb	r3, [r7, #13]
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	737b      	strb	r3, [r7, #13]
 800086e:	e004      	b.n	800087a <S2LPPktBasicInit+0x11a>
  }
  else {
     tmpBuffer[5] &= ~FEC_EN_REGMASK;
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	f023 0301 	bic.w	r3, r3, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	737b      	strb	r3, [r7, #13]
  }
  
  S2LPSpiWriteRegisters(PCKTCTRL6_ADDR, 6, tmpBuffer);  
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	461a      	mov	r2, r3
 8000880:	2106      	movs	r1, #6
 8000882:	202b      	movs	r0, #43	; 0x2b
 8000884:	f000 fff4 	bl	8001870 <RadioSpiWriteRegisters>
  
  /* SYNC word */
  for(uint8_t i=0 ; i<4 ; i++) {
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e00e      	b.n	80008ac <S2LPPktBasicInit+0x14c>
    tmpBuffer[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	40da      	lsrs	r2, r3
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	f107 0110 	add.w	r1, r7, #16
 80008a0:	440b      	add	r3, r1
 80008a2:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(uint8_t i=0 ; i<4 ; i++) {
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	3301      	adds	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d9ed      	bls.n	800088e <S2LPPktBasicInit+0x12e>
  }
  g_xStatus = S2LPSpiWriteRegisters(SYNC3_ADDR, 4, tmpBuffer);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	461a      	mov	r2, r3
 80008b8:	2104      	movs	r1, #4
 80008ba:	2033      	movs	r0, #51	; 0x33
 80008bc:	f000 ffd8 	bl	8001870 <RadioSpiWriteRegisters>
 80008c0:	4602      	mov	r2, r0
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <S2LPPktBasicInit+0x1b4>)
 80008c4:	b212      	sxth	r2, r2
 80008c6:	4611      	mov	r1, r2
 80008c8:	7019      	strb	r1, [r3, #0]
 80008ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80008ce:	705a      	strb	r2, [r3, #1]
  
  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7a9b      	ldrb	r3, [r3, #10]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d103      	bne.n	80008e0 <S2LPPktBasicInit+0x180>
    S2LPPktBasicFilterOnCrc(S_DISABLE);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff11 	bl	8000700 <S2LPPktCommonFilterOnCrc>
 80008de:	e002      	b.n	80008e6 <S2LPPktBasicInit+0x186>
  }
  else {
    S2LPPktBasicFilterOnCrc(S_ENABLE);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f7ff ff0d 	bl	8000700 <S2LPPktCommonFilterOnCrc>
  }
  
    /* Constellation map setting */
  S2LPSpiReadRegisters(MOD1_ADDR, 1, tmpBuffer);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	461a      	mov	r2, r3
 80008ec:	2101      	movs	r1, #1
 80008ee:	2011      	movs	r0, #17
 80008f0:	f001 f81a 	bl	8001928 <RadioSpiReadRegisters>
  tmpBuffer[0] &= ~G4FSK_CONST_MAP_REGMASK;
 80008f4:	7a3b      	ldrb	r3, [r7, #8]
 80008f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	723b      	strb	r3, [r7, #8]
  S2LPSpiWriteRegisters(MOD1_ADDR, 1, tmpBuffer); 
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	461a      	mov	r2, r3
 8000904:	2101      	movs	r1, #1
 8000906:	2011      	movs	r0, #17
 8000908:	f000 ffb2 	bl	8001870 <RadioSpiWriteRegisters>
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000a0 	.word	0x200000a0

08000918 <S2LPPktBasicGetAddressField>:
 * @brief  Specify if the Address field for S2LP Basic packets is enabled or disabled.
 * @param  None.
 * @retval SFunctionalState Notifies if the address field is enabled or disabled.
 */
SFunctionalState S2LPPktBasicGetAddressField(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  uint8_t tmp;

  g_xStatus = S2LPSpiReadRegisters(PCKTCTRL4_ADDR, 1, &tmp);
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	461a      	mov	r2, r3
 8000922:	2101      	movs	r1, #1
 8000924:	202d      	movs	r0, #45	; 0x2d
 8000926:	f000 ffff 	bl	8001928 <RadioSpiReadRegisters>
 800092a:	4602      	mov	r2, r0
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <S2LPPktBasicGetAddressField+0x3c>)
 800092e:	b212      	sxth	r2, r2
 8000930:	4611      	mov	r1, r2
 8000932:	7019      	strb	r1, [r3, #0]
 8000934:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000938:	705a      	strb	r2, [r3, #1]
  if(tmp & ADDRESS_LEN_REGMASK) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <S2LPPktBasicGetAddressField+0x30>
    return S_ENABLE;
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <S2LPPktBasicGetAddressField+0x32>
  }
  else {
    return S_DISABLE;
 8000948:	2300      	movs	r3, #0
  }

}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000a0 	.word	0x200000a0

08000958 <S2LPPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void S2LPPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
  uint8_t tmpBuffer[2];
  
  if(S2LPPktBasicGetAddressField()) {
 8000962:	f7ff ffd9 	bl	8000918 <S2LPPktBasicGetAddressField>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <S2LPPktBasicSetPayloadLength+0x1a>
    nPayloadLength++;
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	3301      	adds	r3, #1
 8000970:	80fb      	strh	r3, [r7, #6]
  }
  tmpBuffer[0] = (uint8_t)(nPayloadLength>>8);
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	733b      	strb	r3, [r7, #12]
  tmpBuffer[1] = (uint8_t)nPayloadLength;
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	737b      	strb	r3, [r7, #13]
  g_xStatus = S2LPSpiWriteRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	461a      	mov	r2, r3
 8000988:	2102      	movs	r1, #2
 800098a:	2031      	movs	r0, #49	; 0x31
 800098c:	f000 ff70 	bl	8001870 <RadioSpiWriteRegisters>
 8000990:	4602      	mov	r2, r0
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <S2LPPktBasicSetPayloadLength+0x50>)
 8000994:	b212      	sxth	r2, r2
 8000996:	4611      	mov	r1, r2
 8000998:	7019      	strb	r1, [r3, #0]
 800099a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800099e:	705a      	strb	r2, [r3, #1]
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000a0 	.word	0x200000a0

080009ac <S2LPPktWMbusSetSubmode>:
* @brief  Set the W-MBus submode.
* @param  xWMbusSubmode This parameter of @ref WMbusSubmode .
* @retval None.
*/
void S2LPPktWMbusSetSubmode(WMbusSubmode xWMbusSubmode)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  s_cWMbusSubmode = xWMbusSubmode;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <S2LPPktWMbusSetSubmode+0x1c>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	7013      	strb	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	20000090 	.word	0x20000090

080009cc <S2LPRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void S2LPRadioSearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 80009cc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80009d0:	b08e      	sub	sp, #56	; 0x38
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  uint32_t lDatarateTmp, f_dig=s_lXtalFrequency;
 80009da:	4b76      	ldr	r3, [pc, #472]	; (8000bb4 <S2LPRadioSearchDatarateME+0x1e8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;
  
  if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	4a75      	ldr	r2, [pc, #468]	; (8000bb8 <S2LPRadioSearchDatarateME+0x1ec>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d902      	bls.n	80009ee <S2LPRadioSearchDatarateME+0x22>
    f_dig >>= 1;
 80009e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ea:	085b      	lsrs	r3, r3, #1
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80009f4:	e010      	b.n	8000a18 <S2LPRadioSearchDatarateME+0x4c>
    lDatarateTmp = S2LPRadioComputeDatarate(0xFFFF, uDrE);
 80009f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fa:	4619      	mov	r1, r3
 80009fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a00:	f000 fade 	bl	8000fc0 <S2LPRadioComputeDatarate>
 8000a04:	6178      	str	r0, [r7, #20]
    if(lDatarate<=lDatarateTmp) 
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d909      	bls.n	8000a22 <S2LPRadioSearchDatarateME+0x56>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8000a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a12:	3301      	adds	r3, #1
 8000a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000a18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a1c:	2b0c      	cmp	r3, #12
 8000a1e:	d1ea      	bne.n	80009f6 <S2LPRadioSearchDatarateME+0x2a>
 8000a20:	e000      	b.n	8000a24 <S2LPRadioSearchDatarateME+0x58>
      break;
 8000a22:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000a2a:	701a      	strb	r2, [r3, #0]
  
  if(uDrE==0) {
 8000a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d146      	bne.n	8000ac2 <S2LPRadioSearchDatarateME+0xf6>
    tgt=((uint64_t)lDatarate)<<32;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	f04f 0400 	mov.w	r4, #0
 8000a44:	000c      	movs	r4, r1
 8000a46:	2300      	movs	r3, #0
 8000a48:	e9c7 3406 	strd	r3, r4, [r7, #24]
    (*pcM) = (uint16_t)(tgt/f_dig);
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4e:	f04f 0400 	mov.w	r4, #0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4623      	mov	r3, r4
 8000a56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000a5a:	f7ff fc11 	bl	8000280 <__aeabi_uldivmod>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460c      	mov	r4, r1
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	801a      	strh	r2, [r3, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8000a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	f04f 0400 	mov.w	r4, #0
 8000a7a:	fb03 f502 	mul.w	r5, r3, r2
 8000a7e:	fb01 f004 	mul.w	r0, r1, r4
 8000a82:	4428      	add	r0, r5
 8000a84:	fba1 3403 	umull	r3, r4, r1, r3
 8000a88:	1902      	adds	r2, r0, r4
 8000a8a:	4614      	mov	r4, r2
 8000a8c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000a90:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8000a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000aa6:	fb03 f502 	mul.w	r5, r3, r2
 8000aaa:	fb01 f004 	mul.w	r0, r1, r4
 8000aae:	4428      	add	r0, r5
 8000ab0:	fba1 3403 	umull	r3, r4, r1, r3
 8000ab4:	1902      	adds	r2, r0, r4
 8000ab6:	4614      	mov	r4, r2
 8000ab8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000abc:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000ac0:	e053      	b.n	8000b6a <S2LPRadioSearchDatarateME+0x19e>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8000ace:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
 8000ad2:	f1a1 0620 	sub.w	r6, r1, #32
 8000ad6:	f1c1 0020 	rsb	r0, r1, #32
 8000ada:	fa03 f501 	lsl.w	r5, r3, r1
 8000ade:	fa02 f606 	lsl.w	r6, r2, r6
 8000ae2:	4335      	orrs	r5, r6
 8000ae4:	fa22 f000 	lsr.w	r0, r2, r0
 8000ae8:	4305      	orrs	r5, r0
 8000aea:	fa02 f401 	lsl.w	r4, r2, r1
 8000aee:	e9c7 4506 	strd	r4, r5, [r7, #24]
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8000af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af4:	f04f 0400 	mov.w	r4, #0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b00:	f7ff fbbe 	bl	8000280 <__aeabi_uldivmod>
 8000b04:	4603      	mov	r3, r0
 8000b06:	460c      	mov	r4, r1
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	801a      	strh	r2, [r3, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8000b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000b1e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000b22:	fb03 f502 	mul.w	r5, r3, r2
 8000b26:	fb01 f004 	mul.w	r0, r1, r4
 8000b2a:	4428      	add	r0, r5
 8000b2c:	fba1 3403 	umull	r3, r4, r1, r3
 8000b30:	1902      	adds	r2, r0, r4
 8000b32:	4614      	mov	r4, r2
 8000b34:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000b38:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8000b4c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000b50:	fb03 f502 	mul.w	r5, r3, r2
 8000b54:	fb01 f004 	mul.w	r0, r1, r4
 8000b58:	4428      	add	r0, r5
 8000b5a:	fba1 3403 	umull	r3, r4, r1, r3
 8000b5e:	1902      	adds	r2, r0, r4
 8000b60:	4614      	mov	r4, r2
 8000b62:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000b66:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }
    
       
  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8000b6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000b6e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000b72:	1ac9      	subs	r1, r1, r3
 8000b74:	eb62 0204 	sbc.w	r2, r2, r4
 8000b78:	468b      	mov	fp, r1
 8000b7a:	4694      	mov	ip, r2
 8000b7c:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8000b80:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000b84:	4629      	mov	r1, r5
 8000b86:	4632      	mov	r2, r6
 8000b88:	1ac9      	subs	r1, r1, r3
 8000b8a:	eb62 0204 	sbc.w	r2, r2, r4
 8000b8e:	4594      	cmp	ip, r2
 8000b90:	bf08      	it	eq
 8000b92:	458b      	cmpeq	fp, r1
 8000b94:	d204      	bcs.n	8000ba0 <S2LPRadioSearchDatarateME+0x1d4>
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	e001      	b.n	8000ba4 <S2LPRadioSearchDatarateME+0x1d8>
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	8013      	strh	r3, [r2, #0]
  
}
 8000ba8:	bf00      	nop
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	01c9c380 	.word	0x01c9c380

08000bbc <S2LPRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void S2LPRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8000bbc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000bc0:	b08e      	sub	sp, #56	; 0x38
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  uint8_t uFDevE, tmp, bs = MIDDLE_BAND_FACTOR, refdiv = 1;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;
  
  s_assert_param(IS_F_DEV(lFDev, s_lXtalFrequency));  
  
  S2LPSpiReadRegisters(SYNT3_ADDR, 1, &tmp);
 8000bd6:	f107 0313 	add.w	r3, r7, #19
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2005      	movs	r0, #5
 8000be0:	f000 fea2 	bl	8001928 <RadioSpiReadRegisters>
  if((tmp&BS_REGMASK) == 0) {
 8000be4:	7cfb      	ldrb	r3, [r7, #19]
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <S2LPRadioSearchFreqDevME+0x38>
    bs = HIGH_BAND_FACTOR;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }
  
  if(S2LPRadioGetRefDiv()) {
 8000bf4:	f000 fd2a 	bl	800164c <S2LPRadioGetRefDiv>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <S2LPRadioSearchFreqDevME+0x48>
    refdiv = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  }
  
  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c0a:	e012      	b.n	8000c32 <S2LPRadioSearchFreqDevME+0x76>
    lFDevTmp = S2LPRadioComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8000c0c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c10:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000c14:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000c18:	20ff      	movs	r0, #255	; 0xff
 8000c1a:	f000 fa39 	bl	8001090 <S2LPRadioComputeFreqDeviation>
 8000c1e:	6178      	str	r0, [r7, #20]
    if(lFDev<lFDevTmp) 
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d309      	bcc.n	8000c3c <S2LPRadioSearchFreqDevME+0x80>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8000c28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c36:	2b0c      	cmp	r3, #12
 8000c38:	d1e8      	bne.n	8000c0c <S2LPRadioSearchFreqDevME+0x50>
 8000c3a:	e000      	b.n	8000c3e <S2LPRadioSearchFreqDevME+0x82>
      break;
 8000c3c:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c44:	701a      	strb	r2, [r3, #0]
    
  if(uFDevE==0)
 8000c46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d14b      	bne.n	8000ce6 <S2LPRadioSearchFreqDevME+0x12a>
  {
    tgt=((uint64_t)lFDev)<<22;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	f04f 0300 	mov.w	r3, #0
 8000c5a:	f04f 0400 	mov.w	r4, #0
 8000c5e:	0594      	lsls	r4, r2, #22
 8000c60:	ea44 2491 	orr.w	r4, r4, r1, lsr #10
 8000c64:	058b      	lsls	r3, r1, #22
 8000c66:	e9c7 3406 	strd	r3, r4, [r7, #24]
    (*pcM)=(uint32_t)(tgt/s_lXtalFrequency);
 8000c6a:	4b5c      	ldr	r3, [pc, #368]	; (8000ddc <S2LPRadioSearchFreqDevME+0x220>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 0400 	mov.w	r4, #0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4623      	mov	r3, r4
 8000c76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c7a:	f7ff fb01 	bl	8000280 <__aeabi_uldivmod>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460c      	mov	r4, r1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	701a      	strb	r2, [r3, #0]
    tgt1=(uint64_t)s_lXtalFrequency*(*pcM);
 8000c88:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <S2LPRadioSearchFreqDevME+0x220>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f04f 0400 	mov.w	r4, #0
 8000c9c:	fb03 f502 	mul.w	r5, r3, r2
 8000ca0:	fb01 f004 	mul.w	r0, r1, r4
 8000ca4:	4428      	add	r0, r5
 8000ca6:	fba1 3403 	umull	r3, r4, r1, r3
 8000caa:	1902      	adds	r2, r0, r4
 8000cac:	4614      	mov	r4, r2
 8000cae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000cb2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    tgt2=(uint64_t)s_lXtalFrequency*((*pcM)+1);
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <S2LPRadioSearchFreqDevME+0x220>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000cca:	fb03 f502 	mul.w	r5, r3, r2
 8000cce:	fb01 f004 	mul.w	r0, r1, r4
 8000cd2:	4428      	add	r0, r5
 8000cd4:	fba1 3403 	umull	r3, r4, r1, r3
 8000cd8:	1902      	adds	r2, r0, r4
 8000cda:	4614      	mov	r4, r2
 8000cdc:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000ce0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000ce4:	e056      	b.n	8000d94 <S2LPRadioSearchFreqDevME+0x1d8>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000cf2:	f1c1 0117 	rsb	r1, r1, #23
 8000cf6:	f1a1 0620 	sub.w	r6, r1, #32
 8000cfa:	f1c1 0020 	rsb	r0, r1, #32
 8000cfe:	fa03 f501 	lsl.w	r5, r3, r1
 8000d02:	fa02 f606 	lsl.w	r6, r2, r6
 8000d06:	4335      	orrs	r5, r6
 8000d08:	fa22 f000 	lsr.w	r0, r2, r0
 8000d0c:	4305      	orrs	r5, r0
 8000d0e:	fa02 f401 	lsl.w	r4, r2, r1
 8000d12:	e9c7 4506 	strd	r4, r5, [r7, #24]
    (*pcM)=(uint32_t)(tgt/s_lXtalFrequency)-256;
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <S2LPRadioSearchFreqDevME+0x220>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f04f 0400 	mov.w	r4, #0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4623      	mov	r3, r4
 8000d22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d26:	f7ff faab 	bl	8000280 <__aeabi_uldivmod>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460c      	mov	r4, r1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	701a      	strb	r2, [r3, #0]
    tgt1=(uint64_t)s_lXtalFrequency*((*pcM)+256);
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <S2LPRadioSearchFreqDevME+0x220>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d46:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000d4a:	fb03 f502 	mul.w	r5, r3, r2
 8000d4e:	fb01 f004 	mul.w	r0, r1, r4
 8000d52:	4428      	add	r0, r5
 8000d54:	fba1 3403 	umull	r3, r4, r1, r3
 8000d58:	1902      	adds	r2, r0, r4
 8000d5a:	4614      	mov	r4, r2
 8000d5c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000d60:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    tgt2=(uint64_t)s_lXtalFrequency*((*pcM)+1+256);
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <S2LPRadioSearchFreqDevME+0x220>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f203 1301 	addw	r3, r3, #257	; 0x101
 8000d76:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000d7a:	fb03 f502 	mul.w	r5, r3, r2
 8000d7e:	fb01 f004 	mul.w	r0, r1, r4
 8000d82:	4428      	add	r0, r5
 8000d84:	fba1 3403 	umull	r3, r4, r1, r3
 8000d88:	1902      	adds	r2, r0, r4
 8000d8a:	4614      	mov	r4, r2
 8000d8c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000d90:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8000d94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000d98:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	eb62 0204 	sbc.w	r2, r2, r4
 8000da2:	468b      	mov	fp, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8000daa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000dae:	4629      	mov	r1, r5
 8000db0:	4632      	mov	r2, r6
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	eb62 0204 	sbc.w	r2, r2, r4
 8000db8:	4594      	cmp	ip, r2
 8000dba:	bf08      	it	eq
 8000dbc:	458b      	cmpeq	fp, r1
 8000dbe:	d204      	bcs.n	8000dca <S2LPRadioSearchFreqDevME+0x20e>
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	e001      	b.n	8000dce <S2LPRadioSearchFreqDevME+0x212>
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	7013      	strb	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3738      	adds	r7, #56	; 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8000ddc:	20000000 	.word	0x20000000

08000de0 <S2LPRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void S2LPRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	b08d      	sub	sp, #52	; 0x34
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint32_t f_dig=s_lXtalFrequency;
 8000dec:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <S2LPRadioSearchChannelBwME+0x1cc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t chfltCalculation[3];
  
      
  if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	4a6e      	ldr	r2, [pc, #440]	; (8000fb0 <S2LPRadioSearchChannelBwME+0x1d0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d902      	bls.n	8000e00 <S2LPRadioSearchChannelBwME+0x20>
    f_dig >>= 1;
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	085b      	lsrs	r3, r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  s_assert_param(IS_CH_BW(lBandwidth,f_dig));
  
  /* Search the channel filter bandwidth table index */
  for(i=0;i<90 && (lBandwidth<(uint32_t)(((uint64_t)s_vectnBandwidth26M[i]*f_dig)/260000));i++);
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e06:	e006      	b.n	8000e16 <S2LPRadioSearchChannelBwME+0x36>
 8000e08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e1a:	2b59      	cmp	r3, #89	; 0x59
 8000e1c:	dc1e      	bgt.n	8000e5c <S2LPRadioSearchChannelBwME+0x7c>
 8000e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e22:	4a64      	ldr	r2, [pc, #400]	; (8000fb4 <S2LPRadioSearchChannelBwME+0x1d4>)
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	b299      	uxth	r1, r3
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	f04f 0400 	mov.w	r4, #0
 8000e34:	fb03 f502 	mul.w	r5, r3, r2
 8000e38:	fb01 f004 	mul.w	r0, r1, r4
 8000e3c:	4405      	add	r5, r0
 8000e3e:	fba1 0103 	umull	r0, r1, r1, r3
 8000e42:	186b      	adds	r3, r5, r1
 8000e44:	4619      	mov	r1, r3
 8000e46:	4a5c      	ldr	r2, [pc, #368]	; (8000fb8 <S2LPRadioSearchChannelBwME+0x1d8>)
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	f7ff fa18 	bl	8000280 <__aeabi_uldivmod>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	461a      	mov	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d3d5      	bcc.n	8000e08 <S2LPRadioSearchChannelBwME+0x28>
  
  if(i!=0) {
 8000e5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 8082 	beq.w	8000f6a <S2LPRadioSearchChannelBwME+0x18a>
    /* Finds the index value with best approximation in i-1, i and i+1 elements */
    i_tmp = i;
 8000e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e6a:	77bb      	strb	r3, [r7, #30]
    
    for(uint8_t j=0;j<3;j++) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e72:	e049      	b.n	8000f08 <S2LPRadioSearchChannelBwME+0x128>
      if(((i_tmp+j-1)>=0) && ((i_tmp+j-1)<=89)) {
 8000e74:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db32      	blt.n	8000eea <S2LPRadioSearchChannelBwME+0x10a>
 8000e84:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	2b59      	cmp	r3, #89	; 0x59
 8000e92:	dc2a      	bgt.n	8000eea <S2LPRadioSearchChannelBwME+0x10a>
        chfltCalculation[j] = (int32_t)lBandwidth - (int32_t)(((uint64_t)s_vectnBandwidth26M[i_tmp+j-1]*f_dig)/260000);
 8000e94:	68fd      	ldr	r5, [r7, #12]
 8000e96:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <S2LPRadioSearchChannelBwME+0x1d4>)
 8000ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea8:	b299      	uxth	r1, r3
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	f04f 0400 	mov.w	r4, #0
 8000eb4:	fb03 f602 	mul.w	r6, r3, r2
 8000eb8:	fb01 f004 	mul.w	r0, r1, r4
 8000ebc:	4406      	add	r6, r0
 8000ebe:	fba1 0103 	umull	r0, r1, r1, r3
 8000ec2:	1873      	adds	r3, r6, r1
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4a3c      	ldr	r2, [pc, #240]	; (8000fb8 <S2LPRadioSearchChannelBwME+0x1d8>)
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	f7ff f9d8 	bl	8000280 <__aeabi_uldivmod>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eda:	1aaa      	subs	r2, r5, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f843 2c20 	str.w	r2, [r3, #-32]
 8000ee8:	e009      	b.n	8000efe <S2LPRadioSearchChannelBwME+0x11e>
      }
      else {
        chfltCalculation[j] = 0x7FFFFFFF;
 8000eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000efa:	f843 2c20 	str.w	r2, [r3, #-32]
    for(uint8_t j=0;j<3;j++) {
 8000efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f02:	3301      	adds	r3, #1
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d9b1      	bls.n	8000e74 <S2LPRadioSearchChannelBwME+0x94>
      }
    }
    uint32_t chfltDelta = 0xFFFFFFFF;
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	623b      	str	r3, [r7, #32]
    
    for(uint8_t j=0;j<3;j++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	77fb      	strb	r3, [r7, #31]
 8000f1a:	e023      	b.n	8000f64 <S2LPRadioSearchChannelBwME+0x184>
      if(S_ABS(chfltCalculation[j])<chfltDelta) {
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f24:	4413      	add	r3, r2
 8000f26:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bfb8      	it	lt
 8000f2e:	425b      	neglt	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d912      	bls.n	8000f5e <S2LPRadioSearchChannelBwME+0x17e>
        chfltDelta = S_ABS(chfltCalculation[j]);
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f40:	4413      	add	r3, r2
 8000f42:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bfb8      	it	lt
 8000f4a:	425b      	neglt	r3, r3
 8000f4c:	623b      	str	r3, [r7, #32]
        i=i_tmp+j-1;
 8000f4e:	7fba      	ldrb	r2, [r7, #30]
 8000f50:	7ffb      	ldrb	r3, [r7, #31]
 8000f52:	4413      	add	r3, r2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(uint8_t j=0;j<3;j++) {
 8000f5e:	7ffb      	ldrb	r3, [r7, #31]
 8000f60:	3301      	adds	r3, #1
 8000f62:	77fb      	strb	r3, [r7, #31]
 8000f64:	7ffb      	ldrb	r3, [r7, #31]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d9d8      	bls.n	8000f1c <S2LPRadioSearchChannelBwME+0x13c>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8000f6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <S2LPRadioSearchChannelBwME+0x1dc>)
 8000f70:	fb82 1203 	smull	r1, r2, r2, r3
 8000f74:	1052      	asrs	r2, r2, #1
 8000f76:	17db      	asrs	r3, r3, #31
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8000f82:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <S2LPRadioSearchChannelBwME+0x1dc>)
 8000f88:	fb83 1302 	smull	r1, r3, r3, r2
 8000f8c:	1059      	asrs	r1, r3, #1
 8000f8e:	17d3      	asrs	r3, r2, #31
 8000f90:	1ac9      	subs	r1, r1, r3
 8000f92:	460b      	mov	r3, r1
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	701a      	strb	r2, [r3, #0]
  
}
 8000fa2:	bf00      	nop
 8000fa4:	3734      	adds	r7, #52	; 0x34
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	01c9c380 	.word	0x01c9c380
 8000fb4:	08005860 	.word	0x08005860
 8000fb8:	0003f7a0 	.word	0x0003f7a0
 8000fbc:	38e38e39 	.word	0x38e38e39

08000fc0 <S2LPRadioComputeDatarate>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
uint32_t S2LPRadioComputeDatarate(uint16_t cM, uint8_t cE)
{
 8000fc0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4602      	mov	r2, r0
 8000fca:	80fa      	strh	r2, [r7, #6]
 8000fcc:	460a      	mov	r2, r1
 8000fce:	717a      	strb	r2, [r7, #5]
  uint32_t f_dig=s_lXtalFrequency;
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <S2LPRadioComputeDatarate+0xc8>)
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	617a      	str	r2, [r7, #20]
  uint64_t dr;
  
  if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	492c      	ldr	r1, [pc, #176]	; (800108c <S2LPRadioComputeDatarate+0xcc>)
 8000fda:	428a      	cmp	r2, r1
 8000fdc:	d902      	bls.n	8000fe4 <S2LPRadioComputeDatarate+0x24>
    f_dig >>= 1;
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	0852      	lsrs	r2, r2, #1
 8000fe2:	617a      	str	r2, [r7, #20]
  }  
  
  if(cE==0) {
 8000fe4:	797a      	ldrb	r2, [r7, #5]
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	d11c      	bne.n	8001024 <S2LPRadioComputeDatarate+0x64>
    dr=((uint64_t)f_dig*cM);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	f04f 0400 	mov.w	r4, #0
 8000ff8:	fb03 f502 	mul.w	r5, r3, r2
 8000ffc:	fb01 f004 	mul.w	r0, r1, r4
 8001000:	4428      	add	r0, r5
 8001002:	fba1 3403 	umull	r3, r4, r1, r3
 8001006:	1902      	adds	r2, r0, r4
 8001008:	4614      	mov	r4, r2
 800100a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800100e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    return (uint32_t)(dr>>32);
 8001012:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	f04f 0400 	mov.w	r4, #0
 800101e:	0013      	movs	r3, r2
 8001020:	2400      	movs	r4, #0
 8001022:	e02a      	b.n	800107a <S2LPRadioComputeDatarate+0xba>
  }
  
  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4615      	mov	r5, r2
 8001028:	f04f 0600 	mov.w	r6, #0
 800102c:	88f9      	ldrh	r1, [r7, #6]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f511 3880 	adds.w	r8, r1, #65536	; 0x10000
 8001036:	f142 0900 	adc.w	r9, r2, #0
 800103a:	fb08 fc06 	mul.w	ip, r8, r6
 800103e:	fb05 f009 	mul.w	r0, r5, r9
 8001042:	4460      	add	r0, ip
 8001044:	fba5 1208 	umull	r1, r2, r5, r8
 8001048:	4410      	add	r0, r2
 800104a:	4602      	mov	r2, r0
 800104c:	e9c7 1202 	strd	r1, r2, [r7, #8]
 8001050:	e9c7 1202 	strd	r1, r2, [r7, #8]
  
  return (uint32_t)(dr>>(33-cE));
 8001054:	797a      	ldrb	r2, [r7, #5]
 8001056:	f1c2 0021 	rsb	r0, r2, #33	; 0x21
 800105a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800105e:	f1c0 0620 	rsb	r6, r0, #32
 8001062:	f1a0 0520 	sub.w	r5, r0, #32
 8001066:	fa21 f300 	lsr.w	r3, r1, r0
 800106a:	fa02 f606 	lsl.w	r6, r2, r6
 800106e:	4333      	orrs	r3, r6
 8001070:	fa22 f505 	lsr.w	r5, r2, r5
 8001074:	432b      	orrs	r3, r5
 8001076:	fa22 f400 	lsr.w	r4, r2, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	01c9c380 	.word	0x01c9c380

08001090 <S2LPRadioComputeFreqDeviation>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
uint32_t S2LPRadioComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 8001090:	b4f0      	push	{r4, r5, r6, r7}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4606      	mov	r6, r0
 8001098:	4608      	mov	r0, r1
 800109a:	4611      	mov	r1, r2
 800109c:	461a      	mov	r2, r3
 800109e:	4633      	mov	r3, r6
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	4603      	mov	r3, r0
 80010a4:	71bb      	strb	r3, [r7, #6]
 80010a6:	460b      	mov	r3, r1
 80010a8:	717b      	strb	r3, [r7, #5]
 80010aa:	4613      	mov	r3, r2
 80010ac:	713b      	strb	r3, [r7, #4]
  uint32_t f_xo=s_lXtalFrequency;
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <S2LPRadioComputeFreqDeviation+0xb4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
  
  if(cE==0) {
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d119      	bne.n	80010ee <S2LPRadioComputeFreqDeviation+0x5e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f04f 0400 	mov.w	r4, #0
 80010c8:	fb03 f502 	mul.w	r5, r3, r2
 80010cc:	fb01 f004 	mul.w	r0, r1, r4
 80010d0:	4428      	add	r0, r5
 80010d2:	fba1 3403 	umull	r3, r4, r1, r3
 80010d6:	1902      	adds	r2, r0, r4
 80010d8:	4614      	mov	r4, r2
 80010da:	f04f 0100 	mov.w	r1, #0
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	0d99      	lsrs	r1, r3, #22
 80010e4:	ea41 2184 	orr.w	r1, r1, r4, lsl #10
 80010e8:	0da2      	lsrs	r2, r4, #22
 80010ea:	460b      	mov	r3, r1
 80010ec:	e024      	b.n	8001138 <S2LPRadioComputeFreqDeviation+0xa8>
  }
  
  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f04f 0100 	mov.w	r1, #0
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010fc:	461a      	mov	r2, r3
 80010fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001102:	fb02 fc01 	mul.w	ip, r2, r1
 8001106:	fb00 f603 	mul.w	r6, r0, r3
 800110a:	4466      	add	r6, ip
 800110c:	fba0 2302 	umull	r2, r3, r0, r2
 8001110:	18f1      	adds	r1, r6, r3
 8001112:	460b      	mov	r3, r1
 8001114:	79b9      	ldrb	r1, [r7, #6]
 8001116:	f1c1 0117 	rsb	r1, r1, #23
 800111a:	f1c1 0620 	rsb	r6, r1, #32
 800111e:	f1a1 0020 	sub.w	r0, r1, #32
 8001122:	fa22 f401 	lsr.w	r4, r2, r1
 8001126:	fa03 f606 	lsl.w	r6, r3, r6
 800112a:	4334      	orrs	r4, r6
 800112c:	fa23 f000 	lsr.w	r0, r3, r0
 8001130:	4304      	orrs	r4, r0
 8001132:	fa23 f501 	lsr.w	r5, r3, r1
 8001136:	4623      	mov	r3, r4
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bcf0      	pop	{r4, r5, r6, r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000

08001148 <S2LPRadioComputeSynthWord>:
* @param  frequency Target frequency value expressed in Hz.
* @param  refdiv reference divider value value (it can be only 1 or 2).
* @retval uint32_t SYNTH_WORD.
*/
uint32_t S2LPRadioComputeSynthWord(uint32_t frequency, uint8_t refdiv)
{
 8001148:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800114c:	b08c      	sub	sp, #48	; 0x30
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460a      	mov	r2, r1
 8001154:	70fa      	strb	r2, [r7, #3]
  uint8_t band;
  
  if(IS_FREQUENCY_BAND_HIGH(frequency)) {
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4940      	ldr	r1, [pc, #256]	; (800125c <S2LPRadioComputeSynthWord+0x114>)
 800115a:	428a      	cmp	r2, r1
 800115c:	d907      	bls.n	800116e <S2LPRadioComputeSynthWord+0x26>
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	493f      	ldr	r1, [pc, #252]	; (8001260 <S2LPRadioComputeSynthWord+0x118>)
 8001162:	428a      	cmp	r2, r1
 8001164:	d803      	bhi.n	800116e <S2LPRadioComputeSynthWord+0x26>
    band = HIGH_BAND_FACTOR;
 8001166:	2204      	movs	r2, #4
 8001168:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800116c:	e002      	b.n	8001174 <S2LPRadioComputeSynthWord+0x2c>
  }
  else {
    band = MIDDLE_BAND_FACTOR;
 800116e:	2208      	movs	r2, #8
 8001170:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
  }

  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;
  
  tgt = (((uint64_t)frequency)<<19)*(band*refdiv);
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4611      	mov	r1, r2
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	0b4c      	lsrs	r4, r1, #13
 800117e:	04cb      	lsls	r3, r1, #19
 8001180:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001184:	78f9      	ldrb	r1, [r7, #3]
 8001186:	fb01 f202 	mul.w	r2, r1, r2
 800118a:	4611      	mov	r1, r2
 800118c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001190:	fb01 f504 	mul.w	r5, r1, r4
 8001194:	fb03 f002 	mul.w	r0, r3, r2
 8001198:	4428      	add	r0, r5
 800119a:	fba3 3401 	umull	r3, r4, r3, r1
 800119e:	1902      	adds	r2, r0, r4
 80011a0:	4614      	mov	r4, r2
 80011a2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80011a6:	e9c7 3408 	strd	r3, r4, [r7, #32]
  synth=(uint32_t)(tgt/s_lXtalFrequency);
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <S2LPRadioComputeSynthWord+0x11c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f04f 0400 	mov.w	r4, #0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4623      	mov	r3, r4
 80011b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011ba:	f7ff f861 	bl	8000280 <__aeabi_uldivmod>
 80011be:	4603      	mov	r3, r0
 80011c0:	460c      	mov	r4, r1
 80011c2:	61fb      	str	r3, [r7, #28]
  tgt1 = (uint64_t)s_lXtalFrequency*(synth);
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <S2LPRadioComputeSynthWord+0x11c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f04f 0400 	mov.w	r4, #0
 80011d4:	fb03 f502 	mul.w	r5, r3, r2
 80011d8:	fb01 f004 	mul.w	r0, r1, r4
 80011dc:	4428      	add	r0, r5
 80011de:	fba1 3403 	umull	r3, r4, r1, r3
 80011e2:	1902      	adds	r2, r0, r4
 80011e4:	4614      	mov	r4, r2
 80011e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80011ea:	e9c7 3404 	strd	r3, r4, [r7, #16]
  tgt2 = (uint64_t)s_lXtalFrequency*(synth+1);
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <S2LPRadioComputeSynthWord+0x11c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	3301      	adds	r3, #1
 80011fc:	f04f 0400 	mov.w	r4, #0
 8001200:	fb03 f502 	mul.w	r5, r3, r2
 8001204:	fb01 f004 	mul.w	r0, r1, r4
 8001208:	4428      	add	r0, r5
 800120a:	fba1 3403 	umull	r3, r4, r1, r3
 800120e:	1902      	adds	r2, r0, r4
 8001210:	4614      	mov	r4, r2
 8001212:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001216:	e9c7 3402 	strd	r3, r4, [r7, #8]
  
  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 800121a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800121e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001222:	1ac9      	subs	r1, r1, r3
 8001224:	eb62 0204 	sbc.w	r2, r2, r4
 8001228:	468b      	mov	fp, r1
 800122a:	4694      	mov	ip, r2
 800122c:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8001230:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001234:	4629      	mov	r1, r5
 8001236:	4632      	mov	r2, r6
 8001238:	1ac9      	subs	r1, r1, r3
 800123a:	eb62 0204 	sbc.w	r2, r2, r4
 800123e:	4594      	cmp	ip, r2
 8001240:	bf08      	it	eq
 8001242:	458b      	cmpeq	fp, r1
 8001244:	d202      	bcs.n	800124c <S2LPRadioComputeSynthWord+0x104>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	e000      	b.n	800124e <S2LPRadioComputeSynthWord+0x106>
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	61fb      	str	r3, [r7, #28]
  
  return synth;
 8001250:	69fb      	ldr	r3, [r7, #28]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3730      	adds	r7, #48	; 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800125c:	33428eff 	.word	0x33428eff
 8001260:	38074300 	.word	0x38074300
 8001264:	20000000 	.word	0x20000000

08001268 <S2LPRadioComputeIF>:
* @param  pcAnaIf pointer to the register of analog IF.
* @param  pcDigIf pointer to the returned of digital IF.
* @retval None.
*/
void S2LPRadioComputeIF(uint32_t nIF, uint8_t* pcAnaIf, uint8_t* pcDigIf)
{
 8001268:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
  uint32_t f_dig=s_lXtalFrequency;
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <S2LPRadioComputeIF+0xe0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	617b      	str	r3, [r7, #20]
  
  if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4a33      	ldr	r2, [pc, #204]	; (800134c <S2LPRadioComputeIF+0xe4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d902      	bls.n	800128a <S2LPRadioComputeIF+0x22>
    f_dig >>= 1;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	085b      	lsrs	r3, r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  }
  
  (*pcAnaIf)=(uint8_t)((((uint64_t)nIF)<<13)*3/s_lXtalFrequency-100);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	468b      	mov	fp, r1
 8001294:	4694      	mov	ip, r2
 8001296:	eb1b 030b 	adds.w	r3, fp, fp
 800129a:	eb4c 040c 	adc.w	r4, ip, ip
 800129e:	469b      	mov	fp, r3
 80012a0:	46a4      	mov	ip, r4
 80012a2:	eb1b 0b01 	adds.w	fp, fp, r1
 80012a6:	eb4c 0c02 	adc.w	ip, ip, r2
 80012aa:	f04f 0100 	mov.w	r1, #0
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	ea4f 324c 	mov.w	r2, ip, lsl #13
 80012b6:	ea42 42db 	orr.w	r2, r2, fp, lsr #19
 80012ba:	ea4f 314b 	mov.w	r1, fp, lsl #13
 80012be:	468b      	mov	fp, r1
 80012c0:	4694      	mov	ip, r2
 80012c2:	4658      	mov	r0, fp
 80012c4:	4661      	mov	r1, ip
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <S2LPRadioComputeIF+0xe0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f04f 0400 	mov.w	r4, #0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4623      	mov	r3, r4
 80012d2:	f7fe ffd5 	bl	8000280 <__aeabi_uldivmod>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3b64      	subs	r3, #100	; 0x64
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	701a      	strb	r2, [r3, #0]
  (*pcDigIf)=(uint8_t)((((uint64_t)nIF)<<13)*3/f_dig-100);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	468b      	mov	fp, r1
 80012ee:	4694      	mov	ip, r2
 80012f0:	eb1b 030b 	adds.w	r3, fp, fp
 80012f4:	eb4c 040c 	adc.w	r4, ip, ip
 80012f8:	469b      	mov	fp, r3
 80012fa:	46a4      	mov	ip, r4
 80012fc:	eb1b 0b01 	adds.w	fp, fp, r1
 8001300:	eb4c 0c02 	adc.w	ip, ip, r2
 8001304:	f04f 0100 	mov.w	r1, #0
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	ea4f 324c 	mov.w	r2, ip, lsl #13
 8001310:	ea42 42db 	orr.w	r2, r2, fp, lsr #19
 8001314:	ea4f 314b 	mov.w	r1, fp, lsl #13
 8001318:	468b      	mov	fp, r1
 800131a:	4694      	mov	ip, r2
 800131c:	4658      	mov	r0, fp
 800131e:	4661      	mov	r1, ip
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f04f 0400 	mov.w	r4, #0
 8001326:	461a      	mov	r2, r3
 8001328:	4623      	mov	r3, r4
 800132a:	f7fe ffa9 	bl	8000280 <__aeabi_uldivmod>
 800132e:	4603      	mov	r3, r0
 8001330:	460c      	mov	r4, r1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	3b64      	subs	r3, #100	; 0x64
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001346:	bf00      	nop
 8001348:	20000000 	.word	0x20000000
 800134c:	01c9c380 	.word	0x01c9c380

08001350 <S2LPRadioSearchWCP>:
*         <li> Middle Band: from 387 MHz to 470 MHz </li>
* @param  refdiv reference divider value value (it can be only 1 or 2).
* @retval uint8_t Charge pump word.
*/
void S2LPRadioSearchWCP(uint8_t* cp_isel, uint8_t* pfd_split, uint32_t lFc, uint8_t refdiv)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	70fb      	strb	r3, [r7, #3]
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = MIDDLE_BAND_FACTOR;
 800135e:	2308      	movs	r3, #8
 8001360:	77fb      	strb	r3, [r7, #31]
  
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc)) {
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <S2LPRadioSearchWCP+0x98>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d905      	bls.n	8001376 <S2LPRadioSearchWCP+0x26>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <S2LPRadioSearchWCP+0x9c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d801      	bhi.n	8001376 <S2LPRadioSearchWCP+0x26>
    BFactor = HIGH_BAND_FACTOR;
 8001372:	2304      	movs	r3, #4
 8001374:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8001376:	7ffa      	ldrb	r2, [r7, #31]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	61bb      	str	r3, [r7, #24]
  
  /* Calculated the reference frequency clock */
  lFRef = s_lXtalFrequency/refdiv;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <S2LPRadioSearchWCP+0xa0>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Set the correct charge pump word */
  if(vcofreq>=VCO_CENTER_FREQ) {
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <S2LPRadioSearchWCP+0xa4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d911      	bls.n	80013b8 <S2LPRadioSearchWCP+0x68>
    if(lFRef>DIG_DOMAIN_XTAL_THRESH) {
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <S2LPRadioSearchWCP+0xa8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d906      	bls.n	80013aa <S2LPRadioSearchWCP+0x5a>
      *cp_isel = 0x02;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2202      	movs	r2, #2
 80013a0:	701a      	strb	r2, [r3, #0]
      *pfd_split = 0;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
      *cp_isel = 0x02;
      *pfd_split = 1;
    }
  }
  
}
 80013a8:	e017      	b.n	80013da <S2LPRadioSearchWCP+0x8a>
      *cp_isel = 0x01;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
      *pfd_split = 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	e010      	b.n	80013da <S2LPRadioSearchWCP+0x8a>
    if(lFRef>DIG_DOMAIN_XTAL_THRESH) {
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <S2LPRadioSearchWCP+0xa8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d906      	bls.n	80013ce <S2LPRadioSearchWCP+0x7e>
      *cp_isel = 0x03;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2203      	movs	r2, #3
 80013c4:	701a      	strb	r2, [r3, #0]
      *pfd_split = 0;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
}
 80013cc:	e005      	b.n	80013da <S2LPRadioSearchWCP+0x8a>
      *cp_isel = 0x02;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
      *pfd_split = 1;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	33428eff 	.word	0x33428eff
 80013ec:	38074300 	.word	0x38074300
 80013f0:	20000000 	.word	0x20000000
 80013f4:	d693a3ff 	.word	0xd693a3ff
 80013f8:	01c9c380 	.word	0x01c9c380

080013fc <S2LPRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of S2LP.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t S2LPRadioInit(SRadioInit* pxSRadioInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_MODULATION(pxSRadioInitStruct->xModulationSelect));
  s_assert_param(IS_DATARATE(pxSRadioInitStruct->lDatarate,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
    
  /* Configure the digital, ADC, SMPS reference clock divider */
  xState = S2LPRadioGetDigDiv();
 8001404:	f000 f972 	bl	80016ec <S2LPRadioGetDigDiv>
 8001408:	4603      	mov	r3, r0
 800140a:	77fb      	strb	r3, [r7, #31]
  if(((s_lXtalFrequency<DIG_DOMAIN_XTAL_THRESH) && (xState==S_ENABLE)) || ((s_lXtalFrequency>DIG_DOMAIN_XTAL_THRESH) && (xState==S_DISABLE))) {
 800140c:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <S2LPRadioInit+0x23c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a8a      	ldr	r2, [pc, #552]	; (800163c <S2LPRadioInit+0x240>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d802      	bhi.n	800141c <S2LPRadioInit+0x20>
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d007      	beq.n	800142c <S2LPRadioInit+0x30>
 800141c:	4b86      	ldr	r3, [pc, #536]	; (8001638 <S2LPRadioInit+0x23c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a87      	ldr	r2, [pc, #540]	; (8001640 <S2LPRadioInit+0x244>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d93d      	bls.n	80014a2 <S2LPRadioInit+0xa6>
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d13a      	bne.n	80014a2 <S2LPRadioInit+0xa6>
    S2LPSpiCommandStrobes(CMD_STANDBY);    
 800142c:	2063      	movs	r0, #99	; 0x63
 800142e:	f000 fae1 	bl	80019f4 <RadioSpiCommandStrobes>
    do{
      for(volatile uint8_t i=0; i!=0xFF; i++);
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e004      	b.n	8001442 <S2LPRadioInit+0x46>
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3301      	adds	r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2bff      	cmp	r3, #255	; 0xff
 8001448:	d1f6      	bne.n	8001438 <S2LPRadioInit+0x3c>
      S2LPRefreshStatus();      // add a timer expiration callback
 800144a:	f000 f9f9 	bl	8001840 <S2LPRefreshStatus>
    }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 800144e:	4b7d      	ldr	r3, [pc, #500]	; (8001644 <S2LPRadioInit+0x248>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d1ea      	bne.n	8001432 <S2LPRadioInit+0x36>
    
    xState = (SFunctionalState)!xState;
 800145c:	7ffb      	ldrb	r3, [r7, #31]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	77fb      	strb	r3, [r7, #31]
    S2LPRadioSetDigDiv(xState); 
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f90d 	bl	800168c <S2LPRadioSetDigDiv>
    
    S2LPSpiCommandStrobes(CMD_READY);
 8001472:	2062      	movs	r0, #98	; 0x62
 8001474:	f000 fabe 	bl	80019f4 <RadioSpiCommandStrobes>
    do{
      for(volatile uint8_t i=0; i!=0xFF; i++);
 8001478:	2300      	movs	r3, #0
 800147a:	73bb      	strb	r3, [r7, #14]
 800147c:	e004      	b.n	8001488 <S2LPRadioInit+0x8c>
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73bb      	strb	r3, [r7, #14]
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2bff      	cmp	r3, #255	; 0xff
 800148e:	d1f6      	bne.n	800147e <S2LPRadioInit+0x82>
      S2LPRefreshStatus();      // add a timer expiration callback
 8001490:	f000 f9d6 	bl	8001840 <S2LPRefreshStatus>
    }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8001494:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <S2LPRadioInit+0x248>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ea      	bne.n	8001478 <S2LPRadioInit+0x7c>
  else {
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  
  /* Intermediate Frequency setting */  
  S2LPRadioComputeIF(300000, &tmpBuffer[0], &tmpBuffer[1]);
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4866      	ldr	r0, [pc, #408]	; (8001648 <S2LPRadioInit+0x24c>)
 80014b0:	f7ff feda 	bl	8001268 <S2LPRadioComputeIF>
  S2LPSpiWriteRegisters(IF_OFFSET_ANA_ADDR, 2, tmpBuffer);
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	461a      	mov	r2, r3
 80014ba:	2102      	movs	r1, #2
 80014bc:	2009      	movs	r0, #9
 80014be:	f000 f9d7 	bl	8001870 <RadioSpiWriteRegisters>

  /* Calculates the datarate register values */
  S2LPRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &dr_m, &dr_e);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f107 0216 	add.w	r2, r7, #22
 80014ca:	f107 0110 	add.w	r1, r7, #16
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fa7c 	bl	80009cc <S2LPRadioSearchDatarateME>
  tmpBuffer[0] = (uint8_t)(dr_m>>8);
 80014d4:	8a3b      	ldrh	r3, [r7, #16]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	763b      	strb	r3, [r7, #24]
  tmpBuffer[1] = (uint8_t)dr_m;
 80014de:	8a3b      	ldrh	r3, [r7, #16]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	767b      	strb	r3, [r7, #25]
  tmpBuffer[2] = (uint8_t)(pxSRadioInitStruct->xModulationSelect | dr_e);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	791a      	ldrb	r2, [r3, #4]
 80014e8:	7dbb      	ldrb	r3, [r7, #22]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	76bb      	strb	r3, [r7, #26]

  
  
  /* Calculates the frequency deviation register values */
  S2LPRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &fdev_m, &fdev_e);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f107 0214 	add.w	r2, r7, #20
 80014f8:	f107 0115 	add.w	r1, r7, #21
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fb5d 	bl	8000bbc <S2LPRadioSearchFreqDevME>
  S2LPSpiReadRegisters(MOD1_ADDR, 1, &tmpBuffer[3]);
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	3303      	adds	r3, #3
 8001508:	461a      	mov	r2, r3
 800150a:	2101      	movs	r1, #1
 800150c:	2011      	movs	r0, #17
 800150e:	f000 fa0b 	bl	8001928 <RadioSpiReadRegisters>
  tmpBuffer[3] &= ~FDEV_E_REGMASK;
 8001512:	7efb      	ldrb	r3, [r7, #27]
 8001514:	f023 030f 	bic.w	r3, r3, #15
 8001518:	b2db      	uxtb	r3, r3
 800151a:	76fb      	strb	r3, [r7, #27]
  tmpBuffer[3] |= fdev_e;  
 800151c:	7efa      	ldrb	r2, [r7, #27]
 800151e:	7d3b      	ldrb	r3, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	76fb      	strb	r3, [r7, #27]
  tmpBuffer[4] = fdev_m;
 8001526:	7d7b      	ldrb	r3, [r7, #21]
 8001528:	773b      	strb	r3, [r7, #28]
  
  /* Calculates the channel filter register values */
  S2LPRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bw_m, &bw_e);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f107 0212 	add.w	r2, r7, #18
 8001532:	f107 0113 	add.w	r1, r7, #19
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc52 	bl	8000de0 <S2LPRadioSearchChannelBwME>
  tmpBuffer[5] = (bw_m<<4) | bw_e;  
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	b25a      	sxtb	r2, r3
 8001542:	7cbb      	ldrb	r3, [r7, #18]
 8001544:	b25b      	sxtb	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b25b      	sxtb	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	777b      	strb	r3, [r7, #29]
  
  /* Configures the radio registers */
  S2LPSpiWriteRegisters(MOD4_ADDR, 6, tmpBuffer);
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	461a      	mov	r2, r3
 8001554:	2106      	movs	r1, #6
 8001556:	200e      	movs	r0, #14
 8001558:	f000 f98a 	bl	8001870 <RadioSpiWriteRegisters>
  
  S2LPSpiReadRegisters(PA_POWER0_ADDR, 3, &tmpBuffer[0]);
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	461a      	mov	r2, r3
 8001562:	2103      	movs	r1, #3
 8001564:	2062      	movs	r0, #98	; 0x62
 8001566:	f000 f9df 	bl	8001928 <RadioSpiReadRegisters>
  
  /* if OOK is selected enable the PA_FC else enable it */
  if((pxSRadioInitStruct->xModulationSelect)!=MOD_ASK_OOK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	2b50      	cmp	r3, #80	; 0x50
 8001570:	d00a      	beq.n	8001588 <S2LPRadioInit+0x18c>
  {
    tmpBuffer[0] &= 0x7F;
 8001572:	7e3b      	ldrb	r3, [r7, #24]
 8001574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001578:	b2db      	uxtb	r3, r3
 800157a:	763b      	strb	r3, [r7, #24]
    tmpBuffer[1] &= 0xFD;
 800157c:	7e7b      	ldrb	r3, [r7, #25]
 800157e:	f023 0302 	bic.w	r3, r3, #2
 8001582:	b2db      	uxtb	r3, r3
 8001584:	767b      	strb	r3, [r7, #25]
 8001586:	e009      	b.n	800159c <S2LPRadioInit+0x1a0>
  }
  else
  {
    tmpBuffer[0] |= 0x80;
 8001588:	7e3b      	ldrb	r3, [r7, #24]
 800158a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800158e:	b2db      	uxtb	r3, r3
 8001590:	763b      	strb	r3, [r7, #24]
    tmpBuffer[1] |= 0x02;
 8001592:	7e7b      	ldrb	r3, [r7, #25]
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	767b      	strb	r3, [r7, #25]
  }
  
  
  tmpBuffer[2]&=0xFC;
 800159c:	7ebb      	ldrb	r3, [r7, #26]
 800159e:	f023 0303 	bic.w	r3, r3, #3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	76bb      	strb	r3, [r7, #26]
  
  /* Bessel filter config */
  if(pxSRadioInitStruct->lDatarate<16000)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80015ae:	d202      	bcs.n	80015b6 <S2LPRadioInit+0x1ba>
  {
    tmpBuffer[2]|=0x00;
 80015b0:	7ebb      	ldrb	r3, [r7, #26]
 80015b2:	76bb      	strb	r3, [r7, #26]
 80015b4:	e01b      	b.n	80015ee <S2LPRadioInit+0x1f2>
  }
  else if(pxSRadioInitStruct->lDatarate<32000)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80015be:	d205      	bcs.n	80015cc <S2LPRadioInit+0x1d0>
  {
    tmpBuffer[2]|=0x01;
 80015c0:	7ebb      	ldrb	r3, [r7, #26]
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	76bb      	strb	r3, [r7, #26]
 80015ca:	e010      	b.n	80015ee <S2LPRadioInit+0x1f2>
  }
  else if(pxSRadioInitStruct->lDatarate<62500)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d805      	bhi.n	80015e4 <S2LPRadioInit+0x1e8>
  {
    tmpBuffer[2]|=0x02;
 80015d8:	7ebb      	ldrb	r3, [r7, #26]
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	76bb      	strb	r3, [r7, #26]
 80015e2:	e004      	b.n	80015ee <S2LPRadioInit+0x1f2>
  }
  else
  {
    tmpBuffer[2]|=0x03;
 80015e4:	7ebb      	ldrb	r3, [r7, #26]
 80015e6:	f043 0303 	orr.w	r3, r3, #3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	76bb      	strb	r3, [r7, #26]
  }
  S2LPSpiWriteRegisters(PA_POWER0_ADDR, 3, &tmpBuffer[0]);
 80015ee:	f107 0318 	add.w	r3, r7, #24
 80015f2:	461a      	mov	r2, r3
 80015f4:	2103      	movs	r1, #3
 80015f6:	2062      	movs	r0, #98	; 0x62
 80015f8:	f000 f93a 	bl	8001870 <RadioSpiWriteRegisters>
  
  /* Enable the freeze option of the AFC on the SYNC word */  
  S2LPSpiReadRegisters(AFC2_ADDR, 1, &tmp8);
 80015fc:	f107 0317 	add.w	r3, r7, #23
 8001600:	461a      	mov	r2, r3
 8001602:	2101      	movs	r1, #1
 8001604:	2014      	movs	r0, #20
 8001606:	f000 f98f 	bl	8001928 <RadioSpiReadRegisters>
  tmp8 |= AFC_FREEZE_ON_SYNC_REGMASK; S2LPSpiWriteRegisters(AFC2_ADDR, 1, &tmp8);
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001610:	b2db      	uxtb	r3, r3
 8001612:	75fb      	strb	r3, [r7, #23]
 8001614:	f107 0317 	add.w	r3, r7, #23
 8001618:	461a      	mov	r2, r3
 800161a:	2101      	movs	r1, #1
 800161c:	2014      	movs	r0, #20
 800161e:	f000 f927 	bl	8001870 <RadioSpiWriteRegisters>
  
  return S2LPRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f880 	bl	800172c <S2LPRadioSetFrequencyBase>
 800162c:	4603      	mov	r3, r0
  
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	01c9c37f 	.word	0x01c9c37f
 8001640:	01c9c380 	.word	0x01c9c380
 8001644:	200000a0 	.word	0x200000a0
 8001648:	000493e0 	.word	0x000493e0

0800164c <S2LPRadioGetRefDiv>:
* @brief  To know if the reference deivider is enabled or disabled.
* @param  None.
* @retval SFunctionalState SET (enabled) or RESET (disabled).
*/
SFunctionalState S2LPRadioGetRefDiv(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	461a      	mov	r2, r3
 8001656:	2101      	movs	r1, #1
 8001658:	206d      	movs	r0, #109	; 0x6d
 800165a:	f000 f965 	bl	8001928 <RadioSpiReadRegisters>
 800165e:	4602      	mov	r2, r0
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <S2LPRadioGetRefDiv+0x3c>)
 8001662:	b212      	sxth	r2, r2
 8001664:	4611      	mov	r1, r2
 8001666:	7019      	strb	r1, [r3, #0]
 8001668:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800166c:	705a      	strb	r2, [r3, #1]
  
  if(tmp & REFDIV_REGMASK) {
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <S2LPRadioGetRefDiv+0x30>
    return S_ENABLE;
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <S2LPRadioGetRefDiv+0x32>
  } else {
    return S_DISABLE;
 800167c:	2300      	movs	r3, #0
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000a0 	.word	0x200000a0

0800168c <S2LPRadioSetDigDiv>:
* @brief  Set the digital divider .
* @param  xNewState S_DISABLE to disable the digital divider and S_ENABLE to enable it.
* @retval None.
*/
void S2LPRadioSetDigDiv(SFunctionalState xNewState)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  
  s_assert_param(IS_SFUNCTIONAL_STATE(xNewState));
  
  S2LPSpiReadRegisters(XO_RCO_CONF1_ADDR, 1, &tmp);
 8001696:	f107 030f 	add.w	r3, r7, #15
 800169a:	461a      	mov	r2, r3
 800169c:	2101      	movs	r1, #1
 800169e:	206c      	movs	r0, #108	; 0x6c
 80016a0:	f000 f942 	bl	8001928 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE) {
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d105      	bne.n	80016b6 <S2LPRadioSetDigDiv+0x2a>
    tmp &= ~PD_CLKDIV_REGMASK;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	f023 0310 	bic.w	r3, r3, #16
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e004      	b.n	80016c0 <S2LPRadioSetDigDiv+0x34>
  } else {
    tmp |= PD_CLKDIV_REGMASK;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	73fb      	strb	r3, [r7, #15]
  }
  g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF1_ADDR, 1, &tmp);
 80016c0:	f107 030f 	add.w	r3, r7, #15
 80016c4:	461a      	mov	r2, r3
 80016c6:	2101      	movs	r1, #1
 80016c8:	206c      	movs	r0, #108	; 0x6c
 80016ca:	f000 f8d1 	bl	8001870 <RadioSpiWriteRegisters>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <S2LPRadioSetDigDiv+0x5c>)
 80016d2:	b212      	sxth	r2, r2
 80016d4:	4611      	mov	r1, r2
 80016d6:	7019      	strb	r1, [r3, #0]
 80016d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80016dc:	705a      	strb	r2, [r3, #1]
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000a0 	.word	0x200000a0

080016ec <S2LPRadioGetDigDiv>:
/**
* @brief  Get the digital divider .
* @retval SFunctionalState S_DISABLE to disable the digital divider and S_ENABLE to enable it.
*/
SFunctionalState S2LPRadioGetDigDiv(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF1_ADDR, 1, &tmp);
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	461a      	mov	r2, r3
 80016f6:	2101      	movs	r1, #1
 80016f8:	206c      	movs	r0, #108	; 0x6c
 80016fa:	f000 f915 	bl	8001928 <RadioSpiReadRegisters>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <S2LPRadioGetDigDiv+0x3c>)
 8001702:	b212      	sxth	r2, r2
 8001704:	4611      	mov	r1, r2
 8001706:	7019      	strb	r1, [r3, #0]
 8001708:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800170c:	705a      	strb	r2, [r3, #1]
  
  if(tmp & PD_CLKDIV_REGMASK) {
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <S2LPRadioGetDigDiv+0x30>
    return S_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	e000      	b.n	800171e <S2LPRadioGetDigDiv+0x32>
  } else {
    return S_ENABLE;
 800171c:	2301      	movs	r3, #1
  }
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200000a0 	.word	0x200000a0

0800172c <S2LPRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t S2LPRadioSetFrequencyBase(uint32_t lFBase)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tmp32;
  uint8_t tmpBuffer[4], cp_isel, bs = 1, pfd_split, tmp, cRefDiv;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
  
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  tmp32 = S2LPRadioComputeSynthWord(lFBase, ((uint8_t)S2LPRadioGetRefDiv()+1));
 8001738:	f7ff ff88 	bl	800164c <S2LPRadioGetRefDiv>
 800173c:	4603      	mov	r3, r0
 800173e:	3301      	adds	r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fcff 	bl	8001148 <S2LPRadioComputeSynthWord>
 800174a:	61b8      	str	r0, [r7, #24]
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase)) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a31      	ldr	r2, [pc, #196]	; (8001814 <S2LPRadioSetFrequencyBase+0xe8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d905      	bls.n	8001760 <S2LPRadioSetFrequencyBase+0x34>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <S2LPRadioSetFrequencyBase+0xec>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d801      	bhi.n	8001760 <S2LPRadioSetFrequencyBase+0x34>
    bs = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
  }
  
  cRefDiv = (uint8_t)S2LPRadioGetRefDiv() + 1;
 8001760:	f7ff ff74 	bl	800164c <S2LPRadioGetRefDiv>
 8001764:	4603      	mov	r3, r0
 8001766:	3301      	adds	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]

  /* Search the VCO charge pump word and set the corresponding register */
  S2LPRadioSearchWCP(&cp_isel, &pfd_split, lFBase, cRefDiv);
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	f107 010e 	add.w	r1, r7, #14
 8001770:	f107 000f 	add.w	r0, r7, #15
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	f7ff fdeb 	bl	8001350 <S2LPRadioSearchWCP>
  
  S2LPSpiReadRegisters(SYNTH_CONFIG2_ADDR, 1, &tmp);
 800177a:	f107 030d 	add.w	r3, r7, #13
 800177e:	461a      	mov	r2, r3
 8001780:	2101      	movs	r1, #1
 8001782:	2065      	movs	r0, #101	; 0x65
 8001784:	f000 f8d0 	bl	8001928 <RadioSpiReadRegisters>
  tmp &= ~PLL_PFD_SPLIT_EN_REGMASK;
 8001788:	7b7b      	ldrb	r3, [r7, #13]
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	b2db      	uxtb	r3, r3
 8001790:	737b      	strb	r3, [r7, #13]
  tmp |= (pfd_split<<2);
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	b25a      	sxtb	r2, r3
 8001798:	7b7b      	ldrb	r3, [r7, #13]
 800179a:	b25b      	sxtb	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	737b      	strb	r3, [r7, #13]
  S2LPSpiWriteRegisters(SYNTH_CONFIG2_ADDR, 1, &tmp);
 80017a4:	f107 030d 	add.w	r3, r7, #13
 80017a8:	461a      	mov	r2, r3
 80017aa:	2101      	movs	r1, #1
 80017ac:	2065      	movs	r0, #101	; 0x65
 80017ae:	f000 f85f 	bl	8001870 <RadioSpiWriteRegisters>
    
  /* Build the array of registers values for the analog part */
  tmpBuffer[0] = (((uint8_t)(tmp32>>24)) & SYNT_27_24_REGMASK) | cp_isel<<5 | (bs<<4) ;
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	0e1b      	lsrs	r3, r3, #24
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b25a      	sxtb	r2, r3
 80017c8:	7ffb      	ldrb	r3, [r7, #31]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	743b      	strb	r3, [r7, #16]
  tmpBuffer[1] = (uint8_t)(tmp32>>16);
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	747b      	strb	r3, [r7, #17]
  tmpBuffer[2] = (uint8_t)(tmp32>>8);
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	74bb      	strb	r3, [r7, #18]
  tmpBuffer[3] = (uint8_t)tmp32;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	74fb      	strb	r3, [r7, #19]
  
  g_xStatus = S2LPSpiWriteRegisters(SYNT3_ADDR, 4, tmpBuffer);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	461a      	mov	r2, r3
 80017f2:	2104      	movs	r1, #4
 80017f4:	2005      	movs	r0, #5
 80017f6:	f000 f83b 	bl	8001870 <RadioSpiWriteRegisters>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <S2LPRadioSetFrequencyBase+0xf0>)
 80017fe:	b212      	sxth	r2, r2
 8001800:	4611      	mov	r1, r2
 8001802:	7019      	strb	r1, [r3, #0]
 8001804:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001808:	705a      	strb	r2, [r3, #1]
  
  return 0;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	33428eff 	.word	0x33428eff
 8001818:	38074300 	.word	0x38074300
 800181c:	200000a0 	.word	0x200000a0

08001820 <S2LPRadioSetXtalFrequency>:
* @note this function must be called before any Radio setting.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void S2LPRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <S2LPRadioSetXtalFrequency+0x1c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000

08001840 <S2LPRefreshStatus>:
}

#else

void S2LPRefreshStatus(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
 // do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = S2LPSpiReadRegisters(MC_STATE1_ADDR, 1, &tempRegValue);
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	461a      	mov	r2, r3
 800184a:	2101      	movs	r1, #1
 800184c:	208d      	movs	r0, #141	; 0x8d
 800184e:	f000 f86b 	bl	8001928 <RadioSpiReadRegisters>
 8001852:	4602      	mov	r2, r0
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <S2LPRefreshStatus+0x2c>)
 8001856:	b212      	sxth	r2, r2
 8001858:	4611      	mov	r1, r2
 800185a:	7019      	strb	r1, [r3, #0]
 800185c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001860:	705a      	strb	r2, [r3, #1]
  }
//  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
//          (((uint8_t*)&g_xStatus)[1]&0x07)==tempRegValue[0])); 

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200000a0 	.word	0x200000a0

08001870 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0c8      	sub	sp, #288	; 0x120
 8001874:	af02      	add	r7, sp, #8
 8001876:	463b      	mov	r3, r7
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	4602      	mov	r2, r0
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	1dbb      	adds	r3, r7, #6
 8001882:	460a      	mov	r2, r1
 8001884:	701a      	strb	r2, [r3, #0]
  uint8_t tx_buff[2]={WRITE_HEADER,cRegAddress};
 8001886:	2300      	movs	r3, #0
 8001888:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
  StatusBytes status;
  
  SPI_ENTER_CRITICAL();
  
  /* Puts the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8001896:	2200      	movs	r2, #0
 8001898:	2102      	movs	r1, #2
 800189a:	4821      	ldr	r0, [pc, #132]	; (8001920 <RadioSpiWriteRegisters+0xb0>)
 800189c:	f000 fc54 	bl	8002148 <HAL_GPIO_WritePin>
  
  HAL_SPI_TransmitReceive(&SpiHandle, tx_buff, rx_buff, 2, 1000);
 80018a0:	f107 0210 	add.w	r2, r7, #16
 80018a4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	481c      	ldr	r0, [pc, #112]	; (8001924 <RadioSpiWriteRegisters+0xb4>)
 80018b2:	f001 f927 	bl	8002b04 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&SpiHandle, pcBuffer, &rx_buff[2], cNbBytes, 1000);
 80018b6:	1dbb      	adds	r3, r7, #6
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b298      	uxth	r0, r3
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	1c9a      	adds	r2, r3, #2
 80018c2:	4639      	mov	r1, r7
 80018c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4603      	mov	r3, r0
 80018cc:	6809      	ldr	r1, [r1, #0]
 80018ce:	4815      	ldr	r0, [pc, #84]	; (8001924 <RadioSpiWriteRegisters+0xb4>)
 80018d0:	f001 f918 	bl	8002b04 <HAL_SPI_TransmitReceive>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 80018d4:	2201      	movs	r2, #1
 80018d6:	2102      	movs	r1, #2
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <RadioSpiWriteRegisters+0xb0>)
 80018da:	f000 fc35 	bl	8002148 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80018de:	b662      	cpsie	i
  
  SPI_EXIT_CRITICAL();
  
  ((uint8_t*)&status)[1]=rx_buff[0];
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	3301      	adds	r3, #1
 80018e6:	f107 0210 	add.w	r2, r7, #16
 80018ea:	7812      	ldrb	r2, [r2, #0]
 80018ec:	701a      	strb	r2, [r3, #0]
  ((uint8_t*)&status)[0]=rx_buff[1];
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	f107 0210 	add.w	r2, r7, #16
 80018f6:	7852      	ldrb	r2, [r2, #1]
 80018f8:	701a      	strb	r2, [r3, #0]
  
  return status;
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8001904:	2300      	movs	r3, #0
 8001906:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 800190a:	f362 0307 	bfi	r3, r2, #0, #8
 800190e:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8001912:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8001916:	4618      	mov	r0, r3
 8001918:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020000 	.word	0x40020000
 8001924:	200000a4 	.word	0x200000a4

08001928 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0c8      	sub	sp, #288	; 0x120
 800192c:	af02      	add	r7, sp, #8
 800192e:	463b      	mov	r3, r7
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	4602      	mov	r2, r0
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	460a      	mov	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
  uint8_t tx_buff[255]={READ_HEADER,cRegAddress};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4618      	mov	r0, r3
 8001944:	23ff      	movs	r3, #255	; 0xff
 8001946:	461a      	mov	r2, r3
 8001948:	2100      	movs	r1, #0
 800194a:	f003 f844 	bl	80049d6 <memset>
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	1dfa      	adds	r2, r7, #7
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	705a      	strb	r2, [r3, #1]
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
  uint8_t rx_buff[2];
  StatusBytes status;
  
  SPI_ENTER_CRITICAL();
  RadioSpiCSLow();
 8001962:	2200      	movs	r2, #0
 8001964:	2102      	movs	r1, #2
 8001966:	4821      	ldr	r0, [pc, #132]	; (80019ec <RadioSpiReadRegisters+0xc4>)
 8001968:	f000 fbee 	bl	8002148 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, tx_buff, rx_buff, 2, 1000);
 800196c:	f107 0210 	add.w	r2, r7, #16
 8001970:	f107 0114 	add.w	r1, r7, #20
 8001974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2302      	movs	r3, #2
 800197c:	481c      	ldr	r0, [pc, #112]	; (80019f0 <RadioSpiReadRegisters+0xc8>)
 800197e:	f001 f8c1 	bl	8002b04 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&SpiHandle, tx_buff, pcBuffer, cNbBytes, 1000);
 8001982:	1dbb      	adds	r3, r7, #6
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b298      	uxth	r0, r3
 8001988:	463a      	mov	r2, r7
 800198a:	f107 0114 	add.w	r1, r7, #20
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4603      	mov	r3, r0
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	4815      	ldr	r0, [pc, #84]	; (80019f0 <RadioSpiReadRegisters+0xc8>)
 800199a:	f001 f8b3 	bl	8002b04 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh();
 800199e:	2201      	movs	r2, #1
 80019a0:	2102      	movs	r1, #2
 80019a2:	4812      	ldr	r0, [pc, #72]	; (80019ec <RadioSpiReadRegisters+0xc4>)
 80019a4:	f000 fbd0 	bl	8002148 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80019a8:	b662      	cpsie	i
  SPI_EXIT_CRITICAL();
  
  ((uint8_t*)&status)[1]=rx_buff[0];
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	3301      	adds	r3, #1
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
  ((uint8_t*)&status)[0]=rx_buff[1];  
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	f107 0210 	add.w	r2, r7, #16
 80019c0:	7852      	ldrb	r2, [r2, #1]
 80019c2:	701a      	strb	r2, [r3, #0]
  
  return status;
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 80019ce:	2300      	movs	r3, #0
 80019d0:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 80019d4:	f362 0307 	bfi	r3, r2, #0, #8
 80019d8:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80019dc:	f362 230f 	bfi	r3, r2, #8, #8
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020000 	.word	0x40020000
 80019f0:	200000a4 	.word	0x200000a4

080019f4 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2]={COMMAND_HEADER,cCommandCode};
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	743b      	strb	r3, [r7, #16]
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	747b      	strb	r3, [r7, #17]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a06:	b672      	cpsid	i
  uint8_t rx_buff[2];
  StatusBytes status;
  
  SPI_ENTER_CRITICAL();
  RadioSpiCSLow();
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4814      	ldr	r0, [pc, #80]	; (8001a60 <RadioSpiCommandStrobes+0x6c>)
 8001a0e:	f000 fb9b 	bl	8002148 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, tx_buff, rx_buff, 2, 1000);
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	f107 0110 	add.w	r1, r7, #16
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2302      	movs	r3, #2
 8001a22:	4810      	ldr	r0, [pc, #64]	; (8001a64 <RadioSpiCommandStrobes+0x70>)
 8001a24:	f001 f86e 	bl	8002b04 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh();
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <RadioSpiCommandStrobes+0x6c>)
 8001a2e:	f000 fb8b 	bl	8002148 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a32:	b662      	cpsie	i
  SPI_EXIT_CRITICAL();
  
  ((uint8_t*)&status)[1]=rx_buff[0];
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	3301      	adds	r3, #1
 8001a3a:	7b3a      	ldrb	r2, [r7, #12]
 8001a3c:	701a      	strb	r2, [r3, #0]
  ((uint8_t*)&status)[0]=rx_buff[1];
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	7b7a      	ldrb	r2, [r7, #13]
 8001a44:	701a      	strb	r2, [r3, #0]
  
  return status;
 8001a46:	893b      	ldrh	r3, [r7, #8]
 8001a48:	82bb      	strh	r3, [r7, #20]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	7d3a      	ldrb	r2, [r7, #20]
 8001a4e:	f362 0307 	bfi	r3, r2, #0, #8
 8001a52:	7d7a      	ldrb	r2, [r7, #21]
 8001a54:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40020000 	.word	0x40020000
 8001a64:	200000a4 	.word	0x200000a4

08001a68 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0a8      	sub	sp, #160	; 0xa0
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2]={WRITE_HEADER,LINEAR_FIFO_ADDRESS};
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8001a7a:	23ff      	movs	r3, #255	; 0xff
 8001a7c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
  uint8_t rx_buff[130];
  StatusBytes status;
  
  SPI_ENTER_CRITICAL();
  RadioSpiCSLow();
 8001a82:	2200      	movs	r2, #0
 8001a84:	2102      	movs	r1, #2
 8001a86:	481d      	ldr	r0, [pc, #116]	; (8001afc <RadioSpiWriteFifo+0x94>)
 8001a88:	f000 fb5e 	bl	8002148 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, tx_buff, rx_buff, 2, 1000);
 8001a8c:	f107 020c 	add.w	r2, r7, #12
 8001a90:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	4818      	ldr	r0, [pc, #96]	; (8001b00 <RadioSpiWriteFifo+0x98>)
 8001a9e:	f001 f831 	bl	8002b04 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&SpiHandle, pcBuffer, &rx_buff[2], cNbBytes, 1000);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	1c9a      	adds	r2, r3, #2
 8001aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <RadioSpiWriteFifo+0x98>)
 8001ab8:	f001 f824 	bl	8002b04 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh();
 8001abc:	2201      	movs	r2, #1
 8001abe:	2102      	movs	r1, #2
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <RadioSpiWriteFifo+0x94>)
 8001ac2:	f000 fb41 	bl	8002148 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ac6:	b662      	cpsie	i
  SPI_EXIT_CRITICAL();
  
  ((uint8_t*)&status)[1]=rx_buff[0];
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	3301      	adds	r3, #1
 8001ace:	7b3a      	ldrb	r2, [r7, #12]
 8001ad0:	701a      	strb	r2, [r3, #0]
  ((uint8_t*)&status)[0]=rx_buff[1];
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	7b7a      	ldrb	r2, [r7, #13]
 8001ad8:	701a      	strb	r2, [r3, #0]
  
  return status;
 8001ada:	893b      	ldrh	r3, [r7, #8]
 8001adc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8001ae6:	f362 0307 	bfi	r3, r2, #0, #8
 8001aea:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001aee:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3798      	adds	r7, #152	; 0x98
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020000 	.word	0x40020000
 8001b00:	200000a4 	.word	0x200000a4

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x34>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x34>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x34>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x34>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f94d 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f002 fd1e 	bl	800456c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f965 	bl	8001e2a <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f92d 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	200000fc 	.word	0x200000fc

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200000fc 	.word	0x200000fc

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_Delay+0x40>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000008 	.word	0x20000008

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e159      	b.n	8002114 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8148 	bne.w	800210e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d00b      	beq.n	8001e9e <HAL_GPIO_Init+0x5a>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e92:	2b11      	cmp	r3, #17
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d130      	bne.n	8001f00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 0201 	and.w	r2, r3, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0xfc>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b12      	cmp	r3, #18
 8001f3e:	d123      	bne.n	8001f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a2 	beq.w	800210e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_GPIO_Init+0x2e4>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a55      	ldr	r2, [pc, #340]	; (8002128 <HAL_GPIO_Init+0x2e4>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_GPIO_Init+0x2e4>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_GPIO_Init+0x2e8>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_GPIO_Init+0x2ec>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x202>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x1fe>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a46      	ldr	r2, [pc, #280]	; (8002138 <HAL_GPIO_Init+0x2f4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x1fa>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a45      	ldr	r2, [pc, #276]	; (800213c <HAL_GPIO_Init+0x2f8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x1f6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a44      	ldr	r2, [pc, #272]	; (8002140 <HAL_GPIO_Init+0x2fc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x1f2>
 8002032:	2304      	movs	r3, #4
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002036:	2307      	movs	r3, #7
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x204>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x204>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002046:	2300      	movs	r3, #0
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002058:	4934      	ldr	r1, [pc, #208]	; (800212c <HAL_GPIO_Init+0x2e8>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_GPIO_Init+0x300>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800208a:	4a2e      	ldr	r2, [pc, #184]	; (8002144 <HAL_GPIO_Init+0x300>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002090:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_GPIO_Init+0x300>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b4:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_GPIO_Init+0x300>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_GPIO_Init+0x300>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_GPIO_Init+0x300>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_GPIO_Init+0x300>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_GPIO_Init+0x300>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	f67f aea2 	bls.w	8001e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3724      	adds	r7, #36	; 0x24
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40013c00 	.word	0x40013c00

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f806 	bl	80021ac <HAL_GPIO_EXTI_Callback>
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e25b      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d075      	beq.n	80022ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021e2:	4ba3      	ldr	r3, [pc, #652]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d00c      	beq.n	8002208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ee:	4ba0      	ldr	r3, [pc, #640]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d112      	bne.n	8002220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fa:	4b9d      	ldr	r3, [pc, #628]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002206:	d10b      	bne.n	8002220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	4b99      	ldr	r3, [pc, #612]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d05b      	beq.n	80022cc <HAL_RCC_OscConfig+0x108>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d157      	bne.n	80022cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e236      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d106      	bne.n	8002238 <HAL_RCC_OscConfig+0x74>
 800222a:	4b91      	ldr	r3, [pc, #580]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a90      	ldr	r2, [pc, #576]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e01d      	b.n	8002274 <HAL_RCC_OscConfig+0xb0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x98>
 8002242:	4b8b      	ldr	r3, [pc, #556]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a8a      	ldr	r2, [pc, #552]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a87      	ldr	r2, [pc, #540]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0xb0>
 800225c:	4b84      	ldr	r3, [pc, #528]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a83      	ldr	r2, [pc, #524]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a80      	ldr	r2, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff fca2 	bl	8001bc4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff fc9e 	bl	8001bc4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1fb      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0xc0>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff fc8e 	bl	8001bc4 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff fc8a 	bl	8001bc4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1e7      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0xe8>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d063      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022da:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e6:	4b62      	ldr	r3, [pc, #392]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d11c      	bne.n	800232c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f2:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d116      	bne.n	800232c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x152>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1bb      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b56      	ldr	r3, [pc, #344]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4952      	ldr	r1, [pc, #328]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	e03a      	b.n	80023a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002334:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <HAL_RCC_OscConfig+0x2b0>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7ff fc43 	bl	8001bc4 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002342:	f7ff fc3f 	bl	8001bc4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e19c      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4940      	ldr	r1, [pc, #256]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_RCC_OscConfig+0x2b0>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fc22 	bl	8001bc4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fc1e 	bl	8001bc4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e17b      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d030      	beq.n	8002410 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_RCC_OscConfig+0x2b4>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7ff fc02 	bl	8001bc4 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c4:	f7ff fbfe 	bl	8001bc4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e15b      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x200>
 80023e2:	e015      	b.n	8002410 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCC_OscConfig+0x2b4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7ff fbeb 	bl	8001bc4 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f2:	f7ff fbe7 	bl	8001bc4 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e144      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a0 	beq.w	800255e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_OscConfig+0x2b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d121      	bne.n	800249e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_RCC_OscConfig+0x2b8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_RCC_OscConfig+0x2b8>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7ff fbad 	bl	8001bc4 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e011      	b.n	8002492 <HAL_RCC_OscConfig+0x2ce>
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	42470000 	.word	0x42470000
 8002478:	42470e80 	.word	0x42470e80
 800247c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7ff fba0 	bl	8001bc4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0fd      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCC_OscConfig+0x4d4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
 80024a6:	4b7d      	ldr	r3, [pc, #500]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a7c      	ldr	r2, [pc, #496]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
 80024b2:	e01c      	b.n	80024ee <HAL_RCC_OscConfig+0x32a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_OscConfig+0x312>
 80024bc:	4b77      	ldr	r3, [pc, #476]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	4a76      	ldr	r2, [pc, #472]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70
 80024c8:	4b74      	ldr	r3, [pc, #464]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a73      	ldr	r2, [pc, #460]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0x32a>
 80024d6:	4b71      	ldr	r3, [pc, #452]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a70      	ldr	r2, [pc, #448]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
 80024e2:	4b6e      	ldr	r3, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a6d      	ldr	r2, [pc, #436]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7ff fb65 	bl	8001bc4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7ff fb61 	bl	8001bc4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0bc      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <HAL_RCC_OscConfig+0x33a>
 8002520:	e014      	b.n	800254c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff fb4f 	bl	8001bc4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7ff fb4b 	bl	8001bc4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0a6      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ee      	bne.n	800252a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b52      	ldr	r3, [pc, #328]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a51      	ldr	r2, [pc, #324]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8092 	beq.w	800268c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002568:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d05c      	beq.n	800262e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d141      	bne.n	8002600 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff fb1f 	bl	8001bc4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7ff fb1b 	bl	8001bc4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e078      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259c:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	019b      	lsls	r3, r3, #6
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	3b01      	subs	r3, #1
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	061b      	lsls	r3, r3, #24
 80025cc:	4933      	ldr	r1, [pc, #204]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff faf4 	bl	8001bc4 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff faf0 	bl	8001bc4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04d      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x41c>
 80025fe:	e045      	b.n	800268c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff fadd 	bl	8001bc4 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff fad9 	bl	8001bc4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e036      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x44a>
 800262c:	e02e      	b.n	800268c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e029      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	429a      	cmp	r2, r3
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d115      	bne.n	8002688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002662:	4013      	ands	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002668:	4293      	cmp	r3, r2
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000
 800269c:	40023800 	.word	0x40023800
 80026a0:	42470060 	.word	0x42470060

080026a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0cc      	b.n	8002852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b68      	ldr	r3, [pc, #416]	; (800285c <HAL_RCC_ClockConfig+0x1b8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d90c      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0b8      	b.n	8002852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f8:	4b59      	ldr	r3, [pc, #356]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800271a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	494d      	ldr	r1, [pc, #308]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d044      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d119      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e07f      	b.n	8002852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d003      	beq.n	8002762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275e:	2b03      	cmp	r3, #3
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e06f      	b.n	8002852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e067      	b.n	8002852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4934      	ldr	r1, [pc, #208]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7ff fa16 	bl	8001bc4 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7ff fa12 	bl	8001bc4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e04f      	b.n	8002852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d20c      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e032      	b.n	8002852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4916      	ldr	r1, [pc, #88]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	490e      	ldr	r1, [pc, #56]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800282a:	f000 f821 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 800282e:	4601      	mov	r1, r0
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	fa21 f303 	lsr.w	r3, r1, r3
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f976 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023c00 	.word	0x40023c00
 8002860:	40023800 	.word	0x40023800
 8002864:	08005914 	.word	0x08005914
 8002868:	2000000c 	.word	0x2000000c
 800286c:	20000004 	.word	0x20000004

08002870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002886:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d007      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x32>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d008      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x38>
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 808d 	bne.w	80029b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800289e:	60bb      	str	r3, [r7, #8]
       break;
 80028a0:	e08c      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a2:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028a4:	60bb      	str	r3, [r7, #8]
      break;
 80028a6:	e089      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028a8:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b2:	4b45      	ldr	r3, [pc, #276]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	ea03 0501 	and.w	r5, r3, r1
 80028d4:	ea04 0602 	and.w	r6, r4, r2
 80028d8:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028da:	fb02 f106 	mul.w	r1, r2, r6
 80028de:	2200      	movs	r2, #0
 80028e0:	fb02 f205 	mul.w	r2, r2, r5
 80028e4:	440a      	add	r2, r1
 80028e6:	493a      	ldr	r1, [pc, #232]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028e8:	fba5 0101 	umull	r0, r1, r5, r1
 80028ec:	1853      	adds	r3, r2, r1
 80028ee:	4619      	mov	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f04f 0400 	mov.w	r4, #0
 80028f6:	461a      	mov	r2, r3
 80028f8:	4623      	mov	r3, r4
 80028fa:	f7fd fcc1 	bl	8000280 <__aeabi_uldivmod>
 80028fe:	4603      	mov	r3, r0
 8002900:	460c      	mov	r4, r1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e049      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	f04f 0400 	mov.w	r4, #0
 8002910:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	ea03 0501 	and.w	r5, r3, r1
 800291c:	ea04 0602 	and.w	r6, r4, r2
 8002920:	4629      	mov	r1, r5
 8002922:	4632      	mov	r2, r6
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	f04f 0400 	mov.w	r4, #0
 800292c:	0154      	lsls	r4, r2, #5
 800292e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002932:	014b      	lsls	r3, r1, #5
 8002934:	4619      	mov	r1, r3
 8002936:	4622      	mov	r2, r4
 8002938:	1b49      	subs	r1, r1, r5
 800293a:	eb62 0206 	sbc.w	r2, r2, r6
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	f04f 0400 	mov.w	r4, #0
 8002946:	0194      	lsls	r4, r2, #6
 8002948:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800294c:	018b      	lsls	r3, r1, #6
 800294e:	1a5b      	subs	r3, r3, r1
 8002950:	eb64 0402 	sbc.w	r4, r4, r2
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	00e2      	lsls	r2, r4, #3
 800295e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002962:	00d9      	lsls	r1, r3, #3
 8002964:	460b      	mov	r3, r1
 8002966:	4614      	mov	r4, r2
 8002968:	195b      	adds	r3, r3, r5
 800296a:	eb44 0406 	adc.w	r4, r4, r6
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	02a2      	lsls	r2, r4, #10
 8002978:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800297c:	0299      	lsls	r1, r3, #10
 800297e:	460b      	mov	r3, r1
 8002980:	4614      	mov	r4, r2
 8002982:	4618      	mov	r0, r3
 8002984:	4621      	mov	r1, r4
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	461a      	mov	r2, r3
 800298e:	4623      	mov	r3, r4
 8002990:	f7fd fc76 	bl	8000280 <__aeabi_uldivmod>
 8002994:	4603      	mov	r3, r0
 8002996:	460c      	mov	r4, r1
 8002998:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	3301      	adds	r3, #1
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	60bb      	str	r3, [r7, #8]
      break;
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029b8:	60bb      	str	r3, [r7, #8]
      break;
 80029ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029bc:	68bb      	ldr	r3, [r7, #8]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	017d7840 	.word	0x017d7840

080029d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	2000000c 	.word	0x2000000c

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029f0:	f7ff fff0 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 80029f4:	4601      	mov	r1, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	0a9b      	lsrs	r3, r3, #10
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08005924 	.word	0x08005924

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a18:	f7ff ffdc 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4601      	mov	r1, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0b5b      	lsrs	r3, r3, #13
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08005924 	.word	0x08005924

08002a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e056      	b.n	8002afc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f001 fda7 	bl	80045bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	ea42 0103 	orr.w	r1, r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	0c1b      	lsrs	r3, r3, #16
 8002acc:	f003 0104 	and.w	r1, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	; 0x30
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b12:	2301      	movs	r3, #1
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x26>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e18a      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x33c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b32:	f7ff f847 	bl	8001bc4 <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d00f      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x70>
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5a:	d107      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d103      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x68>
 8002b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d003      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b72:	e15b      	b.n	8002e2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_SPI_TransmitReceive+0x82>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_SPI_TransmitReceive+0x82>
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b8c:	e14e      	b.n	8002e2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d003      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	887a      	ldrh	r2, [r7, #2]
 8002bca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d007      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bfe:	d178      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_SPI_TransmitReceive+0x10a>
 8002c08:	8b7b      	ldrh	r3, [r7, #26]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d166      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c32:	e053      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d11b      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x176>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d016      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x176>
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d113      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	881a      	ldrh	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	1c9a      	adds	r2, r3, #2
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d119      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x1b8>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d014      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	1c9a      	adds	r2, r3, #2
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cbc:	f7fe ff82 	bl	8001bc4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d807      	bhi.n	8002cdc <HAL_SPI_TransmitReceive+0x1d8>
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d003      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cda:	e0a7      	b.n	8002e2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1a6      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x130>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1a1      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x130>
 8002cf0:	e07c      	b.n	8002dec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0x1fc>
 8002cfa:	8b7b      	ldrh	r3, [r7, #26]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d16b      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d26:	e057      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d11c      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x26c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x26c>
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d114      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	7812      	ldrb	r2, [r2, #0]
 8002d52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d119      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x2ae>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d014      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dae:	2301      	movs	r3, #1
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002db2:	f7fe ff07 	bl	8001bc4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d803      	bhi.n	8002dca <HAL_SPI_TransmitReceive+0x2c6>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d102      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0x2cc>
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dd6:	e029      	b.n	8002e2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1a2      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x224>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d19d      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f893 	bl	8002f1c <SPI_EndRxTxTransaction>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e08:	e010      	b.n	8002e2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	e000      	b.n	8002e2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3730      	adds	r7, #48	; 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e58:	e04c      	b.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d048      	beq.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e62:	f7fe feaf 	bl	8001bc4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d902      	bls.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d13d      	bne.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e90:	d111      	bne.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9a:	d004      	beq.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea4:	d107      	bne.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d10f      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ede:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e00f      	b.n	8002f14 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d1a3      	bne.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <SPI_EndRxTxTransaction+0x7c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <SPI_EndRxTxTransaction+0x80>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0d5b      	lsrs	r3, r3, #21
 8002f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f46:	d112      	bne.n	8002f6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff ff78 	bl	8002e48 <SPI_WaitFlagStateUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e00f      	b.n	8002f8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d0f2      	beq.n	8002f6e <SPI_EndRxTxTransaction+0x52>
 8002f88:	e000      	b.n	8002f8c <SPI_EndRxTxTransaction+0x70>
        break;
 8002f8a:	bf00      	nop
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000000c 	.word	0x2000000c
 8002f9c:	165e9f81 	.word	0x165e9f81

08002fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e01d      	b.n	8002fee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f001 fb60 	bl	800468c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f000 f9fa 	bl	80033d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d122      	bne.n	8003052 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d11b      	bne.n	8003052 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0202 	mvn.w	r2, #2
 8003022:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f9af 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 800303e:	e005      	b.n	800304c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f9a1 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9b2 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d122      	bne.n	80030a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d11b      	bne.n	80030a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0204 	mvn.w	r2, #4
 8003076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f985 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 8003092:	e005      	b.n	80030a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f977 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f988 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d122      	bne.n	80030fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11b      	bne.n	80030fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0208 	mvn.w	r2, #8
 80030ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2204      	movs	r2, #4
 80030d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f95b 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 80030e6:	e005      	b.n	80030f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f94d 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f95e 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d122      	bne.n	800314e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d11b      	bne.n	800314e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0210 	mvn.w	r2, #16
 800311e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2208      	movs	r2, #8
 8003124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f931 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 800313a:	e005      	b.n	8003148 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f923 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f934 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10e      	bne.n	800317a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0201 	mvn.w	r2, #1
 8003172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8fd 	bl	8003374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d10e      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 faab 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d10e      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f8f9 	bl	80033c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d10e      	bne.n	80031fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0220 	mvn.w	r2, #32
 80031f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fa75 	bl	80036e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_TIM_ConfigClockSource+0x18>
 800321a:	2302      	movs	r3, #2
 800321c:	e0a6      	b.n	800336c <HAL_TIM_ConfigClockSource+0x166>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800323c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003244:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d067      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x120>
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d80b      	bhi.n	8003272 <HAL_TIM_ConfigClockSource+0x6c>
 800325a:	2b10      	cmp	r3, #16
 800325c:	d073      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x140>
 800325e:	2b10      	cmp	r3, #16
 8003260:	d802      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x62>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d06f      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003266:	e078      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003268:	2b20      	cmp	r3, #32
 800326a:	d06c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x140>
 800326c:	2b30      	cmp	r3, #48	; 0x30
 800326e:	d06a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003270:	e073      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003272:	2b70      	cmp	r3, #112	; 0x70
 8003274:	d00d      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x8c>
 8003276:	2b70      	cmp	r3, #112	; 0x70
 8003278:	d804      	bhi.n	8003284 <HAL_TIM_ConfigClockSource+0x7e>
 800327a:	2b50      	cmp	r3, #80	; 0x50
 800327c:	d033      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xe0>
 800327e:	2b60      	cmp	r3, #96	; 0x60
 8003280:	d041      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003282:	e06a      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003288:	d066      	beq.n	8003358 <HAL_TIM_ConfigClockSource+0x152>
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328e:	d017      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003290:	e063      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f000 f993 	bl	80035cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	609a      	str	r2, [r3, #8]
      break;
 80032be:	e04c      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f000 f97c 	bl	80035cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e2:	609a      	str	r2, [r3, #8]
      break;
 80032e4:	e039      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 f8f0 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2150      	movs	r1, #80	; 0x50
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f949 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003304:	e029      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f000 f90f 	bl	8003536 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2160      	movs	r1, #96	; 0x60
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f939 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003324:	e019      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	461a      	mov	r2, r3
 8003334:	f000 f8d0 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f929 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003344:	e009      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 f920 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003356:	e000      	b.n	800335a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003358:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a34      	ldr	r2, [pc, #208]	; (80034bc <TIM_Base_SetConfig+0xe4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00f      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d00b      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <TIM_Base_SetConfig+0xe8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <TIM_Base_SetConfig+0xec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <TIM_Base_SetConfig+0xf0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <TIM_Base_SetConfig+0xe4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <TIM_Base_SetConfig+0xe8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <TIM_Base_SetConfig+0xec>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <TIM_Base_SetConfig+0xf0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <TIM_Base_SetConfig+0xf4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <TIM_Base_SetConfig+0xf8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <TIM_Base_SetConfig+0xfc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a08      	ldr	r2, [pc, #32]	; (80034bc <TIM_Base_SetConfig+0xe4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d103      	bne.n	80034a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	615a      	str	r2, [r3, #20]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800

080034d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 030a 	bic.w	r3, r3, #10
 8003514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0210 	bic.w	r2, r3, #16
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	031b      	lsls	r3, r3, #12
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f043 0307 	orr.w	r3, r3, #7
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	021a      	lsls	r2, r3, #8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003620:	2302      	movs	r3, #2
 8003622:	e050      	b.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d013      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10c      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40014000 	.word	0x40014000

080036e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e03f      	b.n	80037a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 ffce 	bl	80046d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f90b 	bl	8003970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b088      	sub	sp, #32
 80037ae:	af02      	add	r7, sp, #8
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	f040 8083 	bne.w	80038d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Transmit+0x2e>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e07b      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Transmit+0x40>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e074      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2221      	movs	r2, #33	; 0x21
 80037fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003800:	f7fe f9e0 	bl	8001bc4 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800381a:	e042      	b.n	80038a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	d122      	bne.n	800387a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f84c 	bl	80038dc <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e042      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003860:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3302      	adds	r3, #2
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	e017      	b.n	80038a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3301      	adds	r3, #1
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e013      	b.n	80038a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f829 	bl	80038dc <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e01f      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	60ba      	str	r2, [r7, #8]
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1b7      	bne.n	800381c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	2140      	movs	r1, #64	; 0x40
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f810 	bl	80038dc <UART_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e006      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ec:	e02c      	b.n	8003948 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d028      	beq.n	8003948 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0x30>
 80038fc:	f7fe f962 	bl	8001bc4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	d21d      	bcs.n	8003948 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800391a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e00f      	b.n	8003968 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	429a      	cmp	r2, r3
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	429a      	cmp	r2, r3
 8003964:	d0c3      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039b2:	f023 030c 	bic.w	r3, r3, #12
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	430b      	orrs	r3, r1
 80039be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039de:	f040 818b 	bne.w	8003cf8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4ac1      	ldr	r2, [pc, #772]	; (8003cec <UART_SetConfig+0x37c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d005      	beq.n	80039f8 <UART_SetConfig+0x88>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4abf      	ldr	r2, [pc, #764]	; (8003cf0 <UART_SetConfig+0x380>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f040 80bd 	bne.w	8003b72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7ff f80c 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 80039fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	461d      	mov	r5, r3
 8003a02:	f04f 0600 	mov.w	r6, #0
 8003a06:	46a8      	mov	r8, r5
 8003a08:	46b1      	mov	r9, r6
 8003a0a:	eb18 0308 	adds.w	r3, r8, r8
 8003a0e:	eb49 0409 	adc.w	r4, r9, r9
 8003a12:	4698      	mov	r8, r3
 8003a14:	46a1      	mov	r9, r4
 8003a16:	eb18 0805 	adds.w	r8, r8, r5
 8003a1a:	eb49 0906 	adc.w	r9, r9, r6
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a32:	4688      	mov	r8, r1
 8003a34:	4691      	mov	r9, r2
 8003a36:	eb18 0005 	adds.w	r0, r8, r5
 8003a3a:	eb49 0106 	adc.w	r1, r9, r6
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	461d      	mov	r5, r3
 8003a44:	f04f 0600 	mov.w	r6, #0
 8003a48:	196b      	adds	r3, r5, r5
 8003a4a:	eb46 0406 	adc.w	r4, r6, r6
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4623      	mov	r3, r4
 8003a52:	f7fc fc15 	bl	8000280 <__aeabi_uldivmod>
 8003a56:	4603      	mov	r3, r0
 8003a58:	460c      	mov	r4, r1
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4ba5      	ldr	r3, [pc, #660]	; (8003cf4 <UART_SetConfig+0x384>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	f04f 0600 	mov.w	r6, #0
 8003a70:	46a9      	mov	r9, r5
 8003a72:	46b2      	mov	sl, r6
 8003a74:	eb19 0309 	adds.w	r3, r9, r9
 8003a78:	eb4a 040a 	adc.w	r4, sl, sl
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	46a2      	mov	sl, r4
 8003a80:	eb19 0905 	adds.w	r9, r9, r5
 8003a84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a9c:	4689      	mov	r9, r1
 8003a9e:	4692      	mov	sl, r2
 8003aa0:	eb19 0005 	adds.w	r0, r9, r5
 8003aa4:	eb4a 0106 	adc.w	r1, sl, r6
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	461d      	mov	r5, r3
 8003aae:	f04f 0600 	mov.w	r6, #0
 8003ab2:	196b      	adds	r3, r5, r5
 8003ab4:	eb46 0406 	adc.w	r4, r6, r6
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7fc fbe0 	bl	8000280 <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b8b      	ldr	r3, [pc, #556]	; (8003cf4 <UART_SetConfig+0x384>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2164      	movs	r1, #100	; 0x64
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	3332      	adds	r3, #50	; 0x32
 8003ada:	4a86      	ldr	r2, [pc, #536]	; (8003cf4 <UART_SetConfig+0x384>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae8:	4498      	add	r8, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	461d      	mov	r5, r3
 8003aee:	f04f 0600 	mov.w	r6, #0
 8003af2:	46a9      	mov	r9, r5
 8003af4:	46b2      	mov	sl, r6
 8003af6:	eb19 0309 	adds.w	r3, r9, r9
 8003afa:	eb4a 040a 	adc.w	r4, sl, sl
 8003afe:	4699      	mov	r9, r3
 8003b00:	46a2      	mov	sl, r4
 8003b02:	eb19 0905 	adds.w	r9, r9, r5
 8003b06:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b1e:	4689      	mov	r9, r1
 8003b20:	4692      	mov	sl, r2
 8003b22:	eb19 0005 	adds.w	r0, r9, r5
 8003b26:	eb4a 0106 	adc.w	r1, sl, r6
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	461d      	mov	r5, r3
 8003b30:	f04f 0600 	mov.w	r6, #0
 8003b34:	196b      	adds	r3, r5, r5
 8003b36:	eb46 0406 	adc.w	r4, r6, r6
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	f7fc fb9f 	bl	8000280 <__aeabi_uldivmod>
 8003b42:	4603      	mov	r3, r0
 8003b44:	460c      	mov	r4, r1
 8003b46:	461a      	mov	r2, r3
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <UART_SetConfig+0x384>)
 8003b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2164      	movs	r1, #100	; 0x64
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	3332      	adds	r3, #50	; 0x32
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <UART_SetConfig+0x384>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 0207 	and.w	r2, r3, #7
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4442      	add	r2, r8
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	e26f      	b.n	8004052 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b72:	f7fe ff3b 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003b76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	f04f 0600 	mov.w	r6, #0
 8003b80:	46a8      	mov	r8, r5
 8003b82:	46b1      	mov	r9, r6
 8003b84:	eb18 0308 	adds.w	r3, r8, r8
 8003b88:	eb49 0409 	adc.w	r4, r9, r9
 8003b8c:	4698      	mov	r8, r3
 8003b8e:	46a1      	mov	r9, r4
 8003b90:	eb18 0805 	adds.w	r8, r8, r5
 8003b94:	eb49 0906 	adc.w	r9, r9, r6
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ba4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bac:	4688      	mov	r8, r1
 8003bae:	4691      	mov	r9, r2
 8003bb0:	eb18 0005 	adds.w	r0, r8, r5
 8003bb4:	eb49 0106 	adc.w	r1, r9, r6
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	461d      	mov	r5, r3
 8003bbe:	f04f 0600 	mov.w	r6, #0
 8003bc2:	196b      	adds	r3, r5, r5
 8003bc4:	eb46 0406 	adc.w	r4, r6, r6
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	f7fc fb58 	bl	8000280 <__aeabi_uldivmod>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <UART_SetConfig+0x384>)
 8003bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	461d      	mov	r5, r3
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	46a9      	mov	r9, r5
 8003bec:	46b2      	mov	sl, r6
 8003bee:	eb19 0309 	adds.w	r3, r9, r9
 8003bf2:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf6:	4699      	mov	r9, r3
 8003bf8:	46a2      	mov	sl, r4
 8003bfa:	eb19 0905 	adds.w	r9, r9, r5
 8003bfe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c16:	4689      	mov	r9, r1
 8003c18:	4692      	mov	sl, r2
 8003c1a:	eb19 0005 	adds.w	r0, r9, r5
 8003c1e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	461d      	mov	r5, r3
 8003c28:	f04f 0600 	mov.w	r6, #0
 8003c2c:	196b      	adds	r3, r5, r5
 8003c2e:	eb46 0406 	adc.w	r4, r6, r6
 8003c32:	461a      	mov	r2, r3
 8003c34:	4623      	mov	r3, r4
 8003c36:	f7fc fb23 	bl	8000280 <__aeabi_uldivmod>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <UART_SetConfig+0x384>)
 8003c42:	fba3 1302 	umull	r1, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2164      	movs	r1, #100	; 0x64
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	3332      	adds	r3, #50	; 0x32
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <UART_SetConfig+0x384>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c62:	4498      	add	r8, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	461d      	mov	r5, r3
 8003c68:	f04f 0600 	mov.w	r6, #0
 8003c6c:	46a9      	mov	r9, r5
 8003c6e:	46b2      	mov	sl, r6
 8003c70:	eb19 0309 	adds.w	r3, r9, r9
 8003c74:	eb4a 040a 	adc.w	r4, sl, sl
 8003c78:	4699      	mov	r9, r3
 8003c7a:	46a2      	mov	sl, r4
 8003c7c:	eb19 0905 	adds.w	r9, r9, r5
 8003c80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c98:	4689      	mov	r9, r1
 8003c9a:	4692      	mov	sl, r2
 8003c9c:	eb19 0005 	adds.w	r0, r9, r5
 8003ca0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	461d      	mov	r5, r3
 8003caa:	f04f 0600 	mov.w	r6, #0
 8003cae:	196b      	adds	r3, r5, r5
 8003cb0:	eb46 0406 	adc.w	r4, r6, r6
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	f7fc fae2 	bl	8000280 <__aeabi_uldivmod>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <UART_SetConfig+0x384>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	; 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <UART_SetConfig+0x384>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4442      	add	r2, r8
 8003ce8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cea:	e1b2      	b.n	8004052 <UART_SetConfig+0x6e2>
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40011400 	.word	0x40011400
 8003cf4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4ad7      	ldr	r2, [pc, #860]	; (800405c <UART_SetConfig+0x6ec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d005      	beq.n	8003d0e <UART_SetConfig+0x39e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4ad6      	ldr	r2, [pc, #856]	; (8004060 <UART_SetConfig+0x6f0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	f040 80d1 	bne.w	8003eb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d0e:	f7fe fe81 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003d12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	469a      	mov	sl, r3
 8003d18:	f04f 0b00 	mov.w	fp, #0
 8003d1c:	46d0      	mov	r8, sl
 8003d1e:	46d9      	mov	r9, fp
 8003d20:	eb18 0308 	adds.w	r3, r8, r8
 8003d24:	eb49 0409 	adc.w	r4, r9, r9
 8003d28:	4698      	mov	r8, r3
 8003d2a:	46a1      	mov	r9, r4
 8003d2c:	eb18 080a 	adds.w	r8, r8, sl
 8003d30:	eb49 090b 	adc.w	r9, r9, fp
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d48:	4688      	mov	r8, r1
 8003d4a:	4691      	mov	r9, r2
 8003d4c:	eb1a 0508 	adds.w	r5, sl, r8
 8003d50:	eb4b 0609 	adc.w	r6, fp, r9
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	f04f 0400 	mov.w	r4, #0
 8003d66:	0094      	lsls	r4, r2, #2
 8003d68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4623      	mov	r3, r4
 8003d72:	4628      	mov	r0, r5
 8003d74:	4631      	mov	r1, r6
 8003d76:	f7fc fa83 	bl	8000280 <__aeabi_uldivmod>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4bb8      	ldr	r3, [pc, #736]	; (8004064 <UART_SetConfig+0x6f4>)
 8003d82:	fba3 2302 	umull	r2, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	469b      	mov	fp, r3
 8003d90:	f04f 0c00 	mov.w	ip, #0
 8003d94:	46d9      	mov	r9, fp
 8003d96:	46e2      	mov	sl, ip
 8003d98:	eb19 0309 	adds.w	r3, r9, r9
 8003d9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003da0:	4699      	mov	r9, r3
 8003da2:	46a2      	mov	sl, r4
 8003da4:	eb19 090b 	adds.w	r9, r9, fp
 8003da8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc0:	4689      	mov	r9, r1
 8003dc2:	4692      	mov	sl, r2
 8003dc4:	eb1b 0509 	adds.w	r5, fp, r9
 8003dc8:	eb4c 060a 	adc.w	r6, ip, sl
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	f04f 0400 	mov.w	r4, #0
 8003dde:	0094      	lsls	r4, r2, #2
 8003de0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003de4:	008b      	lsls	r3, r1, #2
 8003de6:	461a      	mov	r2, r3
 8003de8:	4623      	mov	r3, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	4631      	mov	r1, r6
 8003dee:	f7fc fa47 	bl	8000280 <__aeabi_uldivmod>
 8003df2:	4603      	mov	r3, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b9a      	ldr	r3, [pc, #616]	; (8004064 <UART_SetConfig+0x6f4>)
 8003dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2164      	movs	r1, #100	; 0x64
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	3332      	adds	r3, #50	; 0x32
 8003e0c:	4a95      	ldr	r2, [pc, #596]	; (8004064 <UART_SetConfig+0x6f4>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e18:	4498      	add	r8, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	469b      	mov	fp, r3
 8003e1e:	f04f 0c00 	mov.w	ip, #0
 8003e22:	46d9      	mov	r9, fp
 8003e24:	46e2      	mov	sl, ip
 8003e26:	eb19 0309 	adds.w	r3, r9, r9
 8003e2a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e2e:	4699      	mov	r9, r3
 8003e30:	46a2      	mov	sl, r4
 8003e32:	eb19 090b 	adds.w	r9, r9, fp
 8003e36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e4e:	4689      	mov	r9, r1
 8003e50:	4692      	mov	sl, r2
 8003e52:	eb1b 0509 	adds.w	r5, fp, r9
 8003e56:	eb4c 060a 	adc.w	r6, ip, sl
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	f04f 0400 	mov.w	r4, #0
 8003e6c:	0094      	lsls	r4, r2, #2
 8003e6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e72:	008b      	lsls	r3, r1, #2
 8003e74:	461a      	mov	r2, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	4628      	mov	r0, r5
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	f7fc fa00 	bl	8000280 <__aeabi_uldivmod>
 8003e80:	4603      	mov	r3, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b77      	ldr	r3, [pc, #476]	; (8004064 <UART_SetConfig+0x6f4>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	2164      	movs	r1, #100	; 0x64
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	3332      	adds	r3, #50	; 0x32
 8003e9a:	4a72      	ldr	r2, [pc, #456]	; (8004064 <UART_SetConfig+0x6f4>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	f003 020f 	and.w	r2, r3, #15
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4442      	add	r2, r8
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	e0d0      	b.n	8004052 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7fe fd9c 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003eb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	469a      	mov	sl, r3
 8003eba:	f04f 0b00 	mov.w	fp, #0
 8003ebe:	46d0      	mov	r8, sl
 8003ec0:	46d9      	mov	r9, fp
 8003ec2:	eb18 0308 	adds.w	r3, r8, r8
 8003ec6:	eb49 0409 	adc.w	r4, r9, r9
 8003eca:	4698      	mov	r8, r3
 8003ecc:	46a1      	mov	r9, r4
 8003ece:	eb18 080a 	adds.w	r8, r8, sl
 8003ed2:	eb49 090b 	adc.w	r9, r9, fp
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ee2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ee6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eea:	4688      	mov	r8, r1
 8003eec:	4691      	mov	r9, r2
 8003eee:	eb1a 0508 	adds.w	r5, sl, r8
 8003ef2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4619      	mov	r1, r3
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	f04f 0400 	mov.w	r4, #0
 8003f08:	0094      	lsls	r4, r2, #2
 8003f0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f0e:	008b      	lsls	r3, r1, #2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	4631      	mov	r1, r6
 8003f18:	f7fc f9b2 	bl	8000280 <__aeabi_uldivmod>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b50      	ldr	r3, [pc, #320]	; (8004064 <UART_SetConfig+0x6f4>)
 8003f24:	fba3 2302 	umull	r2, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	469b      	mov	fp, r3
 8003f32:	f04f 0c00 	mov.w	ip, #0
 8003f36:	46d9      	mov	r9, fp
 8003f38:	46e2      	mov	sl, ip
 8003f3a:	eb19 0309 	adds.w	r3, r9, r9
 8003f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f42:	4699      	mov	r9, r3
 8003f44:	46a2      	mov	sl, r4
 8003f46:	eb19 090b 	adds.w	r9, r9, fp
 8003f4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f62:	4689      	mov	r9, r1
 8003f64:	4692      	mov	sl, r2
 8003f66:	eb1b 0509 	adds.w	r5, fp, r9
 8003f6a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f04f 0400 	mov.w	r4, #0
 8003f80:	0094      	lsls	r4, r2, #2
 8003f82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f86:	008b      	lsls	r3, r1, #2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	4631      	mov	r1, r6
 8003f90:	f7fc f976 	bl	8000280 <__aeabi_uldivmod>
 8003f94:	4603      	mov	r3, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b32      	ldr	r3, [pc, #200]	; (8004064 <UART_SetConfig+0x6f4>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	2164      	movs	r1, #100	; 0x64
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	3332      	adds	r3, #50	; 0x32
 8003fae:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <UART_SetConfig+0x6f4>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fba:	4498      	add	r8, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	469b      	mov	fp, r3
 8003fc0:	f04f 0c00 	mov.w	ip, #0
 8003fc4:	46d9      	mov	r9, fp
 8003fc6:	46e2      	mov	sl, ip
 8003fc8:	eb19 0309 	adds.w	r3, r9, r9
 8003fcc:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	46a2      	mov	sl, r4
 8003fd4:	eb19 090b 	adds.w	r9, r9, fp
 8003fd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	4692      	mov	sl, r2
 8003ff4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ff8:	eb4c 060a 	adc.w	r6, ip, sl
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	0094      	lsls	r4, r2, #2
 8004010:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004014:	008b      	lsls	r3, r1, #2
 8004016:	461a      	mov	r2, r3
 8004018:	4623      	mov	r3, r4
 800401a:	4628      	mov	r0, r5
 800401c:	4631      	mov	r1, r6
 800401e:	f7fc f92f 	bl	8000280 <__aeabi_uldivmod>
 8004022:	4603      	mov	r3, r0
 8004024:	460c      	mov	r4, r1
 8004026:	461a      	mov	r2, r3
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <UART_SetConfig+0x6f4>)
 800402a:	fba3 1302 	umull	r1, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2164      	movs	r1, #100	; 0x64
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	3332      	adds	r3, #50	; 0x32
 800403c:	4a09      	ldr	r2, [pc, #36]	; (8004064 <UART_SetConfig+0x6f4>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4442      	add	r2, r8
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	e7ff      	b.n	8004052 <UART_SetConfig+0x6e2>
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405c:	40011000 	.word	0x40011000
 8004060:	40011400 	.word	0x40011400
 8004064:	51eb851f 	.word	0x51eb851f

08004068 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	b29a      	uxth	r2, r3
 8004078:	230a      	movs	r3, #10
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	4803      	ldr	r0, [pc, #12]	; (800408c <_write+0x24>)
 800407e:	f7ff fb94 	bl	80037aa <HAL_UART_Transmit>

	return len;
 8004082:	687b      	ldr	r3, [r7, #4]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200001c0 	.word	0x200001c0

08004090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	b094      	sub	sp, #80	; 0x50
 8004094:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004096:	f7fd fd35 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800409a:	f000 f8c1 	bl	8004220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800409e:	f000 f9d5 	bl	800444c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80040a2:	f000 f9a9 	bl	80043f8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80040a6:	f000 f925 	bl	80042f4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80040aa:	f000 f959 	bl	8004360 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SpiHandle = hspi1;
 80040ae:	4a50      	ldr	r2, [pc, #320]	; (80041f0 <main+0x160>)
 80040b0:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <main+0x164>)
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	2358      	movs	r3, #88	; 0x58
 80040b8:	461a      	mov	r2, r3
 80040ba:	f000 fc81 	bl	80049c0 <memcpy>

     /* reset procedure of S2-LP chip */

     /* Puts high the GPIO connected to shutdown pin */
     HAL_GPIO_WritePin(GPIOA, M2S_GPIO_SDN_Pin, GPIO_PIN_SET);
 80040be:	2201      	movs	r2, #1
 80040c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c4:	484c      	ldr	r0, [pc, #304]	; (80041f8 <main+0x168>)
 80040c6:	f7fe f83f 	bl	8002148 <HAL_GPIO_WritePin>
     /* Puts low the GPIO connected to shutdown pin */
     HAL_GPIO_WritePin(GPIOA, M2S_GPIO_SDN_Pin, GPIO_PIN_RESET);
 80040ca:	2200      	movs	r2, #0
 80040cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040d0:	4849      	ldr	r0, [pc, #292]	; (80041f8 <main+0x168>)
 80040d2:	f7fe f839 	bl	8002148 <HAL_GPIO_WritePin>
     /* Delay to allow the circuit POR, about 700 us */
     HAL_Delay(1) ;
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7fd fd80 	bl	8001bdc <HAL_Delay>

     /* set frequency of Xtal (50MHz) */
     S2LPRadioSetXtalFrequency(50000000);
 80040dc:	4847      	ldr	r0, [pc, #284]	; (80041fc <main+0x16c>)
 80040de:	f7fd fb9f 	bl	8001820 <S2LPRadioSetXtalFrequency>

     /* initialize Radio Settings */
       /* S2LP Radio config */

     SRadioInit xRadioInit = {
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <main+0x170>)
 80040e4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80040e8:	461d      	mov	r5, r3
 80040ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	6023      	str	r3, [r4, #0]
     40000, /* data rate */
     20000, /* frequency deviation */
     100000 /* channel filter */
   };

   PktBasicInit xBasicInit={
 80040f2:	4b44      	ldr	r3, [pc, #272]	; (8004204 <main+0x174>)
 80040f4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80040f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     S_DISABLE, /* EN_ADDRESS, */
     S_DISABLE, /* EN_FEC, */
     S_ENABLE /* EN_WHITENING */
   };

   SGpioInit xGpioIRQ={
 80040fe:	4a42      	ldr	r2, [pc, #264]	; (8004208 <main+0x178>)
 8004100:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4611      	mov	r1, r2
 8004108:	8019      	strh	r1, [r3, #0]
 800410a:	3302      	adds	r3, #2
 800410c:	0c12      	lsrs	r2, r2, #16
 800410e:	701a      	strb	r2, [r3, #0]
   };

   /**
   * @brief Tx buffer declaration: data to transmit
   */
     uint8_t vectcTxBuff[BUFSIZE]= "Trainer forward";  /* Put your ID i.e. name, up to BUFSIZE long */
 8004110:	4b3e      	ldr	r3, [pc, #248]	; (800420c <main+0x17c>)
 8004112:	f107 0408 	add.w	r4, r7, #8
 8004116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800411c:	f107 0318 	add.w	r3, r7, #24
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]

     /* Rx & Tx common radio initialization */
     S2LPRadioInit(&xRadioInit);
 800412a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd f964 	bl	80013fc <S2LPRadioInit>

       /* S2LP Packet config */
     S2LPPktBasicInit(&xBasicInit);
 8004134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc fb11 	bl	8000760 <S2LPPktBasicInit>

     uint8_t tmpBuffer[4];
     S2LPSpiReadRegisters(SYNT3_ADDR, 4, tmpBuffer);
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	461a      	mov	r2, r3
 8004142:	2104      	movs	r1, #4
 8004144:	2005      	movs	r0, #5
 8004146:	f7fd fbef 	bl	8001928 <RadioSpiReadRegisters>

       /* payload length config */
     S2LPPktBasicSetPayloadLength(BUFSIZE);
 800414a:	2020      	movs	r0, #32
 800414c:	f7fc fc04 	bl	8000958 <S2LPPktBasicSetPayloadLength>

     /* S2LP IRQ config */
     S2LPGpioInit(&xGpioIRQ);
 8004150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc fa2b 	bl	80005b0 <S2LPGpioInit>

     /* S2LP IRQs enable */
     S2LPGpioIrqDeInit(NULL);
 800415a:	2000      	movs	r0, #0
 800415c:	f7fc fa4a 	bl	80005f4 <S2LPGpioIrqDeInit>
     S2LPGpioIrqConfig(TX_DATA_SENT , S_ENABLE);
 8004160:	2101      	movs	r1, #1
 8004162:	2004      	movs	r0, #4
 8004164:	f7fc fa6c 	bl	8000640 <S2LPGpioIrqConfig>
	//S2LPGpioIrqConfig(RX_DATA_DISC,S_ENABLE);
     S2LPGpioIrqConfig(RX_DATA_READY,S_ENABLE);
 8004168:	2101      	movs	r1, #1
 800416a:	2001      	movs	r0, #1
 800416c:	f7fc fa68 	bl	8000640 <S2LPGpioIrqConfig>

     /* flush the TX & RX FIFO */
     S2LPCmdStrobeFlushRxFifo();
 8004170:	2071      	movs	r0, #113	; 0x71
 8004172:	f7fc fa05 	bl	8000580 <S2LPCmdStrobeCommand>
     S2LPCmdStrobeFlushTxFifo();
 8004176:	2072      	movs	r0, #114	; 0x72
 8004178:	f7fc fa02 	bl	8000580 <S2LPCmdStrobeCommand>

     /* start Rx by default */
     S2LPCmdStrobeRx();
 800417c:	2390      	movs	r3, #144	; 0x90
 800417e:	70fb      	strb	r3, [r7, #3]
 8004180:	1cfb      	adds	r3, r7, #3
 8004182:	461a      	mov	r2, r3
 8004184:	2101      	movs	r1, #1
 8004186:	2076      	movs	r0, #118	; 0x76
 8004188:	f7fd fb72 	bl	8001870 <RadioSpiWriteRegisters>
 800418c:	2061      	movs	r0, #97	; 0x61
 800418e:	f7fc f9f7 	bl	8000580 <S2LPCmdStrobeCommand>

     printf("\n\rApplication started\n\r");
 8004192:	481f      	ldr	r0, [pc, #124]	; (8004210 <main+0x180>)
 8004194:	f000 fc28 	bl	80049e8 <iprintf>
     printf("\n\rPress user button to TX...\n\r");
 8004198:	481e      	ldr	r0, [pc, #120]	; (8004214 <main+0x184>)
 800419a:	f000 fc25 	bl	80049e8 <iprintf>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (start_Tx!=RESET)
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <main+0x188>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0fa      	beq.n	800419e <main+0x10e>
	{
	  /* prepare transmission */
	  /* abort continuous Reception first */
	  S2LPCmdStrobeSabort();
 80041a8:	2067      	movs	r0, #103	; 0x67
 80041aa:	f7fc f9e9 	bl	8000580 <S2LPCmdStrobeCommand>

	  /* add short delay to ensure stable S2-LP stable before transmission */
	  HAL_Delay(1);
 80041ae:	2001      	movs	r0, #1
 80041b0:	f7fd fd14 	bl	8001bdc <HAL_Delay>

	  /* fit the TX FIFO */
	  S2LPCmdStrobeFlushTxFifo();
 80041b4:	2072      	movs	r0, #114	; 0x72
 80041b6:	f7fc f9e3 	bl	8000580 <S2LPCmdStrobeCommand>
	  S2LPSpiWriteFifo(BUFSIZE, vectcTxBuff);
 80041ba:	f107 0308 	add.w	r3, r7, #8
 80041be:	4619      	mov	r1, r3
 80041c0:	2020      	movs	r0, #32
 80041c2:	f7fd fc51 	bl	8001a68 <RadioSpiWriteFifo>

	  /* send the TX command */
	  S2LPCmdStrobeTx();
 80041c6:	239c      	movs	r3, #156	; 0x9c
 80041c8:	70bb      	strb	r3, [r7, #2]
 80041ca:	1cbb      	adds	r3, r7, #2
 80041cc:	461a      	mov	r2, r3
 80041ce:	2101      	movs	r1, #1
 80041d0:	2076      	movs	r0, #118	; 0x76
 80041d2:	f7fd fb4d 	bl	8001870 <RadioSpiWriteRegisters>
 80041d6:	2060      	movs	r0, #96	; 0x60
 80041d8:	f7fc f9d2 	bl	8000580 <S2LPCmdStrobeCommand>
	  printf("Packet transmitted\n\r");
 80041dc:	480f      	ldr	r0, [pc, #60]	; (800421c <main+0x18c>)
 80041de:	f000 fc03 	bl	80049e8 <iprintf>
	  HAL_Delay(100);
 80041e2:	2064      	movs	r0, #100	; 0x64
 80041e4:	f7fd fcfa 	bl	8001bdc <HAL_Delay>
	  /* clear application TX flag */
	  start_Tx = RESET;
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <main+0x188>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
    if (start_Tx!=RESET)
 80041ee:	e7d6      	b.n	800419e <main+0x10e>
 80041f0:	200000a4 	.word	0x200000a4
 80041f4:	20000128 	.word	0x20000128
 80041f8:	40020000 	.word	0x40020000
 80041fc:	02faf080 	.word	0x02faf080
 8004200:	08005818 	.word	0x08005818
 8004204:	0800582c 	.word	0x0800582c
 8004208:	0800583c 	.word	0x0800583c
 800420c:	08005840 	.word	0x08005840
 8004210:	080057c8 	.word	0x080057c8
 8004214:	080057e0 	.word	0x080057e0
 8004218:	20000091 	.word	0x20000091
 800421c:	08005800 	.word	0x08005800

08004220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b094      	sub	sp, #80	; 0x50
 8004224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	2230      	movs	r2, #48	; 0x30
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fbd1 	bl	80049d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <SystemClock_Config+0xcc>)
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <SystemClock_Config+0xcc>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6413      	str	r3, [r2, #64]	; 0x40
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <SystemClock_Config+0xcc>)
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004260:	2300      	movs	r3, #0
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <SystemClock_Config+0xd0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <SystemClock_Config+0xd0>)
 800426e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <SystemClock_Config+0xd0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004280:	2302      	movs	r3, #2
 8004282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004284:	2301      	movs	r3, #1
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004288:	2310      	movs	r3, #16
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800428c:	2302      	movs	r3, #2
 800428e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004290:	2300      	movs	r3, #0
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004294:	2308      	movs	r3, #8
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004298:	2350      	movs	r3, #80	; 0x50
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800429c:	2302      	movs	r3, #2
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80042a0:	2304      	movs	r3, #4
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042a4:	f107 0320 	add.w	r3, r7, #32
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd ff8b 	bl	80021c4 <HAL_RCC_OscConfig>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80042b4:	f000 f952 	bl	800455c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042b8:	230f      	movs	r3, #15
 80042ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042bc:	2302      	movs	r3, #2
 80042be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042ce:	f107 030c 	add.w	r3, r7, #12
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe f9e5 	bl	80026a4 <HAL_RCC_ClockConfig>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80042e0:	f000 f93c 	bl	800455c <Error_Handler>
  }
}
 80042e4:	bf00      	nop
 80042e6:	3750      	adds	r7, #80	; 0x50
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000

080042f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <MX_SPI1_Init+0x64>)
 80042fa:	4a18      	ldr	r2, [pc, #96]	; (800435c <MX_SPI1_Init+0x68>)
 80042fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042fe:	4b16      	ldr	r3, [pc, #88]	; (8004358 <MX_SPI1_Init+0x64>)
 8004300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004306:	4b14      	ldr	r3, [pc, #80]	; (8004358 <MX_SPI1_Init+0x64>)
 8004308:	2200      	movs	r2, #0
 800430a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <MX_SPI1_Init+0x64>)
 800430e:	2200      	movs	r2, #0
 8004310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <MX_SPI1_Init+0x64>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <MX_SPI1_Init+0x64>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <MX_SPI1_Init+0x64>)
 8004320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <MX_SPI1_Init+0x64>)
 8004328:	2210      	movs	r2, #16
 800432a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <MX_SPI1_Init+0x64>)
 800432e:	2200      	movs	r2, #0
 8004330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <MX_SPI1_Init+0x64>)
 8004334:	2200      	movs	r2, #0
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <MX_SPI1_Init+0x64>)
 800433a:	2200      	movs	r2, #0
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <MX_SPI1_Init+0x64>)
 8004340:	220a      	movs	r2, #10
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004344:	4804      	ldr	r0, [pc, #16]	; (8004358 <MX_SPI1_Init+0x64>)
 8004346:	f7fe fb79 	bl	8002a3c <HAL_SPI_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004350:	f000 f904 	bl	800455c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000128 	.word	0x20000128
 800435c:	40013000 	.word	0x40013000

08004360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004366:	f107 0308 	add.w	r3, r7, #8
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004374:	463b      	mov	r3, r7
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <MX_TIM2_Init+0x94>)
 800437e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <MX_TIM2_Init+0x94>)
 8004386:	2200      	movs	r2, #0
 8004388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <MX_TIM2_Init+0x94>)
 800438c:	2200      	movs	r2, #0
 800438e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004390:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <MX_TIM2_Init+0x94>)
 8004392:	2200      	movs	r2, #0
 8004394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <MX_TIM2_Init+0x94>)
 8004398:	2200      	movs	r2, #0
 800439a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <MX_TIM2_Init+0x94>)
 800439e:	2200      	movs	r2, #0
 80043a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043a2:	4814      	ldr	r0, [pc, #80]	; (80043f4 <MX_TIM2_Init+0x94>)
 80043a4:	f7fe fdfc 	bl	8002fa0 <HAL_TIM_Base_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80043ae:	f000 f8d5 	bl	800455c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	4619      	mov	r1, r3
 80043be:	480d      	ldr	r0, [pc, #52]	; (80043f4 <MX_TIM2_Init+0x94>)
 80043c0:	f7fe ff21 	bl	8003206 <HAL_TIM_ConfigClockSource>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80043ca:	f000 f8c7 	bl	800455c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043d6:	463b      	mov	r3, r7
 80043d8:	4619      	mov	r1, r3
 80043da:	4806      	ldr	r0, [pc, #24]	; (80043f4 <MX_TIM2_Init+0x94>)
 80043dc:	f7ff f916 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80043e6:	f000 f8b9 	bl	800455c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80043ea:	bf00      	nop
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000180 	.word	0x20000180

080043f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <MX_USART2_UART_Init+0x50>)
 8004400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800442e:	4805      	ldr	r0, [pc, #20]	; (8004444 <MX_USART2_UART_Init+0x4c>)
 8004430:	f7ff f96e 	bl	8003710 <HAL_UART_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800443a:	f000 f88f 	bl	800455c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200001c0 	.word	0x200001c0
 8004448:	40004400 	.word	0x40004400

0800444c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004452:	f107 030c 	add.w	r3, r7, #12
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <MX_GPIO_Init+0x100>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a38      	ldr	r2, [pc, #224]	; (800454c <MX_GPIO_Init+0x100>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <MX_GPIO_Init+0x100>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	4b32      	ldr	r3, [pc, #200]	; (800454c <MX_GPIO_Init+0x100>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4a31      	ldr	r2, [pc, #196]	; (800454c <MX_GPIO_Init+0x100>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <MX_GPIO_Init+0x100>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4b2b      	ldr	r3, [pc, #172]	; (800454c <MX_GPIO_Init+0x100>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a2a      	ldr	r2, [pc, #168]	; (800454c <MX_GPIO_Init+0x100>)
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	6313      	str	r3, [r2, #48]	; 0x30
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <MX_GPIO_Init+0x100>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_S2_LP_Pin|NUCLEO_LED1_PIN_Pin|M2S_GPIO_SDN_Pin|SPI_CS_EEPROM_Pin, GPIO_PIN_RESET);
 80044b6:	2200      	movs	r2, #0
 80044b8:	f240 3122 	movw	r1, #802	; 0x322
 80044bc:	4824      	ldr	r0, [pc, #144]	; (8004550 <MX_GPIO_Init+0x104>)
 80044be:	f7fd fe43 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON1_PIN_Pin M2S_GPIO_3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_PIN_Pin|M2S_GPIO_3_Pin;
 80044c2:	f242 0301 	movw	r3, #8193	; 0x2001
 80044c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <MX_GPIO_Init+0x108>)
 80044ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d0:	f107 030c 	add.w	r3, r7, #12
 80044d4:	4619      	mov	r1, r3
 80044d6:	4820      	ldr	r0, [pc, #128]	; (8004558 <MX_GPIO_Init+0x10c>)
 80044d8:	f7fd fcb4 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_S2_LP_Pin NUCLEO_LED1_PIN_Pin M2S_GPIO_SDN_Pin SPI_CS_EEPROM_Pin */
  GPIO_InitStruct.Pin = SPI_CS_S2_LP_Pin|NUCLEO_LED1_PIN_Pin|M2S_GPIO_SDN_Pin|SPI_CS_EEPROM_Pin;
 80044dc:	f240 3322 	movw	r3, #802	; 0x322
 80044e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e2:	2301      	movs	r3, #1
 80044e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ee:	f107 030c 	add.w	r3, r7, #12
 80044f2:	4619      	mov	r1, r3
 80044f4:	4816      	ldr	r0, [pc, #88]	; (8004550 <MX_GPIO_Init+0x104>)
 80044f6:	f7fd fca5 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2S_GPIO_1_Pin */
  GPIO_InitStruct.Pin = M2S_GPIO_1_Pin;
 80044fa:	2310      	movs	r3, #16
 80044fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <MX_GPIO_Init+0x108>)
 8004500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(M2S_GPIO_1_GPIO_Port, &GPIO_InitStruct);
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	4619      	mov	r1, r3
 800450c:	4810      	ldr	r0, [pc, #64]	; (8004550 <MX_GPIO_Init+0x104>)
 800450e:	f7fd fc99 	bl	8001e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004512:	2200      	movs	r2, #0
 8004514:	2100      	movs	r1, #0
 8004516:	2006      	movs	r0, #6
 8004518:	f7fd fc5d 	bl	8001dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800451c:	2006      	movs	r0, #6
 800451e:	f7fd fc76 	bl	8001e0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	200a      	movs	r0, #10
 8004528:	f7fd fc55 	bl	8001dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800452c:	200a      	movs	r0, #10
 800452e:	f7fd fc6e 	bl	8001e0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	2028      	movs	r0, #40	; 0x28
 8004538:	f7fd fc4d 	bl	8001dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800453c:	2028      	movs	r0, #40	; 0x28
 800453e:	f7fd fc66 	bl	8001e0e <HAL_NVIC_EnableIRQ>

}
 8004542:	bf00      	nop
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	40020000 	.word	0x40020000
 8004554:	10210000 	.word	0x10210000
 8004558:	40020800 	.word	0x40020800

0800455c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_MspInit+0x4c>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <HAL_MspInit+0x4c>)
 800457c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004580:	6453      	str	r3, [r2, #68]	; 0x44
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <HAL_MspInit+0x4c>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_MspInit+0x4c>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <HAL_MspInit+0x4c>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_MspInit+0x4c>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800

080045bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <HAL_SPI_MspInit+0xc0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d149      	bne.n	8004672 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	4b27      	ldr	r3, [pc, #156]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 80045e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045ec:	6453      	str	r3, [r2, #68]	; 0x44
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 8004620:	f043 0302 	orr.w	r3, r3, #2
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_SPI_MspInit+0xc4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004632:	23c0      	movs	r3, #192	; 0xc0
 8004634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	2302      	movs	r3, #2
 8004638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463e:	2303      	movs	r3, #3
 8004640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004642:	2305      	movs	r3, #5
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004646:	f107 0314 	add.w	r3, r7, #20
 800464a:	4619      	mov	r1, r3
 800464c:	480d      	ldr	r0, [pc, #52]	; (8004684 <HAL_SPI_MspInit+0xc8>)
 800464e:	f7fd fbf9 	bl	8001e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004652:	2308      	movs	r3, #8
 8004654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004656:	2302      	movs	r3, #2
 8004658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465e:	2303      	movs	r3, #3
 8004660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004662:	2305      	movs	r3, #5
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004666:	f107 0314 	add.w	r3, r7, #20
 800466a:	4619      	mov	r1, r3
 800466c:	4806      	ldr	r0, [pc, #24]	; (8004688 <HAL_SPI_MspInit+0xcc>)
 800466e:	f7fd fbe9 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004672:	bf00      	nop
 8004674:	3728      	adds	r7, #40	; 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40013000 	.word	0x40013000
 8004680:	40023800 	.word	0x40023800
 8004684:	40020000 	.word	0x40020000
 8004688:	40020400 	.word	0x40020400

0800468c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d115      	bne.n	80046ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <HAL_TIM_Base_MspInit+0x48>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a0b      	ldr	r2, [pc, #44]	; (80046d4 <HAL_TIM_Base_MspInit+0x48>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_TIM_Base_MspInit+0x48>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	201c      	movs	r0, #28
 80046c0:	f7fd fb89 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046c4:	201c      	movs	r0, #28
 80046c6:	f7fd fba2 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_UART_MspInit+0x84>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d12b      	bne.n	8004752 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	4b18      	ldr	r3, [pc, #96]	; (8004760 <HAL_UART_MspInit+0x88>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_UART_MspInit+0x88>)
 8004704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004708:	6413      	str	r3, [r2, #64]	; 0x40
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_UART_MspInit+0x88>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_UART_MspInit+0x88>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <HAL_UART_MspInit+0x88>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6313      	str	r3, [r2, #48]	; 0x30
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_UART_MspInit+0x88>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004732:	230c      	movs	r3, #12
 8004734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004736:	2302      	movs	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473e:	2303      	movs	r3, #3
 8004740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004742:	2307      	movs	r3, #7
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004746:	f107 0314 	add.w	r3, r7, #20
 800474a:	4619      	mov	r1, r3
 800474c:	4805      	ldr	r0, [pc, #20]	; (8004764 <HAL_UART_MspInit+0x8c>)
 800474e:	f7fd fb79 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004752:	bf00      	nop
 8004754:	3728      	adds	r7, #40	; 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40004400 	.word	0x40004400
 8004760:	40023800 	.word	0x40023800
 8004764:	40020000 	.word	0x40020000

08004768 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800476c:	e7fe      	b.n	800476c <MemManage_Handler+0x4>

0800476e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800476e:	b480      	push	{r7}
 8004770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004772:	e7fe      	b.n	8004772 <BusFault_Handler+0x4>

08004774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004778:	e7fe      	b.n	8004778 <UsageFault_Handler+0x4>

0800477a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047a8:	f7fd f9f8 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fd fce1 	bl	800217c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}

080047be <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80047c2:	2010      	movs	r0, #16
 80047c4:	f7fd fcda 	bl	800217c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}

080047cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <TIM2_IRQHandler+0x10>)
 80047d2:	f7fe fc10 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000180 	.word	0x20000180

080047e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80047e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80047e8:	f7fd fcc8 	bl	800217c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80047ec:	bf00      	nop
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e00a      	b.n	8004818 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004802:	f3af 8000 	nop.w
 8004806:	4601      	mov	r1, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	60ba      	str	r2, [r7, #8]
 800480e:	b2ca      	uxtb	r2, r1
 8004810:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3301      	adds	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	dbf0      	blt.n	8004802 <_read+0x12>
	}

return len;
 8004820:	687b      	ldr	r3, [r7, #4]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <_close>:
	}
	return len;
}

int _close(int file)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
	return -1;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004852:	605a      	str	r2, [r3, #4]
	return 0;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_isatty>:

int _isatty(int file)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
	return 1;
 800486a:	2301      	movs	r3, #1
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
	return 0;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <_sbrk+0x50>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <_sbrk+0x16>
		heap_end = &end;
 80048a4:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <_sbrk+0x50>)
 80048a6:	4a10      	ldr	r2, [pc, #64]	; (80048e8 <_sbrk+0x54>)
 80048a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <_sbrk+0x50>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <_sbrk+0x50>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	466a      	mov	r2, sp
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d907      	bls.n	80048ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80048be:	f000 f855 	bl	800496c <__errno>
 80048c2:	4602      	mov	r2, r0
 80048c4:	230c      	movs	r3, #12
 80048c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295
 80048cc:	e006      	b.n	80048dc <_sbrk+0x48>
	}

	heap_end += incr;
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <_sbrk+0x50>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	4a03      	ldr	r2, [pc, #12]	; (80048e4 <_sbrk+0x50>)
 80048d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000094 	.word	0x20000094
 80048e8:	20000208 	.word	0x20000208

080048ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048f0:	4b08      	ldr	r3, [pc, #32]	; (8004914 <SystemInit+0x28>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	4a07      	ldr	r2, [pc, #28]	; (8004914 <SystemInit+0x28>)
 80048f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <SystemInit+0x28>)
 8004902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004906:	609a      	str	r2, [r3, #8]
#endif
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800491c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800491e:	e003      	b.n	8004928 <LoopCopyDataInit>

08004920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004926:	3104      	adds	r1, #4

08004928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004928:	480b      	ldr	r0, [pc, #44]	; (8004958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800492a:	4b0c      	ldr	r3, [pc, #48]	; (800495c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800492c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800492e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004930:	d3f6      	bcc.n	8004920 <CopyDataInit>
  ldr  r2, =_sbss
 8004932:	4a0b      	ldr	r2, [pc, #44]	; (8004960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004934:	e002      	b.n	800493c <LoopFillZerobss>

08004936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004938:	f842 3b04 	str.w	r3, [r2], #4

0800493c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800493e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004940:	d3f9      	bcc.n	8004936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004942:	f7ff ffd3 	bl	80048ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004946:	f000 f817 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800494a:	f7ff fba1 	bl	8004090 <main>
  bx  lr    
 800494e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004950:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8004954:	080059d4 	.word	0x080059d4
  ldr  r0, =_sdata
 8004958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800495c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004960:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004964:	20000204 	.word	0x20000204

08004968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004968:	e7fe      	b.n	8004968 <ADC_IRQHandler>
	...

0800496c <__errno>:
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <__errno+0x8>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000010 	.word	0x20000010

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4e0d      	ldr	r6, [pc, #52]	; (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	; (80049b4 <__libc_init_array+0x3c>)
 800497e:	1ba4      	subs	r4, r4, r6
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2500      	movs	r5, #0
 8004984:	42a5      	cmp	r5, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4e0b      	ldr	r6, [pc, #44]	; (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	; (80049bc <__libc_init_array+0x44>)
 800498c:	f000 ff10 	bl	80057b0 <_init>
 8004990:	1ba4      	subs	r4, r4, r6
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2500      	movs	r5, #0
 8004996:	42a5      	cmp	r5, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049a0:	4798      	blx	r3
 80049a2:	3501      	adds	r5, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049aa:	4798      	blx	r3
 80049ac:	3501      	adds	r5, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	080059cc 	.word	0x080059cc
 80049b4:	080059cc 	.word	0x080059cc
 80049b8:	080059cc 	.word	0x080059cc
 80049bc:	080059d0 	.word	0x080059d0

080049c0 <memcpy>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	1e43      	subs	r3, r0, #1
 80049c4:	440a      	add	r2, r1
 80049c6:	4291      	cmp	r1, r2
 80049c8:	d100      	bne.n	80049cc <memcpy+0xc>
 80049ca:	bd10      	pop	{r4, pc}
 80049cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d4:	e7f7      	b.n	80049c6 <memcpy+0x6>

080049d6 <memset>:
 80049d6:	4402      	add	r2, r0
 80049d8:	4603      	mov	r3, r0
 80049da:	4293      	cmp	r3, r2
 80049dc:	d100      	bne.n	80049e0 <memset+0xa>
 80049de:	4770      	bx	lr
 80049e0:	f803 1b01 	strb.w	r1, [r3], #1
 80049e4:	e7f9      	b.n	80049da <memset+0x4>
	...

080049e8 <iprintf>:
 80049e8:	b40f      	push	{r0, r1, r2, r3}
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <iprintf+0x2c>)
 80049ec:	b513      	push	{r0, r1, r4, lr}
 80049ee:	681c      	ldr	r4, [r3, #0]
 80049f0:	b124      	cbz	r4, 80049fc <iprintf+0x14>
 80049f2:	69a3      	ldr	r3, [r4, #24]
 80049f4:	b913      	cbnz	r3, 80049fc <iprintf+0x14>
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 f84e 	bl	8004a98 <__sinit>
 80049fc:	ab05      	add	r3, sp, #20
 80049fe:	9a04      	ldr	r2, [sp, #16]
 8004a00:	68a1      	ldr	r1, [r4, #8]
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 f955 	bl	8004cb4 <_vfiprintf_r>
 8004a0a:	b002      	add	sp, #8
 8004a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a10:	b004      	add	sp, #16
 8004a12:	4770      	bx	lr
 8004a14:	20000010 	.word	0x20000010

08004a18 <std>:
 8004a18:	2300      	movs	r3, #0
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a22:	6083      	str	r3, [r0, #8]
 8004a24:	8181      	strh	r1, [r0, #12]
 8004a26:	6643      	str	r3, [r0, #100]	; 0x64
 8004a28:	81c2      	strh	r2, [r0, #14]
 8004a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a2e:	6183      	str	r3, [r0, #24]
 8004a30:	4619      	mov	r1, r3
 8004a32:	2208      	movs	r2, #8
 8004a34:	305c      	adds	r0, #92	; 0x5c
 8004a36:	f7ff ffce 	bl	80049d6 <memset>
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <std+0x38>)
 8004a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x3c>)
 8004a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x40>)
 8004a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x44>)
 8004a48:	6224      	str	r4, [r4, #32]
 8004a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	bf00      	nop
 8004a50:	08005211 	.word	0x08005211
 8004a54:	08005233 	.word	0x08005233
 8004a58:	0800526b 	.word	0x0800526b
 8004a5c:	0800528f 	.word	0x0800528f

08004a60 <_cleanup_r>:
 8004a60:	4901      	ldr	r1, [pc, #4]	; (8004a68 <_cleanup_r+0x8>)
 8004a62:	f000 b885 	b.w	8004b70 <_fwalk_reent>
 8004a66:	bf00      	nop
 8004a68:	08005569 	.word	0x08005569

08004a6c <__sfmoreglue>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	1e4a      	subs	r2, r1, #1
 8004a70:	2568      	movs	r5, #104	; 0x68
 8004a72:	4355      	muls	r5, r2
 8004a74:	460e      	mov	r6, r1
 8004a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a7a:	f000 f897 	bl	8004bac <_malloc_r>
 8004a7e:	4604      	mov	r4, r0
 8004a80:	b140      	cbz	r0, 8004a94 <__sfmoreglue+0x28>
 8004a82:	2100      	movs	r1, #0
 8004a84:	e9c0 1600 	strd	r1, r6, [r0]
 8004a88:	300c      	adds	r0, #12
 8004a8a:	60a0      	str	r0, [r4, #8]
 8004a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a90:	f7ff ffa1 	bl	80049d6 <memset>
 8004a94:	4620      	mov	r0, r4
 8004a96:	bd70      	pop	{r4, r5, r6, pc}

08004a98 <__sinit>:
 8004a98:	6983      	ldr	r3, [r0, #24]
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	bb33      	cbnz	r3, 8004aee <__sinit+0x56>
 8004aa0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004aa4:	6503      	str	r3, [r0, #80]	; 0x50
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <__sinit+0x58>)
 8004aa8:	4a12      	ldr	r2, [pc, #72]	; (8004af4 <__sinit+0x5c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6282      	str	r2, [r0, #40]	; 0x28
 8004aae:	4298      	cmp	r0, r3
 8004ab0:	bf04      	itt	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	6183      	streq	r3, [r0, #24]
 8004ab6:	f000 f81f 	bl	8004af8 <__sfp>
 8004aba:	6060      	str	r0, [r4, #4]
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 f81b 	bl	8004af8 <__sfp>
 8004ac2:	60a0      	str	r0, [r4, #8]
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f000 f817 	bl	8004af8 <__sfp>
 8004aca:	2200      	movs	r2, #0
 8004acc:	60e0      	str	r0, [r4, #12]
 8004ace:	2104      	movs	r1, #4
 8004ad0:	6860      	ldr	r0, [r4, #4]
 8004ad2:	f7ff ffa1 	bl	8004a18 <std>
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	2109      	movs	r1, #9
 8004ada:	68a0      	ldr	r0, [r4, #8]
 8004adc:	f7ff ff9c 	bl	8004a18 <std>
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	2112      	movs	r1, #18
 8004ae4:	68e0      	ldr	r0, [r4, #12]
 8004ae6:	f7ff ff97 	bl	8004a18 <std>
 8004aea:	2301      	movs	r3, #1
 8004aec:	61a3      	str	r3, [r4, #24]
 8004aee:	bd10      	pop	{r4, pc}
 8004af0:	0800592c 	.word	0x0800592c
 8004af4:	08004a61 	.word	0x08004a61

08004af8 <__sfp>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <__sfp+0x70>)
 8004afc:	681e      	ldr	r6, [r3, #0]
 8004afe:	69b3      	ldr	r3, [r6, #24]
 8004b00:	4607      	mov	r7, r0
 8004b02:	b913      	cbnz	r3, 8004b0a <__sfp+0x12>
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff ffc7 	bl	8004a98 <__sinit>
 8004b0a:	3648      	adds	r6, #72	; 0x48
 8004b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	d503      	bpl.n	8004b1c <__sfp+0x24>
 8004b14:	6833      	ldr	r3, [r6, #0]
 8004b16:	b133      	cbz	r3, 8004b26 <__sfp+0x2e>
 8004b18:	6836      	ldr	r6, [r6, #0]
 8004b1a:	e7f7      	b.n	8004b0c <__sfp+0x14>
 8004b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b20:	b16d      	cbz	r5, 8004b3e <__sfp+0x46>
 8004b22:	3468      	adds	r4, #104	; 0x68
 8004b24:	e7f4      	b.n	8004b10 <__sfp+0x18>
 8004b26:	2104      	movs	r1, #4
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f7ff ff9f 	bl	8004a6c <__sfmoreglue>
 8004b2e:	6030      	str	r0, [r6, #0]
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1f1      	bne.n	8004b18 <__sfp+0x20>
 8004b34:	230c      	movs	r3, #12
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <__sfp+0x74>)
 8004b40:	6665      	str	r5, [r4, #100]	; 0x64
 8004b42:	e9c4 5500 	strd	r5, r5, [r4]
 8004b46:	60a5      	str	r5, [r4, #8]
 8004b48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b50:	2208      	movs	r2, #8
 8004b52:	4629      	mov	r1, r5
 8004b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b58:	f7ff ff3d 	bl	80049d6 <memset>
 8004b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b64:	e7e9      	b.n	8004b3a <__sfp+0x42>
 8004b66:	bf00      	nop
 8004b68:	0800592c 	.word	0x0800592c
 8004b6c:	ffff0001 	.word	0xffff0001

08004b70 <_fwalk_reent>:
 8004b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b74:	4680      	mov	r8, r0
 8004b76:	4689      	mov	r9, r1
 8004b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	b914      	cbnz	r4, 8004b86 <_fwalk_reent+0x16>
 8004b80:	4630      	mov	r0, r6
 8004b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b8a:	3f01      	subs	r7, #1
 8004b8c:	d501      	bpl.n	8004b92 <_fwalk_reent+0x22>
 8004b8e:	6824      	ldr	r4, [r4, #0]
 8004b90:	e7f5      	b.n	8004b7e <_fwalk_reent+0xe>
 8004b92:	89ab      	ldrh	r3, [r5, #12]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d907      	bls.n	8004ba8 <_fwalk_reent+0x38>
 8004b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	d003      	beq.n	8004ba8 <_fwalk_reent+0x38>
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	47c8      	blx	r9
 8004ba6:	4306      	orrs	r6, r0
 8004ba8:	3568      	adds	r5, #104	; 0x68
 8004baa:	e7ee      	b.n	8004b8a <_fwalk_reent+0x1a>

08004bac <_malloc_r>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	1ccd      	adds	r5, r1, #3
 8004bb0:	f025 0503 	bic.w	r5, r5, #3
 8004bb4:	3508      	adds	r5, #8
 8004bb6:	2d0c      	cmp	r5, #12
 8004bb8:	bf38      	it	cc
 8004bba:	250c      	movcc	r5, #12
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	db01      	blt.n	8004bc6 <_malloc_r+0x1a>
 8004bc2:	42a9      	cmp	r1, r5
 8004bc4:	d903      	bls.n	8004bce <_malloc_r+0x22>
 8004bc6:	230c      	movs	r3, #12
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	2000      	movs	r0, #0
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
 8004bce:	f000 fd6b 	bl	80056a8 <__malloc_lock>
 8004bd2:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <_malloc_r+0xac>)
 8004bd4:	6814      	ldr	r4, [r2, #0]
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	b991      	cbnz	r1, 8004c00 <_malloc_r+0x54>
 8004bda:	4c20      	ldr	r4, [pc, #128]	; (8004c5c <_malloc_r+0xb0>)
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	b91b      	cbnz	r3, 8004be8 <_malloc_r+0x3c>
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 fb05 	bl	80051f0 <_sbrk_r>
 8004be6:	6020      	str	r0, [r4, #0]
 8004be8:	4629      	mov	r1, r5
 8004bea:	4630      	mov	r0, r6
 8004bec:	f000 fb00 	bl	80051f0 <_sbrk_r>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d124      	bne.n	8004c3e <_malloc_r+0x92>
 8004bf4:	230c      	movs	r3, #12
 8004bf6:	6033      	str	r3, [r6, #0]
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 fd56 	bl	80056aa <__malloc_unlock>
 8004bfe:	e7e4      	b.n	8004bca <_malloc_r+0x1e>
 8004c00:	680b      	ldr	r3, [r1, #0]
 8004c02:	1b5b      	subs	r3, r3, r5
 8004c04:	d418      	bmi.n	8004c38 <_malloc_r+0x8c>
 8004c06:	2b0b      	cmp	r3, #11
 8004c08:	d90f      	bls.n	8004c2a <_malloc_r+0x7e>
 8004c0a:	600b      	str	r3, [r1, #0]
 8004c0c:	50cd      	str	r5, [r1, r3]
 8004c0e:	18cc      	adds	r4, r1, r3
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 fd4a 	bl	80056aa <__malloc_unlock>
 8004c16:	f104 000b 	add.w	r0, r4, #11
 8004c1a:	1d23      	adds	r3, r4, #4
 8004c1c:	f020 0007 	bic.w	r0, r0, #7
 8004c20:	1ac3      	subs	r3, r0, r3
 8004c22:	d0d3      	beq.n	8004bcc <_malloc_r+0x20>
 8004c24:	425a      	negs	r2, r3
 8004c26:	50e2      	str	r2, [r4, r3]
 8004c28:	e7d0      	b.n	8004bcc <_malloc_r+0x20>
 8004c2a:	428c      	cmp	r4, r1
 8004c2c:	684b      	ldr	r3, [r1, #4]
 8004c2e:	bf16      	itet	ne
 8004c30:	6063      	strne	r3, [r4, #4]
 8004c32:	6013      	streq	r3, [r2, #0]
 8004c34:	460c      	movne	r4, r1
 8004c36:	e7eb      	b.n	8004c10 <_malloc_r+0x64>
 8004c38:	460c      	mov	r4, r1
 8004c3a:	6849      	ldr	r1, [r1, #4]
 8004c3c:	e7cc      	b.n	8004bd8 <_malloc_r+0x2c>
 8004c3e:	1cc4      	adds	r4, r0, #3
 8004c40:	f024 0403 	bic.w	r4, r4, #3
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	d005      	beq.n	8004c54 <_malloc_r+0xa8>
 8004c48:	1a21      	subs	r1, r4, r0
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f000 fad0 	bl	80051f0 <_sbrk_r>
 8004c50:	3001      	adds	r0, #1
 8004c52:	d0cf      	beq.n	8004bf4 <_malloc_r+0x48>
 8004c54:	6025      	str	r5, [r4, #0]
 8004c56:	e7db      	b.n	8004c10 <_malloc_r+0x64>
 8004c58:	20000098 	.word	0x20000098
 8004c5c:	2000009c 	.word	0x2000009c

08004c60 <__sfputc_r>:
 8004c60:	6893      	ldr	r3, [r2, #8]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	b410      	push	{r4}
 8004c68:	6093      	str	r3, [r2, #8]
 8004c6a:	da08      	bge.n	8004c7e <__sfputc_r+0x1e>
 8004c6c:	6994      	ldr	r4, [r2, #24]
 8004c6e:	42a3      	cmp	r3, r4
 8004c70:	db01      	blt.n	8004c76 <__sfputc_r+0x16>
 8004c72:	290a      	cmp	r1, #10
 8004c74:	d103      	bne.n	8004c7e <__sfputc_r+0x1e>
 8004c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c7a:	f000 bb0d 	b.w	8005298 <__swbuf_r>
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	1c58      	adds	r0, r3, #1
 8004c82:	6010      	str	r0, [r2, #0]
 8004c84:	7019      	strb	r1, [r3, #0]
 8004c86:	4608      	mov	r0, r1
 8004c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <__sfputs_r>:
 8004c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	18d5      	adds	r5, r2, r3
 8004c98:	42ac      	cmp	r4, r5
 8004c9a:	d101      	bne.n	8004ca0 <__sfputs_r+0x12>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e007      	b.n	8004cb0 <__sfputs_r+0x22>
 8004ca0:	463a      	mov	r2, r7
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f7ff ffda 	bl	8004c60 <__sfputc_r>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d1f3      	bne.n	8004c98 <__sfputs_r+0xa>
 8004cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cb4 <_vfiprintf_r>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	460c      	mov	r4, r1
 8004cba:	b09d      	sub	sp, #116	; 0x74
 8004cbc:	4617      	mov	r7, r2
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	b118      	cbz	r0, 8004ccc <_vfiprintf_r+0x18>
 8004cc4:	6983      	ldr	r3, [r0, #24]
 8004cc6:	b90b      	cbnz	r3, 8004ccc <_vfiprintf_r+0x18>
 8004cc8:	f7ff fee6 	bl	8004a98 <__sinit>
 8004ccc:	4b7c      	ldr	r3, [pc, #496]	; (8004ec0 <_vfiprintf_r+0x20c>)
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	d158      	bne.n	8004d84 <_vfiprintf_r+0xd0>
 8004cd2:	6874      	ldr	r4, [r6, #4]
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	0718      	lsls	r0, r3, #28
 8004cd8:	d55e      	bpl.n	8004d98 <_vfiprintf_r+0xe4>
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05b      	beq.n	8004d98 <_vfiprintf_r+0xe4>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cea:	2330      	movs	r3, #48	; 0x30
 8004cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cf0:	9503      	str	r5, [sp, #12]
 8004cf2:	f04f 0b01 	mov.w	fp, #1
 8004cf6:	46b8      	mov	r8, r7
 8004cf8:	4645      	mov	r5, r8
 8004cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004cfe:	b10b      	cbz	r3, 8004d04 <_vfiprintf_r+0x50>
 8004d00:	2b25      	cmp	r3, #37	; 0x25
 8004d02:	d154      	bne.n	8004dae <_vfiprintf_r+0xfa>
 8004d04:	ebb8 0a07 	subs.w	sl, r8, r7
 8004d08:	d00b      	beq.n	8004d22 <_vfiprintf_r+0x6e>
 8004d0a:	4653      	mov	r3, sl
 8004d0c:	463a      	mov	r2, r7
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4630      	mov	r0, r6
 8004d12:	f7ff ffbc 	bl	8004c8e <__sfputs_r>
 8004d16:	3001      	adds	r0, #1
 8004d18:	f000 80c2 	beq.w	8004ea0 <_vfiprintf_r+0x1ec>
 8004d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d1e:	4453      	add	r3, sl
 8004d20:	9309      	str	r3, [sp, #36]	; 0x24
 8004d22:	f898 3000 	ldrb.w	r3, [r8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80ba 	beq.w	8004ea0 <_vfiprintf_r+0x1ec>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	9307      	str	r3, [sp, #28]
 8004d3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d3e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d40:	46a8      	mov	r8, r5
 8004d42:	2205      	movs	r2, #5
 8004d44:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004d48:	485e      	ldr	r0, [pc, #376]	; (8004ec4 <_vfiprintf_r+0x210>)
 8004d4a:	f7fb fa49 	bl	80001e0 <memchr>
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	bb78      	cbnz	r0, 8004db2 <_vfiprintf_r+0xfe>
 8004d52:	06d9      	lsls	r1, r3, #27
 8004d54:	bf44      	itt	mi
 8004d56:	2220      	movmi	r2, #32
 8004d58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d5c:	071a      	lsls	r2, r3, #28
 8004d5e:	bf44      	itt	mi
 8004d60:	222b      	movmi	r2, #43	; 0x2b
 8004d62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d66:	782a      	ldrb	r2, [r5, #0]
 8004d68:	2a2a      	cmp	r2, #42	; 0x2a
 8004d6a:	d02a      	beq.n	8004dc2 <_vfiprintf_r+0x10e>
 8004d6c:	9a07      	ldr	r2, [sp, #28]
 8004d6e:	46a8      	mov	r8, r5
 8004d70:	2000      	movs	r0, #0
 8004d72:	250a      	movs	r5, #10
 8004d74:	4641      	mov	r1, r8
 8004d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d7a:	3b30      	subs	r3, #48	; 0x30
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	d969      	bls.n	8004e54 <_vfiprintf_r+0x1a0>
 8004d80:	b360      	cbz	r0, 8004ddc <_vfiprintf_r+0x128>
 8004d82:	e024      	b.n	8004dce <_vfiprintf_r+0x11a>
 8004d84:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <_vfiprintf_r+0x214>)
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d101      	bne.n	8004d8e <_vfiprintf_r+0xda>
 8004d8a:	68b4      	ldr	r4, [r6, #8]
 8004d8c:	e7a2      	b.n	8004cd4 <_vfiprintf_r+0x20>
 8004d8e:	4b4f      	ldr	r3, [pc, #316]	; (8004ecc <_vfiprintf_r+0x218>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	bf08      	it	eq
 8004d94:	68f4      	ldreq	r4, [r6, #12]
 8004d96:	e79d      	b.n	8004cd4 <_vfiprintf_r+0x20>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f000 fae0 	bl	8005360 <__swsetup_r>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d09d      	beq.n	8004ce0 <_vfiprintf_r+0x2c>
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	b01d      	add	sp, #116	; 0x74
 8004daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dae:	46a8      	mov	r8, r5
 8004db0:	e7a2      	b.n	8004cf8 <_vfiprintf_r+0x44>
 8004db2:	4a44      	ldr	r2, [pc, #272]	; (8004ec4 <_vfiprintf_r+0x210>)
 8004db4:	1a80      	subs	r0, r0, r2
 8004db6:	fa0b f000 	lsl.w	r0, fp, r0
 8004dba:	4318      	orrs	r0, r3
 8004dbc:	9004      	str	r0, [sp, #16]
 8004dbe:	4645      	mov	r5, r8
 8004dc0:	e7be      	b.n	8004d40 <_vfiprintf_r+0x8c>
 8004dc2:	9a03      	ldr	r2, [sp, #12]
 8004dc4:	1d11      	adds	r1, r2, #4
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	9103      	str	r1, [sp, #12]
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	db01      	blt.n	8004dd2 <_vfiprintf_r+0x11e>
 8004dce:	9207      	str	r2, [sp, #28]
 8004dd0:	e004      	b.n	8004ddc <_vfiprintf_r+0x128>
 8004dd2:	4252      	negs	r2, r2
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	9207      	str	r2, [sp, #28]
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	f898 3000 	ldrb.w	r3, [r8]
 8004de0:	2b2e      	cmp	r3, #46	; 0x2e
 8004de2:	d10e      	bne.n	8004e02 <_vfiprintf_r+0x14e>
 8004de4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004de8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dea:	d138      	bne.n	8004e5e <_vfiprintf_r+0x1aa>
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	9203      	str	r2, [sp, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bfb8      	it	lt
 8004df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dfc:	f108 0802 	add.w	r8, r8, #2
 8004e00:	9305      	str	r3, [sp, #20]
 8004e02:	4d33      	ldr	r5, [pc, #204]	; (8004ed0 <_vfiprintf_r+0x21c>)
 8004e04:	f898 1000 	ldrb.w	r1, [r8]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f7fb f9e8 	bl	80001e0 <memchr>
 8004e10:	b140      	cbz	r0, 8004e24 <_vfiprintf_r+0x170>
 8004e12:	2340      	movs	r3, #64	; 0x40
 8004e14:	1b40      	subs	r0, r0, r5
 8004e16:	fa03 f000 	lsl.w	r0, r3, r0
 8004e1a:	9b04      	ldr	r3, [sp, #16]
 8004e1c:	4303      	orrs	r3, r0
 8004e1e:	f108 0801 	add.w	r8, r8, #1
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	f898 1000 	ldrb.w	r1, [r8]
 8004e28:	482a      	ldr	r0, [pc, #168]	; (8004ed4 <_vfiprintf_r+0x220>)
 8004e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e2e:	2206      	movs	r2, #6
 8004e30:	f108 0701 	add.w	r7, r8, #1
 8004e34:	f7fb f9d4 	bl	80001e0 <memchr>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d037      	beq.n	8004eac <_vfiprintf_r+0x1f8>
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <_vfiprintf_r+0x224>)
 8004e3e:	bb1b      	cbnz	r3, 8004e88 <_vfiprintf_r+0x1d4>
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	3307      	adds	r3, #7
 8004e44:	f023 0307 	bic.w	r3, r3, #7
 8004e48:	3308      	adds	r3, #8
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4e:	444b      	add	r3, r9
 8004e50:	9309      	str	r3, [sp, #36]	; 0x24
 8004e52:	e750      	b.n	8004cf6 <_vfiprintf_r+0x42>
 8004e54:	fb05 3202 	mla	r2, r5, r2, r3
 8004e58:	2001      	movs	r0, #1
 8004e5a:	4688      	mov	r8, r1
 8004e5c:	e78a      	b.n	8004d74 <_vfiprintf_r+0xc0>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f108 0801 	add.w	r8, r8, #1
 8004e64:	9305      	str	r3, [sp, #20]
 8004e66:	4619      	mov	r1, r3
 8004e68:	250a      	movs	r5, #10
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e70:	3a30      	subs	r2, #48	; 0x30
 8004e72:	2a09      	cmp	r2, #9
 8004e74:	d903      	bls.n	8004e7e <_vfiprintf_r+0x1ca>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0c3      	beq.n	8004e02 <_vfiprintf_r+0x14e>
 8004e7a:	9105      	str	r1, [sp, #20]
 8004e7c:	e7c1      	b.n	8004e02 <_vfiprintf_r+0x14e>
 8004e7e:	fb05 2101 	mla	r1, r5, r1, r2
 8004e82:	2301      	movs	r3, #1
 8004e84:	4680      	mov	r8, r0
 8004e86:	e7f0      	b.n	8004e6a <_vfiprintf_r+0x1b6>
 8004e88:	ab03      	add	r3, sp, #12
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <_vfiprintf_r+0x228>)
 8004e90:	a904      	add	r1, sp, #16
 8004e92:	4630      	mov	r0, r6
 8004e94:	f3af 8000 	nop.w
 8004e98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e9c:	4681      	mov	r9, r0
 8004e9e:	d1d5      	bne.n	8004e4c <_vfiprintf_r+0x198>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	065b      	lsls	r3, r3, #25
 8004ea4:	f53f af7e 	bmi.w	8004da4 <_vfiprintf_r+0xf0>
 8004ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eaa:	e77d      	b.n	8004da8 <_vfiprintf_r+0xf4>
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <_vfiprintf_r+0x228>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f000 f888 	bl	8004fcc <_printf_i>
 8004ebc:	e7ec      	b.n	8004e98 <_vfiprintf_r+0x1e4>
 8004ebe:	bf00      	nop
 8004ec0:	08005950 	.word	0x08005950
 8004ec4:	08005990 	.word	0x08005990
 8004ec8:	08005970 	.word	0x08005970
 8004ecc:	08005930 	.word	0x08005930
 8004ed0:	08005996 	.word	0x08005996
 8004ed4:	0800599a 	.word	0x0800599a
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	08004c8f 	.word	0x08004c8f

08004ee0 <_printf_common>:
 8004ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	4691      	mov	r9, r2
 8004ee6:	461f      	mov	r7, r3
 8004ee8:	688a      	ldr	r2, [r1, #8]
 8004eea:	690b      	ldr	r3, [r1, #16]
 8004eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bfb8      	it	lt
 8004ef4:	4613      	movlt	r3, r2
 8004ef6:	f8c9 3000 	str.w	r3, [r9]
 8004efa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004efe:	4606      	mov	r6, r0
 8004f00:	460c      	mov	r4, r1
 8004f02:	b112      	cbz	r2, 8004f0a <_printf_common+0x2a>
 8004f04:	3301      	adds	r3, #1
 8004f06:	f8c9 3000 	str.w	r3, [r9]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	0699      	lsls	r1, r3, #26
 8004f0e:	bf42      	ittt	mi
 8004f10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f14:	3302      	addmi	r3, #2
 8004f16:	f8c9 3000 	strmi.w	r3, [r9]
 8004f1a:	6825      	ldr	r5, [r4, #0]
 8004f1c:	f015 0506 	ands.w	r5, r5, #6
 8004f20:	d107      	bne.n	8004f32 <_printf_common+0x52>
 8004f22:	f104 0a19 	add.w	sl, r4, #25
 8004f26:	68e3      	ldr	r3, [r4, #12]
 8004f28:	f8d9 2000 	ldr.w	r2, [r9]
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	dc28      	bgt.n	8004f84 <_printf_common+0xa4>
 8004f32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	3300      	adds	r3, #0
 8004f3a:	bf18      	it	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	0692      	lsls	r2, r2, #26
 8004f40:	d42d      	bmi.n	8004f9e <_printf_common+0xbe>
 8004f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f46:	4639      	mov	r1, r7
 8004f48:	4630      	mov	r0, r6
 8004f4a:	47c0      	blx	r8
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d020      	beq.n	8004f92 <_printf_common+0xb2>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	68e5      	ldr	r5, [r4, #12]
 8004f54:	f8d9 2000 	ldr.w	r2, [r9]
 8004f58:	f003 0306 	and.w	r3, r3, #6
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	bf08      	it	eq
 8004f60:	1aad      	subeq	r5, r5, r2
 8004f62:	68a3      	ldr	r3, [r4, #8]
 8004f64:	6922      	ldr	r2, [r4, #16]
 8004f66:	bf0c      	ite	eq
 8004f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f6c:	2500      	movne	r5, #0
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	bfc4      	itt	gt
 8004f72:	1a9b      	subgt	r3, r3, r2
 8004f74:	18ed      	addgt	r5, r5, r3
 8004f76:	f04f 0900 	mov.w	r9, #0
 8004f7a:	341a      	adds	r4, #26
 8004f7c:	454d      	cmp	r5, r9
 8004f7e:	d11a      	bne.n	8004fb6 <_printf_common+0xd6>
 8004f80:	2000      	movs	r0, #0
 8004f82:	e008      	b.n	8004f96 <_printf_common+0xb6>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4652      	mov	r2, sl
 8004f88:	4639      	mov	r1, r7
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d103      	bne.n	8004f9a <_printf_common+0xba>
 8004f92:	f04f 30ff 	mov.w	r0, #4294967295
 8004f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9a:	3501      	adds	r5, #1
 8004f9c:	e7c3      	b.n	8004f26 <_printf_common+0x46>
 8004f9e:	18e1      	adds	r1, r4, r3
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	2030      	movs	r0, #48	; 0x30
 8004fa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fa8:	4422      	add	r2, r4
 8004faa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	e7c5      	b.n	8004f42 <_printf_common+0x62>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4639      	mov	r1, r7
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	47c0      	blx	r8
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d0e6      	beq.n	8004f92 <_printf_common+0xb2>
 8004fc4:	f109 0901 	add.w	r9, r9, #1
 8004fc8:	e7d8      	b.n	8004f7c <_printf_common+0x9c>
	...

08004fcc <_printf_i>:
 8004fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	7e09      	ldrb	r1, [r1, #24]
 8004fd8:	b085      	sub	sp, #20
 8004fda:	296e      	cmp	r1, #110	; 0x6e
 8004fdc:	4617      	mov	r7, r2
 8004fde:	4606      	mov	r6, r0
 8004fe0:	4698      	mov	r8, r3
 8004fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fe4:	f000 80b3 	beq.w	800514e <_printf_i+0x182>
 8004fe8:	d822      	bhi.n	8005030 <_printf_i+0x64>
 8004fea:	2963      	cmp	r1, #99	; 0x63
 8004fec:	d036      	beq.n	800505c <_printf_i+0x90>
 8004fee:	d80a      	bhi.n	8005006 <_printf_i+0x3a>
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	f000 80b9 	beq.w	8005168 <_printf_i+0x19c>
 8004ff6:	2958      	cmp	r1, #88	; 0x58
 8004ff8:	f000 8083 	beq.w	8005102 <_printf_i+0x136>
 8004ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005000:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005004:	e032      	b.n	800506c <_printf_i+0xa0>
 8005006:	2964      	cmp	r1, #100	; 0x64
 8005008:	d001      	beq.n	800500e <_printf_i+0x42>
 800500a:	2969      	cmp	r1, #105	; 0x69
 800500c:	d1f6      	bne.n	8004ffc <_printf_i+0x30>
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	0605      	lsls	r5, r0, #24
 8005014:	f103 0104 	add.w	r1, r3, #4
 8005018:	d52a      	bpl.n	8005070 <_printf_i+0xa4>
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	da03      	bge.n	800502a <_printf_i+0x5e>
 8005022:	222d      	movs	r2, #45	; 0x2d
 8005024:	425b      	negs	r3, r3
 8005026:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800502a:	486f      	ldr	r0, [pc, #444]	; (80051e8 <_printf_i+0x21c>)
 800502c:	220a      	movs	r2, #10
 800502e:	e039      	b.n	80050a4 <_printf_i+0xd8>
 8005030:	2973      	cmp	r1, #115	; 0x73
 8005032:	f000 809d 	beq.w	8005170 <_printf_i+0x1a4>
 8005036:	d808      	bhi.n	800504a <_printf_i+0x7e>
 8005038:	296f      	cmp	r1, #111	; 0x6f
 800503a:	d020      	beq.n	800507e <_printf_i+0xb2>
 800503c:	2970      	cmp	r1, #112	; 0x70
 800503e:	d1dd      	bne.n	8004ffc <_printf_i+0x30>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	f043 0320 	orr.w	r3, r3, #32
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	e003      	b.n	8005052 <_printf_i+0x86>
 800504a:	2975      	cmp	r1, #117	; 0x75
 800504c:	d017      	beq.n	800507e <_printf_i+0xb2>
 800504e:	2978      	cmp	r1, #120	; 0x78
 8005050:	d1d4      	bne.n	8004ffc <_printf_i+0x30>
 8005052:	2378      	movs	r3, #120	; 0x78
 8005054:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005058:	4864      	ldr	r0, [pc, #400]	; (80051ec <_printf_i+0x220>)
 800505a:	e055      	b.n	8005108 <_printf_i+0x13c>
 800505c:	6813      	ldr	r3, [r2, #0]
 800505e:	1d19      	adds	r1, r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6011      	str	r1, [r2, #0]
 8005064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800506c:	2301      	movs	r3, #1
 800506e:	e08c      	b.n	800518a <_printf_i+0x1be>
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6011      	str	r1, [r2, #0]
 8005074:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005078:	bf18      	it	ne
 800507a:	b21b      	sxthne	r3, r3
 800507c:	e7cf      	b.n	800501e <_printf_i+0x52>
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	6825      	ldr	r5, [r4, #0]
 8005082:	1d18      	adds	r0, r3, #4
 8005084:	6010      	str	r0, [r2, #0]
 8005086:	0628      	lsls	r0, r5, #24
 8005088:	d501      	bpl.n	800508e <_printf_i+0xc2>
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	e002      	b.n	8005094 <_printf_i+0xc8>
 800508e:	0668      	lsls	r0, r5, #25
 8005090:	d5fb      	bpl.n	800508a <_printf_i+0xbe>
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	4854      	ldr	r0, [pc, #336]	; (80051e8 <_printf_i+0x21c>)
 8005096:	296f      	cmp	r1, #111	; 0x6f
 8005098:	bf14      	ite	ne
 800509a:	220a      	movne	r2, #10
 800509c:	2208      	moveq	r2, #8
 800509e:	2100      	movs	r1, #0
 80050a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050a4:	6865      	ldr	r5, [r4, #4]
 80050a6:	60a5      	str	r5, [r4, #8]
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	f2c0 8095 	blt.w	80051d8 <_printf_i+0x20c>
 80050ae:	6821      	ldr	r1, [r4, #0]
 80050b0:	f021 0104 	bic.w	r1, r1, #4
 80050b4:	6021      	str	r1, [r4, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d13d      	bne.n	8005136 <_printf_i+0x16a>
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	f040 808e 	bne.w	80051dc <_printf_i+0x210>
 80050c0:	4665      	mov	r5, ip
 80050c2:	2a08      	cmp	r2, #8
 80050c4:	d10b      	bne.n	80050de <_printf_i+0x112>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	07db      	lsls	r3, r3, #31
 80050ca:	d508      	bpl.n	80050de <_printf_i+0x112>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	6862      	ldr	r2, [r4, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	bfde      	ittt	le
 80050d4:	2330      	movle	r3, #48	; 0x30
 80050d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050de:	ebac 0305 	sub.w	r3, ip, r5
 80050e2:	6123      	str	r3, [r4, #16]
 80050e4:	f8cd 8000 	str.w	r8, [sp]
 80050e8:	463b      	mov	r3, r7
 80050ea:	aa03      	add	r2, sp, #12
 80050ec:	4621      	mov	r1, r4
 80050ee:	4630      	mov	r0, r6
 80050f0:	f7ff fef6 	bl	8004ee0 <_printf_common>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d14d      	bne.n	8005194 <_printf_i+0x1c8>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	b005      	add	sp, #20
 80050fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005102:	4839      	ldr	r0, [pc, #228]	; (80051e8 <_printf_i+0x21c>)
 8005104:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005108:	6813      	ldr	r3, [r2, #0]
 800510a:	6821      	ldr	r1, [r4, #0]
 800510c:	1d1d      	adds	r5, r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6015      	str	r5, [r2, #0]
 8005112:	060a      	lsls	r2, r1, #24
 8005114:	d50b      	bpl.n	800512e <_printf_i+0x162>
 8005116:	07ca      	lsls	r2, r1, #31
 8005118:	bf44      	itt	mi
 800511a:	f041 0120 	orrmi.w	r1, r1, #32
 800511e:	6021      	strmi	r1, [r4, #0]
 8005120:	b91b      	cbnz	r3, 800512a <_printf_i+0x15e>
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	f022 0220 	bic.w	r2, r2, #32
 8005128:	6022      	str	r2, [r4, #0]
 800512a:	2210      	movs	r2, #16
 800512c:	e7b7      	b.n	800509e <_printf_i+0xd2>
 800512e:	064d      	lsls	r5, r1, #25
 8005130:	bf48      	it	mi
 8005132:	b29b      	uxthmi	r3, r3
 8005134:	e7ef      	b.n	8005116 <_printf_i+0x14a>
 8005136:	4665      	mov	r5, ip
 8005138:	fbb3 f1f2 	udiv	r1, r3, r2
 800513c:	fb02 3311 	mls	r3, r2, r1, r3
 8005140:	5cc3      	ldrb	r3, [r0, r3]
 8005142:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005146:	460b      	mov	r3, r1
 8005148:	2900      	cmp	r1, #0
 800514a:	d1f5      	bne.n	8005138 <_printf_i+0x16c>
 800514c:	e7b9      	b.n	80050c2 <_printf_i+0xf6>
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	6825      	ldr	r5, [r4, #0]
 8005152:	6961      	ldr	r1, [r4, #20]
 8005154:	1d18      	adds	r0, r3, #4
 8005156:	6010      	str	r0, [r2, #0]
 8005158:	0628      	lsls	r0, r5, #24
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	d501      	bpl.n	8005162 <_printf_i+0x196>
 800515e:	6019      	str	r1, [r3, #0]
 8005160:	e002      	b.n	8005168 <_printf_i+0x19c>
 8005162:	066a      	lsls	r2, r5, #25
 8005164:	d5fb      	bpl.n	800515e <_printf_i+0x192>
 8005166:	8019      	strh	r1, [r3, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	6123      	str	r3, [r4, #16]
 800516c:	4665      	mov	r5, ip
 800516e:	e7b9      	b.n	80050e4 <_printf_i+0x118>
 8005170:	6813      	ldr	r3, [r2, #0]
 8005172:	1d19      	adds	r1, r3, #4
 8005174:	6011      	str	r1, [r2, #0]
 8005176:	681d      	ldr	r5, [r3, #0]
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	2100      	movs	r1, #0
 800517c:	4628      	mov	r0, r5
 800517e:	f7fb f82f 	bl	80001e0 <memchr>
 8005182:	b108      	cbz	r0, 8005188 <_printf_i+0x1bc>
 8005184:	1b40      	subs	r0, r0, r5
 8005186:	6060      	str	r0, [r4, #4]
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	2300      	movs	r3, #0
 800518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005192:	e7a7      	b.n	80050e4 <_printf_i+0x118>
 8005194:	6923      	ldr	r3, [r4, #16]
 8005196:	462a      	mov	r2, r5
 8005198:	4639      	mov	r1, r7
 800519a:	4630      	mov	r0, r6
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d0aa      	beq.n	80050f8 <_printf_i+0x12c>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	079b      	lsls	r3, r3, #30
 80051a6:	d413      	bmi.n	80051d0 <_printf_i+0x204>
 80051a8:	68e0      	ldr	r0, [r4, #12]
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	4298      	cmp	r0, r3
 80051ae:	bfb8      	it	lt
 80051b0:	4618      	movlt	r0, r3
 80051b2:	e7a3      	b.n	80050fc <_printf_i+0x130>
 80051b4:	2301      	movs	r3, #1
 80051b6:	464a      	mov	r2, r9
 80051b8:	4639      	mov	r1, r7
 80051ba:	4630      	mov	r0, r6
 80051bc:	47c0      	blx	r8
 80051be:	3001      	adds	r0, #1
 80051c0:	d09a      	beq.n	80050f8 <_printf_i+0x12c>
 80051c2:	3501      	adds	r5, #1
 80051c4:	68e3      	ldr	r3, [r4, #12]
 80051c6:	9a03      	ldr	r2, [sp, #12]
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	42ab      	cmp	r3, r5
 80051cc:	dcf2      	bgt.n	80051b4 <_printf_i+0x1e8>
 80051ce:	e7eb      	b.n	80051a8 <_printf_i+0x1dc>
 80051d0:	2500      	movs	r5, #0
 80051d2:	f104 0919 	add.w	r9, r4, #25
 80051d6:	e7f5      	b.n	80051c4 <_printf_i+0x1f8>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ac      	bne.n	8005136 <_printf_i+0x16a>
 80051dc:	7803      	ldrb	r3, [r0, #0]
 80051de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e6:	e76c      	b.n	80050c2 <_printf_i+0xf6>
 80051e8:	080059a1 	.word	0x080059a1
 80051ec:	080059b2 	.word	0x080059b2

080051f0 <_sbrk_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4c06      	ldr	r4, [pc, #24]	; (800520c <_sbrk_r+0x1c>)
 80051f4:	2300      	movs	r3, #0
 80051f6:	4605      	mov	r5, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	f7ff fb4a 	bl	8004894 <_sbrk>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_sbrk_r+0x1a>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	b103      	cbz	r3, 800520a <_sbrk_r+0x1a>
 8005208:	602b      	str	r3, [r5, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20000200 	.word	0x20000200

08005210 <__sread>:
 8005210:	b510      	push	{r4, lr}
 8005212:	460c      	mov	r4, r1
 8005214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005218:	f000 fa96 	bl	8005748 <_read_r>
 800521c:	2800      	cmp	r0, #0
 800521e:	bfab      	itete	ge
 8005220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005222:	89a3      	ldrhlt	r3, [r4, #12]
 8005224:	181b      	addge	r3, r3, r0
 8005226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800522a:	bfac      	ite	ge
 800522c:	6563      	strge	r3, [r4, #84]	; 0x54
 800522e:	81a3      	strhlt	r3, [r4, #12]
 8005230:	bd10      	pop	{r4, pc}

08005232 <__swrite>:
 8005232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005236:	461f      	mov	r7, r3
 8005238:	898b      	ldrh	r3, [r1, #12]
 800523a:	05db      	lsls	r3, r3, #23
 800523c:	4605      	mov	r5, r0
 800523e:	460c      	mov	r4, r1
 8005240:	4616      	mov	r6, r2
 8005242:	d505      	bpl.n	8005250 <__swrite+0x1e>
 8005244:	2302      	movs	r3, #2
 8005246:	2200      	movs	r2, #0
 8005248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524c:	f000 f9b6 	bl	80055bc <_lseek_r>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800525a:	81a3      	strh	r3, [r4, #12]
 800525c:	4632      	mov	r2, r6
 800525e:	463b      	mov	r3, r7
 8005260:	4628      	mov	r0, r5
 8005262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005266:	f000 b869 	b.w	800533c <_write_r>

0800526a <__sseek>:
 800526a:	b510      	push	{r4, lr}
 800526c:	460c      	mov	r4, r1
 800526e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005272:	f000 f9a3 	bl	80055bc <_lseek_r>
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	bf15      	itete	ne
 800527c:	6560      	strne	r0, [r4, #84]	; 0x54
 800527e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005286:	81a3      	strheq	r3, [r4, #12]
 8005288:	bf18      	it	ne
 800528a:	81a3      	strhne	r3, [r4, #12]
 800528c:	bd10      	pop	{r4, pc}

0800528e <__sclose>:
 800528e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005292:	f000 b8d3 	b.w	800543c <_close_r>
	...

08005298 <__swbuf_r>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	460e      	mov	r6, r1
 800529c:	4614      	mov	r4, r2
 800529e:	4605      	mov	r5, r0
 80052a0:	b118      	cbz	r0, 80052aa <__swbuf_r+0x12>
 80052a2:	6983      	ldr	r3, [r0, #24]
 80052a4:	b90b      	cbnz	r3, 80052aa <__swbuf_r+0x12>
 80052a6:	f7ff fbf7 	bl	8004a98 <__sinit>
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <__swbuf_r+0x98>)
 80052ac:	429c      	cmp	r4, r3
 80052ae:	d12a      	bne.n	8005306 <__swbuf_r+0x6e>
 80052b0:	686c      	ldr	r4, [r5, #4]
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	071a      	lsls	r2, r3, #28
 80052ba:	d52e      	bpl.n	800531a <__swbuf_r+0x82>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	b363      	cbz	r3, 800531a <__swbuf_r+0x82>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	1ac0      	subs	r0, r0, r3
 80052c6:	6963      	ldr	r3, [r4, #20]
 80052c8:	b2f6      	uxtb	r6, r6
 80052ca:	4283      	cmp	r3, r0
 80052cc:	4637      	mov	r7, r6
 80052ce:	dc04      	bgt.n	80052da <__swbuf_r+0x42>
 80052d0:	4621      	mov	r1, r4
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 f948 	bl	8005568 <_fflush_r>
 80052d8:	bb28      	cbnz	r0, 8005326 <__swbuf_r+0x8e>
 80052da:	68a3      	ldr	r3, [r4, #8]
 80052dc:	3b01      	subs	r3, #1
 80052de:	60a3      	str	r3, [r4, #8]
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	6022      	str	r2, [r4, #0]
 80052e6:	701e      	strb	r6, [r3, #0]
 80052e8:	6963      	ldr	r3, [r4, #20]
 80052ea:	3001      	adds	r0, #1
 80052ec:	4283      	cmp	r3, r0
 80052ee:	d004      	beq.n	80052fa <__swbuf_r+0x62>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	07db      	lsls	r3, r3, #31
 80052f4:	d519      	bpl.n	800532a <__swbuf_r+0x92>
 80052f6:	2e0a      	cmp	r6, #10
 80052f8:	d117      	bne.n	800532a <__swbuf_r+0x92>
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f933 	bl	8005568 <_fflush_r>
 8005302:	b190      	cbz	r0, 800532a <__swbuf_r+0x92>
 8005304:	e00f      	b.n	8005326 <__swbuf_r+0x8e>
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <__swbuf_r+0x9c>)
 8005308:	429c      	cmp	r4, r3
 800530a:	d101      	bne.n	8005310 <__swbuf_r+0x78>
 800530c:	68ac      	ldr	r4, [r5, #8]
 800530e:	e7d0      	b.n	80052b2 <__swbuf_r+0x1a>
 8005310:	4b09      	ldr	r3, [pc, #36]	; (8005338 <__swbuf_r+0xa0>)
 8005312:	429c      	cmp	r4, r3
 8005314:	bf08      	it	eq
 8005316:	68ec      	ldreq	r4, [r5, #12]
 8005318:	e7cb      	b.n	80052b2 <__swbuf_r+0x1a>
 800531a:	4621      	mov	r1, r4
 800531c:	4628      	mov	r0, r5
 800531e:	f000 f81f 	bl	8005360 <__swsetup_r>
 8005322:	2800      	cmp	r0, #0
 8005324:	d0cc      	beq.n	80052c0 <__swbuf_r+0x28>
 8005326:	f04f 37ff 	mov.w	r7, #4294967295
 800532a:	4638      	mov	r0, r7
 800532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532e:	bf00      	nop
 8005330:	08005950 	.word	0x08005950
 8005334:	08005970 	.word	0x08005970
 8005338:	08005930 	.word	0x08005930

0800533c <_write_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4c07      	ldr	r4, [pc, #28]	; (800535c <_write_r+0x20>)
 8005340:	4605      	mov	r5, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fe fe8c 	bl	8004068 <_write>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_write_r+0x1e>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	b103      	cbz	r3, 800535a <_write_r+0x1e>
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000200 	.word	0x20000200

08005360 <__swsetup_r>:
 8005360:	4b32      	ldr	r3, [pc, #200]	; (800542c <__swsetup_r+0xcc>)
 8005362:	b570      	push	{r4, r5, r6, lr}
 8005364:	681d      	ldr	r5, [r3, #0]
 8005366:	4606      	mov	r6, r0
 8005368:	460c      	mov	r4, r1
 800536a:	b125      	cbz	r5, 8005376 <__swsetup_r+0x16>
 800536c:	69ab      	ldr	r3, [r5, #24]
 800536e:	b913      	cbnz	r3, 8005376 <__swsetup_r+0x16>
 8005370:	4628      	mov	r0, r5
 8005372:	f7ff fb91 	bl	8004a98 <__sinit>
 8005376:	4b2e      	ldr	r3, [pc, #184]	; (8005430 <__swsetup_r+0xd0>)
 8005378:	429c      	cmp	r4, r3
 800537a:	d10f      	bne.n	800539c <__swsetup_r+0x3c>
 800537c:	686c      	ldr	r4, [r5, #4]
 800537e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005382:	b29a      	uxth	r2, r3
 8005384:	0715      	lsls	r5, r2, #28
 8005386:	d42c      	bmi.n	80053e2 <__swsetup_r+0x82>
 8005388:	06d0      	lsls	r0, r2, #27
 800538a:	d411      	bmi.n	80053b0 <__swsetup_r+0x50>
 800538c:	2209      	movs	r2, #9
 800538e:	6032      	str	r2, [r6, #0]
 8005390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	f04f 30ff 	mov.w	r0, #4294967295
 800539a:	e03e      	b.n	800541a <__swsetup_r+0xba>
 800539c:	4b25      	ldr	r3, [pc, #148]	; (8005434 <__swsetup_r+0xd4>)
 800539e:	429c      	cmp	r4, r3
 80053a0:	d101      	bne.n	80053a6 <__swsetup_r+0x46>
 80053a2:	68ac      	ldr	r4, [r5, #8]
 80053a4:	e7eb      	b.n	800537e <__swsetup_r+0x1e>
 80053a6:	4b24      	ldr	r3, [pc, #144]	; (8005438 <__swsetup_r+0xd8>)
 80053a8:	429c      	cmp	r4, r3
 80053aa:	bf08      	it	eq
 80053ac:	68ec      	ldreq	r4, [r5, #12]
 80053ae:	e7e6      	b.n	800537e <__swsetup_r+0x1e>
 80053b0:	0751      	lsls	r1, r2, #29
 80053b2:	d512      	bpl.n	80053da <__swsetup_r+0x7a>
 80053b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b6:	b141      	cbz	r1, 80053ca <__swsetup_r+0x6a>
 80053b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053bc:	4299      	cmp	r1, r3
 80053be:	d002      	beq.n	80053c6 <__swsetup_r+0x66>
 80053c0:	4630      	mov	r0, r6
 80053c2:	f000 f973 	bl	80056ac <_free_r>
 80053c6:	2300      	movs	r3, #0
 80053c8:	6363      	str	r3, [r4, #52]	; 0x34
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	2300      	movs	r3, #0
 80053d4:	6063      	str	r3, [r4, #4]
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	b94b      	cbnz	r3, 80053fa <__swsetup_r+0x9a>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f0:	d003      	beq.n	80053fa <__swsetup_r+0x9a>
 80053f2:	4621      	mov	r1, r4
 80053f4:	4630      	mov	r0, r6
 80053f6:	f000 f917 	bl	8005628 <__smakebuf_r>
 80053fa:	89a2      	ldrh	r2, [r4, #12]
 80053fc:	f012 0301 	ands.w	r3, r2, #1
 8005400:	d00c      	beq.n	800541c <__swsetup_r+0xbc>
 8005402:	2300      	movs	r3, #0
 8005404:	60a3      	str	r3, [r4, #8]
 8005406:	6963      	ldr	r3, [r4, #20]
 8005408:	425b      	negs	r3, r3
 800540a:	61a3      	str	r3, [r4, #24]
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	b953      	cbnz	r3, 8005426 <__swsetup_r+0xc6>
 8005410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005414:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005418:	d1ba      	bne.n	8005390 <__swsetup_r+0x30>
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	0792      	lsls	r2, r2, #30
 800541e:	bf58      	it	pl
 8005420:	6963      	ldrpl	r3, [r4, #20]
 8005422:	60a3      	str	r3, [r4, #8]
 8005424:	e7f2      	b.n	800540c <__swsetup_r+0xac>
 8005426:	2000      	movs	r0, #0
 8005428:	e7f7      	b.n	800541a <__swsetup_r+0xba>
 800542a:	bf00      	nop
 800542c:	20000010 	.word	0x20000010
 8005430:	08005950 	.word	0x08005950
 8005434:	08005970 	.word	0x08005970
 8005438:	08005930 	.word	0x08005930

0800543c <_close_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4c06      	ldr	r4, [pc, #24]	; (8005458 <_close_r+0x1c>)
 8005440:	2300      	movs	r3, #0
 8005442:	4605      	mov	r5, r0
 8005444:	4608      	mov	r0, r1
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	f7ff f9ef 	bl	800482a <_close>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d102      	bne.n	8005456 <_close_r+0x1a>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	b103      	cbz	r3, 8005456 <_close_r+0x1a>
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	20000200 	.word	0x20000200

0800545c <__sflush_r>:
 800545c:	898a      	ldrh	r2, [r1, #12]
 800545e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005462:	4605      	mov	r5, r0
 8005464:	0710      	lsls	r0, r2, #28
 8005466:	460c      	mov	r4, r1
 8005468:	d458      	bmi.n	800551c <__sflush_r+0xc0>
 800546a:	684b      	ldr	r3, [r1, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	dc05      	bgt.n	800547c <__sflush_r+0x20>
 8005470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	dc02      	bgt.n	800547c <__sflush_r+0x20>
 8005476:	2000      	movs	r0, #0
 8005478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800547c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800547e:	2e00      	cmp	r6, #0
 8005480:	d0f9      	beq.n	8005476 <__sflush_r+0x1a>
 8005482:	2300      	movs	r3, #0
 8005484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005488:	682f      	ldr	r7, [r5, #0]
 800548a:	6a21      	ldr	r1, [r4, #32]
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	d032      	beq.n	80054f6 <__sflush_r+0x9a>
 8005490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	075a      	lsls	r2, r3, #29
 8005496:	d505      	bpl.n	80054a4 <__sflush_r+0x48>
 8005498:	6863      	ldr	r3, [r4, #4]
 800549a:	1ac0      	subs	r0, r0, r3
 800549c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800549e:	b10b      	cbz	r3, 80054a4 <__sflush_r+0x48>
 80054a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a2:	1ac0      	subs	r0, r0, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	4602      	mov	r2, r0
 80054a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054aa:	6a21      	ldr	r1, [r4, #32]
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b0      	blx	r6
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	d106      	bne.n	80054c4 <__sflush_r+0x68>
 80054b6:	6829      	ldr	r1, [r5, #0]
 80054b8:	291d      	cmp	r1, #29
 80054ba:	d848      	bhi.n	800554e <__sflush_r+0xf2>
 80054bc:	4a29      	ldr	r2, [pc, #164]	; (8005564 <__sflush_r+0x108>)
 80054be:	40ca      	lsrs	r2, r1
 80054c0:	07d6      	lsls	r6, r2, #31
 80054c2:	d544      	bpl.n	800554e <__sflush_r+0xf2>
 80054c4:	2200      	movs	r2, #0
 80054c6:	6062      	str	r2, [r4, #4]
 80054c8:	04d9      	lsls	r1, r3, #19
 80054ca:	6922      	ldr	r2, [r4, #16]
 80054cc:	6022      	str	r2, [r4, #0]
 80054ce:	d504      	bpl.n	80054da <__sflush_r+0x7e>
 80054d0:	1c42      	adds	r2, r0, #1
 80054d2:	d101      	bne.n	80054d8 <__sflush_r+0x7c>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b903      	cbnz	r3, 80054da <__sflush_r+0x7e>
 80054d8:	6560      	str	r0, [r4, #84]	; 0x54
 80054da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054dc:	602f      	str	r7, [r5, #0]
 80054de:	2900      	cmp	r1, #0
 80054e0:	d0c9      	beq.n	8005476 <__sflush_r+0x1a>
 80054e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e6:	4299      	cmp	r1, r3
 80054e8:	d002      	beq.n	80054f0 <__sflush_r+0x94>
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 f8de 	bl	80056ac <_free_r>
 80054f0:	2000      	movs	r0, #0
 80054f2:	6360      	str	r0, [r4, #52]	; 0x34
 80054f4:	e7c0      	b.n	8005478 <__sflush_r+0x1c>
 80054f6:	2301      	movs	r3, #1
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b0      	blx	r6
 80054fc:	1c41      	adds	r1, r0, #1
 80054fe:	d1c8      	bne.n	8005492 <__sflush_r+0x36>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0c5      	beq.n	8005492 <__sflush_r+0x36>
 8005506:	2b1d      	cmp	r3, #29
 8005508:	d001      	beq.n	800550e <__sflush_r+0xb2>
 800550a:	2b16      	cmp	r3, #22
 800550c:	d101      	bne.n	8005512 <__sflush_r+0xb6>
 800550e:	602f      	str	r7, [r5, #0]
 8005510:	e7b1      	b.n	8005476 <__sflush_r+0x1a>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	e7ad      	b.n	8005478 <__sflush_r+0x1c>
 800551c:	690f      	ldr	r7, [r1, #16]
 800551e:	2f00      	cmp	r7, #0
 8005520:	d0a9      	beq.n	8005476 <__sflush_r+0x1a>
 8005522:	0793      	lsls	r3, r2, #30
 8005524:	680e      	ldr	r6, [r1, #0]
 8005526:	bf08      	it	eq
 8005528:	694b      	ldreq	r3, [r1, #20]
 800552a:	600f      	str	r7, [r1, #0]
 800552c:	bf18      	it	ne
 800552e:	2300      	movne	r3, #0
 8005530:	eba6 0807 	sub.w	r8, r6, r7
 8005534:	608b      	str	r3, [r1, #8]
 8005536:	f1b8 0f00 	cmp.w	r8, #0
 800553a:	dd9c      	ble.n	8005476 <__sflush_r+0x1a>
 800553c:	4643      	mov	r3, r8
 800553e:	463a      	mov	r2, r7
 8005540:	6a21      	ldr	r1, [r4, #32]
 8005542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005544:	4628      	mov	r0, r5
 8005546:	47b0      	blx	r6
 8005548:	2800      	cmp	r0, #0
 800554a:	dc06      	bgt.n	800555a <__sflush_r+0xfe>
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	e78e      	b.n	8005478 <__sflush_r+0x1c>
 800555a:	4407      	add	r7, r0
 800555c:	eba8 0800 	sub.w	r8, r8, r0
 8005560:	e7e9      	b.n	8005536 <__sflush_r+0xda>
 8005562:	bf00      	nop
 8005564:	20400001 	.word	0x20400001

08005568 <_fflush_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	690b      	ldr	r3, [r1, #16]
 800556c:	4605      	mov	r5, r0
 800556e:	460c      	mov	r4, r1
 8005570:	b1db      	cbz	r3, 80055aa <_fflush_r+0x42>
 8005572:	b118      	cbz	r0, 800557c <_fflush_r+0x14>
 8005574:	6983      	ldr	r3, [r0, #24]
 8005576:	b90b      	cbnz	r3, 800557c <_fflush_r+0x14>
 8005578:	f7ff fa8e 	bl	8004a98 <__sinit>
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <_fflush_r+0x48>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d109      	bne.n	8005596 <_fflush_r+0x2e>
 8005582:	686c      	ldr	r4, [r5, #4]
 8005584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005588:	b17b      	cbz	r3, 80055aa <_fflush_r+0x42>
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005592:	f7ff bf63 	b.w	800545c <__sflush_r>
 8005596:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <_fflush_r+0x4c>)
 8005598:	429c      	cmp	r4, r3
 800559a:	d101      	bne.n	80055a0 <_fflush_r+0x38>
 800559c:	68ac      	ldr	r4, [r5, #8]
 800559e:	e7f1      	b.n	8005584 <_fflush_r+0x1c>
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <_fflush_r+0x50>)
 80055a2:	429c      	cmp	r4, r3
 80055a4:	bf08      	it	eq
 80055a6:	68ec      	ldreq	r4, [r5, #12]
 80055a8:	e7ec      	b.n	8005584 <_fflush_r+0x1c>
 80055aa:	2000      	movs	r0, #0
 80055ac:	bd38      	pop	{r3, r4, r5, pc}
 80055ae:	bf00      	nop
 80055b0:	08005950 	.word	0x08005950
 80055b4:	08005970 	.word	0x08005970
 80055b8:	08005930 	.word	0x08005930

080055bc <_lseek_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4c07      	ldr	r4, [pc, #28]	; (80055dc <_lseek_r+0x20>)
 80055c0:	4605      	mov	r5, r0
 80055c2:	4608      	mov	r0, r1
 80055c4:	4611      	mov	r1, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f7ff f954 	bl	8004878 <_lseek>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_lseek_r+0x1e>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	b103      	cbz	r3, 80055da <_lseek_r+0x1e>
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000200 	.word	0x20000200

080055e0 <__swhatbuf_r>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	460e      	mov	r6, r1
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	2900      	cmp	r1, #0
 80055ea:	b096      	sub	sp, #88	; 0x58
 80055ec:	4614      	mov	r4, r2
 80055ee:	461d      	mov	r5, r3
 80055f0:	da07      	bge.n	8005602 <__swhatbuf_r+0x22>
 80055f2:	2300      	movs	r3, #0
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	89b3      	ldrh	r3, [r6, #12]
 80055f8:	061a      	lsls	r2, r3, #24
 80055fa:	d410      	bmi.n	800561e <__swhatbuf_r+0x3e>
 80055fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005600:	e00e      	b.n	8005620 <__swhatbuf_r+0x40>
 8005602:	466a      	mov	r2, sp
 8005604:	f000 f8b2 	bl	800576c <_fstat_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	dbf2      	blt.n	80055f2 <__swhatbuf_r+0x12>
 800560c:	9a01      	ldr	r2, [sp, #4]
 800560e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005612:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005616:	425a      	negs	r2, r3
 8005618:	415a      	adcs	r2, r3
 800561a:	602a      	str	r2, [r5, #0]
 800561c:	e7ee      	b.n	80055fc <__swhatbuf_r+0x1c>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	2000      	movs	r0, #0
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	b016      	add	sp, #88	; 0x58
 8005626:	bd70      	pop	{r4, r5, r6, pc}

08005628 <__smakebuf_r>:
 8005628:	898b      	ldrh	r3, [r1, #12]
 800562a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800562c:	079d      	lsls	r5, r3, #30
 800562e:	4606      	mov	r6, r0
 8005630:	460c      	mov	r4, r1
 8005632:	d507      	bpl.n	8005644 <__smakebuf_r+0x1c>
 8005634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	2301      	movs	r3, #1
 800563e:	6163      	str	r3, [r4, #20]
 8005640:	b002      	add	sp, #8
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	ab01      	add	r3, sp, #4
 8005646:	466a      	mov	r2, sp
 8005648:	f7ff ffca 	bl	80055e0 <__swhatbuf_r>
 800564c:	9900      	ldr	r1, [sp, #0]
 800564e:	4605      	mov	r5, r0
 8005650:	4630      	mov	r0, r6
 8005652:	f7ff faab 	bl	8004bac <_malloc_r>
 8005656:	b948      	cbnz	r0, 800566c <__smakebuf_r+0x44>
 8005658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800565c:	059a      	lsls	r2, r3, #22
 800565e:	d4ef      	bmi.n	8005640 <__smakebuf_r+0x18>
 8005660:	f023 0303 	bic.w	r3, r3, #3
 8005664:	f043 0302 	orr.w	r3, r3, #2
 8005668:	81a3      	strh	r3, [r4, #12]
 800566a:	e7e3      	b.n	8005634 <__smakebuf_r+0xc>
 800566c:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <__smakebuf_r+0x7c>)
 800566e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	6020      	str	r0, [r4, #0]
 8005674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005678:	81a3      	strh	r3, [r4, #12]
 800567a:	9b00      	ldr	r3, [sp, #0]
 800567c:	6163      	str	r3, [r4, #20]
 800567e:	9b01      	ldr	r3, [sp, #4]
 8005680:	6120      	str	r0, [r4, #16]
 8005682:	b15b      	cbz	r3, 800569c <__smakebuf_r+0x74>
 8005684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005688:	4630      	mov	r0, r6
 800568a:	f000 f881 	bl	8005790 <_isatty_r>
 800568e:	b128      	cbz	r0, 800569c <__smakebuf_r+0x74>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	431d      	orrs	r5, r3
 80056a0:	81a5      	strh	r5, [r4, #12]
 80056a2:	e7cd      	b.n	8005640 <__smakebuf_r+0x18>
 80056a4:	08004a61 	.word	0x08004a61

080056a8 <__malloc_lock>:
 80056a8:	4770      	bx	lr

080056aa <__malloc_unlock>:
 80056aa:	4770      	bx	lr

080056ac <_free_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4605      	mov	r5, r0
 80056b0:	2900      	cmp	r1, #0
 80056b2:	d045      	beq.n	8005740 <_free_r+0x94>
 80056b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b8:	1f0c      	subs	r4, r1, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bfb8      	it	lt
 80056be:	18e4      	addlt	r4, r4, r3
 80056c0:	f7ff fff2 	bl	80056a8 <__malloc_lock>
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <_free_r+0x98>)
 80056c6:	6813      	ldr	r3, [r2, #0]
 80056c8:	4610      	mov	r0, r2
 80056ca:	b933      	cbnz	r3, 80056da <_free_r+0x2e>
 80056cc:	6063      	str	r3, [r4, #4]
 80056ce:	6014      	str	r4, [r2, #0]
 80056d0:	4628      	mov	r0, r5
 80056d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056d6:	f7ff bfe8 	b.w	80056aa <__malloc_unlock>
 80056da:	42a3      	cmp	r3, r4
 80056dc:	d90c      	bls.n	80056f8 <_free_r+0x4c>
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	1862      	adds	r2, r4, r1
 80056e2:	4293      	cmp	r3, r2
 80056e4:	bf04      	itt	eq
 80056e6:	681a      	ldreq	r2, [r3, #0]
 80056e8:	685b      	ldreq	r3, [r3, #4]
 80056ea:	6063      	str	r3, [r4, #4]
 80056ec:	bf04      	itt	eq
 80056ee:	1852      	addeq	r2, r2, r1
 80056f0:	6022      	streq	r2, [r4, #0]
 80056f2:	6004      	str	r4, [r0, #0]
 80056f4:	e7ec      	b.n	80056d0 <_free_r+0x24>
 80056f6:	4613      	mov	r3, r2
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	b10a      	cbz	r2, 8005700 <_free_r+0x54>
 80056fc:	42a2      	cmp	r2, r4
 80056fe:	d9fa      	bls.n	80056f6 <_free_r+0x4a>
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	1858      	adds	r0, r3, r1
 8005704:	42a0      	cmp	r0, r4
 8005706:	d10b      	bne.n	8005720 <_free_r+0x74>
 8005708:	6820      	ldr	r0, [r4, #0]
 800570a:	4401      	add	r1, r0
 800570c:	1858      	adds	r0, r3, r1
 800570e:	4282      	cmp	r2, r0
 8005710:	6019      	str	r1, [r3, #0]
 8005712:	d1dd      	bne.n	80056d0 <_free_r+0x24>
 8005714:	6810      	ldr	r0, [r2, #0]
 8005716:	6852      	ldr	r2, [r2, #4]
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	4401      	add	r1, r0
 800571c:	6019      	str	r1, [r3, #0]
 800571e:	e7d7      	b.n	80056d0 <_free_r+0x24>
 8005720:	d902      	bls.n	8005728 <_free_r+0x7c>
 8005722:	230c      	movs	r3, #12
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	e7d3      	b.n	80056d0 <_free_r+0x24>
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	1821      	adds	r1, r4, r0
 800572c:	428a      	cmp	r2, r1
 800572e:	bf04      	itt	eq
 8005730:	6811      	ldreq	r1, [r2, #0]
 8005732:	6852      	ldreq	r2, [r2, #4]
 8005734:	6062      	str	r2, [r4, #4]
 8005736:	bf04      	itt	eq
 8005738:	1809      	addeq	r1, r1, r0
 800573a:	6021      	streq	r1, [r4, #0]
 800573c:	605c      	str	r4, [r3, #4]
 800573e:	e7c7      	b.n	80056d0 <_free_r+0x24>
 8005740:	bd38      	pop	{r3, r4, r5, pc}
 8005742:	bf00      	nop
 8005744:	20000098 	.word	0x20000098

08005748 <_read_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4c07      	ldr	r4, [pc, #28]	; (8005768 <_read_r+0x20>)
 800574c:	4605      	mov	r5, r0
 800574e:	4608      	mov	r0, r1
 8005750:	4611      	mov	r1, r2
 8005752:	2200      	movs	r2, #0
 8005754:	6022      	str	r2, [r4, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f7ff f84a 	bl	80047f0 <_read>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_read_r+0x1e>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	b103      	cbz	r3, 8005766 <_read_r+0x1e>
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000200 	.word	0x20000200

0800576c <_fstat_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4c07      	ldr	r4, [pc, #28]	; (800578c <_fstat_r+0x20>)
 8005770:	2300      	movs	r3, #0
 8005772:	4605      	mov	r5, r0
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	f7ff f862 	bl	8004842 <_fstat>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	d102      	bne.n	8005788 <_fstat_r+0x1c>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	b103      	cbz	r3, 8005788 <_fstat_r+0x1c>
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	bd38      	pop	{r3, r4, r5, pc}
 800578a:	bf00      	nop
 800578c:	20000200 	.word	0x20000200

08005790 <_isatty_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4c06      	ldr	r4, [pc, #24]	; (80057ac <_isatty_r+0x1c>)
 8005794:	2300      	movs	r3, #0
 8005796:	4605      	mov	r5, r0
 8005798:	4608      	mov	r0, r1
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	f7ff f861 	bl	8004862 <_isatty>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_isatty_r+0x1a>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_isatty_r+0x1a>
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000200 	.word	0x20000200

080057b0 <_init>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	bf00      	nop
 80057b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b6:	bc08      	pop	{r3}
 80057b8:	469e      	mov	lr, r3
 80057ba:	4770      	bx	lr

080057bc <_fini>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr
