
test_uart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048fc  080048fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080048fc  080048fc  000148fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004904  08004904  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800490c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001dc  08004ae8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004ae8  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000894a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001763  00000000  00000000  00028b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  0002a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000620  00000000  00000000  0002a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000166a1  00000000  00000000  0002afc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a22  00000000  00000000  00041669  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085ac5  00000000  00000000  0004808b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdb50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a0  00000000  00000000  000cdbcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046e8 	.word	0x080046e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080046e8 	.word	0x080046e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fb28 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f81e 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8b2 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f886 	bl	80006a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x38>)
 8000596:	f000 f931 	bl	80007fc <RetargetInit>
  HAL_UART_Receive_IT(&huart2, RxData, 1);
 800059a:	2201      	movs	r2, #1
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <main+0x3c>)
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x38>)
 80005a0:	f001 fc6c 	bl	8001e7c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//   HAL_UART_Transmit(&huart2, pData, Size, Timeout)
	printf("\r\nHas escrito: %s\r\n", buf);
 80005a4:	4906      	ldr	r1, [pc, #24]	; (80005c0 <main+0x40>)
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <main+0x44>)
 80005a8:	f002 faf6 	bl	8002b98 <iprintf>
	HAL_Delay(2000);
 80005ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b0:	f000 fb84 	bl	8000cbc <HAL_Delay>
	printf("\r\nHas escrito: %s\r\n", buf);
 80005b4:	e7f6      	b.n	80005a4 <main+0x24>
 80005b6:	bf00      	nop
 80005b8:	20000224 	.word	0x20000224
 80005bc:	20000218 	.word	0x20000218
 80005c0:	20000204 	.word	0x20000204
 80005c4:	08004700 	.word	0x08004700

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fad6 	bl	8002b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a28      	ldr	r2, [pc, #160]	; (8000698 <SystemClock_Config+0xd0>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd4>)
 8000616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fe24 	bl	80012a0 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065e:	f000 f8c5 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f87e 	bl	8001780 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068a:	f000 f8af 	bl	80007ec <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 fa44 	bl	8001b64 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f883 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000224 	.word	0x20000224
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <MX_GPIO_Init+0xd0>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_GPIO_Init+0xd4>)
 8000780:	f000 fd74 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_GPIO_Init+0xd8>)
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800079a:	f000 fbe5 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800079e:	2320      	movs	r3, #32
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0xd4>)
 80007b6:	f000 fbd7 	bl	8000f68 <HAL_GPIO_Init>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	10210000 	.word	0x10210000
 80007d0:	40020800 	.word	0x40020800

080007d4 <write_something>:

/* USER CODE BEGIN 4 */
void write_something(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	scanf("%s", buf);
 80007d8:	4902      	ldr	r1, [pc, #8]	; (80007e4 <write_something+0x10>)
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <write_something+0x14>)
 80007dc:	f002 f9f4 	bl	8002bc8 <iscanf>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000204 	.word	0x20000204
 80007e8:	08004714 	.word	0x08004714

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <RetargetInit+0x28>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <RetargetInit+0x2c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6898      	ldr	r0, [r3, #8]
 8000810:	2300      	movs	r3, #0
 8000812:	2202      	movs	r2, #2
 8000814:	2100      	movs	r1, #0
 8000816:	f002 f9ef 	bl	8002bf8 <setvbuf>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000264 	.word	0x20000264
 8000828:	2000000c 	.word	0x2000000c

0800082c <_isatty>:

int _isatty(int fd) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db04      	blt.n	8000844 <_isatty+0x18>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b02      	cmp	r3, #2
 800083e:	dc01      	bgt.n	8000844 <_isatty+0x18>
    return 1;
 8000840:	2301      	movs	r3, #1
 8000842:	e005      	b.n	8000850 <_isatty+0x24>

  errno = EBADF;
 8000844:	f002 f976 	bl	8002b34 <__errno>
 8000848:	4602      	mov	r2, r0
 800084a:	2309      	movs	r3, #9
 800084c:	6013      	str	r3, [r2, #0]
  return 0;
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_write>:

int _write(int fd, char* ptr, int len) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d002      	beq.n	8000870 <_write+0x18>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d111      	bne.n	8000894 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <_write+0x54>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b29a      	uxth	r2, r3
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	f001 f9be 	bl	8001bfe <HAL_UART_Transmit>
 8000882:	4603      	mov	r3, r0
 8000884:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <_write+0x38>
      return len;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	e008      	b.n	80008a2 <_write+0x4a>
    else
      return EIO;
 8000890:	2305      	movs	r3, #5
 8000892:	e006      	b.n	80008a2 <_write+0x4a>
  }
  errno = EBADF;
 8000894:	f002 f94e 	bl	8002b34 <__errno>
 8000898:	4602      	mov	r2, r0
 800089a:	2309      	movs	r3, #9
 800089c:	6013      	str	r3, [r2, #0]
  return -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000264 	.word	0x20000264

080008b0 <_close>:

int _close(int fd) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db04      	blt.n	80008c8 <_close+0x18>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	dc01      	bgt.n	80008c8 <_close+0x18>
    return 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	e006      	b.n	80008d6 <_close+0x26>

  errno = EBADF;
 80008c8:	f002 f934 	bl	8002b34 <__errno>
 80008cc:	4602      	mov	r2, r0
 80008ce:	2309      	movs	r3, #9
 80008d0:	6013      	str	r3, [r2, #0]
  return -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80008ea:	f002 f923 	bl	8002b34 <__errno>
 80008ee:	4602      	mov	r2, r0
 80008f0:	2309      	movs	r3, #9
 80008f2:	6013      	str	r3, [r2, #0]
  return -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_read>:

int _read(int fd, char* ptr, int len) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d110      	bne.n	8000934 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <_read+0x4c>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	2201      	movs	r2, #1
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	f001 fa07 	bl	8001d30 <HAL_UART_Receive>
 8000922:	4603      	mov	r3, r0
 8000924:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <_read+0x30>
      return 1;
 800092c:	2301      	movs	r3, #1
 800092e:	e008      	b.n	8000942 <_read+0x42>
    else
      return EIO;
 8000930:	2305      	movs	r3, #5
 8000932:	e006      	b.n	8000942 <_read+0x42>
  }
  errno = EBADF;
 8000934:	f002 f8fe 	bl	8002b34 <__errno>
 8000938:	4602      	mov	r2, r0
 800093a:	2309      	movs	r3, #9
 800093c:	6013      	str	r3, [r2, #0]
  return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000264 	.word	0x20000264

08000950 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db08      	blt.n	8000972 <_fstat+0x22>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b02      	cmp	r3, #2
 8000964:	dc05      	bgt.n	8000972 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096c:	605a      	str	r2, [r3, #4]
    return 0;
 800096e:	2300      	movs	r3, #0
 8000970:	e005      	b.n	800097e <_fstat+0x2e>
  }

  errno = EBADF;
 8000972:	f002 f8df 	bl	8002b34 <__errno>
 8000976:	4602      	mov	r2, r0
 8000978:	2309      	movs	r3, #9
 800097a:	6013      	str	r3, [r2, #0]
  return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c6:	2007      	movs	r0, #7
 80009c8:	f000 fa6a 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <HAL_UART_MspInit+0x94>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d133      	bne.n	8000a62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a32:	230c      	movs	r3, #12
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a42:	2307      	movs	r3, #7
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_UART_MspInit+0x9c>)
 8000a4e:	f000 fa8b 	bl	8000f68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2026      	movs	r0, #38	; 0x26
 8000a58:	f000 fa2d 	bl	8000eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5c:	2026      	movs	r0, #38	; 0x26
 8000a5e:	f000 fa46 	bl	8000eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f8d6 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <USART2_IRQHandler+0x14>)
 8000ada:	f001 fa25 	bl	8001f28 <HAL_UART_IRQHandler>
  write_something();
 8000ade:	f7ff fe79 	bl	80007d4 <write_something>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000224 	.word	0x20000224

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f002 f80a 	bl	8002b34 <__errno>
 8000b20:	4602      	mov	r2, r0
 8000b22:	230c      	movs	r3, #12
 8000b24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20018000 	.word	0x20018000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	200001f8 	.word	0x200001f8
 8000b54:	20000270 	.word	0x20000270

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <SystemInit+0x28>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <SystemInit+0x28>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SystemInit+0x28>)
 8000b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b72:	609a      	str	r2, [r3, #8]
#endif
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b8a:	e003      	b.n	8000b94 <LoopCopyDataInit>

08000b8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b92:	3104      	adds	r1, #4

08000b94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b9c:	d3f6      	bcc.n	8000b8c <CopyDataInit>
  ldr  r2, =_sbss
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ba0:	e002      	b.n	8000ba8 <LoopFillZerobss>

08000ba2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ba2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ba4:	f842 3b04 	str.w	r3, [r2], #4

08000ba8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000baa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bac:	d3f9      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bae:	f7ff ffd3 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f001 ffc5 	bl	8002b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fce3 	bl	8000580 <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bbc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000bc0:	0800490c 	.word	0x0800490c
  ldr  r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bc8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000bcc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000bd0:	20000270 	.word	0x20000270

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f94d 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f808 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff febc 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x54>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x58>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f965 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00e      	b.n	8000c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d80a      	bhi.n	8000c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f92d 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <HAL_InitTick+0x5c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e000      	b.n	8000c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000268 	.word	0x20000268

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000268 	.word	0x20000268

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff ffee 	bl	8000ca4 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_Delay+0x40>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffde 	bl	8000ca4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000008 	.word	0x20000008

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f7ff ff8e 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff29 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff3e 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff8e 	bl	8000df4 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5d 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff31 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa2 	bl	8000e5c <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d004      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e00c      	b.n	8000f5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2205      	movs	r2, #5
 8000f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0201 	bic.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	e159      	b.n	8001238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 8148 	bne.w	8001232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_GPIO_Init+0x5a>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb6:	2b11      	cmp	r3, #17
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0xfc>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b12      	cmp	r3, #18
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80a2 	beq.w	8001232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b56      	ldr	r3, [pc, #344]	; (800124c <HAL_GPIO_Init+0x2e4>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a55      	ldr	r2, [pc, #340]	; (800124c <HAL_GPIO_Init+0x2e4>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_GPIO_Init+0x2e4>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x2e8>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a48      	ldr	r2, [pc, #288]	; (8001254 <HAL_GPIO_Init+0x2ec>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x202>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a47      	ldr	r2, [pc, #284]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1fe>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a46      	ldr	r2, [pc, #280]	; (800125c <HAL_GPIO_Init+0x2f4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1fa>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a45      	ldr	r2, [pc, #276]	; (8001260 <HAL_GPIO_Init+0x2f8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1f6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a44      	ldr	r2, [pc, #272]	; (8001264 <HAL_GPIO_Init+0x2fc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1f2>
 8001156:	2304      	movs	r3, #4
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x204>
 800115a:	2307      	movs	r3, #7
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x204>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x204>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x204>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x204>
 800116a:	2300      	movs	r3, #0
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117c:	4934      	ldr	r1, [pc, #208]	; (8001250 <HAL_GPIO_Init+0x2e8>)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_GPIO_Init+0x300>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ae:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d8:	4a23      	ldr	r2, [pc, #140]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_GPIO_Init+0x300>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_GPIO_Init+0x300>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_GPIO_Init+0x300>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	f67f aea2 	bls.w	8000f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001240:	bf00      	nop
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e25b      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d075      	beq.n	80013aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	4ba3      	ldr	r3, [pc, #652]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d00c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4ba0      	ldr	r3, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b9d      	ldr	r3, [pc, #628]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d05b      	beq.n	80013a8 <HAL_RCC_OscConfig+0x108>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d157      	bne.n	80013a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e236      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x74>
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a90      	ldr	r2, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a8a      	ldr	r2, [pc, #552]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a87      	ldr	r2, [pc, #540]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a83      	ldr	r2, [pc, #524]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fca4 	bl	8000ca4 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fca0 	bl	8000ca4 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e1fb      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0xc0>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc90 	bl	8000ca4 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fc8c 	bl	8000ca4 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1e7      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xe8>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b62      	ldr	r3, [pc, #392]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1bb      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4952      	ldr	r1, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e03a      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fc45 	bl	8000ca4 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fc41 	bl	8000ca4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e19c      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4940      	ldr	r1, [pc, #256]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fc24 	bl	8000ca4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fc20 	bl	8000ca4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e17b      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d016      	beq.n	80014c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fc04 	bl	8000ca4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc00 	bl	8000ca4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e15b      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x200>
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fbed 	bl	8000ca4 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fbe9 	bl	8000ca4 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e144      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80a0 	beq.w	800163a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d121      	bne.n	800157a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fbaf 	bl	8000ca4 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e011      	b.n	800156e <HAL_RCC_OscConfig+0x2ce>
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	42470000 	.word	0x42470000
 8001554:	42470e80 	.word	0x42470e80
 8001558:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7ff fba2 	bl	8000ca4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0fd      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x4d4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x2f0>
 8001582:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a7c      	ldr	r2, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	e01c      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x312>
 8001598:	4b77      	ldr	r3, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a76      	ldr	r2, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	4b74      	ldr	r3, [pc, #464]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a73      	ldr	r2, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 80015b2:	4b71      	ldr	r3, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a70      	ldr	r2, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b6e      	ldr	r3, [pc, #440]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a6d      	ldr	r2, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb67 	bl	8000ca4 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fb63 	bl	8000ca4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0bc      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	4b61      	ldr	r3, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ee      	beq.n	80015da <HAL_RCC_OscConfig+0x33a>
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb51 	bl	8000ca4 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb4d 	bl	8000ca4 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0a6      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a51      	ldr	r2, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 8001634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8092 	beq.w	8001768 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d05c      	beq.n	800170a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d141      	bne.n	80016dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b48      	ldr	r3, [pc, #288]	; (800177c <HAL_RCC_OscConfig+0x4dc>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb21 	bl	8000ca4 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb1d 	bl	8000ca4 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e078      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001678:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	019b      	lsls	r3, r3, #6
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
 80016a8:	4933      	ldr	r1, [pc, #204]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_RCC_OscConfig+0x4dc>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff faf6 	bl	8000ca4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff faf2 	bl	8000ca4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e04d      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x41c>
 80016da:	e045      	b.n	8001768 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_RCC_OscConfig+0x4dc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fadf 	bl	8000ca4 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fadb 	bl	8000ca4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e036      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x44a>
 8001708:	e02e      	b.n	8001768 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e029      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_RCC_OscConfig+0x4d8>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	429a      	cmp	r2, r3
 8001728:	d11c      	bne.n	8001764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d115      	bne.n	8001764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001744:	4293      	cmp	r3, r2
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d106      	bne.n	8001764 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40007000 	.word	0x40007000
 8001778:	40023800 	.word	0x40023800
 800177c:	42470060 	.word	0x42470060

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0cc      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d90c      	bls.n	80017bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d044      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e067      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff fa18 	bl	8000ca4 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff fa14 	bl	8000ca4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e04f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d20c      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4601      	mov	r1, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	fa21 f303 	lsr.w	r3, r1, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f978 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	08004724 	.word	0x08004724
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d007      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x32>
 800196e:	2b08      	cmp	r3, #8
 8001970:	d008      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x38>
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80b4 	bne.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800197a:	60bb      	str	r3, [r7, #8]
       break;
 800197c:	e0b3      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001980:	60bb      	str	r3, [r7, #8]
      break;
 8001982:	e0b0      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800198c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198e:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d04a      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	ea03 0501 	and.w	r5, r3, r1
 80019b0:	ea04 0602 	and.w	r6, r4, r2
 80019b4:	4629      	mov	r1, r5
 80019b6:	4632      	mov	r2, r6
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	f04f 0400 	mov.w	r4, #0
 80019c0:	0154      	lsls	r4, r2, #5
 80019c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c6:	014b      	lsls	r3, r1, #5
 80019c8:	4619      	mov	r1, r3
 80019ca:	4622      	mov	r2, r4
 80019cc:	1b49      	subs	r1, r1, r5
 80019ce:	eb62 0206 	sbc.w	r2, r2, r6
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	f04f 0400 	mov.w	r4, #0
 80019da:	0194      	lsls	r4, r2, #6
 80019dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019e0:	018b      	lsls	r3, r1, #6
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	eb64 0402 	sbc.w	r4, r4, r2
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	00e2      	lsls	r2, r4, #3
 80019f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019f6:	00d9      	lsls	r1, r3, #3
 80019f8:	460b      	mov	r3, r1
 80019fa:	4614      	mov	r4, r2
 80019fc:	195b      	adds	r3, r3, r5
 80019fe:	eb44 0406 	adc.w	r4, r4, r6
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	0262      	lsls	r2, r4, #9
 8001a0c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a10:	0259      	lsls	r1, r3, #9
 8001a12:	460b      	mov	r3, r1
 8001a14:	4614      	mov	r4, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	4621      	mov	r1, r4
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	f7fe fc2c 	bl	8000280 <__aeabi_uldivmod>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e049      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	f04f 0400 	mov.w	r4, #0
 8001a3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	ea03 0501 	and.w	r5, r3, r1
 8001a46:	ea04 0602 	and.w	r6, r4, r2
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	4632      	mov	r2, r6
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	f04f 0400 	mov.w	r4, #0
 8001a56:	0154      	lsls	r4, r2, #5
 8001a58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a5c:	014b      	lsls	r3, r1, #5
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4622      	mov	r2, r4
 8001a62:	1b49      	subs	r1, r1, r5
 8001a64:	eb62 0206 	sbc.w	r2, r2, r6
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f04f 0400 	mov.w	r4, #0
 8001a70:	0194      	lsls	r4, r2, #6
 8001a72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a76:	018b      	lsls	r3, r1, #6
 8001a78:	1a5b      	subs	r3, r3, r1
 8001a7a:	eb64 0402 	sbc.w	r4, r4, r2
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	00e2      	lsls	r2, r4, #3
 8001a88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a8c:	00d9      	lsls	r1, r3, #3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4614      	mov	r4, r2
 8001a92:	195b      	adds	r3, r3, r5
 8001a94:	eb44 0406 	adc.w	r4, r4, r6
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	02a2      	lsls	r2, r4, #10
 8001aa2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001aa6:	0299      	lsls	r1, r3, #10
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4614      	mov	r4, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	4621      	mov	r1, r4
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f04f 0400 	mov.w	r4, #0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4623      	mov	r3, r4
 8001aba:	f7fe fbe1 	bl	8000280 <__aeabi_uldivmod>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	60bb      	str	r3, [r7, #8]
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ae2:	60bb      	str	r3, [r7, #8]
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b18:	f7ff fff0 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08004734 	.word	0x08004734

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b40:	f7ff ffdc 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b44:	4601      	mov	r1, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0b5b      	lsrs	r3, r3, #13
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4a03      	ldr	r2, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08004734 	.word	0x08004734

08001b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e03f      	b.n	8001bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe ff24 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fc47 	bl	800243c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af02      	add	r7, sp, #8
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	f040 8083 	bne.w	8001d26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_UART_Transmit+0x2e>
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e07b      	b.n	8001d28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_UART_Transmit+0x40>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e074      	b.n	8001d28 <HAL_UART_Transmit+0x12a>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2221      	movs	r2, #33	; 0x21
 8001c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c54:	f7ff f826 	bl	8000ca4 <HAL_GetTick>
 8001c58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	88fa      	ldrh	r2, [r7, #6]
 8001c5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c6e:	e042      	b.n	8001cf6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c86:	d122      	bne.n	8001cce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fa66 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e042      	b.n	8001d28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cb4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	e017      	b.n	8001cf6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	e013      	b.n	8001cf6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 fa43 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e01f      	b.n	8001d28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1b7      	bne.n	8001c70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2200      	movs	r2, #0
 8001d08:	2140      	movs	r1, #64	; 0x40
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fa2a 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e006      	b.n	8001d28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
  }
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	f040 8090 	bne.w	8001e72 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_UART_Receive+0x2e>
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e088      	b.n	8001e74 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_UART_Receive+0x40>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e081      	b.n	8001e74 <HAL_UART_Receive+0x144>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2222      	movs	r2, #34	; 0x22
 8001d82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d86:	f7fe ff8d 	bl	8000ca4 <HAL_GetTick>
 8001d8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001da0:	e05c      	b.n	8001e5c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db8:	d12b      	bne.n	8001e12 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f9cd 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e04f      	b.n	8001e74 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3302      	adds	r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	e030      	b.n	8001e5c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	e024      	b.n	8001e5c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f9a1 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e023      	b.n	8001e74 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d108      	bne.n	8001e46 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6859      	ldr	r1, [r3, #4]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	b2ca      	uxtb	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e00a      	b.n	8001e5c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1c59      	adds	r1, r3, #1
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d19d      	bne.n	8001da2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d140      	bne.n	8001f18 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_UART_Receive_IT+0x26>
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e039      	b.n	8001f1a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_UART_Receive_IT+0x38>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e032      	b.n	8001f1a <HAL_UART_Receive_IT+0x9e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	88fa      	ldrh	r2, [r7, #6]
 8001ecc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2222      	movs	r2, #34	; 0x22
 8001ed8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e000      	b.n	8001f1a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001f18:	2302      	movs	r3, #2
  }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_UART_IRQHandler+0x52>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f9e0 	bl	8002338 <UART_Receive_IT>
      return;
 8001f78:	e0d1      	b.n	800211e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80b0 	beq.w	80020e2 <HAL_UART_IRQHandler+0x1ba>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_UART_IRQHandler+0x70>
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a5 	beq.w	80020e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_UART_IRQHandler+0x90>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_UART_IRQHandler+0xb0>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	f043 0202 	orr.w	r2, r3, #2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_UART_IRQHandler+0xd0>
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00f      	beq.n	8002022 <HAL_UART_IRQHandler+0xfa>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <HAL_UART_IRQHandler+0xee>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	f043 0208 	orr.w	r2, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d078      	beq.n	800211c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_UART_IRQHandler+0x11c>
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f97a 	bl	8002338 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_UART_IRQHandler+0x144>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d031      	beq.n	80020d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8c3 	bl	80021f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d123      	bne.n	80020c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	4a21      	ldr	r2, [pc, #132]	; (8002124 <HAL_UART_IRQHandler+0x1fc>)
 800209e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe ff3c 	bl	8000f22 <HAL_DMA_Abort_IT>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020ba:	4610      	mov	r0, r2
 80020bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020be:	e00e      	b.n	80020de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f845 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c6:	e00a      	b.n	80020de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f841 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ce:	e006      	b.n	80020de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f83d 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80020dc:	e01e      	b.n	800211c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020de:	bf00      	nop
    return;
 80020e0:	e01c      	b.n	800211c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_UART_IRQHandler+0x1d6>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8b0 	bl	800225c <UART_Transmit_IT>
    return;
 80020fc:	e00f      	b.n	800211e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_UART_IRQHandler+0x1f6>
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8f8 	bl	8002308 <UART_EndTransmit_IT>
    return;
 8002118:	bf00      	nop
 800211a:	e000      	b.n	800211e <HAL_UART_IRQHandler+0x1f6>
    return;
 800211c:	bf00      	nop
  }
}
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	08002235 	.word	0x08002235

08002128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002174:	e02c      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d028      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <UART_WaitOnFlagUntilTimeout+0x30>
 8002184:	f7fe fd8e 	bl	8000ca4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	429a      	cmp	r2, r3
 8002192:	d21d      	bcs.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e00f      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d0c3      	beq.n	8002176 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800220e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff ff7e 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b21      	cmp	r3, #33	; 0x21
 800226e:	d144      	bne.n	80022fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002278:	d11a      	bne.n	80022b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800228e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	1c9a      	adds	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	621a      	str	r2, [r3, #32]
 80022a2:	e00e      	b.n	80022c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	621a      	str	r2, [r3, #32]
 80022ae:	e008      	b.n	80022c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	1c59      	adds	r1, r3, #1
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6211      	str	r1, [r2, #32]
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4619      	mov	r1, r3
 80022d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800231e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fefd 	bl	8002128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b22      	cmp	r3, #34	; 0x22
 800234a:	d171      	bne.n	8002430 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002354:	d123      	bne.n	800239e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10e      	bne.n	8002382 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	b29b      	uxth	r3, r3
 800236c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	1c9a      	adds	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
 8002380:	e029      	b.n	80023d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b29b      	uxth	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
 800239c:	e01b      	b.n	80023d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6858      	ldr	r0, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	1c59      	adds	r1, r3, #1
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6291      	str	r1, [r2, #40]	; 0x28
 80023b6:	b2c2      	uxtb	r2, r0
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e00c      	b.n	80023d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	1c58      	adds	r0, r3, #1
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	6288      	str	r0, [r1, #40]	; 0x28
 80023ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4619      	mov	r1, r3
 80023e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d120      	bne.n	800242c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0220 	bic.w	r2, r2, #32
 80023f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fe8a 	bl	800213c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e002      	b.n	8002432 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800247e:	f023 030c 	bic.w	r3, r3, #12
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	430b      	orrs	r3, r1
 800248a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024aa:	f040 818b 	bne.w	80027c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4ac1      	ldr	r2, [pc, #772]	; (80027b8 <UART_SetConfig+0x37c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d005      	beq.n	80024c4 <UART_SetConfig+0x88>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4abf      	ldr	r2, [pc, #764]	; (80027bc <UART_SetConfig+0x380>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f040 80bd 	bne.w	800263e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024c4:	f7ff fb3a 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 80024c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	461d      	mov	r5, r3
 80024ce:	f04f 0600 	mov.w	r6, #0
 80024d2:	46a8      	mov	r8, r5
 80024d4:	46b1      	mov	r9, r6
 80024d6:	eb18 0308 	adds.w	r3, r8, r8
 80024da:	eb49 0409 	adc.w	r4, r9, r9
 80024de:	4698      	mov	r8, r3
 80024e0:	46a1      	mov	r9, r4
 80024e2:	eb18 0805 	adds.w	r8, r8, r5
 80024e6:	eb49 0906 	adc.w	r9, r9, r6
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024fe:	4688      	mov	r8, r1
 8002500:	4691      	mov	r9, r2
 8002502:	eb18 0005 	adds.w	r0, r8, r5
 8002506:	eb49 0106 	adc.w	r1, r9, r6
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	461d      	mov	r5, r3
 8002510:	f04f 0600 	mov.w	r6, #0
 8002514:	196b      	adds	r3, r5, r5
 8002516:	eb46 0406 	adc.w	r4, r6, r6
 800251a:	461a      	mov	r2, r3
 800251c:	4623      	mov	r3, r4
 800251e:	f7fd feaf 	bl	8000280 <__aeabi_uldivmod>
 8002522:	4603      	mov	r3, r0
 8002524:	460c      	mov	r4, r1
 8002526:	461a      	mov	r2, r3
 8002528:	4ba5      	ldr	r3, [pc, #660]	; (80027c0 <UART_SetConfig+0x384>)
 800252a:	fba3 2302 	umull	r2, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	461d      	mov	r5, r3
 8002538:	f04f 0600 	mov.w	r6, #0
 800253c:	46a9      	mov	r9, r5
 800253e:	46b2      	mov	sl, r6
 8002540:	eb19 0309 	adds.w	r3, r9, r9
 8002544:	eb4a 040a 	adc.w	r4, sl, sl
 8002548:	4699      	mov	r9, r3
 800254a:	46a2      	mov	sl, r4
 800254c:	eb19 0905 	adds.w	r9, r9, r5
 8002550:	eb4a 0a06 	adc.w	sl, sl, r6
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002568:	4689      	mov	r9, r1
 800256a:	4692      	mov	sl, r2
 800256c:	eb19 0005 	adds.w	r0, r9, r5
 8002570:	eb4a 0106 	adc.w	r1, sl, r6
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	461d      	mov	r5, r3
 800257a:	f04f 0600 	mov.w	r6, #0
 800257e:	196b      	adds	r3, r5, r5
 8002580:	eb46 0406 	adc.w	r4, r6, r6
 8002584:	461a      	mov	r2, r3
 8002586:	4623      	mov	r3, r4
 8002588:	f7fd fe7a 	bl	8000280 <__aeabi_uldivmod>
 800258c:	4603      	mov	r3, r0
 800258e:	460c      	mov	r4, r1
 8002590:	461a      	mov	r2, r3
 8002592:	4b8b      	ldr	r3, [pc, #556]	; (80027c0 <UART_SetConfig+0x384>)
 8002594:	fba3 1302 	umull	r1, r3, r3, r2
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	2164      	movs	r1, #100	; 0x64
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3332      	adds	r3, #50	; 0x32
 80025a6:	4a86      	ldr	r2, [pc, #536]	; (80027c0 <UART_SetConfig+0x384>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025b4:	4498      	add	r8, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	461d      	mov	r5, r3
 80025ba:	f04f 0600 	mov.w	r6, #0
 80025be:	46a9      	mov	r9, r5
 80025c0:	46b2      	mov	sl, r6
 80025c2:	eb19 0309 	adds.w	r3, r9, r9
 80025c6:	eb4a 040a 	adc.w	r4, sl, sl
 80025ca:	4699      	mov	r9, r3
 80025cc:	46a2      	mov	sl, r4
 80025ce:	eb19 0905 	adds.w	r9, r9, r5
 80025d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ea:	4689      	mov	r9, r1
 80025ec:	4692      	mov	sl, r2
 80025ee:	eb19 0005 	adds.w	r0, r9, r5
 80025f2:	eb4a 0106 	adc.w	r1, sl, r6
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	461d      	mov	r5, r3
 80025fc:	f04f 0600 	mov.w	r6, #0
 8002600:	196b      	adds	r3, r5, r5
 8002602:	eb46 0406 	adc.w	r4, r6, r6
 8002606:	461a      	mov	r2, r3
 8002608:	4623      	mov	r3, r4
 800260a:	f7fd fe39 	bl	8000280 <__aeabi_uldivmod>
 800260e:	4603      	mov	r3, r0
 8002610:	460c      	mov	r4, r1
 8002612:	461a      	mov	r2, r3
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <UART_SetConfig+0x384>)
 8002616:	fba3 1302 	umull	r1, r3, r3, r2
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2164      	movs	r1, #100	; 0x64
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	3332      	adds	r3, #50	; 0x32
 8002628:	4a65      	ldr	r2, [pc, #404]	; (80027c0 <UART_SetConfig+0x384>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	f003 0207 	and.w	r2, r3, #7
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4442      	add	r2, r8
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e26f      	b.n	8002b1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800263e:	f7ff fa69 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002642:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	461d      	mov	r5, r3
 8002648:	f04f 0600 	mov.w	r6, #0
 800264c:	46a8      	mov	r8, r5
 800264e:	46b1      	mov	r9, r6
 8002650:	eb18 0308 	adds.w	r3, r8, r8
 8002654:	eb49 0409 	adc.w	r4, r9, r9
 8002658:	4698      	mov	r8, r3
 800265a:	46a1      	mov	r9, r4
 800265c:	eb18 0805 	adds.w	r8, r8, r5
 8002660:	eb49 0906 	adc.w	r9, r9, r6
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002670:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002674:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002678:	4688      	mov	r8, r1
 800267a:	4691      	mov	r9, r2
 800267c:	eb18 0005 	adds.w	r0, r8, r5
 8002680:	eb49 0106 	adc.w	r1, r9, r6
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	461d      	mov	r5, r3
 800268a:	f04f 0600 	mov.w	r6, #0
 800268e:	196b      	adds	r3, r5, r5
 8002690:	eb46 0406 	adc.w	r4, r6, r6
 8002694:	461a      	mov	r2, r3
 8002696:	4623      	mov	r3, r4
 8002698:	f7fd fdf2 	bl	8000280 <__aeabi_uldivmod>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <UART_SetConfig+0x384>)
 80026a4:	fba3 2302 	umull	r2, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	461d      	mov	r5, r3
 80026b2:	f04f 0600 	mov.w	r6, #0
 80026b6:	46a9      	mov	r9, r5
 80026b8:	46b2      	mov	sl, r6
 80026ba:	eb19 0309 	adds.w	r3, r9, r9
 80026be:	eb4a 040a 	adc.w	r4, sl, sl
 80026c2:	4699      	mov	r9, r3
 80026c4:	46a2      	mov	sl, r4
 80026c6:	eb19 0905 	adds.w	r9, r9, r5
 80026ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026e2:	4689      	mov	r9, r1
 80026e4:	4692      	mov	sl, r2
 80026e6:	eb19 0005 	adds.w	r0, r9, r5
 80026ea:	eb4a 0106 	adc.w	r1, sl, r6
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	461d      	mov	r5, r3
 80026f4:	f04f 0600 	mov.w	r6, #0
 80026f8:	196b      	adds	r3, r5, r5
 80026fa:	eb46 0406 	adc.w	r4, r6, r6
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	f7fd fdbd 	bl	8000280 <__aeabi_uldivmod>
 8002706:	4603      	mov	r3, r0
 8002708:	460c      	mov	r4, r1
 800270a:	461a      	mov	r2, r3
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <UART_SetConfig+0x384>)
 800270e:	fba3 1302 	umull	r1, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2164      	movs	r1, #100	; 0x64
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	3332      	adds	r3, #50	; 0x32
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <UART_SetConfig+0x384>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800272e:	4498      	add	r8, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	461d      	mov	r5, r3
 8002734:	f04f 0600 	mov.w	r6, #0
 8002738:	46a9      	mov	r9, r5
 800273a:	46b2      	mov	sl, r6
 800273c:	eb19 0309 	adds.w	r3, r9, r9
 8002740:	eb4a 040a 	adc.w	r4, sl, sl
 8002744:	4699      	mov	r9, r3
 8002746:	46a2      	mov	sl, r4
 8002748:	eb19 0905 	adds.w	r9, r9, r5
 800274c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800275c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002764:	4689      	mov	r9, r1
 8002766:	4692      	mov	sl, r2
 8002768:	eb19 0005 	adds.w	r0, r9, r5
 800276c:	eb4a 0106 	adc.w	r1, sl, r6
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	461d      	mov	r5, r3
 8002776:	f04f 0600 	mov.w	r6, #0
 800277a:	196b      	adds	r3, r5, r5
 800277c:	eb46 0406 	adc.w	r4, r6, r6
 8002780:	461a      	mov	r2, r3
 8002782:	4623      	mov	r3, r4
 8002784:	f7fd fd7c 	bl	8000280 <__aeabi_uldivmod>
 8002788:	4603      	mov	r3, r0
 800278a:	460c      	mov	r4, r1
 800278c:	461a      	mov	r2, r3
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <UART_SetConfig+0x384>)
 8002790:	fba3 1302 	umull	r1, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	2164      	movs	r1, #100	; 0x64
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	3332      	adds	r3, #50	; 0x32
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <UART_SetConfig+0x384>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	f003 0207 	and.w	r2, r3, #7
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4442      	add	r2, r8
 80027b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80027b6:	e1b2      	b.n	8002b1e <UART_SetConfig+0x6e2>
 80027b8:	40011000 	.word	0x40011000
 80027bc:	40011400 	.word	0x40011400
 80027c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4ad7      	ldr	r2, [pc, #860]	; (8002b28 <UART_SetConfig+0x6ec>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d005      	beq.n	80027da <UART_SetConfig+0x39e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4ad6      	ldr	r2, [pc, #856]	; (8002b2c <UART_SetConfig+0x6f0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	f040 80d1 	bne.w	800297c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027da:	f7ff f9af 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 80027de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	469a      	mov	sl, r3
 80027e4:	f04f 0b00 	mov.w	fp, #0
 80027e8:	46d0      	mov	r8, sl
 80027ea:	46d9      	mov	r9, fp
 80027ec:	eb18 0308 	adds.w	r3, r8, r8
 80027f0:	eb49 0409 	adc.w	r4, r9, r9
 80027f4:	4698      	mov	r8, r3
 80027f6:	46a1      	mov	r9, r4
 80027f8:	eb18 080a 	adds.w	r8, r8, sl
 80027fc:	eb49 090b 	adc.w	r9, r9, fp
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800280c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002810:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002814:	4688      	mov	r8, r1
 8002816:	4691      	mov	r9, r2
 8002818:	eb1a 0508 	adds.w	r5, sl, r8
 800281c:	eb4b 0609 	adc.w	r6, fp, r9
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4619      	mov	r1, r3
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	f04f 0400 	mov.w	r4, #0
 8002832:	0094      	lsls	r4, r2, #2
 8002834:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002838:	008b      	lsls	r3, r1, #2
 800283a:	461a      	mov	r2, r3
 800283c:	4623      	mov	r3, r4
 800283e:	4628      	mov	r0, r5
 8002840:	4631      	mov	r1, r6
 8002842:	f7fd fd1d 	bl	8000280 <__aeabi_uldivmod>
 8002846:	4603      	mov	r3, r0
 8002848:	460c      	mov	r4, r1
 800284a:	461a      	mov	r2, r3
 800284c:	4bb8      	ldr	r3, [pc, #736]	; (8002b30 <UART_SetConfig+0x6f4>)
 800284e:	fba3 2302 	umull	r2, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	469b      	mov	fp, r3
 800285c:	f04f 0c00 	mov.w	ip, #0
 8002860:	46d9      	mov	r9, fp
 8002862:	46e2      	mov	sl, ip
 8002864:	eb19 0309 	adds.w	r3, r9, r9
 8002868:	eb4a 040a 	adc.w	r4, sl, sl
 800286c:	4699      	mov	r9, r3
 800286e:	46a2      	mov	sl, r4
 8002870:	eb19 090b 	adds.w	r9, r9, fp
 8002874:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002884:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002888:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800288c:	4689      	mov	r9, r1
 800288e:	4692      	mov	sl, r2
 8002890:	eb1b 0509 	adds.w	r5, fp, r9
 8002894:	eb4c 060a 	adc.w	r6, ip, sl
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4619      	mov	r1, r3
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	0094      	lsls	r4, r2, #2
 80028ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028b0:	008b      	lsls	r3, r1, #2
 80028b2:	461a      	mov	r2, r3
 80028b4:	4623      	mov	r3, r4
 80028b6:	4628      	mov	r0, r5
 80028b8:	4631      	mov	r1, r6
 80028ba:	f7fd fce1 	bl	8000280 <__aeabi_uldivmod>
 80028be:	4603      	mov	r3, r0
 80028c0:	460c      	mov	r4, r1
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b9a      	ldr	r3, [pc, #616]	; (8002b30 <UART_SetConfig+0x6f4>)
 80028c6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2164      	movs	r1, #100	; 0x64
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	; 0x32
 80028d8:	4a95      	ldr	r2, [pc, #596]	; (8002b30 <UART_SetConfig+0x6f4>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	4498      	add	r8, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	469b      	mov	fp, r3
 80028ea:	f04f 0c00 	mov.w	ip, #0
 80028ee:	46d9      	mov	r9, fp
 80028f0:	46e2      	mov	sl, ip
 80028f2:	eb19 0309 	adds.w	r3, r9, r9
 80028f6:	eb4a 040a 	adc.w	r4, sl, sl
 80028fa:	4699      	mov	r9, r3
 80028fc:	46a2      	mov	sl, r4
 80028fe:	eb19 090b 	adds.w	r9, r9, fp
 8002902:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002912:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002916:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800291a:	4689      	mov	r9, r1
 800291c:	4692      	mov	sl, r2
 800291e:	eb1b 0509 	adds.w	r5, fp, r9
 8002922:	eb4c 060a 	adc.w	r6, ip, sl
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4619      	mov	r1, r3
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	f04f 0400 	mov.w	r4, #0
 8002938:	0094      	lsls	r4, r2, #2
 800293a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800293e:	008b      	lsls	r3, r1, #2
 8002940:	461a      	mov	r2, r3
 8002942:	4623      	mov	r3, r4
 8002944:	4628      	mov	r0, r5
 8002946:	4631      	mov	r1, r6
 8002948:	f7fd fc9a 	bl	8000280 <__aeabi_uldivmod>
 800294c:	4603      	mov	r3, r0
 800294e:	460c      	mov	r4, r1
 8002950:	461a      	mov	r2, r3
 8002952:	4b77      	ldr	r3, [pc, #476]	; (8002b30 <UART_SetConfig+0x6f4>)
 8002954:	fba3 1302 	umull	r1, r3, r3, r2
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	2164      	movs	r1, #100	; 0x64
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	3332      	adds	r3, #50	; 0x32
 8002966:	4a72      	ldr	r2, [pc, #456]	; (8002b30 <UART_SetConfig+0x6f4>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4442      	add	r2, r8
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	e0d0      	b.n	8002b1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800297c:	f7ff f8ca 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002980:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	469a      	mov	sl, r3
 8002986:	f04f 0b00 	mov.w	fp, #0
 800298a:	46d0      	mov	r8, sl
 800298c:	46d9      	mov	r9, fp
 800298e:	eb18 0308 	adds.w	r3, r8, r8
 8002992:	eb49 0409 	adc.w	r4, r9, r9
 8002996:	4698      	mov	r8, r3
 8002998:	46a1      	mov	r9, r4
 800299a:	eb18 080a 	adds.w	r8, r8, sl
 800299e:	eb49 090b 	adc.w	r9, r9, fp
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029b6:	4688      	mov	r8, r1
 80029b8:	4691      	mov	r9, r2
 80029ba:	eb1a 0508 	adds.w	r5, sl, r8
 80029be:	eb4b 0609 	adc.w	r6, fp, r9
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4619      	mov	r1, r3
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	0094      	lsls	r4, r2, #2
 80029d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029da:	008b      	lsls	r3, r1, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	4628      	mov	r0, r5
 80029e2:	4631      	mov	r1, r6
 80029e4:	f7fd fc4c 	bl	8000280 <__aeabi_uldivmod>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <UART_SetConfig+0x6f4>)
 80029f0:	fba3 2302 	umull	r2, r3, r3, r2
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	469b      	mov	fp, r3
 80029fe:	f04f 0c00 	mov.w	ip, #0
 8002a02:	46d9      	mov	r9, fp
 8002a04:	46e2      	mov	sl, ip
 8002a06:	eb19 0309 	adds.w	r3, r9, r9
 8002a0a:	eb4a 040a 	adc.w	r4, sl, sl
 8002a0e:	4699      	mov	r9, r3
 8002a10:	46a2      	mov	sl, r4
 8002a12:	eb19 090b 	adds.w	r9, r9, fp
 8002a16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a2e:	4689      	mov	r9, r1
 8002a30:	4692      	mov	sl, r2
 8002a32:	eb1b 0509 	adds.w	r5, fp, r9
 8002a36:	eb4c 060a 	adc.w	r6, ip, sl
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	0094      	lsls	r4, r2, #2
 8002a4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a52:	008b      	lsls	r3, r1, #2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4623      	mov	r3, r4
 8002a58:	4628      	mov	r0, r5
 8002a5a:	4631      	mov	r1, r6
 8002a5c:	f7fd fc10 	bl	8000280 <__aeabi_uldivmod>
 8002a60:	4603      	mov	r3, r0
 8002a62:	460c      	mov	r4, r1
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <UART_SetConfig+0x6f4>)
 8002a68:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	2164      	movs	r1, #100	; 0x64
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	3332      	adds	r3, #50	; 0x32
 8002a7a:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <UART_SetConfig+0x6f4>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a86:	4498      	add	r8, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	469b      	mov	fp, r3
 8002a8c:	f04f 0c00 	mov.w	ip, #0
 8002a90:	46d9      	mov	r9, fp
 8002a92:	46e2      	mov	sl, ip
 8002a94:	eb19 0309 	adds.w	r3, r9, r9
 8002a98:	eb4a 040a 	adc.w	r4, sl, sl
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	46a2      	mov	sl, r4
 8002aa0:	eb19 090b 	adds.w	r9, r9, fp
 8002aa4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ab8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002abc:	4689      	mov	r9, r1
 8002abe:	4692      	mov	sl, r2
 8002ac0:	eb1b 0509 	adds.w	r5, fp, r9
 8002ac4:	eb4c 060a 	adc.w	r6, ip, sl
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	0094      	lsls	r4, r2, #2
 8002adc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ae0:	008b      	lsls	r3, r1, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	4631      	mov	r1, r6
 8002aea:	f7fd fbc9 	bl	8000280 <__aeabi_uldivmod>
 8002aee:	4603      	mov	r3, r0
 8002af0:	460c      	mov	r4, r1
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <UART_SetConfig+0x6f4>)
 8002af6:	fba3 1302 	umull	r1, r3, r3, r2
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2164      	movs	r1, #100	; 0x64
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	3332      	adds	r3, #50	; 0x32
 8002b08:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <UART_SetConfig+0x6f4>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4442      	add	r2, r8
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	e7ff      	b.n	8002b1e <UART_SetConfig+0x6e2>
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b28:	40011000 	.word	0x40011000
 8002b2c:	40011400 	.word	0x40011400
 8002b30:	51eb851f 	.word	0x51eb851f

08002b34 <__errno>:
 8002b34:	4b01      	ldr	r3, [pc, #4]	; (8002b3c <__errno+0x8>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <__libc_init_array>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	4e0d      	ldr	r6, [pc, #52]	; (8002b78 <__libc_init_array+0x38>)
 8002b44:	4c0d      	ldr	r4, [pc, #52]	; (8002b7c <__libc_init_array+0x3c>)
 8002b46:	1ba4      	subs	r4, r4, r6
 8002b48:	10a4      	asrs	r4, r4, #2
 8002b4a:	2500      	movs	r5, #0
 8002b4c:	42a5      	cmp	r5, r4
 8002b4e:	d109      	bne.n	8002b64 <__libc_init_array+0x24>
 8002b50:	4e0b      	ldr	r6, [pc, #44]	; (8002b80 <__libc_init_array+0x40>)
 8002b52:	4c0c      	ldr	r4, [pc, #48]	; (8002b84 <__libc_init_array+0x44>)
 8002b54:	f001 fdc8 	bl	80046e8 <_init>
 8002b58:	1ba4      	subs	r4, r4, r6
 8002b5a:	10a4      	asrs	r4, r4, #2
 8002b5c:	2500      	movs	r5, #0
 8002b5e:	42a5      	cmp	r5, r4
 8002b60:	d105      	bne.n	8002b6e <__libc_init_array+0x2e>
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b68:	4798      	blx	r3
 8002b6a:	3501      	adds	r5, #1
 8002b6c:	e7ee      	b.n	8002b4c <__libc_init_array+0xc>
 8002b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b72:	4798      	blx	r3
 8002b74:	3501      	adds	r5, #1
 8002b76:	e7f2      	b.n	8002b5e <__libc_init_array+0x1e>
 8002b78:	08004904 	.word	0x08004904
 8002b7c:	08004904 	.word	0x08004904
 8002b80:	08004904 	.word	0x08004904
 8002b84:	08004908 	.word	0x08004908

08002b88 <memset>:
 8002b88:	4402      	add	r2, r0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d100      	bne.n	8002b92 <memset+0xa>
 8002b90:	4770      	bx	lr
 8002b92:	f803 1b01 	strb.w	r1, [r3], #1
 8002b96:	e7f9      	b.n	8002b8c <memset+0x4>

08002b98 <iprintf>:
 8002b98:	b40f      	push	{r0, r1, r2, r3}
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <iprintf+0x2c>)
 8002b9c:	b513      	push	{r0, r1, r4, lr}
 8002b9e:	681c      	ldr	r4, [r3, #0]
 8002ba0:	b124      	cbz	r4, 8002bac <iprintf+0x14>
 8002ba2:	69a3      	ldr	r3, [r4, #24]
 8002ba4:	b913      	cbnz	r3, 8002bac <iprintf+0x14>
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f000 f9d6 	bl	8002f58 <__sinit>
 8002bac:	ab05      	add	r3, sp, #20
 8002bae:	9a04      	ldr	r2, [sp, #16]
 8002bb0:	68a1      	ldr	r1, [r4, #8]
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f000 fbb3 	bl	8003320 <_vfiprintf_r>
 8002bba:	b002      	add	sp, #8
 8002bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bc0:	b004      	add	sp, #16
 8002bc2:	4770      	bx	lr
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <iscanf>:
 8002bc8:	b40f      	push	{r0, r1, r2, r3}
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <iscanf+0x2c>)
 8002bcc:	b513      	push	{r0, r1, r4, lr}
 8002bce:	681c      	ldr	r4, [r3, #0]
 8002bd0:	b124      	cbz	r4, 8002bdc <iscanf+0x14>
 8002bd2:	69a3      	ldr	r3, [r4, #24]
 8002bd4:	b913      	cbnz	r3, 8002bdc <iscanf+0x14>
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f000 f9be 	bl	8002f58 <__sinit>
 8002bdc:	ab05      	add	r3, sp, #20
 8002bde:	9a04      	ldr	r2, [sp, #16]
 8002be0:	6861      	ldr	r1, [r4, #4]
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	4620      	mov	r0, r4
 8002be6:	f000 ff89 	bl	8003afc <_vfiscanf_r>
 8002bea:	b002      	add	sp, #8
 8002bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf0:	b004      	add	sp, #16
 8002bf2:	4770      	bx	lr
 8002bf4:	2000000c 	.word	0x2000000c

08002bf8 <setvbuf>:
 8002bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bfc:	461d      	mov	r5, r3
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <setvbuf+0x14c>)
 8002c00:	681e      	ldr	r6, [r3, #0]
 8002c02:	4604      	mov	r4, r0
 8002c04:	460f      	mov	r7, r1
 8002c06:	4690      	mov	r8, r2
 8002c08:	b126      	cbz	r6, 8002c14 <setvbuf+0x1c>
 8002c0a:	69b3      	ldr	r3, [r6, #24]
 8002c0c:	b913      	cbnz	r3, 8002c14 <setvbuf+0x1c>
 8002c0e:	4630      	mov	r0, r6
 8002c10:	f000 f9a2 	bl	8002f58 <__sinit>
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <setvbuf+0x150>)
 8002c16:	429c      	cmp	r4, r3
 8002c18:	d152      	bne.n	8002cc0 <setvbuf+0xc8>
 8002c1a:	6874      	ldr	r4, [r6, #4]
 8002c1c:	f1b8 0f02 	cmp.w	r8, #2
 8002c20:	d006      	beq.n	8002c30 <setvbuf+0x38>
 8002c22:	f1b8 0f01 	cmp.w	r8, #1
 8002c26:	f200 8089 	bhi.w	8002d3c <setvbuf+0x144>
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	f2c0 8086 	blt.w	8002d3c <setvbuf+0x144>
 8002c30:	4621      	mov	r1, r4
 8002c32:	4630      	mov	r0, r6
 8002c34:	f000 f914 	bl	8002e60 <_fflush_r>
 8002c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c3a:	b141      	cbz	r1, 8002c4e <setvbuf+0x56>
 8002c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c40:	4299      	cmp	r1, r3
 8002c42:	d002      	beq.n	8002c4a <setvbuf+0x52>
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 fa99 	bl	800317c <_free_r>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61a3      	str	r3, [r4, #24]
 8002c52:	6063      	str	r3, [r4, #4]
 8002c54:	89a3      	ldrh	r3, [r4, #12]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	d503      	bpl.n	8002c62 <setvbuf+0x6a>
 8002c5a:	6921      	ldr	r1, [r4, #16]
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f000 fa8d 	bl	800317c <_free_r>
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002c68:	f023 0303 	bic.w	r3, r3, #3
 8002c6c:	f1b8 0f02 	cmp.w	r8, #2
 8002c70:	81a3      	strh	r3, [r4, #12]
 8002c72:	d05d      	beq.n	8002d30 <setvbuf+0x138>
 8002c74:	ab01      	add	r3, sp, #4
 8002c76:	466a      	mov	r2, sp
 8002c78:	4621      	mov	r1, r4
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f000 fa12 	bl	80030a4 <__swhatbuf_r>
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	4318      	orrs	r0, r3
 8002c84:	81a0      	strh	r0, [r4, #12]
 8002c86:	bb2d      	cbnz	r5, 8002cd4 <setvbuf+0xdc>
 8002c88:	9d00      	ldr	r5, [sp, #0]
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f000 fa6e 	bl	800316c <malloc>
 8002c90:	4607      	mov	r7, r0
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d14e      	bne.n	8002d34 <setvbuf+0x13c>
 8002c96:	f8dd 9000 	ldr.w	r9, [sp]
 8002c9a:	45a9      	cmp	r9, r5
 8002c9c:	d13c      	bne.n	8002d18 <setvbuf+0x120>
 8002c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	2300      	movs	r3, #0
 8002cac:	60a3      	str	r3, [r4, #8]
 8002cae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cb2:	6023      	str	r3, [r4, #0]
 8002cb4:	6123      	str	r3, [r4, #16]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	6163      	str	r3, [r4, #20]
 8002cba:	b003      	add	sp, #12
 8002cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <setvbuf+0x154>)
 8002cc2:	429c      	cmp	r4, r3
 8002cc4:	d101      	bne.n	8002cca <setvbuf+0xd2>
 8002cc6:	68b4      	ldr	r4, [r6, #8]
 8002cc8:	e7a8      	b.n	8002c1c <setvbuf+0x24>
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <setvbuf+0x158>)
 8002ccc:	429c      	cmp	r4, r3
 8002cce:	bf08      	it	eq
 8002cd0:	68f4      	ldreq	r4, [r6, #12]
 8002cd2:	e7a3      	b.n	8002c1c <setvbuf+0x24>
 8002cd4:	2f00      	cmp	r7, #0
 8002cd6:	d0d8      	beq.n	8002c8a <setvbuf+0x92>
 8002cd8:	69b3      	ldr	r3, [r6, #24]
 8002cda:	b913      	cbnz	r3, 8002ce2 <setvbuf+0xea>
 8002cdc:	4630      	mov	r0, r6
 8002cde:	f000 f93b 	bl	8002f58 <__sinit>
 8002ce2:	f1b8 0f01 	cmp.w	r8, #1
 8002ce6:	bf08      	it	eq
 8002ce8:	89a3      	ldrheq	r3, [r4, #12]
 8002cea:	6027      	str	r7, [r4, #0]
 8002cec:	bf04      	itt	eq
 8002cee:	f043 0301 	orreq.w	r3, r3, #1
 8002cf2:	81a3      	strheq	r3, [r4, #12]
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	f013 0008 	ands.w	r0, r3, #8
 8002cfa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8002cfe:	d01b      	beq.n	8002d38 <setvbuf+0x140>
 8002d00:	f013 0001 	ands.w	r0, r3, #1
 8002d04:	bf18      	it	ne
 8002d06:	426d      	negne	r5, r5
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	bf1d      	ittte	ne
 8002d0e:	60a3      	strne	r3, [r4, #8]
 8002d10:	61a5      	strne	r5, [r4, #24]
 8002d12:	4618      	movne	r0, r3
 8002d14:	60a5      	streq	r5, [r4, #8]
 8002d16:	e7d0      	b.n	8002cba <setvbuf+0xc2>
 8002d18:	4648      	mov	r0, r9
 8002d1a:	f000 fa27 	bl	800316c <malloc>
 8002d1e:	4607      	mov	r7, r0
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d0bc      	beq.n	8002c9e <setvbuf+0xa6>
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2a:	81a3      	strh	r3, [r4, #12]
 8002d2c:	464d      	mov	r5, r9
 8002d2e:	e7d3      	b.n	8002cd8 <setvbuf+0xe0>
 8002d30:	2000      	movs	r0, #0
 8002d32:	e7b6      	b.n	8002ca2 <setvbuf+0xaa>
 8002d34:	46a9      	mov	r9, r5
 8002d36:	e7f5      	b.n	8002d24 <setvbuf+0x12c>
 8002d38:	60a0      	str	r0, [r4, #8]
 8002d3a:	e7be      	b.n	8002cba <setvbuf+0xc2>
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	e7bb      	b.n	8002cba <setvbuf+0xc2>
 8002d42:	bf00      	nop
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	08004760 	.word	0x08004760
 8002d4c:	08004780 	.word	0x08004780
 8002d50:	08004740 	.word	0x08004740

08002d54 <__sflush_r>:
 8002d54:	898a      	ldrh	r2, [r1, #12]
 8002d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d5a:	4605      	mov	r5, r0
 8002d5c:	0710      	lsls	r0, r2, #28
 8002d5e:	460c      	mov	r4, r1
 8002d60:	d458      	bmi.n	8002e14 <__sflush_r+0xc0>
 8002d62:	684b      	ldr	r3, [r1, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	dc05      	bgt.n	8002d74 <__sflush_r+0x20>
 8002d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	dc02      	bgt.n	8002d74 <__sflush_r+0x20>
 8002d6e:	2000      	movs	r0, #0
 8002d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d76:	2e00      	cmp	r6, #0
 8002d78:	d0f9      	beq.n	8002d6e <__sflush_r+0x1a>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d80:	682f      	ldr	r7, [r5, #0]
 8002d82:	6a21      	ldr	r1, [r4, #32]
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	d032      	beq.n	8002dee <__sflush_r+0x9a>
 8002d88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	075a      	lsls	r2, r3, #29
 8002d8e:	d505      	bpl.n	8002d9c <__sflush_r+0x48>
 8002d90:	6863      	ldr	r3, [r4, #4]
 8002d92:	1ac0      	subs	r0, r0, r3
 8002d94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d96:	b10b      	cbz	r3, 8002d9c <__sflush_r+0x48>
 8002d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d9a:	1ac0      	subs	r0, r0, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002da2:	6a21      	ldr	r1, [r4, #32]
 8002da4:	4628      	mov	r0, r5
 8002da6:	47b0      	blx	r6
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	d106      	bne.n	8002dbc <__sflush_r+0x68>
 8002dae:	6829      	ldr	r1, [r5, #0]
 8002db0:	291d      	cmp	r1, #29
 8002db2:	d848      	bhi.n	8002e46 <__sflush_r+0xf2>
 8002db4:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <__sflush_r+0x108>)
 8002db6:	40ca      	lsrs	r2, r1
 8002db8:	07d6      	lsls	r6, r2, #31
 8002dba:	d544      	bpl.n	8002e46 <__sflush_r+0xf2>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6062      	str	r2, [r4, #4]
 8002dc0:	04d9      	lsls	r1, r3, #19
 8002dc2:	6922      	ldr	r2, [r4, #16]
 8002dc4:	6022      	str	r2, [r4, #0]
 8002dc6:	d504      	bpl.n	8002dd2 <__sflush_r+0x7e>
 8002dc8:	1c42      	adds	r2, r0, #1
 8002dca:	d101      	bne.n	8002dd0 <__sflush_r+0x7c>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	b903      	cbnz	r3, 8002dd2 <__sflush_r+0x7e>
 8002dd0:	6560      	str	r0, [r4, #84]	; 0x54
 8002dd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dd4:	602f      	str	r7, [r5, #0]
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	d0c9      	beq.n	8002d6e <__sflush_r+0x1a>
 8002dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dde:	4299      	cmp	r1, r3
 8002de0:	d002      	beq.n	8002de8 <__sflush_r+0x94>
 8002de2:	4628      	mov	r0, r5
 8002de4:	f000 f9ca 	bl	800317c <_free_r>
 8002de8:	2000      	movs	r0, #0
 8002dea:	6360      	str	r0, [r4, #52]	; 0x34
 8002dec:	e7c0      	b.n	8002d70 <__sflush_r+0x1c>
 8002dee:	2301      	movs	r3, #1
 8002df0:	4628      	mov	r0, r5
 8002df2:	47b0      	blx	r6
 8002df4:	1c41      	adds	r1, r0, #1
 8002df6:	d1c8      	bne.n	8002d8a <__sflush_r+0x36>
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0c5      	beq.n	8002d8a <__sflush_r+0x36>
 8002dfe:	2b1d      	cmp	r3, #29
 8002e00:	d001      	beq.n	8002e06 <__sflush_r+0xb2>
 8002e02:	2b16      	cmp	r3, #22
 8002e04:	d101      	bne.n	8002e0a <__sflush_r+0xb6>
 8002e06:	602f      	str	r7, [r5, #0]
 8002e08:	e7b1      	b.n	8002d6e <__sflush_r+0x1a>
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e10:	81a3      	strh	r3, [r4, #12]
 8002e12:	e7ad      	b.n	8002d70 <__sflush_r+0x1c>
 8002e14:	690f      	ldr	r7, [r1, #16]
 8002e16:	2f00      	cmp	r7, #0
 8002e18:	d0a9      	beq.n	8002d6e <__sflush_r+0x1a>
 8002e1a:	0793      	lsls	r3, r2, #30
 8002e1c:	680e      	ldr	r6, [r1, #0]
 8002e1e:	bf08      	it	eq
 8002e20:	694b      	ldreq	r3, [r1, #20]
 8002e22:	600f      	str	r7, [r1, #0]
 8002e24:	bf18      	it	ne
 8002e26:	2300      	movne	r3, #0
 8002e28:	eba6 0807 	sub.w	r8, r6, r7
 8002e2c:	608b      	str	r3, [r1, #8]
 8002e2e:	f1b8 0f00 	cmp.w	r8, #0
 8002e32:	dd9c      	ble.n	8002d6e <__sflush_r+0x1a>
 8002e34:	4643      	mov	r3, r8
 8002e36:	463a      	mov	r2, r7
 8002e38:	6a21      	ldr	r1, [r4, #32]
 8002e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	47b0      	blx	r6
 8002e40:	2800      	cmp	r0, #0
 8002e42:	dc06      	bgt.n	8002e52 <__sflush_r+0xfe>
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	e78e      	b.n	8002d70 <__sflush_r+0x1c>
 8002e52:	4407      	add	r7, r0
 8002e54:	eba8 0800 	sub.w	r8, r8, r0
 8002e58:	e7e9      	b.n	8002e2e <__sflush_r+0xda>
 8002e5a:	bf00      	nop
 8002e5c:	20400001 	.word	0x20400001

08002e60 <_fflush_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	690b      	ldr	r3, [r1, #16]
 8002e64:	4605      	mov	r5, r0
 8002e66:	460c      	mov	r4, r1
 8002e68:	b1db      	cbz	r3, 8002ea2 <_fflush_r+0x42>
 8002e6a:	b118      	cbz	r0, 8002e74 <_fflush_r+0x14>
 8002e6c:	6983      	ldr	r3, [r0, #24]
 8002e6e:	b90b      	cbnz	r3, 8002e74 <_fflush_r+0x14>
 8002e70:	f000 f872 	bl	8002f58 <__sinit>
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <_fflush_r+0x48>)
 8002e76:	429c      	cmp	r4, r3
 8002e78:	d109      	bne.n	8002e8e <_fflush_r+0x2e>
 8002e7a:	686c      	ldr	r4, [r5, #4]
 8002e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e80:	b17b      	cbz	r3, 8002ea2 <_fflush_r+0x42>
 8002e82:	4621      	mov	r1, r4
 8002e84:	4628      	mov	r0, r5
 8002e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e8a:	f7ff bf63 	b.w	8002d54 <__sflush_r>
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <_fflush_r+0x4c>)
 8002e90:	429c      	cmp	r4, r3
 8002e92:	d101      	bne.n	8002e98 <_fflush_r+0x38>
 8002e94:	68ac      	ldr	r4, [r5, #8]
 8002e96:	e7f1      	b.n	8002e7c <_fflush_r+0x1c>
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <_fflush_r+0x50>)
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	bf08      	it	eq
 8002e9e:	68ec      	ldreq	r4, [r5, #12]
 8002ea0:	e7ec      	b.n	8002e7c <_fflush_r+0x1c>
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	08004760 	.word	0x08004760
 8002eac:	08004780 	.word	0x08004780
 8002eb0:	08004740 	.word	0x08004740

08002eb4 <fflush>:
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	b920      	cbnz	r0, 8002ec2 <fflush+0xe>
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <fflush+0x18>)
 8002eba:	4905      	ldr	r1, [pc, #20]	; (8002ed0 <fflush+0x1c>)
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	f000 b8d3 	b.w	8003068 <_fwalk_reent>
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <fflush+0x20>)
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	f7ff bfcb 	b.w	8002e60 <_fflush_r>
 8002eca:	bf00      	nop
 8002ecc:	0800473c 	.word	0x0800473c
 8002ed0:	08002e61 	.word	0x08002e61
 8002ed4:	2000000c 	.word	0x2000000c

08002ed8 <std>:
 8002ed8:	2300      	movs	r3, #0
 8002eda:	b510      	push	{r4, lr}
 8002edc:	4604      	mov	r4, r0
 8002ede:	e9c0 3300 	strd	r3, r3, [r0]
 8002ee2:	6083      	str	r3, [r0, #8]
 8002ee4:	8181      	strh	r1, [r0, #12]
 8002ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ee8:	81c2      	strh	r2, [r0, #14]
 8002eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eee:	6183      	str	r3, [r0, #24]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	305c      	adds	r0, #92	; 0x5c
 8002ef6:	f7ff fe47 	bl	8002b88 <memset>
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <std+0x38>)
 8002efc:	6263      	str	r3, [r4, #36]	; 0x24
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <std+0x3c>)
 8002f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <std+0x40>)
 8002f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <std+0x44>)
 8002f08:	6224      	str	r4, [r4, #32]
 8002f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	bf00      	nop
 8002f10:	08003fad 	.word	0x08003fad
 8002f14:	08003fcf 	.word	0x08003fcf
 8002f18:	08004007 	.word	0x08004007
 8002f1c:	0800402b 	.word	0x0800402b

08002f20 <_cleanup_r>:
 8002f20:	4901      	ldr	r1, [pc, #4]	; (8002f28 <_cleanup_r+0x8>)
 8002f22:	f000 b8a1 	b.w	8003068 <_fwalk_reent>
 8002f26:	bf00      	nop
 8002f28:	08002e61 	.word	0x08002e61

08002f2c <__sfmoreglue>:
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	1e4a      	subs	r2, r1, #1
 8002f30:	2568      	movs	r5, #104	; 0x68
 8002f32:	4355      	muls	r5, r2
 8002f34:	460e      	mov	r6, r1
 8002f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f3a:	f000 f96d 	bl	8003218 <_malloc_r>
 8002f3e:	4604      	mov	r4, r0
 8002f40:	b140      	cbz	r0, 8002f54 <__sfmoreglue+0x28>
 8002f42:	2100      	movs	r1, #0
 8002f44:	e9c0 1600 	strd	r1, r6, [r0]
 8002f48:	300c      	adds	r0, #12
 8002f4a:	60a0      	str	r0, [r4, #8]
 8002f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f50:	f7ff fe1a 	bl	8002b88 <memset>
 8002f54:	4620      	mov	r0, r4
 8002f56:	bd70      	pop	{r4, r5, r6, pc}

08002f58 <__sinit>:
 8002f58:	6983      	ldr	r3, [r0, #24]
 8002f5a:	b510      	push	{r4, lr}
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	bb33      	cbnz	r3, 8002fae <__sinit+0x56>
 8002f60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002f64:	6503      	str	r3, [r0, #80]	; 0x50
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <__sinit+0x58>)
 8002f68:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <__sinit+0x5c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6282      	str	r2, [r0, #40]	; 0x28
 8002f6e:	4298      	cmp	r0, r3
 8002f70:	bf04      	itt	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	6183      	streq	r3, [r0, #24]
 8002f76:	f000 f81f 	bl	8002fb8 <__sfp>
 8002f7a:	6060      	str	r0, [r4, #4]
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f000 f81b 	bl	8002fb8 <__sfp>
 8002f82:	60a0      	str	r0, [r4, #8]
 8002f84:	4620      	mov	r0, r4
 8002f86:	f000 f817 	bl	8002fb8 <__sfp>
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60e0      	str	r0, [r4, #12]
 8002f8e:	2104      	movs	r1, #4
 8002f90:	6860      	ldr	r0, [r4, #4]
 8002f92:	f7ff ffa1 	bl	8002ed8 <std>
 8002f96:	2201      	movs	r2, #1
 8002f98:	2109      	movs	r1, #9
 8002f9a:	68a0      	ldr	r0, [r4, #8]
 8002f9c:	f7ff ff9c 	bl	8002ed8 <std>
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	2112      	movs	r1, #18
 8002fa4:	68e0      	ldr	r0, [r4, #12]
 8002fa6:	f7ff ff97 	bl	8002ed8 <std>
 8002faa:	2301      	movs	r3, #1
 8002fac:	61a3      	str	r3, [r4, #24]
 8002fae:	bd10      	pop	{r4, pc}
 8002fb0:	0800473c 	.word	0x0800473c
 8002fb4:	08002f21 	.word	0x08002f21

08002fb8 <__sfp>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <__sfp+0x70>)
 8002fbc:	681e      	ldr	r6, [r3, #0]
 8002fbe:	69b3      	ldr	r3, [r6, #24]
 8002fc0:	4607      	mov	r7, r0
 8002fc2:	b913      	cbnz	r3, 8002fca <__sfp+0x12>
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f7ff ffc7 	bl	8002f58 <__sinit>
 8002fca:	3648      	adds	r6, #72	; 0x48
 8002fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	d503      	bpl.n	8002fdc <__sfp+0x24>
 8002fd4:	6833      	ldr	r3, [r6, #0]
 8002fd6:	b133      	cbz	r3, 8002fe6 <__sfp+0x2e>
 8002fd8:	6836      	ldr	r6, [r6, #0]
 8002fda:	e7f7      	b.n	8002fcc <__sfp+0x14>
 8002fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fe0:	b16d      	cbz	r5, 8002ffe <__sfp+0x46>
 8002fe2:	3468      	adds	r4, #104	; 0x68
 8002fe4:	e7f4      	b.n	8002fd0 <__sfp+0x18>
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	4638      	mov	r0, r7
 8002fea:	f7ff ff9f 	bl	8002f2c <__sfmoreglue>
 8002fee:	6030      	str	r0, [r6, #0]
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d1f1      	bne.n	8002fd8 <__sfp+0x20>
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <__sfp+0x74>)
 8003000:	6665      	str	r5, [r4, #100]	; 0x64
 8003002:	e9c4 5500 	strd	r5, r5, [r4]
 8003006:	60a5      	str	r5, [r4, #8]
 8003008:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800300c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003010:	2208      	movs	r2, #8
 8003012:	4629      	mov	r1, r5
 8003014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003018:	f7ff fdb6 	bl	8002b88 <memset>
 800301c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003024:	e7e9      	b.n	8002ffa <__sfp+0x42>
 8003026:	bf00      	nop
 8003028:	0800473c 	.word	0x0800473c
 800302c:	ffff0001 	.word	0xffff0001

08003030 <_fwalk>:
 8003030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003034:	4688      	mov	r8, r1
 8003036:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800303a:	2600      	movs	r6, #0
 800303c:	b914      	cbnz	r4, 8003044 <_fwalk+0x14>
 800303e:	4630      	mov	r0, r6
 8003040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003044:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003048:	3f01      	subs	r7, #1
 800304a:	d501      	bpl.n	8003050 <_fwalk+0x20>
 800304c:	6824      	ldr	r4, [r4, #0]
 800304e:	e7f5      	b.n	800303c <_fwalk+0xc>
 8003050:	89ab      	ldrh	r3, [r5, #12]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d906      	bls.n	8003064 <_fwalk+0x34>
 8003056:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800305a:	3301      	adds	r3, #1
 800305c:	d002      	beq.n	8003064 <_fwalk+0x34>
 800305e:	4628      	mov	r0, r5
 8003060:	47c0      	blx	r8
 8003062:	4306      	orrs	r6, r0
 8003064:	3568      	adds	r5, #104	; 0x68
 8003066:	e7ef      	b.n	8003048 <_fwalk+0x18>

08003068 <_fwalk_reent>:
 8003068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800306c:	4680      	mov	r8, r0
 800306e:	4689      	mov	r9, r1
 8003070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003074:	2600      	movs	r6, #0
 8003076:	b914      	cbnz	r4, 800307e <_fwalk_reent+0x16>
 8003078:	4630      	mov	r0, r6
 800307a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800307e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003082:	3f01      	subs	r7, #1
 8003084:	d501      	bpl.n	800308a <_fwalk_reent+0x22>
 8003086:	6824      	ldr	r4, [r4, #0]
 8003088:	e7f5      	b.n	8003076 <_fwalk_reent+0xe>
 800308a:	89ab      	ldrh	r3, [r5, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d907      	bls.n	80030a0 <_fwalk_reent+0x38>
 8003090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003094:	3301      	adds	r3, #1
 8003096:	d003      	beq.n	80030a0 <_fwalk_reent+0x38>
 8003098:	4629      	mov	r1, r5
 800309a:	4640      	mov	r0, r8
 800309c:	47c8      	blx	r9
 800309e:	4306      	orrs	r6, r0
 80030a0:	3568      	adds	r5, #104	; 0x68
 80030a2:	e7ee      	b.n	8003082 <_fwalk_reent+0x1a>

080030a4 <__swhatbuf_r>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	460e      	mov	r6, r1
 80030a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ac:	2900      	cmp	r1, #0
 80030ae:	b096      	sub	sp, #88	; 0x58
 80030b0:	4614      	mov	r4, r2
 80030b2:	461d      	mov	r5, r3
 80030b4:	da07      	bge.n	80030c6 <__swhatbuf_r+0x22>
 80030b6:	2300      	movs	r3, #0
 80030b8:	602b      	str	r3, [r5, #0]
 80030ba:	89b3      	ldrh	r3, [r6, #12]
 80030bc:	061a      	lsls	r2, r3, #24
 80030be:	d410      	bmi.n	80030e2 <__swhatbuf_r+0x3e>
 80030c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c4:	e00e      	b.n	80030e4 <__swhatbuf_r+0x40>
 80030c6:	466a      	mov	r2, sp
 80030c8:	f001 fa5a 	bl	8004580 <_fstat_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	dbf2      	blt.n	80030b6 <__swhatbuf_r+0x12>
 80030d0:	9a01      	ldr	r2, [sp, #4]
 80030d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80030d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030da:	425a      	negs	r2, r3
 80030dc:	415a      	adcs	r2, r3
 80030de:	602a      	str	r2, [r5, #0]
 80030e0:	e7ee      	b.n	80030c0 <__swhatbuf_r+0x1c>
 80030e2:	2340      	movs	r3, #64	; 0x40
 80030e4:	2000      	movs	r0, #0
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	b016      	add	sp, #88	; 0x58
 80030ea:	bd70      	pop	{r4, r5, r6, pc}

080030ec <__smakebuf_r>:
 80030ec:	898b      	ldrh	r3, [r1, #12]
 80030ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030f0:	079d      	lsls	r5, r3, #30
 80030f2:	4606      	mov	r6, r0
 80030f4:	460c      	mov	r4, r1
 80030f6:	d507      	bpl.n	8003108 <__smakebuf_r+0x1c>
 80030f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	6123      	str	r3, [r4, #16]
 8003100:	2301      	movs	r3, #1
 8003102:	6163      	str	r3, [r4, #20]
 8003104:	b002      	add	sp, #8
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	ab01      	add	r3, sp, #4
 800310a:	466a      	mov	r2, sp
 800310c:	f7ff ffca 	bl	80030a4 <__swhatbuf_r>
 8003110:	9900      	ldr	r1, [sp, #0]
 8003112:	4605      	mov	r5, r0
 8003114:	4630      	mov	r0, r6
 8003116:	f000 f87f 	bl	8003218 <_malloc_r>
 800311a:	b948      	cbnz	r0, 8003130 <__smakebuf_r+0x44>
 800311c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003120:	059a      	lsls	r2, r3, #22
 8003122:	d4ef      	bmi.n	8003104 <__smakebuf_r+0x18>
 8003124:	f023 0303 	bic.w	r3, r3, #3
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	81a3      	strh	r3, [r4, #12]
 800312e:	e7e3      	b.n	80030f8 <__smakebuf_r+0xc>
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <__smakebuf_r+0x7c>)
 8003132:	62b3      	str	r3, [r6, #40]	; 0x28
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	6020      	str	r0, [r4, #0]
 8003138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313c:	81a3      	strh	r3, [r4, #12]
 800313e:	9b00      	ldr	r3, [sp, #0]
 8003140:	6163      	str	r3, [r4, #20]
 8003142:	9b01      	ldr	r3, [sp, #4]
 8003144:	6120      	str	r0, [r4, #16]
 8003146:	b15b      	cbz	r3, 8003160 <__smakebuf_r+0x74>
 8003148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800314c:	4630      	mov	r0, r6
 800314e:	f001 fa29 	bl	80045a4 <_isatty_r>
 8003152:	b128      	cbz	r0, 8003160 <__smakebuf_r+0x74>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	89a3      	ldrh	r3, [r4, #12]
 8003162:	431d      	orrs	r5, r3
 8003164:	81a5      	strh	r5, [r4, #12]
 8003166:	e7cd      	b.n	8003104 <__smakebuf_r+0x18>
 8003168:	08002f21 	.word	0x08002f21

0800316c <malloc>:
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <malloc+0xc>)
 800316e:	4601      	mov	r1, r0
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f000 b851 	b.w	8003218 <_malloc_r>
 8003176:	bf00      	nop
 8003178:	2000000c 	.word	0x2000000c

0800317c <_free_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4605      	mov	r5, r0
 8003180:	2900      	cmp	r1, #0
 8003182:	d045      	beq.n	8003210 <_free_r+0x94>
 8003184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003188:	1f0c      	subs	r4, r1, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	bfb8      	it	lt
 800318e:	18e4      	addlt	r4, r4, r3
 8003190:	f001 fa59 	bl	8004646 <__malloc_lock>
 8003194:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <_free_r+0x98>)
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	4610      	mov	r0, r2
 800319a:	b933      	cbnz	r3, 80031aa <_free_r+0x2e>
 800319c:	6063      	str	r3, [r4, #4]
 800319e:	6014      	str	r4, [r2, #0]
 80031a0:	4628      	mov	r0, r5
 80031a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031a6:	f001 ba4f 	b.w	8004648 <__malloc_unlock>
 80031aa:	42a3      	cmp	r3, r4
 80031ac:	d90c      	bls.n	80031c8 <_free_r+0x4c>
 80031ae:	6821      	ldr	r1, [r4, #0]
 80031b0:	1862      	adds	r2, r4, r1
 80031b2:	4293      	cmp	r3, r2
 80031b4:	bf04      	itt	eq
 80031b6:	681a      	ldreq	r2, [r3, #0]
 80031b8:	685b      	ldreq	r3, [r3, #4]
 80031ba:	6063      	str	r3, [r4, #4]
 80031bc:	bf04      	itt	eq
 80031be:	1852      	addeq	r2, r2, r1
 80031c0:	6022      	streq	r2, [r4, #0]
 80031c2:	6004      	str	r4, [r0, #0]
 80031c4:	e7ec      	b.n	80031a0 <_free_r+0x24>
 80031c6:	4613      	mov	r3, r2
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	b10a      	cbz	r2, 80031d0 <_free_r+0x54>
 80031cc:	42a2      	cmp	r2, r4
 80031ce:	d9fa      	bls.n	80031c6 <_free_r+0x4a>
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	1858      	adds	r0, r3, r1
 80031d4:	42a0      	cmp	r0, r4
 80031d6:	d10b      	bne.n	80031f0 <_free_r+0x74>
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	4401      	add	r1, r0
 80031dc:	1858      	adds	r0, r3, r1
 80031de:	4282      	cmp	r2, r0
 80031e0:	6019      	str	r1, [r3, #0]
 80031e2:	d1dd      	bne.n	80031a0 <_free_r+0x24>
 80031e4:	6810      	ldr	r0, [r2, #0]
 80031e6:	6852      	ldr	r2, [r2, #4]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	4401      	add	r1, r0
 80031ec:	6019      	str	r1, [r3, #0]
 80031ee:	e7d7      	b.n	80031a0 <_free_r+0x24>
 80031f0:	d902      	bls.n	80031f8 <_free_r+0x7c>
 80031f2:	230c      	movs	r3, #12
 80031f4:	602b      	str	r3, [r5, #0]
 80031f6:	e7d3      	b.n	80031a0 <_free_r+0x24>
 80031f8:	6820      	ldr	r0, [r4, #0]
 80031fa:	1821      	adds	r1, r4, r0
 80031fc:	428a      	cmp	r2, r1
 80031fe:	bf04      	itt	eq
 8003200:	6811      	ldreq	r1, [r2, #0]
 8003202:	6852      	ldreq	r2, [r2, #4]
 8003204:	6062      	str	r2, [r4, #4]
 8003206:	bf04      	itt	eq
 8003208:	1809      	addeq	r1, r1, r0
 800320a:	6021      	streq	r1, [r4, #0]
 800320c:	605c      	str	r4, [r3, #4]
 800320e:	e7c7      	b.n	80031a0 <_free_r+0x24>
 8003210:	bd38      	pop	{r3, r4, r5, pc}
 8003212:	bf00      	nop
 8003214:	200001fc 	.word	0x200001fc

08003218 <_malloc_r>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	1ccd      	adds	r5, r1, #3
 800321c:	f025 0503 	bic.w	r5, r5, #3
 8003220:	3508      	adds	r5, #8
 8003222:	2d0c      	cmp	r5, #12
 8003224:	bf38      	it	cc
 8003226:	250c      	movcc	r5, #12
 8003228:	2d00      	cmp	r5, #0
 800322a:	4606      	mov	r6, r0
 800322c:	db01      	blt.n	8003232 <_malloc_r+0x1a>
 800322e:	42a9      	cmp	r1, r5
 8003230:	d903      	bls.n	800323a <_malloc_r+0x22>
 8003232:	230c      	movs	r3, #12
 8003234:	6033      	str	r3, [r6, #0]
 8003236:	2000      	movs	r0, #0
 8003238:	bd70      	pop	{r4, r5, r6, pc}
 800323a:	f001 fa04 	bl	8004646 <__malloc_lock>
 800323e:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <_malloc_r+0xac>)
 8003240:	6814      	ldr	r4, [r2, #0]
 8003242:	4621      	mov	r1, r4
 8003244:	b991      	cbnz	r1, 800326c <_malloc_r+0x54>
 8003246:	4c20      	ldr	r4, [pc, #128]	; (80032c8 <_malloc_r+0xb0>)
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	b91b      	cbnz	r3, 8003254 <_malloc_r+0x3c>
 800324c:	4630      	mov	r0, r6
 800324e:	f000 fe6b 	bl	8003f28 <_sbrk_r>
 8003252:	6020      	str	r0, [r4, #0]
 8003254:	4629      	mov	r1, r5
 8003256:	4630      	mov	r0, r6
 8003258:	f000 fe66 	bl	8003f28 <_sbrk_r>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d124      	bne.n	80032aa <_malloc_r+0x92>
 8003260:	230c      	movs	r3, #12
 8003262:	6033      	str	r3, [r6, #0]
 8003264:	4630      	mov	r0, r6
 8003266:	f001 f9ef 	bl	8004648 <__malloc_unlock>
 800326a:	e7e4      	b.n	8003236 <_malloc_r+0x1e>
 800326c:	680b      	ldr	r3, [r1, #0]
 800326e:	1b5b      	subs	r3, r3, r5
 8003270:	d418      	bmi.n	80032a4 <_malloc_r+0x8c>
 8003272:	2b0b      	cmp	r3, #11
 8003274:	d90f      	bls.n	8003296 <_malloc_r+0x7e>
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	50cd      	str	r5, [r1, r3]
 800327a:	18cc      	adds	r4, r1, r3
 800327c:	4630      	mov	r0, r6
 800327e:	f001 f9e3 	bl	8004648 <__malloc_unlock>
 8003282:	f104 000b 	add.w	r0, r4, #11
 8003286:	1d23      	adds	r3, r4, #4
 8003288:	f020 0007 	bic.w	r0, r0, #7
 800328c:	1ac3      	subs	r3, r0, r3
 800328e:	d0d3      	beq.n	8003238 <_malloc_r+0x20>
 8003290:	425a      	negs	r2, r3
 8003292:	50e2      	str	r2, [r4, r3]
 8003294:	e7d0      	b.n	8003238 <_malloc_r+0x20>
 8003296:	428c      	cmp	r4, r1
 8003298:	684b      	ldr	r3, [r1, #4]
 800329a:	bf16      	itet	ne
 800329c:	6063      	strne	r3, [r4, #4]
 800329e:	6013      	streq	r3, [r2, #0]
 80032a0:	460c      	movne	r4, r1
 80032a2:	e7eb      	b.n	800327c <_malloc_r+0x64>
 80032a4:	460c      	mov	r4, r1
 80032a6:	6849      	ldr	r1, [r1, #4]
 80032a8:	e7cc      	b.n	8003244 <_malloc_r+0x2c>
 80032aa:	1cc4      	adds	r4, r0, #3
 80032ac:	f024 0403 	bic.w	r4, r4, #3
 80032b0:	42a0      	cmp	r0, r4
 80032b2:	d005      	beq.n	80032c0 <_malloc_r+0xa8>
 80032b4:	1a21      	subs	r1, r4, r0
 80032b6:	4630      	mov	r0, r6
 80032b8:	f000 fe36 	bl	8003f28 <_sbrk_r>
 80032bc:	3001      	adds	r0, #1
 80032be:	d0cf      	beq.n	8003260 <_malloc_r+0x48>
 80032c0:	6025      	str	r5, [r4, #0]
 80032c2:	e7db      	b.n	800327c <_malloc_r+0x64>
 80032c4:	200001fc 	.word	0x200001fc
 80032c8:	20000200 	.word	0x20000200

080032cc <__sfputc_r>:
 80032cc:	6893      	ldr	r3, [r2, #8]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	b410      	push	{r4}
 80032d4:	6093      	str	r3, [r2, #8]
 80032d6:	da08      	bge.n	80032ea <__sfputc_r+0x1e>
 80032d8:	6994      	ldr	r4, [r2, #24]
 80032da:	42a3      	cmp	r3, r4
 80032dc:	db01      	blt.n	80032e2 <__sfputc_r+0x16>
 80032de:	290a      	cmp	r1, #10
 80032e0:	d103      	bne.n	80032ea <__sfputc_r+0x1e>
 80032e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e6:	f001 b869 	b.w	80043bc <__swbuf_r>
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	1c58      	adds	r0, r3, #1
 80032ee:	6010      	str	r0, [r2, #0]
 80032f0:	7019      	strb	r1, [r3, #0]
 80032f2:	4608      	mov	r0, r1
 80032f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <__sfputs_r>:
 80032fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fc:	4606      	mov	r6, r0
 80032fe:	460f      	mov	r7, r1
 8003300:	4614      	mov	r4, r2
 8003302:	18d5      	adds	r5, r2, r3
 8003304:	42ac      	cmp	r4, r5
 8003306:	d101      	bne.n	800330c <__sfputs_r+0x12>
 8003308:	2000      	movs	r0, #0
 800330a:	e007      	b.n	800331c <__sfputs_r+0x22>
 800330c:	463a      	mov	r2, r7
 800330e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003312:	4630      	mov	r0, r6
 8003314:	f7ff ffda 	bl	80032cc <__sfputc_r>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d1f3      	bne.n	8003304 <__sfputs_r+0xa>
 800331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003320 <_vfiprintf_r>:
 8003320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	460c      	mov	r4, r1
 8003326:	b09d      	sub	sp, #116	; 0x74
 8003328:	4617      	mov	r7, r2
 800332a:	461d      	mov	r5, r3
 800332c:	4606      	mov	r6, r0
 800332e:	b118      	cbz	r0, 8003338 <_vfiprintf_r+0x18>
 8003330:	6983      	ldr	r3, [r0, #24]
 8003332:	b90b      	cbnz	r3, 8003338 <_vfiprintf_r+0x18>
 8003334:	f7ff fe10 	bl	8002f58 <__sinit>
 8003338:	4b7c      	ldr	r3, [pc, #496]	; (800352c <_vfiprintf_r+0x20c>)
 800333a:	429c      	cmp	r4, r3
 800333c:	d158      	bne.n	80033f0 <_vfiprintf_r+0xd0>
 800333e:	6874      	ldr	r4, [r6, #4]
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	0718      	lsls	r0, r3, #28
 8003344:	d55e      	bpl.n	8003404 <_vfiprintf_r+0xe4>
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d05b      	beq.n	8003404 <_vfiprintf_r+0xe4>
 800334c:	2300      	movs	r3, #0
 800334e:	9309      	str	r3, [sp, #36]	; 0x24
 8003350:	2320      	movs	r3, #32
 8003352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003356:	2330      	movs	r3, #48	; 0x30
 8003358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800335c:	9503      	str	r5, [sp, #12]
 800335e:	f04f 0b01 	mov.w	fp, #1
 8003362:	46b8      	mov	r8, r7
 8003364:	4645      	mov	r5, r8
 8003366:	f815 3b01 	ldrb.w	r3, [r5], #1
 800336a:	b10b      	cbz	r3, 8003370 <_vfiprintf_r+0x50>
 800336c:	2b25      	cmp	r3, #37	; 0x25
 800336e:	d154      	bne.n	800341a <_vfiprintf_r+0xfa>
 8003370:	ebb8 0a07 	subs.w	sl, r8, r7
 8003374:	d00b      	beq.n	800338e <_vfiprintf_r+0x6e>
 8003376:	4653      	mov	r3, sl
 8003378:	463a      	mov	r2, r7
 800337a:	4621      	mov	r1, r4
 800337c:	4630      	mov	r0, r6
 800337e:	f7ff ffbc 	bl	80032fa <__sfputs_r>
 8003382:	3001      	adds	r0, #1
 8003384:	f000 80c2 	beq.w	800350c <_vfiprintf_r+0x1ec>
 8003388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800338a:	4453      	add	r3, sl
 800338c:	9309      	str	r3, [sp, #36]	; 0x24
 800338e:	f898 3000 	ldrb.w	r3, [r8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80ba 	beq.w	800350c <_vfiprintf_r+0x1ec>
 8003398:	2300      	movs	r3, #0
 800339a:	f04f 32ff 	mov.w	r2, #4294967295
 800339e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033a2:	9304      	str	r3, [sp, #16]
 80033a4:	9307      	str	r3, [sp, #28]
 80033a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033aa:	931a      	str	r3, [sp, #104]	; 0x68
 80033ac:	46a8      	mov	r8, r5
 80033ae:	2205      	movs	r2, #5
 80033b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80033b4:	485e      	ldr	r0, [pc, #376]	; (8003530 <_vfiprintf_r+0x210>)
 80033b6:	f7fc ff13 	bl	80001e0 <memchr>
 80033ba:	9b04      	ldr	r3, [sp, #16]
 80033bc:	bb78      	cbnz	r0, 800341e <_vfiprintf_r+0xfe>
 80033be:	06d9      	lsls	r1, r3, #27
 80033c0:	bf44      	itt	mi
 80033c2:	2220      	movmi	r2, #32
 80033c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033c8:	071a      	lsls	r2, r3, #28
 80033ca:	bf44      	itt	mi
 80033cc:	222b      	movmi	r2, #43	; 0x2b
 80033ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033d2:	782a      	ldrb	r2, [r5, #0]
 80033d4:	2a2a      	cmp	r2, #42	; 0x2a
 80033d6:	d02a      	beq.n	800342e <_vfiprintf_r+0x10e>
 80033d8:	9a07      	ldr	r2, [sp, #28]
 80033da:	46a8      	mov	r8, r5
 80033dc:	2000      	movs	r0, #0
 80033de:	250a      	movs	r5, #10
 80033e0:	4641      	mov	r1, r8
 80033e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033e6:	3b30      	subs	r3, #48	; 0x30
 80033e8:	2b09      	cmp	r3, #9
 80033ea:	d969      	bls.n	80034c0 <_vfiprintf_r+0x1a0>
 80033ec:	b360      	cbz	r0, 8003448 <_vfiprintf_r+0x128>
 80033ee:	e024      	b.n	800343a <_vfiprintf_r+0x11a>
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <_vfiprintf_r+0x214>)
 80033f2:	429c      	cmp	r4, r3
 80033f4:	d101      	bne.n	80033fa <_vfiprintf_r+0xda>
 80033f6:	68b4      	ldr	r4, [r6, #8]
 80033f8:	e7a2      	b.n	8003340 <_vfiprintf_r+0x20>
 80033fa:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <_vfiprintf_r+0x218>)
 80033fc:	429c      	cmp	r4, r3
 80033fe:	bf08      	it	eq
 8003400:	68f4      	ldreq	r4, [r6, #12]
 8003402:	e79d      	b.n	8003340 <_vfiprintf_r+0x20>
 8003404:	4621      	mov	r1, r4
 8003406:	4630      	mov	r0, r6
 8003408:	f001 f83c 	bl	8004484 <__swsetup_r>
 800340c:	2800      	cmp	r0, #0
 800340e:	d09d      	beq.n	800334c <_vfiprintf_r+0x2c>
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	b01d      	add	sp, #116	; 0x74
 8003416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341a:	46a8      	mov	r8, r5
 800341c:	e7a2      	b.n	8003364 <_vfiprintf_r+0x44>
 800341e:	4a44      	ldr	r2, [pc, #272]	; (8003530 <_vfiprintf_r+0x210>)
 8003420:	1a80      	subs	r0, r0, r2
 8003422:	fa0b f000 	lsl.w	r0, fp, r0
 8003426:	4318      	orrs	r0, r3
 8003428:	9004      	str	r0, [sp, #16]
 800342a:	4645      	mov	r5, r8
 800342c:	e7be      	b.n	80033ac <_vfiprintf_r+0x8c>
 800342e:	9a03      	ldr	r2, [sp, #12]
 8003430:	1d11      	adds	r1, r2, #4
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	9103      	str	r1, [sp, #12]
 8003436:	2a00      	cmp	r2, #0
 8003438:	db01      	blt.n	800343e <_vfiprintf_r+0x11e>
 800343a:	9207      	str	r2, [sp, #28]
 800343c:	e004      	b.n	8003448 <_vfiprintf_r+0x128>
 800343e:	4252      	negs	r2, r2
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	9207      	str	r2, [sp, #28]
 8003446:	9304      	str	r3, [sp, #16]
 8003448:	f898 3000 	ldrb.w	r3, [r8]
 800344c:	2b2e      	cmp	r3, #46	; 0x2e
 800344e:	d10e      	bne.n	800346e <_vfiprintf_r+0x14e>
 8003450:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003454:	2b2a      	cmp	r3, #42	; 0x2a
 8003456:	d138      	bne.n	80034ca <_vfiprintf_r+0x1aa>
 8003458:	9b03      	ldr	r3, [sp, #12]
 800345a:	1d1a      	adds	r2, r3, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	9203      	str	r2, [sp, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	bfb8      	it	lt
 8003464:	f04f 33ff 	movlt.w	r3, #4294967295
 8003468:	f108 0802 	add.w	r8, r8, #2
 800346c:	9305      	str	r3, [sp, #20]
 800346e:	4d33      	ldr	r5, [pc, #204]	; (800353c <_vfiprintf_r+0x21c>)
 8003470:	f898 1000 	ldrb.w	r1, [r8]
 8003474:	2203      	movs	r2, #3
 8003476:	4628      	mov	r0, r5
 8003478:	f7fc feb2 	bl	80001e0 <memchr>
 800347c:	b140      	cbz	r0, 8003490 <_vfiprintf_r+0x170>
 800347e:	2340      	movs	r3, #64	; 0x40
 8003480:	1b40      	subs	r0, r0, r5
 8003482:	fa03 f000 	lsl.w	r0, r3, r0
 8003486:	9b04      	ldr	r3, [sp, #16]
 8003488:	4303      	orrs	r3, r0
 800348a:	f108 0801 	add.w	r8, r8, #1
 800348e:	9304      	str	r3, [sp, #16]
 8003490:	f898 1000 	ldrb.w	r1, [r8]
 8003494:	482a      	ldr	r0, [pc, #168]	; (8003540 <_vfiprintf_r+0x220>)
 8003496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800349a:	2206      	movs	r2, #6
 800349c:	f108 0701 	add.w	r7, r8, #1
 80034a0:	f7fc fe9e 	bl	80001e0 <memchr>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d037      	beq.n	8003518 <_vfiprintf_r+0x1f8>
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <_vfiprintf_r+0x224>)
 80034aa:	bb1b      	cbnz	r3, 80034f4 <_vfiprintf_r+0x1d4>
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	3307      	adds	r3, #7
 80034b0:	f023 0307 	bic.w	r3, r3, #7
 80034b4:	3308      	adds	r3, #8
 80034b6:	9303      	str	r3, [sp, #12]
 80034b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ba:	444b      	add	r3, r9
 80034bc:	9309      	str	r3, [sp, #36]	; 0x24
 80034be:	e750      	b.n	8003362 <_vfiprintf_r+0x42>
 80034c0:	fb05 3202 	mla	r2, r5, r2, r3
 80034c4:	2001      	movs	r0, #1
 80034c6:	4688      	mov	r8, r1
 80034c8:	e78a      	b.n	80033e0 <_vfiprintf_r+0xc0>
 80034ca:	2300      	movs	r3, #0
 80034cc:	f108 0801 	add.w	r8, r8, #1
 80034d0:	9305      	str	r3, [sp, #20]
 80034d2:	4619      	mov	r1, r3
 80034d4:	250a      	movs	r5, #10
 80034d6:	4640      	mov	r0, r8
 80034d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034dc:	3a30      	subs	r2, #48	; 0x30
 80034de:	2a09      	cmp	r2, #9
 80034e0:	d903      	bls.n	80034ea <_vfiprintf_r+0x1ca>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0c3      	beq.n	800346e <_vfiprintf_r+0x14e>
 80034e6:	9105      	str	r1, [sp, #20]
 80034e8:	e7c1      	b.n	800346e <_vfiprintf_r+0x14e>
 80034ea:	fb05 2101 	mla	r1, r5, r1, r2
 80034ee:	2301      	movs	r3, #1
 80034f0:	4680      	mov	r8, r0
 80034f2:	e7f0      	b.n	80034d6 <_vfiprintf_r+0x1b6>
 80034f4:	ab03      	add	r3, sp, #12
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4622      	mov	r2, r4
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <_vfiprintf_r+0x228>)
 80034fc:	a904      	add	r1, sp, #16
 80034fe:	4630      	mov	r0, r6
 8003500:	f3af 8000 	nop.w
 8003504:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003508:	4681      	mov	r9, r0
 800350a:	d1d5      	bne.n	80034b8 <_vfiprintf_r+0x198>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	065b      	lsls	r3, r3, #25
 8003510:	f53f af7e 	bmi.w	8003410 <_vfiprintf_r+0xf0>
 8003514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003516:	e77d      	b.n	8003414 <_vfiprintf_r+0xf4>
 8003518:	ab03      	add	r3, sp, #12
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	4622      	mov	r2, r4
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <_vfiprintf_r+0x228>)
 8003520:	a904      	add	r1, sp, #16
 8003522:	4630      	mov	r0, r6
 8003524:	f000 f888 	bl	8003638 <_printf_i>
 8003528:	e7ec      	b.n	8003504 <_vfiprintf_r+0x1e4>
 800352a:	bf00      	nop
 800352c:	08004760 	.word	0x08004760
 8003530:	080047a0 	.word	0x080047a0
 8003534:	08004780 	.word	0x08004780
 8003538:	08004740 	.word	0x08004740
 800353c:	080047a6 	.word	0x080047a6
 8003540:	080047aa 	.word	0x080047aa
 8003544:	00000000 	.word	0x00000000
 8003548:	080032fb 	.word	0x080032fb

0800354c <_printf_common>:
 800354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	4691      	mov	r9, r2
 8003552:	461f      	mov	r7, r3
 8003554:	688a      	ldr	r2, [r1, #8]
 8003556:	690b      	ldr	r3, [r1, #16]
 8003558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800355c:	4293      	cmp	r3, r2
 800355e:	bfb8      	it	lt
 8003560:	4613      	movlt	r3, r2
 8003562:	f8c9 3000 	str.w	r3, [r9]
 8003566:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800356a:	4606      	mov	r6, r0
 800356c:	460c      	mov	r4, r1
 800356e:	b112      	cbz	r2, 8003576 <_printf_common+0x2a>
 8003570:	3301      	adds	r3, #1
 8003572:	f8c9 3000 	str.w	r3, [r9]
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	0699      	lsls	r1, r3, #26
 800357a:	bf42      	ittt	mi
 800357c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003580:	3302      	addmi	r3, #2
 8003582:	f8c9 3000 	strmi.w	r3, [r9]
 8003586:	6825      	ldr	r5, [r4, #0]
 8003588:	f015 0506 	ands.w	r5, r5, #6
 800358c:	d107      	bne.n	800359e <_printf_common+0x52>
 800358e:	f104 0a19 	add.w	sl, r4, #25
 8003592:	68e3      	ldr	r3, [r4, #12]
 8003594:	f8d9 2000 	ldr.w	r2, [r9]
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	42ab      	cmp	r3, r5
 800359c:	dc28      	bgt.n	80035f0 <_printf_common+0xa4>
 800359e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	3300      	adds	r3, #0
 80035a6:	bf18      	it	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	0692      	lsls	r2, r2, #26
 80035ac:	d42d      	bmi.n	800360a <_printf_common+0xbe>
 80035ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035b2:	4639      	mov	r1, r7
 80035b4:	4630      	mov	r0, r6
 80035b6:	47c0      	blx	r8
 80035b8:	3001      	adds	r0, #1
 80035ba:	d020      	beq.n	80035fe <_printf_common+0xb2>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	68e5      	ldr	r5, [r4, #12]
 80035c0:	f8d9 2000 	ldr.w	r2, [r9]
 80035c4:	f003 0306 	and.w	r3, r3, #6
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	bf08      	it	eq
 80035cc:	1aad      	subeq	r5, r5, r2
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	bf0c      	ite	eq
 80035d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d8:	2500      	movne	r5, #0
 80035da:	4293      	cmp	r3, r2
 80035dc:	bfc4      	itt	gt
 80035de:	1a9b      	subgt	r3, r3, r2
 80035e0:	18ed      	addgt	r5, r5, r3
 80035e2:	f04f 0900 	mov.w	r9, #0
 80035e6:	341a      	adds	r4, #26
 80035e8:	454d      	cmp	r5, r9
 80035ea:	d11a      	bne.n	8003622 <_printf_common+0xd6>
 80035ec:	2000      	movs	r0, #0
 80035ee:	e008      	b.n	8003602 <_printf_common+0xb6>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4652      	mov	r2, sl
 80035f4:	4639      	mov	r1, r7
 80035f6:	4630      	mov	r0, r6
 80035f8:	47c0      	blx	r8
 80035fa:	3001      	adds	r0, #1
 80035fc:	d103      	bne.n	8003606 <_printf_common+0xba>
 80035fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003606:	3501      	adds	r5, #1
 8003608:	e7c3      	b.n	8003592 <_printf_common+0x46>
 800360a:	18e1      	adds	r1, r4, r3
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	2030      	movs	r0, #48	; 0x30
 8003610:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003614:	4422      	add	r2, r4
 8003616:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800361a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800361e:	3302      	adds	r3, #2
 8003620:	e7c5      	b.n	80035ae <_printf_common+0x62>
 8003622:	2301      	movs	r3, #1
 8003624:	4622      	mov	r2, r4
 8003626:	4639      	mov	r1, r7
 8003628:	4630      	mov	r0, r6
 800362a:	47c0      	blx	r8
 800362c:	3001      	adds	r0, #1
 800362e:	d0e6      	beq.n	80035fe <_printf_common+0xb2>
 8003630:	f109 0901 	add.w	r9, r9, #1
 8003634:	e7d8      	b.n	80035e8 <_printf_common+0x9c>
	...

08003638 <_printf_i>:
 8003638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800363c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003640:	460c      	mov	r4, r1
 8003642:	7e09      	ldrb	r1, [r1, #24]
 8003644:	b085      	sub	sp, #20
 8003646:	296e      	cmp	r1, #110	; 0x6e
 8003648:	4617      	mov	r7, r2
 800364a:	4606      	mov	r6, r0
 800364c:	4698      	mov	r8, r3
 800364e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003650:	f000 80b3 	beq.w	80037ba <_printf_i+0x182>
 8003654:	d822      	bhi.n	800369c <_printf_i+0x64>
 8003656:	2963      	cmp	r1, #99	; 0x63
 8003658:	d036      	beq.n	80036c8 <_printf_i+0x90>
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x3a>
 800365c:	2900      	cmp	r1, #0
 800365e:	f000 80b9 	beq.w	80037d4 <_printf_i+0x19c>
 8003662:	2958      	cmp	r1, #88	; 0x58
 8003664:	f000 8083 	beq.w	800376e <_printf_i+0x136>
 8003668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800366c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003670:	e032      	b.n	80036d8 <_printf_i+0xa0>
 8003672:	2964      	cmp	r1, #100	; 0x64
 8003674:	d001      	beq.n	800367a <_printf_i+0x42>
 8003676:	2969      	cmp	r1, #105	; 0x69
 8003678:	d1f6      	bne.n	8003668 <_printf_i+0x30>
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	0605      	lsls	r5, r0, #24
 8003680:	f103 0104 	add.w	r1, r3, #4
 8003684:	d52a      	bpl.n	80036dc <_printf_i+0xa4>
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6011      	str	r1, [r2, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	da03      	bge.n	8003696 <_printf_i+0x5e>
 800368e:	222d      	movs	r2, #45	; 0x2d
 8003690:	425b      	negs	r3, r3
 8003692:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003696:	486f      	ldr	r0, [pc, #444]	; (8003854 <_printf_i+0x21c>)
 8003698:	220a      	movs	r2, #10
 800369a:	e039      	b.n	8003710 <_printf_i+0xd8>
 800369c:	2973      	cmp	r1, #115	; 0x73
 800369e:	f000 809d 	beq.w	80037dc <_printf_i+0x1a4>
 80036a2:	d808      	bhi.n	80036b6 <_printf_i+0x7e>
 80036a4:	296f      	cmp	r1, #111	; 0x6f
 80036a6:	d020      	beq.n	80036ea <_printf_i+0xb2>
 80036a8:	2970      	cmp	r1, #112	; 0x70
 80036aa:	d1dd      	bne.n	8003668 <_printf_i+0x30>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	f043 0320 	orr.w	r3, r3, #32
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	e003      	b.n	80036be <_printf_i+0x86>
 80036b6:	2975      	cmp	r1, #117	; 0x75
 80036b8:	d017      	beq.n	80036ea <_printf_i+0xb2>
 80036ba:	2978      	cmp	r1, #120	; 0x78
 80036bc:	d1d4      	bne.n	8003668 <_printf_i+0x30>
 80036be:	2378      	movs	r3, #120	; 0x78
 80036c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036c4:	4864      	ldr	r0, [pc, #400]	; (8003858 <_printf_i+0x220>)
 80036c6:	e055      	b.n	8003774 <_printf_i+0x13c>
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	1d19      	adds	r1, r3, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6011      	str	r1, [r2, #0]
 80036d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036d8:	2301      	movs	r3, #1
 80036da:	e08c      	b.n	80037f6 <_printf_i+0x1be>
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6011      	str	r1, [r2, #0]
 80036e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036e4:	bf18      	it	ne
 80036e6:	b21b      	sxthne	r3, r3
 80036e8:	e7cf      	b.n	800368a <_printf_i+0x52>
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	6825      	ldr	r5, [r4, #0]
 80036ee:	1d18      	adds	r0, r3, #4
 80036f0:	6010      	str	r0, [r2, #0]
 80036f2:	0628      	lsls	r0, r5, #24
 80036f4:	d501      	bpl.n	80036fa <_printf_i+0xc2>
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	e002      	b.n	8003700 <_printf_i+0xc8>
 80036fa:	0668      	lsls	r0, r5, #25
 80036fc:	d5fb      	bpl.n	80036f6 <_printf_i+0xbe>
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	4854      	ldr	r0, [pc, #336]	; (8003854 <_printf_i+0x21c>)
 8003702:	296f      	cmp	r1, #111	; 0x6f
 8003704:	bf14      	ite	ne
 8003706:	220a      	movne	r2, #10
 8003708:	2208      	moveq	r2, #8
 800370a:	2100      	movs	r1, #0
 800370c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003710:	6865      	ldr	r5, [r4, #4]
 8003712:	60a5      	str	r5, [r4, #8]
 8003714:	2d00      	cmp	r5, #0
 8003716:	f2c0 8095 	blt.w	8003844 <_printf_i+0x20c>
 800371a:	6821      	ldr	r1, [r4, #0]
 800371c:	f021 0104 	bic.w	r1, r1, #4
 8003720:	6021      	str	r1, [r4, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d13d      	bne.n	80037a2 <_printf_i+0x16a>
 8003726:	2d00      	cmp	r5, #0
 8003728:	f040 808e 	bne.w	8003848 <_printf_i+0x210>
 800372c:	4665      	mov	r5, ip
 800372e:	2a08      	cmp	r2, #8
 8003730:	d10b      	bne.n	800374a <_printf_i+0x112>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	07db      	lsls	r3, r3, #31
 8003736:	d508      	bpl.n	800374a <_printf_i+0x112>
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	bfde      	ittt	le
 8003740:	2330      	movle	r3, #48	; 0x30
 8003742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003746:	f105 35ff 	addle.w	r5, r5, #4294967295
 800374a:	ebac 0305 	sub.w	r3, ip, r5
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	f8cd 8000 	str.w	r8, [sp]
 8003754:	463b      	mov	r3, r7
 8003756:	aa03      	add	r2, sp, #12
 8003758:	4621      	mov	r1, r4
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff fef6 	bl	800354c <_printf_common>
 8003760:	3001      	adds	r0, #1
 8003762:	d14d      	bne.n	8003800 <_printf_i+0x1c8>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	b005      	add	sp, #20
 800376a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800376e:	4839      	ldr	r0, [pc, #228]	; (8003854 <_printf_i+0x21c>)
 8003770:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003774:	6813      	ldr	r3, [r2, #0]
 8003776:	6821      	ldr	r1, [r4, #0]
 8003778:	1d1d      	adds	r5, r3, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6015      	str	r5, [r2, #0]
 800377e:	060a      	lsls	r2, r1, #24
 8003780:	d50b      	bpl.n	800379a <_printf_i+0x162>
 8003782:	07ca      	lsls	r2, r1, #31
 8003784:	bf44      	itt	mi
 8003786:	f041 0120 	orrmi.w	r1, r1, #32
 800378a:	6021      	strmi	r1, [r4, #0]
 800378c:	b91b      	cbnz	r3, 8003796 <_printf_i+0x15e>
 800378e:	6822      	ldr	r2, [r4, #0]
 8003790:	f022 0220 	bic.w	r2, r2, #32
 8003794:	6022      	str	r2, [r4, #0]
 8003796:	2210      	movs	r2, #16
 8003798:	e7b7      	b.n	800370a <_printf_i+0xd2>
 800379a:	064d      	lsls	r5, r1, #25
 800379c:	bf48      	it	mi
 800379e:	b29b      	uxthmi	r3, r3
 80037a0:	e7ef      	b.n	8003782 <_printf_i+0x14a>
 80037a2:	4665      	mov	r5, ip
 80037a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80037a8:	fb02 3311 	mls	r3, r2, r1, r3
 80037ac:	5cc3      	ldrb	r3, [r0, r3]
 80037ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037b2:	460b      	mov	r3, r1
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d1f5      	bne.n	80037a4 <_printf_i+0x16c>
 80037b8:	e7b9      	b.n	800372e <_printf_i+0xf6>
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	6825      	ldr	r5, [r4, #0]
 80037be:	6961      	ldr	r1, [r4, #20]
 80037c0:	1d18      	adds	r0, r3, #4
 80037c2:	6010      	str	r0, [r2, #0]
 80037c4:	0628      	lsls	r0, r5, #24
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	d501      	bpl.n	80037ce <_printf_i+0x196>
 80037ca:	6019      	str	r1, [r3, #0]
 80037cc:	e002      	b.n	80037d4 <_printf_i+0x19c>
 80037ce:	066a      	lsls	r2, r5, #25
 80037d0:	d5fb      	bpl.n	80037ca <_printf_i+0x192>
 80037d2:	8019      	strh	r1, [r3, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	6123      	str	r3, [r4, #16]
 80037d8:	4665      	mov	r5, ip
 80037da:	e7b9      	b.n	8003750 <_printf_i+0x118>
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	1d19      	adds	r1, r3, #4
 80037e0:	6011      	str	r1, [r2, #0]
 80037e2:	681d      	ldr	r5, [r3, #0]
 80037e4:	6862      	ldr	r2, [r4, #4]
 80037e6:	2100      	movs	r1, #0
 80037e8:	4628      	mov	r0, r5
 80037ea:	f7fc fcf9 	bl	80001e0 <memchr>
 80037ee:	b108      	cbz	r0, 80037f4 <_printf_i+0x1bc>
 80037f0:	1b40      	subs	r0, r0, r5
 80037f2:	6060      	str	r0, [r4, #4]
 80037f4:	6863      	ldr	r3, [r4, #4]
 80037f6:	6123      	str	r3, [r4, #16]
 80037f8:	2300      	movs	r3, #0
 80037fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fe:	e7a7      	b.n	8003750 <_printf_i+0x118>
 8003800:	6923      	ldr	r3, [r4, #16]
 8003802:	462a      	mov	r2, r5
 8003804:	4639      	mov	r1, r7
 8003806:	4630      	mov	r0, r6
 8003808:	47c0      	blx	r8
 800380a:	3001      	adds	r0, #1
 800380c:	d0aa      	beq.n	8003764 <_printf_i+0x12c>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	079b      	lsls	r3, r3, #30
 8003812:	d413      	bmi.n	800383c <_printf_i+0x204>
 8003814:	68e0      	ldr	r0, [r4, #12]
 8003816:	9b03      	ldr	r3, [sp, #12]
 8003818:	4298      	cmp	r0, r3
 800381a:	bfb8      	it	lt
 800381c:	4618      	movlt	r0, r3
 800381e:	e7a3      	b.n	8003768 <_printf_i+0x130>
 8003820:	2301      	movs	r3, #1
 8003822:	464a      	mov	r2, r9
 8003824:	4639      	mov	r1, r7
 8003826:	4630      	mov	r0, r6
 8003828:	47c0      	blx	r8
 800382a:	3001      	adds	r0, #1
 800382c:	d09a      	beq.n	8003764 <_printf_i+0x12c>
 800382e:	3501      	adds	r5, #1
 8003830:	68e3      	ldr	r3, [r4, #12]
 8003832:	9a03      	ldr	r2, [sp, #12]
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	42ab      	cmp	r3, r5
 8003838:	dcf2      	bgt.n	8003820 <_printf_i+0x1e8>
 800383a:	e7eb      	b.n	8003814 <_printf_i+0x1dc>
 800383c:	2500      	movs	r5, #0
 800383e:	f104 0919 	add.w	r9, r4, #25
 8003842:	e7f5      	b.n	8003830 <_printf_i+0x1f8>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ac      	bne.n	80037a2 <_printf_i+0x16a>
 8003848:	7803      	ldrb	r3, [r0, #0]
 800384a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800384e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003852:	e76c      	b.n	800372e <_printf_i+0xf6>
 8003854:	080047b1 	.word	0x080047b1
 8003858:	080047c2 	.word	0x080047c2

0800385c <__svfiscanf_r>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003864:	460c      	mov	r4, r1
 8003866:	2100      	movs	r1, #0
 8003868:	9144      	str	r1, [sp, #272]	; 0x110
 800386a:	9145      	str	r1, [sp, #276]	; 0x114
 800386c:	499f      	ldr	r1, [pc, #636]	; (8003aec <__svfiscanf_r+0x290>)
 800386e:	91a0      	str	r1, [sp, #640]	; 0x280
 8003870:	f10d 0804 	add.w	r8, sp, #4
 8003874:	499e      	ldr	r1, [pc, #632]	; (8003af0 <__svfiscanf_r+0x294>)
 8003876:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8003af4 <__svfiscanf_r+0x298>
 800387a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800387e:	4606      	mov	r6, r0
 8003880:	4692      	mov	sl, r2
 8003882:	91a1      	str	r1, [sp, #644]	; 0x284
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	270a      	movs	r7, #10
 8003888:	f89a 3000 	ldrb.w	r3, [sl]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 812a 	beq.w	8003ae6 <__svfiscanf_r+0x28a>
 8003892:	4655      	mov	r5, sl
 8003894:	f000 fe9a 	bl	80045cc <__locale_ctype_ptr>
 8003898:	f815 bb01 	ldrb.w	fp, [r5], #1
 800389c:	4458      	add	r0, fp
 800389e:	7843      	ldrb	r3, [r0, #1]
 80038a0:	f013 0308 	ands.w	r3, r3, #8
 80038a4:	d01c      	beq.n	80038e0 <__svfiscanf_r+0x84>
 80038a6:	6863      	ldr	r3, [r4, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dd12      	ble.n	80038d2 <__svfiscanf_r+0x76>
 80038ac:	f000 fe8e 	bl	80045cc <__locale_ctype_ptr>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	4410      	add	r0, r2
 80038b6:	7842      	ldrb	r2, [r0, #1]
 80038b8:	0712      	lsls	r2, r2, #28
 80038ba:	d401      	bmi.n	80038c0 <__svfiscanf_r+0x64>
 80038bc:	46aa      	mov	sl, r5
 80038be:	e7e3      	b.n	8003888 <__svfiscanf_r+0x2c>
 80038c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80038c2:	3201      	adds	r2, #1
 80038c4:	9245      	str	r2, [sp, #276]	; 0x114
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	3301      	adds	r3, #1
 80038ca:	3a01      	subs	r2, #1
 80038cc:	6062      	str	r2, [r4, #4]
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	e7e9      	b.n	80038a6 <__svfiscanf_r+0x4a>
 80038d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80038d4:	4621      	mov	r1, r4
 80038d6:	4630      	mov	r0, r6
 80038d8:	4798      	blx	r3
 80038da:	2800      	cmp	r0, #0
 80038dc:	d0e6      	beq.n	80038ac <__svfiscanf_r+0x50>
 80038de:	e7ed      	b.n	80038bc <__svfiscanf_r+0x60>
 80038e0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80038e4:	f040 8082 	bne.w	80039ec <__svfiscanf_r+0x190>
 80038e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80038ea:	9341      	str	r3, [sp, #260]	; 0x104
 80038ec:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80038f0:	2b2a      	cmp	r3, #42	; 0x2a
 80038f2:	d103      	bne.n	80038fc <__svfiscanf_r+0xa0>
 80038f4:	2310      	movs	r3, #16
 80038f6:	9341      	str	r3, [sp, #260]	; 0x104
 80038f8:	f10a 0502 	add.w	r5, sl, #2
 80038fc:	46aa      	mov	sl, r5
 80038fe:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003902:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003906:	2a09      	cmp	r2, #9
 8003908:	d922      	bls.n	8003950 <__svfiscanf_r+0xf4>
 800390a:	2203      	movs	r2, #3
 800390c:	4879      	ldr	r0, [pc, #484]	; (8003af4 <__svfiscanf_r+0x298>)
 800390e:	f7fc fc67 	bl	80001e0 <memchr>
 8003912:	b138      	cbz	r0, 8003924 <__svfiscanf_r+0xc8>
 8003914:	eba0 0309 	sub.w	r3, r0, r9
 8003918:	2001      	movs	r0, #1
 800391a:	4098      	lsls	r0, r3
 800391c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800391e:	4318      	orrs	r0, r3
 8003920:	9041      	str	r0, [sp, #260]	; 0x104
 8003922:	46aa      	mov	sl, r5
 8003924:	f89a 3000 	ldrb.w	r3, [sl]
 8003928:	2b67      	cmp	r3, #103	; 0x67
 800392a:	f10a 0501 	add.w	r5, sl, #1
 800392e:	d82b      	bhi.n	8003988 <__svfiscanf_r+0x12c>
 8003930:	2b65      	cmp	r3, #101	; 0x65
 8003932:	f080 809f 	bcs.w	8003a74 <__svfiscanf_r+0x218>
 8003936:	2b47      	cmp	r3, #71	; 0x47
 8003938:	d810      	bhi.n	800395c <__svfiscanf_r+0x100>
 800393a:	2b45      	cmp	r3, #69	; 0x45
 800393c:	f080 809a 	bcs.w	8003a74 <__svfiscanf_r+0x218>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d06c      	beq.n	8003a1e <__svfiscanf_r+0x1c2>
 8003944:	2b25      	cmp	r3, #37	; 0x25
 8003946:	d051      	beq.n	80039ec <__svfiscanf_r+0x190>
 8003948:	2303      	movs	r3, #3
 800394a:	9347      	str	r3, [sp, #284]	; 0x11c
 800394c:	9742      	str	r7, [sp, #264]	; 0x108
 800394e:	e027      	b.n	80039a0 <__svfiscanf_r+0x144>
 8003950:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003952:	fb07 1303 	mla	r3, r7, r3, r1
 8003956:	3b30      	subs	r3, #48	; 0x30
 8003958:	9343      	str	r3, [sp, #268]	; 0x10c
 800395a:	e7cf      	b.n	80038fc <__svfiscanf_r+0xa0>
 800395c:	2b5b      	cmp	r3, #91	; 0x5b
 800395e:	d06a      	beq.n	8003a36 <__svfiscanf_r+0x1da>
 8003960:	d80c      	bhi.n	800397c <__svfiscanf_r+0x120>
 8003962:	2b58      	cmp	r3, #88	; 0x58
 8003964:	d1f0      	bne.n	8003948 <__svfiscanf_r+0xec>
 8003966:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396c:	9241      	str	r2, [sp, #260]	; 0x104
 800396e:	2210      	movs	r2, #16
 8003970:	9242      	str	r2, [sp, #264]	; 0x108
 8003972:	2b6e      	cmp	r3, #110	; 0x6e
 8003974:	bf8c      	ite	hi
 8003976:	2304      	movhi	r3, #4
 8003978:	2303      	movls	r3, #3
 800397a:	e010      	b.n	800399e <__svfiscanf_r+0x142>
 800397c:	2b63      	cmp	r3, #99	; 0x63
 800397e:	d065      	beq.n	8003a4c <__svfiscanf_r+0x1f0>
 8003980:	2b64      	cmp	r3, #100	; 0x64
 8003982:	d1e1      	bne.n	8003948 <__svfiscanf_r+0xec>
 8003984:	9742      	str	r7, [sp, #264]	; 0x108
 8003986:	e7f4      	b.n	8003972 <__svfiscanf_r+0x116>
 8003988:	2b70      	cmp	r3, #112	; 0x70
 800398a:	d04b      	beq.n	8003a24 <__svfiscanf_r+0x1c8>
 800398c:	d826      	bhi.n	80039dc <__svfiscanf_r+0x180>
 800398e:	2b6e      	cmp	r3, #110	; 0x6e
 8003990:	d062      	beq.n	8003a58 <__svfiscanf_r+0x1fc>
 8003992:	d84c      	bhi.n	8003a2e <__svfiscanf_r+0x1d2>
 8003994:	2b69      	cmp	r3, #105	; 0x69
 8003996:	d1d7      	bne.n	8003948 <__svfiscanf_r+0xec>
 8003998:	2300      	movs	r3, #0
 800399a:	9342      	str	r3, [sp, #264]	; 0x108
 800399c:	2303      	movs	r3, #3
 800399e:	9347      	str	r3, [sp, #284]	; 0x11c
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	dd68      	ble.n	8003a78 <__svfiscanf_r+0x21c>
 80039a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039a8:	0659      	lsls	r1, r3, #25
 80039aa:	d407      	bmi.n	80039bc <__svfiscanf_r+0x160>
 80039ac:	f000 fe0e 	bl	80045cc <__locale_ctype_ptr>
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	4410      	add	r0, r2
 80039b6:	7842      	ldrb	r2, [r0, #1]
 80039b8:	0712      	lsls	r2, r2, #28
 80039ba:	d464      	bmi.n	8003a86 <__svfiscanf_r+0x22a>
 80039bc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80039be:	2b02      	cmp	r3, #2
 80039c0:	dc73      	bgt.n	8003aaa <__svfiscanf_r+0x24e>
 80039c2:	466b      	mov	r3, sp
 80039c4:	4622      	mov	r2, r4
 80039c6:	a941      	add	r1, sp, #260	; 0x104
 80039c8:	4630      	mov	r0, r6
 80039ca:	f000 f8bf 	bl	8003b4c <_scanf_chars>
 80039ce:	2801      	cmp	r0, #1
 80039d0:	f000 8089 	beq.w	8003ae6 <__svfiscanf_r+0x28a>
 80039d4:	2802      	cmp	r0, #2
 80039d6:	f47f af71 	bne.w	80038bc <__svfiscanf_r+0x60>
 80039da:	e01d      	b.n	8003a18 <__svfiscanf_r+0x1bc>
 80039dc:	2b75      	cmp	r3, #117	; 0x75
 80039de:	d0d1      	beq.n	8003984 <__svfiscanf_r+0x128>
 80039e0:	2b78      	cmp	r3, #120	; 0x78
 80039e2:	d0c0      	beq.n	8003966 <__svfiscanf_r+0x10a>
 80039e4:	2b73      	cmp	r3, #115	; 0x73
 80039e6:	d1af      	bne.n	8003948 <__svfiscanf_r+0xec>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e7d8      	b.n	800399e <__svfiscanf_r+0x142>
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	dd0c      	ble.n	8003a0c <__svfiscanf_r+0x1b0>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	455a      	cmp	r2, fp
 80039f8:	d175      	bne.n	8003ae6 <__svfiscanf_r+0x28a>
 80039fa:	3301      	adds	r3, #1
 80039fc:	6862      	ldr	r2, [r4, #4]
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003a02:	3a01      	subs	r2, #1
 8003a04:	3301      	adds	r3, #1
 8003a06:	6062      	str	r2, [r4, #4]
 8003a08:	9345      	str	r3, [sp, #276]	; 0x114
 8003a0a:	e757      	b.n	80038bc <__svfiscanf_r+0x60>
 8003a0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4630      	mov	r0, r6
 8003a12:	4798      	blx	r3
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d0ec      	beq.n	80039f2 <__svfiscanf_r+0x196>
 8003a18:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d159      	bne.n	8003ad2 <__svfiscanf_r+0x276>
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a22:	e05c      	b.n	8003ade <__svfiscanf_r+0x282>
 8003a24:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003a26:	f042 0220 	orr.w	r2, r2, #32
 8003a2a:	9241      	str	r2, [sp, #260]	; 0x104
 8003a2c:	e79b      	b.n	8003966 <__svfiscanf_r+0x10a>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	9342      	str	r3, [sp, #264]	; 0x108
 8003a32:	2304      	movs	r3, #4
 8003a34:	e7b3      	b.n	800399e <__svfiscanf_r+0x142>
 8003a36:	4629      	mov	r1, r5
 8003a38:	4640      	mov	r0, r8
 8003a3a:	f000 fa85 	bl	8003f48 <__sccl>
 8003a3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a44:	9341      	str	r3, [sp, #260]	; 0x104
 8003a46:	4605      	mov	r5, r0
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e7a8      	b.n	800399e <__svfiscanf_r+0x142>
 8003a4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a52:	9341      	str	r3, [sp, #260]	; 0x104
 8003a54:	2300      	movs	r3, #0
 8003a56:	e7a2      	b.n	800399e <__svfiscanf_r+0x142>
 8003a58:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003a5a:	06c3      	lsls	r3, r0, #27
 8003a5c:	f53f af2e 	bmi.w	80038bc <__svfiscanf_r+0x60>
 8003a60:	9b00      	ldr	r3, [sp, #0]
 8003a62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a64:	1d19      	adds	r1, r3, #4
 8003a66:	9100      	str	r1, [sp, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	07c0      	lsls	r0, r0, #31
 8003a6c:	bf4c      	ite	mi
 8003a6e:	801a      	strhmi	r2, [r3, #0]
 8003a70:	601a      	strpl	r2, [r3, #0]
 8003a72:	e723      	b.n	80038bc <__svfiscanf_r+0x60>
 8003a74:	2305      	movs	r3, #5
 8003a76:	e792      	b.n	800399e <__svfiscanf_r+0x142>
 8003a78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	4798      	blx	r3
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d090      	beq.n	80039a6 <__svfiscanf_r+0x14a>
 8003a84:	e7c8      	b.n	8003a18 <__svfiscanf_r+0x1bc>
 8003a86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a88:	3201      	adds	r2, #1
 8003a8a:	9245      	str	r2, [sp, #276]	; 0x114
 8003a8c:	6862      	ldr	r2, [r4, #4]
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	6062      	str	r2, [r4, #4]
 8003a94:	dd02      	ble.n	8003a9c <__svfiscanf_r+0x240>
 8003a96:	3301      	adds	r3, #1
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	e787      	b.n	80039ac <__svfiscanf_r+0x150>
 8003a9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	4798      	blx	r3
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d081      	beq.n	80039ac <__svfiscanf_r+0x150>
 8003aa8:	e7b6      	b.n	8003a18 <__svfiscanf_r+0x1bc>
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	dc06      	bgt.n	8003abc <__svfiscanf_r+0x260>
 8003aae:	466b      	mov	r3, sp
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	a941      	add	r1, sp, #260	; 0x104
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f000 f8ad 	bl	8003c14 <_scanf_i>
 8003aba:	e788      	b.n	80039ce <__svfiscanf_r+0x172>
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <__svfiscanf_r+0x29c>)
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f43f aefc 	beq.w	80038bc <__svfiscanf_r+0x60>
 8003ac4:	466b      	mov	r3, sp
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	a941      	add	r1, sp, #260	; 0x104
 8003aca:	4630      	mov	r0, r6
 8003acc:	f3af 8000 	nop.w
 8003ad0:	e77d      	b.n	80039ce <__svfiscanf_r+0x172>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ad8:	bf18      	it	ne
 8003ada:	f04f 30ff 	movne.w	r0, #4294967295
 8003ade:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003ae8:	e7f9      	b.n	8003ade <__svfiscanf_r+0x282>
 8003aea:	bf00      	nop
 8003aec:	080042d9 	.word	0x080042d9
 8003af0:	08003e11 	.word	0x08003e11
 8003af4:	080047a6 	.word	0x080047a6
 8003af8:	00000000 	.word	0x00000000

08003afc <_vfiscanf_r>:
 8003afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b00:	460c      	mov	r4, r1
 8003b02:	4616      	mov	r6, r2
 8003b04:	461f      	mov	r7, r3
 8003b06:	4605      	mov	r5, r0
 8003b08:	b118      	cbz	r0, 8003b12 <_vfiscanf_r+0x16>
 8003b0a:	6983      	ldr	r3, [r0, #24]
 8003b0c:	b90b      	cbnz	r3, 8003b12 <_vfiscanf_r+0x16>
 8003b0e:	f7ff fa23 	bl	8002f58 <__sinit>
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <_vfiscanf_r+0x44>)
 8003b14:	429c      	cmp	r4, r3
 8003b16:	d108      	bne.n	8003b2a <_vfiscanf_r+0x2e>
 8003b18:	686c      	ldr	r4, [r5, #4]
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	4621      	mov	r1, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b26:	f7ff be99 	b.w	800385c <__svfiscanf_r>
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <_vfiscanf_r+0x48>)
 8003b2c:	429c      	cmp	r4, r3
 8003b2e:	d101      	bne.n	8003b34 <_vfiscanf_r+0x38>
 8003b30:	68ac      	ldr	r4, [r5, #8]
 8003b32:	e7f2      	b.n	8003b1a <_vfiscanf_r+0x1e>
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <_vfiscanf_r+0x4c>)
 8003b36:	429c      	cmp	r4, r3
 8003b38:	bf08      	it	eq
 8003b3a:	68ec      	ldreq	r4, [r5, #12]
 8003b3c:	e7ed      	b.n	8003b1a <_vfiscanf_r+0x1e>
 8003b3e:	bf00      	nop
 8003b40:	08004760 	.word	0x08004760
 8003b44:	08004780 	.word	0x08004780
 8003b48:	08004740 	.word	0x08004740

08003b4c <_scanf_chars>:
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	4615      	mov	r5, r2
 8003b52:	688a      	ldr	r2, [r1, #8]
 8003b54:	4680      	mov	r8, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	b932      	cbnz	r2, 8003b68 <_scanf_chars+0x1c>
 8003b5a:	698a      	ldr	r2, [r1, #24]
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	f04f 32ff 	movne.w	r2, #4294967295
 8003b64:	2201      	moveq	r2, #1
 8003b66:	608a      	str	r2, [r1, #8]
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	06d1      	lsls	r1, r2, #27
 8003b6c:	bf5f      	itttt	pl
 8003b6e:	681a      	ldrpl	r2, [r3, #0]
 8003b70:	1d11      	addpl	r1, r2, #4
 8003b72:	6019      	strpl	r1, [r3, #0]
 8003b74:	6817      	ldrpl	r7, [r2, #0]
 8003b76:	2600      	movs	r6, #0
 8003b78:	69a3      	ldr	r3, [r4, #24]
 8003b7a:	b1db      	cbz	r3, 8003bb4 <_scanf_chars+0x68>
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <_scanf_chars+0x44>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	6962      	ldr	r2, [r4, #20]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	b9a3      	cbnz	r3, 8003bb4 <_scanf_chars+0x68>
 8003b8a:	2e00      	cmp	r6, #0
 8003b8c:	d132      	bne.n	8003bf4 <_scanf_chars+0xa8>
 8003b8e:	e006      	b.n	8003b9e <_scanf_chars+0x52>
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d007      	beq.n	8003ba4 <_scanf_chars+0x58>
 8003b94:	2e00      	cmp	r6, #0
 8003b96:	d12d      	bne.n	8003bf4 <_scanf_chars+0xa8>
 8003b98:	69a3      	ldr	r3, [r4, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d12a      	bne.n	8003bf4 <_scanf_chars+0xa8>
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba4:	f000 fd12 	bl	80045cc <__locale_ctype_ptr>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	4418      	add	r0, r3
 8003bae:	7843      	ldrb	r3, [r0, #1]
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	d4ef      	bmi.n	8003b94 <_scanf_chars+0x48>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	06da      	lsls	r2, r3, #27
 8003bb8:	bf5e      	ittt	pl
 8003bba:	682b      	ldrpl	r3, [r5, #0]
 8003bbc:	781b      	ldrbpl	r3, [r3, #0]
 8003bbe:	703b      	strbpl	r3, [r7, #0]
 8003bc0:	682a      	ldr	r2, [r5, #0]
 8003bc2:	686b      	ldr	r3, [r5, #4]
 8003bc4:	f102 0201 	add.w	r2, r2, #1
 8003bc8:	602a      	str	r2, [r5, #0]
 8003bca:	68a2      	ldr	r2, [r4, #8]
 8003bcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bd0:	f102 32ff 	add.w	r2, r2, #4294967295
 8003bd4:	606b      	str	r3, [r5, #4]
 8003bd6:	f106 0601 	add.w	r6, r6, #1
 8003bda:	bf58      	it	pl
 8003bdc:	3701      	addpl	r7, #1
 8003bde:	60a2      	str	r2, [r4, #8]
 8003be0:	b142      	cbz	r2, 8003bf4 <_scanf_chars+0xa8>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	dcc8      	bgt.n	8003b78 <_scanf_chars+0x2c>
 8003be6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003bea:	4629      	mov	r1, r5
 8003bec:	4640      	mov	r0, r8
 8003bee:	4798      	blx	r3
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d0c1      	beq.n	8003b78 <_scanf_chars+0x2c>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	f013 0310 	ands.w	r3, r3, #16
 8003bfa:	d105      	bne.n	8003c08 <_scanf_chars+0xbc>
 8003bfc:	68e2      	ldr	r2, [r4, #12]
 8003bfe:	3201      	adds	r2, #1
 8003c00:	60e2      	str	r2, [r4, #12]
 8003c02:	69a2      	ldr	r2, [r4, #24]
 8003c04:	b102      	cbz	r2, 8003c08 <_scanf_chars+0xbc>
 8003c06:	703b      	strb	r3, [r7, #0]
 8003c08:	6923      	ldr	r3, [r4, #16]
 8003c0a:	441e      	add	r6, r3
 8003c0c:	6126      	str	r6, [r4, #16]
 8003c0e:	2000      	movs	r0, #0
 8003c10:	e7c6      	b.n	8003ba0 <_scanf_chars+0x54>
	...

08003c14 <_scanf_i>:
 8003c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c18:	469a      	mov	sl, r3
 8003c1a:	4b74      	ldr	r3, [pc, #464]	; (8003dec <_scanf_i+0x1d8>)
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	4683      	mov	fp, r0
 8003c20:	4616      	mov	r6, r2
 8003c22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c26:	b087      	sub	sp, #28
 8003c28:	ab03      	add	r3, sp, #12
 8003c2a:	68a7      	ldr	r7, [r4, #8]
 8003c2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c30:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <_scanf_i+0x1dc>)
 8003c32:	69a1      	ldr	r1, [r4, #24]
 8003c34:	4a6f      	ldr	r2, [pc, #444]	; (8003df4 <_scanf_i+0x1e0>)
 8003c36:	2903      	cmp	r1, #3
 8003c38:	bf08      	it	eq
 8003c3a:	461a      	moveq	r2, r3
 8003c3c:	1e7b      	subs	r3, r7, #1
 8003c3e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8003c42:	bf84      	itt	hi
 8003c44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003c48:	60a3      	strhi	r3, [r4, #8]
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	9200      	str	r2, [sp, #0]
 8003c4e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003c52:	bf88      	it	hi
 8003c54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003c58:	f104 091c 	add.w	r9, r4, #28
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bf8c      	ite	hi
 8003c60:	197f      	addhi	r7, r7, r5
 8003c62:	2700      	movls	r7, #0
 8003c64:	464b      	mov	r3, r9
 8003c66:	f04f 0800 	mov.w	r8, #0
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	6831      	ldr	r1, [r6, #0]
 8003c6e:	ab03      	add	r3, sp, #12
 8003c70:	2202      	movs	r2, #2
 8003c72:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003c76:	7809      	ldrb	r1, [r1, #0]
 8003c78:	f7fc fab2 	bl	80001e0 <memchr>
 8003c7c:	9b01      	ldr	r3, [sp, #4]
 8003c7e:	b330      	cbz	r0, 8003cce <_scanf_i+0xba>
 8003c80:	f1b8 0f01 	cmp.w	r8, #1
 8003c84:	d15a      	bne.n	8003d3c <_scanf_i+0x128>
 8003c86:	6862      	ldr	r2, [r4, #4]
 8003c88:	b92a      	cbnz	r2, 8003c96 <_scanf_i+0x82>
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	2108      	movs	r1, #8
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	6061      	str	r1, [r4, #4]
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003c9c:	6022      	str	r2, [r4, #0]
 8003c9e:	68a2      	ldr	r2, [r4, #8]
 8003ca0:	1e51      	subs	r1, r2, #1
 8003ca2:	60a1      	str	r1, [r4, #8]
 8003ca4:	b19a      	cbz	r2, 8003cce <_scanf_i+0xba>
 8003ca6:	6832      	ldr	r2, [r6, #0]
 8003ca8:	1c51      	adds	r1, r2, #1
 8003caa:	6031      	str	r1, [r6, #0]
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	1c5d      	adds	r5, r3, #1
 8003cb2:	6873      	ldr	r3, [r6, #4]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	6073      	str	r3, [r6, #4]
 8003cba:	dc07      	bgt.n	8003ccc <_scanf_i+0xb8>
 8003cbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4658      	mov	r0, fp
 8003cc4:	4798      	blx	r3
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	f040 8086 	bne.w	8003dd8 <_scanf_i+0x1c4>
 8003ccc:	462b      	mov	r3, r5
 8003cce:	f108 0801 	add.w	r8, r8, #1
 8003cd2:	f1b8 0f03 	cmp.w	r8, #3
 8003cd6:	d1c8      	bne.n	8003c6a <_scanf_i+0x56>
 8003cd8:	6862      	ldr	r2, [r4, #4]
 8003cda:	b90a      	cbnz	r2, 8003ce0 <_scanf_i+0xcc>
 8003cdc:	220a      	movs	r2, #10
 8003cde:	6062      	str	r2, [r4, #4]
 8003ce0:	6862      	ldr	r2, [r4, #4]
 8003ce2:	4945      	ldr	r1, [pc, #276]	; (8003df8 <_scanf_i+0x1e4>)
 8003ce4:	6960      	ldr	r0, [r4, #20]
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	1a89      	subs	r1, r1, r2
 8003cea:	f000 f92d 	bl	8003f48 <__sccl>
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	f04f 0800 	mov.w	r8, #0
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	68a3      	ldr	r3, [r4, #8]
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d03a      	beq.n	8003d74 <_scanf_i+0x160>
 8003cfe:	6831      	ldr	r1, [r6, #0]
 8003d00:	6960      	ldr	r0, [r4, #20]
 8003d02:	f891 c000 	ldrb.w	ip, [r1]
 8003d06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d032      	beq.n	8003d74 <_scanf_i+0x160>
 8003d0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003d12:	d121      	bne.n	8003d58 <_scanf_i+0x144>
 8003d14:	0510      	lsls	r0, r2, #20
 8003d16:	d51f      	bpl.n	8003d58 <_scanf_i+0x144>
 8003d18:	f108 0801 	add.w	r8, r8, #1
 8003d1c:	b117      	cbz	r7, 8003d24 <_scanf_i+0x110>
 8003d1e:	3301      	adds	r3, #1
 8003d20:	3f01      	subs	r7, #1
 8003d22:	60a3      	str	r3, [r4, #8]
 8003d24:	6873      	ldr	r3, [r6, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	6073      	str	r3, [r6, #4]
 8003d2c:	dd1b      	ble.n	8003d66 <_scanf_i+0x152>
 8003d2e:	6833      	ldr	r3, [r6, #0]
 8003d30:	3301      	adds	r3, #1
 8003d32:	6033      	str	r3, [r6, #0]
 8003d34:	68a3      	ldr	r3, [r4, #8]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	60a3      	str	r3, [r4, #8]
 8003d3a:	e7dc      	b.n	8003cf6 <_scanf_i+0xe2>
 8003d3c:	f1b8 0f02 	cmp.w	r8, #2
 8003d40:	d1ad      	bne.n	8003c9e <_scanf_i+0x8a>
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003d48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003d4c:	d1bf      	bne.n	8003cce <_scanf_i+0xba>
 8003d4e:	2110      	movs	r1, #16
 8003d50:	6061      	str	r1, [r4, #4]
 8003d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d56:	e7a1      	b.n	8003c9c <_scanf_i+0x88>
 8003d58:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003d5c:	6022      	str	r2, [r4, #0]
 8003d5e:	780b      	ldrb	r3, [r1, #0]
 8003d60:	702b      	strb	r3, [r5, #0]
 8003d62:	3501      	adds	r5, #1
 8003d64:	e7de      	b.n	8003d24 <_scanf_i+0x110>
 8003d66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4658      	mov	r0, fp
 8003d6e:	4798      	blx	r3
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0df      	beq.n	8003d34 <_scanf_i+0x120>
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	05d9      	lsls	r1, r3, #23
 8003d78:	d50c      	bpl.n	8003d94 <_scanf_i+0x180>
 8003d7a:	454d      	cmp	r5, r9
 8003d7c:	d908      	bls.n	8003d90 <_scanf_i+0x17c>
 8003d7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d86:	4632      	mov	r2, r6
 8003d88:	4658      	mov	r0, fp
 8003d8a:	4798      	blx	r3
 8003d8c:	1e6f      	subs	r7, r5, #1
 8003d8e:	463d      	mov	r5, r7
 8003d90:	454d      	cmp	r5, r9
 8003d92:	d029      	beq.n	8003de8 <_scanf_i+0x1d4>
 8003d94:	6822      	ldr	r2, [r4, #0]
 8003d96:	f012 0210 	ands.w	r2, r2, #16
 8003d9a:	d113      	bne.n	8003dc4 <_scanf_i+0x1b0>
 8003d9c:	702a      	strb	r2, [r5, #0]
 8003d9e:	6863      	ldr	r3, [r4, #4]
 8003da0:	9e00      	ldr	r6, [sp, #0]
 8003da2:	4649      	mov	r1, r9
 8003da4:	4658      	mov	r0, fp
 8003da6:	47b0      	blx	r6
 8003da8:	f8da 3000 	ldr.w	r3, [sl]
 8003dac:	6821      	ldr	r1, [r4, #0]
 8003dae:	1d1a      	adds	r2, r3, #4
 8003db0:	f8ca 2000 	str.w	r2, [sl]
 8003db4:	f011 0f20 	tst.w	r1, #32
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	d010      	beq.n	8003dde <_scanf_i+0x1ca>
 8003dbc:	6018      	str	r0, [r3, #0]
 8003dbe:	68e3      	ldr	r3, [r4, #12]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	60e3      	str	r3, [r4, #12]
 8003dc4:	eba5 0509 	sub.w	r5, r5, r9
 8003dc8:	44a8      	add	r8, r5
 8003dca:	6925      	ldr	r5, [r4, #16]
 8003dcc:	4445      	add	r5, r8
 8003dce:	6125      	str	r5, [r4, #16]
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	b007      	add	sp, #28
 8003dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd8:	f04f 0800 	mov.w	r8, #0
 8003ddc:	e7ca      	b.n	8003d74 <_scanf_i+0x160>
 8003dde:	07ca      	lsls	r2, r1, #31
 8003de0:	bf4c      	ite	mi
 8003de2:	8018      	strhmi	r0, [r3, #0]
 8003de4:	6018      	strpl	r0, [r3, #0]
 8003de6:	e7ea      	b.n	8003dbe <_scanf_i+0x1aa>
 8003de8:	2001      	movs	r0, #1
 8003dea:	e7f2      	b.n	8003dd2 <_scanf_i+0x1be>
 8003dec:	08004718 	.word	0x08004718
 8003df0:	08004129 	.word	0x08004129
 8003df4:	08004241 	.word	0x08004241
 8003df8:	080047e3 	.word	0x080047e3

08003dfc <lflush>:
 8003dfc:	8983      	ldrh	r3, [r0, #12]
 8003dfe:	f003 0309 	and.w	r3, r3, #9
 8003e02:	2b09      	cmp	r3, #9
 8003e04:	d101      	bne.n	8003e0a <lflush+0xe>
 8003e06:	f7ff b855 	b.w	8002eb4 <fflush>
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	4770      	bx	lr
	...

08003e10 <__srefill_r>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	460c      	mov	r4, r1
 8003e14:	4605      	mov	r5, r0
 8003e16:	b118      	cbz	r0, 8003e20 <__srefill_r+0x10>
 8003e18:	6983      	ldr	r3, [r0, #24]
 8003e1a:	b90b      	cbnz	r3, 8003e20 <__srefill_r+0x10>
 8003e1c:	f7ff f89c 	bl	8002f58 <__sinit>
 8003e20:	4b3c      	ldr	r3, [pc, #240]	; (8003f14 <__srefill_r+0x104>)
 8003e22:	429c      	cmp	r4, r3
 8003e24:	d10a      	bne.n	8003e3c <__srefill_r+0x2c>
 8003e26:	686c      	ldr	r4, [r5, #4]
 8003e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6063      	str	r3, [r4, #4]
 8003e30:	b293      	uxth	r3, r2
 8003e32:	069e      	lsls	r6, r3, #26
 8003e34:	d50c      	bpl.n	8003e50 <__srefill_r+0x40>
 8003e36:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3a:	e067      	b.n	8003f0c <__srefill_r+0xfc>
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <__srefill_r+0x108>)
 8003e3e:	429c      	cmp	r4, r3
 8003e40:	d101      	bne.n	8003e46 <__srefill_r+0x36>
 8003e42:	68ac      	ldr	r4, [r5, #8]
 8003e44:	e7f0      	b.n	8003e28 <__srefill_r+0x18>
 8003e46:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <__srefill_r+0x10c>)
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	bf08      	it	eq
 8003e4c:	68ec      	ldreq	r4, [r5, #12]
 8003e4e:	e7eb      	b.n	8003e28 <__srefill_r+0x18>
 8003e50:	0758      	lsls	r0, r3, #29
 8003e52:	d449      	bmi.n	8003ee8 <__srefill_r+0xd8>
 8003e54:	06d9      	lsls	r1, r3, #27
 8003e56:	d405      	bmi.n	8003e64 <__srefill_r+0x54>
 8003e58:	2309      	movs	r3, #9
 8003e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	81a2      	strh	r2, [r4, #12]
 8003e62:	e7e8      	b.n	8003e36 <__srefill_r+0x26>
 8003e64:	071a      	lsls	r2, r3, #28
 8003e66:	d50b      	bpl.n	8003e80 <__srefill_r+0x70>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f7fe fff8 	bl	8002e60 <_fflush_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d1e0      	bne.n	8003e36 <__srefill_r+0x26>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	60a0      	str	r0, [r4, #8]
 8003e78:	f023 0308 	bic.w	r3, r3, #8
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	61a0      	str	r0, [r4, #24]
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	6923      	ldr	r3, [r4, #16]
 8003e8a:	b91b      	cbnz	r3, 8003e94 <__srefill_r+0x84>
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f7ff f92c 	bl	80030ec <__smakebuf_r>
 8003e94:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003e98:	b2be      	uxth	r6, r7
 8003e9a:	07b3      	lsls	r3, r6, #30
 8003e9c:	d00f      	beq.n	8003ebe <__srefill_r+0xae>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	81a3      	strh	r3, [r4, #12]
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <__srefill_r+0x110>)
 8003ea4:	491f      	ldr	r1, [pc, #124]	; (8003f24 <__srefill_r+0x114>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	f006 0609 	and.w	r6, r6, #9
 8003eac:	f7ff f8c0 	bl	8003030 <_fwalk>
 8003eb0:	2e09      	cmp	r6, #9
 8003eb2:	81a7      	strh	r7, [r4, #12]
 8003eb4:	d103      	bne.n	8003ebe <__srefill_r+0xae>
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f7fe ff4b 	bl	8002d54 <__sflush_r>
 8003ebe:	6922      	ldr	r2, [r4, #16]
 8003ec0:	6022      	str	r2, [r4, #0]
 8003ec2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003ec4:	6963      	ldr	r3, [r4, #20]
 8003ec6:	6a21      	ldr	r1, [r4, #32]
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b0      	blx	r6
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	6060      	str	r0, [r4, #4]
 8003ed0:	dc1d      	bgt.n	8003f0e <__srefill_r+0xfe>
 8003ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed6:	bf17      	itett	ne
 8003ed8:	2200      	movne	r2, #0
 8003eda:	f043 0320 	orreq.w	r3, r3, #32
 8003ede:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003ee2:	6062      	strne	r2, [r4, #4]
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	e7a6      	b.n	8003e36 <__srefill_r+0x26>
 8003ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eea:	2900      	cmp	r1, #0
 8003eec:	d0cc      	beq.n	8003e88 <__srefill_r+0x78>
 8003eee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ef2:	4299      	cmp	r1, r3
 8003ef4:	d002      	beq.n	8003efc <__srefill_r+0xec>
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7ff f940 	bl	800317c <_free_r>
 8003efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003efe:	6063      	str	r3, [r4, #4]
 8003f00:	2000      	movs	r0, #0
 8003f02:	6360      	str	r0, [r4, #52]	; 0x34
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0bf      	beq.n	8003e88 <__srefill_r+0x78>
 8003f08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e7fc      	b.n	8003f0c <__srefill_r+0xfc>
 8003f12:	bf00      	nop
 8003f14:	08004760 	.word	0x08004760
 8003f18:	08004780 	.word	0x08004780
 8003f1c:	08004740 	.word	0x08004740
 8003f20:	0800473c 	.word	0x0800473c
 8003f24:	08003dfd 	.word	0x08003dfd

08003f28 <_sbrk_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4c06      	ldr	r4, [pc, #24]	; (8003f44 <_sbrk_r+0x1c>)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4605      	mov	r5, r0
 8003f30:	4608      	mov	r0, r1
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	f7fc fdda 	bl	8000aec <_sbrk>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	d102      	bne.n	8003f42 <_sbrk_r+0x1a>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	b103      	cbz	r3, 8003f42 <_sbrk_r+0x1a>
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	2000026c 	.word	0x2000026c

08003f48 <__sccl>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	780b      	ldrb	r3, [r1, #0]
 8003f4c:	2b5e      	cmp	r3, #94	; 0x5e
 8003f4e:	bf13      	iteet	ne
 8003f50:	1c4a      	addne	r2, r1, #1
 8003f52:	1c8a      	addeq	r2, r1, #2
 8003f54:	784b      	ldrbeq	r3, [r1, #1]
 8003f56:	2100      	movne	r1, #0
 8003f58:	bf08      	it	eq
 8003f5a:	2101      	moveq	r1, #1
 8003f5c:	1e44      	subs	r4, r0, #1
 8003f5e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8003f62:	f804 1f01 	strb.w	r1, [r4, #1]!
 8003f66:	42ac      	cmp	r4, r5
 8003f68:	d1fb      	bne.n	8003f62 <__sccl+0x1a>
 8003f6a:	b913      	cbnz	r3, 8003f72 <__sccl+0x2a>
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
 8003f72:	f081 0401 	eor.w	r4, r1, #1
 8003f76:	54c4      	strb	r4, [r0, r3]
 8003f78:	1c51      	adds	r1, r2, #1
 8003f7a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8003f7e:	2d2d      	cmp	r5, #45	; 0x2d
 8003f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8003f84:	460a      	mov	r2, r1
 8003f86:	d006      	beq.n	8003f96 <__sccl+0x4e>
 8003f88:	2d5d      	cmp	r5, #93	; 0x5d
 8003f8a:	d0f0      	beq.n	8003f6e <__sccl+0x26>
 8003f8c:	b90d      	cbnz	r5, 8003f92 <__sccl+0x4a>
 8003f8e:	4632      	mov	r2, r6
 8003f90:	e7ed      	b.n	8003f6e <__sccl+0x26>
 8003f92:	462b      	mov	r3, r5
 8003f94:	e7ef      	b.n	8003f76 <__sccl+0x2e>
 8003f96:	780e      	ldrb	r6, [r1, #0]
 8003f98:	2e5d      	cmp	r6, #93	; 0x5d
 8003f9a:	d0fa      	beq.n	8003f92 <__sccl+0x4a>
 8003f9c:	42b3      	cmp	r3, r6
 8003f9e:	dcf8      	bgt.n	8003f92 <__sccl+0x4a>
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	429e      	cmp	r6, r3
 8003fa4:	54c4      	strb	r4, [r0, r3]
 8003fa6:	dcfb      	bgt.n	8003fa0 <__sccl+0x58>
 8003fa8:	3102      	adds	r1, #2
 8003faa:	e7e6      	b.n	8003f7a <__sccl+0x32>

08003fac <__sread>:
 8003fac:	b510      	push	{r4, lr}
 8003fae:	460c      	mov	r4, r1
 8003fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb4:	f000 fb70 	bl	8004698 <_read_r>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	bfab      	itete	ge
 8003fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003fc0:	181b      	addge	r3, r3, r0
 8003fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fc6:	bfac      	ite	ge
 8003fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fca:	81a3      	strhlt	r3, [r4, #12]
 8003fcc:	bd10      	pop	{r4, pc}

08003fce <__swrite>:
 8003fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd2:	461f      	mov	r7, r3
 8003fd4:	898b      	ldrh	r3, [r1, #12]
 8003fd6:	05db      	lsls	r3, r3, #23
 8003fd8:	4605      	mov	r5, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	4616      	mov	r6, r2
 8003fde:	d505      	bpl.n	8003fec <__swrite+0x1e>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe8:	f000 fafe 	bl	80045e8 <_lseek_r>
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff6:	81a3      	strh	r3, [r4, #12]
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	463b      	mov	r3, r7
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004002:	f000 ba2d 	b.w	8004460 <_write_r>

08004006 <__sseek>:
 8004006:	b510      	push	{r4, lr}
 8004008:	460c      	mov	r4, r1
 800400a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400e:	f000 faeb 	bl	80045e8 <_lseek_r>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	bf15      	itete	ne
 8004018:	6560      	strne	r0, [r4, #84]	; 0x54
 800401a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800401e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004022:	81a3      	strheq	r3, [r4, #12]
 8004024:	bf18      	it	ne
 8004026:	81a3      	strhne	r3, [r4, #12]
 8004028:	bd10      	pop	{r4, pc}

0800402a <__sclose>:
 800402a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402e:	f000 ba97 	b.w	8004560 <_close_r>

08004032 <_strtol_l.isra.0>:
 8004032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004036:	4680      	mov	r8, r0
 8004038:	4689      	mov	r9, r1
 800403a:	4692      	mov	sl, r2
 800403c:	461e      	mov	r6, r3
 800403e:	460f      	mov	r7, r1
 8004040:	463d      	mov	r5, r7
 8004042:	9808      	ldr	r0, [sp, #32]
 8004044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004048:	f000 fabc 	bl	80045c4 <__locale_ctype_ptr_l>
 800404c:	4420      	add	r0, r4
 800404e:	7843      	ldrb	r3, [r0, #1]
 8004050:	f013 0308 	ands.w	r3, r3, #8
 8004054:	d132      	bne.n	80040bc <_strtol_l.isra.0+0x8a>
 8004056:	2c2d      	cmp	r4, #45	; 0x2d
 8004058:	d132      	bne.n	80040c0 <_strtol_l.isra.0+0x8e>
 800405a:	787c      	ldrb	r4, [r7, #1]
 800405c:	1cbd      	adds	r5, r7, #2
 800405e:	2201      	movs	r2, #1
 8004060:	2e00      	cmp	r6, #0
 8004062:	d05d      	beq.n	8004120 <_strtol_l.isra.0+0xee>
 8004064:	2e10      	cmp	r6, #16
 8004066:	d109      	bne.n	800407c <_strtol_l.isra.0+0x4a>
 8004068:	2c30      	cmp	r4, #48	; 0x30
 800406a:	d107      	bne.n	800407c <_strtol_l.isra.0+0x4a>
 800406c:	782b      	ldrb	r3, [r5, #0]
 800406e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004072:	2b58      	cmp	r3, #88	; 0x58
 8004074:	d14f      	bne.n	8004116 <_strtol_l.isra.0+0xe4>
 8004076:	786c      	ldrb	r4, [r5, #1]
 8004078:	2610      	movs	r6, #16
 800407a:	3502      	adds	r5, #2
 800407c:	2a00      	cmp	r2, #0
 800407e:	bf14      	ite	ne
 8004080:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004084:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004088:	2700      	movs	r7, #0
 800408a:	fbb1 fcf6 	udiv	ip, r1, r6
 800408e:	4638      	mov	r0, r7
 8004090:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004094:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004098:	2b09      	cmp	r3, #9
 800409a:	d817      	bhi.n	80040cc <_strtol_l.isra.0+0x9a>
 800409c:	461c      	mov	r4, r3
 800409e:	42a6      	cmp	r6, r4
 80040a0:	dd23      	ble.n	80040ea <_strtol_l.isra.0+0xb8>
 80040a2:	1c7b      	adds	r3, r7, #1
 80040a4:	d007      	beq.n	80040b6 <_strtol_l.isra.0+0x84>
 80040a6:	4584      	cmp	ip, r0
 80040a8:	d31c      	bcc.n	80040e4 <_strtol_l.isra.0+0xb2>
 80040aa:	d101      	bne.n	80040b0 <_strtol_l.isra.0+0x7e>
 80040ac:	45a6      	cmp	lr, r4
 80040ae:	db19      	blt.n	80040e4 <_strtol_l.isra.0+0xb2>
 80040b0:	fb00 4006 	mla	r0, r0, r6, r4
 80040b4:	2701      	movs	r7, #1
 80040b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040ba:	e7eb      	b.n	8004094 <_strtol_l.isra.0+0x62>
 80040bc:	462f      	mov	r7, r5
 80040be:	e7bf      	b.n	8004040 <_strtol_l.isra.0+0xe>
 80040c0:	2c2b      	cmp	r4, #43	; 0x2b
 80040c2:	bf04      	itt	eq
 80040c4:	1cbd      	addeq	r5, r7, #2
 80040c6:	787c      	ldrbeq	r4, [r7, #1]
 80040c8:	461a      	mov	r2, r3
 80040ca:	e7c9      	b.n	8004060 <_strtol_l.isra.0+0x2e>
 80040cc:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80040d0:	2b19      	cmp	r3, #25
 80040d2:	d801      	bhi.n	80040d8 <_strtol_l.isra.0+0xa6>
 80040d4:	3c37      	subs	r4, #55	; 0x37
 80040d6:	e7e2      	b.n	800409e <_strtol_l.isra.0+0x6c>
 80040d8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80040dc:	2b19      	cmp	r3, #25
 80040de:	d804      	bhi.n	80040ea <_strtol_l.isra.0+0xb8>
 80040e0:	3c57      	subs	r4, #87	; 0x57
 80040e2:	e7dc      	b.n	800409e <_strtol_l.isra.0+0x6c>
 80040e4:	f04f 37ff 	mov.w	r7, #4294967295
 80040e8:	e7e5      	b.n	80040b6 <_strtol_l.isra.0+0x84>
 80040ea:	1c7b      	adds	r3, r7, #1
 80040ec:	d108      	bne.n	8004100 <_strtol_l.isra.0+0xce>
 80040ee:	2322      	movs	r3, #34	; 0x22
 80040f0:	f8c8 3000 	str.w	r3, [r8]
 80040f4:	4608      	mov	r0, r1
 80040f6:	f1ba 0f00 	cmp.w	sl, #0
 80040fa:	d107      	bne.n	800410c <_strtol_l.isra.0+0xda>
 80040fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004100:	b102      	cbz	r2, 8004104 <_strtol_l.isra.0+0xd2>
 8004102:	4240      	negs	r0, r0
 8004104:	f1ba 0f00 	cmp.w	sl, #0
 8004108:	d0f8      	beq.n	80040fc <_strtol_l.isra.0+0xca>
 800410a:	b10f      	cbz	r7, 8004110 <_strtol_l.isra.0+0xde>
 800410c:	f105 39ff 	add.w	r9, r5, #4294967295
 8004110:	f8ca 9000 	str.w	r9, [sl]
 8004114:	e7f2      	b.n	80040fc <_strtol_l.isra.0+0xca>
 8004116:	2430      	movs	r4, #48	; 0x30
 8004118:	2e00      	cmp	r6, #0
 800411a:	d1af      	bne.n	800407c <_strtol_l.isra.0+0x4a>
 800411c:	2608      	movs	r6, #8
 800411e:	e7ad      	b.n	800407c <_strtol_l.isra.0+0x4a>
 8004120:	2c30      	cmp	r4, #48	; 0x30
 8004122:	d0a3      	beq.n	800406c <_strtol_l.isra.0+0x3a>
 8004124:	260a      	movs	r6, #10
 8004126:	e7a9      	b.n	800407c <_strtol_l.isra.0+0x4a>

08004128 <_strtol_r>:
 8004128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800412a:	4c06      	ldr	r4, [pc, #24]	; (8004144 <_strtol_r+0x1c>)
 800412c:	4d06      	ldr	r5, [pc, #24]	; (8004148 <_strtol_r+0x20>)
 800412e:	6824      	ldr	r4, [r4, #0]
 8004130:	6a24      	ldr	r4, [r4, #32]
 8004132:	2c00      	cmp	r4, #0
 8004134:	bf08      	it	eq
 8004136:	462c      	moveq	r4, r5
 8004138:	9400      	str	r4, [sp, #0]
 800413a:	f7ff ff7a 	bl	8004032 <_strtol_l.isra.0>
 800413e:	b003      	add	sp, #12
 8004140:	bd30      	pop	{r4, r5, pc}
 8004142:	bf00      	nop
 8004144:	2000000c 	.word	0x2000000c
 8004148:	20000070 	.word	0x20000070

0800414c <_strtoul_l.isra.0>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	4680      	mov	r8, r0
 8004152:	4689      	mov	r9, r1
 8004154:	4692      	mov	sl, r2
 8004156:	461e      	mov	r6, r3
 8004158:	460f      	mov	r7, r1
 800415a:	463d      	mov	r5, r7
 800415c:	9808      	ldr	r0, [sp, #32]
 800415e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004162:	f000 fa2f 	bl	80045c4 <__locale_ctype_ptr_l>
 8004166:	4420      	add	r0, r4
 8004168:	7843      	ldrb	r3, [r0, #1]
 800416a:	f013 0308 	ands.w	r3, r3, #8
 800416e:	d130      	bne.n	80041d2 <_strtoul_l.isra.0+0x86>
 8004170:	2c2d      	cmp	r4, #45	; 0x2d
 8004172:	d130      	bne.n	80041d6 <_strtoul_l.isra.0+0x8a>
 8004174:	787c      	ldrb	r4, [r7, #1]
 8004176:	1cbd      	adds	r5, r7, #2
 8004178:	2101      	movs	r1, #1
 800417a:	2e00      	cmp	r6, #0
 800417c:	d05c      	beq.n	8004238 <_strtoul_l.isra.0+0xec>
 800417e:	2e10      	cmp	r6, #16
 8004180:	d109      	bne.n	8004196 <_strtoul_l.isra.0+0x4a>
 8004182:	2c30      	cmp	r4, #48	; 0x30
 8004184:	d107      	bne.n	8004196 <_strtoul_l.isra.0+0x4a>
 8004186:	782b      	ldrb	r3, [r5, #0]
 8004188:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800418c:	2b58      	cmp	r3, #88	; 0x58
 800418e:	d14e      	bne.n	800422e <_strtoul_l.isra.0+0xe2>
 8004190:	786c      	ldrb	r4, [r5, #1]
 8004192:	2610      	movs	r6, #16
 8004194:	3502      	adds	r5, #2
 8004196:	f04f 32ff 	mov.w	r2, #4294967295
 800419a:	2300      	movs	r3, #0
 800419c:	fbb2 f2f6 	udiv	r2, r2, r6
 80041a0:	fb06 fc02 	mul.w	ip, r6, r2
 80041a4:	ea6f 0c0c 	mvn.w	ip, ip
 80041a8:	4618      	mov	r0, r3
 80041aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80041ae:	2f09      	cmp	r7, #9
 80041b0:	d817      	bhi.n	80041e2 <_strtoul_l.isra.0+0x96>
 80041b2:	463c      	mov	r4, r7
 80041b4:	42a6      	cmp	r6, r4
 80041b6:	dd23      	ble.n	8004200 <_strtoul_l.isra.0+0xb4>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	db1e      	blt.n	80041fa <_strtoul_l.isra.0+0xae>
 80041bc:	4282      	cmp	r2, r0
 80041be:	d31c      	bcc.n	80041fa <_strtoul_l.isra.0+0xae>
 80041c0:	d101      	bne.n	80041c6 <_strtoul_l.isra.0+0x7a>
 80041c2:	45a4      	cmp	ip, r4
 80041c4:	db19      	blt.n	80041fa <_strtoul_l.isra.0+0xae>
 80041c6:	fb00 4006 	mla	r0, r0, r6, r4
 80041ca:	2301      	movs	r3, #1
 80041cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041d0:	e7eb      	b.n	80041aa <_strtoul_l.isra.0+0x5e>
 80041d2:	462f      	mov	r7, r5
 80041d4:	e7c1      	b.n	800415a <_strtoul_l.isra.0+0xe>
 80041d6:	2c2b      	cmp	r4, #43	; 0x2b
 80041d8:	bf04      	itt	eq
 80041da:	1cbd      	addeq	r5, r7, #2
 80041dc:	787c      	ldrbeq	r4, [r7, #1]
 80041de:	4619      	mov	r1, r3
 80041e0:	e7cb      	b.n	800417a <_strtoul_l.isra.0+0x2e>
 80041e2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80041e6:	2f19      	cmp	r7, #25
 80041e8:	d801      	bhi.n	80041ee <_strtoul_l.isra.0+0xa2>
 80041ea:	3c37      	subs	r4, #55	; 0x37
 80041ec:	e7e2      	b.n	80041b4 <_strtoul_l.isra.0+0x68>
 80041ee:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80041f2:	2f19      	cmp	r7, #25
 80041f4:	d804      	bhi.n	8004200 <_strtoul_l.isra.0+0xb4>
 80041f6:	3c57      	subs	r4, #87	; 0x57
 80041f8:	e7dc      	b.n	80041b4 <_strtoul_l.isra.0+0x68>
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e7e5      	b.n	80041cc <_strtoul_l.isra.0+0x80>
 8004200:	2b00      	cmp	r3, #0
 8004202:	da09      	bge.n	8004218 <_strtoul_l.isra.0+0xcc>
 8004204:	2322      	movs	r3, #34	; 0x22
 8004206:	f8c8 3000 	str.w	r3, [r8]
 800420a:	f04f 30ff 	mov.w	r0, #4294967295
 800420e:	f1ba 0f00 	cmp.w	sl, #0
 8004212:	d107      	bne.n	8004224 <_strtoul_l.isra.0+0xd8>
 8004214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004218:	b101      	cbz	r1, 800421c <_strtoul_l.isra.0+0xd0>
 800421a:	4240      	negs	r0, r0
 800421c:	f1ba 0f00 	cmp.w	sl, #0
 8004220:	d0f8      	beq.n	8004214 <_strtoul_l.isra.0+0xc8>
 8004222:	b10b      	cbz	r3, 8004228 <_strtoul_l.isra.0+0xdc>
 8004224:	f105 39ff 	add.w	r9, r5, #4294967295
 8004228:	f8ca 9000 	str.w	r9, [sl]
 800422c:	e7f2      	b.n	8004214 <_strtoul_l.isra.0+0xc8>
 800422e:	2430      	movs	r4, #48	; 0x30
 8004230:	2e00      	cmp	r6, #0
 8004232:	d1b0      	bne.n	8004196 <_strtoul_l.isra.0+0x4a>
 8004234:	2608      	movs	r6, #8
 8004236:	e7ae      	b.n	8004196 <_strtoul_l.isra.0+0x4a>
 8004238:	2c30      	cmp	r4, #48	; 0x30
 800423a:	d0a4      	beq.n	8004186 <_strtoul_l.isra.0+0x3a>
 800423c:	260a      	movs	r6, #10
 800423e:	e7aa      	b.n	8004196 <_strtoul_l.isra.0+0x4a>

08004240 <_strtoul_r>:
 8004240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004242:	4c06      	ldr	r4, [pc, #24]	; (800425c <_strtoul_r+0x1c>)
 8004244:	4d06      	ldr	r5, [pc, #24]	; (8004260 <_strtoul_r+0x20>)
 8004246:	6824      	ldr	r4, [r4, #0]
 8004248:	6a24      	ldr	r4, [r4, #32]
 800424a:	2c00      	cmp	r4, #0
 800424c:	bf08      	it	eq
 800424e:	462c      	moveq	r4, r5
 8004250:	9400      	str	r4, [sp, #0]
 8004252:	f7ff ff7b 	bl	800414c <_strtoul_l.isra.0>
 8004256:	b003      	add	sp, #12
 8004258:	bd30      	pop	{r4, r5, pc}
 800425a:	bf00      	nop
 800425c:	2000000c 	.word	0x2000000c
 8004260:	20000070 	.word	0x20000070

08004264 <__submore>:
 8004264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004268:	460c      	mov	r4, r1
 800426a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800426c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004270:	4299      	cmp	r1, r3
 8004272:	d11d      	bne.n	80042b0 <__submore+0x4c>
 8004274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004278:	f7fe ffce 	bl	8003218 <_malloc_r>
 800427c:	b918      	cbnz	r0, 8004286 <__submore+0x22>
 800427e:	f04f 30ff 	mov.w	r0, #4294967295
 8004282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800428a:	63a3      	str	r3, [r4, #56]	; 0x38
 800428c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004290:	6360      	str	r0, [r4, #52]	; 0x34
 8004292:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004296:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800429a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800429e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80042a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80042a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80042aa:	6020      	str	r0, [r4, #0]
 80042ac:	2000      	movs	r0, #0
 80042ae:	e7e8      	b.n	8004282 <__submore+0x1e>
 80042b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80042b2:	0077      	lsls	r7, r6, #1
 80042b4:	463a      	mov	r2, r7
 80042b6:	f000 f9c8 	bl	800464a <_realloc_r>
 80042ba:	4605      	mov	r5, r0
 80042bc:	2800      	cmp	r0, #0
 80042be:	d0de      	beq.n	800427e <__submore+0x1a>
 80042c0:	eb00 0806 	add.w	r8, r0, r6
 80042c4:	4601      	mov	r1, r0
 80042c6:	4632      	mov	r2, r6
 80042c8:	4640      	mov	r0, r8
 80042ca:	f000 f9b1 	bl	8004630 <memcpy>
 80042ce:	f8c4 8000 	str.w	r8, [r4]
 80042d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80042d6:	e7e9      	b.n	80042ac <__submore+0x48>

080042d8 <_ungetc_r>:
 80042d8:	1c4b      	adds	r3, r1, #1
 80042da:	b570      	push	{r4, r5, r6, lr}
 80042dc:	4606      	mov	r6, r0
 80042de:	460d      	mov	r5, r1
 80042e0:	4614      	mov	r4, r2
 80042e2:	d103      	bne.n	80042ec <_ungetc_r+0x14>
 80042e4:	f04f 35ff 	mov.w	r5, #4294967295
 80042e8:	4628      	mov	r0, r5
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	b118      	cbz	r0, 80042f6 <_ungetc_r+0x1e>
 80042ee:	6983      	ldr	r3, [r0, #24]
 80042f0:	b90b      	cbnz	r3, 80042f6 <_ungetc_r+0x1e>
 80042f2:	f7fe fe31 	bl	8002f58 <__sinit>
 80042f6:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <_ungetc_r+0xd8>)
 80042f8:	429c      	cmp	r4, r3
 80042fa:	d12c      	bne.n	8004356 <_ungetc_r+0x7e>
 80042fc:	6874      	ldr	r4, [r6, #4]
 80042fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004302:	f023 0320 	bic.w	r3, r3, #32
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	b29b      	uxth	r3, r3
 800430a:	0759      	lsls	r1, r3, #29
 800430c:	d413      	bmi.n	8004336 <_ungetc_r+0x5e>
 800430e:	06da      	lsls	r2, r3, #27
 8004310:	d5e8      	bpl.n	80042e4 <_ungetc_r+0xc>
 8004312:	071b      	lsls	r3, r3, #28
 8004314:	d50b      	bpl.n	800432e <_ungetc_r+0x56>
 8004316:	4621      	mov	r1, r4
 8004318:	4630      	mov	r0, r6
 800431a:	f7fe fda1 	bl	8002e60 <_fflush_r>
 800431e:	2800      	cmp	r0, #0
 8004320:	d1e0      	bne.n	80042e4 <_ungetc_r+0xc>
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	60a0      	str	r0, [r4, #8]
 8004326:	f023 0308 	bic.w	r3, r3, #8
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	61a0      	str	r0, [r4, #24]
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004338:	6862      	ldr	r2, [r4, #4]
 800433a:	b2ed      	uxtb	r5, r5
 800433c:	b1e3      	cbz	r3, 8004378 <_ungetc_r+0xa0>
 800433e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004340:	4293      	cmp	r3, r2
 8004342:	dd12      	ble.n	800436a <_ungetc_r+0x92>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	1e5a      	subs	r2, r3, #1
 8004348:	6022      	str	r2, [r4, #0]
 800434a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	3301      	adds	r3, #1
 8004352:	6063      	str	r3, [r4, #4]
 8004354:	e7c8      	b.n	80042e8 <_ungetc_r+0x10>
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <_ungetc_r+0xdc>)
 8004358:	429c      	cmp	r4, r3
 800435a:	d101      	bne.n	8004360 <_ungetc_r+0x88>
 800435c:	68b4      	ldr	r4, [r6, #8]
 800435e:	e7ce      	b.n	80042fe <_ungetc_r+0x26>
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <_ungetc_r+0xe0>)
 8004362:	429c      	cmp	r4, r3
 8004364:	bf08      	it	eq
 8004366:	68f4      	ldreq	r4, [r6, #12]
 8004368:	e7c9      	b.n	80042fe <_ungetc_r+0x26>
 800436a:	4621      	mov	r1, r4
 800436c:	4630      	mov	r0, r6
 800436e:	f7ff ff79 	bl	8004264 <__submore>
 8004372:	2800      	cmp	r0, #0
 8004374:	d0e6      	beq.n	8004344 <_ungetc_r+0x6c>
 8004376:	e7b5      	b.n	80042e4 <_ungetc_r+0xc>
 8004378:	6921      	ldr	r1, [r4, #16]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	b151      	cbz	r1, 8004394 <_ungetc_r+0xbc>
 800437e:	4299      	cmp	r1, r3
 8004380:	d208      	bcs.n	8004394 <_ungetc_r+0xbc>
 8004382:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004386:	42a9      	cmp	r1, r5
 8004388:	d104      	bne.n	8004394 <_ungetc_r+0xbc>
 800438a:	3b01      	subs	r3, #1
 800438c:	3201      	adds	r2, #1
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	6062      	str	r2, [r4, #4]
 8004392:	e7a9      	b.n	80042e8 <_ungetc_r+0x10>
 8004394:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800439c:	6363      	str	r3, [r4, #52]	; 0x34
 800439e:	2303      	movs	r3, #3
 80043a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80043a2:	4623      	mov	r3, r4
 80043a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	2301      	movs	r3, #1
 80043ac:	e7d1      	b.n	8004352 <_ungetc_r+0x7a>
 80043ae:	bf00      	nop
 80043b0:	08004760 	.word	0x08004760
 80043b4:	08004780 	.word	0x08004780
 80043b8:	08004740 	.word	0x08004740

080043bc <__swbuf_r>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	460e      	mov	r6, r1
 80043c0:	4614      	mov	r4, r2
 80043c2:	4605      	mov	r5, r0
 80043c4:	b118      	cbz	r0, 80043ce <__swbuf_r+0x12>
 80043c6:	6983      	ldr	r3, [r0, #24]
 80043c8:	b90b      	cbnz	r3, 80043ce <__swbuf_r+0x12>
 80043ca:	f7fe fdc5 	bl	8002f58 <__sinit>
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <__swbuf_r+0x98>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d12a      	bne.n	800442a <__swbuf_r+0x6e>
 80043d4:	686c      	ldr	r4, [r5, #4]
 80043d6:	69a3      	ldr	r3, [r4, #24]
 80043d8:	60a3      	str	r3, [r4, #8]
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	071a      	lsls	r2, r3, #28
 80043de:	d52e      	bpl.n	800443e <__swbuf_r+0x82>
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	b363      	cbz	r3, 800443e <__swbuf_r+0x82>
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	1ac0      	subs	r0, r0, r3
 80043ea:	6963      	ldr	r3, [r4, #20]
 80043ec:	b2f6      	uxtb	r6, r6
 80043ee:	4283      	cmp	r3, r0
 80043f0:	4637      	mov	r7, r6
 80043f2:	dc04      	bgt.n	80043fe <__swbuf_r+0x42>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7fe fd32 	bl	8002e60 <_fflush_r>
 80043fc:	bb28      	cbnz	r0, 800444a <__swbuf_r+0x8e>
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	3b01      	subs	r3, #1
 8004402:	60a3      	str	r3, [r4, #8]
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	6022      	str	r2, [r4, #0]
 800440a:	701e      	strb	r6, [r3, #0]
 800440c:	6963      	ldr	r3, [r4, #20]
 800440e:	3001      	adds	r0, #1
 8004410:	4283      	cmp	r3, r0
 8004412:	d004      	beq.n	800441e <__swbuf_r+0x62>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	07db      	lsls	r3, r3, #31
 8004418:	d519      	bpl.n	800444e <__swbuf_r+0x92>
 800441a:	2e0a      	cmp	r6, #10
 800441c:	d117      	bne.n	800444e <__swbuf_r+0x92>
 800441e:	4621      	mov	r1, r4
 8004420:	4628      	mov	r0, r5
 8004422:	f7fe fd1d 	bl	8002e60 <_fflush_r>
 8004426:	b190      	cbz	r0, 800444e <__swbuf_r+0x92>
 8004428:	e00f      	b.n	800444a <__swbuf_r+0x8e>
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <__swbuf_r+0x9c>)
 800442c:	429c      	cmp	r4, r3
 800442e:	d101      	bne.n	8004434 <__swbuf_r+0x78>
 8004430:	68ac      	ldr	r4, [r5, #8]
 8004432:	e7d0      	b.n	80043d6 <__swbuf_r+0x1a>
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <__swbuf_r+0xa0>)
 8004436:	429c      	cmp	r4, r3
 8004438:	bf08      	it	eq
 800443a:	68ec      	ldreq	r4, [r5, #12]
 800443c:	e7cb      	b.n	80043d6 <__swbuf_r+0x1a>
 800443e:	4621      	mov	r1, r4
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f81f 	bl	8004484 <__swsetup_r>
 8004446:	2800      	cmp	r0, #0
 8004448:	d0cc      	beq.n	80043e4 <__swbuf_r+0x28>
 800444a:	f04f 37ff 	mov.w	r7, #4294967295
 800444e:	4638      	mov	r0, r7
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004452:	bf00      	nop
 8004454:	08004760 	.word	0x08004760
 8004458:	08004780 	.word	0x08004780
 800445c:	08004740 	.word	0x08004740

08004460 <_write_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4c07      	ldr	r4, [pc, #28]	; (8004480 <_write_r+0x20>)
 8004464:	4605      	mov	r5, r0
 8004466:	4608      	mov	r0, r1
 8004468:	4611      	mov	r1, r2
 800446a:	2200      	movs	r2, #0
 800446c:	6022      	str	r2, [r4, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f7fc f9f2 	bl	8000858 <_write>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_write_r+0x1e>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	b103      	cbz	r3, 800447e <_write_r+0x1e>
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	2000026c 	.word	0x2000026c

08004484 <__swsetup_r>:
 8004484:	4b32      	ldr	r3, [pc, #200]	; (8004550 <__swsetup_r+0xcc>)
 8004486:	b570      	push	{r4, r5, r6, lr}
 8004488:	681d      	ldr	r5, [r3, #0]
 800448a:	4606      	mov	r6, r0
 800448c:	460c      	mov	r4, r1
 800448e:	b125      	cbz	r5, 800449a <__swsetup_r+0x16>
 8004490:	69ab      	ldr	r3, [r5, #24]
 8004492:	b913      	cbnz	r3, 800449a <__swsetup_r+0x16>
 8004494:	4628      	mov	r0, r5
 8004496:	f7fe fd5f 	bl	8002f58 <__sinit>
 800449a:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <__swsetup_r+0xd0>)
 800449c:	429c      	cmp	r4, r3
 800449e:	d10f      	bne.n	80044c0 <__swsetup_r+0x3c>
 80044a0:	686c      	ldr	r4, [r5, #4]
 80044a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	0715      	lsls	r5, r2, #28
 80044aa:	d42c      	bmi.n	8004506 <__swsetup_r+0x82>
 80044ac:	06d0      	lsls	r0, r2, #27
 80044ae:	d411      	bmi.n	80044d4 <__swsetup_r+0x50>
 80044b0:	2209      	movs	r2, #9
 80044b2:	6032      	str	r2, [r6, #0]
 80044b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b8:	81a3      	strh	r3, [r4, #12]
 80044ba:	f04f 30ff 	mov.w	r0, #4294967295
 80044be:	e03e      	b.n	800453e <__swsetup_r+0xba>
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <__swsetup_r+0xd4>)
 80044c2:	429c      	cmp	r4, r3
 80044c4:	d101      	bne.n	80044ca <__swsetup_r+0x46>
 80044c6:	68ac      	ldr	r4, [r5, #8]
 80044c8:	e7eb      	b.n	80044a2 <__swsetup_r+0x1e>
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <__swsetup_r+0xd8>)
 80044cc:	429c      	cmp	r4, r3
 80044ce:	bf08      	it	eq
 80044d0:	68ec      	ldreq	r4, [r5, #12]
 80044d2:	e7e6      	b.n	80044a2 <__swsetup_r+0x1e>
 80044d4:	0751      	lsls	r1, r2, #29
 80044d6:	d512      	bpl.n	80044fe <__swsetup_r+0x7a>
 80044d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044da:	b141      	cbz	r1, 80044ee <__swsetup_r+0x6a>
 80044dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d002      	beq.n	80044ea <__swsetup_r+0x66>
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7fe fe49 	bl	800317c <_free_r>
 80044ea:	2300      	movs	r3, #0
 80044ec:	6363      	str	r3, [r4, #52]	; 0x34
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	2300      	movs	r3, #0
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	b94b      	cbnz	r3, 800451e <__swsetup_r+0x9a>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004514:	d003      	beq.n	800451e <__swsetup_r+0x9a>
 8004516:	4621      	mov	r1, r4
 8004518:	4630      	mov	r0, r6
 800451a:	f7fe fde7 	bl	80030ec <__smakebuf_r>
 800451e:	89a2      	ldrh	r2, [r4, #12]
 8004520:	f012 0301 	ands.w	r3, r2, #1
 8004524:	d00c      	beq.n	8004540 <__swsetup_r+0xbc>
 8004526:	2300      	movs	r3, #0
 8004528:	60a3      	str	r3, [r4, #8]
 800452a:	6963      	ldr	r3, [r4, #20]
 800452c:	425b      	negs	r3, r3
 800452e:	61a3      	str	r3, [r4, #24]
 8004530:	6923      	ldr	r3, [r4, #16]
 8004532:	b953      	cbnz	r3, 800454a <__swsetup_r+0xc6>
 8004534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004538:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800453c:	d1ba      	bne.n	80044b4 <__swsetup_r+0x30>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	0792      	lsls	r2, r2, #30
 8004542:	bf58      	it	pl
 8004544:	6963      	ldrpl	r3, [r4, #20]
 8004546:	60a3      	str	r3, [r4, #8]
 8004548:	e7f2      	b.n	8004530 <__swsetup_r+0xac>
 800454a:	2000      	movs	r0, #0
 800454c:	e7f7      	b.n	800453e <__swsetup_r+0xba>
 800454e:	bf00      	nop
 8004550:	2000000c 	.word	0x2000000c
 8004554:	08004760 	.word	0x08004760
 8004558:	08004780 	.word	0x08004780
 800455c:	08004740 	.word	0x08004740

08004560 <_close_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4c06      	ldr	r4, [pc, #24]	; (800457c <_close_r+0x1c>)
 8004564:	2300      	movs	r3, #0
 8004566:	4605      	mov	r5, r0
 8004568:	4608      	mov	r0, r1
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	f7fc f9a0 	bl	80008b0 <_close>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_close_r+0x1a>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	b103      	cbz	r3, 800457a <_close_r+0x1a>
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	2000026c 	.word	0x2000026c

08004580 <_fstat_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4c07      	ldr	r4, [pc, #28]	; (80045a0 <_fstat_r+0x20>)
 8004584:	2300      	movs	r3, #0
 8004586:	4605      	mov	r5, r0
 8004588:	4608      	mov	r0, r1
 800458a:	4611      	mov	r1, r2
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	f7fc f9df 	bl	8000950 <_fstat>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d102      	bne.n	800459c <_fstat_r+0x1c>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	b103      	cbz	r3, 800459c <_fstat_r+0x1c>
 800459a:	602b      	str	r3, [r5, #0]
 800459c:	bd38      	pop	{r3, r4, r5, pc}
 800459e:	bf00      	nop
 80045a0:	2000026c 	.word	0x2000026c

080045a4 <_isatty_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4c06      	ldr	r4, [pc, #24]	; (80045c0 <_isatty_r+0x1c>)
 80045a8:	2300      	movs	r3, #0
 80045aa:	4605      	mov	r5, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	6023      	str	r3, [r4, #0]
 80045b0:	f7fc f93c 	bl	800082c <_isatty>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_isatty_r+0x1a>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	b103      	cbz	r3, 80045be <_isatty_r+0x1a>
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	2000026c 	.word	0x2000026c

080045c4 <__locale_ctype_ptr_l>:
 80045c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80045c8:	4770      	bx	lr
	...

080045cc <__locale_ctype_ptr>:
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <__locale_ctype_ptr+0x14>)
 80045ce:	4a05      	ldr	r2, [pc, #20]	; (80045e4 <__locale_ctype_ptr+0x18>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf08      	it	eq
 80045d8:	4613      	moveq	r3, r2
 80045da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80045de:	4770      	bx	lr
 80045e0:	2000000c 	.word	0x2000000c
 80045e4:	20000070 	.word	0x20000070

080045e8 <_lseek_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4c07      	ldr	r4, [pc, #28]	; (8004608 <_lseek_r+0x20>)
 80045ec:	4605      	mov	r5, r0
 80045ee:	4608      	mov	r0, r1
 80045f0:	4611      	mov	r1, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	6022      	str	r2, [r4, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fc f971 	bl	80008de <_lseek>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_lseek_r+0x1e>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	b103      	cbz	r3, 8004606 <_lseek_r+0x1e>
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	2000026c 	.word	0x2000026c

0800460c <__ascii_mbtowc>:
 800460c:	b082      	sub	sp, #8
 800460e:	b901      	cbnz	r1, 8004612 <__ascii_mbtowc+0x6>
 8004610:	a901      	add	r1, sp, #4
 8004612:	b142      	cbz	r2, 8004626 <__ascii_mbtowc+0x1a>
 8004614:	b14b      	cbz	r3, 800462a <__ascii_mbtowc+0x1e>
 8004616:	7813      	ldrb	r3, [r2, #0]
 8004618:	600b      	str	r3, [r1, #0]
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	1c10      	adds	r0, r2, #0
 800461e:	bf18      	it	ne
 8004620:	2001      	movne	r0, #1
 8004622:	b002      	add	sp, #8
 8004624:	4770      	bx	lr
 8004626:	4610      	mov	r0, r2
 8004628:	e7fb      	b.n	8004622 <__ascii_mbtowc+0x16>
 800462a:	f06f 0001 	mvn.w	r0, #1
 800462e:	e7f8      	b.n	8004622 <__ascii_mbtowc+0x16>

08004630 <memcpy>:
 8004630:	b510      	push	{r4, lr}
 8004632:	1e43      	subs	r3, r0, #1
 8004634:	440a      	add	r2, r1
 8004636:	4291      	cmp	r1, r2
 8004638:	d100      	bne.n	800463c <memcpy+0xc>
 800463a:	bd10      	pop	{r4, pc}
 800463c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004644:	e7f7      	b.n	8004636 <memcpy+0x6>

08004646 <__malloc_lock>:
 8004646:	4770      	bx	lr

08004648 <__malloc_unlock>:
 8004648:	4770      	bx	lr

0800464a <_realloc_r>:
 800464a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464c:	4607      	mov	r7, r0
 800464e:	4614      	mov	r4, r2
 8004650:	460e      	mov	r6, r1
 8004652:	b921      	cbnz	r1, 800465e <_realloc_r+0x14>
 8004654:	4611      	mov	r1, r2
 8004656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800465a:	f7fe bddd 	b.w	8003218 <_malloc_r>
 800465e:	b922      	cbnz	r2, 800466a <_realloc_r+0x20>
 8004660:	f7fe fd8c 	bl	800317c <_free_r>
 8004664:	4625      	mov	r5, r4
 8004666:	4628      	mov	r0, r5
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466a:	f000 f834 	bl	80046d6 <_malloc_usable_size_r>
 800466e:	42a0      	cmp	r0, r4
 8004670:	d20f      	bcs.n	8004692 <_realloc_r+0x48>
 8004672:	4621      	mov	r1, r4
 8004674:	4638      	mov	r0, r7
 8004676:	f7fe fdcf 	bl	8003218 <_malloc_r>
 800467a:	4605      	mov	r5, r0
 800467c:	2800      	cmp	r0, #0
 800467e:	d0f2      	beq.n	8004666 <_realloc_r+0x1c>
 8004680:	4631      	mov	r1, r6
 8004682:	4622      	mov	r2, r4
 8004684:	f7ff ffd4 	bl	8004630 <memcpy>
 8004688:	4631      	mov	r1, r6
 800468a:	4638      	mov	r0, r7
 800468c:	f7fe fd76 	bl	800317c <_free_r>
 8004690:	e7e9      	b.n	8004666 <_realloc_r+0x1c>
 8004692:	4635      	mov	r5, r6
 8004694:	e7e7      	b.n	8004666 <_realloc_r+0x1c>
	...

08004698 <_read_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4c07      	ldr	r4, [pc, #28]	; (80046b8 <_read_r+0x20>)
 800469c:	4605      	mov	r5, r0
 800469e:	4608      	mov	r0, r1
 80046a0:	4611      	mov	r1, r2
 80046a2:	2200      	movs	r2, #0
 80046a4:	6022      	str	r2, [r4, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f7fc f92a 	bl	8000900 <_read>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_read_r+0x1e>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_read_r+0x1e>
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	2000026c 	.word	0x2000026c

080046bc <__ascii_wctomb>:
 80046bc:	b149      	cbz	r1, 80046d2 <__ascii_wctomb+0x16>
 80046be:	2aff      	cmp	r2, #255	; 0xff
 80046c0:	bf85      	ittet	hi
 80046c2:	238a      	movhi	r3, #138	; 0x8a
 80046c4:	6003      	strhi	r3, [r0, #0]
 80046c6:	700a      	strbls	r2, [r1, #0]
 80046c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80046cc:	bf98      	it	ls
 80046ce:	2001      	movls	r0, #1
 80046d0:	4770      	bx	lr
 80046d2:	4608      	mov	r0, r1
 80046d4:	4770      	bx	lr

080046d6 <_malloc_usable_size_r>:
 80046d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046da:	1f18      	subs	r0, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfbc      	itt	lt
 80046e0:	580b      	ldrlt	r3, [r1, r0]
 80046e2:	18c0      	addlt	r0, r0, r3
 80046e4:	4770      	bx	lr
	...

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
