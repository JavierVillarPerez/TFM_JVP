
SDR_Multiband_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009768  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  20000000  08009b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b0  2000022c  08009d84  0002022c  2**2
                  ALLOC
  7 ._user_heap_stack 00000904  200003dc  08009d84  000203dc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00013ab7  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00020c36  00000000  00000000  00033d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004a66  00000000  00000000  00054941  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001480  00000000  00000000  000593a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093996  00000000  00000000  0005a828  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001278  00000000  00000000  000ee1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001b1f0  00000000  00000000  000ef438  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0010a628  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004c88  00000000  00000000  0010a6a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000022c 	.word	0x2000022c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009810 	.word	0x08009810

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000230 	.word	0x20000230
 8000104:	08009810 	.word	0x08009810

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fe73 	bl	80020f0 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fdcb 	bl	8001fb0 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe65 	bl	80020f0 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fe5b 	bl	80020f0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fded 	bl	8002028 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fde3 	bl	8002028 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb8b 	bl	8000b94 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fb0d 	bl	8000aa8 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb7d 	bl	8000b94 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb73 	bl	8000b94 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb1b 	bl	8000af8 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb11 	bl	8000af8 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	; 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fe93 	bl	8001220 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	; 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fcc9 	bl	8000e98 <__aeabi_fsub>
 8000506:	f000 fe8b 	bl	8001220 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__aeabi_d2uiz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__aeabi_d2uiz+0x38>)
 800051a:	0004      	movs	r4, r0
 800051c:	000d      	movs	r5, r1
 800051e:	f7ff ff9d 	bl	800045c <__aeabi_dcmpge>
 8000522:	2800      	cmp	r0, #0
 8000524:	d104      	bne.n	8000530 <__aeabi_d2uiz+0x1c>
 8000526:	0020      	movs	r0, r4
 8000528:	0029      	movs	r1, r5
 800052a:	f002 fc03 	bl	8002d34 <__aeabi_d2iz>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <__aeabi_d2uiz+0x38>)
 8000532:	2200      	movs	r2, #0
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f002 f8b4 	bl	80026a4 <__aeabi_dsub>
 800053c:	f002 fbfa 	bl	8002d34 <__aeabi_d2iz>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	061b      	lsls	r3, r3, #24
 8000544:	469c      	mov	ip, r3
 8000546:	4460      	add	r0, ip
 8000548:	e7f1      	b.n	800052e <__aeabi_d2uiz+0x1a>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	41e00000 	.word	0x41e00000

08000550 <__aeabi_fadd>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	4647      	mov	r7, r8
 8000554:	46ce      	mov	lr, r9
 8000556:	0243      	lsls	r3, r0, #9
 8000558:	0a5b      	lsrs	r3, r3, #9
 800055a:	0044      	lsls	r4, r0, #1
 800055c:	0fc2      	lsrs	r2, r0, #31
 800055e:	469c      	mov	ip, r3
 8000560:	0048      	lsls	r0, r1, #1
 8000562:	00dd      	lsls	r5, r3, #3
 8000564:	024b      	lsls	r3, r1, #9
 8000566:	0e24      	lsrs	r4, r4, #24
 8000568:	0a5b      	lsrs	r3, r3, #9
 800056a:	0e00      	lsrs	r0, r0, #24
 800056c:	b580      	push	{r7, lr}
 800056e:	4698      	mov	r8, r3
 8000570:	0026      	movs	r6, r4
 8000572:	4691      	mov	r9, r2
 8000574:	0fc9      	lsrs	r1, r1, #31
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	1a27      	subs	r7, r4, r0
 800057a:	428a      	cmp	r2, r1
 800057c:	d029      	beq.n	80005d2 <__aeabi_fadd+0x82>
 800057e:	2f00      	cmp	r7, #0
 8000580:	dd15      	ble.n	80005ae <__aeabi_fadd+0x5e>
 8000582:	2800      	cmp	r0, #0
 8000584:	d14a      	bne.n	800061c <__aeabi_fadd+0xcc>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d000      	beq.n	800058c <__aeabi_fadd+0x3c>
 800058a:	e095      	b.n	80006b8 <__aeabi_fadd+0x168>
 800058c:	08ed      	lsrs	r5, r5, #3
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x44>
 8000592:	e088      	b.n	80006a6 <__aeabi_fadd+0x156>
 8000594:	026b      	lsls	r3, r5, #9
 8000596:	0a5b      	lsrs	r3, r3, #9
 8000598:	b2e6      	uxtb	r6, r4
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	05f6      	lsls	r6, r6, #23
 800059e:	0a58      	lsrs	r0, r3, #9
 80005a0:	4330      	orrs	r0, r6
 80005a2:	07d2      	lsls	r2, r2, #31
 80005a4:	4310      	orrs	r0, r2
 80005a6:	bc0c      	pop	{r2, r3}
 80005a8:	4690      	mov	r8, r2
 80005aa:	4699      	mov	r9, r3
 80005ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ae:	2f00      	cmp	r7, #0
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fadd+0x64>
 80005b2:	e087      	b.n	80006c4 <__aeabi_fadd+0x174>
 80005b4:	1c60      	adds	r0, r4, #1
 80005b6:	b2c0      	uxtb	r0, r0
 80005b8:	2801      	cmp	r0, #1
 80005ba:	dc00      	bgt.n	80005be <__aeabi_fadd+0x6e>
 80005bc:	e0b6      	b.n	800072c <__aeabi_fadd+0x1dc>
 80005be:	1aee      	subs	r6, r5, r3
 80005c0:	0172      	lsls	r2, r6, #5
 80005c2:	d500      	bpl.n	80005c6 <__aeabi_fadd+0x76>
 80005c4:	e0c5      	b.n	8000752 <__aeabi_fadd+0x202>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d13d      	bne.n	8000646 <__aeabi_fadd+0xf6>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2600      	movs	r6, #0
 80005ce:	2300      	movs	r3, #0
 80005d0:	e7e3      	b.n	800059a <__aeabi_fadd+0x4a>
 80005d2:	2f00      	cmp	r7, #0
 80005d4:	dc00      	bgt.n	80005d8 <__aeabi_fadd+0x88>
 80005d6:	e096      	b.n	8000706 <__aeabi_fadd+0x1b6>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d05d      	beq.n	8000698 <__aeabi_fadd+0x148>
 80005dc:	2cff      	cmp	r4, #255	; 0xff
 80005de:	d060      	beq.n	80006a2 <__aeabi_fadd+0x152>
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	04d2      	lsls	r2, r2, #19
 80005e4:	4313      	orrs	r3, r2
 80005e6:	2f1b      	cmp	r7, #27
 80005e8:	dd00      	ble.n	80005ec <__aeabi_fadd+0x9c>
 80005ea:	e0ec      	b.n	80007c6 <__aeabi_fadd+0x276>
 80005ec:	2220      	movs	r2, #32
 80005ee:	1bd2      	subs	r2, r2, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	4093      	lsls	r3, r2
 80005f4:	40f8      	lsrs	r0, r7
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4193      	sbcs	r3, r2
 80005fa:	4303      	orrs	r3, r0
 80005fc:	18ed      	adds	r5, r5, r3
 80005fe:	016b      	lsls	r3, r5, #5
 8000600:	d57b      	bpl.n	80006fa <__aeabi_fadd+0x1aa>
 8000602:	3401      	adds	r4, #1
 8000604:	2cff      	cmp	r4, #255	; 0xff
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0xba>
 8000608:	e0b7      	b.n	800077a <__aeabi_fadd+0x22a>
 800060a:	2201      	movs	r2, #1
 800060c:	2607      	movs	r6, #7
 800060e:	402a      	ands	r2, r5
 8000610:	086b      	lsrs	r3, r5, #1
 8000612:	4d9a      	ldr	r5, [pc, #616]	; (800087c <__aeabi_fadd+0x32c>)
 8000614:	401d      	ands	r5, r3
 8000616:	4315      	orrs	r5, r2
 8000618:	402e      	ands	r6, r5
 800061a:	e029      	b.n	8000670 <__aeabi_fadd+0x120>
 800061c:	2cff      	cmp	r4, #255	; 0xff
 800061e:	d0b5      	beq.n	800058c <__aeabi_fadd+0x3c>
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	04d2      	lsls	r2, r2, #19
 8000624:	4313      	orrs	r3, r2
 8000626:	2f1b      	cmp	r7, #27
 8000628:	dd00      	ble.n	800062c <__aeabi_fadd+0xdc>
 800062a:	e0b2      	b.n	8000792 <__aeabi_fadd+0x242>
 800062c:	2220      	movs	r2, #32
 800062e:	1bd2      	subs	r2, r2, r7
 8000630:	0019      	movs	r1, r3
 8000632:	4093      	lsls	r3, r2
 8000634:	40f9      	lsrs	r1, r7
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	4193      	sbcs	r3, r2
 800063a:	430b      	orrs	r3, r1
 800063c:	1aed      	subs	r5, r5, r3
 800063e:	016b      	lsls	r3, r5, #5
 8000640:	d55b      	bpl.n	80006fa <__aeabi_fadd+0x1aa>
 8000642:	01ad      	lsls	r5, r5, #6
 8000644:	09ae      	lsrs	r6, r5, #6
 8000646:	0030      	movs	r0, r6
 8000648:	f002 fc16 	bl	8002e78 <__clzsi2>
 800064c:	3805      	subs	r0, #5
 800064e:	4086      	lsls	r6, r0
 8000650:	4284      	cmp	r4, r0
 8000652:	dc65      	bgt.n	8000720 <__aeabi_fadd+0x1d0>
 8000654:	1b04      	subs	r4, r0, r4
 8000656:	0033      	movs	r3, r6
 8000658:	2020      	movs	r0, #32
 800065a:	3401      	adds	r4, #1
 800065c:	40e3      	lsrs	r3, r4
 800065e:	1b04      	subs	r4, r0, r4
 8000660:	40a6      	lsls	r6, r4
 8000662:	1e75      	subs	r5, r6, #1
 8000664:	41ae      	sbcs	r6, r5
 8000666:	4333      	orrs	r3, r6
 8000668:	2607      	movs	r6, #7
 800066a:	001d      	movs	r5, r3
 800066c:	2400      	movs	r4, #0
 800066e:	401e      	ands	r6, r3
 8000670:	2201      	movs	r2, #1
 8000672:	464b      	mov	r3, r9
 8000674:	401a      	ands	r2, r3
 8000676:	2e00      	cmp	r6, #0
 8000678:	d004      	beq.n	8000684 <__aeabi_fadd+0x134>
 800067a:	230f      	movs	r3, #15
 800067c:	402b      	ands	r3, r5
 800067e:	2b04      	cmp	r3, #4
 8000680:	d000      	beq.n	8000684 <__aeabi_fadd+0x134>
 8000682:	3504      	adds	r5, #4
 8000684:	016b      	lsls	r3, r5, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x13a>
 8000688:	e780      	b.n	800058c <__aeabi_fadd+0x3c>
 800068a:	3401      	adds	r4, #1
 800068c:	b2e6      	uxtb	r6, r4
 800068e:	2cff      	cmp	r4, #255	; 0xff
 8000690:	d12f      	bne.n	80006f2 <__aeabi_fadd+0x1a2>
 8000692:	26ff      	movs	r6, #255	; 0xff
 8000694:	2300      	movs	r3, #0
 8000696:	e780      	b.n	800059a <__aeabi_fadd+0x4a>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d152      	bne.n	8000742 <__aeabi_fadd+0x1f2>
 800069c:	2cff      	cmp	r4, #255	; 0xff
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x152>
 80006a0:	e774      	b.n	800058c <__aeabi_fadd+0x3c>
 80006a2:	000a      	movs	r2, r1
 80006a4:	08ed      	lsrs	r5, r5, #3
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d0f3      	beq.n	8000692 <__aeabi_fadd+0x142>
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	03db      	lsls	r3, r3, #15
 80006ae:	432b      	orrs	r3, r5
 80006b0:	025b      	lsls	r3, r3, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	26ff      	movs	r6, #255	; 0xff
 80006b6:	e770      	b.n	800059a <__aeabi_fadd+0x4a>
 80006b8:	3f01      	subs	r7, #1
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	d0be      	beq.n	800063c <__aeabi_fadd+0xec>
 80006be:	2cff      	cmp	r4, #255	; 0xff
 80006c0:	d1b1      	bne.n	8000626 <__aeabi_fadd+0xd6>
 80006c2:	e763      	b.n	800058c <__aeabi_fadd+0x3c>
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d047      	beq.n	8000758 <__aeabi_fadd+0x208>
 80006c8:	28ff      	cmp	r0, #255	; 0xff
 80006ca:	d069      	beq.n	80007a0 <__aeabi_fadd+0x250>
 80006cc:	2480      	movs	r4, #128	; 0x80
 80006ce:	04e4      	lsls	r4, r4, #19
 80006d0:	427a      	negs	r2, r7
 80006d2:	4325      	orrs	r5, r4
 80006d4:	2a1b      	cmp	r2, #27
 80006d6:	dd00      	ble.n	80006da <__aeabi_fadd+0x18a>
 80006d8:	e0c5      	b.n	8000866 <__aeabi_fadd+0x316>
 80006da:	002c      	movs	r4, r5
 80006dc:	2620      	movs	r6, #32
 80006de:	40d4      	lsrs	r4, r2
 80006e0:	1ab2      	subs	r2, r6, r2
 80006e2:	4095      	lsls	r5, r2
 80006e4:	1e6a      	subs	r2, r5, #1
 80006e6:	4195      	sbcs	r5, r2
 80006e8:	4325      	orrs	r5, r4
 80006ea:	1b5d      	subs	r5, r3, r5
 80006ec:	0004      	movs	r4, r0
 80006ee:	4689      	mov	r9, r1
 80006f0:	e7a5      	b.n	800063e <__aeabi_fadd+0xee>
 80006f2:	01ab      	lsls	r3, r5, #6
 80006f4:	0a5b      	lsrs	r3, r3, #9
 80006f6:	e750      	b.n	800059a <__aeabi_fadd+0x4a>
 80006f8:	2400      	movs	r4, #0
 80006fa:	2201      	movs	r2, #1
 80006fc:	464b      	mov	r3, r9
 80006fe:	401a      	ands	r2, r3
 8000700:	076b      	lsls	r3, r5, #29
 8000702:	d1ba      	bne.n	800067a <__aeabi_fadd+0x12a>
 8000704:	e742      	b.n	800058c <__aeabi_fadd+0x3c>
 8000706:	2f00      	cmp	r7, #0
 8000708:	d13b      	bne.n	8000782 <__aeabi_fadd+0x232>
 800070a:	3401      	adds	r4, #1
 800070c:	b2e0      	uxtb	r0, r4
 800070e:	2801      	cmp	r0, #1
 8000710:	dd4a      	ble.n	80007a8 <__aeabi_fadd+0x258>
 8000712:	2cff      	cmp	r4, #255	; 0xff
 8000714:	d0bd      	beq.n	8000692 <__aeabi_fadd+0x142>
 8000716:	2607      	movs	r6, #7
 8000718:	18ed      	adds	r5, r5, r3
 800071a:	086d      	lsrs	r5, r5, #1
 800071c:	402e      	ands	r6, r5
 800071e:	e7a7      	b.n	8000670 <__aeabi_fadd+0x120>
 8000720:	2307      	movs	r3, #7
 8000722:	4d57      	ldr	r5, [pc, #348]	; (8000880 <__aeabi_fadd+0x330>)
 8000724:	1a24      	subs	r4, r4, r0
 8000726:	4035      	ands	r5, r6
 8000728:	401e      	ands	r6, r3
 800072a:	e7a1      	b.n	8000670 <__aeabi_fadd+0x120>
 800072c:	2c00      	cmp	r4, #0
 800072e:	d11b      	bne.n	8000768 <__aeabi_fadd+0x218>
 8000730:	2d00      	cmp	r5, #0
 8000732:	d16e      	bne.n	8000812 <__aeabi_fadd+0x2c2>
 8000734:	2b00      	cmp	r3, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x1ea>
 8000738:	e09a      	b.n	8000870 <__aeabi_fadd+0x320>
 800073a:	000a      	movs	r2, r1
 800073c:	001d      	movs	r5, r3
 800073e:	003c      	movs	r4, r7
 8000740:	e724      	b.n	800058c <__aeabi_fadd+0x3c>
 8000742:	3f01      	subs	r7, #1
 8000744:	2f00      	cmp	r7, #0
 8000746:	d100      	bne.n	800074a <__aeabi_fadd+0x1fa>
 8000748:	e758      	b.n	80005fc <__aeabi_fadd+0xac>
 800074a:	2cff      	cmp	r4, #255	; 0xff
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x200>
 800074e:	e74a      	b.n	80005e6 <__aeabi_fadd+0x96>
 8000750:	e7a7      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000752:	1b5e      	subs	r6, r3, r5
 8000754:	4689      	mov	r9, r1
 8000756:	e776      	b.n	8000646 <__aeabi_fadd+0xf6>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d11c      	bne.n	8000796 <__aeabi_fadd+0x246>
 800075c:	000a      	movs	r2, r1
 800075e:	28ff      	cmp	r0, #255	; 0xff
 8000760:	d01f      	beq.n	80007a2 <__aeabi_fadd+0x252>
 8000762:	0004      	movs	r4, r0
 8000764:	001d      	movs	r5, r3
 8000766:	e711      	b.n	800058c <__aeabi_fadd+0x3c>
 8000768:	2d00      	cmp	r5, #0
 800076a:	d15d      	bne.n	8000828 <__aeabi_fadd+0x2d8>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d117      	bne.n	80007a0 <__aeabi_fadd+0x250>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	2200      	movs	r2, #0
 8000774:	03db      	lsls	r3, r3, #15
 8000776:	26ff      	movs	r6, #255	; 0xff
 8000778:	e70f      	b.n	800059a <__aeabi_fadd+0x4a>
 800077a:	000a      	movs	r2, r1
 800077c:	26ff      	movs	r6, #255	; 0xff
 800077e:	2300      	movs	r3, #0
 8000780:	e70b      	b.n	800059a <__aeabi_fadd+0x4a>
 8000782:	2c00      	cmp	r4, #0
 8000784:	d121      	bne.n	80007ca <__aeabi_fadd+0x27a>
 8000786:	2d00      	cmp	r5, #0
 8000788:	d166      	bne.n	8000858 <__aeabi_fadd+0x308>
 800078a:	28ff      	cmp	r0, #255	; 0xff
 800078c:	d1e9      	bne.n	8000762 <__aeabi_fadd+0x212>
 800078e:	001d      	movs	r5, r3
 8000790:	e787      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000792:	2301      	movs	r3, #1
 8000794:	e752      	b.n	800063c <__aeabi_fadd+0xec>
 8000796:	1c7a      	adds	r2, r7, #1
 8000798:	d0a7      	beq.n	80006ea <__aeabi_fadd+0x19a>
 800079a:	43fa      	mvns	r2, r7
 800079c:	28ff      	cmp	r0, #255	; 0xff
 800079e:	d199      	bne.n	80006d4 <__aeabi_fadd+0x184>
 80007a0:	000a      	movs	r2, r1
 80007a2:	001d      	movs	r5, r3
 80007a4:	24ff      	movs	r4, #255	; 0xff
 80007a6:	e6f1      	b.n	800058c <__aeabi_fadd+0x3c>
 80007a8:	2e00      	cmp	r6, #0
 80007aa:	d121      	bne.n	80007f0 <__aeabi_fadd+0x2a0>
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d04f      	beq.n	8000850 <__aeabi_fadd+0x300>
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d04c      	beq.n	800084e <__aeabi_fadd+0x2fe>
 80007b4:	18ed      	adds	r5, r5, r3
 80007b6:	016b      	lsls	r3, r5, #5
 80007b8:	d59e      	bpl.n	80006f8 <__aeabi_fadd+0x1a8>
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <__aeabi_fadd+0x330>)
 80007bc:	3607      	adds	r6, #7
 80007be:	402e      	ands	r6, r5
 80007c0:	2401      	movs	r4, #1
 80007c2:	401d      	ands	r5, r3
 80007c4:	e754      	b.n	8000670 <__aeabi_fadd+0x120>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e718      	b.n	80005fc <__aeabi_fadd+0xac>
 80007ca:	28ff      	cmp	r0, #255	; 0xff
 80007cc:	d0df      	beq.n	800078e <__aeabi_fadd+0x23e>
 80007ce:	2480      	movs	r4, #128	; 0x80
 80007d0:	04e4      	lsls	r4, r4, #19
 80007d2:	427f      	negs	r7, r7
 80007d4:	4325      	orrs	r5, r4
 80007d6:	2f1b      	cmp	r7, #27
 80007d8:	dc4d      	bgt.n	8000876 <__aeabi_fadd+0x326>
 80007da:	2620      	movs	r6, #32
 80007dc:	1bf6      	subs	r6, r6, r7
 80007de:	002c      	movs	r4, r5
 80007e0:	40b5      	lsls	r5, r6
 80007e2:	40fc      	lsrs	r4, r7
 80007e4:	1e6a      	subs	r2, r5, #1
 80007e6:	4195      	sbcs	r5, r2
 80007e8:	4325      	orrs	r5, r4
 80007ea:	18ed      	adds	r5, r5, r3
 80007ec:	0004      	movs	r4, r0
 80007ee:	e706      	b.n	80005fe <__aeabi_fadd+0xae>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0cc      	beq.n	800078e <__aeabi_fadd+0x23e>
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fadd+0x2aa>
 80007f8:	e753      	b.n	80006a2 <__aeabi_fadd+0x152>
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4660      	mov	r0, ip
 80007fe:	03c9      	lsls	r1, r1, #15
 8000800:	4208      	tst	r0, r1
 8000802:	d003      	beq.n	800080c <__aeabi_fadd+0x2bc>
 8000804:	4640      	mov	r0, r8
 8000806:	4208      	tst	r0, r1
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x2bc>
 800080a:	001d      	movs	r5, r3
 800080c:	2101      	movs	r1, #1
 800080e:	4011      	ands	r1, r2
 8000810:	e747      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x2c8>
 8000816:	e6b9      	b.n	800058c <__aeabi_fadd+0x3c>
 8000818:	1aea      	subs	r2, r5, r3
 800081a:	0150      	lsls	r0, r2, #5
 800081c:	d525      	bpl.n	800086a <__aeabi_fadd+0x31a>
 800081e:	2607      	movs	r6, #7
 8000820:	1b5d      	subs	r5, r3, r5
 8000822:	402e      	ands	r6, r5
 8000824:	4689      	mov	r9, r1
 8000826:	e723      	b.n	8000670 <__aeabi_fadd+0x120>
 8000828:	24ff      	movs	r4, #255	; 0xff
 800082a:	2b00      	cmp	r3, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x2e0>
 800082e:	e6ad      	b.n	800058c <__aeabi_fadd+0x3c>
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	4660      	mov	r0, ip
 8000834:	03d2      	lsls	r2, r2, #15
 8000836:	4210      	tst	r0, r2
 8000838:	d004      	beq.n	8000844 <__aeabi_fadd+0x2f4>
 800083a:	4640      	mov	r0, r8
 800083c:	4210      	tst	r0, r2
 800083e:	d101      	bne.n	8000844 <__aeabi_fadd+0x2f4>
 8000840:	001d      	movs	r5, r3
 8000842:	4689      	mov	r9, r1
 8000844:	2201      	movs	r2, #1
 8000846:	464b      	mov	r3, r9
 8000848:	24ff      	movs	r4, #255	; 0xff
 800084a:	401a      	ands	r2, r3
 800084c:	e69e      	b.n	800058c <__aeabi_fadd+0x3c>
 800084e:	002b      	movs	r3, r5
 8000850:	08dd      	lsrs	r5, r3, #3
 8000852:	000a      	movs	r2, r1
 8000854:	2400      	movs	r4, #0
 8000856:	e69d      	b.n	8000594 <__aeabi_fadd+0x44>
 8000858:	1c7a      	adds	r2, r7, #1
 800085a:	d0c6      	beq.n	80007ea <__aeabi_fadd+0x29a>
 800085c:	43ff      	mvns	r7, r7
 800085e:	28ff      	cmp	r0, #255	; 0xff
 8000860:	d1b9      	bne.n	80007d6 <__aeabi_fadd+0x286>
 8000862:	001d      	movs	r5, r3
 8000864:	e71d      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000866:	2501      	movs	r5, #1
 8000868:	e73f      	b.n	80006ea <__aeabi_fadd+0x19a>
 800086a:	1e15      	subs	r5, r2, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_fadd+0x320>
 800086e:	e744      	b.n	80006fa <__aeabi_fadd+0x1aa>
 8000870:	2200      	movs	r2, #0
 8000872:	2300      	movs	r3, #0
 8000874:	e691      	b.n	800059a <__aeabi_fadd+0x4a>
 8000876:	2501      	movs	r5, #1
 8000878:	e7b7      	b.n	80007ea <__aeabi_fadd+0x29a>
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	7dffffff 	.word	0x7dffffff
 8000880:	fbffffff 	.word	0xfbffffff

08000884 <__aeabi_fdiv>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	4657      	mov	r7, sl
 8000888:	464e      	mov	r6, r9
 800088a:	4645      	mov	r5, r8
 800088c:	46de      	mov	lr, fp
 800088e:	0244      	lsls	r4, r0, #9
 8000890:	b5e0      	push	{r5, r6, r7, lr}
 8000892:	0046      	lsls	r6, r0, #1
 8000894:	4688      	mov	r8, r1
 8000896:	0a64      	lsrs	r4, r4, #9
 8000898:	0e36      	lsrs	r6, r6, #24
 800089a:	0fc7      	lsrs	r7, r0, #31
 800089c:	2e00      	cmp	r6, #0
 800089e:	d063      	beq.n	8000968 <__aeabi_fdiv+0xe4>
 80008a0:	2eff      	cmp	r6, #255	; 0xff
 80008a2:	d024      	beq.n	80008ee <__aeabi_fdiv+0x6a>
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	00e4      	lsls	r4, r4, #3
 80008a8:	04db      	lsls	r3, r3, #19
 80008aa:	431c      	orrs	r4, r3
 80008ac:	2300      	movs	r3, #0
 80008ae:	4699      	mov	r9, r3
 80008b0:	469b      	mov	fp, r3
 80008b2:	3e7f      	subs	r6, #127	; 0x7f
 80008b4:	4643      	mov	r3, r8
 80008b6:	4642      	mov	r2, r8
 80008b8:	025d      	lsls	r5, r3, #9
 80008ba:	0fd2      	lsrs	r2, r2, #31
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	0a6d      	lsrs	r5, r5, #9
 80008c0:	0e1b      	lsrs	r3, r3, #24
 80008c2:	4690      	mov	r8, r2
 80008c4:	4692      	mov	sl, r2
 80008c6:	d065      	beq.n	8000994 <__aeabi_fdiv+0x110>
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d055      	beq.n	8000978 <__aeabi_fdiv+0xf4>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	2100      	movs	r1, #0
 80008d0:	00ed      	lsls	r5, r5, #3
 80008d2:	04d2      	lsls	r2, r2, #19
 80008d4:	3b7f      	subs	r3, #127	; 0x7f
 80008d6:	4315      	orrs	r5, r2
 80008d8:	1af6      	subs	r6, r6, r3
 80008da:	4643      	mov	r3, r8
 80008dc:	464a      	mov	r2, r9
 80008de:	407b      	eors	r3, r7
 80008e0:	2a0f      	cmp	r2, #15
 80008e2:	d900      	bls.n	80008e6 <__aeabi_fdiv+0x62>
 80008e4:	e08d      	b.n	8000a02 <__aeabi_fdiv+0x17e>
 80008e6:	486d      	ldr	r0, [pc, #436]	; (8000a9c <__aeabi_fdiv+0x218>)
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	5882      	ldr	r2, [r0, r2]
 80008ec:	4697      	mov	pc, r2
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d154      	bne.n	800099c <__aeabi_fdiv+0x118>
 80008f2:	2308      	movs	r3, #8
 80008f4:	4699      	mov	r9, r3
 80008f6:	3b06      	subs	r3, #6
 80008f8:	26ff      	movs	r6, #255	; 0xff
 80008fa:	469b      	mov	fp, r3
 80008fc:	e7da      	b.n	80008b4 <__aeabi_fdiv+0x30>
 80008fe:	2500      	movs	r5, #0
 8000900:	4653      	mov	r3, sl
 8000902:	2902      	cmp	r1, #2
 8000904:	d01b      	beq.n	800093e <__aeabi_fdiv+0xba>
 8000906:	2903      	cmp	r1, #3
 8000908:	d100      	bne.n	800090c <__aeabi_fdiv+0x88>
 800090a:	e0bf      	b.n	8000a8c <__aeabi_fdiv+0x208>
 800090c:	2901      	cmp	r1, #1
 800090e:	d028      	beq.n	8000962 <__aeabi_fdiv+0xde>
 8000910:	0030      	movs	r0, r6
 8000912:	307f      	adds	r0, #127	; 0x7f
 8000914:	2800      	cmp	r0, #0
 8000916:	dd20      	ble.n	800095a <__aeabi_fdiv+0xd6>
 8000918:	076a      	lsls	r2, r5, #29
 800091a:	d004      	beq.n	8000926 <__aeabi_fdiv+0xa2>
 800091c:	220f      	movs	r2, #15
 800091e:	402a      	ands	r2, r5
 8000920:	2a04      	cmp	r2, #4
 8000922:	d000      	beq.n	8000926 <__aeabi_fdiv+0xa2>
 8000924:	3504      	adds	r5, #4
 8000926:	012a      	lsls	r2, r5, #4
 8000928:	d503      	bpl.n	8000932 <__aeabi_fdiv+0xae>
 800092a:	0030      	movs	r0, r6
 800092c:	4a5c      	ldr	r2, [pc, #368]	; (8000aa0 <__aeabi_fdiv+0x21c>)
 800092e:	3080      	adds	r0, #128	; 0x80
 8000930:	4015      	ands	r5, r2
 8000932:	28fe      	cmp	r0, #254	; 0xfe
 8000934:	dc03      	bgt.n	800093e <__aeabi_fdiv+0xba>
 8000936:	01ac      	lsls	r4, r5, #6
 8000938:	0a64      	lsrs	r4, r4, #9
 800093a:	b2c2      	uxtb	r2, r0
 800093c:	e001      	b.n	8000942 <__aeabi_fdiv+0xbe>
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	2400      	movs	r4, #0
 8000942:	0264      	lsls	r4, r4, #9
 8000944:	05d2      	lsls	r2, r2, #23
 8000946:	0a60      	lsrs	r0, r4, #9
 8000948:	07db      	lsls	r3, r3, #31
 800094a:	4310      	orrs	r0, r2
 800094c:	4318      	orrs	r0, r3
 800094e:	bc3c      	pop	{r2, r3, r4, r5}
 8000950:	4690      	mov	r8, r2
 8000952:	4699      	mov	r9, r3
 8000954:	46a2      	mov	sl, r4
 8000956:	46ab      	mov	fp, r5
 8000958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800095a:	2201      	movs	r2, #1
 800095c:	1a10      	subs	r0, r2, r0
 800095e:	281b      	cmp	r0, #27
 8000960:	dd7c      	ble.n	8000a5c <__aeabi_fdiv+0x1d8>
 8000962:	2200      	movs	r2, #0
 8000964:	2400      	movs	r4, #0
 8000966:	e7ec      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000968:	2c00      	cmp	r4, #0
 800096a:	d11d      	bne.n	80009a8 <__aeabi_fdiv+0x124>
 800096c:	2304      	movs	r3, #4
 800096e:	4699      	mov	r9, r3
 8000970:	3b03      	subs	r3, #3
 8000972:	2600      	movs	r6, #0
 8000974:	469b      	mov	fp, r3
 8000976:	e79d      	b.n	80008b4 <__aeabi_fdiv+0x30>
 8000978:	3eff      	subs	r6, #255	; 0xff
 800097a:	2d00      	cmp	r5, #0
 800097c:	d120      	bne.n	80009c0 <__aeabi_fdiv+0x13c>
 800097e:	2102      	movs	r1, #2
 8000980:	4643      	mov	r3, r8
 8000982:	464a      	mov	r2, r9
 8000984:	407b      	eors	r3, r7
 8000986:	430a      	orrs	r2, r1
 8000988:	2a0f      	cmp	r2, #15
 800098a:	d8d8      	bhi.n	800093e <__aeabi_fdiv+0xba>
 800098c:	4845      	ldr	r0, [pc, #276]	; (8000aa4 <__aeabi_fdiv+0x220>)
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	5882      	ldr	r2, [r0, r2]
 8000992:	4697      	mov	pc, r2
 8000994:	2d00      	cmp	r5, #0
 8000996:	d119      	bne.n	80009cc <__aeabi_fdiv+0x148>
 8000998:	2101      	movs	r1, #1
 800099a:	e7f1      	b.n	8000980 <__aeabi_fdiv+0xfc>
 800099c:	230c      	movs	r3, #12
 800099e:	4699      	mov	r9, r3
 80009a0:	3b09      	subs	r3, #9
 80009a2:	26ff      	movs	r6, #255	; 0xff
 80009a4:	469b      	mov	fp, r3
 80009a6:	e785      	b.n	80008b4 <__aeabi_fdiv+0x30>
 80009a8:	0020      	movs	r0, r4
 80009aa:	f002 fa65 	bl	8002e78 <__clzsi2>
 80009ae:	2676      	movs	r6, #118	; 0x76
 80009b0:	1f43      	subs	r3, r0, #5
 80009b2:	409c      	lsls	r4, r3
 80009b4:	2300      	movs	r3, #0
 80009b6:	4276      	negs	r6, r6
 80009b8:	1a36      	subs	r6, r6, r0
 80009ba:	4699      	mov	r9, r3
 80009bc:	469b      	mov	fp, r3
 80009be:	e779      	b.n	80008b4 <__aeabi_fdiv+0x30>
 80009c0:	464a      	mov	r2, r9
 80009c2:	2303      	movs	r3, #3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	4691      	mov	r9, r2
 80009c8:	2103      	movs	r1, #3
 80009ca:	e786      	b.n	80008da <__aeabi_fdiv+0x56>
 80009cc:	0028      	movs	r0, r5
 80009ce:	f002 fa53 	bl	8002e78 <__clzsi2>
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	1836      	adds	r6, r6, r0
 80009d6:	409d      	lsls	r5, r3
 80009d8:	3676      	adds	r6, #118	; 0x76
 80009da:	2100      	movs	r1, #0
 80009dc:	e77d      	b.n	80008da <__aeabi_fdiv+0x56>
 80009de:	2480      	movs	r4, #128	; 0x80
 80009e0:	2300      	movs	r3, #0
 80009e2:	03e4      	lsls	r4, r4, #15
 80009e4:	22ff      	movs	r2, #255	; 0xff
 80009e6:	e7ac      	b.n	8000942 <__aeabi_fdiv+0xbe>
 80009e8:	2500      	movs	r5, #0
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	03db      	lsls	r3, r3, #15
 80009ee:	421c      	tst	r4, r3
 80009f0:	d028      	beq.n	8000a44 <__aeabi_fdiv+0x1c0>
 80009f2:	421d      	tst	r5, r3
 80009f4:	d126      	bne.n	8000a44 <__aeabi_fdiv+0x1c0>
 80009f6:	432b      	orrs	r3, r5
 80009f8:	025c      	lsls	r4, r3, #9
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	4643      	mov	r3, r8
 80009fe:	22ff      	movs	r2, #255	; 0xff
 8000a00:	e79f      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a02:	0162      	lsls	r2, r4, #5
 8000a04:	016c      	lsls	r4, r5, #5
 8000a06:	42a2      	cmp	r2, r4
 8000a08:	d224      	bcs.n	8000a54 <__aeabi_fdiv+0x1d0>
 8000a0a:	211b      	movs	r1, #27
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	3e01      	subs	r6, #1
 8000a10:	2701      	movs	r7, #1
 8000a12:	0010      	movs	r0, r2
 8000a14:	006d      	lsls	r5, r5, #1
 8000a16:	0052      	lsls	r2, r2, #1
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	db01      	blt.n	8000a20 <__aeabi_fdiv+0x19c>
 8000a1c:	4294      	cmp	r4, r2
 8000a1e:	d801      	bhi.n	8000a24 <__aeabi_fdiv+0x1a0>
 8000a20:	1b12      	subs	r2, r2, r4
 8000a22:	433d      	orrs	r5, r7
 8000a24:	3901      	subs	r1, #1
 8000a26:	2900      	cmp	r1, #0
 8000a28:	d1f3      	bne.n	8000a12 <__aeabi_fdiv+0x18e>
 8000a2a:	0014      	movs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	4325      	orrs	r5, r4
 8000a32:	e76d      	b.n	8000910 <__aeabi_fdiv+0x8c>
 8000a34:	46ba      	mov	sl, r7
 8000a36:	4659      	mov	r1, fp
 8000a38:	0025      	movs	r5, r4
 8000a3a:	4653      	mov	r3, sl
 8000a3c:	2902      	cmp	r1, #2
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fdiv+0x1be>
 8000a40:	e761      	b.n	8000906 <__aeabi_fdiv+0x82>
 8000a42:	e77c      	b.n	800093e <__aeabi_fdiv+0xba>
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	03db      	lsls	r3, r3, #15
 8000a48:	431c      	orrs	r4, r3
 8000a4a:	0264      	lsls	r4, r4, #9
 8000a4c:	0a64      	lsrs	r4, r4, #9
 8000a4e:	003b      	movs	r3, r7
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	e776      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a54:	1b12      	subs	r2, r2, r4
 8000a56:	211a      	movs	r1, #26
 8000a58:	2501      	movs	r5, #1
 8000a5a:	e7d9      	b.n	8000a10 <__aeabi_fdiv+0x18c>
 8000a5c:	369e      	adds	r6, #158	; 0x9e
 8000a5e:	002a      	movs	r2, r5
 8000a60:	40b5      	lsls	r5, r6
 8000a62:	002c      	movs	r4, r5
 8000a64:	40c2      	lsrs	r2, r0
 8000a66:	1e65      	subs	r5, r4, #1
 8000a68:	41ac      	sbcs	r4, r5
 8000a6a:	4314      	orrs	r4, r2
 8000a6c:	0762      	lsls	r2, r4, #29
 8000a6e:	d004      	beq.n	8000a7a <__aeabi_fdiv+0x1f6>
 8000a70:	220f      	movs	r2, #15
 8000a72:	4022      	ands	r2, r4
 8000a74:	2a04      	cmp	r2, #4
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fdiv+0x1f6>
 8000a78:	3404      	adds	r4, #4
 8000a7a:	0162      	lsls	r2, r4, #5
 8000a7c:	d403      	bmi.n	8000a86 <__aeabi_fdiv+0x202>
 8000a7e:	01a4      	lsls	r4, r4, #6
 8000a80:	0a64      	lsrs	r4, r4, #9
 8000a82:	2200      	movs	r2, #0
 8000a84:	e75d      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a86:	2201      	movs	r2, #1
 8000a88:	2400      	movs	r4, #0
 8000a8a:	e75a      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a8c:	2480      	movs	r4, #128	; 0x80
 8000a8e:	03e4      	lsls	r4, r4, #15
 8000a90:	432c      	orrs	r4, r5
 8000a92:	0264      	lsls	r4, r4, #9
 8000a94:	0a64      	lsrs	r4, r4, #9
 8000a96:	22ff      	movs	r2, #255	; 0xff
 8000a98:	e753      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	08009a10 	.word	0x08009a10
 8000aa0:	f7ffffff 	.word	0xf7ffffff
 8000aa4:	08009a50 	.word	0x08009a50

08000aa8 <__eqsf2>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	0042      	lsls	r2, r0, #1
 8000aac:	024e      	lsls	r6, r1, #9
 8000aae:	004c      	lsls	r4, r1, #1
 8000ab0:	0245      	lsls	r5, r0, #9
 8000ab2:	0a6d      	lsrs	r5, r5, #9
 8000ab4:	0e12      	lsrs	r2, r2, #24
 8000ab6:	0fc3      	lsrs	r3, r0, #31
 8000ab8:	0a76      	lsrs	r6, r6, #9
 8000aba:	0e24      	lsrs	r4, r4, #24
 8000abc:	0fc9      	lsrs	r1, r1, #31
 8000abe:	2aff      	cmp	r2, #255	; 0xff
 8000ac0:	d00f      	beq.n	8000ae2 <__eqsf2+0x3a>
 8000ac2:	2cff      	cmp	r4, #255	; 0xff
 8000ac4:	d011      	beq.n	8000aea <__eqsf2+0x42>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	d000      	beq.n	8000ace <__eqsf2+0x26>
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d1fc      	bne.n	8000acc <__eqsf2+0x24>
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d00d      	beq.n	8000af2 <__eqsf2+0x4a>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d1f8      	bne.n	8000acc <__eqsf2+0x24>
 8000ada:	0028      	movs	r0, r5
 8000adc:	1e45      	subs	r5, r0, #1
 8000ade:	41a8      	sbcs	r0, r5
 8000ae0:	e7f4      	b.n	8000acc <__eqsf2+0x24>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d1f1      	bne.n	8000acc <__eqsf2+0x24>
 8000ae8:	e7eb      	b.n	8000ac2 <__eqsf2+0x1a>
 8000aea:	2001      	movs	r0, #1
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d1ed      	bne.n	8000acc <__eqsf2+0x24>
 8000af0:	e7e9      	b.n	8000ac6 <__eqsf2+0x1e>
 8000af2:	2000      	movs	r0, #0
 8000af4:	e7ea      	b.n	8000acc <__eqsf2+0x24>
 8000af6:	46c0      	nop			; (mov r8, r8)

08000af8 <__gesf2>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	004a      	lsls	r2, r1, #1
 8000afc:	024e      	lsls	r6, r1, #9
 8000afe:	0245      	lsls	r5, r0, #9
 8000b00:	0044      	lsls	r4, r0, #1
 8000b02:	0a6d      	lsrs	r5, r5, #9
 8000b04:	0e24      	lsrs	r4, r4, #24
 8000b06:	0fc3      	lsrs	r3, r0, #31
 8000b08:	0a76      	lsrs	r6, r6, #9
 8000b0a:	0e12      	lsrs	r2, r2, #24
 8000b0c:	0fc9      	lsrs	r1, r1, #31
 8000b0e:	2cff      	cmp	r4, #255	; 0xff
 8000b10:	d015      	beq.n	8000b3e <__gesf2+0x46>
 8000b12:	2aff      	cmp	r2, #255	; 0xff
 8000b14:	d00e      	beq.n	8000b34 <__gesf2+0x3c>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d115      	bne.n	8000b46 <__gesf2+0x4e>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d101      	bne.n	8000b22 <__gesf2+0x2a>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d01c      	beq.n	8000b5c <__gesf2+0x64>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d014      	beq.n	8000b50 <__gesf2+0x58>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d027      	beq.n	8000b7a <__gesf2+0x82>
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4018      	ands	r0, r3
 8000b30:	3801      	subs	r0, #1
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0ee      	beq.n	8000b16 <__gesf2+0x1e>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f9      	b.n	8000b32 <__gesf2+0x3a>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d1fa      	bne.n	8000b38 <__gesf2+0x40>
 8000b42:	2aff      	cmp	r2, #255	; 0xff
 8000b44:	d00e      	beq.n	8000b64 <__gesf2+0x6c>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d10e      	bne.n	8000b68 <__gesf2+0x70>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d0ed      	beq.n	8000b2a <__gesf2+0x32>
 8000b4e:	e00b      	b.n	8000b68 <__gesf2+0x70>
 8000b50:	2301      	movs	r3, #1
 8000b52:	3901      	subs	r1, #1
 8000b54:	4399      	bics	r1, r3
 8000b56:	0008      	movs	r0, r1
 8000b58:	3001      	adds	r0, #1
 8000b5a:	e7ea      	b.n	8000b32 <__gesf2+0x3a>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e7      	beq.n	8000b32 <__gesf2+0x3a>
 8000b62:	e7e2      	b.n	8000b2a <__gesf2+0x32>
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d1e7      	bne.n	8000b38 <__gesf2+0x40>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	d1de      	bne.n	8000b2a <__gesf2+0x32>
 8000b6c:	4294      	cmp	r4, r2
 8000b6e:	dd05      	ble.n	8000b7c <__gesf2+0x84>
 8000b70:	2102      	movs	r1, #2
 8000b72:	1e58      	subs	r0, r3, #1
 8000b74:	4008      	ands	r0, r1
 8000b76:	3801      	subs	r0, #1
 8000b78:	e7db      	b.n	8000b32 <__gesf2+0x3a>
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	42a2      	cmp	r2, r4
 8000b7e:	dc04      	bgt.n	8000b8a <__gesf2+0x92>
 8000b80:	42b5      	cmp	r5, r6
 8000b82:	d8d2      	bhi.n	8000b2a <__gesf2+0x32>
 8000b84:	2000      	movs	r0, #0
 8000b86:	42b5      	cmp	r5, r6
 8000b88:	d2d3      	bcs.n	8000b32 <__gesf2+0x3a>
 8000b8a:	1e58      	subs	r0, r3, #1
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	4398      	bics	r0, r3
 8000b90:	3001      	adds	r0, #1
 8000b92:	e7ce      	b.n	8000b32 <__gesf2+0x3a>

08000b94 <__lesf2>:
 8000b94:	b530      	push	{r4, r5, lr}
 8000b96:	0042      	lsls	r2, r0, #1
 8000b98:	0244      	lsls	r4, r0, #9
 8000b9a:	024d      	lsls	r5, r1, #9
 8000b9c:	0fc3      	lsrs	r3, r0, #31
 8000b9e:	0048      	lsls	r0, r1, #1
 8000ba0:	0a64      	lsrs	r4, r4, #9
 8000ba2:	0e12      	lsrs	r2, r2, #24
 8000ba4:	0a6d      	lsrs	r5, r5, #9
 8000ba6:	0e00      	lsrs	r0, r0, #24
 8000ba8:	0fc9      	lsrs	r1, r1, #31
 8000baa:	2aff      	cmp	r2, #255	; 0xff
 8000bac:	d012      	beq.n	8000bd4 <__lesf2+0x40>
 8000bae:	28ff      	cmp	r0, #255	; 0xff
 8000bb0:	d00c      	beq.n	8000bcc <__lesf2+0x38>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d112      	bne.n	8000bdc <__lesf2+0x48>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d119      	bne.n	8000bee <__lesf2+0x5a>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d117      	bne.n	8000bee <__lesf2+0x5a>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d02b      	beq.n	8000c1a <__lesf2+0x86>
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	4018      	ands	r0, r3
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e026      	b.n	8000c1a <__lesf2+0x86>
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d0f0      	beq.n	8000bb2 <__lesf2+0x1e>
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	e022      	b.n	8000c1a <__lesf2+0x86>
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d1fb      	bne.n	8000bd0 <__lesf2+0x3c>
 8000bd8:	28ff      	cmp	r0, #255	; 0xff
 8000bda:	d01f      	beq.n	8000c1c <__lesf2+0x88>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d11f      	bne.n	8000c20 <__lesf2+0x8c>
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d11d      	bne.n	8000c20 <__lesf2+0x8c>
 8000be4:	2002      	movs	r0, #2
 8000be6:	3b01      	subs	r3, #1
 8000be8:	4018      	ands	r0, r3
 8000bea:	3801      	subs	r0, #1
 8000bec:	e015      	b.n	8000c1a <__lesf2+0x86>
 8000bee:	2c00      	cmp	r4, #0
 8000bf0:	d00e      	beq.n	8000c10 <__lesf2+0x7c>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d1e5      	bne.n	8000bc2 <__lesf2+0x2e>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	dc04      	bgt.n	8000c06 <__lesf2+0x72>
 8000bfc:	42ac      	cmp	r4, r5
 8000bfe:	d8e0      	bhi.n	8000bc2 <__lesf2+0x2e>
 8000c00:	2000      	movs	r0, #0
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	d209      	bcs.n	8000c1a <__lesf2+0x86>
 8000c06:	1e58      	subs	r0, r3, #1
 8000c08:	2301      	movs	r3, #1
 8000c0a:	4398      	bics	r0, r3
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	e004      	b.n	8000c1a <__lesf2+0x86>
 8000c10:	2301      	movs	r3, #1
 8000c12:	3901      	subs	r1, #1
 8000c14:	4399      	bics	r1, r3
 8000c16:	0008      	movs	r0, r1
 8000c18:	3001      	adds	r0, #1
 8000c1a:	bd30      	pop	{r4, r5, pc}
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d1d7      	bne.n	8000bd0 <__lesf2+0x3c>
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d1ce      	bne.n	8000bc2 <__lesf2+0x2e>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	dde7      	ble.n	8000bf8 <__lesf2+0x64>
 8000c28:	2102      	movs	r1, #2
 8000c2a:	1e58      	subs	r0, r3, #1
 8000c2c:	4008      	ands	r0, r1
 8000c2e:	3801      	subs	r0, #1
 8000c30:	e7f3      	b.n	8000c1a <__lesf2+0x86>
 8000c32:	46c0      	nop			; (mov r8, r8)

08000c34 <__aeabi_fmul>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	464e      	mov	r6, r9
 8000c38:	4657      	mov	r7, sl
 8000c3a:	4645      	mov	r5, r8
 8000c3c:	46de      	mov	lr, fp
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	0243      	lsls	r3, r0, #9
 8000c42:	0a5b      	lsrs	r3, r3, #9
 8000c44:	0045      	lsls	r5, r0, #1
 8000c46:	b083      	sub	sp, #12
 8000c48:	1c0f      	adds	r7, r1, #0
 8000c4a:	4699      	mov	r9, r3
 8000c4c:	0e2d      	lsrs	r5, r5, #24
 8000c4e:	0fc6      	lsrs	r6, r0, #31
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d057      	beq.n	8000d04 <__aeabi_fmul+0xd0>
 8000c54:	2dff      	cmp	r5, #255	; 0xff
 8000c56:	d024      	beq.n	8000ca2 <__aeabi_fmul+0x6e>
 8000c58:	2080      	movs	r0, #128	; 0x80
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	04c0      	lsls	r0, r0, #19
 8000c5e:	4318      	orrs	r0, r3
 8000c60:	2300      	movs	r3, #0
 8000c62:	4681      	mov	r9, r0
 8000c64:	469a      	mov	sl, r3
 8000c66:	469b      	mov	fp, r3
 8000c68:	3d7f      	subs	r5, #127	; 0x7f
 8000c6a:	027c      	lsls	r4, r7, #9
 8000c6c:	007a      	lsls	r2, r7, #1
 8000c6e:	0ffb      	lsrs	r3, r7, #31
 8000c70:	0a64      	lsrs	r4, r4, #9
 8000c72:	0e12      	lsrs	r2, r2, #24
 8000c74:	4698      	mov	r8, r3
 8000c76:	d023      	beq.n	8000cc0 <__aeabi_fmul+0x8c>
 8000c78:	2aff      	cmp	r2, #255	; 0xff
 8000c7a:	d04b      	beq.n	8000d14 <__aeabi_fmul+0xe0>
 8000c7c:	00e3      	lsls	r3, r4, #3
 8000c7e:	2480      	movs	r4, #128	; 0x80
 8000c80:	2000      	movs	r0, #0
 8000c82:	04e4      	lsls	r4, r4, #19
 8000c84:	3a7f      	subs	r2, #127	; 0x7f
 8000c86:	431c      	orrs	r4, r3
 8000c88:	18ad      	adds	r5, r5, r2
 8000c8a:	1c6b      	adds	r3, r5, #1
 8000c8c:	4647      	mov	r7, r8
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	4653      	mov	r3, sl
 8000c92:	4077      	eors	r7, r6
 8000c94:	003a      	movs	r2, r7
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d848      	bhi.n	8000d2c <__aeabi_fmul+0xf8>
 8000c9a:	497d      	ldr	r1, [pc, #500]	; (8000e90 <__aeabi_fmul+0x25c>)
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	58cb      	ldr	r3, [r1, r3]
 8000ca0:	469f      	mov	pc, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_fmul+0x74>
 8000ca6:	e085      	b.n	8000db4 <__aeabi_fmul+0x180>
 8000ca8:	3308      	adds	r3, #8
 8000caa:	469a      	mov	sl, r3
 8000cac:	3b06      	subs	r3, #6
 8000cae:	469b      	mov	fp, r3
 8000cb0:	027c      	lsls	r4, r7, #9
 8000cb2:	007a      	lsls	r2, r7, #1
 8000cb4:	0ffb      	lsrs	r3, r7, #31
 8000cb6:	25ff      	movs	r5, #255	; 0xff
 8000cb8:	0a64      	lsrs	r4, r4, #9
 8000cba:	0e12      	lsrs	r2, r2, #24
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	d1db      	bne.n	8000c78 <__aeabi_fmul+0x44>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_fmul+0x92>
 8000cc4:	e090      	b.n	8000de8 <__aeabi_fmul+0x1b4>
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	2301      	movs	r3, #1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	4692      	mov	sl, r2
 8000cce:	2001      	movs	r0, #1
 8000cd0:	e7db      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000cd2:	464c      	mov	r4, r9
 8000cd4:	4658      	mov	r0, fp
 8000cd6:	0017      	movs	r7, r2
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d024      	beq.n	8000d26 <__aeabi_fmul+0xf2>
 8000cdc:	2803      	cmp	r0, #3
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fmul+0xae>
 8000ce0:	e0cf      	b.n	8000e82 <__aeabi_fmul+0x24e>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2801      	cmp	r0, #1
 8000ce8:	d14d      	bne.n	8000d86 <__aeabi_fmul+0x152>
 8000cea:	0258      	lsls	r0, r3, #9
 8000cec:	05d2      	lsls	r2, r2, #23
 8000cee:	0a40      	lsrs	r0, r0, #9
 8000cf0:	07ff      	lsls	r7, r7, #31
 8000cf2:	4310      	orrs	r0, r2
 8000cf4:	4338      	orrs	r0, r7
 8000cf6:	b003      	add	sp, #12
 8000cf8:	bc3c      	pop	{r2, r3, r4, r5}
 8000cfa:	4690      	mov	r8, r2
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	46a2      	mov	sl, r4
 8000d00:	46ab      	mov	fp, r5
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d15b      	bne.n	8000dc0 <__aeabi_fmul+0x18c>
 8000d08:	2304      	movs	r3, #4
 8000d0a:	469a      	mov	sl, r3
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	2500      	movs	r5, #0
 8000d10:	469b      	mov	fp, r3
 8000d12:	e7aa      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000d14:	35ff      	adds	r5, #255	; 0xff
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d160      	bne.n	8000ddc <__aeabi_fmul+0x1a8>
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	4692      	mov	sl, r2
 8000d22:	2002      	movs	r0, #2
 8000d24:	e7b1      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e7de      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000d2c:	464b      	mov	r3, r9
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	469c      	mov	ip, r3
 8000d32:	464b      	mov	r3, r9
 8000d34:	0426      	lsls	r6, r4, #16
 8000d36:	0c36      	lsrs	r6, r6, #16
 8000d38:	0418      	lsls	r0, r3, #16
 8000d3a:	4661      	mov	r1, ip
 8000d3c:	0033      	movs	r3, r6
 8000d3e:	0c22      	lsrs	r2, r4, #16
 8000d40:	4664      	mov	r4, ip
 8000d42:	0c00      	lsrs	r0, r0, #16
 8000d44:	4343      	muls	r3, r0
 8000d46:	434e      	muls	r6, r1
 8000d48:	4350      	muls	r0, r2
 8000d4a:	4354      	muls	r4, r2
 8000d4c:	1980      	adds	r0, r0, r6
 8000d4e:	0c1a      	lsrs	r2, r3, #16
 8000d50:	1812      	adds	r2, r2, r0
 8000d52:	4296      	cmp	r6, r2
 8000d54:	d903      	bls.n	8000d5e <__aeabi_fmul+0x12a>
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	0249      	lsls	r1, r1, #9
 8000d5a:	468c      	mov	ip, r1
 8000d5c:	4464      	add	r4, ip
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	0c1b      	lsrs	r3, r3, #16
 8000d62:	0410      	lsls	r0, r2, #16
 8000d64:	18c0      	adds	r0, r0, r3
 8000d66:	0183      	lsls	r3, r0, #6
 8000d68:	1e5e      	subs	r6, r3, #1
 8000d6a:	41b3      	sbcs	r3, r6
 8000d6c:	0e80      	lsrs	r0, r0, #26
 8000d6e:	4318      	orrs	r0, r3
 8000d70:	0c13      	lsrs	r3, r2, #16
 8000d72:	191b      	adds	r3, r3, r4
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	4303      	orrs	r3, r0
 8000d78:	001c      	movs	r4, r3
 8000d7a:	0123      	lsls	r3, r4, #4
 8000d7c:	d579      	bpl.n	8000e72 <__aeabi_fmul+0x23e>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	0862      	lsrs	r2, r4, #1
 8000d82:	401c      	ands	r4, r3
 8000d84:	4314      	orrs	r4, r2
 8000d86:	9a01      	ldr	r2, [sp, #4]
 8000d88:	327f      	adds	r2, #127	; 0x7f
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	dd4d      	ble.n	8000e2a <__aeabi_fmul+0x1f6>
 8000d8e:	0763      	lsls	r3, r4, #29
 8000d90:	d004      	beq.n	8000d9c <__aeabi_fmul+0x168>
 8000d92:	230f      	movs	r3, #15
 8000d94:	4023      	ands	r3, r4
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fmul+0x168>
 8000d9a:	3404      	adds	r4, #4
 8000d9c:	0123      	lsls	r3, r4, #4
 8000d9e:	d503      	bpl.n	8000da8 <__aeabi_fmul+0x174>
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <__aeabi_fmul+0x260>)
 8000da2:	9a01      	ldr	r2, [sp, #4]
 8000da4:	401c      	ands	r4, r3
 8000da6:	3280      	adds	r2, #128	; 0x80
 8000da8:	2afe      	cmp	r2, #254	; 0xfe
 8000daa:	dcbc      	bgt.n	8000d26 <__aeabi_fmul+0xf2>
 8000dac:	01a3      	lsls	r3, r4, #6
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	e79a      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000db4:	230c      	movs	r3, #12
 8000db6:	469a      	mov	sl, r3
 8000db8:	3b09      	subs	r3, #9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	469b      	mov	fp, r3
 8000dbe:	e754      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f002 f859 	bl	8002e78 <__clzsi2>
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	1f43      	subs	r3, r0, #5
 8000dca:	2576      	movs	r5, #118	; 0x76
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	2300      	movs	r3, #0
 8000dd0:	426d      	negs	r5, r5
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	1a2d      	subs	r5, r5, r0
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	469b      	mov	fp, r3
 8000dda:	e746      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000ddc:	4652      	mov	r2, sl
 8000dde:	2303      	movs	r3, #3
 8000de0:	431a      	orrs	r2, r3
 8000de2:	4692      	mov	sl, r2
 8000de4:	2003      	movs	r0, #3
 8000de6:	e750      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000de8:	0020      	movs	r0, r4
 8000dea:	f002 f845 	bl	8002e78 <__clzsi2>
 8000dee:	1f43      	subs	r3, r0, #5
 8000df0:	1a2d      	subs	r5, r5, r0
 8000df2:	409c      	lsls	r4, r3
 8000df4:	3d76      	subs	r5, #118	; 0x76
 8000df6:	2000      	movs	r0, #0
 8000df8:	e747      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	03db      	lsls	r3, r3, #15
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	e772      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e04:	4642      	mov	r2, r8
 8000e06:	e766      	b.n	8000cd6 <__aeabi_fmul+0xa2>
 8000e08:	464c      	mov	r4, r9
 8000e0a:	0032      	movs	r2, r6
 8000e0c:	4658      	mov	r0, fp
 8000e0e:	e762      	b.n	8000cd6 <__aeabi_fmul+0xa2>
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	464a      	mov	r2, r9
 8000e14:	03db      	lsls	r3, r3, #15
 8000e16:	421a      	tst	r2, r3
 8000e18:	d022      	beq.n	8000e60 <__aeabi_fmul+0x22c>
 8000e1a:	421c      	tst	r4, r3
 8000e1c:	d120      	bne.n	8000e60 <__aeabi_fmul+0x22c>
 8000e1e:	4323      	orrs	r3, r4
 8000e20:	025b      	lsls	r3, r3, #9
 8000e22:	0a5b      	lsrs	r3, r3, #9
 8000e24:	4647      	mov	r7, r8
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	e75f      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	1a9a      	subs	r2, r3, r2
 8000e2e:	2a1b      	cmp	r2, #27
 8000e30:	dc21      	bgt.n	8000e76 <__aeabi_fmul+0x242>
 8000e32:	0023      	movs	r3, r4
 8000e34:	9901      	ldr	r1, [sp, #4]
 8000e36:	40d3      	lsrs	r3, r2
 8000e38:	319e      	adds	r1, #158	; 0x9e
 8000e3a:	408c      	lsls	r4, r1
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	0023      	movs	r3, r4
 8000e40:	1e5c      	subs	r4, r3, #1
 8000e42:	41a3      	sbcs	r3, r4
 8000e44:	4313      	orrs	r3, r2
 8000e46:	075a      	lsls	r2, r3, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x220>
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	2a04      	cmp	r2, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x220>
 8000e52:	3304      	adds	r3, #4
 8000e54:	015a      	lsls	r2, r3, #5
 8000e56:	d411      	bmi.n	8000e7c <__aeabi_fmul+0x248>
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	0a5b      	lsrs	r3, r3, #9
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	e744      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	464a      	mov	r2, r9
 8000e64:	03db      	lsls	r3, r3, #15
 8000e66:	4313      	orrs	r3, r2
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	0a5b      	lsrs	r3, r3, #9
 8000e6c:	0037      	movs	r7, r6
 8000e6e:	22ff      	movs	r2, #255	; 0xff
 8000e70:	e73b      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e72:	9501      	str	r5, [sp, #4]
 8000e74:	e787      	b.n	8000d86 <__aeabi_fmul+0x152>
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e736      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e733      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	03db      	lsls	r3, r3, #15
 8000e86:	4323      	orrs	r3, r4
 8000e88:	025b      	lsls	r3, r3, #9
 8000e8a:	0a5b      	lsrs	r3, r3, #9
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	e72c      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e90:	08009a90 	.word	0x08009a90
 8000e94:	f7ffffff 	.word	0xf7ffffff

08000e98 <__aeabi_fsub>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	4647      	mov	r7, r8
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	0044      	lsls	r4, r0, #1
 8000ea0:	0fc2      	lsrs	r2, r0, #31
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	0247      	lsls	r7, r0, #9
 8000ea6:	0248      	lsls	r0, r1, #9
 8000ea8:	0a40      	lsrs	r0, r0, #9
 8000eaa:	4684      	mov	ip, r0
 8000eac:	4666      	mov	r6, ip
 8000eae:	0048      	lsls	r0, r1, #1
 8000eb0:	0a7f      	lsrs	r7, r7, #9
 8000eb2:	0e24      	lsrs	r4, r4, #24
 8000eb4:	00f6      	lsls	r6, r6, #3
 8000eb6:	0025      	movs	r5, r4
 8000eb8:	4690      	mov	r8, r2
 8000eba:	00fb      	lsls	r3, r7, #3
 8000ebc:	0e00      	lsrs	r0, r0, #24
 8000ebe:	0fc9      	lsrs	r1, r1, #31
 8000ec0:	46b1      	mov	r9, r6
 8000ec2:	28ff      	cmp	r0, #255	; 0xff
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x30>
 8000ec6:	e085      	b.n	8000fd4 <__aeabi_fsub+0x13c>
 8000ec8:	2601      	movs	r6, #1
 8000eca:	4071      	eors	r1, r6
 8000ecc:	1a26      	subs	r6, r4, r0
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d057      	beq.n	8000f82 <__aeabi_fsub+0xea>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	dd43      	ble.n	8000f5e <__aeabi_fsub+0xc6>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d000      	beq.n	8000edc <__aeabi_fsub+0x44>
 8000eda:	e07f      	b.n	8000fdc <__aeabi_fsub+0x144>
 8000edc:	4649      	mov	r1, r9
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x4c>
 8000ee2:	e0aa      	b.n	800103a <__aeabi_fsub+0x1a2>
 8000ee4:	3e01      	subs	r6, #1
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d000      	beq.n	8000eec <__aeabi_fsub+0x54>
 8000eea:	e0f7      	b.n	80010dc <__aeabi_fsub+0x244>
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	015a      	lsls	r2, r3, #5
 8000ef0:	d400      	bmi.n	8000ef4 <__aeabi_fsub+0x5c>
 8000ef2:	e08b      	b.n	800100c <__aeabi_fsub+0x174>
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	099c      	lsrs	r4, r3, #6
 8000ef8:	0020      	movs	r0, r4
 8000efa:	f001 ffbd 	bl	8002e78 <__clzsi2>
 8000efe:	3805      	subs	r0, #5
 8000f00:	4084      	lsls	r4, r0
 8000f02:	4285      	cmp	r5, r0
 8000f04:	dd00      	ble.n	8000f08 <__aeabi_fsub+0x70>
 8000f06:	e0d3      	b.n	80010b0 <__aeabi_fsub+0x218>
 8000f08:	1b45      	subs	r5, r0, r5
 8000f0a:	0023      	movs	r3, r4
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	3501      	adds	r5, #1
 8000f10:	40eb      	lsrs	r3, r5
 8000f12:	1b45      	subs	r5, r0, r5
 8000f14:	40ac      	lsls	r4, r5
 8000f16:	1e62      	subs	r2, r4, #1
 8000f18:	4194      	sbcs	r4, r2
 8000f1a:	4323      	orrs	r3, r4
 8000f1c:	2407      	movs	r4, #7
 8000f1e:	2500      	movs	r5, #0
 8000f20:	401c      	ands	r4, r3
 8000f22:	2201      	movs	r2, #1
 8000f24:	4641      	mov	r1, r8
 8000f26:	400a      	ands	r2, r1
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	d004      	beq.n	8000f36 <__aeabi_fsub+0x9e>
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	4019      	ands	r1, r3
 8000f30:	2904      	cmp	r1, #4
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fsub+0x9e>
 8000f34:	3304      	adds	r3, #4
 8000f36:	0159      	lsls	r1, r3, #5
 8000f38:	d400      	bmi.n	8000f3c <__aeabi_fsub+0xa4>
 8000f3a:	e080      	b.n	800103e <__aeabi_fsub+0x1a6>
 8000f3c:	3501      	adds	r5, #1
 8000f3e:	b2ec      	uxtb	r4, r5
 8000f40:	2dff      	cmp	r5, #255	; 0xff
 8000f42:	d000      	beq.n	8000f46 <__aeabi_fsub+0xae>
 8000f44:	e0a3      	b.n	800108e <__aeabi_fsub+0x1f6>
 8000f46:	24ff      	movs	r4, #255	; 0xff
 8000f48:	2300      	movs	r3, #0
 8000f4a:	025b      	lsls	r3, r3, #9
 8000f4c:	05e4      	lsls	r4, r4, #23
 8000f4e:	0a58      	lsrs	r0, r3, #9
 8000f50:	07d2      	lsls	r2, r2, #31
 8000f52:	4320      	orrs	r0, r4
 8000f54:	4310      	orrs	r0, r2
 8000f56:	bc0c      	pop	{r2, r3}
 8000f58:	4690      	mov	r8, r2
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d174      	bne.n	800104c <__aeabi_fsub+0x1b4>
 8000f62:	1c60      	adds	r0, r4, #1
 8000f64:	b2c0      	uxtb	r0, r0
 8000f66:	2801      	cmp	r0, #1
 8000f68:	dc00      	bgt.n	8000f6c <__aeabi_fsub+0xd4>
 8000f6a:	e0a7      	b.n	80010bc <__aeabi_fsub+0x224>
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	1a9c      	subs	r4, r3, r2
 8000f70:	0162      	lsls	r2, r4, #5
 8000f72:	d500      	bpl.n	8000f76 <__aeabi_fsub+0xde>
 8000f74:	e0b6      	b.n	80010e4 <__aeabi_fsub+0x24c>
 8000f76:	2c00      	cmp	r4, #0
 8000f78:	d1be      	bne.n	8000ef8 <__aeabi_fsub+0x60>
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e7e3      	b.n	8000f4a <__aeabi_fsub+0xb2>
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	dc00      	bgt.n	8000f88 <__aeabi_fsub+0xf0>
 8000f86:	e085      	b.n	8001094 <__aeabi_fsub+0x1fc>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d046      	beq.n	800101a <__aeabi_fsub+0x182>
 8000f8c:	2cff      	cmp	r4, #255	; 0xff
 8000f8e:	d049      	beq.n	8001024 <__aeabi_fsub+0x18c>
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	4648      	mov	r0, r9
 8000f94:	04d2      	lsls	r2, r2, #19
 8000f96:	4310      	orrs	r0, r2
 8000f98:	4681      	mov	r9, r0
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2e1b      	cmp	r6, #27
 8000f9e:	dc09      	bgt.n	8000fb4 <__aeabi_fsub+0x11c>
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	464c      	mov	r4, r9
 8000fa4:	1b80      	subs	r0, r0, r6
 8000fa6:	4084      	lsls	r4, r0
 8000fa8:	464a      	mov	r2, r9
 8000faa:	0020      	movs	r0, r4
 8000fac:	40f2      	lsrs	r2, r6
 8000fae:	1e44      	subs	r4, r0, #1
 8000fb0:	41a0      	sbcs	r0, r4
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	189b      	adds	r3, r3, r2
 8000fb6:	015a      	lsls	r2, r3, #5
 8000fb8:	d528      	bpl.n	800100c <__aeabi_fsub+0x174>
 8000fba:	3501      	adds	r5, #1
 8000fbc:	2dff      	cmp	r5, #255	; 0xff
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x12a>
 8000fc0:	e0a8      	b.n	8001114 <__aeabi_fsub+0x27c>
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2407      	movs	r4, #7
 8000fc6:	4994      	ldr	r1, [pc, #592]	; (8001218 <__aeabi_fsub+0x380>)
 8000fc8:	401a      	ands	r2, r3
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	400b      	ands	r3, r1
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	401c      	ands	r4, r3
 8000fd2:	e7a6      	b.n	8000f22 <__aeabi_fsub+0x8a>
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_fsub+0x142>
 8000fd8:	e778      	b.n	8000ecc <__aeabi_fsub+0x34>
 8000fda:	e775      	b.n	8000ec8 <__aeabi_fsub+0x30>
 8000fdc:	2cff      	cmp	r4, #255	; 0xff
 8000fde:	d054      	beq.n	800108a <__aeabi_fsub+0x1f2>
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	04d2      	lsls	r2, r2, #19
 8000fe6:	4311      	orrs	r1, r2
 8000fe8:	4689      	mov	r9, r1
 8000fea:	2201      	movs	r2, #1
 8000fec:	2e1b      	cmp	r6, #27
 8000fee:	dc09      	bgt.n	8001004 <__aeabi_fsub+0x16c>
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	4648      	mov	r0, r9
 8000ff4:	1b89      	subs	r1, r1, r6
 8000ff6:	4088      	lsls	r0, r1
 8000ff8:	464a      	mov	r2, r9
 8000ffa:	0001      	movs	r1, r0
 8000ffc:	40f2      	lsrs	r2, r6
 8000ffe:	1e48      	subs	r0, r1, #1
 8001000:	4181      	sbcs	r1, r0
 8001002:	430a      	orrs	r2, r1
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	015a      	lsls	r2, r3, #5
 8001008:	d500      	bpl.n	800100c <__aeabi_fsub+0x174>
 800100a:	e773      	b.n	8000ef4 <__aeabi_fsub+0x5c>
 800100c:	2201      	movs	r2, #1
 800100e:	4641      	mov	r1, r8
 8001010:	400a      	ands	r2, r1
 8001012:	0759      	lsls	r1, r3, #29
 8001014:	d000      	beq.n	8001018 <__aeabi_fsub+0x180>
 8001016:	e789      	b.n	8000f2c <__aeabi_fsub+0x94>
 8001018:	e011      	b.n	800103e <__aeabi_fsub+0x1a6>
 800101a:	4648      	mov	r0, r9
 800101c:	2800      	cmp	r0, #0
 800101e:	d158      	bne.n	80010d2 <__aeabi_fsub+0x23a>
 8001020:	2cff      	cmp	r4, #255	; 0xff
 8001022:	d10c      	bne.n	800103e <__aeabi_fsub+0x1a6>
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x194>
 800102a:	e78c      	b.n	8000f46 <__aeabi_fsub+0xae>
 800102c:	2080      	movs	r0, #128	; 0x80
 800102e:	03c0      	lsls	r0, r0, #15
 8001030:	4303      	orrs	r3, r0
 8001032:	025b      	lsls	r3, r3, #9
 8001034:	0a5b      	lsrs	r3, r3, #9
 8001036:	24ff      	movs	r4, #255	; 0xff
 8001038:	e787      	b.n	8000f4a <__aeabi_fsub+0xb2>
 800103a:	2cff      	cmp	r4, #255	; 0xff
 800103c:	d025      	beq.n	800108a <__aeabi_fsub+0x1f2>
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	2dff      	cmp	r5, #255	; 0xff
 8001042:	d0f0      	beq.n	8001026 <__aeabi_fsub+0x18e>
 8001044:	025b      	lsls	r3, r3, #9
 8001046:	0a5b      	lsrs	r3, r3, #9
 8001048:	b2ec      	uxtb	r4, r5
 800104a:	e77e      	b.n	8000f4a <__aeabi_fsub+0xb2>
 800104c:	2c00      	cmp	r4, #0
 800104e:	d04d      	beq.n	80010ec <__aeabi_fsub+0x254>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d018      	beq.n	8001086 <__aeabi_fsub+0x1ee>
 8001054:	2480      	movs	r4, #128	; 0x80
 8001056:	04e4      	lsls	r4, r4, #19
 8001058:	4272      	negs	r2, r6
 800105a:	4323      	orrs	r3, r4
 800105c:	2a1b      	cmp	r2, #27
 800105e:	dd00      	ble.n	8001062 <__aeabi_fsub+0x1ca>
 8001060:	e0c4      	b.n	80011ec <__aeabi_fsub+0x354>
 8001062:	001c      	movs	r4, r3
 8001064:	2520      	movs	r5, #32
 8001066:	40d4      	lsrs	r4, r2
 8001068:	1aaa      	subs	r2, r5, r2
 800106a:	4093      	lsls	r3, r2
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4193      	sbcs	r3, r2
 8001070:	4323      	orrs	r3, r4
 8001072:	464a      	mov	r2, r9
 8001074:	0005      	movs	r5, r0
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	4688      	mov	r8, r1
 800107a:	e738      	b.n	8000eee <__aeabi_fsub+0x56>
 800107c:	1c72      	adds	r2, r6, #1
 800107e:	d0f8      	beq.n	8001072 <__aeabi_fsub+0x1da>
 8001080:	43f2      	mvns	r2, r6
 8001082:	28ff      	cmp	r0, #255	; 0xff
 8001084:	d1ea      	bne.n	800105c <__aeabi_fsub+0x1c4>
 8001086:	000a      	movs	r2, r1
 8001088:	464b      	mov	r3, r9
 800108a:	25ff      	movs	r5, #255	; 0xff
 800108c:	e7d7      	b.n	800103e <__aeabi_fsub+0x1a6>
 800108e:	019b      	lsls	r3, r3, #6
 8001090:	0a5b      	lsrs	r3, r3, #9
 8001092:	e75a      	b.n	8000f4a <__aeabi_fsub+0xb2>
 8001094:	2e00      	cmp	r6, #0
 8001096:	d141      	bne.n	800111c <__aeabi_fsub+0x284>
 8001098:	1c65      	adds	r5, r4, #1
 800109a:	b2e9      	uxtb	r1, r5
 800109c:	2901      	cmp	r1, #1
 800109e:	dd45      	ble.n	800112c <__aeabi_fsub+0x294>
 80010a0:	2dff      	cmp	r5, #255	; 0xff
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x20e>
 80010a4:	e74f      	b.n	8000f46 <__aeabi_fsub+0xae>
 80010a6:	2407      	movs	r4, #7
 80010a8:	444b      	add	r3, r9
 80010aa:	085b      	lsrs	r3, r3, #1
 80010ac:	401c      	ands	r4, r3
 80010ae:	e738      	b.n	8000f22 <__aeabi_fsub+0x8a>
 80010b0:	2207      	movs	r2, #7
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <__aeabi_fsub+0x384>)
 80010b4:	1a2d      	subs	r5, r5, r0
 80010b6:	4023      	ands	r3, r4
 80010b8:	4014      	ands	r4, r2
 80010ba:	e732      	b.n	8000f22 <__aeabi_fsub+0x8a>
 80010bc:	2c00      	cmp	r4, #0
 80010be:	d11d      	bne.n	80010fc <__aeabi_fsub+0x264>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d17a      	bne.n	80011ba <__aeabi_fsub+0x322>
 80010c4:	464b      	mov	r3, r9
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x234>
 80010ca:	e091      	b.n	80011f0 <__aeabi_fsub+0x358>
 80010cc:	000a      	movs	r2, r1
 80010ce:	2500      	movs	r5, #0
 80010d0:	e7b5      	b.n	800103e <__aeabi_fsub+0x1a6>
 80010d2:	3e01      	subs	r6, #1
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d119      	bne.n	800110c <__aeabi_fsub+0x274>
 80010d8:	444b      	add	r3, r9
 80010da:	e76c      	b.n	8000fb6 <__aeabi_fsub+0x11e>
 80010dc:	2cff      	cmp	r4, #255	; 0xff
 80010de:	d184      	bne.n	8000fea <__aeabi_fsub+0x152>
 80010e0:	25ff      	movs	r5, #255	; 0xff
 80010e2:	e7ac      	b.n	800103e <__aeabi_fsub+0x1a6>
 80010e4:	464a      	mov	r2, r9
 80010e6:	4688      	mov	r8, r1
 80010e8:	1ad4      	subs	r4, r2, r3
 80010ea:	e705      	b.n	8000ef8 <__aeabi_fsub+0x60>
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1c5      	bne.n	800107c <__aeabi_fsub+0x1e4>
 80010f0:	000a      	movs	r2, r1
 80010f2:	28ff      	cmp	r0, #255	; 0xff
 80010f4:	d0c8      	beq.n	8001088 <__aeabi_fsub+0x1f0>
 80010f6:	0005      	movs	r5, r0
 80010f8:	464b      	mov	r3, r9
 80010fa:	e7a0      	b.n	800103e <__aeabi_fsub+0x1a6>
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d149      	bne.n	8001194 <__aeabi_fsub+0x2fc>
 8001100:	464b      	mov	r3, r9
 8001102:	2b00      	cmp	r3, #0
 8001104:	d077      	beq.n	80011f6 <__aeabi_fsub+0x35e>
 8001106:	000a      	movs	r2, r1
 8001108:	25ff      	movs	r5, #255	; 0xff
 800110a:	e798      	b.n	800103e <__aeabi_fsub+0x1a6>
 800110c:	2cff      	cmp	r4, #255	; 0xff
 800110e:	d000      	beq.n	8001112 <__aeabi_fsub+0x27a>
 8001110:	e743      	b.n	8000f9a <__aeabi_fsub+0x102>
 8001112:	e787      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001114:	000a      	movs	r2, r1
 8001116:	24ff      	movs	r4, #255	; 0xff
 8001118:	2300      	movs	r3, #0
 800111a:	e716      	b.n	8000f4a <__aeabi_fsub+0xb2>
 800111c:	2c00      	cmp	r4, #0
 800111e:	d115      	bne.n	800114c <__aeabi_fsub+0x2b4>
 8001120:	2b00      	cmp	r3, #0
 8001122:	d157      	bne.n	80011d4 <__aeabi_fsub+0x33c>
 8001124:	28ff      	cmp	r0, #255	; 0xff
 8001126:	d1e6      	bne.n	80010f6 <__aeabi_fsub+0x25e>
 8001128:	464b      	mov	r3, r9
 800112a:	e77b      	b.n	8001024 <__aeabi_fsub+0x18c>
 800112c:	2c00      	cmp	r4, #0
 800112e:	d120      	bne.n	8001172 <__aeabi_fsub+0x2da>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d057      	beq.n	80011e4 <__aeabi_fsub+0x34c>
 8001134:	4649      	mov	r1, r9
 8001136:	2900      	cmp	r1, #0
 8001138:	d053      	beq.n	80011e2 <__aeabi_fsub+0x34a>
 800113a:	444b      	add	r3, r9
 800113c:	015a      	lsls	r2, r3, #5
 800113e:	d568      	bpl.n	8001212 <__aeabi_fsub+0x37a>
 8001140:	2407      	movs	r4, #7
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <__aeabi_fsub+0x384>)
 8001144:	401c      	ands	r4, r3
 8001146:	2501      	movs	r5, #1
 8001148:	4013      	ands	r3, r2
 800114a:	e6ea      	b.n	8000f22 <__aeabi_fsub+0x8a>
 800114c:	28ff      	cmp	r0, #255	; 0xff
 800114e:	d0eb      	beq.n	8001128 <__aeabi_fsub+0x290>
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	04d2      	lsls	r2, r2, #19
 8001154:	4276      	negs	r6, r6
 8001156:	4313      	orrs	r3, r2
 8001158:	2e1b      	cmp	r6, #27
 800115a:	dc53      	bgt.n	8001204 <__aeabi_fsub+0x36c>
 800115c:	2520      	movs	r5, #32
 800115e:	1bad      	subs	r5, r5, r6
 8001160:	001a      	movs	r2, r3
 8001162:	40ab      	lsls	r3, r5
 8001164:	40f2      	lsrs	r2, r6
 8001166:	1e5c      	subs	r4, r3, #1
 8001168:	41a3      	sbcs	r3, r4
 800116a:	4313      	orrs	r3, r2
 800116c:	444b      	add	r3, r9
 800116e:	0005      	movs	r5, r0
 8001170:	e721      	b.n	8000fb6 <__aeabi_fsub+0x11e>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0d8      	beq.n	8001128 <__aeabi_fsub+0x290>
 8001176:	4649      	mov	r1, r9
 8001178:	2900      	cmp	r1, #0
 800117a:	d100      	bne.n	800117e <__aeabi_fsub+0x2e6>
 800117c:	e752      	b.n	8001024 <__aeabi_fsub+0x18c>
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	03c9      	lsls	r1, r1, #15
 8001182:	420f      	tst	r7, r1
 8001184:	d100      	bne.n	8001188 <__aeabi_fsub+0x2f0>
 8001186:	e74d      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001188:	4660      	mov	r0, ip
 800118a:	4208      	tst	r0, r1
 800118c:	d000      	beq.n	8001190 <__aeabi_fsub+0x2f8>
 800118e:	e749      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001190:	464b      	mov	r3, r9
 8001192:	e747      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001194:	4648      	mov	r0, r9
 8001196:	25ff      	movs	r5, #255	; 0xff
 8001198:	2800      	cmp	r0, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x306>
 800119c:	e74f      	b.n	800103e <__aeabi_fsub+0x1a6>
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	03d2      	lsls	r2, r2, #15
 80011a2:	4217      	tst	r7, r2
 80011a4:	d004      	beq.n	80011b0 <__aeabi_fsub+0x318>
 80011a6:	4660      	mov	r0, ip
 80011a8:	4210      	tst	r0, r2
 80011aa:	d101      	bne.n	80011b0 <__aeabi_fsub+0x318>
 80011ac:	464b      	mov	r3, r9
 80011ae:	4688      	mov	r8, r1
 80011b0:	2201      	movs	r2, #1
 80011b2:	4641      	mov	r1, r8
 80011b4:	25ff      	movs	r5, #255	; 0xff
 80011b6:	400a      	ands	r2, r1
 80011b8:	e741      	b.n	800103e <__aeabi_fsub+0x1a6>
 80011ba:	4648      	mov	r0, r9
 80011bc:	2800      	cmp	r0, #0
 80011be:	d01f      	beq.n	8001200 <__aeabi_fsub+0x368>
 80011c0:	1a1a      	subs	r2, r3, r0
 80011c2:	0150      	lsls	r0, r2, #5
 80011c4:	d520      	bpl.n	8001208 <__aeabi_fsub+0x370>
 80011c6:	464a      	mov	r2, r9
 80011c8:	2407      	movs	r4, #7
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	401c      	ands	r4, r3
 80011ce:	4688      	mov	r8, r1
 80011d0:	2500      	movs	r5, #0
 80011d2:	e6a6      	b.n	8000f22 <__aeabi_fsub+0x8a>
 80011d4:	1c74      	adds	r4, r6, #1
 80011d6:	d0c9      	beq.n	800116c <__aeabi_fsub+0x2d4>
 80011d8:	43f6      	mvns	r6, r6
 80011da:	28ff      	cmp	r0, #255	; 0xff
 80011dc:	d1bc      	bne.n	8001158 <__aeabi_fsub+0x2c0>
 80011de:	464b      	mov	r3, r9
 80011e0:	e720      	b.n	8001024 <__aeabi_fsub+0x18c>
 80011e2:	4699      	mov	r9, r3
 80011e4:	464b      	mov	r3, r9
 80011e6:	2500      	movs	r5, #0
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	e72b      	b.n	8001044 <__aeabi_fsub+0x1ac>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e740      	b.n	8001072 <__aeabi_fsub+0x1da>
 80011f0:	2200      	movs	r2, #0
 80011f2:	2300      	movs	r3, #0
 80011f4:	e6a9      	b.n	8000f4a <__aeabi_fsub+0xb2>
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	2200      	movs	r2, #0
 80011fa:	03db      	lsls	r3, r3, #15
 80011fc:	24ff      	movs	r4, #255	; 0xff
 80011fe:	e6a4      	b.n	8000f4a <__aeabi_fsub+0xb2>
 8001200:	2500      	movs	r5, #0
 8001202:	e71c      	b.n	800103e <__aeabi_fsub+0x1a6>
 8001204:	2301      	movs	r3, #1
 8001206:	e7b1      	b.n	800116c <__aeabi_fsub+0x2d4>
 8001208:	2a00      	cmp	r2, #0
 800120a:	d0f1      	beq.n	80011f0 <__aeabi_fsub+0x358>
 800120c:	0013      	movs	r3, r2
 800120e:	2500      	movs	r5, #0
 8001210:	e6fc      	b.n	800100c <__aeabi_fsub+0x174>
 8001212:	2500      	movs	r5, #0
 8001214:	e6fa      	b.n	800100c <__aeabi_fsub+0x174>
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	7dffffff 	.word	0x7dffffff
 800121c:	fbffffff 	.word	0xfbffffff

08001220 <__aeabi_f2iz>:
 8001220:	0241      	lsls	r1, r0, #9
 8001222:	0042      	lsls	r2, r0, #1
 8001224:	0fc3      	lsrs	r3, r0, #31
 8001226:	0a49      	lsrs	r1, r1, #9
 8001228:	0e12      	lsrs	r2, r2, #24
 800122a:	2000      	movs	r0, #0
 800122c:	2a7e      	cmp	r2, #126	; 0x7e
 800122e:	d90d      	bls.n	800124c <__aeabi_f2iz+0x2c>
 8001230:	2a9d      	cmp	r2, #157	; 0x9d
 8001232:	d80c      	bhi.n	800124e <__aeabi_f2iz+0x2e>
 8001234:	2080      	movs	r0, #128	; 0x80
 8001236:	0400      	lsls	r0, r0, #16
 8001238:	4301      	orrs	r1, r0
 800123a:	2a95      	cmp	r2, #149	; 0x95
 800123c:	dc0a      	bgt.n	8001254 <__aeabi_f2iz+0x34>
 800123e:	2096      	movs	r0, #150	; 0x96
 8001240:	1a82      	subs	r2, r0, r2
 8001242:	40d1      	lsrs	r1, r2
 8001244:	4248      	negs	r0, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d100      	bne.n	800124c <__aeabi_f2iz+0x2c>
 800124a:	0008      	movs	r0, r1
 800124c:	4770      	bx	lr
 800124e:	4a03      	ldr	r2, [pc, #12]	; (800125c <__aeabi_f2iz+0x3c>)
 8001250:	1898      	adds	r0, r3, r2
 8001252:	e7fb      	b.n	800124c <__aeabi_f2iz+0x2c>
 8001254:	3a96      	subs	r2, #150	; 0x96
 8001256:	4091      	lsls	r1, r2
 8001258:	e7f4      	b.n	8001244 <__aeabi_f2iz+0x24>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	7fffffff 	.word	0x7fffffff

08001260 <__aeabi_i2f>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	2800      	cmp	r0, #0
 8001264:	d03d      	beq.n	80012e2 <__aeabi_i2f+0x82>
 8001266:	17c3      	asrs	r3, r0, #31
 8001268:	18c5      	adds	r5, r0, r3
 800126a:	405d      	eors	r5, r3
 800126c:	0fc4      	lsrs	r4, r0, #31
 800126e:	0028      	movs	r0, r5
 8001270:	f001 fe02 	bl	8002e78 <__clzsi2>
 8001274:	229e      	movs	r2, #158	; 0x9e
 8001276:	1a12      	subs	r2, r2, r0
 8001278:	2a96      	cmp	r2, #150	; 0x96
 800127a:	dc07      	bgt.n	800128c <__aeabi_i2f+0x2c>
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	2808      	cmp	r0, #8
 8001280:	dd33      	ble.n	80012ea <__aeabi_i2f+0x8a>
 8001282:	3808      	subs	r0, #8
 8001284:	4085      	lsls	r5, r0
 8001286:	0268      	lsls	r0, r5, #9
 8001288:	0a40      	lsrs	r0, r0, #9
 800128a:	e023      	b.n	80012d4 <__aeabi_i2f+0x74>
 800128c:	2a99      	cmp	r2, #153	; 0x99
 800128e:	dd0b      	ble.n	80012a8 <__aeabi_i2f+0x48>
 8001290:	2305      	movs	r3, #5
 8001292:	0029      	movs	r1, r5
 8001294:	1a1b      	subs	r3, r3, r0
 8001296:	40d9      	lsrs	r1, r3
 8001298:	0003      	movs	r3, r0
 800129a:	331b      	adds	r3, #27
 800129c:	409d      	lsls	r5, r3
 800129e:	002b      	movs	r3, r5
 80012a0:	1e5d      	subs	r5, r3, #1
 80012a2:	41ab      	sbcs	r3, r5
 80012a4:	4319      	orrs	r1, r3
 80012a6:	000d      	movs	r5, r1
 80012a8:	2805      	cmp	r0, #5
 80012aa:	dd01      	ble.n	80012b0 <__aeabi_i2f+0x50>
 80012ac:	1f43      	subs	r3, r0, #5
 80012ae:	409d      	lsls	r5, r3
 80012b0:	002b      	movs	r3, r5
 80012b2:	490f      	ldr	r1, [pc, #60]	; (80012f0 <__aeabi_i2f+0x90>)
 80012b4:	400b      	ands	r3, r1
 80012b6:	076e      	lsls	r6, r5, #29
 80012b8:	d009      	beq.n	80012ce <__aeabi_i2f+0x6e>
 80012ba:	260f      	movs	r6, #15
 80012bc:	4035      	ands	r5, r6
 80012be:	2d04      	cmp	r5, #4
 80012c0:	d005      	beq.n	80012ce <__aeabi_i2f+0x6e>
 80012c2:	3304      	adds	r3, #4
 80012c4:	015d      	lsls	r5, r3, #5
 80012c6:	d502      	bpl.n	80012ce <__aeabi_i2f+0x6e>
 80012c8:	229f      	movs	r2, #159	; 0x9f
 80012ca:	400b      	ands	r3, r1
 80012cc:	1a12      	subs	r2, r2, r0
 80012ce:	019b      	lsls	r3, r3, #6
 80012d0:	0a58      	lsrs	r0, r3, #9
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	0240      	lsls	r0, r0, #9
 80012d6:	05d2      	lsls	r2, r2, #23
 80012d8:	0a40      	lsrs	r0, r0, #9
 80012da:	07e4      	lsls	r4, r4, #31
 80012dc:	4310      	orrs	r0, r2
 80012de:	4320      	orrs	r0, r4
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
 80012e2:	2400      	movs	r4, #0
 80012e4:	2200      	movs	r2, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	e7f4      	b.n	80012d4 <__aeabi_i2f+0x74>
 80012ea:	0268      	lsls	r0, r5, #9
 80012ec:	0a40      	lsrs	r0, r0, #9
 80012ee:	e7f1      	b.n	80012d4 <__aeabi_i2f+0x74>
 80012f0:	fbffffff 	.word	0xfbffffff

080012f4 <__aeabi_ui2f>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	1e04      	subs	r4, r0, #0
 80012f8:	d034      	beq.n	8001364 <__aeabi_ui2f+0x70>
 80012fa:	f001 fdbd 	bl	8002e78 <__clzsi2>
 80012fe:	229e      	movs	r2, #158	; 0x9e
 8001300:	1a12      	subs	r2, r2, r0
 8001302:	2a96      	cmp	r2, #150	; 0x96
 8001304:	dc07      	bgt.n	8001316 <__aeabi_ui2f+0x22>
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	2808      	cmp	r0, #8
 800130a:	dd2e      	ble.n	800136a <__aeabi_ui2f+0x76>
 800130c:	3808      	subs	r0, #8
 800130e:	4084      	lsls	r4, r0
 8001310:	0260      	lsls	r0, r4, #9
 8001312:	0a40      	lsrs	r0, r0, #9
 8001314:	e021      	b.n	800135a <__aeabi_ui2f+0x66>
 8001316:	2a99      	cmp	r2, #153	; 0x99
 8001318:	dd09      	ble.n	800132e <__aeabi_ui2f+0x3a>
 800131a:	0003      	movs	r3, r0
 800131c:	0021      	movs	r1, r4
 800131e:	331b      	adds	r3, #27
 8001320:	4099      	lsls	r1, r3
 8001322:	1e4b      	subs	r3, r1, #1
 8001324:	4199      	sbcs	r1, r3
 8001326:	2305      	movs	r3, #5
 8001328:	1a1b      	subs	r3, r3, r0
 800132a:	40dc      	lsrs	r4, r3
 800132c:	430c      	orrs	r4, r1
 800132e:	2805      	cmp	r0, #5
 8001330:	dd01      	ble.n	8001336 <__aeabi_ui2f+0x42>
 8001332:	1f43      	subs	r3, r0, #5
 8001334:	409c      	lsls	r4, r3
 8001336:	0023      	movs	r3, r4
 8001338:	490d      	ldr	r1, [pc, #52]	; (8001370 <__aeabi_ui2f+0x7c>)
 800133a:	400b      	ands	r3, r1
 800133c:	0765      	lsls	r5, r4, #29
 800133e:	d009      	beq.n	8001354 <__aeabi_ui2f+0x60>
 8001340:	250f      	movs	r5, #15
 8001342:	402c      	ands	r4, r5
 8001344:	2c04      	cmp	r4, #4
 8001346:	d005      	beq.n	8001354 <__aeabi_ui2f+0x60>
 8001348:	3304      	adds	r3, #4
 800134a:	015c      	lsls	r4, r3, #5
 800134c:	d502      	bpl.n	8001354 <__aeabi_ui2f+0x60>
 800134e:	229f      	movs	r2, #159	; 0x9f
 8001350:	400b      	ands	r3, r1
 8001352:	1a12      	subs	r2, r2, r0
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	0a58      	lsrs	r0, r3, #9
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	0240      	lsls	r0, r0, #9
 800135c:	05d2      	lsls	r2, r2, #23
 800135e:	0a40      	lsrs	r0, r0, #9
 8001360:	4310      	orrs	r0, r2
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	2200      	movs	r2, #0
 8001366:	2000      	movs	r0, #0
 8001368:	e7f7      	b.n	800135a <__aeabi_ui2f+0x66>
 800136a:	0260      	lsls	r0, r4, #9
 800136c:	0a40      	lsrs	r0, r0, #9
 800136e:	e7f4      	b.n	800135a <__aeabi_ui2f+0x66>
 8001370:	fbffffff 	.word	0xfbffffff

08001374 <__aeabi_dadd>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	464f      	mov	r7, r9
 8001378:	4646      	mov	r6, r8
 800137a:	46d6      	mov	lr, sl
 800137c:	000c      	movs	r4, r1
 800137e:	0309      	lsls	r1, r1, #12
 8001380:	b5c0      	push	{r6, r7, lr}
 8001382:	0a49      	lsrs	r1, r1, #9
 8001384:	0f47      	lsrs	r7, r0, #29
 8001386:	005e      	lsls	r6, r3, #1
 8001388:	4339      	orrs	r1, r7
 800138a:	031f      	lsls	r7, r3, #12
 800138c:	0fdb      	lsrs	r3, r3, #31
 800138e:	469c      	mov	ip, r3
 8001390:	0065      	lsls	r5, r4, #1
 8001392:	0a7b      	lsrs	r3, r7, #9
 8001394:	0f57      	lsrs	r7, r2, #29
 8001396:	431f      	orrs	r7, r3
 8001398:	0d6d      	lsrs	r5, r5, #21
 800139a:	0fe4      	lsrs	r4, r4, #31
 800139c:	0d76      	lsrs	r6, r6, #21
 800139e:	46a1      	mov	r9, r4
 80013a0:	00c0      	lsls	r0, r0, #3
 80013a2:	46b8      	mov	r8, r7
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	1bab      	subs	r3, r5, r6
 80013a8:	4564      	cmp	r4, ip
 80013aa:	d07b      	beq.n	80014a4 <__aeabi_dadd+0x130>
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd5f      	ble.n	8001470 <__aeabi_dadd+0xfc>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dadd+0x42>
 80013b4:	e0a4      	b.n	8001500 <__aeabi_dadd+0x18c>
 80013b6:	003e      	movs	r6, r7
 80013b8:	4316      	orrs	r6, r2
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x4a>
 80013bc:	e112      	b.n	80015e4 <__aeabi_dadd+0x270>
 80013be:	1e5e      	subs	r6, r3, #1
 80013c0:	2e00      	cmp	r6, #0
 80013c2:	d000      	beq.n	80013c6 <__aeabi_dadd+0x52>
 80013c4:	e19e      	b.n	8001704 <__aeabi_dadd+0x390>
 80013c6:	1a87      	subs	r7, r0, r2
 80013c8:	4643      	mov	r3, r8
 80013ca:	42b8      	cmp	r0, r7
 80013cc:	4180      	sbcs	r0, r0
 80013ce:	2501      	movs	r5, #1
 80013d0:	1ac9      	subs	r1, r1, r3
 80013d2:	4240      	negs	r0, r0
 80013d4:	1a09      	subs	r1, r1, r0
 80013d6:	020b      	lsls	r3, r1, #8
 80013d8:	d400      	bmi.n	80013dc <__aeabi_dadd+0x68>
 80013da:	e131      	b.n	8001640 <__aeabi_dadd+0x2cc>
 80013dc:	0249      	lsls	r1, r1, #9
 80013de:	0a4e      	lsrs	r6, r1, #9
 80013e0:	2e00      	cmp	r6, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x72>
 80013e4:	e16e      	b.n	80016c4 <__aeabi_dadd+0x350>
 80013e6:	0030      	movs	r0, r6
 80013e8:	f001 fd46 	bl	8002e78 <__clzsi2>
 80013ec:	0003      	movs	r3, r0
 80013ee:	3b08      	subs	r3, #8
 80013f0:	2b1f      	cmp	r3, #31
 80013f2:	dd00      	ble.n	80013f6 <__aeabi_dadd+0x82>
 80013f4:	e161      	b.n	80016ba <__aeabi_dadd+0x346>
 80013f6:	2220      	movs	r2, #32
 80013f8:	0039      	movs	r1, r7
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	409e      	lsls	r6, r3
 80013fe:	40d1      	lsrs	r1, r2
 8001400:	409f      	lsls	r7, r3
 8001402:	430e      	orrs	r6, r1
 8001404:	429d      	cmp	r5, r3
 8001406:	dd00      	ble.n	800140a <__aeabi_dadd+0x96>
 8001408:	e151      	b.n	80016ae <__aeabi_dadd+0x33a>
 800140a:	1b5d      	subs	r5, r3, r5
 800140c:	1c6b      	adds	r3, r5, #1
 800140e:	2b1f      	cmp	r3, #31
 8001410:	dd00      	ble.n	8001414 <__aeabi_dadd+0xa0>
 8001412:	e17c      	b.n	800170e <__aeabi_dadd+0x39a>
 8001414:	2120      	movs	r1, #32
 8001416:	1ac9      	subs	r1, r1, r3
 8001418:	003d      	movs	r5, r7
 800141a:	0030      	movs	r0, r6
 800141c:	408f      	lsls	r7, r1
 800141e:	4088      	lsls	r0, r1
 8001420:	40dd      	lsrs	r5, r3
 8001422:	1e79      	subs	r1, r7, #1
 8001424:	418f      	sbcs	r7, r1
 8001426:	0031      	movs	r1, r6
 8001428:	2207      	movs	r2, #7
 800142a:	4328      	orrs	r0, r5
 800142c:	40d9      	lsrs	r1, r3
 800142e:	2500      	movs	r5, #0
 8001430:	4307      	orrs	r7, r0
 8001432:	403a      	ands	r2, r7
 8001434:	2a00      	cmp	r2, #0
 8001436:	d009      	beq.n	800144c <__aeabi_dadd+0xd8>
 8001438:	230f      	movs	r3, #15
 800143a:	403b      	ands	r3, r7
 800143c:	2b04      	cmp	r3, #4
 800143e:	d005      	beq.n	800144c <__aeabi_dadd+0xd8>
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	42bb      	cmp	r3, r7
 8001444:	41bf      	sbcs	r7, r7
 8001446:	427f      	negs	r7, r7
 8001448:	19c9      	adds	r1, r1, r7
 800144a:	001f      	movs	r7, r3
 800144c:	020b      	lsls	r3, r1, #8
 800144e:	d400      	bmi.n	8001452 <__aeabi_dadd+0xde>
 8001450:	e226      	b.n	80018a0 <__aeabi_dadd+0x52c>
 8001452:	1c6a      	adds	r2, r5, #1
 8001454:	4bc6      	ldr	r3, [pc, #792]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001456:	0555      	lsls	r5, r2, #21
 8001458:	0d6d      	lsrs	r5, r5, #21
 800145a:	429a      	cmp	r2, r3
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0xec>
 800145e:	e106      	b.n	800166e <__aeabi_dadd+0x2fa>
 8001460:	4ac4      	ldr	r2, [pc, #784]	; (8001774 <__aeabi_dadd+0x400>)
 8001462:	08ff      	lsrs	r7, r7, #3
 8001464:	400a      	ands	r2, r1
 8001466:	0753      	lsls	r3, r2, #29
 8001468:	0252      	lsls	r2, r2, #9
 800146a:	433b      	orrs	r3, r7
 800146c:	0b12      	lsrs	r2, r2, #12
 800146e:	e08e      	b.n	800158e <__aeabi_dadd+0x21a>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d000      	beq.n	8001476 <__aeabi_dadd+0x102>
 8001474:	e0b8      	b.n	80015e8 <__aeabi_dadd+0x274>
 8001476:	1c6b      	adds	r3, r5, #1
 8001478:	055b      	lsls	r3, r3, #21
 800147a:	0d5b      	lsrs	r3, r3, #21
 800147c:	2b01      	cmp	r3, #1
 800147e:	dc00      	bgt.n	8001482 <__aeabi_dadd+0x10e>
 8001480:	e130      	b.n	80016e4 <__aeabi_dadd+0x370>
 8001482:	1a87      	subs	r7, r0, r2
 8001484:	4643      	mov	r3, r8
 8001486:	42b8      	cmp	r0, r7
 8001488:	41b6      	sbcs	r6, r6
 800148a:	1acb      	subs	r3, r1, r3
 800148c:	4276      	negs	r6, r6
 800148e:	1b9e      	subs	r6, r3, r6
 8001490:	0233      	lsls	r3, r6, #8
 8001492:	d500      	bpl.n	8001496 <__aeabi_dadd+0x122>
 8001494:	e14c      	b.n	8001730 <__aeabi_dadd+0x3bc>
 8001496:	003b      	movs	r3, r7
 8001498:	4333      	orrs	r3, r6
 800149a:	d1a1      	bne.n	80013e0 <__aeabi_dadd+0x6c>
 800149c:	2200      	movs	r2, #0
 800149e:	2400      	movs	r4, #0
 80014a0:	2500      	movs	r5, #0
 80014a2:	e070      	b.n	8001586 <__aeabi_dadd+0x212>
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dc00      	bgt.n	80014aa <__aeabi_dadd+0x136>
 80014a8:	e0e5      	b.n	8001676 <__aeabi_dadd+0x302>
 80014aa:	2e00      	cmp	r6, #0
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x13c>
 80014ae:	e083      	b.n	80015b8 <__aeabi_dadd+0x244>
 80014b0:	4eaf      	ldr	r6, [pc, #700]	; (8001770 <__aeabi_dadd+0x3fc>)
 80014b2:	42b5      	cmp	r5, r6
 80014b4:	d060      	beq.n	8001578 <__aeabi_dadd+0x204>
 80014b6:	2680      	movs	r6, #128	; 0x80
 80014b8:	0436      	lsls	r6, r6, #16
 80014ba:	4337      	orrs	r7, r6
 80014bc:	46b8      	mov	r8, r7
 80014be:	2b38      	cmp	r3, #56	; 0x38
 80014c0:	dc00      	bgt.n	80014c4 <__aeabi_dadd+0x150>
 80014c2:	e13e      	b.n	8001742 <__aeabi_dadd+0x3ce>
 80014c4:	4643      	mov	r3, r8
 80014c6:	4313      	orrs	r3, r2
 80014c8:	001f      	movs	r7, r3
 80014ca:	1e7a      	subs	r2, r7, #1
 80014cc:	4197      	sbcs	r7, r2
 80014ce:	183f      	adds	r7, r7, r0
 80014d0:	4287      	cmp	r7, r0
 80014d2:	4180      	sbcs	r0, r0
 80014d4:	4240      	negs	r0, r0
 80014d6:	1809      	adds	r1, r1, r0
 80014d8:	020b      	lsls	r3, r1, #8
 80014da:	d400      	bmi.n	80014de <__aeabi_dadd+0x16a>
 80014dc:	e0b0      	b.n	8001640 <__aeabi_dadd+0x2cc>
 80014de:	4ba4      	ldr	r3, [pc, #656]	; (8001770 <__aeabi_dadd+0x3fc>)
 80014e0:	3501      	adds	r5, #1
 80014e2:	429d      	cmp	r5, r3
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dadd+0x174>
 80014e6:	e0c3      	b.n	8001670 <__aeabi_dadd+0x2fc>
 80014e8:	4aa2      	ldr	r2, [pc, #648]	; (8001774 <__aeabi_dadd+0x400>)
 80014ea:	087b      	lsrs	r3, r7, #1
 80014ec:	400a      	ands	r2, r1
 80014ee:	2101      	movs	r1, #1
 80014f0:	400f      	ands	r7, r1
 80014f2:	431f      	orrs	r7, r3
 80014f4:	0851      	lsrs	r1, r2, #1
 80014f6:	07d3      	lsls	r3, r2, #31
 80014f8:	2207      	movs	r2, #7
 80014fa:	431f      	orrs	r7, r3
 80014fc:	403a      	ands	r2, r7
 80014fe:	e799      	b.n	8001434 <__aeabi_dadd+0xc0>
 8001500:	4e9b      	ldr	r6, [pc, #620]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001502:	42b5      	cmp	r5, r6
 8001504:	d038      	beq.n	8001578 <__aeabi_dadd+0x204>
 8001506:	2680      	movs	r6, #128	; 0x80
 8001508:	0436      	lsls	r6, r6, #16
 800150a:	4337      	orrs	r7, r6
 800150c:	46b8      	mov	r8, r7
 800150e:	2b38      	cmp	r3, #56	; 0x38
 8001510:	dd00      	ble.n	8001514 <__aeabi_dadd+0x1a0>
 8001512:	e0dc      	b.n	80016ce <__aeabi_dadd+0x35a>
 8001514:	2b1f      	cmp	r3, #31
 8001516:	dc00      	bgt.n	800151a <__aeabi_dadd+0x1a6>
 8001518:	e130      	b.n	800177c <__aeabi_dadd+0x408>
 800151a:	001e      	movs	r6, r3
 800151c:	4647      	mov	r7, r8
 800151e:	3e20      	subs	r6, #32
 8001520:	40f7      	lsrs	r7, r6
 8001522:	46bc      	mov	ip, r7
 8001524:	2b20      	cmp	r3, #32
 8001526:	d004      	beq.n	8001532 <__aeabi_dadd+0x1be>
 8001528:	2640      	movs	r6, #64	; 0x40
 800152a:	1af3      	subs	r3, r6, r3
 800152c:	4646      	mov	r6, r8
 800152e:	409e      	lsls	r6, r3
 8001530:	4332      	orrs	r2, r6
 8001532:	0017      	movs	r7, r2
 8001534:	4663      	mov	r3, ip
 8001536:	1e7a      	subs	r2, r7, #1
 8001538:	4197      	sbcs	r7, r2
 800153a:	431f      	orrs	r7, r3
 800153c:	e0cc      	b.n	80016d8 <__aeabi_dadd+0x364>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0x1d0>
 8001542:	e204      	b.n	800194e <__aeabi_dadd+0x5da>
 8001544:	4643      	mov	r3, r8
 8001546:	4313      	orrs	r3, r2
 8001548:	d100      	bne.n	800154c <__aeabi_dadd+0x1d8>
 800154a:	e159      	b.n	8001800 <__aeabi_dadd+0x48c>
 800154c:	074b      	lsls	r3, r1, #29
 800154e:	08c0      	lsrs	r0, r0, #3
 8001550:	4318      	orrs	r0, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	08c9      	lsrs	r1, r1, #3
 8001556:	031b      	lsls	r3, r3, #12
 8001558:	4219      	tst	r1, r3
 800155a:	d008      	beq.n	800156e <__aeabi_dadd+0x1fa>
 800155c:	4645      	mov	r5, r8
 800155e:	08ed      	lsrs	r5, r5, #3
 8001560:	421d      	tst	r5, r3
 8001562:	d104      	bne.n	800156e <__aeabi_dadd+0x1fa>
 8001564:	4643      	mov	r3, r8
 8001566:	08d0      	lsrs	r0, r2, #3
 8001568:	0759      	lsls	r1, r3, #29
 800156a:	4308      	orrs	r0, r1
 800156c:	0029      	movs	r1, r5
 800156e:	0f42      	lsrs	r2, r0, #29
 8001570:	00c9      	lsls	r1, r1, #3
 8001572:	4d7f      	ldr	r5, [pc, #508]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001574:	4311      	orrs	r1, r2
 8001576:	00c0      	lsls	r0, r0, #3
 8001578:	074b      	lsls	r3, r1, #29
 800157a:	08ca      	lsrs	r2, r1, #3
 800157c:	497c      	ldr	r1, [pc, #496]	; (8001770 <__aeabi_dadd+0x3fc>)
 800157e:	08c0      	lsrs	r0, r0, #3
 8001580:	4303      	orrs	r3, r0
 8001582:	428d      	cmp	r5, r1
 8001584:	d068      	beq.n	8001658 <__aeabi_dadd+0x2e4>
 8001586:	0312      	lsls	r2, r2, #12
 8001588:	056d      	lsls	r5, r5, #21
 800158a:	0b12      	lsrs	r2, r2, #12
 800158c:	0d6d      	lsrs	r5, r5, #21
 800158e:	2100      	movs	r1, #0
 8001590:	0312      	lsls	r2, r2, #12
 8001592:	0018      	movs	r0, r3
 8001594:	0b13      	lsrs	r3, r2, #12
 8001596:	0d0a      	lsrs	r2, r1, #20
 8001598:	0512      	lsls	r2, r2, #20
 800159a:	431a      	orrs	r2, r3
 800159c:	4b76      	ldr	r3, [pc, #472]	; (8001778 <__aeabi_dadd+0x404>)
 800159e:	052d      	lsls	r5, r5, #20
 80015a0:	4013      	ands	r3, r2
 80015a2:	432b      	orrs	r3, r5
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	07e4      	lsls	r4, r4, #31
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	4323      	orrs	r3, r4
 80015ac:	0019      	movs	r1, r3
 80015ae:	bc1c      	pop	{r2, r3, r4}
 80015b0:	4690      	mov	r8, r2
 80015b2:	4699      	mov	r9, r3
 80015b4:	46a2      	mov	sl, r4
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b8:	003e      	movs	r6, r7
 80015ba:	4316      	orrs	r6, r2
 80015bc:	d012      	beq.n	80015e4 <__aeabi_dadd+0x270>
 80015be:	1e5e      	subs	r6, r3, #1
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d000      	beq.n	80015c6 <__aeabi_dadd+0x252>
 80015c4:	e100      	b.n	80017c8 <__aeabi_dadd+0x454>
 80015c6:	1887      	adds	r7, r0, r2
 80015c8:	4287      	cmp	r7, r0
 80015ca:	4180      	sbcs	r0, r0
 80015cc:	4441      	add	r1, r8
 80015ce:	4240      	negs	r0, r0
 80015d0:	1809      	adds	r1, r1, r0
 80015d2:	2501      	movs	r5, #1
 80015d4:	020b      	lsls	r3, r1, #8
 80015d6:	d533      	bpl.n	8001640 <__aeabi_dadd+0x2cc>
 80015d8:	2502      	movs	r5, #2
 80015da:	e785      	b.n	80014e8 <__aeabi_dadd+0x174>
 80015dc:	4664      	mov	r4, ip
 80015de:	0033      	movs	r3, r6
 80015e0:	4641      	mov	r1, r8
 80015e2:	0010      	movs	r0, r2
 80015e4:	001d      	movs	r5, r3
 80015e6:	e7c7      	b.n	8001578 <__aeabi_dadd+0x204>
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x27a>
 80015ec:	e0da      	b.n	80017a4 <__aeabi_dadd+0x430>
 80015ee:	000c      	movs	r4, r1
 80015f0:	4304      	orrs	r4, r0
 80015f2:	d0f3      	beq.n	80015dc <__aeabi_dadd+0x268>
 80015f4:	1c5c      	adds	r4, r3, #1
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x286>
 80015f8:	e19f      	b.n	800193a <__aeabi_dadd+0x5c6>
 80015fa:	4c5d      	ldr	r4, [pc, #372]	; (8001770 <__aeabi_dadd+0x3fc>)
 80015fc:	42a6      	cmp	r6, r4
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x28e>
 8001600:	e12f      	b.n	8001862 <__aeabi_dadd+0x4ee>
 8001602:	43db      	mvns	r3, r3
 8001604:	2b38      	cmp	r3, #56	; 0x38
 8001606:	dd00      	ble.n	800160a <__aeabi_dadd+0x296>
 8001608:	e166      	b.n	80018d8 <__aeabi_dadd+0x564>
 800160a:	2b1f      	cmp	r3, #31
 800160c:	dd00      	ble.n	8001610 <__aeabi_dadd+0x29c>
 800160e:	e183      	b.n	8001918 <__aeabi_dadd+0x5a4>
 8001610:	2420      	movs	r4, #32
 8001612:	0005      	movs	r5, r0
 8001614:	1ae4      	subs	r4, r4, r3
 8001616:	000f      	movs	r7, r1
 8001618:	40dd      	lsrs	r5, r3
 800161a:	40d9      	lsrs	r1, r3
 800161c:	40a0      	lsls	r0, r4
 800161e:	4643      	mov	r3, r8
 8001620:	40a7      	lsls	r7, r4
 8001622:	1a5b      	subs	r3, r3, r1
 8001624:	1e44      	subs	r4, r0, #1
 8001626:	41a0      	sbcs	r0, r4
 8001628:	4698      	mov	r8, r3
 800162a:	432f      	orrs	r7, r5
 800162c:	4338      	orrs	r0, r7
 800162e:	1a17      	subs	r7, r2, r0
 8001630:	42ba      	cmp	r2, r7
 8001632:	4192      	sbcs	r2, r2
 8001634:	4643      	mov	r3, r8
 8001636:	4252      	negs	r2, r2
 8001638:	1a99      	subs	r1, r3, r2
 800163a:	4664      	mov	r4, ip
 800163c:	0035      	movs	r5, r6
 800163e:	e6ca      	b.n	80013d6 <__aeabi_dadd+0x62>
 8001640:	2207      	movs	r2, #7
 8001642:	403a      	ands	r2, r7
 8001644:	2a00      	cmp	r2, #0
 8001646:	d000      	beq.n	800164a <__aeabi_dadd+0x2d6>
 8001648:	e6f6      	b.n	8001438 <__aeabi_dadd+0xc4>
 800164a:	074b      	lsls	r3, r1, #29
 800164c:	08ca      	lsrs	r2, r1, #3
 800164e:	4948      	ldr	r1, [pc, #288]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001650:	08ff      	lsrs	r7, r7, #3
 8001652:	433b      	orrs	r3, r7
 8001654:	428d      	cmp	r5, r1
 8001656:	d196      	bne.n	8001586 <__aeabi_dadd+0x212>
 8001658:	0019      	movs	r1, r3
 800165a:	4311      	orrs	r1, r2
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x2ec>
 800165e:	e19e      	b.n	800199e <__aeabi_dadd+0x62a>
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0309      	lsls	r1, r1, #12
 8001664:	430a      	orrs	r2, r1
 8001666:	0312      	lsls	r2, r2, #12
 8001668:	0b12      	lsrs	r2, r2, #12
 800166a:	4d41      	ldr	r5, [pc, #260]	; (8001770 <__aeabi_dadd+0x3fc>)
 800166c:	e78f      	b.n	800158e <__aeabi_dadd+0x21a>
 800166e:	0015      	movs	r5, r2
 8001670:	2200      	movs	r2, #0
 8001672:	2300      	movs	r3, #0
 8001674:	e78b      	b.n	800158e <__aeabi_dadd+0x21a>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d000      	beq.n	800167c <__aeabi_dadd+0x308>
 800167a:	e0c7      	b.n	800180c <__aeabi_dadd+0x498>
 800167c:	1c6b      	adds	r3, r5, #1
 800167e:	055f      	lsls	r7, r3, #21
 8001680:	0d7f      	lsrs	r7, r7, #21
 8001682:	2f01      	cmp	r7, #1
 8001684:	dc00      	bgt.n	8001688 <__aeabi_dadd+0x314>
 8001686:	e0f1      	b.n	800186c <__aeabi_dadd+0x4f8>
 8001688:	4d39      	ldr	r5, [pc, #228]	; (8001770 <__aeabi_dadd+0x3fc>)
 800168a:	42ab      	cmp	r3, r5
 800168c:	d100      	bne.n	8001690 <__aeabi_dadd+0x31c>
 800168e:	e0b9      	b.n	8001804 <__aeabi_dadd+0x490>
 8001690:	1885      	adds	r5, r0, r2
 8001692:	000a      	movs	r2, r1
 8001694:	4285      	cmp	r5, r0
 8001696:	4189      	sbcs	r1, r1
 8001698:	4442      	add	r2, r8
 800169a:	4249      	negs	r1, r1
 800169c:	1851      	adds	r1, r2, r1
 800169e:	2207      	movs	r2, #7
 80016a0:	07cf      	lsls	r7, r1, #31
 80016a2:	086d      	lsrs	r5, r5, #1
 80016a4:	432f      	orrs	r7, r5
 80016a6:	0849      	lsrs	r1, r1, #1
 80016a8:	403a      	ands	r2, r7
 80016aa:	001d      	movs	r5, r3
 80016ac:	e6c2      	b.n	8001434 <__aeabi_dadd+0xc0>
 80016ae:	2207      	movs	r2, #7
 80016b0:	4930      	ldr	r1, [pc, #192]	; (8001774 <__aeabi_dadd+0x400>)
 80016b2:	1aed      	subs	r5, r5, r3
 80016b4:	4031      	ands	r1, r6
 80016b6:	403a      	ands	r2, r7
 80016b8:	e6bc      	b.n	8001434 <__aeabi_dadd+0xc0>
 80016ba:	003e      	movs	r6, r7
 80016bc:	3828      	subs	r0, #40	; 0x28
 80016be:	4086      	lsls	r6, r0
 80016c0:	2700      	movs	r7, #0
 80016c2:	e69f      	b.n	8001404 <__aeabi_dadd+0x90>
 80016c4:	0038      	movs	r0, r7
 80016c6:	f001 fbd7 	bl	8002e78 <__clzsi2>
 80016ca:	3020      	adds	r0, #32
 80016cc:	e68e      	b.n	80013ec <__aeabi_dadd+0x78>
 80016ce:	4643      	mov	r3, r8
 80016d0:	4313      	orrs	r3, r2
 80016d2:	001f      	movs	r7, r3
 80016d4:	1e7a      	subs	r2, r7, #1
 80016d6:	4197      	sbcs	r7, r2
 80016d8:	1bc7      	subs	r7, r0, r7
 80016da:	42b8      	cmp	r0, r7
 80016dc:	4180      	sbcs	r0, r0
 80016de:	4240      	negs	r0, r0
 80016e0:	1a09      	subs	r1, r1, r0
 80016e2:	e678      	b.n	80013d6 <__aeabi_dadd+0x62>
 80016e4:	000e      	movs	r6, r1
 80016e6:	003b      	movs	r3, r7
 80016e8:	4306      	orrs	r6, r0
 80016ea:	4313      	orrs	r3, r2
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	d161      	bne.n	80017b4 <__aeabi_dadd+0x440>
 80016f0:	2e00      	cmp	r6, #0
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dadd+0x382>
 80016f4:	e0f4      	b.n	80018e0 <__aeabi_dadd+0x56c>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x388>
 80016fa:	e11b      	b.n	8001934 <__aeabi_dadd+0x5c0>
 80016fc:	4664      	mov	r4, ip
 80016fe:	0039      	movs	r1, r7
 8001700:	0010      	movs	r0, r2
 8001702:	e739      	b.n	8001578 <__aeabi_dadd+0x204>
 8001704:	4f1a      	ldr	r7, [pc, #104]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001706:	42bb      	cmp	r3, r7
 8001708:	d07a      	beq.n	8001800 <__aeabi_dadd+0x48c>
 800170a:	0033      	movs	r3, r6
 800170c:	e6ff      	b.n	800150e <__aeabi_dadd+0x19a>
 800170e:	0030      	movs	r0, r6
 8001710:	3d1f      	subs	r5, #31
 8001712:	40e8      	lsrs	r0, r5
 8001714:	2b20      	cmp	r3, #32
 8001716:	d003      	beq.n	8001720 <__aeabi_dadd+0x3ac>
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	1acb      	subs	r3, r1, r3
 800171c:	409e      	lsls	r6, r3
 800171e:	4337      	orrs	r7, r6
 8001720:	1e7b      	subs	r3, r7, #1
 8001722:	419f      	sbcs	r7, r3
 8001724:	2207      	movs	r2, #7
 8001726:	4307      	orrs	r7, r0
 8001728:	403a      	ands	r2, r7
 800172a:	2100      	movs	r1, #0
 800172c:	2500      	movs	r5, #0
 800172e:	e789      	b.n	8001644 <__aeabi_dadd+0x2d0>
 8001730:	1a17      	subs	r7, r2, r0
 8001732:	4643      	mov	r3, r8
 8001734:	42ba      	cmp	r2, r7
 8001736:	41b6      	sbcs	r6, r6
 8001738:	1a59      	subs	r1, r3, r1
 800173a:	4276      	negs	r6, r6
 800173c:	1b8e      	subs	r6, r1, r6
 800173e:	4664      	mov	r4, ip
 8001740:	e64e      	b.n	80013e0 <__aeabi_dadd+0x6c>
 8001742:	2b1f      	cmp	r3, #31
 8001744:	dd00      	ble.n	8001748 <__aeabi_dadd+0x3d4>
 8001746:	e0ad      	b.n	80018a4 <__aeabi_dadd+0x530>
 8001748:	2620      	movs	r6, #32
 800174a:	4647      	mov	r7, r8
 800174c:	1af6      	subs	r6, r6, r3
 800174e:	40b7      	lsls	r7, r6
 8001750:	46b9      	mov	r9, r7
 8001752:	0017      	movs	r7, r2
 8001754:	46b2      	mov	sl, r6
 8001756:	40df      	lsrs	r7, r3
 8001758:	464e      	mov	r6, r9
 800175a:	433e      	orrs	r6, r7
 800175c:	0037      	movs	r7, r6
 800175e:	4656      	mov	r6, sl
 8001760:	40b2      	lsls	r2, r6
 8001762:	1e56      	subs	r6, r2, #1
 8001764:	41b2      	sbcs	r2, r6
 8001766:	4317      	orrs	r7, r2
 8001768:	4642      	mov	r2, r8
 800176a:	40da      	lsrs	r2, r3
 800176c:	1889      	adds	r1, r1, r2
 800176e:	e6ae      	b.n	80014ce <__aeabi_dadd+0x15a>
 8001770:	000007ff 	.word	0x000007ff
 8001774:	ff7fffff 	.word	0xff7fffff
 8001778:	800fffff 	.word	0x800fffff
 800177c:	2620      	movs	r6, #32
 800177e:	4647      	mov	r7, r8
 8001780:	1af6      	subs	r6, r6, r3
 8001782:	40b7      	lsls	r7, r6
 8001784:	46b9      	mov	r9, r7
 8001786:	0017      	movs	r7, r2
 8001788:	46b2      	mov	sl, r6
 800178a:	40df      	lsrs	r7, r3
 800178c:	464e      	mov	r6, r9
 800178e:	433e      	orrs	r6, r7
 8001790:	0037      	movs	r7, r6
 8001792:	4656      	mov	r6, sl
 8001794:	40b2      	lsls	r2, r6
 8001796:	1e56      	subs	r6, r2, #1
 8001798:	41b2      	sbcs	r2, r6
 800179a:	4317      	orrs	r7, r2
 800179c:	4642      	mov	r2, r8
 800179e:	40da      	lsrs	r2, r3
 80017a0:	1a89      	subs	r1, r1, r2
 80017a2:	e799      	b.n	80016d8 <__aeabi_dadd+0x364>
 80017a4:	4c7f      	ldr	r4, [pc, #508]	; (80019a4 <__aeabi_dadd+0x630>)
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d05b      	beq.n	8001862 <__aeabi_dadd+0x4ee>
 80017aa:	2480      	movs	r4, #128	; 0x80
 80017ac:	0424      	lsls	r4, r4, #16
 80017ae:	425b      	negs	r3, r3
 80017b0:	4321      	orrs	r1, r4
 80017b2:	e727      	b.n	8001604 <__aeabi_dadd+0x290>
 80017b4:	2e00      	cmp	r6, #0
 80017b6:	d10c      	bne.n	80017d2 <__aeabi_dadd+0x45e>
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d100      	bne.n	80017be <__aeabi_dadd+0x44a>
 80017bc:	e0cb      	b.n	8001956 <__aeabi_dadd+0x5e2>
 80017be:	4664      	mov	r4, ip
 80017c0:	0039      	movs	r1, r7
 80017c2:	0010      	movs	r0, r2
 80017c4:	4d77      	ldr	r5, [pc, #476]	; (80019a4 <__aeabi_dadd+0x630>)
 80017c6:	e6d7      	b.n	8001578 <__aeabi_dadd+0x204>
 80017c8:	4f76      	ldr	r7, [pc, #472]	; (80019a4 <__aeabi_dadd+0x630>)
 80017ca:	42bb      	cmp	r3, r7
 80017cc:	d018      	beq.n	8001800 <__aeabi_dadd+0x48c>
 80017ce:	0033      	movs	r3, r6
 80017d0:	e675      	b.n	80014be <__aeabi_dadd+0x14a>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d014      	beq.n	8001800 <__aeabi_dadd+0x48c>
 80017d6:	074b      	lsls	r3, r1, #29
 80017d8:	08c0      	lsrs	r0, r0, #3
 80017da:	4318      	orrs	r0, r3
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	08c9      	lsrs	r1, r1, #3
 80017e0:	031b      	lsls	r3, r3, #12
 80017e2:	4219      	tst	r1, r3
 80017e4:	d007      	beq.n	80017f6 <__aeabi_dadd+0x482>
 80017e6:	08fc      	lsrs	r4, r7, #3
 80017e8:	421c      	tst	r4, r3
 80017ea:	d104      	bne.n	80017f6 <__aeabi_dadd+0x482>
 80017ec:	0779      	lsls	r1, r7, #29
 80017ee:	08d0      	lsrs	r0, r2, #3
 80017f0:	4308      	orrs	r0, r1
 80017f2:	46e1      	mov	r9, ip
 80017f4:	0021      	movs	r1, r4
 80017f6:	464c      	mov	r4, r9
 80017f8:	0f42      	lsrs	r2, r0, #29
 80017fa:	00c9      	lsls	r1, r1, #3
 80017fc:	4311      	orrs	r1, r2
 80017fe:	00c0      	lsls	r0, r0, #3
 8001800:	4d68      	ldr	r5, [pc, #416]	; (80019a4 <__aeabi_dadd+0x630>)
 8001802:	e6b9      	b.n	8001578 <__aeabi_dadd+0x204>
 8001804:	001d      	movs	r5, r3
 8001806:	2200      	movs	r2, #0
 8001808:	2300      	movs	r3, #0
 800180a:	e6c0      	b.n	800158e <__aeabi_dadd+0x21a>
 800180c:	2d00      	cmp	r5, #0
 800180e:	d15b      	bne.n	80018c8 <__aeabi_dadd+0x554>
 8001810:	000d      	movs	r5, r1
 8001812:	4305      	orrs	r5, r0
 8001814:	d100      	bne.n	8001818 <__aeabi_dadd+0x4a4>
 8001816:	e6e2      	b.n	80015de <__aeabi_dadd+0x26a>
 8001818:	1c5d      	adds	r5, r3, #1
 800181a:	d100      	bne.n	800181e <__aeabi_dadd+0x4aa>
 800181c:	e0b0      	b.n	8001980 <__aeabi_dadd+0x60c>
 800181e:	4d61      	ldr	r5, [pc, #388]	; (80019a4 <__aeabi_dadd+0x630>)
 8001820:	42ae      	cmp	r6, r5
 8001822:	d01f      	beq.n	8001864 <__aeabi_dadd+0x4f0>
 8001824:	43db      	mvns	r3, r3
 8001826:	2b38      	cmp	r3, #56	; 0x38
 8001828:	dc71      	bgt.n	800190e <__aeabi_dadd+0x59a>
 800182a:	2b1f      	cmp	r3, #31
 800182c:	dd00      	ble.n	8001830 <__aeabi_dadd+0x4bc>
 800182e:	e096      	b.n	800195e <__aeabi_dadd+0x5ea>
 8001830:	2520      	movs	r5, #32
 8001832:	000f      	movs	r7, r1
 8001834:	1aed      	subs	r5, r5, r3
 8001836:	40af      	lsls	r7, r5
 8001838:	46b9      	mov	r9, r7
 800183a:	0007      	movs	r7, r0
 800183c:	46aa      	mov	sl, r5
 800183e:	40df      	lsrs	r7, r3
 8001840:	464d      	mov	r5, r9
 8001842:	433d      	orrs	r5, r7
 8001844:	002f      	movs	r7, r5
 8001846:	4655      	mov	r5, sl
 8001848:	40a8      	lsls	r0, r5
 800184a:	40d9      	lsrs	r1, r3
 800184c:	1e45      	subs	r5, r0, #1
 800184e:	41a8      	sbcs	r0, r5
 8001850:	4488      	add	r8, r1
 8001852:	4307      	orrs	r7, r0
 8001854:	18bf      	adds	r7, r7, r2
 8001856:	4297      	cmp	r7, r2
 8001858:	4192      	sbcs	r2, r2
 800185a:	4251      	negs	r1, r2
 800185c:	4441      	add	r1, r8
 800185e:	0035      	movs	r5, r6
 8001860:	e63a      	b.n	80014d8 <__aeabi_dadd+0x164>
 8001862:	4664      	mov	r4, ip
 8001864:	0035      	movs	r5, r6
 8001866:	4641      	mov	r1, r8
 8001868:	0010      	movs	r0, r2
 800186a:	e685      	b.n	8001578 <__aeabi_dadd+0x204>
 800186c:	000b      	movs	r3, r1
 800186e:	4303      	orrs	r3, r0
 8001870:	2d00      	cmp	r5, #0
 8001872:	d000      	beq.n	8001876 <__aeabi_dadd+0x502>
 8001874:	e663      	b.n	800153e <__aeabi_dadd+0x1ca>
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f5      	beq.n	8001866 <__aeabi_dadd+0x4f2>
 800187a:	4643      	mov	r3, r8
 800187c:	4313      	orrs	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_dadd+0x50e>
 8001880:	e67a      	b.n	8001578 <__aeabi_dadd+0x204>
 8001882:	1887      	adds	r7, r0, r2
 8001884:	4287      	cmp	r7, r0
 8001886:	4180      	sbcs	r0, r0
 8001888:	2207      	movs	r2, #7
 800188a:	4441      	add	r1, r8
 800188c:	4240      	negs	r0, r0
 800188e:	1809      	adds	r1, r1, r0
 8001890:	403a      	ands	r2, r7
 8001892:	020b      	lsls	r3, r1, #8
 8001894:	d400      	bmi.n	8001898 <__aeabi_dadd+0x524>
 8001896:	e6d5      	b.n	8001644 <__aeabi_dadd+0x2d0>
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <__aeabi_dadd+0x634>)
 800189a:	3501      	adds	r5, #1
 800189c:	4019      	ands	r1, r3
 800189e:	e5c9      	b.n	8001434 <__aeabi_dadd+0xc0>
 80018a0:	0038      	movs	r0, r7
 80018a2:	e669      	b.n	8001578 <__aeabi_dadd+0x204>
 80018a4:	001e      	movs	r6, r3
 80018a6:	4647      	mov	r7, r8
 80018a8:	3e20      	subs	r6, #32
 80018aa:	40f7      	lsrs	r7, r6
 80018ac:	46bc      	mov	ip, r7
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d004      	beq.n	80018bc <__aeabi_dadd+0x548>
 80018b2:	2640      	movs	r6, #64	; 0x40
 80018b4:	1af3      	subs	r3, r6, r3
 80018b6:	4646      	mov	r6, r8
 80018b8:	409e      	lsls	r6, r3
 80018ba:	4332      	orrs	r2, r6
 80018bc:	0017      	movs	r7, r2
 80018be:	4663      	mov	r3, ip
 80018c0:	1e7a      	subs	r2, r7, #1
 80018c2:	4197      	sbcs	r7, r2
 80018c4:	431f      	orrs	r7, r3
 80018c6:	e602      	b.n	80014ce <__aeabi_dadd+0x15a>
 80018c8:	4d36      	ldr	r5, [pc, #216]	; (80019a4 <__aeabi_dadd+0x630>)
 80018ca:	42ae      	cmp	r6, r5
 80018cc:	d0ca      	beq.n	8001864 <__aeabi_dadd+0x4f0>
 80018ce:	2580      	movs	r5, #128	; 0x80
 80018d0:	042d      	lsls	r5, r5, #16
 80018d2:	425b      	negs	r3, r3
 80018d4:	4329      	orrs	r1, r5
 80018d6:	e7a6      	b.n	8001826 <__aeabi_dadd+0x4b2>
 80018d8:	4308      	orrs	r0, r1
 80018da:	1e41      	subs	r1, r0, #1
 80018dc:	4188      	sbcs	r0, r1
 80018de:	e6a6      	b.n	800162e <__aeabi_dadd+0x2ba>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x572>
 80018e4:	e648      	b.n	8001578 <__aeabi_dadd+0x204>
 80018e6:	1a87      	subs	r7, r0, r2
 80018e8:	4643      	mov	r3, r8
 80018ea:	42b8      	cmp	r0, r7
 80018ec:	41b6      	sbcs	r6, r6
 80018ee:	1acb      	subs	r3, r1, r3
 80018f0:	4276      	negs	r6, r6
 80018f2:	1b9e      	subs	r6, r3, r6
 80018f4:	0233      	lsls	r3, r6, #8
 80018f6:	d54b      	bpl.n	8001990 <__aeabi_dadd+0x61c>
 80018f8:	1a17      	subs	r7, r2, r0
 80018fa:	4643      	mov	r3, r8
 80018fc:	42ba      	cmp	r2, r7
 80018fe:	4192      	sbcs	r2, r2
 8001900:	1a59      	subs	r1, r3, r1
 8001902:	4252      	negs	r2, r2
 8001904:	1a89      	subs	r1, r1, r2
 8001906:	2207      	movs	r2, #7
 8001908:	4664      	mov	r4, ip
 800190a:	403a      	ands	r2, r7
 800190c:	e592      	b.n	8001434 <__aeabi_dadd+0xc0>
 800190e:	4301      	orrs	r1, r0
 8001910:	000f      	movs	r7, r1
 8001912:	1e79      	subs	r1, r7, #1
 8001914:	418f      	sbcs	r7, r1
 8001916:	e79d      	b.n	8001854 <__aeabi_dadd+0x4e0>
 8001918:	001c      	movs	r4, r3
 800191a:	000f      	movs	r7, r1
 800191c:	3c20      	subs	r4, #32
 800191e:	40e7      	lsrs	r7, r4
 8001920:	2b20      	cmp	r3, #32
 8001922:	d003      	beq.n	800192c <__aeabi_dadd+0x5b8>
 8001924:	2440      	movs	r4, #64	; 0x40
 8001926:	1ae3      	subs	r3, r4, r3
 8001928:	4099      	lsls	r1, r3
 800192a:	4308      	orrs	r0, r1
 800192c:	1e41      	subs	r1, r0, #1
 800192e:	4188      	sbcs	r0, r1
 8001930:	4338      	orrs	r0, r7
 8001932:	e67c      	b.n	800162e <__aeabi_dadd+0x2ba>
 8001934:	2200      	movs	r2, #0
 8001936:	2400      	movs	r4, #0
 8001938:	e625      	b.n	8001586 <__aeabi_dadd+0x212>
 800193a:	1a17      	subs	r7, r2, r0
 800193c:	4643      	mov	r3, r8
 800193e:	42ba      	cmp	r2, r7
 8001940:	4192      	sbcs	r2, r2
 8001942:	1a59      	subs	r1, r3, r1
 8001944:	4252      	negs	r2, r2
 8001946:	1a89      	subs	r1, r1, r2
 8001948:	4664      	mov	r4, ip
 800194a:	0035      	movs	r5, r6
 800194c:	e543      	b.n	80013d6 <__aeabi_dadd+0x62>
 800194e:	4641      	mov	r1, r8
 8001950:	0010      	movs	r0, r2
 8001952:	4d14      	ldr	r5, [pc, #80]	; (80019a4 <__aeabi_dadd+0x630>)
 8001954:	e610      	b.n	8001578 <__aeabi_dadd+0x204>
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	2400      	movs	r4, #0
 800195a:	0312      	lsls	r2, r2, #12
 800195c:	e680      	b.n	8001660 <__aeabi_dadd+0x2ec>
 800195e:	001d      	movs	r5, r3
 8001960:	000f      	movs	r7, r1
 8001962:	3d20      	subs	r5, #32
 8001964:	40ef      	lsrs	r7, r5
 8001966:	46bc      	mov	ip, r7
 8001968:	2b20      	cmp	r3, #32
 800196a:	d003      	beq.n	8001974 <__aeabi_dadd+0x600>
 800196c:	2540      	movs	r5, #64	; 0x40
 800196e:	1aeb      	subs	r3, r5, r3
 8001970:	4099      	lsls	r1, r3
 8001972:	4308      	orrs	r0, r1
 8001974:	0007      	movs	r7, r0
 8001976:	4663      	mov	r3, ip
 8001978:	1e78      	subs	r0, r7, #1
 800197a:	4187      	sbcs	r7, r0
 800197c:	431f      	orrs	r7, r3
 800197e:	e769      	b.n	8001854 <__aeabi_dadd+0x4e0>
 8001980:	1887      	adds	r7, r0, r2
 8001982:	4297      	cmp	r7, r2
 8001984:	419b      	sbcs	r3, r3
 8001986:	4441      	add	r1, r8
 8001988:	425b      	negs	r3, r3
 800198a:	18c9      	adds	r1, r1, r3
 800198c:	0035      	movs	r5, r6
 800198e:	e5a3      	b.n	80014d8 <__aeabi_dadd+0x164>
 8001990:	003b      	movs	r3, r7
 8001992:	4333      	orrs	r3, r6
 8001994:	d0ce      	beq.n	8001934 <__aeabi_dadd+0x5c0>
 8001996:	2207      	movs	r2, #7
 8001998:	0031      	movs	r1, r6
 800199a:	403a      	ands	r2, r7
 800199c:	e652      	b.n	8001644 <__aeabi_dadd+0x2d0>
 800199e:	2300      	movs	r3, #0
 80019a0:	001a      	movs	r2, r3
 80019a2:	e5f4      	b.n	800158e <__aeabi_dadd+0x21a>
 80019a4:	000007ff 	.word	0x000007ff
 80019a8:	ff7fffff 	.word	0xff7fffff

080019ac <__aeabi_ddiv>:
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	4657      	mov	r7, sl
 80019b0:	46de      	mov	lr, fp
 80019b2:	464e      	mov	r6, r9
 80019b4:	4645      	mov	r5, r8
 80019b6:	b5e0      	push	{r5, r6, r7, lr}
 80019b8:	4683      	mov	fp, r0
 80019ba:	0007      	movs	r7, r0
 80019bc:	030e      	lsls	r6, r1, #12
 80019be:	0048      	lsls	r0, r1, #1
 80019c0:	b085      	sub	sp, #20
 80019c2:	4692      	mov	sl, r2
 80019c4:	001c      	movs	r4, r3
 80019c6:	0b36      	lsrs	r6, r6, #12
 80019c8:	0d40      	lsrs	r0, r0, #21
 80019ca:	0fcd      	lsrs	r5, r1, #31
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0x26>
 80019d0:	e09d      	b.n	8001b0e <__aeabi_ddiv+0x162>
 80019d2:	4b95      	ldr	r3, [pc, #596]	; (8001c28 <__aeabi_ddiv+0x27c>)
 80019d4:	4298      	cmp	r0, r3
 80019d6:	d039      	beq.n	8001a4c <__aeabi_ddiv+0xa0>
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	00f6      	lsls	r6, r6, #3
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	431e      	orrs	r6, r3
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <__aeabi_ddiv+0x280>)
 80019e2:	0f7b      	lsrs	r3, r7, #29
 80019e4:	4333      	orrs	r3, r6
 80019e6:	4699      	mov	r9, r3
 80019e8:	4694      	mov	ip, r2
 80019ea:	0003      	movs	r3, r0
 80019ec:	4463      	add	r3, ip
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	2600      	movs	r6, #0
 80019f4:	00ff      	lsls	r7, r7, #3
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	0323      	lsls	r3, r4, #12
 80019fa:	0b1b      	lsrs	r3, r3, #12
 80019fc:	4698      	mov	r8, r3
 80019fe:	0063      	lsls	r3, r4, #1
 8001a00:	0fe4      	lsrs	r4, r4, #31
 8001a02:	4652      	mov	r2, sl
 8001a04:	0d5b      	lsrs	r3, r3, #21
 8001a06:	9401      	str	r4, [sp, #4]
 8001a08:	d100      	bne.n	8001a0c <__aeabi_ddiv+0x60>
 8001a0a:	e0b3      	b.n	8001b74 <__aeabi_ddiv+0x1c8>
 8001a0c:	4986      	ldr	r1, [pc, #536]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001a0e:	428b      	cmp	r3, r1
 8001a10:	d100      	bne.n	8001a14 <__aeabi_ddiv+0x68>
 8001a12:	e09e      	b.n	8001b52 <__aeabi_ddiv+0x1a6>
 8001a14:	4642      	mov	r2, r8
 8001a16:	00d1      	lsls	r1, r2, #3
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0412      	lsls	r2, r2, #16
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4651      	mov	r1, sl
 8001a20:	0f49      	lsrs	r1, r1, #29
 8001a22:	4311      	orrs	r1, r2
 8001a24:	468b      	mov	fp, r1
 8001a26:	4981      	ldr	r1, [pc, #516]	; (8001c2c <__aeabi_ddiv+0x280>)
 8001a28:	4652      	mov	r2, sl
 8001a2a:	468c      	mov	ip, r1
 8001a2c:	9900      	ldr	r1, [sp, #0]
 8001a2e:	4463      	add	r3, ip
 8001a30:	1acb      	subs	r3, r1, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	00d2      	lsls	r2, r2, #3
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	002b      	movs	r3, r5
 8001a3a:	4063      	eors	r3, r4
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	2e0f      	cmp	r6, #15
 8001a40:	d900      	bls.n	8001a44 <__aeabi_ddiv+0x98>
 8001a42:	e105      	b.n	8001c50 <__aeabi_ddiv+0x2a4>
 8001a44:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <__aeabi_ddiv+0x284>)
 8001a46:	00b6      	lsls	r6, r6, #2
 8001a48:	599b      	ldr	r3, [r3, r6]
 8001a4a:	469f      	mov	pc, r3
 8001a4c:	465b      	mov	r3, fp
 8001a4e:	4333      	orrs	r3, r6
 8001a50:	4699      	mov	r9, r3
 8001a52:	d000      	beq.n	8001a56 <__aeabi_ddiv+0xaa>
 8001a54:	e0b8      	b.n	8001bc8 <__aeabi_ddiv+0x21c>
 8001a56:	2302      	movs	r3, #2
 8001a58:	2608      	movs	r6, #8
 8001a5a:	2700      	movs	r7, #0
 8001a5c:	9000      	str	r0, [sp, #0]
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	e7ca      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001a62:	46cb      	mov	fp, r9
 8001a64:	003a      	movs	r2, r7
 8001a66:	9902      	ldr	r1, [sp, #8]
 8001a68:	9501      	str	r5, [sp, #4]
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	2902      	cmp	r1, #2
 8001a70:	d027      	beq.n	8001ac2 <__aeabi_ddiv+0x116>
 8001a72:	2903      	cmp	r1, #3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_ddiv+0xcc>
 8001a76:	e280      	b.n	8001f7a <__aeabi_ddiv+0x5ce>
 8001a78:	2901      	cmp	r1, #1
 8001a7a:	d044      	beq.n	8001b06 <__aeabi_ddiv+0x15a>
 8001a7c:	496d      	ldr	r1, [pc, #436]	; (8001c34 <__aeabi_ddiv+0x288>)
 8001a7e:	9b00      	ldr	r3, [sp, #0]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4463      	add	r3, ip
 8001a84:	001c      	movs	r4, r3
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	dd38      	ble.n	8001afc <__aeabi_ddiv+0x150>
 8001a8a:	0753      	lsls	r3, r2, #29
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_ddiv+0xe4>
 8001a8e:	e213      	b.n	8001eb8 <__aeabi_ddiv+0x50c>
 8001a90:	08d2      	lsrs	r2, r2, #3
 8001a92:	465b      	mov	r3, fp
 8001a94:	01db      	lsls	r3, r3, #7
 8001a96:	d509      	bpl.n	8001aac <__aeabi_ddiv+0x100>
 8001a98:	4659      	mov	r1, fp
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <__aeabi_ddiv+0x28c>)
 8001a9c:	4019      	ands	r1, r3
 8001a9e:	468b      	mov	fp, r1
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	468c      	mov	ip, r1
 8001aa6:	9b00      	ldr	r3, [sp, #0]
 8001aa8:	4463      	add	r3, ip
 8001aaa:	001c      	movs	r4, r3
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <__aeabi_ddiv+0x290>)
 8001aae:	429c      	cmp	r4, r3
 8001ab0:	dc07      	bgt.n	8001ac2 <__aeabi_ddiv+0x116>
 8001ab2:	465b      	mov	r3, fp
 8001ab4:	0564      	lsls	r4, r4, #21
 8001ab6:	075f      	lsls	r7, r3, #29
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	4317      	orrs	r7, r2
 8001abc:	0b1b      	lsrs	r3, r3, #12
 8001abe:	0d62      	lsrs	r2, r4, #21
 8001ac0:	e002      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2700      	movs	r7, #0
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	031b      	lsls	r3, r3, #12
 8001acc:	0b1c      	lsrs	r4, r3, #12
 8001ace:	0d0b      	lsrs	r3, r1, #20
 8001ad0:	051b      	lsls	r3, r3, #20
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	0514      	lsls	r4, r2, #20
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	; (8001c40 <__aeabi_ddiv+0x294>)
 8001ad8:	0038      	movs	r0, r7
 8001ada:	4013      	ands	r3, r2
 8001adc:	431c      	orrs	r4, r3
 8001ade:	4653      	mov	r3, sl
 8001ae0:	0064      	lsls	r4, r4, #1
 8001ae2:	07db      	lsls	r3, r3, #31
 8001ae4:	0864      	lsrs	r4, r4, #1
 8001ae6:	431c      	orrs	r4, r3
 8001ae8:	0021      	movs	r1, r4
 8001aea:	b005      	add	sp, #20
 8001aec:	bc3c      	pop	{r2, r3, r4, r5}
 8001aee:	4690      	mov	r8, r2
 8001af0:	4699      	mov	r9, r3
 8001af2:	46a2      	mov	sl, r4
 8001af4:	46ab      	mov	fp, r5
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	2201      	movs	r2, #1
 8001afa:	4252      	negs	r2, r2
 8001afc:	2301      	movs	r3, #1
 8001afe:	1b1b      	subs	r3, r3, r4
 8001b00:	2b38      	cmp	r3, #56	; 0x38
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_ddiv+0x15a>
 8001b04:	e1ad      	b.n	8001e62 <__aeabi_ddiv+0x4b6>
 8001b06:	2200      	movs	r2, #0
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2700      	movs	r7, #0
 8001b0c:	e7dc      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001b0e:	465b      	mov	r3, fp
 8001b10:	4333      	orrs	r3, r6
 8001b12:	4699      	mov	r9, r3
 8001b14:	d05e      	beq.n	8001bd4 <__aeabi_ddiv+0x228>
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x170>
 8001b1a:	e18a      	b.n	8001e32 <__aeabi_ddiv+0x486>
 8001b1c:	0030      	movs	r0, r6
 8001b1e:	f001 f9ab 	bl	8002e78 <__clzsi2>
 8001b22:	0003      	movs	r3, r0
 8001b24:	3b0b      	subs	r3, #11
 8001b26:	2b1c      	cmp	r3, #28
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_ddiv+0x180>
 8001b2a:	e17b      	b.n	8001e24 <__aeabi_ddiv+0x478>
 8001b2c:	221d      	movs	r2, #29
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	465a      	mov	r2, fp
 8001b32:	0001      	movs	r1, r0
 8001b34:	40da      	lsrs	r2, r3
 8001b36:	3908      	subs	r1, #8
 8001b38:	408e      	lsls	r6, r1
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	465f      	mov	r7, fp
 8001b3e:	4333      	orrs	r3, r6
 8001b40:	4699      	mov	r9, r3
 8001b42:	408f      	lsls	r7, r1
 8001b44:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <__aeabi_ddiv+0x298>)
 8001b46:	2600      	movs	r6, #0
 8001b48:	1a1b      	subs	r3, r3, r0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	e752      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001b52:	4641      	mov	r1, r8
 8001b54:	4653      	mov	r3, sl
 8001b56:	430b      	orrs	r3, r1
 8001b58:	493b      	ldr	r1, [pc, #236]	; (8001c48 <__aeabi_ddiv+0x29c>)
 8001b5a:	469b      	mov	fp, r3
 8001b5c:	468c      	mov	ip, r1
 8001b5e:	9b00      	ldr	r3, [sp, #0]
 8001b60:	4463      	add	r3, ip
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	465b      	mov	r3, fp
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d13b      	bne.n	8001be2 <__aeabi_ddiv+0x236>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	431e      	orrs	r6, r3
 8001b70:	2102      	movs	r1, #2
 8001b72:	e761      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001b74:	4643      	mov	r3, r8
 8001b76:	4313      	orrs	r3, r2
 8001b78:	469b      	mov	fp, r3
 8001b7a:	d037      	beq.n	8001bec <__aeabi_ddiv+0x240>
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d100      	bne.n	8001b84 <__aeabi_ddiv+0x1d8>
 8001b82:	e162      	b.n	8001e4a <__aeabi_ddiv+0x49e>
 8001b84:	4640      	mov	r0, r8
 8001b86:	f001 f977 	bl	8002e78 <__clzsi2>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	3b0b      	subs	r3, #11
 8001b8e:	2b1c      	cmp	r3, #28
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_ddiv+0x1e8>
 8001b92:	e153      	b.n	8001e3c <__aeabi_ddiv+0x490>
 8001b94:	0002      	movs	r2, r0
 8001b96:	4641      	mov	r1, r8
 8001b98:	3a08      	subs	r2, #8
 8001b9a:	4091      	lsls	r1, r2
 8001b9c:	4688      	mov	r8, r1
 8001b9e:	211d      	movs	r1, #29
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	40d9      	lsrs	r1, r3
 8001ba6:	000b      	movs	r3, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	430b      	orrs	r3, r1
 8001bac:	469b      	mov	fp, r3
 8001bae:	4653      	mov	r3, sl
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	9b00      	ldr	r3, [sp, #0]
 8001bb6:	4925      	ldr	r1, [pc, #148]	; (8001c4c <__aeabi_ddiv+0x2a0>)
 8001bb8:	469c      	mov	ip, r3
 8001bba:	4460      	add	r0, ip
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	468c      	mov	ip, r1
 8001bc0:	4463      	add	r3, ip
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	e737      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001bc8:	2303      	movs	r3, #3
 8001bca:	46b1      	mov	r9, r6
 8001bcc:	9000      	str	r0, [sp, #0]
 8001bce:	260c      	movs	r6, #12
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	e711      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	2604      	movs	r6, #4
 8001bdc:	2700      	movs	r7, #0
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	e70a      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001be2:	2303      	movs	r3, #3
 8001be4:	46c3      	mov	fp, r8
 8001be6:	431e      	orrs	r6, r3
 8001be8:	2103      	movs	r1, #3
 8001bea:	e725      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001bec:	3301      	adds	r3, #1
 8001bee:	431e      	orrs	r6, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	e720      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	469a      	mov	sl, r3
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	2700      	movs	r7, #0
 8001bfe:	031b      	lsls	r3, r3, #12
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001c02:	e761      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	4649      	mov	r1, r9
 8001c08:	031b      	lsls	r3, r3, #12
 8001c0a:	4219      	tst	r1, r3
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x264>
 8001c0e:	e0e2      	b.n	8001dd6 <__aeabi_ddiv+0x42a>
 8001c10:	4659      	mov	r1, fp
 8001c12:	4219      	tst	r1, r3
 8001c14:	d000      	beq.n	8001c18 <__aeabi_ddiv+0x26c>
 8001c16:	e0de      	b.n	8001dd6 <__aeabi_ddiv+0x42a>
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	031b      	lsls	r3, r3, #12
 8001c1c:	0017      	movs	r7, r2
 8001c1e:	0b1b      	lsrs	r3, r3, #12
 8001c20:	46a2      	mov	sl, r4
 8001c22:	4a01      	ldr	r2, [pc, #4]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001c24:	e750      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	000007ff 	.word	0x000007ff
 8001c2c:	fffffc01 	.word	0xfffffc01
 8001c30:	08009ad0 	.word	0x08009ad0
 8001c34:	000003ff 	.word	0x000003ff
 8001c38:	feffffff 	.word	0xfeffffff
 8001c3c:	000007fe 	.word	0x000007fe
 8001c40:	800fffff 	.word	0x800fffff
 8001c44:	fffffc0d 	.word	0xfffffc0d
 8001c48:	fffff801 	.word	0xfffff801
 8001c4c:	000003f3 	.word	0x000003f3
 8001c50:	45d9      	cmp	r9, fp
 8001c52:	d900      	bls.n	8001c56 <__aeabi_ddiv+0x2aa>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_ddiv+0x442>
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x2ae>
 8001c58:	e0c6      	b.n	8001de8 <__aeabi_ddiv+0x43c>
 8001c5a:	003c      	movs	r4, r7
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	2700      	movs	r7, #0
 8001c60:	9b00      	ldr	r3, [sp, #0]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	465b      	mov	r3, fp
 8001c68:	0e16      	lsrs	r6, r2, #24
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	431e      	orrs	r6, r3
 8001c6e:	0213      	lsls	r3, r2, #8
 8001c70:	4698      	mov	r8, r3
 8001c72:	0433      	lsls	r3, r6, #16
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	4699      	mov	r9, r3
 8001c78:	0c31      	lsrs	r1, r6, #16
 8001c7a:	9101      	str	r1, [sp, #4]
 8001c7c:	f7fe faca 	bl	8000214 <__aeabi_uidivmod>
 8001c80:	464a      	mov	r2, r9
 8001c82:	4342      	muls	r2, r0
 8001c84:	040b      	lsls	r3, r1, #16
 8001c86:	0c21      	lsrs	r1, r4, #16
 8001c88:	0005      	movs	r5, r0
 8001c8a:	4319      	orrs	r1, r3
 8001c8c:	428a      	cmp	r2, r1
 8001c8e:	d907      	bls.n	8001ca0 <__aeabi_ddiv+0x2f4>
 8001c90:	1989      	adds	r1, r1, r6
 8001c92:	3d01      	subs	r5, #1
 8001c94:	428e      	cmp	r6, r1
 8001c96:	d803      	bhi.n	8001ca0 <__aeabi_ddiv+0x2f4>
 8001c98:	428a      	cmp	r2, r1
 8001c9a:	d901      	bls.n	8001ca0 <__aeabi_ddiv+0x2f4>
 8001c9c:	1e85      	subs	r5, r0, #2
 8001c9e:	1989      	adds	r1, r1, r6
 8001ca0:	1a88      	subs	r0, r1, r2
 8001ca2:	9901      	ldr	r1, [sp, #4]
 8001ca4:	f7fe fab6 	bl	8000214 <__aeabi_uidivmod>
 8001ca8:	0409      	lsls	r1, r1, #16
 8001caa:	468c      	mov	ip, r1
 8001cac:	464a      	mov	r2, r9
 8001cae:	0421      	lsls	r1, r4, #16
 8001cb0:	4664      	mov	r4, ip
 8001cb2:	4342      	muls	r2, r0
 8001cb4:	0c09      	lsrs	r1, r1, #16
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	4321      	orrs	r1, r4
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	d904      	bls.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001cbe:	1989      	adds	r1, r1, r6
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	428e      	cmp	r6, r1
 8001cc4:	d800      	bhi.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001cc6:	e0f1      	b.n	8001eac <__aeabi_ddiv+0x500>
 8001cc8:	042d      	lsls	r5, r5, #16
 8001cca:	431d      	orrs	r5, r3
 8001ccc:	46ab      	mov	fp, r5
 8001cce:	4643      	mov	r3, r8
 8001cd0:	1a89      	subs	r1, r1, r2
 8001cd2:	4642      	mov	r2, r8
 8001cd4:	0c28      	lsrs	r0, r5, #16
 8001cd6:	0412      	lsls	r2, r2, #16
 8001cd8:	0c1d      	lsrs	r5, r3, #16
 8001cda:	465b      	mov	r3, fp
 8001cdc:	0c14      	lsrs	r4, r2, #16
 8001cde:	0022      	movs	r2, r4
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	435a      	muls	r2, r3
 8001ce6:	9403      	str	r4, [sp, #12]
 8001ce8:	436b      	muls	r3, r5
 8001cea:	4344      	muls	r4, r0
 8001cec:	9502      	str	r5, [sp, #8]
 8001cee:	4368      	muls	r0, r5
 8001cf0:	191b      	adds	r3, r3, r4
 8001cf2:	0c15      	lsrs	r5, r2, #16
 8001cf4:	18eb      	adds	r3, r5, r3
 8001cf6:	429c      	cmp	r4, r3
 8001cf8:	d903      	bls.n	8001d02 <__aeabi_ddiv+0x356>
 8001cfa:	2480      	movs	r4, #128	; 0x80
 8001cfc:	0264      	lsls	r4, r4, #9
 8001cfe:	46a4      	mov	ip, r4
 8001d00:	4460      	add	r0, ip
 8001d02:	0c1c      	lsrs	r4, r3, #16
 8001d04:	0415      	lsls	r5, r2, #16
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	0c2d      	lsrs	r5, r5, #16
 8001d0a:	1820      	adds	r0, r4, r0
 8001d0c:	195d      	adds	r5, r3, r5
 8001d0e:	4281      	cmp	r1, r0
 8001d10:	d377      	bcc.n	8001e02 <__aeabi_ddiv+0x456>
 8001d12:	d073      	beq.n	8001dfc <__aeabi_ddiv+0x450>
 8001d14:	1a0c      	subs	r4, r1, r0
 8001d16:	4aa2      	ldr	r2, [pc, #648]	; (8001fa0 <__aeabi_ddiv+0x5f4>)
 8001d18:	1b7d      	subs	r5, r7, r5
 8001d1a:	42af      	cmp	r7, r5
 8001d1c:	41bf      	sbcs	r7, r7
 8001d1e:	4694      	mov	ip, r2
 8001d20:	9b00      	ldr	r3, [sp, #0]
 8001d22:	427f      	negs	r7, r7
 8001d24:	4463      	add	r3, ip
 8001d26:	1be0      	subs	r0, r4, r7
 8001d28:	001c      	movs	r4, r3
 8001d2a:	4286      	cmp	r6, r0
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x384>
 8001d2e:	e0db      	b.n	8001ee8 <__aeabi_ddiv+0x53c>
 8001d30:	9901      	ldr	r1, [sp, #4]
 8001d32:	f7fe fa6f 	bl	8000214 <__aeabi_uidivmod>
 8001d36:	464a      	mov	r2, r9
 8001d38:	4342      	muls	r2, r0
 8001d3a:	040b      	lsls	r3, r1, #16
 8001d3c:	0c29      	lsrs	r1, r5, #16
 8001d3e:	0007      	movs	r7, r0
 8001d40:	4319      	orrs	r1, r3
 8001d42:	428a      	cmp	r2, r1
 8001d44:	d907      	bls.n	8001d56 <__aeabi_ddiv+0x3aa>
 8001d46:	1989      	adds	r1, r1, r6
 8001d48:	3f01      	subs	r7, #1
 8001d4a:	428e      	cmp	r6, r1
 8001d4c:	d803      	bhi.n	8001d56 <__aeabi_ddiv+0x3aa>
 8001d4e:	428a      	cmp	r2, r1
 8001d50:	d901      	bls.n	8001d56 <__aeabi_ddiv+0x3aa>
 8001d52:	1e87      	subs	r7, r0, #2
 8001d54:	1989      	adds	r1, r1, r6
 8001d56:	1a88      	subs	r0, r1, r2
 8001d58:	9901      	ldr	r1, [sp, #4]
 8001d5a:	f7fe fa5b 	bl	8000214 <__aeabi_uidivmod>
 8001d5e:	0409      	lsls	r1, r1, #16
 8001d60:	464a      	mov	r2, r9
 8001d62:	4689      	mov	r9, r1
 8001d64:	0429      	lsls	r1, r5, #16
 8001d66:	464d      	mov	r5, r9
 8001d68:	4342      	muls	r2, r0
 8001d6a:	0c09      	lsrs	r1, r1, #16
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	4329      	orrs	r1, r5
 8001d70:	428a      	cmp	r2, r1
 8001d72:	d907      	bls.n	8001d84 <__aeabi_ddiv+0x3d8>
 8001d74:	1989      	adds	r1, r1, r6
 8001d76:	3b01      	subs	r3, #1
 8001d78:	428e      	cmp	r6, r1
 8001d7a:	d803      	bhi.n	8001d84 <__aeabi_ddiv+0x3d8>
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	d901      	bls.n	8001d84 <__aeabi_ddiv+0x3d8>
 8001d80:	1e83      	subs	r3, r0, #2
 8001d82:	1989      	adds	r1, r1, r6
 8001d84:	043f      	lsls	r7, r7, #16
 8001d86:	1a89      	subs	r1, r1, r2
 8001d88:	003a      	movs	r2, r7
 8001d8a:	9f03      	ldr	r7, [sp, #12]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	0038      	movs	r0, r7
 8001d90:	0413      	lsls	r3, r2, #16
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	4358      	muls	r0, r3
 8001d96:	4681      	mov	r9, r0
 8001d98:	9802      	ldr	r0, [sp, #8]
 8001d9a:	0c15      	lsrs	r5, r2, #16
 8001d9c:	436f      	muls	r7, r5
 8001d9e:	4343      	muls	r3, r0
 8001da0:	4345      	muls	r5, r0
 8001da2:	4648      	mov	r0, r9
 8001da4:	0c00      	lsrs	r0, r0, #16
 8001da6:	4684      	mov	ip, r0
 8001da8:	19db      	adds	r3, r3, r7
 8001daa:	4463      	add	r3, ip
 8001dac:	429f      	cmp	r7, r3
 8001dae:	d903      	bls.n	8001db8 <__aeabi_ddiv+0x40c>
 8001db0:	2080      	movs	r0, #128	; 0x80
 8001db2:	0240      	lsls	r0, r0, #9
 8001db4:	4684      	mov	ip, r0
 8001db6:	4465      	add	r5, ip
 8001db8:	4648      	mov	r0, r9
 8001dba:	0c1f      	lsrs	r7, r3, #16
 8001dbc:	0400      	lsls	r0, r0, #16
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	0c00      	lsrs	r0, r0, #16
 8001dc2:	197d      	adds	r5, r7, r5
 8001dc4:	1818      	adds	r0, r3, r0
 8001dc6:	42a9      	cmp	r1, r5
 8001dc8:	d200      	bcs.n	8001dcc <__aeabi_ddiv+0x420>
 8001dca:	e084      	b.n	8001ed6 <__aeabi_ddiv+0x52a>
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_ddiv+0x424>
 8001dce:	e07f      	b.n	8001ed0 <__aeabi_ddiv+0x524>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	e657      	b.n	8001a86 <__aeabi_ddiv+0xda>
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	464a      	mov	r2, r9
 8001dda:	031b      	lsls	r3, r3, #12
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	031b      	lsls	r3, r3, #12
 8001de0:	0b1b      	lsrs	r3, r3, #12
 8001de2:	46aa      	mov	sl, r5
 8001de4:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <__aeabi_ddiv+0x5f8>)
 8001de6:	e66f      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001de8:	42ba      	cmp	r2, r7
 8001dea:	d900      	bls.n	8001dee <__aeabi_ddiv+0x442>
 8001dec:	e735      	b.n	8001c5a <__aeabi_ddiv+0x2ae>
 8001dee:	464b      	mov	r3, r9
 8001df0:	07dc      	lsls	r4, r3, #31
 8001df2:	0858      	lsrs	r0, r3, #1
 8001df4:	087b      	lsrs	r3, r7, #1
 8001df6:	431c      	orrs	r4, r3
 8001df8:	07ff      	lsls	r7, r7, #31
 8001dfa:	e734      	b.n	8001c66 <__aeabi_ddiv+0x2ba>
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	42af      	cmp	r7, r5
 8001e00:	d289      	bcs.n	8001d16 <__aeabi_ddiv+0x36a>
 8001e02:	4447      	add	r7, r8
 8001e04:	4547      	cmp	r7, r8
 8001e06:	41a4      	sbcs	r4, r4
 8001e08:	465b      	mov	r3, fp
 8001e0a:	4264      	negs	r4, r4
 8001e0c:	19a4      	adds	r4, r4, r6
 8001e0e:	1864      	adds	r4, r4, r1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	42a6      	cmp	r6, r4
 8001e14:	d21e      	bcs.n	8001e54 <__aeabi_ddiv+0x4a8>
 8001e16:	42a0      	cmp	r0, r4
 8001e18:	d86d      	bhi.n	8001ef6 <__aeabi_ddiv+0x54a>
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_ddiv+0x472>
 8001e1c:	e0b6      	b.n	8001f8c <__aeabi_ddiv+0x5e0>
 8001e1e:	1a24      	subs	r4, r4, r0
 8001e20:	469b      	mov	fp, r3
 8001e22:	e778      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001e24:	0003      	movs	r3, r0
 8001e26:	465a      	mov	r2, fp
 8001e28:	3b28      	subs	r3, #40	; 0x28
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	2700      	movs	r7, #0
 8001e2e:	4691      	mov	r9, r2
 8001e30:	e688      	b.n	8001b44 <__aeabi_ddiv+0x198>
 8001e32:	4658      	mov	r0, fp
 8001e34:	f001 f820 	bl	8002e78 <__clzsi2>
 8001e38:	3020      	adds	r0, #32
 8001e3a:	e672      	b.n	8001b22 <__aeabi_ddiv+0x176>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	4652      	mov	r2, sl
 8001e40:	3b28      	subs	r3, #40	; 0x28
 8001e42:	409a      	lsls	r2, r3
 8001e44:	4693      	mov	fp, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	e6b4      	b.n	8001bb4 <__aeabi_ddiv+0x208>
 8001e4a:	4650      	mov	r0, sl
 8001e4c:	f001 f814 	bl	8002e78 <__clzsi2>
 8001e50:	3020      	adds	r0, #32
 8001e52:	e69a      	b.n	8001b8a <__aeabi_ddiv+0x1de>
 8001e54:	42a6      	cmp	r6, r4
 8001e56:	d1e2      	bne.n	8001e1e <__aeabi_ddiv+0x472>
 8001e58:	45b8      	cmp	r8, r7
 8001e5a:	d9dc      	bls.n	8001e16 <__aeabi_ddiv+0x46a>
 8001e5c:	1a34      	subs	r4, r6, r0
 8001e5e:	469b      	mov	fp, r3
 8001e60:	e759      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001e62:	2b1f      	cmp	r3, #31
 8001e64:	dc65      	bgt.n	8001f32 <__aeabi_ddiv+0x586>
 8001e66:	4c50      	ldr	r4, [pc, #320]	; (8001fa8 <__aeabi_ddiv+0x5fc>)
 8001e68:	9900      	ldr	r1, [sp, #0]
 8001e6a:	46a4      	mov	ip, r4
 8001e6c:	465c      	mov	r4, fp
 8001e6e:	4461      	add	r1, ip
 8001e70:	0008      	movs	r0, r1
 8001e72:	408c      	lsls	r4, r1
 8001e74:	0011      	movs	r1, r2
 8001e76:	4082      	lsls	r2, r0
 8001e78:	40d9      	lsrs	r1, r3
 8001e7a:	1e50      	subs	r0, r2, #1
 8001e7c:	4182      	sbcs	r2, r0
 8001e7e:	430c      	orrs	r4, r1
 8001e80:	4314      	orrs	r4, r2
 8001e82:	465a      	mov	r2, fp
 8001e84:	40da      	lsrs	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	0762      	lsls	r2, r4, #29
 8001e8a:	d009      	beq.n	8001ea0 <__aeabi_ddiv+0x4f4>
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	4022      	ands	r2, r4
 8001e90:	2a04      	cmp	r2, #4
 8001e92:	d005      	beq.n	8001ea0 <__aeabi_ddiv+0x4f4>
 8001e94:	0022      	movs	r2, r4
 8001e96:	1d14      	adds	r4, r2, #4
 8001e98:	4294      	cmp	r4, r2
 8001e9a:	4189      	sbcs	r1, r1
 8001e9c:	4249      	negs	r1, r1
 8001e9e:	185b      	adds	r3, r3, r1
 8001ea0:	021a      	lsls	r2, r3, #8
 8001ea2:	d562      	bpl.n	8001f6a <__aeabi_ddiv+0x5be>
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2700      	movs	r7, #0
 8001eaa:	e60d      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001eac:	428a      	cmp	r2, r1
 8001eae:	d800      	bhi.n	8001eb2 <__aeabi_ddiv+0x506>
 8001eb0:	e70a      	b.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001eb2:	1e83      	subs	r3, r0, #2
 8001eb4:	1989      	adds	r1, r1, r6
 8001eb6:	e707      	b.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001eb8:	230f      	movs	r3, #15
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_ddiv+0x516>
 8001ec0:	e5e6      	b.n	8001a90 <__aeabi_ddiv+0xe4>
 8001ec2:	1d17      	adds	r7, r2, #4
 8001ec4:	4297      	cmp	r7, r2
 8001ec6:	4192      	sbcs	r2, r2
 8001ec8:	4253      	negs	r3, r2
 8001eca:	449b      	add	fp, r3
 8001ecc:	08fa      	lsrs	r2, r7, #3
 8001ece:	e5e0      	b.n	8001a92 <__aeabi_ddiv+0xe6>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_ddiv+0x52a>
 8001ed4:	e5d7      	b.n	8001a86 <__aeabi_ddiv+0xda>
 8001ed6:	1871      	adds	r1, r6, r1
 8001ed8:	1e53      	subs	r3, r2, #1
 8001eda:	42b1      	cmp	r1, r6
 8001edc:	d327      	bcc.n	8001f2e <__aeabi_ddiv+0x582>
 8001ede:	42a9      	cmp	r1, r5
 8001ee0:	d315      	bcc.n	8001f0e <__aeabi_ddiv+0x562>
 8001ee2:	d058      	beq.n	8001f96 <__aeabi_ddiv+0x5ea>
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	e773      	b.n	8001dd0 <__aeabi_ddiv+0x424>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	dc00      	bgt.n	8001eee <__aeabi_ddiv+0x542>
 8001eec:	e604      	b.n	8001af8 <__aeabi_ddiv+0x14c>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	449b      	add	fp, r3
 8001ef4:	e5cd      	b.n	8001a92 <__aeabi_ddiv+0xe6>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	4447      	add	r7, r8
 8001efa:	4547      	cmp	r7, r8
 8001efc:	4189      	sbcs	r1, r1
 8001efe:	425b      	negs	r3, r3
 8001f00:	469c      	mov	ip, r3
 8001f02:	4249      	negs	r1, r1
 8001f04:	1989      	adds	r1, r1, r6
 8001f06:	190c      	adds	r4, r1, r4
 8001f08:	44e3      	add	fp, ip
 8001f0a:	1a24      	subs	r4, r4, r0
 8001f0c:	e703      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001f0e:	4643      	mov	r3, r8
 8001f10:	005f      	lsls	r7, r3, #1
 8001f12:	4547      	cmp	r7, r8
 8001f14:	419b      	sbcs	r3, r3
 8001f16:	46b8      	mov	r8, r7
 8001f18:	425b      	negs	r3, r3
 8001f1a:	199e      	adds	r6, r3, r6
 8001f1c:	3a02      	subs	r2, #2
 8001f1e:	1989      	adds	r1, r1, r6
 8001f20:	42a9      	cmp	r1, r5
 8001f22:	d000      	beq.n	8001f26 <__aeabi_ddiv+0x57a>
 8001f24:	e754      	b.n	8001dd0 <__aeabi_ddiv+0x424>
 8001f26:	4540      	cmp	r0, r8
 8001f28:	d000      	beq.n	8001f2c <__aeabi_ddiv+0x580>
 8001f2a:	e751      	b.n	8001dd0 <__aeabi_ddiv+0x424>
 8001f2c:	e5ab      	b.n	8001a86 <__aeabi_ddiv+0xda>
 8001f2e:	001a      	movs	r2, r3
 8001f30:	e7f6      	b.n	8001f20 <__aeabi_ddiv+0x574>
 8001f32:	211f      	movs	r1, #31
 8001f34:	465f      	mov	r7, fp
 8001f36:	4249      	negs	r1, r1
 8001f38:	1b0c      	subs	r4, r1, r4
 8001f3a:	40e7      	lsrs	r7, r4
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d007      	beq.n	8001f50 <__aeabi_ddiv+0x5a4>
 8001f40:	491a      	ldr	r1, [pc, #104]	; (8001fac <__aeabi_ddiv+0x600>)
 8001f42:	9b00      	ldr	r3, [sp, #0]
 8001f44:	468c      	mov	ip, r1
 8001f46:	4463      	add	r3, ip
 8001f48:	0018      	movs	r0, r3
 8001f4a:	465b      	mov	r3, fp
 8001f4c:	4083      	lsls	r3, r0
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	1e50      	subs	r0, r2, #1
 8001f52:	4182      	sbcs	r2, r0
 8001f54:	433a      	orrs	r2, r7
 8001f56:	2707      	movs	r7, #7
 8001f58:	2300      	movs	r3, #0
 8001f5a:	4017      	ands	r7, r2
 8001f5c:	d009      	beq.n	8001f72 <__aeabi_ddiv+0x5c6>
 8001f5e:	210f      	movs	r1, #15
 8001f60:	2300      	movs	r3, #0
 8001f62:	4011      	ands	r1, r2
 8001f64:	0014      	movs	r4, r2
 8001f66:	2904      	cmp	r1, #4
 8001f68:	d195      	bne.n	8001e96 <__aeabi_ddiv+0x4ea>
 8001f6a:	0022      	movs	r2, r4
 8001f6c:	075f      	lsls	r7, r3, #29
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	0b1b      	lsrs	r3, r3, #12
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	4317      	orrs	r7, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	e5a6      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	031b      	lsls	r3, r3, #12
 8001f80:	430b      	orrs	r3, r1
 8001f82:	031b      	lsls	r3, r3, #12
 8001f84:	0017      	movs	r7, r2
 8001f86:	0b1b      	lsrs	r3, r3, #12
 8001f88:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <__aeabi_ddiv+0x5f8>)
 8001f8a:	e59d      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001f8c:	42bd      	cmp	r5, r7
 8001f8e:	d8b2      	bhi.n	8001ef6 <__aeabi_ddiv+0x54a>
 8001f90:	469b      	mov	fp, r3
 8001f92:	2400      	movs	r4, #0
 8001f94:	e6bf      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001f96:	4580      	cmp	r8, r0
 8001f98:	d3b9      	bcc.n	8001f0e <__aeabi_ddiv+0x562>
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	e7c3      	b.n	8001f26 <__aeabi_ddiv+0x57a>
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	000003ff 	.word	0x000003ff
 8001fa4:	000007ff 	.word	0x000007ff
 8001fa8:	0000041e 	.word	0x0000041e
 8001fac:	0000043e 	.word	0x0000043e

08001fb0 <__eqdf2>:
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	464f      	mov	r7, r9
 8001fb4:	4646      	mov	r6, r8
 8001fb6:	46d6      	mov	lr, sl
 8001fb8:	4684      	mov	ip, r0
 8001fba:	b5c0      	push	{r6, r7, lr}
 8001fbc:	4680      	mov	r8, r0
 8001fbe:	4e19      	ldr	r6, [pc, #100]	; (8002024 <__eqdf2+0x74>)
 8001fc0:	0318      	lsls	r0, r3, #12
 8001fc2:	030f      	lsls	r7, r1, #12
 8001fc4:	004d      	lsls	r5, r1, #1
 8001fc6:	0b00      	lsrs	r0, r0, #12
 8001fc8:	005c      	lsls	r4, r3, #1
 8001fca:	4682      	mov	sl, r0
 8001fcc:	0b3f      	lsrs	r7, r7, #12
 8001fce:	0d6d      	lsrs	r5, r5, #21
 8001fd0:	0fc9      	lsrs	r1, r1, #31
 8001fd2:	4691      	mov	r9, r2
 8001fd4:	0d64      	lsrs	r4, r4, #21
 8001fd6:	0fdb      	lsrs	r3, r3, #31
 8001fd8:	2001      	movs	r0, #1
 8001fda:	42b5      	cmp	r5, r6
 8001fdc:	d00a      	beq.n	8001ff4 <__eqdf2+0x44>
 8001fde:	42b4      	cmp	r4, r6
 8001fe0:	d003      	beq.n	8001fea <__eqdf2+0x3a>
 8001fe2:	42a5      	cmp	r5, r4
 8001fe4:	d101      	bne.n	8001fea <__eqdf2+0x3a>
 8001fe6:	4557      	cmp	r7, sl
 8001fe8:	d00c      	beq.n	8002004 <__eqdf2+0x54>
 8001fea:	bc1c      	pop	{r2, r3, r4}
 8001fec:	4690      	mov	r8, r2
 8001fee:	4699      	mov	r9, r3
 8001ff0:	46a2      	mov	sl, r4
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	4666      	mov	r6, ip
 8001ff6:	433e      	orrs	r6, r7
 8001ff8:	d1f7      	bne.n	8001fea <__eqdf2+0x3a>
 8001ffa:	42ac      	cmp	r4, r5
 8001ffc:	d1f5      	bne.n	8001fea <__eqdf2+0x3a>
 8001ffe:	4654      	mov	r4, sl
 8002000:	4314      	orrs	r4, r2
 8002002:	d1f2      	bne.n	8001fea <__eqdf2+0x3a>
 8002004:	2001      	movs	r0, #1
 8002006:	45c8      	cmp	r8, r9
 8002008:	d1ef      	bne.n	8001fea <__eqdf2+0x3a>
 800200a:	4299      	cmp	r1, r3
 800200c:	d007      	beq.n	800201e <__eqdf2+0x6e>
 800200e:	2d00      	cmp	r5, #0
 8002010:	d1eb      	bne.n	8001fea <__eqdf2+0x3a>
 8002012:	4663      	mov	r3, ip
 8002014:	431f      	orrs	r7, r3
 8002016:	0038      	movs	r0, r7
 8002018:	1e47      	subs	r7, r0, #1
 800201a:	41b8      	sbcs	r0, r7
 800201c:	e7e5      	b.n	8001fea <__eqdf2+0x3a>
 800201e:	2000      	movs	r0, #0
 8002020:	e7e3      	b.n	8001fea <__eqdf2+0x3a>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff

08002028 <__gedf2>:
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	464f      	mov	r7, r9
 800202c:	4646      	mov	r6, r8
 800202e:	46d6      	mov	lr, sl
 8002030:	004d      	lsls	r5, r1, #1
 8002032:	b5c0      	push	{r6, r7, lr}
 8002034:	030e      	lsls	r6, r1, #12
 8002036:	0fc9      	lsrs	r1, r1, #31
 8002038:	468a      	mov	sl, r1
 800203a:	492c      	ldr	r1, [pc, #176]	; (80020ec <__gedf2+0xc4>)
 800203c:	031f      	lsls	r7, r3, #12
 800203e:	005c      	lsls	r4, r3, #1
 8002040:	4680      	mov	r8, r0
 8002042:	0b36      	lsrs	r6, r6, #12
 8002044:	0d6d      	lsrs	r5, r5, #21
 8002046:	4691      	mov	r9, r2
 8002048:	0b3f      	lsrs	r7, r7, #12
 800204a:	0d64      	lsrs	r4, r4, #21
 800204c:	0fdb      	lsrs	r3, r3, #31
 800204e:	428d      	cmp	r5, r1
 8002050:	d01e      	beq.n	8002090 <__gedf2+0x68>
 8002052:	428c      	cmp	r4, r1
 8002054:	d016      	beq.n	8002084 <__gedf2+0x5c>
 8002056:	2d00      	cmp	r5, #0
 8002058:	d11e      	bne.n	8002098 <__gedf2+0x70>
 800205a:	4330      	orrs	r0, r6
 800205c:	4684      	mov	ip, r0
 800205e:	2c00      	cmp	r4, #0
 8002060:	d101      	bne.n	8002066 <__gedf2+0x3e>
 8002062:	433a      	orrs	r2, r7
 8002064:	d023      	beq.n	80020ae <__gedf2+0x86>
 8002066:	4662      	mov	r2, ip
 8002068:	2a00      	cmp	r2, #0
 800206a:	d01a      	beq.n	80020a2 <__gedf2+0x7a>
 800206c:	459a      	cmp	sl, r3
 800206e:	d029      	beq.n	80020c4 <__gedf2+0x9c>
 8002070:	4651      	mov	r1, sl
 8002072:	2002      	movs	r0, #2
 8002074:	3901      	subs	r1, #1
 8002076:	4008      	ands	r0, r1
 8002078:	3801      	subs	r0, #1
 800207a:	bc1c      	pop	{r2, r3, r4}
 800207c:	4690      	mov	r8, r2
 800207e:	4699      	mov	r9, r3
 8002080:	46a2      	mov	sl, r4
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	0039      	movs	r1, r7
 8002086:	4311      	orrs	r1, r2
 8002088:	d0e5      	beq.n	8002056 <__gedf2+0x2e>
 800208a:	2002      	movs	r0, #2
 800208c:	4240      	negs	r0, r0
 800208e:	e7f4      	b.n	800207a <__gedf2+0x52>
 8002090:	4330      	orrs	r0, r6
 8002092:	d1fa      	bne.n	800208a <__gedf2+0x62>
 8002094:	42ac      	cmp	r4, r5
 8002096:	d00f      	beq.n	80020b8 <__gedf2+0x90>
 8002098:	2c00      	cmp	r4, #0
 800209a:	d10f      	bne.n	80020bc <__gedf2+0x94>
 800209c:	433a      	orrs	r2, r7
 800209e:	d0e7      	beq.n	8002070 <__gedf2+0x48>
 80020a0:	e00c      	b.n	80020bc <__gedf2+0x94>
 80020a2:	2201      	movs	r2, #1
 80020a4:	3b01      	subs	r3, #1
 80020a6:	4393      	bics	r3, r2
 80020a8:	0018      	movs	r0, r3
 80020aa:	3001      	adds	r0, #1
 80020ac:	e7e5      	b.n	800207a <__gedf2+0x52>
 80020ae:	4663      	mov	r3, ip
 80020b0:	2000      	movs	r0, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0e1      	beq.n	800207a <__gedf2+0x52>
 80020b6:	e7db      	b.n	8002070 <__gedf2+0x48>
 80020b8:	433a      	orrs	r2, r7
 80020ba:	d1e6      	bne.n	800208a <__gedf2+0x62>
 80020bc:	459a      	cmp	sl, r3
 80020be:	d1d7      	bne.n	8002070 <__gedf2+0x48>
 80020c0:	42a5      	cmp	r5, r4
 80020c2:	dcd5      	bgt.n	8002070 <__gedf2+0x48>
 80020c4:	42a5      	cmp	r5, r4
 80020c6:	db05      	blt.n	80020d4 <__gedf2+0xac>
 80020c8:	42be      	cmp	r6, r7
 80020ca:	d8d1      	bhi.n	8002070 <__gedf2+0x48>
 80020cc:	d008      	beq.n	80020e0 <__gedf2+0xb8>
 80020ce:	2000      	movs	r0, #0
 80020d0:	42be      	cmp	r6, r7
 80020d2:	d2d2      	bcs.n	800207a <__gedf2+0x52>
 80020d4:	4650      	mov	r0, sl
 80020d6:	2301      	movs	r3, #1
 80020d8:	3801      	subs	r0, #1
 80020da:	4398      	bics	r0, r3
 80020dc:	3001      	adds	r0, #1
 80020de:	e7cc      	b.n	800207a <__gedf2+0x52>
 80020e0:	45c8      	cmp	r8, r9
 80020e2:	d8c5      	bhi.n	8002070 <__gedf2+0x48>
 80020e4:	2000      	movs	r0, #0
 80020e6:	45c8      	cmp	r8, r9
 80020e8:	d3f4      	bcc.n	80020d4 <__gedf2+0xac>
 80020ea:	e7c6      	b.n	800207a <__gedf2+0x52>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__ledf2>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	464f      	mov	r7, r9
 80020f4:	4646      	mov	r6, r8
 80020f6:	46d6      	mov	lr, sl
 80020f8:	004d      	lsls	r5, r1, #1
 80020fa:	b5c0      	push	{r6, r7, lr}
 80020fc:	030e      	lsls	r6, r1, #12
 80020fe:	0fc9      	lsrs	r1, r1, #31
 8002100:	468a      	mov	sl, r1
 8002102:	492e      	ldr	r1, [pc, #184]	; (80021bc <__ledf2+0xcc>)
 8002104:	031f      	lsls	r7, r3, #12
 8002106:	005c      	lsls	r4, r3, #1
 8002108:	4680      	mov	r8, r0
 800210a:	0b36      	lsrs	r6, r6, #12
 800210c:	0d6d      	lsrs	r5, r5, #21
 800210e:	4691      	mov	r9, r2
 8002110:	0b3f      	lsrs	r7, r7, #12
 8002112:	0d64      	lsrs	r4, r4, #21
 8002114:	0fdb      	lsrs	r3, r3, #31
 8002116:	428d      	cmp	r5, r1
 8002118:	d018      	beq.n	800214c <__ledf2+0x5c>
 800211a:	428c      	cmp	r4, r1
 800211c:	d011      	beq.n	8002142 <__ledf2+0x52>
 800211e:	2d00      	cmp	r5, #0
 8002120:	d118      	bne.n	8002154 <__ledf2+0x64>
 8002122:	4330      	orrs	r0, r6
 8002124:	4684      	mov	ip, r0
 8002126:	2c00      	cmp	r4, #0
 8002128:	d11e      	bne.n	8002168 <__ledf2+0x78>
 800212a:	433a      	orrs	r2, r7
 800212c:	d11c      	bne.n	8002168 <__ledf2+0x78>
 800212e:	4663      	mov	r3, ip
 8002130:	2000      	movs	r0, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d030      	beq.n	8002198 <__ledf2+0xa8>
 8002136:	4651      	mov	r1, sl
 8002138:	2002      	movs	r0, #2
 800213a:	3901      	subs	r1, #1
 800213c:	4008      	ands	r0, r1
 800213e:	3801      	subs	r0, #1
 8002140:	e02a      	b.n	8002198 <__ledf2+0xa8>
 8002142:	0039      	movs	r1, r7
 8002144:	4311      	orrs	r1, r2
 8002146:	d0ea      	beq.n	800211e <__ledf2+0x2e>
 8002148:	2002      	movs	r0, #2
 800214a:	e025      	b.n	8002198 <__ledf2+0xa8>
 800214c:	4330      	orrs	r0, r6
 800214e:	d1fb      	bne.n	8002148 <__ledf2+0x58>
 8002150:	42ac      	cmp	r4, r5
 8002152:	d026      	beq.n	80021a2 <__ledf2+0xb2>
 8002154:	2c00      	cmp	r4, #0
 8002156:	d126      	bne.n	80021a6 <__ledf2+0xb6>
 8002158:	433a      	orrs	r2, r7
 800215a:	d124      	bne.n	80021a6 <__ledf2+0xb6>
 800215c:	4651      	mov	r1, sl
 800215e:	2002      	movs	r0, #2
 8002160:	3901      	subs	r1, #1
 8002162:	4008      	ands	r0, r1
 8002164:	3801      	subs	r0, #1
 8002166:	e017      	b.n	8002198 <__ledf2+0xa8>
 8002168:	4662      	mov	r2, ip
 800216a:	2a00      	cmp	r2, #0
 800216c:	d00f      	beq.n	800218e <__ledf2+0x9e>
 800216e:	459a      	cmp	sl, r3
 8002170:	d1e1      	bne.n	8002136 <__ledf2+0x46>
 8002172:	42a5      	cmp	r5, r4
 8002174:	db05      	blt.n	8002182 <__ledf2+0x92>
 8002176:	42be      	cmp	r6, r7
 8002178:	d8dd      	bhi.n	8002136 <__ledf2+0x46>
 800217a:	d019      	beq.n	80021b0 <__ledf2+0xc0>
 800217c:	2000      	movs	r0, #0
 800217e:	42be      	cmp	r6, r7
 8002180:	d20a      	bcs.n	8002198 <__ledf2+0xa8>
 8002182:	4650      	mov	r0, sl
 8002184:	2301      	movs	r3, #1
 8002186:	3801      	subs	r0, #1
 8002188:	4398      	bics	r0, r3
 800218a:	3001      	adds	r0, #1
 800218c:	e004      	b.n	8002198 <__ledf2+0xa8>
 800218e:	2201      	movs	r2, #1
 8002190:	3b01      	subs	r3, #1
 8002192:	4393      	bics	r3, r2
 8002194:	0018      	movs	r0, r3
 8002196:	3001      	adds	r0, #1
 8002198:	bc1c      	pop	{r2, r3, r4}
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	46a2      	mov	sl, r4
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a2:	433a      	orrs	r2, r7
 80021a4:	d1d0      	bne.n	8002148 <__ledf2+0x58>
 80021a6:	459a      	cmp	sl, r3
 80021a8:	d1c5      	bne.n	8002136 <__ledf2+0x46>
 80021aa:	42a5      	cmp	r5, r4
 80021ac:	dcc3      	bgt.n	8002136 <__ledf2+0x46>
 80021ae:	e7e0      	b.n	8002172 <__ledf2+0x82>
 80021b0:	45c8      	cmp	r8, r9
 80021b2:	d8c0      	bhi.n	8002136 <__ledf2+0x46>
 80021b4:	2000      	movs	r0, #0
 80021b6:	45c8      	cmp	r8, r9
 80021b8:	d3e3      	bcc.n	8002182 <__ledf2+0x92>
 80021ba:	e7ed      	b.n	8002198 <__ledf2+0xa8>
 80021bc:	000007ff 	.word	0x000007ff

080021c0 <__aeabi_dmul>:
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	4657      	mov	r7, sl
 80021c4:	46de      	mov	lr, fp
 80021c6:	464e      	mov	r6, r9
 80021c8:	4645      	mov	r5, r8
 80021ca:	b5e0      	push	{r5, r6, r7, lr}
 80021cc:	4683      	mov	fp, r0
 80021ce:	0006      	movs	r6, r0
 80021d0:	030f      	lsls	r7, r1, #12
 80021d2:	0048      	lsls	r0, r1, #1
 80021d4:	b087      	sub	sp, #28
 80021d6:	4692      	mov	sl, r2
 80021d8:	001d      	movs	r5, r3
 80021da:	0b3f      	lsrs	r7, r7, #12
 80021dc:	0d40      	lsrs	r0, r0, #21
 80021de:	0fcc      	lsrs	r4, r1, #31
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d100      	bne.n	80021e6 <__aeabi_dmul+0x26>
 80021e4:	e06f      	b.n	80022c6 <__aeabi_dmul+0x106>
 80021e6:	4bde      	ldr	r3, [pc, #888]	; (8002560 <__aeabi_dmul+0x3a0>)
 80021e8:	4298      	cmp	r0, r3
 80021ea:	d038      	beq.n	800225e <__aeabi_dmul+0x9e>
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	00ff      	lsls	r7, r7, #3
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	431f      	orrs	r7, r3
 80021f4:	0f73      	lsrs	r3, r6, #29
 80021f6:	433b      	orrs	r3, r7
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	4bda      	ldr	r3, [pc, #872]	; (8002564 <__aeabi_dmul+0x3a4>)
 80021fc:	2700      	movs	r7, #0
 80021fe:	4699      	mov	r9, r3
 8002200:	2300      	movs	r3, #0
 8002202:	469b      	mov	fp, r3
 8002204:	00f6      	lsls	r6, r6, #3
 8002206:	4481      	add	r9, r0
 8002208:	032b      	lsls	r3, r5, #12
 800220a:	0069      	lsls	r1, r5, #1
 800220c:	0b1b      	lsrs	r3, r3, #12
 800220e:	4652      	mov	r2, sl
 8002210:	4698      	mov	r8, r3
 8002212:	0d49      	lsrs	r1, r1, #21
 8002214:	0fed      	lsrs	r5, r5, #31
 8002216:	2900      	cmp	r1, #0
 8002218:	d100      	bne.n	800221c <__aeabi_dmul+0x5c>
 800221a:	e085      	b.n	8002328 <__aeabi_dmul+0x168>
 800221c:	4bd0      	ldr	r3, [pc, #832]	; (8002560 <__aeabi_dmul+0x3a0>)
 800221e:	4299      	cmp	r1, r3
 8002220:	d100      	bne.n	8002224 <__aeabi_dmul+0x64>
 8002222:	e073      	b.n	800230c <__aeabi_dmul+0x14c>
 8002224:	4643      	mov	r3, r8
 8002226:	00da      	lsls	r2, r3, #3
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	4313      	orrs	r3, r2
 800222e:	4652      	mov	r2, sl
 8002230:	48cc      	ldr	r0, [pc, #816]	; (8002564 <__aeabi_dmul+0x3a4>)
 8002232:	0f52      	lsrs	r2, r2, #29
 8002234:	4684      	mov	ip, r0
 8002236:	4313      	orrs	r3, r2
 8002238:	4652      	mov	r2, sl
 800223a:	2000      	movs	r0, #0
 800223c:	4461      	add	r1, ip
 800223e:	00d2      	lsls	r2, r2, #3
 8002240:	4489      	add	r9, r1
 8002242:	0021      	movs	r1, r4
 8002244:	4069      	eors	r1, r5
 8002246:	9100      	str	r1, [sp, #0]
 8002248:	468c      	mov	ip, r1
 800224a:	2101      	movs	r1, #1
 800224c:	4449      	add	r1, r9
 800224e:	468a      	mov	sl, r1
 8002250:	2f0f      	cmp	r7, #15
 8002252:	d900      	bls.n	8002256 <__aeabi_dmul+0x96>
 8002254:	e090      	b.n	8002378 <__aeabi_dmul+0x1b8>
 8002256:	49c4      	ldr	r1, [pc, #784]	; (8002568 <__aeabi_dmul+0x3a8>)
 8002258:	00bf      	lsls	r7, r7, #2
 800225a:	59cf      	ldr	r7, [r1, r7]
 800225c:	46bf      	mov	pc, r7
 800225e:	465b      	mov	r3, fp
 8002260:	433b      	orrs	r3, r7
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	d000      	beq.n	8002268 <__aeabi_dmul+0xa8>
 8002266:	e16a      	b.n	800253e <__aeabi_dmul+0x37e>
 8002268:	2302      	movs	r3, #2
 800226a:	2708      	movs	r7, #8
 800226c:	2600      	movs	r6, #0
 800226e:	4681      	mov	r9, r0
 8002270:	469b      	mov	fp, r3
 8002272:	e7c9      	b.n	8002208 <__aeabi_dmul+0x48>
 8002274:	0032      	movs	r2, r6
 8002276:	4658      	mov	r0, fp
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	4661      	mov	r1, ip
 800227c:	9100      	str	r1, [sp, #0]
 800227e:	2802      	cmp	r0, #2
 8002280:	d100      	bne.n	8002284 <__aeabi_dmul+0xc4>
 8002282:	e075      	b.n	8002370 <__aeabi_dmul+0x1b0>
 8002284:	2803      	cmp	r0, #3
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0xca>
 8002288:	e1fe      	b.n	8002688 <__aeabi_dmul+0x4c8>
 800228a:	2801      	cmp	r0, #1
 800228c:	d000      	beq.n	8002290 <__aeabi_dmul+0xd0>
 800228e:	e12c      	b.n	80024ea <__aeabi_dmul+0x32a>
 8002290:	2300      	movs	r3, #0
 8002292:	2700      	movs	r7, #0
 8002294:	2600      	movs	r6, #0
 8002296:	2500      	movs	r5, #0
 8002298:	033f      	lsls	r7, r7, #12
 800229a:	0d2a      	lsrs	r2, r5, #20
 800229c:	0b3f      	lsrs	r7, r7, #12
 800229e:	48b3      	ldr	r0, [pc, #716]	; (800256c <__aeabi_dmul+0x3ac>)
 80022a0:	0512      	lsls	r2, r2, #20
 80022a2:	433a      	orrs	r2, r7
 80022a4:	4002      	ands	r2, r0
 80022a6:	051b      	lsls	r3, r3, #20
 80022a8:	4313      	orrs	r3, r2
 80022aa:	9a00      	ldr	r2, [sp, #0]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	07d1      	lsls	r1, r2, #31
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	430b      	orrs	r3, r1
 80022b4:	0030      	movs	r0, r6
 80022b6:	0019      	movs	r1, r3
 80022b8:	b007      	add	sp, #28
 80022ba:	bc3c      	pop	{r2, r3, r4, r5}
 80022bc:	4690      	mov	r8, r2
 80022be:	4699      	mov	r9, r3
 80022c0:	46a2      	mov	sl, r4
 80022c2:	46ab      	mov	fp, r5
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c6:	465b      	mov	r3, fp
 80022c8:	433b      	orrs	r3, r7
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dmul+0x110>
 80022ce:	e12f      	b.n	8002530 <__aeabi_dmul+0x370>
 80022d0:	2f00      	cmp	r7, #0
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dmul+0x116>
 80022d4:	e1a5      	b.n	8002622 <__aeabi_dmul+0x462>
 80022d6:	0038      	movs	r0, r7
 80022d8:	f000 fdce 	bl	8002e78 <__clzsi2>
 80022dc:	0003      	movs	r3, r0
 80022de:	3b0b      	subs	r3, #11
 80022e0:	2b1c      	cmp	r3, #28
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dmul+0x126>
 80022e4:	e196      	b.n	8002614 <__aeabi_dmul+0x454>
 80022e6:	221d      	movs	r2, #29
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	465a      	mov	r2, fp
 80022ec:	0001      	movs	r1, r0
 80022ee:	40da      	lsrs	r2, r3
 80022f0:	465e      	mov	r6, fp
 80022f2:	3908      	subs	r1, #8
 80022f4:	408f      	lsls	r7, r1
 80022f6:	0013      	movs	r3, r2
 80022f8:	408e      	lsls	r6, r1
 80022fa:	433b      	orrs	r3, r7
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	4b9c      	ldr	r3, [pc, #624]	; (8002570 <__aeabi_dmul+0x3b0>)
 8002300:	2700      	movs	r7, #0
 8002302:	1a1b      	subs	r3, r3, r0
 8002304:	4699      	mov	r9, r3
 8002306:	2300      	movs	r3, #0
 8002308:	469b      	mov	fp, r3
 800230a:	e77d      	b.n	8002208 <__aeabi_dmul+0x48>
 800230c:	4641      	mov	r1, r8
 800230e:	4653      	mov	r3, sl
 8002310:	430b      	orrs	r3, r1
 8002312:	4993      	ldr	r1, [pc, #588]	; (8002560 <__aeabi_dmul+0x3a0>)
 8002314:	468c      	mov	ip, r1
 8002316:	44e1      	add	r9, ip
 8002318:	2b00      	cmp	r3, #0
 800231a:	d000      	beq.n	800231e <__aeabi_dmul+0x15e>
 800231c:	e11a      	b.n	8002554 <__aeabi_dmul+0x394>
 800231e:	2202      	movs	r2, #2
 8002320:	2002      	movs	r0, #2
 8002322:	4317      	orrs	r7, r2
 8002324:	2200      	movs	r2, #0
 8002326:	e78c      	b.n	8002242 <__aeabi_dmul+0x82>
 8002328:	4313      	orrs	r3, r2
 800232a:	d100      	bne.n	800232e <__aeabi_dmul+0x16e>
 800232c:	e10d      	b.n	800254a <__aeabi_dmul+0x38a>
 800232e:	4643      	mov	r3, r8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d100      	bne.n	8002336 <__aeabi_dmul+0x176>
 8002334:	e181      	b.n	800263a <__aeabi_dmul+0x47a>
 8002336:	4640      	mov	r0, r8
 8002338:	f000 fd9e 	bl	8002e78 <__clzsi2>
 800233c:	0002      	movs	r2, r0
 800233e:	3a0b      	subs	r2, #11
 8002340:	2a1c      	cmp	r2, #28
 8002342:	dd00      	ble.n	8002346 <__aeabi_dmul+0x186>
 8002344:	e172      	b.n	800262c <__aeabi_dmul+0x46c>
 8002346:	0001      	movs	r1, r0
 8002348:	4643      	mov	r3, r8
 800234a:	3908      	subs	r1, #8
 800234c:	408b      	lsls	r3, r1
 800234e:	4698      	mov	r8, r3
 8002350:	231d      	movs	r3, #29
 8002352:	1a9a      	subs	r2, r3, r2
 8002354:	4653      	mov	r3, sl
 8002356:	40d3      	lsrs	r3, r2
 8002358:	001a      	movs	r2, r3
 800235a:	4643      	mov	r3, r8
 800235c:	4313      	orrs	r3, r2
 800235e:	4652      	mov	r2, sl
 8002360:	408a      	lsls	r2, r1
 8002362:	4649      	mov	r1, r9
 8002364:	1a08      	subs	r0, r1, r0
 8002366:	4982      	ldr	r1, [pc, #520]	; (8002570 <__aeabi_dmul+0x3b0>)
 8002368:	4689      	mov	r9, r1
 800236a:	4481      	add	r9, r0
 800236c:	2000      	movs	r0, #0
 800236e:	e768      	b.n	8002242 <__aeabi_dmul+0x82>
 8002370:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <__aeabi_dmul+0x3a0>)
 8002372:	2700      	movs	r7, #0
 8002374:	2600      	movs	r6, #0
 8002376:	e78e      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002378:	0c14      	lsrs	r4, r2, #16
 800237a:	0412      	lsls	r2, r2, #16
 800237c:	0c12      	lsrs	r2, r2, #16
 800237e:	0011      	movs	r1, r2
 8002380:	0c37      	lsrs	r7, r6, #16
 8002382:	0436      	lsls	r6, r6, #16
 8002384:	0c35      	lsrs	r5, r6, #16
 8002386:	4379      	muls	r1, r7
 8002388:	0028      	movs	r0, r5
 800238a:	468c      	mov	ip, r1
 800238c:	002e      	movs	r6, r5
 800238e:	4360      	muls	r0, r4
 8002390:	4460      	add	r0, ip
 8002392:	4683      	mov	fp, r0
 8002394:	4356      	muls	r6, r2
 8002396:	0021      	movs	r1, r4
 8002398:	0c30      	lsrs	r0, r6, #16
 800239a:	4680      	mov	r8, r0
 800239c:	4658      	mov	r0, fp
 800239e:	4379      	muls	r1, r7
 80023a0:	4440      	add	r0, r8
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	4584      	cmp	ip, r0
 80023a6:	d906      	bls.n	80023b6 <__aeabi_dmul+0x1f6>
 80023a8:	4688      	mov	r8, r1
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0249      	lsls	r1, r1, #9
 80023ae:	468c      	mov	ip, r1
 80023b0:	44e0      	add	r8, ip
 80023b2:	4641      	mov	r1, r8
 80023b4:	9102      	str	r1, [sp, #8]
 80023b6:	0436      	lsls	r6, r6, #16
 80023b8:	0c01      	lsrs	r1, r0, #16
 80023ba:	0c36      	lsrs	r6, r6, #16
 80023bc:	0400      	lsls	r0, r0, #16
 80023be:	468b      	mov	fp, r1
 80023c0:	1981      	adds	r1, r0, r6
 80023c2:	0c1e      	lsrs	r6, r3, #16
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	9103      	str	r1, [sp, #12]
 80023ca:	0019      	movs	r1, r3
 80023cc:	4379      	muls	r1, r7
 80023ce:	468c      	mov	ip, r1
 80023d0:	0028      	movs	r0, r5
 80023d2:	4375      	muls	r5, r6
 80023d4:	4465      	add	r5, ip
 80023d6:	46a8      	mov	r8, r5
 80023d8:	4358      	muls	r0, r3
 80023da:	0c05      	lsrs	r5, r0, #16
 80023dc:	4445      	add	r5, r8
 80023de:	4377      	muls	r7, r6
 80023e0:	42a9      	cmp	r1, r5
 80023e2:	d903      	bls.n	80023ec <__aeabi_dmul+0x22c>
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0249      	lsls	r1, r1, #9
 80023e8:	468c      	mov	ip, r1
 80023ea:	4467      	add	r7, ip
 80023ec:	0c29      	lsrs	r1, r5, #16
 80023ee:	468c      	mov	ip, r1
 80023f0:	0039      	movs	r1, r7
 80023f2:	0400      	lsls	r0, r0, #16
 80023f4:	0c00      	lsrs	r0, r0, #16
 80023f6:	042d      	lsls	r5, r5, #16
 80023f8:	182d      	adds	r5, r5, r0
 80023fa:	4461      	add	r1, ip
 80023fc:	44ab      	add	fp, r5
 80023fe:	9105      	str	r1, [sp, #20]
 8002400:	4659      	mov	r1, fp
 8002402:	9104      	str	r1, [sp, #16]
 8002404:	9901      	ldr	r1, [sp, #4]
 8002406:	040f      	lsls	r7, r1, #16
 8002408:	0c3f      	lsrs	r7, r7, #16
 800240a:	0c08      	lsrs	r0, r1, #16
 800240c:	0039      	movs	r1, r7
 800240e:	4351      	muls	r1, r2
 8002410:	4342      	muls	r2, r0
 8002412:	4690      	mov	r8, r2
 8002414:	0002      	movs	r2, r0
 8002416:	468c      	mov	ip, r1
 8002418:	0c09      	lsrs	r1, r1, #16
 800241a:	468b      	mov	fp, r1
 800241c:	4362      	muls	r2, r4
 800241e:	437c      	muls	r4, r7
 8002420:	4444      	add	r4, r8
 8002422:	445c      	add	r4, fp
 8002424:	45a0      	cmp	r8, r4
 8002426:	d903      	bls.n	8002430 <__aeabi_dmul+0x270>
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0249      	lsls	r1, r1, #9
 800242c:	4688      	mov	r8, r1
 800242e:	4442      	add	r2, r8
 8002430:	0c21      	lsrs	r1, r4, #16
 8002432:	4688      	mov	r8, r1
 8002434:	4661      	mov	r1, ip
 8002436:	0409      	lsls	r1, r1, #16
 8002438:	0c09      	lsrs	r1, r1, #16
 800243a:	468c      	mov	ip, r1
 800243c:	0039      	movs	r1, r7
 800243e:	4359      	muls	r1, r3
 8002440:	4343      	muls	r3, r0
 8002442:	4370      	muls	r0, r6
 8002444:	437e      	muls	r6, r7
 8002446:	0c0f      	lsrs	r7, r1, #16
 8002448:	18f6      	adds	r6, r6, r3
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	19be      	adds	r6, r7, r6
 800244e:	4464      	add	r4, ip
 8002450:	4442      	add	r2, r8
 8002452:	468c      	mov	ip, r1
 8002454:	42b3      	cmp	r3, r6
 8002456:	d903      	bls.n	8002460 <__aeabi_dmul+0x2a0>
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	025b      	lsls	r3, r3, #9
 800245c:	4698      	mov	r8, r3
 800245e:	4440      	add	r0, r8
 8002460:	9b02      	ldr	r3, [sp, #8]
 8002462:	4661      	mov	r1, ip
 8002464:	4698      	mov	r8, r3
 8002466:	9b04      	ldr	r3, [sp, #16]
 8002468:	0437      	lsls	r7, r6, #16
 800246a:	4443      	add	r3, r8
 800246c:	469b      	mov	fp, r3
 800246e:	45ab      	cmp	fp, r5
 8002470:	41ad      	sbcs	r5, r5
 8002472:	426b      	negs	r3, r5
 8002474:	040d      	lsls	r5, r1, #16
 8002476:	9905      	ldr	r1, [sp, #20]
 8002478:	0c2d      	lsrs	r5, r5, #16
 800247a:	468c      	mov	ip, r1
 800247c:	197f      	adds	r7, r7, r5
 800247e:	4467      	add	r7, ip
 8002480:	18fd      	adds	r5, r7, r3
 8002482:	46a8      	mov	r8, r5
 8002484:	465d      	mov	r5, fp
 8002486:	192d      	adds	r5, r5, r4
 8002488:	42a5      	cmp	r5, r4
 800248a:	41a4      	sbcs	r4, r4
 800248c:	4693      	mov	fp, r2
 800248e:	4264      	negs	r4, r4
 8002490:	46a4      	mov	ip, r4
 8002492:	44c3      	add	fp, r8
 8002494:	44dc      	add	ip, fp
 8002496:	428f      	cmp	r7, r1
 8002498:	41bf      	sbcs	r7, r7
 800249a:	4598      	cmp	r8, r3
 800249c:	419b      	sbcs	r3, r3
 800249e:	4593      	cmp	fp, r2
 80024a0:	4192      	sbcs	r2, r2
 80024a2:	45a4      	cmp	ip, r4
 80024a4:	41a4      	sbcs	r4, r4
 80024a6:	425b      	negs	r3, r3
 80024a8:	427f      	negs	r7, r7
 80024aa:	431f      	orrs	r7, r3
 80024ac:	0c36      	lsrs	r6, r6, #16
 80024ae:	4252      	negs	r2, r2
 80024b0:	4264      	negs	r4, r4
 80024b2:	19bf      	adds	r7, r7, r6
 80024b4:	4322      	orrs	r2, r4
 80024b6:	18bf      	adds	r7, r7, r2
 80024b8:	4662      	mov	r2, ip
 80024ba:	1838      	adds	r0, r7, r0
 80024bc:	0243      	lsls	r3, r0, #9
 80024be:	0dd2      	lsrs	r2, r2, #23
 80024c0:	9903      	ldr	r1, [sp, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	026a      	lsls	r2, r5, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	1e50      	subs	r0, r2, #1
 80024ca:	4182      	sbcs	r2, r0
 80024cc:	4661      	mov	r1, ip
 80024ce:	0ded      	lsrs	r5, r5, #23
 80024d0:	432a      	orrs	r2, r5
 80024d2:	024e      	lsls	r6, r1, #9
 80024d4:	4332      	orrs	r2, r6
 80024d6:	01d9      	lsls	r1, r3, #7
 80024d8:	d400      	bmi.n	80024dc <__aeabi_dmul+0x31c>
 80024da:	e0b3      	b.n	8002644 <__aeabi_dmul+0x484>
 80024dc:	2601      	movs	r6, #1
 80024de:	0850      	lsrs	r0, r2, #1
 80024e0:	4032      	ands	r2, r6
 80024e2:	4302      	orrs	r2, r0
 80024e4:	07de      	lsls	r6, r3, #31
 80024e6:	4332      	orrs	r2, r6
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	4c22      	ldr	r4, [pc, #136]	; (8002574 <__aeabi_dmul+0x3b4>)
 80024ec:	4454      	add	r4, sl
 80024ee:	2c00      	cmp	r4, #0
 80024f0:	dd62      	ble.n	80025b8 <__aeabi_dmul+0x3f8>
 80024f2:	0751      	lsls	r1, r2, #29
 80024f4:	d009      	beq.n	800250a <__aeabi_dmul+0x34a>
 80024f6:	200f      	movs	r0, #15
 80024f8:	4010      	ands	r0, r2
 80024fa:	2804      	cmp	r0, #4
 80024fc:	d005      	beq.n	800250a <__aeabi_dmul+0x34a>
 80024fe:	1d10      	adds	r0, r2, #4
 8002500:	4290      	cmp	r0, r2
 8002502:	4192      	sbcs	r2, r2
 8002504:	4252      	negs	r2, r2
 8002506:	189b      	adds	r3, r3, r2
 8002508:	0002      	movs	r2, r0
 800250a:	01d9      	lsls	r1, r3, #7
 800250c:	d504      	bpl.n	8002518 <__aeabi_dmul+0x358>
 800250e:	2480      	movs	r4, #128	; 0x80
 8002510:	4819      	ldr	r0, [pc, #100]	; (8002578 <__aeabi_dmul+0x3b8>)
 8002512:	00e4      	lsls	r4, r4, #3
 8002514:	4003      	ands	r3, r0
 8002516:	4454      	add	r4, sl
 8002518:	4818      	ldr	r0, [pc, #96]	; (800257c <__aeabi_dmul+0x3bc>)
 800251a:	4284      	cmp	r4, r0
 800251c:	dd00      	ble.n	8002520 <__aeabi_dmul+0x360>
 800251e:	e727      	b.n	8002370 <__aeabi_dmul+0x1b0>
 8002520:	075e      	lsls	r6, r3, #29
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	08d2      	lsrs	r2, r2, #3
 8002526:	0b1f      	lsrs	r7, r3, #12
 8002528:	0563      	lsls	r3, r4, #21
 800252a:	4316      	orrs	r6, r2
 800252c:	0d5b      	lsrs	r3, r3, #21
 800252e:	e6b2      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002530:	2300      	movs	r3, #0
 8002532:	4699      	mov	r9, r3
 8002534:	3301      	adds	r3, #1
 8002536:	2704      	movs	r7, #4
 8002538:	2600      	movs	r6, #0
 800253a:	469b      	mov	fp, r3
 800253c:	e664      	b.n	8002208 <__aeabi_dmul+0x48>
 800253e:	2303      	movs	r3, #3
 8002540:	9701      	str	r7, [sp, #4]
 8002542:	4681      	mov	r9, r0
 8002544:	270c      	movs	r7, #12
 8002546:	469b      	mov	fp, r3
 8002548:	e65e      	b.n	8002208 <__aeabi_dmul+0x48>
 800254a:	2201      	movs	r2, #1
 800254c:	2001      	movs	r0, #1
 800254e:	4317      	orrs	r7, r2
 8002550:	2200      	movs	r2, #0
 8002552:	e676      	b.n	8002242 <__aeabi_dmul+0x82>
 8002554:	2303      	movs	r3, #3
 8002556:	2003      	movs	r0, #3
 8002558:	431f      	orrs	r7, r3
 800255a:	4643      	mov	r3, r8
 800255c:	e671      	b.n	8002242 <__aeabi_dmul+0x82>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	000007ff 	.word	0x000007ff
 8002564:	fffffc01 	.word	0xfffffc01
 8002568:	08009b10 	.word	0x08009b10
 800256c:	800fffff 	.word	0x800fffff
 8002570:	fffffc0d 	.word	0xfffffc0d
 8002574:	000003ff 	.word	0x000003ff
 8002578:	feffffff 	.word	0xfeffffff
 800257c:	000007fe 	.word	0x000007fe
 8002580:	2300      	movs	r3, #0
 8002582:	2780      	movs	r7, #128	; 0x80
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	033f      	lsls	r7, r7, #12
 8002588:	2600      	movs	r6, #0
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <__aeabi_dmul+0x4d8>)
 800258c:	e683      	b.n	8002296 <__aeabi_dmul+0xd6>
 800258e:	9b01      	ldr	r3, [sp, #4]
 8002590:	0032      	movs	r2, r6
 8002592:	46a4      	mov	ip, r4
 8002594:	4658      	mov	r0, fp
 8002596:	e670      	b.n	800227a <__aeabi_dmul+0xba>
 8002598:	46ac      	mov	ip, r5
 800259a:	e66e      	b.n	800227a <__aeabi_dmul+0xba>
 800259c:	2780      	movs	r7, #128	; 0x80
 800259e:	9901      	ldr	r1, [sp, #4]
 80025a0:	033f      	lsls	r7, r7, #12
 80025a2:	4239      	tst	r1, r7
 80025a4:	d02d      	beq.n	8002602 <__aeabi_dmul+0x442>
 80025a6:	423b      	tst	r3, r7
 80025a8:	d12b      	bne.n	8002602 <__aeabi_dmul+0x442>
 80025aa:	431f      	orrs	r7, r3
 80025ac:	033f      	lsls	r7, r7, #12
 80025ae:	0b3f      	lsrs	r7, r7, #12
 80025b0:	9500      	str	r5, [sp, #0]
 80025b2:	0016      	movs	r6, r2
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <__aeabi_dmul+0x4d8>)
 80025b6:	e66e      	b.n	8002296 <__aeabi_dmul+0xd6>
 80025b8:	2501      	movs	r5, #1
 80025ba:	1b2d      	subs	r5, r5, r4
 80025bc:	2d38      	cmp	r5, #56	; 0x38
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dmul+0x402>
 80025c0:	e666      	b.n	8002290 <__aeabi_dmul+0xd0>
 80025c2:	2d1f      	cmp	r5, #31
 80025c4:	dc40      	bgt.n	8002648 <__aeabi_dmul+0x488>
 80025c6:	4835      	ldr	r0, [pc, #212]	; (800269c <__aeabi_dmul+0x4dc>)
 80025c8:	001c      	movs	r4, r3
 80025ca:	4450      	add	r0, sl
 80025cc:	0016      	movs	r6, r2
 80025ce:	4082      	lsls	r2, r0
 80025d0:	4084      	lsls	r4, r0
 80025d2:	40ee      	lsrs	r6, r5
 80025d4:	1e50      	subs	r0, r2, #1
 80025d6:	4182      	sbcs	r2, r0
 80025d8:	4334      	orrs	r4, r6
 80025da:	4314      	orrs	r4, r2
 80025dc:	40eb      	lsrs	r3, r5
 80025de:	0762      	lsls	r2, r4, #29
 80025e0:	d009      	beq.n	80025f6 <__aeabi_dmul+0x436>
 80025e2:	220f      	movs	r2, #15
 80025e4:	4022      	ands	r2, r4
 80025e6:	2a04      	cmp	r2, #4
 80025e8:	d005      	beq.n	80025f6 <__aeabi_dmul+0x436>
 80025ea:	0022      	movs	r2, r4
 80025ec:	1d14      	adds	r4, r2, #4
 80025ee:	4294      	cmp	r4, r2
 80025f0:	4180      	sbcs	r0, r0
 80025f2:	4240      	negs	r0, r0
 80025f4:	181b      	adds	r3, r3, r0
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	d53e      	bpl.n	8002678 <__aeabi_dmul+0x4b8>
 80025fa:	2301      	movs	r3, #1
 80025fc:	2700      	movs	r7, #0
 80025fe:	2600      	movs	r6, #0
 8002600:	e649      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002602:	2780      	movs	r7, #128	; 0x80
 8002604:	9b01      	ldr	r3, [sp, #4]
 8002606:	033f      	lsls	r7, r7, #12
 8002608:	431f      	orrs	r7, r3
 800260a:	033f      	lsls	r7, r7, #12
 800260c:	0b3f      	lsrs	r7, r7, #12
 800260e:	9400      	str	r4, [sp, #0]
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <__aeabi_dmul+0x4d8>)
 8002612:	e640      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002614:	0003      	movs	r3, r0
 8002616:	465a      	mov	r2, fp
 8002618:	3b28      	subs	r3, #40	; 0x28
 800261a:	409a      	lsls	r2, r3
 800261c:	2600      	movs	r6, #0
 800261e:	9201      	str	r2, [sp, #4]
 8002620:	e66d      	b.n	80022fe <__aeabi_dmul+0x13e>
 8002622:	4658      	mov	r0, fp
 8002624:	f000 fc28 	bl	8002e78 <__clzsi2>
 8002628:	3020      	adds	r0, #32
 800262a:	e657      	b.n	80022dc <__aeabi_dmul+0x11c>
 800262c:	0003      	movs	r3, r0
 800262e:	4652      	mov	r2, sl
 8002630:	3b28      	subs	r3, #40	; 0x28
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	2200      	movs	r2, #0
 8002638:	e693      	b.n	8002362 <__aeabi_dmul+0x1a2>
 800263a:	4650      	mov	r0, sl
 800263c:	f000 fc1c 	bl	8002e78 <__clzsi2>
 8002640:	3020      	adds	r0, #32
 8002642:	e67b      	b.n	800233c <__aeabi_dmul+0x17c>
 8002644:	46ca      	mov	sl, r9
 8002646:	e750      	b.n	80024ea <__aeabi_dmul+0x32a>
 8002648:	201f      	movs	r0, #31
 800264a:	001e      	movs	r6, r3
 800264c:	4240      	negs	r0, r0
 800264e:	1b04      	subs	r4, r0, r4
 8002650:	40e6      	lsrs	r6, r4
 8002652:	2d20      	cmp	r5, #32
 8002654:	d003      	beq.n	800265e <__aeabi_dmul+0x49e>
 8002656:	4c12      	ldr	r4, [pc, #72]	; (80026a0 <__aeabi_dmul+0x4e0>)
 8002658:	4454      	add	r4, sl
 800265a:	40a3      	lsls	r3, r4
 800265c:	431a      	orrs	r2, r3
 800265e:	1e50      	subs	r0, r2, #1
 8002660:	4182      	sbcs	r2, r0
 8002662:	4332      	orrs	r2, r6
 8002664:	2607      	movs	r6, #7
 8002666:	2700      	movs	r7, #0
 8002668:	4016      	ands	r6, r2
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x4c0>
 800266c:	200f      	movs	r0, #15
 800266e:	2300      	movs	r3, #0
 8002670:	4010      	ands	r0, r2
 8002672:	0014      	movs	r4, r2
 8002674:	2804      	cmp	r0, #4
 8002676:	d1b9      	bne.n	80025ec <__aeabi_dmul+0x42c>
 8002678:	0022      	movs	r2, r4
 800267a:	075e      	lsls	r6, r3, #29
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	0b1f      	lsrs	r7, r3, #12
 8002680:	08d2      	lsrs	r2, r2, #3
 8002682:	4316      	orrs	r6, r2
 8002684:	2300      	movs	r3, #0
 8002686:	e606      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002688:	2780      	movs	r7, #128	; 0x80
 800268a:	033f      	lsls	r7, r7, #12
 800268c:	431f      	orrs	r7, r3
 800268e:	033f      	lsls	r7, r7, #12
 8002690:	0b3f      	lsrs	r7, r7, #12
 8002692:	0016      	movs	r6, r2
 8002694:	4b00      	ldr	r3, [pc, #0]	; (8002698 <__aeabi_dmul+0x4d8>)
 8002696:	e5fe      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002698:	000007ff 	.word	0x000007ff
 800269c:	0000041e 	.word	0x0000041e
 80026a0:	0000043e 	.word	0x0000043e

080026a4 <__aeabi_dsub>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	4657      	mov	r7, sl
 80026a8:	464e      	mov	r6, r9
 80026aa:	4645      	mov	r5, r8
 80026ac:	46de      	mov	lr, fp
 80026ae:	000c      	movs	r4, r1
 80026b0:	0309      	lsls	r1, r1, #12
 80026b2:	b5e0      	push	{r5, r6, r7, lr}
 80026b4:	0a49      	lsrs	r1, r1, #9
 80026b6:	0f46      	lsrs	r6, r0, #29
 80026b8:	005f      	lsls	r7, r3, #1
 80026ba:	4331      	orrs	r1, r6
 80026bc:	031e      	lsls	r6, r3, #12
 80026be:	0fdb      	lsrs	r3, r3, #31
 80026c0:	0a76      	lsrs	r6, r6, #9
 80026c2:	469b      	mov	fp, r3
 80026c4:	0f53      	lsrs	r3, r2, #29
 80026c6:	4333      	orrs	r3, r6
 80026c8:	4ec8      	ldr	r6, [pc, #800]	; (80029ec <__aeabi_dsub+0x348>)
 80026ca:	0065      	lsls	r5, r4, #1
 80026cc:	00c0      	lsls	r0, r0, #3
 80026ce:	0fe4      	lsrs	r4, r4, #31
 80026d0:	00d2      	lsls	r2, r2, #3
 80026d2:	0d6d      	lsrs	r5, r5, #21
 80026d4:	46a2      	mov	sl, r4
 80026d6:	4681      	mov	r9, r0
 80026d8:	0d7f      	lsrs	r7, r7, #21
 80026da:	469c      	mov	ip, r3
 80026dc:	4690      	mov	r8, r2
 80026de:	42b7      	cmp	r7, r6
 80026e0:	d100      	bne.n	80026e4 <__aeabi_dsub+0x40>
 80026e2:	e0b9      	b.n	8002858 <__aeabi_dsub+0x1b4>
 80026e4:	465b      	mov	r3, fp
 80026e6:	2601      	movs	r6, #1
 80026e8:	4073      	eors	r3, r6
 80026ea:	469b      	mov	fp, r3
 80026ec:	1bee      	subs	r6, r5, r7
 80026ee:	45a3      	cmp	fp, r4
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0x50>
 80026f2:	e083      	b.n	80027fc <__aeabi_dsub+0x158>
 80026f4:	2e00      	cmp	r6, #0
 80026f6:	dd63      	ble.n	80027c0 <__aeabi_dsub+0x11c>
 80026f8:	2f00      	cmp	r7, #0
 80026fa:	d000      	beq.n	80026fe <__aeabi_dsub+0x5a>
 80026fc:	e0b1      	b.n	8002862 <__aeabi_dsub+0x1be>
 80026fe:	4663      	mov	r3, ip
 8002700:	4313      	orrs	r3, r2
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x62>
 8002704:	e123      	b.n	800294e <__aeabi_dsub+0x2aa>
 8002706:	1e73      	subs	r3, r6, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d000      	beq.n	800270e <__aeabi_dsub+0x6a>
 800270c:	e1ba      	b.n	8002a84 <__aeabi_dsub+0x3e0>
 800270e:	1a86      	subs	r6, r0, r2
 8002710:	4663      	mov	r3, ip
 8002712:	42b0      	cmp	r0, r6
 8002714:	4180      	sbcs	r0, r0
 8002716:	2501      	movs	r5, #1
 8002718:	1ac9      	subs	r1, r1, r3
 800271a:	4240      	negs	r0, r0
 800271c:	1a09      	subs	r1, r1, r0
 800271e:	020b      	lsls	r3, r1, #8
 8002720:	d400      	bmi.n	8002724 <__aeabi_dsub+0x80>
 8002722:	e147      	b.n	80029b4 <__aeabi_dsub+0x310>
 8002724:	0249      	lsls	r1, r1, #9
 8002726:	0a4b      	lsrs	r3, r1, #9
 8002728:	4698      	mov	r8, r3
 800272a:	4643      	mov	r3, r8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x8e>
 8002730:	e189      	b.n	8002a46 <__aeabi_dsub+0x3a2>
 8002732:	4640      	mov	r0, r8
 8002734:	f000 fba0 	bl	8002e78 <__clzsi2>
 8002738:	0003      	movs	r3, r0
 800273a:	3b08      	subs	r3, #8
 800273c:	2b1f      	cmp	r3, #31
 800273e:	dd00      	ble.n	8002742 <__aeabi_dsub+0x9e>
 8002740:	e17c      	b.n	8002a3c <__aeabi_dsub+0x398>
 8002742:	2220      	movs	r2, #32
 8002744:	0030      	movs	r0, r6
 8002746:	1ad2      	subs	r2, r2, r3
 8002748:	4641      	mov	r1, r8
 800274a:	40d0      	lsrs	r0, r2
 800274c:	4099      	lsls	r1, r3
 800274e:	0002      	movs	r2, r0
 8002750:	409e      	lsls	r6, r3
 8002752:	430a      	orrs	r2, r1
 8002754:	429d      	cmp	r5, r3
 8002756:	dd00      	ble.n	800275a <__aeabi_dsub+0xb6>
 8002758:	e16a      	b.n	8002a30 <__aeabi_dsub+0x38c>
 800275a:	1b5d      	subs	r5, r3, r5
 800275c:	1c6b      	adds	r3, r5, #1
 800275e:	2b1f      	cmp	r3, #31
 8002760:	dd00      	ble.n	8002764 <__aeabi_dsub+0xc0>
 8002762:	e194      	b.n	8002a8e <__aeabi_dsub+0x3ea>
 8002764:	2120      	movs	r1, #32
 8002766:	0010      	movs	r0, r2
 8002768:	0035      	movs	r5, r6
 800276a:	1ac9      	subs	r1, r1, r3
 800276c:	408e      	lsls	r6, r1
 800276e:	40da      	lsrs	r2, r3
 8002770:	4088      	lsls	r0, r1
 8002772:	40dd      	lsrs	r5, r3
 8002774:	1e71      	subs	r1, r6, #1
 8002776:	418e      	sbcs	r6, r1
 8002778:	0011      	movs	r1, r2
 800277a:	2207      	movs	r2, #7
 800277c:	4328      	orrs	r0, r5
 800277e:	2500      	movs	r5, #0
 8002780:	4306      	orrs	r6, r0
 8002782:	4032      	ands	r2, r6
 8002784:	2a00      	cmp	r2, #0
 8002786:	d009      	beq.n	800279c <__aeabi_dsub+0xf8>
 8002788:	230f      	movs	r3, #15
 800278a:	4033      	ands	r3, r6
 800278c:	2b04      	cmp	r3, #4
 800278e:	d005      	beq.n	800279c <__aeabi_dsub+0xf8>
 8002790:	1d33      	adds	r3, r6, #4
 8002792:	42b3      	cmp	r3, r6
 8002794:	41b6      	sbcs	r6, r6
 8002796:	4276      	negs	r6, r6
 8002798:	1989      	adds	r1, r1, r6
 800279a:	001e      	movs	r6, r3
 800279c:	020b      	lsls	r3, r1, #8
 800279e:	d400      	bmi.n	80027a2 <__aeabi_dsub+0xfe>
 80027a0:	e23d      	b.n	8002c1e <__aeabi_dsub+0x57a>
 80027a2:	1c6a      	adds	r2, r5, #1
 80027a4:	4b91      	ldr	r3, [pc, #580]	; (80029ec <__aeabi_dsub+0x348>)
 80027a6:	0555      	lsls	r5, r2, #21
 80027a8:	0d6d      	lsrs	r5, r5, #21
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x10c>
 80027ae:	e119      	b.n	80029e4 <__aeabi_dsub+0x340>
 80027b0:	4a8f      	ldr	r2, [pc, #572]	; (80029f0 <__aeabi_dsub+0x34c>)
 80027b2:	08f6      	lsrs	r6, r6, #3
 80027b4:	400a      	ands	r2, r1
 80027b6:	0757      	lsls	r7, r2, #29
 80027b8:	0252      	lsls	r2, r2, #9
 80027ba:	4337      	orrs	r7, r6
 80027bc:	0b12      	lsrs	r2, r2, #12
 80027be:	e09b      	b.n	80028f8 <__aeabi_dsub+0x254>
 80027c0:	2e00      	cmp	r6, #0
 80027c2:	d000      	beq.n	80027c6 <__aeabi_dsub+0x122>
 80027c4:	e0c5      	b.n	8002952 <__aeabi_dsub+0x2ae>
 80027c6:	1c6e      	adds	r6, r5, #1
 80027c8:	0576      	lsls	r6, r6, #21
 80027ca:	0d76      	lsrs	r6, r6, #21
 80027cc:	2e01      	cmp	r6, #1
 80027ce:	dc00      	bgt.n	80027d2 <__aeabi_dsub+0x12e>
 80027d0:	e148      	b.n	8002a64 <__aeabi_dsub+0x3c0>
 80027d2:	4667      	mov	r7, ip
 80027d4:	1a86      	subs	r6, r0, r2
 80027d6:	1bcb      	subs	r3, r1, r7
 80027d8:	42b0      	cmp	r0, r6
 80027da:	41bf      	sbcs	r7, r7
 80027dc:	427f      	negs	r7, r7
 80027de:	46b8      	mov	r8, r7
 80027e0:	001f      	movs	r7, r3
 80027e2:	4643      	mov	r3, r8
 80027e4:	1aff      	subs	r7, r7, r3
 80027e6:	003b      	movs	r3, r7
 80027e8:	46b8      	mov	r8, r7
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	d500      	bpl.n	80027f0 <__aeabi_dsub+0x14c>
 80027ee:	e15f      	b.n	8002ab0 <__aeabi_dsub+0x40c>
 80027f0:	4337      	orrs	r7, r6
 80027f2:	d19a      	bne.n	800272a <__aeabi_dsub+0x86>
 80027f4:	2200      	movs	r2, #0
 80027f6:	2400      	movs	r4, #0
 80027f8:	2500      	movs	r5, #0
 80027fa:	e079      	b.n	80028f0 <__aeabi_dsub+0x24c>
 80027fc:	2e00      	cmp	r6, #0
 80027fe:	dc00      	bgt.n	8002802 <__aeabi_dsub+0x15e>
 8002800:	e0fa      	b.n	80029f8 <__aeabi_dsub+0x354>
 8002802:	2f00      	cmp	r7, #0
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x164>
 8002806:	e08d      	b.n	8002924 <__aeabi_dsub+0x280>
 8002808:	4b78      	ldr	r3, [pc, #480]	; (80029ec <__aeabi_dsub+0x348>)
 800280a:	429d      	cmp	r5, r3
 800280c:	d067      	beq.n	80028de <__aeabi_dsub+0x23a>
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	4667      	mov	r7, ip
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431f      	orrs	r7, r3
 8002816:	46bc      	mov	ip, r7
 8002818:	2e38      	cmp	r6, #56	; 0x38
 800281a:	dc00      	bgt.n	800281e <__aeabi_dsub+0x17a>
 800281c:	e152      	b.n	8002ac4 <__aeabi_dsub+0x420>
 800281e:	4663      	mov	r3, ip
 8002820:	4313      	orrs	r3, r2
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	4193      	sbcs	r3, r2
 8002826:	181e      	adds	r6, r3, r0
 8002828:	4286      	cmp	r6, r0
 800282a:	4180      	sbcs	r0, r0
 800282c:	4240      	negs	r0, r0
 800282e:	1809      	adds	r1, r1, r0
 8002830:	020b      	lsls	r3, r1, #8
 8002832:	d400      	bmi.n	8002836 <__aeabi_dsub+0x192>
 8002834:	e0be      	b.n	80029b4 <__aeabi_dsub+0x310>
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <__aeabi_dsub+0x348>)
 8002838:	3501      	adds	r5, #1
 800283a:	429d      	cmp	r5, r3
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x19c>
 800283e:	e0d2      	b.n	80029e6 <__aeabi_dsub+0x342>
 8002840:	4a6b      	ldr	r2, [pc, #428]	; (80029f0 <__aeabi_dsub+0x34c>)
 8002842:	0873      	lsrs	r3, r6, #1
 8002844:	400a      	ands	r2, r1
 8002846:	2101      	movs	r1, #1
 8002848:	400e      	ands	r6, r1
 800284a:	431e      	orrs	r6, r3
 800284c:	0851      	lsrs	r1, r2, #1
 800284e:	07d3      	lsls	r3, r2, #31
 8002850:	2207      	movs	r2, #7
 8002852:	431e      	orrs	r6, r3
 8002854:	4032      	ands	r2, r6
 8002856:	e795      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002858:	001e      	movs	r6, r3
 800285a:	4316      	orrs	r6, r2
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x1bc>
 800285e:	e745      	b.n	80026ec <__aeabi_dsub+0x48>
 8002860:	e740      	b.n	80026e4 <__aeabi_dsub+0x40>
 8002862:	4b62      	ldr	r3, [pc, #392]	; (80029ec <__aeabi_dsub+0x348>)
 8002864:	429d      	cmp	r5, r3
 8002866:	d03a      	beq.n	80028de <__aeabi_dsub+0x23a>
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	4667      	mov	r7, ip
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431f      	orrs	r7, r3
 8002870:	46bc      	mov	ip, r7
 8002872:	2e38      	cmp	r6, #56	; 0x38
 8002874:	dd00      	ble.n	8002878 <__aeabi_dsub+0x1d4>
 8002876:	e0eb      	b.n	8002a50 <__aeabi_dsub+0x3ac>
 8002878:	2e1f      	cmp	r6, #31
 800287a:	dc00      	bgt.n	800287e <__aeabi_dsub+0x1da>
 800287c:	e13a      	b.n	8002af4 <__aeabi_dsub+0x450>
 800287e:	0033      	movs	r3, r6
 8002880:	4667      	mov	r7, ip
 8002882:	3b20      	subs	r3, #32
 8002884:	40df      	lsrs	r7, r3
 8002886:	003b      	movs	r3, r7
 8002888:	2e20      	cmp	r6, #32
 800288a:	d005      	beq.n	8002898 <__aeabi_dsub+0x1f4>
 800288c:	2740      	movs	r7, #64	; 0x40
 800288e:	1bbf      	subs	r7, r7, r6
 8002890:	4666      	mov	r6, ip
 8002892:	40be      	lsls	r6, r7
 8002894:	4332      	orrs	r2, r6
 8002896:	4690      	mov	r8, r2
 8002898:	4646      	mov	r6, r8
 800289a:	1e72      	subs	r2, r6, #1
 800289c:	4196      	sbcs	r6, r2
 800289e:	4333      	orrs	r3, r6
 80028a0:	e0da      	b.n	8002a58 <__aeabi_dsub+0x3b4>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x204>
 80028a6:	e214      	b.n	8002cd2 <__aeabi_dsub+0x62e>
 80028a8:	4663      	mov	r3, ip
 80028aa:	4313      	orrs	r3, r2
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x20c>
 80028ae:	e168      	b.n	8002b82 <__aeabi_dsub+0x4de>
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	074e      	lsls	r6, r1, #29
 80028b4:	08c0      	lsrs	r0, r0, #3
 80028b6:	08c9      	lsrs	r1, r1, #3
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	4306      	orrs	r6, r0
 80028bc:	4219      	tst	r1, r3
 80028be:	d008      	beq.n	80028d2 <__aeabi_dsub+0x22e>
 80028c0:	4660      	mov	r0, ip
 80028c2:	08c0      	lsrs	r0, r0, #3
 80028c4:	4218      	tst	r0, r3
 80028c6:	d104      	bne.n	80028d2 <__aeabi_dsub+0x22e>
 80028c8:	4663      	mov	r3, ip
 80028ca:	0001      	movs	r1, r0
 80028cc:	08d2      	lsrs	r2, r2, #3
 80028ce:	075e      	lsls	r6, r3, #29
 80028d0:	4316      	orrs	r6, r2
 80028d2:	00f3      	lsls	r3, r6, #3
 80028d4:	4699      	mov	r9, r3
 80028d6:	00c9      	lsls	r1, r1, #3
 80028d8:	0f72      	lsrs	r2, r6, #29
 80028da:	4d44      	ldr	r5, [pc, #272]	; (80029ec <__aeabi_dsub+0x348>)
 80028dc:	4311      	orrs	r1, r2
 80028de:	464b      	mov	r3, r9
 80028e0:	08de      	lsrs	r6, r3, #3
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <__aeabi_dsub+0x348>)
 80028e4:	074f      	lsls	r7, r1, #29
 80028e6:	4337      	orrs	r7, r6
 80028e8:	08ca      	lsrs	r2, r1, #3
 80028ea:	429d      	cmp	r5, r3
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x24c>
 80028ee:	e06e      	b.n	80029ce <__aeabi_dsub+0x32a>
 80028f0:	0312      	lsls	r2, r2, #12
 80028f2:	056d      	lsls	r5, r5, #21
 80028f4:	0b12      	lsrs	r2, r2, #12
 80028f6:	0d6d      	lsrs	r5, r5, #21
 80028f8:	2100      	movs	r1, #0
 80028fa:	0312      	lsls	r2, r2, #12
 80028fc:	0b13      	lsrs	r3, r2, #12
 80028fe:	0d0a      	lsrs	r2, r1, #20
 8002900:	0512      	lsls	r2, r2, #20
 8002902:	431a      	orrs	r2, r3
 8002904:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <__aeabi_dsub+0x350>)
 8002906:	052d      	lsls	r5, r5, #20
 8002908:	4013      	ands	r3, r2
 800290a:	432b      	orrs	r3, r5
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	07e4      	lsls	r4, r4, #31
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	4323      	orrs	r3, r4
 8002914:	0038      	movs	r0, r7
 8002916:	0019      	movs	r1, r3
 8002918:	bc3c      	pop	{r2, r3, r4, r5}
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	46a2      	mov	sl, r4
 8002920:	46ab      	mov	fp, r5
 8002922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002924:	4663      	mov	r3, ip
 8002926:	4313      	orrs	r3, r2
 8002928:	d011      	beq.n	800294e <__aeabi_dsub+0x2aa>
 800292a:	1e73      	subs	r3, r6, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x28e>
 8002930:	e107      	b.n	8002b42 <__aeabi_dsub+0x49e>
 8002932:	1886      	adds	r6, r0, r2
 8002934:	4286      	cmp	r6, r0
 8002936:	4180      	sbcs	r0, r0
 8002938:	4461      	add	r1, ip
 800293a:	4240      	negs	r0, r0
 800293c:	1809      	adds	r1, r1, r0
 800293e:	2501      	movs	r5, #1
 8002940:	020b      	lsls	r3, r1, #8
 8002942:	d537      	bpl.n	80029b4 <__aeabi_dsub+0x310>
 8002944:	2502      	movs	r5, #2
 8002946:	e77b      	b.n	8002840 <__aeabi_dsub+0x19c>
 8002948:	003e      	movs	r6, r7
 800294a:	4661      	mov	r1, ip
 800294c:	4691      	mov	r9, r2
 800294e:	0035      	movs	r5, r6
 8002950:	e7c5      	b.n	80028de <__aeabi_dsub+0x23a>
 8002952:	465c      	mov	r4, fp
 8002954:	2d00      	cmp	r5, #0
 8002956:	d000      	beq.n	800295a <__aeabi_dsub+0x2b6>
 8002958:	e0e1      	b.n	8002b1e <__aeabi_dsub+0x47a>
 800295a:	000b      	movs	r3, r1
 800295c:	4303      	orrs	r3, r0
 800295e:	d0f3      	beq.n	8002948 <__aeabi_dsub+0x2a4>
 8002960:	1c73      	adds	r3, r6, #1
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x2c2>
 8002964:	e1ac      	b.n	8002cc0 <__aeabi_dsub+0x61c>
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <__aeabi_dsub+0x348>)
 8002968:	429f      	cmp	r7, r3
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x2ca>
 800296c:	e13a      	b.n	8002be4 <__aeabi_dsub+0x540>
 800296e:	43f3      	mvns	r3, r6
 8002970:	2b38      	cmp	r3, #56	; 0x38
 8002972:	dd00      	ble.n	8002976 <__aeabi_dsub+0x2d2>
 8002974:	e16f      	b.n	8002c56 <__aeabi_dsub+0x5b2>
 8002976:	2b1f      	cmp	r3, #31
 8002978:	dd00      	ble.n	800297c <__aeabi_dsub+0x2d8>
 800297a:	e18c      	b.n	8002c96 <__aeabi_dsub+0x5f2>
 800297c:	2520      	movs	r5, #32
 800297e:	000e      	movs	r6, r1
 8002980:	1aed      	subs	r5, r5, r3
 8002982:	40ae      	lsls	r6, r5
 8002984:	46b0      	mov	r8, r6
 8002986:	0006      	movs	r6, r0
 8002988:	46aa      	mov	sl, r5
 800298a:	40de      	lsrs	r6, r3
 800298c:	4645      	mov	r5, r8
 800298e:	4335      	orrs	r5, r6
 8002990:	002e      	movs	r6, r5
 8002992:	4655      	mov	r5, sl
 8002994:	40d9      	lsrs	r1, r3
 8002996:	40a8      	lsls	r0, r5
 8002998:	4663      	mov	r3, ip
 800299a:	1e45      	subs	r5, r0, #1
 800299c:	41a8      	sbcs	r0, r5
 800299e:	1a5b      	subs	r3, r3, r1
 80029a0:	469c      	mov	ip, r3
 80029a2:	4330      	orrs	r0, r6
 80029a4:	1a16      	subs	r6, r2, r0
 80029a6:	42b2      	cmp	r2, r6
 80029a8:	4192      	sbcs	r2, r2
 80029aa:	4663      	mov	r3, ip
 80029ac:	4252      	negs	r2, r2
 80029ae:	1a99      	subs	r1, r3, r2
 80029b0:	003d      	movs	r5, r7
 80029b2:	e6b4      	b.n	800271e <__aeabi_dsub+0x7a>
 80029b4:	2207      	movs	r2, #7
 80029b6:	4032      	ands	r2, r6
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d000      	beq.n	80029be <__aeabi_dsub+0x31a>
 80029bc:	e6e4      	b.n	8002788 <__aeabi_dsub+0xe4>
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <__aeabi_dsub+0x348>)
 80029c0:	08f6      	lsrs	r6, r6, #3
 80029c2:	074f      	lsls	r7, r1, #29
 80029c4:	4337      	orrs	r7, r6
 80029c6:	08ca      	lsrs	r2, r1, #3
 80029c8:	429d      	cmp	r5, r3
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x32a>
 80029cc:	e790      	b.n	80028f0 <__aeabi_dsub+0x24c>
 80029ce:	003b      	movs	r3, r7
 80029d0:	4313      	orrs	r3, r2
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x332>
 80029d4:	e1a6      	b.n	8002d24 <__aeabi_dsub+0x680>
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	031b      	lsls	r3, r3, #12
 80029da:	431a      	orrs	r2, r3
 80029dc:	0312      	lsls	r2, r2, #12
 80029de:	0b12      	lsrs	r2, r2, #12
 80029e0:	4d02      	ldr	r5, [pc, #8]	; (80029ec <__aeabi_dsub+0x348>)
 80029e2:	e789      	b.n	80028f8 <__aeabi_dsub+0x254>
 80029e4:	0015      	movs	r5, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	2700      	movs	r7, #0
 80029ea:	e785      	b.n	80028f8 <__aeabi_dsub+0x254>
 80029ec:	000007ff 	.word	0x000007ff
 80029f0:	ff7fffff 	.word	0xff7fffff
 80029f4:	800fffff 	.word	0x800fffff
 80029f8:	2e00      	cmp	r6, #0
 80029fa:	d000      	beq.n	80029fe <__aeabi_dsub+0x35a>
 80029fc:	e0c7      	b.n	8002b8e <__aeabi_dsub+0x4ea>
 80029fe:	1c6b      	adds	r3, r5, #1
 8002a00:	055e      	lsls	r6, r3, #21
 8002a02:	0d76      	lsrs	r6, r6, #21
 8002a04:	2e01      	cmp	r6, #1
 8002a06:	dc00      	bgt.n	8002a0a <__aeabi_dsub+0x366>
 8002a08:	e0f0      	b.n	8002bec <__aeabi_dsub+0x548>
 8002a0a:	4dc8      	ldr	r5, [pc, #800]	; (8002d2c <__aeabi_dsub+0x688>)
 8002a0c:	42ab      	cmp	r3, r5
 8002a0e:	d100      	bne.n	8002a12 <__aeabi_dsub+0x36e>
 8002a10:	e0b9      	b.n	8002b86 <__aeabi_dsub+0x4e2>
 8002a12:	1885      	adds	r5, r0, r2
 8002a14:	000a      	movs	r2, r1
 8002a16:	4285      	cmp	r5, r0
 8002a18:	4189      	sbcs	r1, r1
 8002a1a:	4462      	add	r2, ip
 8002a1c:	4249      	negs	r1, r1
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	2207      	movs	r2, #7
 8002a22:	07ce      	lsls	r6, r1, #31
 8002a24:	086d      	lsrs	r5, r5, #1
 8002a26:	432e      	orrs	r6, r5
 8002a28:	0849      	lsrs	r1, r1, #1
 8002a2a:	4032      	ands	r2, r6
 8002a2c:	001d      	movs	r5, r3
 8002a2e:	e6a9      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002a30:	49bf      	ldr	r1, [pc, #764]	; (8002d30 <__aeabi_dsub+0x68c>)
 8002a32:	1aed      	subs	r5, r5, r3
 8002a34:	4011      	ands	r1, r2
 8002a36:	2207      	movs	r2, #7
 8002a38:	4032      	ands	r2, r6
 8002a3a:	e6a3      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002a3c:	0032      	movs	r2, r6
 8002a3e:	3828      	subs	r0, #40	; 0x28
 8002a40:	4082      	lsls	r2, r0
 8002a42:	2600      	movs	r6, #0
 8002a44:	e686      	b.n	8002754 <__aeabi_dsub+0xb0>
 8002a46:	0030      	movs	r0, r6
 8002a48:	f000 fa16 	bl	8002e78 <__clzsi2>
 8002a4c:	3020      	adds	r0, #32
 8002a4e:	e673      	b.n	8002738 <__aeabi_dsub+0x94>
 8002a50:	4663      	mov	r3, ip
 8002a52:	4313      	orrs	r3, r2
 8002a54:	1e5a      	subs	r2, r3, #1
 8002a56:	4193      	sbcs	r3, r2
 8002a58:	1ac6      	subs	r6, r0, r3
 8002a5a:	42b0      	cmp	r0, r6
 8002a5c:	4180      	sbcs	r0, r0
 8002a5e:	4240      	negs	r0, r0
 8002a60:	1a09      	subs	r1, r1, r0
 8002a62:	e65c      	b.n	800271e <__aeabi_dsub+0x7a>
 8002a64:	000e      	movs	r6, r1
 8002a66:	4667      	mov	r7, ip
 8002a68:	4306      	orrs	r6, r0
 8002a6a:	4317      	orrs	r7, r2
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	d15e      	bne.n	8002b2e <__aeabi_dsub+0x48a>
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x3d2>
 8002a74:	e0f3      	b.n	8002c5e <__aeabi_dsub+0x5ba>
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x3d8>
 8002a7a:	e11e      	b.n	8002cba <__aeabi_dsub+0x616>
 8002a7c:	465c      	mov	r4, fp
 8002a7e:	4661      	mov	r1, ip
 8002a80:	4691      	mov	r9, r2
 8002a82:	e72c      	b.n	80028de <__aeabi_dsub+0x23a>
 8002a84:	4fa9      	ldr	r7, [pc, #676]	; (8002d2c <__aeabi_dsub+0x688>)
 8002a86:	42be      	cmp	r6, r7
 8002a88:	d07b      	beq.n	8002b82 <__aeabi_dsub+0x4de>
 8002a8a:	001e      	movs	r6, r3
 8002a8c:	e6f1      	b.n	8002872 <__aeabi_dsub+0x1ce>
 8002a8e:	0010      	movs	r0, r2
 8002a90:	3d1f      	subs	r5, #31
 8002a92:	40e8      	lsrs	r0, r5
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d003      	beq.n	8002aa0 <__aeabi_dsub+0x3fc>
 8002a98:	2140      	movs	r1, #64	; 0x40
 8002a9a:	1acb      	subs	r3, r1, r3
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	4316      	orrs	r6, r2
 8002aa0:	1e73      	subs	r3, r6, #1
 8002aa2:	419e      	sbcs	r6, r3
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	4306      	orrs	r6, r0
 8002aa8:	4032      	ands	r2, r6
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2500      	movs	r5, #0
 8002aae:	e783      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002ab0:	1a16      	subs	r6, r2, r0
 8002ab2:	4663      	mov	r3, ip
 8002ab4:	42b2      	cmp	r2, r6
 8002ab6:	4180      	sbcs	r0, r0
 8002ab8:	1a59      	subs	r1, r3, r1
 8002aba:	4240      	negs	r0, r0
 8002abc:	1a0b      	subs	r3, r1, r0
 8002abe:	4698      	mov	r8, r3
 8002ac0:	465c      	mov	r4, fp
 8002ac2:	e632      	b.n	800272a <__aeabi_dsub+0x86>
 8002ac4:	2e1f      	cmp	r6, #31
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dsub+0x426>
 8002ac8:	e0ab      	b.n	8002c22 <__aeabi_dsub+0x57e>
 8002aca:	2720      	movs	r7, #32
 8002acc:	1bbb      	subs	r3, r7, r6
 8002ace:	469a      	mov	sl, r3
 8002ad0:	4663      	mov	r3, ip
 8002ad2:	4657      	mov	r7, sl
 8002ad4:	40bb      	lsls	r3, r7
 8002ad6:	4699      	mov	r9, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	464f      	mov	r7, r9
 8002adc:	40f3      	lsrs	r3, r6
 8002ade:	431f      	orrs	r7, r3
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4657      	mov	r7, sl
 8002ae4:	40ba      	lsls	r2, r7
 8002ae6:	1e57      	subs	r7, r2, #1
 8002ae8:	41ba      	sbcs	r2, r7
 8002aea:	4313      	orrs	r3, r2
 8002aec:	4662      	mov	r2, ip
 8002aee:	40f2      	lsrs	r2, r6
 8002af0:	1889      	adds	r1, r1, r2
 8002af2:	e698      	b.n	8002826 <__aeabi_dsub+0x182>
 8002af4:	2720      	movs	r7, #32
 8002af6:	1bbb      	subs	r3, r7, r6
 8002af8:	469a      	mov	sl, r3
 8002afa:	4663      	mov	r3, ip
 8002afc:	4657      	mov	r7, sl
 8002afe:	40bb      	lsls	r3, r7
 8002b00:	4699      	mov	r9, r3
 8002b02:	0013      	movs	r3, r2
 8002b04:	464f      	mov	r7, r9
 8002b06:	40f3      	lsrs	r3, r6
 8002b08:	431f      	orrs	r7, r3
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	4657      	mov	r7, sl
 8002b0e:	40ba      	lsls	r2, r7
 8002b10:	1e57      	subs	r7, r2, #1
 8002b12:	41ba      	sbcs	r2, r7
 8002b14:	4313      	orrs	r3, r2
 8002b16:	4662      	mov	r2, ip
 8002b18:	40f2      	lsrs	r2, r6
 8002b1a:	1a89      	subs	r1, r1, r2
 8002b1c:	e79c      	b.n	8002a58 <__aeabi_dsub+0x3b4>
 8002b1e:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b20:	429f      	cmp	r7, r3
 8002b22:	d05f      	beq.n	8002be4 <__aeabi_dsub+0x540>
 8002b24:	2580      	movs	r5, #128	; 0x80
 8002b26:	042d      	lsls	r5, r5, #16
 8002b28:	4273      	negs	r3, r6
 8002b2a:	4329      	orrs	r1, r5
 8002b2c:	e720      	b.n	8002970 <__aeabi_dsub+0x2cc>
 8002b2e:	2e00      	cmp	r6, #0
 8002b30:	d10c      	bne.n	8002b4c <__aeabi_dsub+0x4a8>
 8002b32:	2f00      	cmp	r7, #0
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dsub+0x494>
 8002b36:	e0d0      	b.n	8002cda <__aeabi_dsub+0x636>
 8002b38:	465c      	mov	r4, fp
 8002b3a:	4661      	mov	r1, ip
 8002b3c:	4691      	mov	r9, r2
 8002b3e:	4d7b      	ldr	r5, [pc, #492]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b40:	e6cd      	b.n	80028de <__aeabi_dsub+0x23a>
 8002b42:	4f7a      	ldr	r7, [pc, #488]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b44:	42be      	cmp	r6, r7
 8002b46:	d01c      	beq.n	8002b82 <__aeabi_dsub+0x4de>
 8002b48:	001e      	movs	r6, r3
 8002b4a:	e665      	b.n	8002818 <__aeabi_dsub+0x174>
 8002b4c:	2f00      	cmp	r7, #0
 8002b4e:	d018      	beq.n	8002b82 <__aeabi_dsub+0x4de>
 8002b50:	08c0      	lsrs	r0, r0, #3
 8002b52:	074e      	lsls	r6, r1, #29
 8002b54:	4306      	orrs	r6, r0
 8002b56:	2080      	movs	r0, #128	; 0x80
 8002b58:	08c9      	lsrs	r1, r1, #3
 8002b5a:	0300      	lsls	r0, r0, #12
 8002b5c:	4201      	tst	r1, r0
 8002b5e:	d008      	beq.n	8002b72 <__aeabi_dsub+0x4ce>
 8002b60:	4663      	mov	r3, ip
 8002b62:	08dc      	lsrs	r4, r3, #3
 8002b64:	4204      	tst	r4, r0
 8002b66:	d104      	bne.n	8002b72 <__aeabi_dsub+0x4ce>
 8002b68:	0021      	movs	r1, r4
 8002b6a:	46da      	mov	sl, fp
 8002b6c:	08d2      	lsrs	r2, r2, #3
 8002b6e:	075e      	lsls	r6, r3, #29
 8002b70:	4316      	orrs	r6, r2
 8002b72:	00f3      	lsls	r3, r6, #3
 8002b74:	4699      	mov	r9, r3
 8002b76:	2401      	movs	r4, #1
 8002b78:	4653      	mov	r3, sl
 8002b7a:	00c9      	lsls	r1, r1, #3
 8002b7c:	0f72      	lsrs	r2, r6, #29
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	401c      	ands	r4, r3
 8002b82:	4d6a      	ldr	r5, [pc, #424]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b84:	e6ab      	b.n	80028de <__aeabi_dsub+0x23a>
 8002b86:	001d      	movs	r5, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2700      	movs	r7, #0
 8002b8c:	e6b4      	b.n	80028f8 <__aeabi_dsub+0x254>
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	d159      	bne.n	8002c46 <__aeabi_dsub+0x5a2>
 8002b92:	000b      	movs	r3, r1
 8002b94:	4303      	orrs	r3, r0
 8002b96:	d100      	bne.n	8002b9a <__aeabi_dsub+0x4f6>
 8002b98:	e6d6      	b.n	8002948 <__aeabi_dsub+0x2a4>
 8002b9a:	1c73      	adds	r3, r6, #1
 8002b9c:	d100      	bne.n	8002ba0 <__aeabi_dsub+0x4fc>
 8002b9e:	e0b2      	b.n	8002d06 <__aeabi_dsub+0x662>
 8002ba0:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <__aeabi_dsub+0x688>)
 8002ba2:	429f      	cmp	r7, r3
 8002ba4:	d01e      	beq.n	8002be4 <__aeabi_dsub+0x540>
 8002ba6:	43f3      	mvns	r3, r6
 8002ba8:	2b38      	cmp	r3, #56	; 0x38
 8002baa:	dc6f      	bgt.n	8002c8c <__aeabi_dsub+0x5e8>
 8002bac:	2b1f      	cmp	r3, #31
 8002bae:	dd00      	ble.n	8002bb2 <__aeabi_dsub+0x50e>
 8002bb0:	e097      	b.n	8002ce2 <__aeabi_dsub+0x63e>
 8002bb2:	2520      	movs	r5, #32
 8002bb4:	000e      	movs	r6, r1
 8002bb6:	1aed      	subs	r5, r5, r3
 8002bb8:	40ae      	lsls	r6, r5
 8002bba:	46b0      	mov	r8, r6
 8002bbc:	0006      	movs	r6, r0
 8002bbe:	46aa      	mov	sl, r5
 8002bc0:	40de      	lsrs	r6, r3
 8002bc2:	4645      	mov	r5, r8
 8002bc4:	4335      	orrs	r5, r6
 8002bc6:	002e      	movs	r6, r5
 8002bc8:	4655      	mov	r5, sl
 8002bca:	40a8      	lsls	r0, r5
 8002bcc:	40d9      	lsrs	r1, r3
 8002bce:	1e45      	subs	r5, r0, #1
 8002bd0:	41a8      	sbcs	r0, r5
 8002bd2:	448c      	add	ip, r1
 8002bd4:	4306      	orrs	r6, r0
 8002bd6:	18b6      	adds	r6, r6, r2
 8002bd8:	4296      	cmp	r6, r2
 8002bda:	4192      	sbcs	r2, r2
 8002bdc:	4251      	negs	r1, r2
 8002bde:	4461      	add	r1, ip
 8002be0:	003d      	movs	r5, r7
 8002be2:	e625      	b.n	8002830 <__aeabi_dsub+0x18c>
 8002be4:	003d      	movs	r5, r7
 8002be6:	4661      	mov	r1, ip
 8002be8:	4691      	mov	r9, r2
 8002bea:	e678      	b.n	80028de <__aeabi_dsub+0x23a>
 8002bec:	000b      	movs	r3, r1
 8002bee:	4303      	orrs	r3, r0
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	d000      	beq.n	8002bf6 <__aeabi_dsub+0x552>
 8002bf4:	e655      	b.n	80028a2 <__aeabi_dsub+0x1fe>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f5      	beq.n	8002be6 <__aeabi_dsub+0x542>
 8002bfa:	4663      	mov	r3, ip
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x55e>
 8002c00:	e66d      	b.n	80028de <__aeabi_dsub+0x23a>
 8002c02:	1886      	adds	r6, r0, r2
 8002c04:	4286      	cmp	r6, r0
 8002c06:	4180      	sbcs	r0, r0
 8002c08:	4461      	add	r1, ip
 8002c0a:	4240      	negs	r0, r0
 8002c0c:	1809      	adds	r1, r1, r0
 8002c0e:	2200      	movs	r2, #0
 8002c10:	020b      	lsls	r3, r1, #8
 8002c12:	d400      	bmi.n	8002c16 <__aeabi_dsub+0x572>
 8002c14:	e6d0      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <__aeabi_dsub+0x68c>)
 8002c18:	3501      	adds	r5, #1
 8002c1a:	4019      	ands	r1, r3
 8002c1c:	e5b2      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002c1e:	46b1      	mov	r9, r6
 8002c20:	e65d      	b.n	80028de <__aeabi_dsub+0x23a>
 8002c22:	0033      	movs	r3, r6
 8002c24:	4667      	mov	r7, ip
 8002c26:	3b20      	subs	r3, #32
 8002c28:	40df      	lsrs	r7, r3
 8002c2a:	003b      	movs	r3, r7
 8002c2c:	2e20      	cmp	r6, #32
 8002c2e:	d005      	beq.n	8002c3c <__aeabi_dsub+0x598>
 8002c30:	2740      	movs	r7, #64	; 0x40
 8002c32:	1bbf      	subs	r7, r7, r6
 8002c34:	4666      	mov	r6, ip
 8002c36:	40be      	lsls	r6, r7
 8002c38:	4332      	orrs	r2, r6
 8002c3a:	4690      	mov	r8, r2
 8002c3c:	4646      	mov	r6, r8
 8002c3e:	1e72      	subs	r2, r6, #1
 8002c40:	4196      	sbcs	r6, r2
 8002c42:	4333      	orrs	r3, r6
 8002c44:	e5ef      	b.n	8002826 <__aeabi_dsub+0x182>
 8002c46:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <__aeabi_dsub+0x688>)
 8002c48:	429f      	cmp	r7, r3
 8002c4a:	d0cb      	beq.n	8002be4 <__aeabi_dsub+0x540>
 8002c4c:	2580      	movs	r5, #128	; 0x80
 8002c4e:	042d      	lsls	r5, r5, #16
 8002c50:	4273      	negs	r3, r6
 8002c52:	4329      	orrs	r1, r5
 8002c54:	e7a8      	b.n	8002ba8 <__aeabi_dsub+0x504>
 8002c56:	4308      	orrs	r0, r1
 8002c58:	1e41      	subs	r1, r0, #1
 8002c5a:	4188      	sbcs	r0, r1
 8002c5c:	e6a2      	b.n	80029a4 <__aeabi_dsub+0x300>
 8002c5e:	2f00      	cmp	r7, #0
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0x5c0>
 8002c62:	e63c      	b.n	80028de <__aeabi_dsub+0x23a>
 8002c64:	4663      	mov	r3, ip
 8002c66:	1a86      	subs	r6, r0, r2
 8002c68:	1acf      	subs	r7, r1, r3
 8002c6a:	42b0      	cmp	r0, r6
 8002c6c:	419b      	sbcs	r3, r3
 8002c6e:	425b      	negs	r3, r3
 8002c70:	1afb      	subs	r3, r7, r3
 8002c72:	4698      	mov	r8, r3
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	d54e      	bpl.n	8002d16 <__aeabi_dsub+0x672>
 8002c78:	1a16      	subs	r6, r2, r0
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	42b2      	cmp	r2, r6
 8002c7e:	4192      	sbcs	r2, r2
 8002c80:	1a59      	subs	r1, r3, r1
 8002c82:	4252      	negs	r2, r2
 8002c84:	1a89      	subs	r1, r1, r2
 8002c86:	465c      	mov	r4, fp
 8002c88:	2200      	movs	r2, #0
 8002c8a:	e57b      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002c8c:	4301      	orrs	r1, r0
 8002c8e:	000e      	movs	r6, r1
 8002c90:	1e71      	subs	r1, r6, #1
 8002c92:	418e      	sbcs	r6, r1
 8002c94:	e79f      	b.n	8002bd6 <__aeabi_dsub+0x532>
 8002c96:	001d      	movs	r5, r3
 8002c98:	000e      	movs	r6, r1
 8002c9a:	3d20      	subs	r5, #32
 8002c9c:	40ee      	lsrs	r6, r5
 8002c9e:	46b0      	mov	r8, r6
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d004      	beq.n	8002cae <__aeabi_dsub+0x60a>
 8002ca4:	2540      	movs	r5, #64	; 0x40
 8002ca6:	1aeb      	subs	r3, r5, r3
 8002ca8:	4099      	lsls	r1, r3
 8002caa:	4308      	orrs	r0, r1
 8002cac:	4681      	mov	r9, r0
 8002cae:	4648      	mov	r0, r9
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	1e41      	subs	r1, r0, #1
 8002cb4:	4188      	sbcs	r0, r1
 8002cb6:	4318      	orrs	r0, r3
 8002cb8:	e674      	b.n	80029a4 <__aeabi_dsub+0x300>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2400      	movs	r4, #0
 8002cbe:	e617      	b.n	80028f0 <__aeabi_dsub+0x24c>
 8002cc0:	1a16      	subs	r6, r2, r0
 8002cc2:	4663      	mov	r3, ip
 8002cc4:	42b2      	cmp	r2, r6
 8002cc6:	4192      	sbcs	r2, r2
 8002cc8:	1a59      	subs	r1, r3, r1
 8002cca:	4252      	negs	r2, r2
 8002ccc:	1a89      	subs	r1, r1, r2
 8002cce:	003d      	movs	r5, r7
 8002cd0:	e525      	b.n	800271e <__aeabi_dsub+0x7a>
 8002cd2:	4661      	mov	r1, ip
 8002cd4:	4691      	mov	r9, r2
 8002cd6:	4d15      	ldr	r5, [pc, #84]	; (8002d2c <__aeabi_dsub+0x688>)
 8002cd8:	e601      	b.n	80028de <__aeabi_dsub+0x23a>
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	2400      	movs	r4, #0
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	e679      	b.n	80029d6 <__aeabi_dsub+0x332>
 8002ce2:	001d      	movs	r5, r3
 8002ce4:	000e      	movs	r6, r1
 8002ce6:	3d20      	subs	r5, #32
 8002ce8:	40ee      	lsrs	r6, r5
 8002cea:	46b0      	mov	r8, r6
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d004      	beq.n	8002cfa <__aeabi_dsub+0x656>
 8002cf0:	2540      	movs	r5, #64	; 0x40
 8002cf2:	1aeb      	subs	r3, r5, r3
 8002cf4:	4099      	lsls	r1, r3
 8002cf6:	4308      	orrs	r0, r1
 8002cf8:	4681      	mov	r9, r0
 8002cfa:	464e      	mov	r6, r9
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	1e71      	subs	r1, r6, #1
 8002d00:	418e      	sbcs	r6, r1
 8002d02:	431e      	orrs	r6, r3
 8002d04:	e767      	b.n	8002bd6 <__aeabi_dsub+0x532>
 8002d06:	1886      	adds	r6, r0, r2
 8002d08:	4296      	cmp	r6, r2
 8002d0a:	419b      	sbcs	r3, r3
 8002d0c:	4461      	add	r1, ip
 8002d0e:	425b      	negs	r3, r3
 8002d10:	18c9      	adds	r1, r1, r3
 8002d12:	003d      	movs	r5, r7
 8002d14:	e58c      	b.n	8002830 <__aeabi_dsub+0x18c>
 8002d16:	4647      	mov	r7, r8
 8002d18:	4337      	orrs	r7, r6
 8002d1a:	d0ce      	beq.n	8002cba <__aeabi_dsub+0x616>
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	4641      	mov	r1, r8
 8002d20:	4032      	ands	r2, r6
 8002d22:	e649      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002d24:	2700      	movs	r7, #0
 8002d26:	003a      	movs	r2, r7
 8002d28:	e5e6      	b.n	80028f8 <__aeabi_dsub+0x254>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	000007ff 	.word	0x000007ff
 8002d30:	ff7fffff 	.word	0xff7fffff

08002d34 <__aeabi_d2iz>:
 8002d34:	b530      	push	{r4, r5, lr}
 8002d36:	4d14      	ldr	r5, [pc, #80]	; (8002d88 <__aeabi_d2iz+0x54>)
 8002d38:	030a      	lsls	r2, r1, #12
 8002d3a:	004b      	lsls	r3, r1, #1
 8002d3c:	0b12      	lsrs	r2, r2, #12
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	0fc9      	lsrs	r1, r1, #31
 8002d42:	2400      	movs	r4, #0
 8002d44:	42ab      	cmp	r3, r5
 8002d46:	dd11      	ble.n	8002d6c <__aeabi_d2iz+0x38>
 8002d48:	4c10      	ldr	r4, [pc, #64]	; (8002d8c <__aeabi_d2iz+0x58>)
 8002d4a:	42a3      	cmp	r3, r4
 8002d4c:	dc10      	bgt.n	8002d70 <__aeabi_d2iz+0x3c>
 8002d4e:	2480      	movs	r4, #128	; 0x80
 8002d50:	0364      	lsls	r4, r4, #13
 8002d52:	4322      	orrs	r2, r4
 8002d54:	4c0e      	ldr	r4, [pc, #56]	; (8002d90 <__aeabi_d2iz+0x5c>)
 8002d56:	1ae4      	subs	r4, r4, r3
 8002d58:	2c1f      	cmp	r4, #31
 8002d5a:	dd0c      	ble.n	8002d76 <__aeabi_d2iz+0x42>
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <__aeabi_d2iz+0x60>)
 8002d5e:	1ac3      	subs	r3, r0, r3
 8002d60:	40da      	lsrs	r2, r3
 8002d62:	0013      	movs	r3, r2
 8002d64:	425c      	negs	r4, r3
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d100      	bne.n	8002d6c <__aeabi_d2iz+0x38>
 8002d6a:	001c      	movs	r4, r3
 8002d6c:	0020      	movs	r0, r4
 8002d6e:	bd30      	pop	{r4, r5, pc}
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <__aeabi_d2iz+0x64>)
 8002d72:	18cc      	adds	r4, r1, r3
 8002d74:	e7fa      	b.n	8002d6c <__aeabi_d2iz+0x38>
 8002d76:	4d09      	ldr	r5, [pc, #36]	; (8002d9c <__aeabi_d2iz+0x68>)
 8002d78:	40e0      	lsrs	r0, r4
 8002d7a:	46ac      	mov	ip, r5
 8002d7c:	4463      	add	r3, ip
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	0013      	movs	r3, r2
 8002d82:	4303      	orrs	r3, r0
 8002d84:	e7ee      	b.n	8002d64 <__aeabi_d2iz+0x30>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	000003fe 	.word	0x000003fe
 8002d8c:	0000041d 	.word	0x0000041d
 8002d90:	00000433 	.word	0x00000433
 8002d94:	00000413 	.word	0x00000413
 8002d98:	7fffffff 	.word	0x7fffffff
 8002d9c:	fffffbed 	.word	0xfffffbed

08002da0 <__aeabi_i2d>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d02d      	beq.n	8002e02 <__aeabi_i2d+0x62>
 8002da6:	17c3      	asrs	r3, r0, #31
 8002da8:	18c5      	adds	r5, r0, r3
 8002daa:	405d      	eors	r5, r3
 8002dac:	0fc4      	lsrs	r4, r0, #31
 8002dae:	0028      	movs	r0, r5
 8002db0:	f000 f862 	bl	8002e78 <__clzsi2>
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <__aeabi_i2d+0x6c>)
 8002db6:	1a1b      	subs	r3, r3, r0
 8002db8:	055b      	lsls	r3, r3, #21
 8002dba:	0d5b      	lsrs	r3, r3, #21
 8002dbc:	280a      	cmp	r0, #10
 8002dbe:	dd15      	ble.n	8002dec <__aeabi_i2d+0x4c>
 8002dc0:	380b      	subs	r0, #11
 8002dc2:	4085      	lsls	r5, r0
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	032d      	lsls	r5, r5, #12
 8002dc8:	0b2d      	lsrs	r5, r5, #12
 8002dca:	2100      	movs	r1, #0
 8002dcc:	0010      	movs	r0, r2
 8002dce:	032d      	lsls	r5, r5, #12
 8002dd0:	0d0a      	lsrs	r2, r1, #20
 8002dd2:	0b2d      	lsrs	r5, r5, #12
 8002dd4:	0512      	lsls	r2, r2, #20
 8002dd6:	432a      	orrs	r2, r5
 8002dd8:	4d0d      	ldr	r5, [pc, #52]	; (8002e10 <__aeabi_i2d+0x70>)
 8002dda:	051b      	lsls	r3, r3, #20
 8002ddc:	402a      	ands	r2, r5
 8002dde:	4313      	orrs	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	07e4      	lsls	r4, r4, #31
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	4323      	orrs	r3, r4
 8002de8:	0019      	movs	r1, r3
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	0002      	movs	r2, r0
 8002dee:	0029      	movs	r1, r5
 8002df0:	3215      	adds	r2, #21
 8002df2:	4091      	lsls	r1, r2
 8002df4:	000a      	movs	r2, r1
 8002df6:	210b      	movs	r1, #11
 8002df8:	1a08      	subs	r0, r1, r0
 8002dfa:	40c5      	lsrs	r5, r0
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	0b2d      	lsrs	r5, r5, #12
 8002e00:	e7e3      	b.n	8002dca <__aeabi_i2d+0x2a>
 8002e02:	2400      	movs	r4, #0
 8002e04:	2300      	movs	r3, #0
 8002e06:	2500      	movs	r5, #0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	e7de      	b.n	8002dca <__aeabi_i2d+0x2a>
 8002e0c:	0000041e 	.word	0x0000041e
 8002e10:	800fffff 	.word	0x800fffff

08002e14 <__aeabi_ui2d>:
 8002e14:	b510      	push	{r4, lr}
 8002e16:	1e04      	subs	r4, r0, #0
 8002e18:	d025      	beq.n	8002e66 <__aeabi_ui2d+0x52>
 8002e1a:	f000 f82d 	bl	8002e78 <__clzsi2>
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <__aeabi_ui2d+0x5c>)
 8002e20:	1a1b      	subs	r3, r3, r0
 8002e22:	055b      	lsls	r3, r3, #21
 8002e24:	0d5b      	lsrs	r3, r3, #21
 8002e26:	280a      	cmp	r0, #10
 8002e28:	dd12      	ble.n	8002e50 <__aeabi_ui2d+0x3c>
 8002e2a:	380b      	subs	r0, #11
 8002e2c:	4084      	lsls	r4, r0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	0324      	lsls	r4, r4, #12
 8002e32:	0b24      	lsrs	r4, r4, #12
 8002e34:	2100      	movs	r1, #0
 8002e36:	0010      	movs	r0, r2
 8002e38:	0324      	lsls	r4, r4, #12
 8002e3a:	0d0a      	lsrs	r2, r1, #20
 8002e3c:	0b24      	lsrs	r4, r4, #12
 8002e3e:	0512      	lsls	r2, r2, #20
 8002e40:	4322      	orrs	r2, r4
 8002e42:	4c0c      	ldr	r4, [pc, #48]	; (8002e74 <__aeabi_ui2d+0x60>)
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	4022      	ands	r2, r4
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	0859      	lsrs	r1, r3, #1
 8002e4e:	bd10      	pop	{r4, pc}
 8002e50:	0002      	movs	r2, r0
 8002e52:	0021      	movs	r1, r4
 8002e54:	3215      	adds	r2, #21
 8002e56:	4091      	lsls	r1, r2
 8002e58:	000a      	movs	r2, r1
 8002e5a:	210b      	movs	r1, #11
 8002e5c:	1a08      	subs	r0, r1, r0
 8002e5e:	40c4      	lsrs	r4, r0
 8002e60:	0324      	lsls	r4, r4, #12
 8002e62:	0b24      	lsrs	r4, r4, #12
 8002e64:	e7e6      	b.n	8002e34 <__aeabi_ui2d+0x20>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2400      	movs	r4, #0
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	e7e2      	b.n	8002e34 <__aeabi_ui2d+0x20>
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	0000041e 	.word	0x0000041e
 8002e74:	800fffff 	.word	0x800fffff

08002e78 <__clzsi2>:
 8002e78:	211c      	movs	r1, #28
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	4298      	cmp	r0, r3
 8002e80:	d301      	bcc.n	8002e86 <__clzsi2+0xe>
 8002e82:	0c00      	lsrs	r0, r0, #16
 8002e84:	3910      	subs	r1, #16
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	4298      	cmp	r0, r3
 8002e8a:	d301      	bcc.n	8002e90 <__clzsi2+0x18>
 8002e8c:	0a00      	lsrs	r0, r0, #8
 8002e8e:	3908      	subs	r1, #8
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	4298      	cmp	r0, r3
 8002e94:	d301      	bcc.n	8002e9a <__clzsi2+0x22>
 8002e96:	0900      	lsrs	r0, r0, #4
 8002e98:	3904      	subs	r1, #4
 8002e9a:	a202      	add	r2, pc, #8	; (adr r2, 8002ea4 <__clzsi2+0x2c>)
 8002e9c:	5c10      	ldrb	r0, [r2, r0]
 8002e9e:	1840      	adds	r0, r0, r1
 8002ea0:	4770      	bx	lr
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	02020304 	.word	0x02020304
 8002ea8:	01010101 	.word	0x01010101
	...

08002eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002eb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eba:	e003      	b.n	8002ec4 <LoopCopyDataInit>

08002ebc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002ebe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ec0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ec2:	3104      	adds	r1, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ec4:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002ec8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ecc:	d3f6      	bcc.n	8002ebc <CopyDataInit>
  ldr  r2, =_sbss
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <LoopForever+0x12>)
  b  LoopFillZerobss
 8002ed0:	e002      	b.n	8002ed8 <LoopFillZerobss>

08002ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002ed2:	2300      	movs	r3, #0
  str  r3, [r2]
 8002ed4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed6:	3204      	adds	r2, #4

08002ed8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <LoopForever+0x16>)
  cmp  r2, r3
 8002eda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002edc:	d3f9      	bcc.n	8002ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ede:	f004 fccf 	bl	8007880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f006 fb91 	bl	8009608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee6:	f000 f8cc 	bl	8003082 <main>

08002eea <LoopForever>:

LoopForever:
    b LoopForever
 8002eea:	e7fe      	b.n	8002eea <LoopForever>
  ldr   r0, =_estack
 8002eec:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002ef0:	08009b58 	.word	0x08009b58
  ldr  r0, =_sdata
 8002ef4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ef8:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 8002efc:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 8002f00:	200003dc 	.word	0x200003dc

08002f04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC1_COMP_IRQHandler>
	...

08002f08 <SystemClock_Config>:
/** System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b094      	sub	sp, #80	; 0x50
 8002f0c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
    /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8002f0e:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <SystemClock_Config+0x94>)
 8002f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f12:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <SystemClock_Config+0x94>)
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0549      	lsls	r1, r1, #21
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <SystemClock_Config+0x98>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <SystemClock_Config+0x9c>)
 8002f22:	401a      	ands	r2, r3
 8002f24:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <SystemClock_Config+0x98>)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	0109      	lsls	r1, r1, #4
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	2202      	movs	r2, #2
 8002f32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2200      	movs	r2, #0
 8002f38:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2202      	movs	r2, #2
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	2200      	movs	r2, #0
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	02d2      	lsls	r2, r2, #11
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	03d2      	lsls	r2, r2, #15
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	2210      	movs	r2, #16
 8002f60:	611a      	str	r2, [r3, #16]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	0018      	movs	r0, r3
 8002f66:	f005 f885 	bl	8008074 <HAL_RCC_OscConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002f6a:	213c      	movs	r1, #60	; 0x3c
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	220f      	movs	r2, #15
 8002f70:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f72:	187b      	adds	r3, r7, r1
 8002f74:	2203      	movs	r2, #3
 8002f76:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8002f7e:	187b      	adds	r3, r7, r1
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);  
 8002f8a:	187b      	adds	r3, r7, r1
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f005 fc1a 	bl	80087c8 <HAL_RCC_ClockConfig>
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b014      	add	sp, #80	; 0x50
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	ffffe7ff 	.word	0xffffe7ff

08002fa8 <APPLI_EnterSLEEPMode>:
* @param  None
* @retval None
*/

void APPLI_EnterSLEEPMode()
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0

  /* Request to enter SLEEP mode */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002fac:	2101      	movs	r1, #1
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f004 ffe8 	bl	8007f84 <HAL_PWR_EnterSLEEPMode>
 
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <APPLI_EnterSTOPMode>:
* @param  None
* @retval None
*/

void APPLI_EnterSTOPMode()
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	af00      	add	r7, sp, #0

  /*## Enter Stop Mode #######################################################*/
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f005 f80d 	bl	8007fe0 <HAL_PWR_EnterSTOPMode>
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <APPLI_EnterSTANDBYMode>:
* @param  None
* @retval None
*/
  
void APPLI_EnterSTANDBYMode()
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSTANDBYMode();
 8002fd0:	f005 f83a 	bl	8008048 <HAL_PWR_EnterSTANDBYMode>
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8002fe2:	2008      	movs	r0, #8
 8002fe4:	f006 fb34 	bl	8009650 <malloc>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	0011      	movs	r1, r2
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f805 	bl	8003002 <fsm_init>
  return this;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}

08003002 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}

08003022 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e01d      	b.n	800306e <fsm_fire+0x4c>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d114      	bne.n	8003068 <fsm_fire+0x46>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	0010      	movs	r0, r2
 8003046:	4798      	blx	r3
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d00d      	beq.n	8003068 <fsm_fire+0x46>
      this->current_state = t->dest_state;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	601a      	str	r2, [r3, #0]
      if (t->out)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00d      	beq.n	8003078 <fsm_fire+0x56>
        t->out(this);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	0010      	movs	r0, r2
 8003064:	4798      	blx	r3
      break;
 8003066:	e007      	b.n	8003078 <fsm_fire+0x56>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3310      	adds	r3, #16
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	dadd      	bge.n	8003032 <fsm_fire+0x10>
    }
  }
}
 8003076:	e000      	b.n	800307a <fsm_fire+0x58>
      break;
 8003078:	46c0      	nop			; (mov r8, r8)
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	b004      	add	sp, #16
 8003080:	bd80      	pop	{r7, pc}

08003082 <main>:
* @brief  Main program.
* @param  None
* @retval None
*/
int main(void)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	af00      	add	r7, sp, #0
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003086:	f004 fc39 	bl	80078fc <HAL_Init>
  
  Clock_Enable();
 800308a:	f000 f813 	bl	80030b4 <Clock_Enable>
  
  /* Configure the system clock */
 #if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
 SystemClock_Config();
 800308e:	f7ff ff3b 	bl	8002f08 <SystemClock_Config>
  }
#endif 
  
  /* Initialize LEDs*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  RadioShieldLedInit(RADIO_SHIELD_LED);
 8003092:	2000      	movs	r0, #0
 8003094:	f003 ff5c 	bl	8006f50 <RadioShieldLedInit>
#endif
  
  BSP_LED_Init(LED2);
 8003098:	2000      	movs	r0, #0
 800309a:	f003 fd79 	bl	8006b90 <BSP_LED_Init>
  HAL_Radio_Init();
 800309e:	f000 fa4b 	bl	8003538 <HAL_Radio_Init>
  
  /* Initialize Buttons*/
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80030a2:	2101      	movs	r1, #1
 80030a4:	2000      	movs	r0, #0
 80030a6:	f003 fddf 	bl	8006c68 <BSP_PB_Init>
  
  P2P_Init();
 80030aa:	f000 fb05 	bl	80036b8 <P2P_Init>
  
  while (1)
  { 
    /* Data communication start */   
    P2P_Process();
 80030ae:	f000 fa53 	bl	8003558 <P2P_Process>
 80030b2:	e7fc      	b.n	80030ae <main+0x2c>

080030b4 <Clock_Enable>:
  } 
}


void Clock_Enable(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
  __GPIOA_CLK_ENABLE();  
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <Clock_Enable+0x70>)
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <Clock_Enable+0x70>)
 80030c0:	2101      	movs	r1, #1
 80030c2:	430a      	orrs	r2, r1
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <Clock_Enable+0x70>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();  
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <Clock_Enable+0x70>)
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <Clock_Enable+0x70>)
 80030d8:	2102      	movs	r1, #2
 80030da:	430a      	orrs	r2, r1
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <Clock_Enable+0x70>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	2202      	movs	r2, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
  __GPIOC_CLK_ENABLE();  
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <Clock_Enable+0x70>)
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <Clock_Enable+0x70>)
 80030f0:	2104      	movs	r1, #4
 80030f2:	430a      	orrs	r2, r1
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <Clock_Enable+0x70>)
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	2204      	movs	r2, #4
 80030fc:	4013      	ands	r3, r2
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
  __GPIOD_CLK_ENABLE();  
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <Clock_Enable+0x70>)
 8003104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <Clock_Enable+0x70>)
 8003108:	2108      	movs	r1, #8
 800310a:	430a      	orrs	r2, r1
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <Clock_Enable+0x70>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	2208      	movs	r2, #8
 8003114:	4013      	ands	r3, r2
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40021000 	.word	0x40021000

08003128 <time_out_rx>:
fsm_t* radio_fsm;


/* Private function prototypes -----------------------------------------------*/
static int time_out_rx(fsm_t* this)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	return ((rx_timeout)||(!exitTime));
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <time_out_rx+0x2c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <time_out_rx+0x1c>
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <time_out_rx+0x30>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <time_out_rx+0x20>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <time_out_rx+0x22>
 8003148:	2300      	movs	r3, #0
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	200002b0 	.word	0x200002b0
 8003158:	200002b1 	.word	0x200002b1

0800315c <tx_flag>:

static int tx_flag(fsm_t* this)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	return tx_value;
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <tx_flag+0x14>)
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}
 8003170:	200002b4 	.word	0x200002b4

08003174 <rx_flag>:

static int rx_flag(fsm_t* this)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	return xRxDoneFlag;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <rx_flag+0x18>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b002      	add	sp, #8
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	200002ac 	.word	0x200002ac

08003190 <data_recived>:


static int data_recived(fsm_t* this)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	if(xRxFrame.Cmd == LED_TOGGLE) return 1;
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <data_recived+0x20>)
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	2bff      	cmp	r3, #255	; 0xff
 800319e:	d101      	bne.n	80031a4 <data_recived+0x14>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <data_recived+0x16>
	else return 0;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	200002c8 	.word	0x200002c8

080031b4 <ack_recived>:

static int ack_recived(fsm_t* this)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    if(xRxFrame.Cmd == ACK_OK) return 1;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <ack_recived+0x20>)
 80031be:	78db      	ldrb	r3, [r3, #3]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <ack_recived+0x14>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <ack_recived+0x16>
    else return 0;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	200002c8 	.word	0x200002c8

080031d8 <multicast>:

static int multicast(fsm_t* this)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

	if ((dest_addr == MULTICAST_ADDRESS) || (dest_addr == BROADCAST_ADDRESS)) return 1;
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <multicast+0x28>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2bee      	cmp	r3, #238	; 0xee
 80031e6:	d003      	beq.n	80031f0 <multicast+0x18>
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <multicast+0x28>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2bff      	cmp	r3, #255	; 0xff
 80031ee:	d101      	bne.n	80031f4 <multicast+0x1c>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <multicast+0x1e>
	else return 0;
 80031f4:	2300      	movs	r3, #0

}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b002      	add	sp, #8
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20000364 	.word	0x20000364

08003204 <address_known>:

static int address_known(fsm_t* this)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	if ((dest_addr != MULTICAST_ADDRESS) && (dest_addr != BROADCAST_ADDRESS)) return 1;
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <address_known+0x28>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2bee      	cmp	r3, #238	; 0xee
 8003212:	d005      	beq.n	8003220 <address_known+0x1c>
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <address_known+0x28>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2bff      	cmp	r3, #255	; 0xff
 800321a:	d001      	beq.n	8003220 <address_known+0x1c>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <address_known+0x1e>
	else return 0;
 8003220:	2300      	movs	r3, #0

}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	20000364 	.word	0x20000364

08003230 <tx_received>:

static int tx_received(fsm_t* this)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	return xTxDoneFlag;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <tx_received+0x18>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b002      	add	sp, #8
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	200002ad 	.word	0x200002ad

0800324c <msg_command>:

static int msg_command(fsm_t* this)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	if (xTxFrame.Cmd == LED_TOGGLE) return 1;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <msg_command+0x20>)
 8003256:	78db      	ldrb	r3, [r3, #3]
 8003258:	2bff      	cmp	r3, #255	; 0xff
 800325a:	d101      	bne.n	8003260 <msg_command+0x14>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <msg_command+0x16>
	else return 0;
 8003260:	2300      	movs	r3, #0
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b002      	add	sp, #8
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	200002bc 	.word	0x200002bc

08003270 <ack_command>:

static int ack_command(fsm_t* this)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	if (xTxFrame.Cmd == ACK_OK) return 1;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <ack_command+0x20>)
 800327a:	78db      	ldrb	r3, [r3, #3]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <ack_command+0x14>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <ack_command+0x16>
	else return 0;
 8003284:	2300      	movs	r3, #0

}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b002      	add	sp, #8
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	200002bc 	.word	0x200002bc

08003294 <restart>:

static int restart(fsm_t* this)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	return IDLE_Process;
 800329c:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <restart+0x14>)
 800329e:	781b      	ldrb	r3, [r3, #0]
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000374 	.word	0x20000374

080032ac <ACK_confirm>:

static int ACK_confirm (fsm_t* this)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	return ACK_Process;
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <ACK_confirm+0x14>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000366 	.word	0x20000366

080032c4 <EN_Rx>:

void EN_Rx(fsm_t* this)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    AppliReceiveBuff(aReceiveBuffer, RxLength);
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <EN_Rx+0x2c>)
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <EN_Rx+0x30>)
 80032d2:	0011      	movs	r1, r2
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 f9b9 	bl	800364c <AppliReceiveBuff>
    rx_timeout = RESET;
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <EN_Rx+0x34>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
    BSP_LED_Toggle(LED2);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f003 fcab 	bl	8006c3c <BSP_LED_Toggle>
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b002      	add	sp, #8
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000248 	.word	0x20000248
 80032f4:	2000024c 	.word	0x2000024c
 80032f8:	200002b0 	.word	0x200002b0

080032fc <send_data>:

void send_data(fsm_t* this)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	tx_value = RESET;
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <send_data+0x58>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
	xTxFrame.Cmd = LED_TOGGLE;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <send_data+0x5c>)
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	70da      	strb	r2, [r3, #3]
	xTxFrame.CmdLen = 0x01;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <send_data+0x5c>)
 8003312:	2201      	movs	r2, #1
 8003314:	709a      	strb	r2, [r3, #2]
	xTxFrame.Cmdtag = txCounter++;
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <send_data+0x60>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	b291      	uxth	r1, r2
 800331e:	4a0f      	ldr	r2, [pc, #60]	; (800335c <send_data+0x60>)
 8003320:	8011      	strh	r1, [r2, #0]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <send_data+0x5c>)
 8003326:	701a      	strb	r2, [r3, #0]
	xTxFrame.CmdType = APPLI_CMD;
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <send_data+0x5c>)
 800332a:	2211      	movs	r2, #17
 800332c:	705a      	strb	r2, [r3, #1]
	xTxFrame.DataBuff = aTransmitBuffer;
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <send_data+0x5c>)
 8003330:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <send_data+0x64>)
 8003332:	609a      	str	r2, [r3, #8]
	xTxFrame.DataLen = TxLength;
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <send_data+0x68>)
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <send_data+0x5c>)
 800333a:	711a      	strb	r2, [r3, #4]


	/*COGNITIVE FUNCTION*/


	AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <send_data+0x5c>)
 800333e:	791a      	ldrb	r2, [r3, #4]
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <send_data+0x5c>)
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f000 f913 	bl	8003570 <AppliSendBuff>

}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	200002b4 	.word	0x200002b4
 8003358:	200002bc 	.word	0x200002bc
 800335c:	20000336 	.word	0x20000336
 8003360:	200000a4 	.word	0x200000a4
 8003364:	200000a0 	.word	0x200000a0

08003368 <read_RX_Data>:

void read_RX_Data(fsm_t* this)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	xRxDoneFlag = RESET;
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <read_RX_Data+0x84>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]

	Spirit1GetRxPacket(aReceiveBuffer,&RxLength);
 8003376:	4a1e      	ldr	r2, [pc, #120]	; (80033f0 <read_RX_Data+0x88>)
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <read_RX_Data+0x8c>)
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f003 fba3 	bl	8006ac8 <Spirit1GetRxPacket>
	/*rRSSIValue = Spirit1GetRssiTH();*/
	/*rRSSIValue = S2LPGetRssiTH();*/
	xRxFrame.Cmd = aReceiveBuffer[0];
 8003382:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <read_RX_Data+0x8c>)
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <read_RX_Data+0x90>)
 8003388:	70da      	strb	r2, [r3, #3]
	xRxFrame.CmdLen = aReceiveBuffer[1];
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <read_RX_Data+0x8c>)
 800338c:	785a      	ldrb	r2, [r3, #1]
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <read_RX_Data+0x90>)
 8003390:	709a      	strb	r2, [r3, #2]
	xRxFrame.Cmdtag = aReceiveBuffer[2];
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <read_RX_Data+0x8c>)
 8003394:	789a      	ldrb	r2, [r3, #2]
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <read_RX_Data+0x90>)
 8003398:	701a      	strb	r2, [r3, #0]
	xRxFrame.CmdType = aReceiveBuffer[3];
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <read_RX_Data+0x8c>)
 800339c:	78da      	ldrb	r2, [r3, #3]
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <read_RX_Data+0x90>)
 80033a0:	705a      	strb	r2, [r3, #1]
	xRxFrame.DataLen = aReceiveBuffer[4];
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <read_RX_Data+0x8c>)
 80033a4:	791a      	ldrb	r2, [r3, #4]
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <read_RX_Data+0x90>)
 80033a8:	711a      	strb	r2, [r3, #4]

	/*FIXED BUG IN DATA RECEPTION*/
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 80033aa:	230f      	movs	r3, #15
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2205      	movs	r2, #5
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e00d      	b.n	80033d0 <read_RX_Data+0x68>
	{
	  temp_DataBuff[xIndex] = aReceiveBuffer[xIndex];
 80033b4:	200f      	movs	r0, #15
 80033b6:	183b      	adds	r3, r7, r0
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	490d      	ldr	r1, [pc, #52]	; (80033f4 <read_RX_Data+0x8c>)
 80033c0:	5c89      	ldrb	r1, [r1, r2]
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <read_RX_Data+0x94>)
 80033c4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 80033c6:	183b      	adds	r3, r7, r0
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	183b      	adds	r3, r7, r0
 80033cc:	3201      	adds	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <read_RX_Data+0x88>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	220f      	movs	r2, #15
 80033d6:	18ba      	adds	r2, r7, r2
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3ea      	bcc.n	80033b4 <read_RX_Data+0x4c>
	}

	xRxFrame.DataBuff= temp_DataBuff;
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <read_RX_Data+0x90>)
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <read_RX_Data+0x94>)
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200002ac 	.word	0x200002ac
 80033f0:	20000248 	.word	0x20000248
 80033f4:	2000024c 	.word	0x2000024c
 80033f8:	200002c8 	.word	0x200002c8
 80033fc:	2000033c 	.word	0x2000033c

08003400 <LED_ON>:

void LED_ON(fsm_t* this)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOn(RADIO_SHIELD_LED);
 8003408:	2000      	movs	r0, #0
 800340a:	f003 fdd3 	bl	8006fb4 <RadioShieldLedOn>
#endif
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 800340e:	f001 fb29 	bl	8004a64 <SpiritPktCommonGetReceivedDestAddress>
 8003412:	0003      	movs	r3, r0
 8003414:	001a      	movs	r2, r3
 8003416:	4b03      	ldr	r3, [pc, #12]	; (8003424 <LED_ON+0x24>)
 8003418:	701a      	strb	r2, [r3, #0]
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	20000364 	.word	0x20000364

08003428 <LED_Toggle>:

void LED_Toggle(fsm_t* this)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 8003430:	230f      	movs	r3, #15
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]

    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 8003438:	f001 fb14 	bl	8004a64 <SpiritPktCommonGetReceivedDestAddress>
 800343c:	0003      	movs	r3, r0
 800343e:	001a      	movs	r2, r3
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <LED_Toggle+0x60>)
 8003442:	701a      	strb	r2, [r3, #0]

#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
	HAL_Delay(DELAY_TX_LED_GLOW);
 8003444:	20c8      	movs	r0, #200	; 0xc8
 8003446:	f004 faa7 	bl	8007998 <HAL_Delay>
#endif
	for(; ledToggleCtr<5; ledToggleCtr++)
 800344a:	e00b      	b.n	8003464 <LED_Toggle+0x3c>
	{
		/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
		#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
		RadioShieldLedToggle(RADIO_SHIELD_LED);
 800344c:	2000      	movs	r0, #0
 800344e:	f003 fddd 	bl	800700c <RadioShieldLedToggle>
		#endif
		HAL_Delay(DELAY_RX_LED_TOGGLE);
 8003452:	2064      	movs	r0, #100	; 0x64
 8003454:	f004 faa0 	bl	8007998 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8003458:	210f      	movs	r1, #15
 800345a:	187b      	adds	r3, r7, r1
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	187b      	adds	r3, r7, r1
 8003460:	3201      	adds	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	230f      	movs	r3, #15
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b04      	cmp	r3, #4
 800346c:	d9ee      	bls.n	800344c <LED_Toggle+0x24>
	}
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 800346e:	2000      	movs	r0, #0
 8003470:	f003 fdb6 	bl	8006fe0 <RadioShieldLedOff>
#endif
    BSP_LED_Off(LED2);
 8003474:	2000      	movs	r0, #0
 8003476:	f003 fbcb 	bl	8006c10 <BSP_LED_Off>

    ACK_Process = SET;
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <LED_Toggle+0x64>)
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b004      	add	sp, #16
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000364 	.word	0x20000364
 800348c:	20000366 	.word	0x20000366

08003490 <send_ACK>:

void send_ACK(fsm_t* this)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	  xTxFrame.Cmd = ACK_OK;
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <send_ACK+0x4c>)
 800349a:	2201      	movs	r2, #1
 800349c:	70da      	strb	r2, [r3, #3]
	  xTxFrame.CmdLen = 0x01;
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <send_ACK+0x4c>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	709a      	strb	r2, [r3, #2]
	  xTxFrame.Cmdtag = xRxFrame.Cmdtag;
 80034a4:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <send_ACK+0x50>)
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <send_ACK+0x4c>)
 80034aa:	701a      	strb	r2, [r3, #0]
	  xTxFrame.CmdType = APPLI_CMD;
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <send_ACK+0x4c>)
 80034ae:	2211      	movs	r2, #17
 80034b0:	705a      	strb	r2, [r3, #1]
	  xTxFrame.DataBuff = aTransmitBuffer;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <send_ACK+0x4c>)
 80034b4:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <send_ACK+0x54>)
 80034b6:	609a      	str	r2, [r3, #8]
	  xTxFrame.DataLen = TxLength;
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <send_ACK+0x58>)
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <send_ACK+0x4c>)
 80034be:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(DELAY_TX_LED_GLOW);
 80034c0:	20c8      	movs	r0, #200	; 0xc8
 80034c2:	f004 fa69 	bl	8007998 <HAL_Delay>

	  AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <send_ACK+0x4c>)
 80034c8:	791a      	ldrb	r2, [r3, #4]
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <send_ACK+0x4c>)
 80034cc:	0011      	movs	r1, r2
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f84e 	bl	8003570 <AppliSendBuff>
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200002bc 	.word	0x200002bc
 80034e0:	200002c8 	.word	0x200002c8
 80034e4:	200000a4 	.word	0x200000a4
 80034e8:	200000a0 	.word	0x200000a0

080034ec <clr_tx_flag>:

void clr_tx_flag(fsm_t* this)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	xTxDoneFlag = RESET;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <clr_tx_flag+0x18>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	200002ad 	.word	0x200002ad

08003508 <reset_state>:

void reset_state(fsm_t* this)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 8003510:	2000      	movs	r0, #0
 8003512:	f003 fd65 	bl	8006fe0 <RadioShieldLedOff>
#endif
    BSP_LED_Off(LED2);
 8003516:	2000      	movs	r0, #0
 8003518:	f003 fb7a 	bl	8006c10 <BSP_LED_Off>

    ACK_Process = RESET;
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <reset_state+0x28>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
    IDLE_Process = SET;
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <reset_state+0x2c>)
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000366 	.word	0x20000366
 8003534:	20000374 	.word	0x20000374

08003538 <HAL_Radio_Init>:
* @brief  Initializes RF Transceiver's HAL.
* @param  None
* @retval None.
*/
void HAL_Radio_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  pRadioDriver = &radio_cb;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <HAL_Radio_Init+0x18>)
 800353e:	4a05      	ldr	r2, [pc, #20]	; (8003554 <HAL_Radio_Init+0x1c>)
 8003540:	601a      	str	r2, [r3, #0]
  pRadioDriver->Init( ); 
 8003542:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_Radio_Init+0x18>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4798      	blx	r3
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	2000036c 	.word	0x2000036c
 8003554:	20000000 	.word	0x20000000

08003558 <P2P_Process>:
*         uint8_t* pRxBuff = Pointer to aReceiveBuffer
*         uint8_t cRxlen= length of aReceiveBuffer
* @retval None.
*/
void P2P_Process(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
	fsm_fire(radio_fsm);
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <P2P_Process+0x14>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff fd5e 	bl	8003022 <fsm_fire>
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000370 	.word	0x20000370

08003570 <AppliSendBuff>:
* @param  AppliFrame_t *xTxFrame = Pointer to AppliFrame_t structure 
*         uint8_t cTxlen = Length of aTransmitBuffer
* @retval None
*/
void AppliSendBuff(AppliFrame_t *xTxFrame, uint8_t cTxlen)
{
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	000a      	movs	r2, r1
 800357a:	1cfb      	adds	r3, r7, #3
 800357c:	701a      	strb	r2, [r3, #0]
  uint8_t xIndex = 0;
 800357e:	230f      	movs	r3, #15
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
  uint8_t trxLength = 0;
 8003586:	230e      	movs	r3, #14
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
  
#ifdef USE_BASIC_PROTOCOL
  SpiritPktBasicAddressesInit(&xAddressInit);
 800358e:	4b2b      	ldr	r3, [pc, #172]	; (800363c <AppliSendBuff+0xcc>)
 8003590:	0018      	movs	r0, r3
 8003592:	f001 f8ff 	bl	8004794 <SpiritPktBasicAddressesInit>
#endif  
  
  TxFrameBuff[0] = xTxFrame->Cmd;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	78da      	ldrb	r2, [r3, #3]
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <AppliSendBuff+0xd0>)
 800359c:	701a      	strb	r2, [r3, #0]
  TxFrameBuff[1] = xTxFrame->CmdLen;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	789a      	ldrb	r2, [r3, #2]
 80035a2:	4b27      	ldr	r3, [pc, #156]	; (8003640 <AppliSendBuff+0xd0>)
 80035a4:	705a      	strb	r2, [r3, #1]
  TxFrameBuff[2] = xTxFrame->Cmdtag;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <AppliSendBuff+0xd0>)
 80035ac:	709a      	strb	r2, [r3, #2]
  TxFrameBuff[3] = xTxFrame->CmdType;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	785a      	ldrb	r2, [r3, #1]
 80035b2:	4b23      	ldr	r3, [pc, #140]	; (8003640 <AppliSendBuff+0xd0>)
 80035b4:	70da      	strb	r2, [r3, #3]
  TxFrameBuff[4] = xTxFrame->DataLen;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	791a      	ldrb	r2, [r3, #4]
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <AppliSendBuff+0xd0>)
 80035bc:	711a      	strb	r2, [r3, #4]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 80035be:	e010      	b.n	80035e2 <AppliSendBuff+0x72>
  {
    TxFrameBuff[xIndex+5] =  xTxFrame->DataBuff[xIndex];
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	200f      	movs	r0, #15
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	18d2      	adds	r2, r2, r3
 80035cc:	183b      	adds	r3, r7, r0
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	3305      	adds	r3, #5
 80035d2:	7811      	ldrb	r1, [r2, #0]
 80035d4:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <AppliSendBuff+0xd0>)
 80035d6:	54d1      	strb	r1, [r2, r3]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 80035d8:	183b      	adds	r3, r7, r0
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	183b      	adds	r3, r7, r0
 80035de:	3201      	adds	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	791b      	ldrb	r3, [r3, #4]
 80035e6:	220f      	movs	r2, #15
 80035e8:	18ba      	adds	r2, r7, r2
 80035ea:	7812      	ldrb	r2, [r2, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3e7      	bcc.n	80035c0 <AppliSendBuff+0x50>
  }

  trxLength = (xIndex+5);
 80035f0:	240e      	movs	r4, #14
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	220f      	movs	r2, #15
 80035f6:	18ba      	adds	r2, r7, r2
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	3205      	adds	r2, #5
 80035fc:	701a      	strb	r2, [r3, #0]

  /* Spirit IRQs disable */
  Spirit1DisableIrq();
 80035fe:	f003 fa10 	bl	8006a22 <Spirit1DisableIrq>
  /* Spirit IRQs enable */
  Spirit1EnableTxIrq();
 8003602:	f003 f9f2 	bl	80069ea <Spirit1EnableTxIrq>
  /* payload length config */
  Spirit1SetPayloadlength(trxLength);
 8003606:	193b      	adds	r3, r7, r4
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	0018      	movs	r0, r3
 800360c:	f003 f9ce 	bl	80069ac <Spirit1SetPayloadlength>
  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <AppliSendBuff+0xd4>)
 8003612:	1c18      	adds	r0, r3, #0
 8003614:	f003 fa0d 	bl	8006a32 <Spirit1SetRxTimeout>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 8003618:	f003 fab2 	bl	8006b80 <Spirit1ClearIRQ>
  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <AppliSendBuff+0xd8>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	0018      	movs	r0, r3
 8003622:	f003 f9d3 	bl	80069cc <Spirit1SetDestinationAddress>
  /* send the TX command */
  Spirit1StartTx(TxFrameBuff, trxLength);
 8003626:	193b      	adds	r3, r7, r4
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <AppliSendBuff+0xd0>)
 800362c:	0011      	movs	r1, r2
 800362e:	0018      	movs	r0, r3
 8003630:	f003 fa6c 	bl	8006b0c <Spirit1StartTx>
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b005      	add	sp, #20
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	20000090 	.word	0x20000090
 8003640:	200002d4 	.word	0x200002d4
 8003644:	44fa0000 	.word	0x44fa0000
 8003648:	20000365 	.word	0x20000365

0800364c <AppliReceiveBuff>:
* @param  uint8_t *RxFrameBuff = Pointer to ReceiveBuffer
*         uint8_t cRxlen = length of ReceiveBuffer
* @retval None
*/
void AppliReceiveBuff(uint8_t *RxFrameBuff, uint8_t cRxlen)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	000a      	movs	r2, r1
 8003656:	1cfb      	adds	r3, r7, #3
 8003658:	701a      	strb	r2, [r3, #0]
  /*float rRSSIValue = 0;*/
  exitTime = SET;
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <AppliReceiveBuff+0x54>)
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
  exitCounter = TIME_TO_EXIT_RX;
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <AppliReceiveBuff+0x58>)
 8003662:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <AppliReceiveBuff+0x5c>)
 8003664:	801a      	strh	r2, [r3, #0]
  SpiritPktBasicAddressesInit(&xAddressInit);
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <AppliReceiveBuff+0x60>)
 8003668:	0018      	movs	r0, r3
 800366a:	f001 f893 	bl	8004794 <SpiritPktBasicAddressesInit>

  Spirit1DisableIrq();
 800366e:	f003 f9d8 	bl	8006a22 <Spirit1DisableIrq>
  Spirit1EnableRxIrq();
 8003672:	f003 f9c3 	bl	80069fc <Spirit1EnableRxIrq>

  /* payload length config */
  Spirit1SetPayloadlength(PAYLOAD_LEN);
 8003676:	2019      	movs	r0, #25
 8003678:	f003 f998 	bl	80069ac <Spirit1SetPayloadlength>

  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <AppliReceiveBuff+0x64>)
 800367e:	1c18      	adds	r0, r3, #0
 8003680:	f003 f9d7 	bl	8006a32 <Spirit1SetRxTimeout>

  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <AppliReceiveBuff+0x68>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	0018      	movs	r0, r3
 800368a:	f003 f99f 	bl	80069cc <Spirit1SetDestinationAddress>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 800368e:	f003 fa77 	bl	8006b80 <Spirit1ClearIRQ>
  /* RX command */ 
  Spirit1StartRx();
 8003692:	f003 fa03 	bl	8006a9c <Spirit1StartRx>
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b002      	add	sp, #8
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	200002b1 	.word	0x200002b1
 80036a4:	20000334 	.word	0x20000334
 80036a8:	00000bb8 	.word	0x00000bb8
 80036ac:	20000090 	.word	0x20000090
 80036b0:	44fa0000 	.word	0x44fa0000
 80036b4:	20000365 	.word	0x20000365

080036b8 <P2P_Init>:
* communication
* @param  None
* @retval None
*/
void P2P_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  DestinationAddr = DESTINATION_ADDRESS;
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <P2P_Init+0x50>)
 80036be:	2244      	movs	r2, #68	; 0x44
 80036c0:	701a      	strb	r2, [r3, #0]
  pRadioDriver->GpioIrq(&xGpioIRQ);
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <P2P_Init+0x54>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <P2P_Init+0x58>)
 80036ca:	0010      	movs	r0, r2
 80036cc:	4798      	blx	r3
  Spirit1RadioInit(&xRadioInit);
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <P2P_Init+0x5c>)
 80036d0:	0018      	movs	r0, r3
 80036d2:	f003 f941 	bl	8006958 <Spirit1RadioInit>
  Spirit1SetPower(POWER_INDEX, POWER_DBM);
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <P2P_Init+0x60>)
 80036d8:	1c19      	adds	r1, r3, #0
 80036da:	2007      	movs	r0, #7
 80036dc:	f003 f948 	bl	8006970 <Spirit1SetPower>
  Spirit1PacketConfig();
 80036e0:	f003 f95d 	bl	800699e <Spirit1PacketConfig>
  Spirit1EnableSQI();
 80036e4:	f003 f9cf 	bl	8006a86 <Spirit1EnableSQI>
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80036e8:	2378      	movs	r3, #120	; 0x78
 80036ea:	425b      	negs	r3, r3
 80036ec:	0018      	movs	r0, r3
 80036ee:	f001 fa4f 	bl	8004b90 <SpiritQiSetRssiThresholddBm>

  radio_fsm = fsm_new (radio_states);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <P2P_Init+0x64>)
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff fc70 	bl	8002fda <fsm_new>
 80036fa:	0002      	movs	r2, r0
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <P2P_Init+0x68>)
 80036fe:	601a      	str	r2, [r3, #0]

}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	20000365 	.word	0x20000365
 800370c:	2000036c 	.word	0x2000036c
 8003710:	20000060 	.word	0x20000060
 8003714:	20000064 	.word	0x20000064
 8003718:	4139999a 	.word	0x4139999a
 800371c:	200000b8 	.word	0x200000b8
 8003720:	20000370 	.word	0x20000370

08003724 <BasicProtocolInit>:
* @brief  This function initializes the BASIC Packet handler of S2LP
* @param  None
* @retval None
*/
void BasicProtocolInit(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* RAdio Packet config */
	SpiritPktBasicInit(&xBasicInit);
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <BasicProtocolInit+0x14>)
 800372a:	0018      	movs	r0, r3
 800372c:	f000 ff36 	bl	800459c <SpiritPktBasicInit>
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	20000080 	.word	0x20000080

0800373c <MCU_Enter_StopMode>:
* @brief  This routine puts the MCU in stop mode
* @param  None
* @retval None
*/
void MCU_Enter_StopMode(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  APPLI_EnterSTOPMode();
 8003740:	f7ff fc3b 	bl	8002fba <APPLI_EnterSTOPMode>
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <MCU_Enter_StandbyMode>:
* @brief  This routine puts the MCU in standby mode
* @param  None
* @retval None
*/
void MCU_Enter_StandbyMode(void)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	af00      	add	r7, sp, #0
  APPLI_EnterSTANDBYMode();
 800374e:	f7ff fc3d 	bl	8002fcc <APPLI_EnterSTANDBYMode>
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <MCU_Enter_SleepMode>:
* @brief  This routine puts the MCU in sleep mode
* @param  None
* @retval None
*/
void MCU_Enter_SleepMode(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /*Suspend Tick increment to prevent wakeup by Systick interrupt. 
  Otherwise the Systick interrupt will wake up the device within 1ms (HAL time base)*/
  
  APPLI_EnterSLEEPMode();
 800375c:	f7ff fc24 	bl	8002fa8 <APPLI_EnterSLEEPMode>
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <RadioPowerON>:
* @param  Param:None. 
* @retval None
*                       
*/
void RadioPowerON(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
	SpiritCmdStrobeReady();
 800376e:	2062      	movs	r0, #98	; 0x62
 8003770:	f000 fa50 	bl	8003c14 <SpiritCmdStrobeCommand>
  
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e006      	b.n	800378a <RadioPowerON+0x22>
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3301      	adds	r3, #1
 8003784:	b2da      	uxtb	r2, r3
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2bff      	cmp	r3, #255	; 0xff
 8003792:	d1f3      	bne.n	800377c <RadioPowerON+0x14>
    
    /* Reads the MC_STATUS register */
    
    SpiritRefreshStatus();
 8003794:	f002 ffe4 	bl	8006760 <SpiritRefreshStatus>
    
    
  }
  while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <RadioPowerON+0x48>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	0e5b      	lsrs	r3, r3, #25
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d1e6      	bne.n	8003774 <RadioPowerON+0xc>
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	20000378 	.word	0x20000378

080037b4 <RadioPowerOFF>:
* @param  Param:None. 
* @retval None
*                       
*/
void RadioPowerOFF(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  RadioEnterShutdown();
 80037b8:	f003 fba8 	bl	8006f0c <RadioEnterShutdown>
  
  
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <RadioStandBy>:
* @param  None. 
* @retval None
*                       
*/
void RadioStandBy(void)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	af00      	add	r7, sp, #0
	SpiritCmdStrobeStandby();
 80037c6:	2063      	movs	r0, #99	; 0x63
 80037c8:	f000 fa24 	bl	8003c14 <SpiritCmdStrobeCommand>
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <RadioSleep>:
* @param  None. 
* @retval None
*                       
*/
void RadioSleep(void)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	af00      	add	r7, sp, #0
	SpiritCmdStrobeSleep();
 80037d6:	2064      	movs	r0, #100	; 0x64
 80037d8:	f000 fa1c 	bl	8003c14 <SpiritCmdStrobeCommand>
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <P2PInterruptHandler>:
*         to manage the S2LP IRQ configured to be notified on the S2LP GPIO_3.
* @param  None
* @retval None
*/
void P2PInterruptHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
	SpiritIrqGetStatus(&xIrqStatus);
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <P2PInterruptHandler+0xb0>)
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 fbe2 	bl	8003fb4 <SpiritIrqGetStatus>
  
  
  /* Check the S2LP TX_DATA_SENT IRQ flag */
  if(
     (xIrqStatus.IRQ_TX_DATA_SENT) 
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <P2PInterruptHandler+0xb0>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2204      	movs	r2, #4
 80037f6:	4013      	ands	r3, r2
 80037f8:	b2db      	uxtb	r3, r3
  if(
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <P2PInterruptHandler+0x28>
       
#ifdef CSMA_ENABLE
       ||(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <P2PInterruptHandler+0xb0>)
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	2208      	movs	r2, #8
 8003804:	4013      	ands	r3, r2
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01a      	beq.n	8003842 <P2PInterruptHandler+0x5e>
#endif
         )
  {
#ifdef CSMA_ENABLE
	SpiritCsma(S_DISABLE);
 800380c:	2000      	movs	r0, #0
 800380e:	f000 fa8b 	bl	8003d28 <SpiritCsma>
	SpiritRadioPersistenRx(S_ENABLE);
 8003812:	2001      	movs	r0, #1
 8003814:	f002 fc9c 	bl	8006150 <SpiritRadioPersistenRx>
	SpiritRadioCsBlanking(S_ENABLE);
 8003818:	2001      	movs	r0, #1
 800381a:	f002 fc61 	bl	80060e0 <SpiritRadioCsBlanking>
    
    if(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <P2PInterruptHandler+0xb0>)
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	2208      	movs	r2, #8
 8003824:	4013      	ands	r3, r2
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <P2PInterruptHandler+0x4e>
    {
    	SpiritCmdStrobeSabort();
 800382c:	2067      	movs	r0, #103	; 0x67
 800382e:	f000 f9f1 	bl	8003c14 <SpiritCmdStrobeCommand>
      
      
    }
    SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8003832:	2378      	movs	r3, #120	; 0x78
 8003834:	425b      	negs	r3, r3
 8003836:	0018      	movs	r0, r3
 8003838:	f001 f9aa 	bl	8004b90 <SpiritQiSetRssiThresholddBm>
    
    
#endif
    
    xTxDoneFlag = SET;
 800383c:	4b16      	ldr	r3, [pc, #88]	; (8003898 <P2PInterruptHandler+0xb4>)
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check the S2LP RX_DATA_READY IRQ flag */
  if((xIrqStatus.IRQ_RX_DATA_READY))
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <P2PInterruptHandler+0xb0>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2201      	movs	r2, #1
 8003848:	4013      	ands	r3, r2
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <P2PInterruptHandler+0x72>
  {
    xRxDoneFlag = SET;   
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <P2PInterruptHandler+0xb8>)
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
  }
  
  /* Restart receive after receive timeout*/
  if (xIrqStatus.IRQ_RX_TIMEOUT)
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <P2PInterruptHandler+0xb0>)
 8003858:	78db      	ldrb	r3, [r3, #3]
 800385a:	2220      	movs	r2, #32
 800385c:	4013      	ands	r3, r2
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <P2PInterruptHandler+0x90>
  {
    rx_timeout = SET; 
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <P2PInterruptHandler+0xbc>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeRx();
 800386a:	f000 fe67 	bl	800453c <SpiritManagementWaCmdStrobeRx>
 800386e:	2061      	movs	r0, #97	; 0x61
 8003870:	f000 f9d0 	bl	8003c14 <SpiritCmdStrobeCommand>
    
  }
  
  /* Check the S2LP RX_DATA_DISC IRQ flag */
  if(xIrqStatus.IRQ_RX_DATA_DISC)
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <P2PInterruptHandler+0xb0>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2202      	movs	r2, #2
 800387a:	4013      	ands	r3, r2
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <P2PInterruptHandler+0xa8>
  {      
    /* RX command - to ensure the device will be ready for the next reception */
	  SpiritCmdStrobeRx();
 8003882:	f000 fe5b 	bl	800453c <SpiritManagementWaCmdStrobeRx>
 8003886:	2061      	movs	r0, #97	; 0x61
 8003888:	f000 f9c4 	bl	8003c14 <SpiritCmdStrobeCommand>
    
  }  
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	2000035c 	.word	0x2000035c
 8003898:	200002ad 	.word	0x200002ad
 800389c:	200002ac 	.word	0x200002ac
 80038a0:	200002b0 	.word	0x200002b0

080038a4 <HAL_SYSTICK_Callback>:
* @brief  SYSTICK callback.
* @param  None
* @retval None
*/
void HAL_SYSTICK_Callback(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  if(exitTime)
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_SYSTICK_Callback+0x30>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_SYSTICK_Callback+0x28>
  {
    /*Decreament the counter to check when 3 seconds has been elapsed*/  
    exitCounter--;
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_SYSTICK_Callback+0x34>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_SYSTICK_Callback+0x34>)
 80038bc:	801a      	strh	r2, [r3, #0]
    /*3 seconds has been elapsed*/
    if(exitCounter <= TIME_UP)
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_SYSTICK_Callback+0x34>)
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d802      	bhi.n	80038cc <HAL_SYSTICK_Callback+0x28>
    {
      exitTime = RESET;
 80038c6:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <HAL_SYSTICK_Callback+0x30>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
      PushButtonStatusWakeup = RESET;
      PushButtonStatusData = RESET;
    }
  }
#endif
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	200002b1 	.word	0x200002b1
 80038d8:	20000334 	.word	0x20000334

080038dc <HAL_GPIO_EXTI_Callback>:
* @param uint16_t GPIO_Pin
* @retval None
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
  PushButtonStatusData = RESET;
  wakeupCounter = LPM_WAKEUP_TIME; 
  dataSendCounter = DATA_SEND_TIME;
  dataSendCounter++;
#endif
  if(GPIO_Pin==USER_BUTTON_PIN)
 80038e8:	1dbb      	adds	r3, r7, #6
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d117      	bne.n	8003924 <HAL_GPIO_EXTI_Callback+0x48>
  {

	/*It will be an USB interrupt, not a button*/
	tx_value = SET;
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_GPIO_EXTI_Callback+0x5c>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]

	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 80038fa:	e00d      	b.n	8003918 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		aTransmitBuffer[i] = i*2;
 80038fc:	200f      	movs	r0, #15
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	183b      	adds	r3, r7, r0
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	18db      	adds	r3, r3, r3
 8003908:	b2d9      	uxtb	r1, r3
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_GPIO_EXTI_Callback+0x60>)
 800390c:	5499      	strb	r1, [r3, r2]
	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 800390e:	183b      	adds	r3, r7, r0
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	183b      	adds	r3, r7, r0
 8003914:	3201      	adds	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	230f      	movs	r3, #15
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b13      	cmp	r3, #19
 8003920:	d9ec      	bls.n	80038fc <HAL_GPIO_EXTI_Callback+0x20>
      P2PInterruptHandler();
    }
  
#endif
  
}
 8003922:	e005      	b.n	8003930 <HAL_GPIO_EXTI_Callback+0x54>
    if(GPIO_Pin==RADIO_GPIO_3_EXTI_LINE)
 8003924:	1dbb      	adds	r3, r7, #6
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d101      	bne.n	8003930 <HAL_GPIO_EXTI_Callback+0x54>
      P2PInterruptHandler();
 800392c:	f7ff ff5a 	bl	80037e4 <P2PInterruptHandler>
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200002b4 	.word	0x200002b4
 800393c:	200000a4 	.word	0x200000a4

08003940 <NMI_Handler>:
* @brief  This function handles NMI exception.
* @param  None
* @retval : None
*/
void NMI_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HardFault_Handler>:
* @brief  This function handles Hard Fault exception.
* @param  None
* @retval : None
*/
void HardFault_Handler(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800394e:	e7fe      	b.n	800394e <HardFault_Handler+0x4>

08003950 <SVC_Handler>:

void DebugMon_Handler(void)
{
}
void SVC_Handler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <PendSV_Handler>:
* @brief  This function handles PendSVC exception.
* @param  None
* @retval : None
*/
void PendSV_Handler(void)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	af00      	add	r7, sp, #0
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <SysTick_Handler>:
* @param  None
* @retval None
*/

void SysTick_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003968:	f004 f800 	bl	800796c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800396c:	f004 f93a 	bl	8007be4 <HAL_SYSTICK_IRQHandler>
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <EXTI0_1_IRQHandler>:
//{
//  HAL_PCD_IRQHandler(&hpcd);
//}

void EXTI0_1_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET) 
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <EXTI0_1_IRQHandler+0x2c>)
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	d002      	beq.n	800398c <EXTI0_1_IRQHandler+0x14>
  {
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003986:	2001      	movs	r0, #1
 8003988:	f004 fada 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  }
  
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET) 
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <EXTI0_1_IRQHandler+0x2c>)
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	2202      	movs	r2, #2
 8003992:	4013      	ands	r3, r2
 8003994:	d002      	beq.n	800399c <EXTI0_1_IRQHandler+0x24>
  {
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003996:	2002      	movs	r0, #2
 8003998:	f004 fad2 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  }
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	40010400 	.word	0x40010400

080039a8 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET) 
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <EXTI2_3_IRQHandler+0x2c>)
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	2204      	movs	r2, #4
 80039b2:	4013      	ands	r3, r2
 80039b4:	d002      	beq.n	80039bc <EXTI2_3_IRQHandler+0x14>
  {
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80039b6:	2004      	movs	r0, #4
 80039b8:	f004 fac2 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  }
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET) 
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <EXTI2_3_IRQHandler+0x2c>)
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2208      	movs	r2, #8
 80039c2:	4013      	ands	r3, r2
 80039c4:	d002      	beq.n	80039cc <EXTI2_3_IRQHandler+0x24>
  {
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80039c6:	2008      	movs	r0, #8
 80039c8:	f004 faba 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
    
  }  
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	40010400 	.word	0x40010400

080039d8 <EXTI4_15_IRQHandler>:
* @brief  This function handles External External line 9 to 5 interrupt request.
* @param  None
* @retval None
*/
void EXTI4_15_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  /* EXTI line 7 interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(RADIO_GPIO_3_EXTI_LINE) != RESET) 
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <EXTI4_15_IRQHandler+0x24>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	4013      	ands	r3, r2
 80039e4:	d002      	beq.n	80039ec <EXTI4_15_IRQHandler+0x14>
  { 
    // __HAL_GPIO_EXTI_CLEAR_IT(RADIO_GPIO_3_EXTI_LINE);
    
    //P2PInterruptHandler();
    HAL_GPIO_EXTI_IRQHandler(RADIO_GPIO_3_EXTI_LINE);
 80039e6:	2080      	movs	r0, #128	; 0x80
 80039e8:	f004 faaa 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
  } 
  
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	019b      	lsls	r3, r3, #6
 80039f0:	0018      	movs	r0, r3
 80039f2:	f004 faa5 	bl	8007f40 <HAL_GPIO_EXTI_IRQHandler>
#endif
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40010400 	.word	0x40010400

08003a00 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	0002      	movs	r2, r0
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	001a      	movs	r2, r3
 8003a12:	2101      	movs	r1, #1
 8003a14:	2050      	movs	r0, #80	; 0x50
 8003a16:	f003 fcb9 	bl	800738c <RadioSpiReadRegisters>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	1c1a      	adds	r2, r3, #0
 8003a1e:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <SpiritCalibrationVco+0x80>)
 8003a20:	b212      	sxth	r2, r2
 8003a22:	1c11      	adds	r1, r2, #0
 8003a24:	7019      	strb	r1, [r3, #0]
 8003a26:	0412      	lsls	r2, r2, #16
 8003a28:	0e12      	lsrs	r2, r2, #24
 8003a2a:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d108      	bne.n	8003a46 <SpiritCalibrationVco+0x46>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8003a34:	210f      	movs	r1, #15
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	e007      	b.n	8003a56 <SpiritCalibrationVco+0x56>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8003a46:	210f      	movs	r1, #15
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	4393      	bics	r3, r2
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	701a      	strb	r2, [r3, #0]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8003a56:	230f      	movs	r3, #15
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	2050      	movs	r0, #80	; 0x50
 8003a60:	f003 fbf2 	bl	8007248 <RadioSpiWriteRegisters>
 8003a64:	1c03      	adds	r3, r0, #0
 8003a66:	1c1a      	adds	r2, r3, #0
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <SpiritCalibrationVco+0x80>)
 8003a6a:	b212      	sxth	r2, r2
 8003a6c:	1c11      	adds	r1, r2, #0
 8003a6e:	7019      	strb	r1, [r3, #0]
 8003a70:	0412      	lsls	r2, r2, #16
 8003a72:	0e12      	lsrs	r2, r2, #24
 8003a74:	705a      	strb	r2, [r3, #1]

}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	20000378 	.word	0x20000378

08003a84 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	2101      	movs	r1, #1
 8003a90:	20e5      	movs	r0, #229	; 0xe5
 8003a92:	f003 fc7b 	bl	800738c <RadioSpiReadRegisters>
 8003a96:	1c03      	adds	r3, r0, #0
 8003a98:	1c1a      	adds	r2, r3, #0
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <SpiritCalibrationGetVcoCalData+0x38>)
 8003a9c:	b212      	sxth	r2, r2
 8003a9e:	1c11      	adds	r1, r2, #0
 8003aa0:	7019      	strb	r1, [r3, #0]
 8003aa2:	0412      	lsls	r2, r2, #16
 8003aa4:	0e12      	lsrs	r2, r2, #24
 8003aa6:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	227f      	movs	r2, #127	; 0x7f
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b2db      	uxtb	r3, r3

}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	20000378 	.word	0x20000378

08003ac0 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8003acc:	240f      	movs	r4, #15
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	206e      	movs	r0, #110	; 0x6e
 8003ad6:	f003 fc59 	bl	800738c <RadioSpiReadRegisters>
 8003ada:	1c03      	adds	r3, r0, #0
 8003adc:	1c1a      	adds	r2, r3, #0
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <SpiritCalibrationSetVcoCalDataTx+0x70>)
 8003ae0:	b212      	sxth	r2, r2
 8003ae2:	1c11      	adds	r1, r2, #0
 8003ae4:	7019      	strb	r1, [r3, #0]
 8003ae6:	0412      	lsls	r2, r2, #16
 8003ae8:	0e12      	lsrs	r2, r2, #24
 8003aea:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8003aec:	193b      	adds	r3, r7, r4
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	227f      	movs	r2, #127	; 0x7f
 8003af2:	4393      	bics	r3, r2
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	193b      	adds	r3, r7, r4
 8003af8:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cVcoCalData;
 8003afa:	193b      	adds	r3, r7, r4
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	701a      	strb	r2, [r3, #0]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8003b0a:	193b      	adds	r3, r7, r4
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	2101      	movs	r1, #1
 8003b10:	206e      	movs	r0, #110	; 0x6e
 8003b12:	f003 fb99 	bl	8007248 <RadioSpiWriteRegisters>
 8003b16:	1c03      	adds	r3, r0, #0
 8003b18:	1c1a      	adds	r2, r3, #0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <SpiritCalibrationSetVcoCalDataTx+0x70>)
 8003b1c:	b212      	sxth	r2, r2
 8003b1e:	1c11      	adds	r1, r2, #0
 8003b20:	7019      	strb	r1, [r3, #0]
 8003b22:	0412      	lsls	r2, r2, #16
 8003b24:	0e12      	lsrs	r2, r2, #24
 8003b26:	705a      	strb	r2, [r3, #1]

}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b005      	add	sp, #20
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	20000378 	.word	0x20000378

08003b34 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	1dfb      	adds	r3, r7, #7
 8003b3e:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8003b40:	240f      	movs	r4, #15
 8003b42:	193b      	adds	r3, r7, r4
 8003b44:	001a      	movs	r2, r3
 8003b46:	2101      	movs	r1, #1
 8003b48:	206f      	movs	r0, #111	; 0x6f
 8003b4a:	f003 fc1f 	bl	800738c <RadioSpiReadRegisters>
 8003b4e:	1c03      	adds	r3, r0, #0
 8003b50:	1c1a      	adds	r2, r3, #0
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <SpiritCalibrationSetVcoCalDataRx+0x70>)
 8003b54:	b212      	sxth	r2, r2
 8003b56:	1c11      	adds	r1, r2, #0
 8003b58:	7019      	strb	r1, [r3, #0]
 8003b5a:	0412      	lsls	r2, r2, #16
 8003b5c:	0e12      	lsrs	r2, r2, #24
 8003b5e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	227f      	movs	r2, #127	; 0x7f
 8003b66:	4393      	bics	r3, r2
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	193b      	adds	r3, r7, r4
 8003b6c:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cVcoCalData;
 8003b6e:	193b      	adds	r3, r7, r4
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	1dfb      	adds	r3, r7, #7
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	701a      	strb	r2, [r3, #0]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	001a      	movs	r2, r3
 8003b82:	2101      	movs	r1, #1
 8003b84:	206f      	movs	r0, #111	; 0x6f
 8003b86:	f003 fb5f 	bl	8007248 <RadioSpiWriteRegisters>
 8003b8a:	1c03      	adds	r3, r0, #0
 8003b8c:	1c1a      	adds	r2, r3, #0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <SpiritCalibrationSetVcoCalDataRx+0x70>)
 8003b90:	b212      	sxth	r2, r2
 8003b92:	1c11      	adds	r1, r2, #0
 8003b94:	7019      	strb	r1, [r3, #0]
 8003b96:	0412      	lsls	r2, r2, #16
 8003b98:	0e12      	lsrs	r2, r2, #24
 8003b9a:	705a      	strb	r2, [r3, #1]

}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b005      	add	sp, #20
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	20000378 	.word	0x20000378

08003ba8 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	0002      	movs	r2, r0
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	000c      	movs	r4, r1
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	001a      	movs	r2, r3
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	209e      	movs	r0, #158	; 0x9e
 8003bc0:	f003 fbe4 	bl	800738c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8003bc4:	0021      	movs	r1, r4
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2206      	movs	r2, #6
 8003bcc:	4393      	bics	r3, r2
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	187b      	adds	r3, r7, r1
 8003bd2:	701a      	strb	r2, [r3, #0]
  
  if(xVco == VCO_H)
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d108      	bne.n	8003bee <SpiritCalibrationSelectVco+0x46>
  {
    tempRegValue |= 0x02;
 8003bdc:	210f      	movs	r1, #15
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2202      	movs	r2, #2
 8003be4:	4313      	orrs	r3, r2
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e007      	b.n	8003bfe <SpiritCalibrationSelectVco+0x56>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8003bee:	210f      	movs	r1, #15
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	701a      	strb	r2, [r3, #0]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8003bfe:	230f      	movs	r3, #15
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	001a      	movs	r2, r3
 8003c04:	2101      	movs	r1, #1
 8003c06:	209e      	movs	r0, #158	; 0x9e
 8003c08:	f003 fb1e 	bl	8007248 <RadioSpiWriteRegisters>
  
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b005      	add	sp, #20
 8003c12:	bd90      	pop	{r4, r7, pc}

08003c14 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f003 fc5d 	bl	80074e4 <RadioSpiCommandStrobes>
 8003c2a:	1c03      	adds	r3, r0, #0
 8003c2c:	1c1a      	adds	r2, r3, #0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <SpiritCmdStrobeCommand+0x30>)
 8003c30:	b212      	sxth	r2, r2
 8003c32:	1c11      	adds	r1, r2, #0
 8003c34:	7019      	strb	r1, [r3, #0]
 8003c36:	0412      	lsls	r2, r2, #16
 8003c38:	0e12      	lsrs	r2, r2, #24
 8003c3a:	705a      	strb	r2, [r3, #1]
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b002      	add	sp, #8
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000378 	.word	0x20000378

08003c48 <SpiritCsmaInit>:
 * @param  pxCsmaInit Csma init structure.
 *         This parameter is a pointer to @ref CsmaInit.
 * @retval None.
 */
void SpiritCsmaInit(CsmaInit* pxCsmaInit)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_BU_COUNTER_SEED(pxCsmaInit->nBuCounterSeed));
  s_assert_param(IS_BU_PRESCALER(pxCsmaInit->cBuPrescaler));
  s_assert_param(IS_CMAX_NB(pxCsmaInit->cMaxNb));

  /* CSMA BU counter seed (MSB) config */
  tempRegValue[0] = (uint8_t)(pxCsmaInit->nBuCounterSeed >> 8);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	889b      	ldrh	r3, [r3, #4]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	2108      	movs	r1, #8
 8003c5c:	187b      	adds	r3, r7, r1
 8003c5e:	701a      	strb	r2, [r3, #0]

  /* CSMA BU counter seed (LSB) config */
  tempRegValue[1] = (uint8_t) pxCsmaInit->nBuCounterSeed;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	889b      	ldrh	r3, [r3, #4]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	705a      	strb	r2, [r3, #1]

  /* CSMA BU prescaler config and CCA period config */
  tempRegValue[2] = (pxCsmaInit->cBuPrescaler << 2) | pxCsmaInit->xMultiplierTbit;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	799b      	ldrb	r3, [r3, #6]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	b25a      	sxtb	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b25b      	sxtb	r3, r3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	709a      	strb	r2, [r3, #2]

  /* CSMA CCA length config and max number of back-off */
  tempRegValue[3] = (pxCsmaInit->xCcaLength | pxCsmaInit->cMaxNb);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	789a      	ldrb	r2, [r3, #2]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	78db      	ldrb	r3, [r3, #3]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	70da      	strb	r2, [r3, #3]

  /* Reads the PROTOCOL1_BASE register value, to write the SEED_RELOAD and CSMA_PERS_ON fields */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	3304      	adds	r3, #4
 8003c96:	001a      	movs	r2, r3
 8003c98:	2101      	movs	r1, #1
 8003c9a:	2051      	movs	r0, #81	; 0x51
 8003c9c:	f003 fb76 	bl	800738c <RadioSpiReadRegisters>
 8003ca0:	1c03      	adds	r3, r0, #0
 8003ca2:	1c1a      	adds	r2, r3, #0
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <SpiritCsmaInit+0xdc>)
 8003ca6:	b212      	sxth	r2, r2
 8003ca8:	1c11      	adds	r1, r2, #0
 8003caa:	7019      	strb	r1, [r3, #0]
 8003cac:	0412      	lsls	r2, r2, #16
 8003cae:	0e12      	lsrs	r2, r2, #24
 8003cb0:	705a      	strb	r2, [r3, #1]

  /* Writes the new value for persistent mode */
  if(pxCsmaInit->xCsmaPersistentMode==S_ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <SpiritCsmaInit+0x84>
  {
    tempRegValue[4] |= PROTOCOL1_CSMA_PERS_ON_MASK;
 8003cba:	2108      	movs	r1, #8
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	791b      	ldrb	r3, [r3, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	711a      	strb	r2, [r3, #4]
 8003cca:	e007      	b.n	8003cdc <SpiritCsmaInit+0x94>
  }
  else
  {
    tempRegValue[4] &= ~PROTOCOL1_CSMA_PERS_ON_MASK;
 8003ccc:	2108      	movs	r1, #8
 8003cce:	187b      	adds	r3, r7, r1
 8003cd0:	791b      	ldrb	r3, [r3, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4393      	bics	r3, r2
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	711a      	strb	r2, [r3, #4]
  }

  /* Writes PROTOCOL1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8003cdc:	2408      	movs	r4, #8
 8003cde:	193b      	adds	r3, r7, r4
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	001a      	movs	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2051      	movs	r0, #81	; 0x51
 8003ce8:	f003 faae 	bl	8007248 <RadioSpiWriteRegisters>
 8003cec:	1c03      	adds	r3, r0, #0
 8003cee:	1c1a      	adds	r2, r3, #0
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <SpiritCsmaInit+0xdc>)
 8003cf2:	b212      	sxth	r2, r2
 8003cf4:	1c11      	adds	r1, r2, #0
 8003cf6:	7019      	strb	r1, [r3, #0]
 8003cf8:	0412      	lsls	r2, r2, #16
 8003cfa:	0e12      	lsrs	r2, r2, #24
 8003cfc:	705a      	strb	r2, [r3, #1]

  /* Writes CSMA_CONFIGx_BASE registers */
  g_xStatus = SpiritSpiWriteRegisters(CSMA_CONFIG3_BASE, 4, tempRegValue);
 8003cfe:	193b      	adds	r3, r7, r4
 8003d00:	001a      	movs	r2, r3
 8003d02:	2104      	movs	r1, #4
 8003d04:	2064      	movs	r0, #100	; 0x64
 8003d06:	f003 fa9f 	bl	8007248 <RadioSpiWriteRegisters>
 8003d0a:	1c03      	adds	r3, r0, #0
 8003d0c:	1c1a      	adds	r2, r3, #0
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <SpiritCsmaInit+0xdc>)
 8003d10:	b212      	sxth	r2, r2
 8003d12:	1c11      	adds	r1, r2, #0
 8003d14:	7019      	strb	r1, [r3, #0]
 8003d16:	0412      	lsls	r2, r2, #16
 8003d18:	0e12      	lsrs	r2, r2, #24
 8003d1a:	705a      	strb	r2, [r3, #1]

}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b005      	add	sp, #20
 8003d22:	bd90      	pop	{r4, r7, pc}
 8003d24:	20000378 	.word	0x20000378

08003d28 <SpiritCsma>:
 * @param  xNewState the state of the CSMA mode.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCsma(SpiritFunctionalState xNewState)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	0002      	movs	r2, r0
 8003d30:	1dfb      	adds	r3, r7, #7
 8003d32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PROTOCOL1 register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8003d34:	230f      	movs	r3, #15
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	001a      	movs	r2, r3
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	2051      	movs	r0, #81	; 0x51
 8003d3e:	f003 fb25 	bl	800738c <RadioSpiReadRegisters>
 8003d42:	1c03      	adds	r3, r0, #0
 8003d44:	1c1a      	adds	r2, r3, #0
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <SpiritCsma+0x80>)
 8003d48:	b212      	sxth	r2, r2
 8003d4a:	1c11      	adds	r1, r2, #0
 8003d4c:	7019      	strb	r1, [r3, #0]
 8003d4e:	0412      	lsls	r2, r2, #16
 8003d50:	0e12      	lsrs	r2, r2, #24
 8003d52:	705a      	strb	r2, [r3, #1]

  /* Sets or resets the CSMA enable bit */
  if(xNewState==S_ENABLE)
 8003d54:	1dfb      	adds	r3, r7, #7
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d108      	bne.n	8003d6e <SpiritCsma+0x46>
  {
    tempRegValue |= PROTOCOL1_CSMA_ON_MASK;
 8003d5c:	210f      	movs	r1, #15
 8003d5e:	187b      	adds	r3, r7, r1
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2204      	movs	r2, #4
 8003d64:	4313      	orrs	r3, r2
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e007      	b.n	8003d7e <SpiritCsma+0x56>
  }
  else
  {
    tempRegValue &= ~PROTOCOL1_CSMA_ON_MASK;
 8003d6e:	210f      	movs	r1, #15
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2204      	movs	r2, #4
 8003d76:	4393      	bics	r3, r2
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	701a      	strb	r2, [r3, #0]
  }

  /* Writes the new value on the PROTOCOL1 register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8003d7e:	230f      	movs	r3, #15
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	001a      	movs	r2, r3
 8003d84:	2101      	movs	r1, #1
 8003d86:	2051      	movs	r0, #81	; 0x51
 8003d88:	f003 fa5e 	bl	8007248 <RadioSpiWriteRegisters>
 8003d8c:	1c03      	adds	r3, r0, #0
 8003d8e:	1c1a      	adds	r2, r3, #0
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <SpiritCsma+0x80>)
 8003d92:	b212      	sxth	r2, r2
 8003d94:	1c11      	adds	r1, r2, #0
 8003d96:	7019      	strb	r1, [r3, #0]
 8003d98:	0412      	lsls	r2, r2, #16
 8003d9a:	0e12      	lsrs	r2, r2, #24
 8003d9c:	705a      	strb	r2, [r3, #1]

}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b004      	add	sp, #16
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	20000378 	.word	0x20000378

08003dac <SpiritGeneralSetExtRef>:
 * @param  xExtMode new state for the external reference.
 *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
 * @retval None.
 */
void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	0002      	movs	r2, r0
 8003db4:	1dfb      	adds	r3, r7, #7
 8003db6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_MODE_EXT(xExtMode));

  /* Reads the ANA_FUNC_CONF0_BASE register value */
  SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003db8:	230f      	movs	r3, #15
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f003 fae3 	bl	800738c <RadioSpiReadRegisters>

  /* Build the value to write */
  if(xExtMode == MODE_EXT_XO)
 8003dc6:	1dfb      	adds	r3, r7, #7
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <SpiritGeneralSetExtRef+0x34>
  {
    tempRegValue &= ~EXT_REF_MASK;
 8003dce:	210f      	movs	r1, #15
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	4393      	bics	r3, r2
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e007      	b.n	8003df0 <SpiritGeneralSetExtRef+0x44>
  }
  else
  {
    tempRegValue |= EXT_REF_MASK;
 8003de0:	210f      	movs	r1, #15
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2210      	movs	r2, #16
 8003de8:	4313      	orrs	r3, r2
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	701a      	strb	r2, [r3, #0]
  }

  /* Writes value on register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003df0:	230f      	movs	r3, #15
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	001a      	movs	r2, r3
 8003df6:	2101      	movs	r1, #1
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f003 fa25 	bl	8007248 <RadioSpiWriteRegisters>
 8003dfe:	1c03      	adds	r3, r0, #0
 8003e00:	1c1a      	adds	r2, r3, #0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <SpiritGeneralSetExtRef+0x6c>)
 8003e04:	b212      	sxth	r2, r2
 8003e06:	1c11      	adds	r1, r2, #0
 8003e08:	7019      	strb	r1, [r3, #0]
 8003e0a:	0412      	lsls	r2, r2, #16
 8003e0c:	0e12      	lsrs	r2, r2, #24
 8003e0e:	705a      	strb	r2, [r3, #1]

}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000378 	.word	0x20000378

08003e1c <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8003e24:	210f      	movs	r1, #15
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	785a      	ldrb	r2, [r3, #1]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	789b      	ldrb	r3, [r3, #2]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	701a      	strb	r2, [r3, #0]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	187a      	adds	r2, r7, r1
 8003e42:	2101      	movs	r1, #1
 8003e44:	0018      	movs	r0, r3
 8003e46:	f003 f9ff 	bl	8007248 <RadioSpiWriteRegisters>
 8003e4a:	1c03      	adds	r3, r0, #0
 8003e4c:	1c1a      	adds	r2, r3, #0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <SpiritGpioInit+0x48>)
 8003e50:	b212      	sxth	r2, r2
 8003e52:	1c11      	adds	r1, r2, #0
 8003e54:	7019      	strb	r1, [r3, #0]
 8003e56:	0412      	lsls	r2, r2, #16
 8003e58:	0e12      	lsrs	r2, r2, #24
 8003e5a:	705a      	strb	r2, [r3, #1]

}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b004      	add	sp, #16
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000378 	.word	0x20000378

08003e68 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8003e70:	230c      	movs	r3, #12
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

  if(pxIrqInit!=NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <SpiritIrqDeInit+0x2c>
  {
    uint32_t tempValue = 0x00000000;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
    
    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8003e82:	2308      	movs	r3, #8
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	0010      	movs	r0, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	001a      	movs	r2, r3
 8003e90:	f005 fbe8 	bl	8009664 <memcpy>
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8003e94:	230c      	movs	r3, #12
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	001a      	movs	r2, r3
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	2090      	movs	r0, #144	; 0x90
 8003e9e:	f003 f9d3 	bl	8007248 <RadioSpiWriteRegisters>
 8003ea2:	1c03      	adds	r3, r0, #0
 8003ea4:	1c1a      	adds	r2, r3, #0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <SpiritIrqDeInit+0x54>)
 8003ea8:	b212      	sxth	r2, r2
 8003eaa:	1c11      	adds	r1, r2, #0
 8003eac:	7019      	strb	r1, [r3, #0]
 8003eae:	0412      	lsls	r2, r2, #16
 8003eb0:	0e12      	lsrs	r2, r2, #24
 8003eb2:	705a      	strb	r2, [r3, #1]
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b004      	add	sp, #16
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000378 	.word	0x20000378

08003ec0 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	000a      	movs	r2, r1
 8003eca:	1cfb      	adds	r3, r7, #3
 8003ecc:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	2104      	movs	r1, #4
 8003eda:	2090      	movs	r0, #144	; 0x90
 8003edc:	f003 fa56 	bl	800738c <RadioSpiReadRegisters>
 8003ee0:	1c03      	adds	r3, r0, #0
 8003ee2:	1c1a      	adds	r2, r3, #0
 8003ee4:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <SpiritIrq+0xf0>)
 8003ee6:	b212      	sxth	r2, r2
 8003ee8:	1c11      	adds	r1, r2, #0
 8003eea:	7019      	strb	r1, [r3, #0]
 8003eec:	0412      	lsls	r2, r2, #16
 8003eee:	0e12      	lsrs	r2, r2, #24
 8003ef0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8003ef2:	2313      	movs	r3, #19
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	e015      	b.n	8003f28 <SpiritIrq+0x68>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8003efc:	2013      	movs	r0, #19
 8003efe:	183b      	adds	r3, r7, r0
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	220c      	movs	r2, #12
 8003f04:	18ba      	adds	r2, r7, r2
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	0019      	movs	r1, r3
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2203      	movs	r2, #3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4099      	lsls	r1, r3
 8003f16:	000b      	movs	r3, r1
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	18d3      	adds	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	183b      	adds	r3, r7, r0
 8003f24:	3201      	adds	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	2313      	movs	r3, #19
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d9e4      	bls.n	8003efc <SpiritIrq+0x3c>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8003f32:	1cfb      	adds	r3, r7, #3
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <SpiritIrq+0x86>
  {
    tempValue &= (~xIrq);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	4013      	ands	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e003      	b.n	8003f4e <SpiritIrq+0x8e>
  }
  else
  {
    tempValue |= (xIrq);
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8003f4e:	2312      	movs	r3, #18
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e012      	b.n	8003f7e <SpiritIrq+0xbe>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8003f58:	2012      	movs	r0, #18
 8003f5a:	183b      	adds	r3, r7, r0
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2203      	movs	r2, #3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	40da      	lsrs	r2, r3
 8003f68:	183b      	adds	r3, r7, r0
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	b2d1      	uxtb	r1, r2
 8003f6e:	220c      	movs	r2, #12
 8003f70:	18ba      	adds	r2, r7, r2
 8003f72:	54d1      	strb	r1, [r2, r3]
  for(uint8_t j=0; j<4; j++)
 8003f74:	183b      	adds	r3, r7, r0
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	183b      	adds	r3, r7, r0
 8003f7a:	3201      	adds	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	2312      	movs	r3, #18
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d9e7      	bls.n	8003f58 <SpiritIrq+0x98>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8003f88:	230c      	movs	r3, #12
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	001a      	movs	r2, r3
 8003f8e:	2104      	movs	r1, #4
 8003f90:	2090      	movs	r0, #144	; 0x90
 8003f92:	f003 f959 	bl	8007248 <RadioSpiWriteRegisters>
 8003f96:	1c03      	adds	r3, r0, #0
 8003f98:	1c1a      	adds	r2, r3, #0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <SpiritIrq+0xf0>)
 8003f9c:	b212      	sxth	r2, r2
 8003f9e:	1c11      	adds	r1, r2, #0
 8003fa0:	7019      	strb	r1, [r3, #0]
 8003fa2:	0412      	lsls	r2, r2, #16
 8003fa4:	0e12      	lsrs	r2, r2, #24
 8003fa6:	705a      	strb	r2, [r3, #1]

}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000378 	.word	0x20000378

08003fb4 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	2104      	movs	r1, #4
 8003fc8:	20fa      	movs	r0, #250	; 0xfa
 8003fca:	f003 f9df 	bl	800738c <RadioSpiReadRegisters>
 8003fce:	1c03      	adds	r3, r0, #0
 8003fd0:	1c1a      	adds	r2, r3, #0
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <SpiritIrqGetStatus+0x6c>)
 8003fd4:	b212      	sxth	r2, r2
 8003fd6:	1c11      	adds	r1, r2, #0
 8003fd8:	7019      	strb	r1, [r3, #0]
 8003fda:	0412      	lsls	r2, r2, #16
 8003fdc:	0e12      	lsrs	r2, r2, #24
 8003fde:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8003fe0:	2313      	movs	r3, #19
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e011      	b.n	800400e <SpiritIrqGetStatus+0x5a>
  {
    *pIrqPointer = tempRegValue[3-i];
 8003fea:	2113      	movs	r1, #19
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	220c      	movs	r2, #12
 8003ff6:	18ba      	adds	r2, r7, r2
 8003ff8:	5cd2      	ldrb	r2, [r2, r3]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8004004:	187b      	adds	r3, r7, r1
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	187b      	adds	r3, r7, r1
 800400a:	3201      	adds	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	2313      	movs	r3, #19
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d9e8      	bls.n	8003fea <SpiritIrqGetStatus+0x36>
  }
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b006      	add	sp, #24
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000378 	.word	0x20000378

08004024 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	001a      	movs	r2, r3
 800402e:	2104      	movs	r1, #4
 8004030:	20fa      	movs	r0, #250	; 0xfa
 8004032:	f003 f9ab 	bl	800738c <RadioSpiReadRegisters>
 8004036:	1c03      	adds	r3, r0, #0
 8004038:	1c1a      	adds	r2, r3, #0
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <SpiritIrqClearStatus+0x2c>)
 800403c:	b212      	sxth	r2, r2
 800403e:	1c11      	adds	r1, r2, #0
 8004040:	7019      	strb	r1, [r3, #0]
 8004042:	0412      	lsls	r2, r2, #16
 8004044:	0e12      	lsrs	r2, r2, #24
 8004046:	705a      	strb	r2, [r3, #1]

}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b002      	add	sp, #8
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000378 	.word	0x20000378

08004054 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 800405a:	1dfb      	adds	r3, r7, #7
 800405c:	001a      	movs	r2, r3
 800405e:	2101      	movs	r1, #1
 8004060:	20e7      	movs	r0, #231	; 0xe7
 8004062:	f003 f993 	bl	800738c <RadioSpiReadRegisters>
 8004066:	1c03      	adds	r3, r0, #0
 8004068:	1c1a      	adds	r2, r3, #0
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <SpiritLinearFifoReadNumElementsRxFifo+0x38>)
 800406c:	b212      	sxth	r2, r2
 800406e:	1c11      	adds	r1, r2, #0
 8004070:	7019      	strb	r1, [r3, #0]
 8004072:	0412      	lsls	r2, r2, #16
 8004074:	0e12      	lsrs	r2, r2, #24
 8004076:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8004078:	1dfb      	adds	r3, r7, #7
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	227f      	movs	r2, #127	; 0x7f
 800407e:	4013      	ands	r3, r2
 8004080:	b2db      	uxtb	r3, r3

}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b002      	add	sp, #8
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	20000378 	.word	0x20000378

08004090 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8004090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004092:	b08d      	sub	sp, #52	; 0x34
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a8d      	ldr	r2, [pc, #564]	; (80042d0 <SpiritManagementSetFrequencyBase+0x240>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d90b      	bls.n	80040b8 <SpiritManagementSetFrequencyBase+0x28>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a8c      	ldr	r2, [pc, #560]	; (80042d4 <SpiritManagementSetFrequencyBase+0x244>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d807      	bhi.n	80040b8 <SpiritManagementSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 80040a8:	2327      	movs	r3, #39	; 0x27
 80040aa:	2208      	movs	r2, #8
 80040ac:	4694      	mov	ip, r2
 80040ae:	44bc      	add	ip, r7
 80040b0:	4463      	add	r3, ip
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e026      	b.n	8004106 <SpiritManagementSetFrequencyBase+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a87      	ldr	r2, [pc, #540]	; (80042d8 <SpiritManagementSetFrequencyBase+0x248>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d90b      	bls.n	80040d8 <SpiritManagementSetFrequencyBase+0x48>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a86      	ldr	r2, [pc, #536]	; (80042dc <SpiritManagementSetFrequencyBase+0x24c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d807      	bhi.n	80040d8 <SpiritManagementSetFrequencyBase+0x48>
  {
    band = MIDDLE_BAND;
 80040c8:	2327      	movs	r3, #39	; 0x27
 80040ca:	2208      	movs	r2, #8
 80040cc:	4694      	mov	ip, r2
 80040ce:	44bc      	add	ip, r7
 80040d0:	4463      	add	r3, ip
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e016      	b.n	8004106 <SpiritManagementSetFrequencyBase+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a81      	ldr	r2, [pc, #516]	; (80042e0 <SpiritManagementSetFrequencyBase+0x250>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d90b      	bls.n	80040f8 <SpiritManagementSetFrequencyBase+0x68>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a80      	ldr	r2, [pc, #512]	; (80042e4 <SpiritManagementSetFrequencyBase+0x254>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d807      	bhi.n	80040f8 <SpiritManagementSetFrequencyBase+0x68>
  {
    band = LOW_BAND;
 80040e8:	2327      	movs	r3, #39	; 0x27
 80040ea:	2208      	movs	r2, #8
 80040ec:	4694      	mov	ip, r2
 80040ee:	44bc      	add	ip, r7
 80040f0:	4463      	add	r3, ip
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e006      	b.n	8004106 <SpiritManagementSetFrequencyBase+0x76>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 80040f8:	2327      	movs	r3, #39	; 0x27
 80040fa:	2208      	movs	r2, #8
 80040fc:	4694      	mov	ip, r2
 80040fe:	44bc      	add	ip, r7
 8004100:	4463      	add	r3, ip
 8004102:	2203      	movs	r2, #3
 8004104:	701a      	strb	r2, [r3, #0]
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8004106:	f001 f931 	bl	800536c <SpiritRadioGetFrequencyOffset>
 800410a:	0003      	movs	r3, r0
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800410e:	f001 f90b 	bl	8005328 <SpiritRadioGetChannelSpace>
 8004112:	0003      	movs	r3, r0
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8004116:	251b      	movs	r5, #27
 8004118:	2608      	movs	r6, #8
 800411a:	19bb      	adds	r3, r7, r6
 800411c:	195c      	adds	r4, r3, r5
 800411e:	f001 f8e9 	bl	80052f4 <SpiritRadioGetChannel>
 8004122:	0003      	movs	r3, r0
 8004124:	7023      	strb	r3, [r4, #0]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8004126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	18d2      	adds	r2, r2, r3
 800412c:	19bb      	adds	r3, r7, r6
 800412e:	195b      	adds	r3, r3, r5
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004134:	434b      	muls	r3, r1
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	61fb      	str	r3, [r7, #28]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 800413a:	f002 f87b 	bl	8006234 <SpiritRadioGetRefDiv>
 800413e:	0003      	movs	r3, r0
 8004140:	001a      	movs	r2, r3
 8004142:	2313      	movs	r3, #19
 8004144:	2108      	movs	r1, #8
 8004146:	468c      	mov	ip, r1
 8004148:	44bc      	add	ip, r7
 800414a:	4463      	add	r3, ip
 800414c:	3201      	adds	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
  
  switch(band)
 8004150:	2327      	movs	r3, #39	; 0x27
 8004152:	2208      	movs	r2, #8
 8004154:	4694      	mov	ip, r2
 8004156:	44bc      	add	ip, r7
 8004158:	4463      	add	r3, ip
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d01f      	beq.n	80041a0 <SpiritManagementSetFrequencyBase+0x110>
 8004160:	dc02      	bgt.n	8004168 <SpiritManagementSetFrequencyBase+0xd8>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d028      	beq.n	80041b8 <SpiritManagementSetFrequencyBase+0x128>
 8004166:	e032      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
 8004168:	2b02      	cmp	r3, #2
 800416a:	d00d      	beq.n	8004188 <SpiritManagementSetFrequencyBase+0xf8>
 800416c:	2b03      	cmp	r3, #3
 800416e:	d12e      	bne.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4a5d      	ldr	r2, [pc, #372]	; (80042e8 <SpiritManagementSetFrequencyBase+0x258>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d803      	bhi.n	8004180 <SpiritManagementSetFrequencyBase+0xf0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8004178:	2000      	movs	r0, #0
 800417a:	f7ff fd15 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800417e:	e026      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
      SpiritCalibrationSelectVco(VCO_H);
 8004180:	2001      	movs	r0, #1
 8004182:	f7ff fd11 	bl	8003ba8 <SpiritCalibrationSelectVco>
    break;
 8004186:	e022      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
    
  case LOW_BAND:
    if(Fc<322562500)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4a58      	ldr	r2, [pc, #352]	; (80042ec <SpiritManagementSetFrequencyBase+0x25c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d803      	bhi.n	8004198 <SpiritManagementSetFrequencyBase+0x108>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8004190:	2000      	movs	r0, #0
 8004192:	f7ff fd09 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8004196:	e01a      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
      SpiritCalibrationSelectVco(VCO_H);
 8004198:	2001      	movs	r0, #1
 800419a:	f7ff fd05 	bl	8003ba8 <SpiritCalibrationSelectVco>
    break;
 800419e:	e016      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4a53      	ldr	r2, [pc, #332]	; (80042f0 <SpiritManagementSetFrequencyBase+0x260>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d803      	bhi.n	80041b0 <SpiritManagementSetFrequencyBase+0x120>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80041a8:	2000      	movs	r0, #0
 80041aa:	f7ff fcfd 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80041ae:	e00e      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
      SpiritCalibrationSelectVco(VCO_H);
 80041b0:	2001      	movs	r0, #1
 80041b2:	f7ff fcf9 	bl	8003ba8 <SpiritCalibrationSelectVco>
    break;
 80041b6:	e00a      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4a4e      	ldr	r2, [pc, #312]	; (80042f4 <SpiritManagementSetFrequencyBase+0x264>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d803      	bhi.n	80041c8 <SpiritManagementSetFrequencyBase+0x138>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7ff fcf1 	bl	8003ba8 <SpiritCalibrationSelectVco>
 80041c6:	e002      	b.n	80041ce <SpiritManagementSetFrequencyBase+0x13e>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80041c8:	2001      	movs	r0, #1
 80041ca:	f7ff fced 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80041ce:	2612      	movs	r6, #18
 80041d0:	2408      	movs	r4, #8
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	199c      	adds	r4, r3, r6
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	0018      	movs	r0, r3
 80041da:	f000 ff6f 	bl	80050bc <SpiritRadioSearchWCP>
 80041de:	0003      	movs	r3, r0
 80041e0:	7023      	strb	r3, [r4, #0]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7fe fe16 	bl	8002e14 <__aeabi_ui2d>
 80041e8:	0004      	movs	r4, r0
 80041ea:	000d      	movs	r5, r1
 80041ec:	2313      	movs	r3, #19
 80041ee:	2208      	movs	r2, #8
 80041f0:	4694      	mov	ip, r2
 80041f2:	44bc      	add	ip, r7
 80041f4:	4463      	add	r3, ip
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	049b      	lsls	r3, r3, #18
 80041fa:	2227      	movs	r2, #39	; 0x27
 80041fc:	2108      	movs	r1, #8
 80041fe:	468c      	mov	ip, r1
 8004200:	44bc      	add	ip, r7
 8004202:	4462      	add	r2, ip
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	493c      	ldr	r1, [pc, #240]	; (80042f8 <SpiritManagementSetFrequencyBase+0x268>)
 8004208:	5c8a      	ldrb	r2, [r1, r2]
 800420a:	4353      	muls	r3, r2
 800420c:	0018      	movs	r0, r3
 800420e:	f7fe fdc7 	bl	8002da0 <__aeabi_i2d>
 8004212:	6038      	str	r0, [r7, #0]
 8004214:	6079      	str	r1, [r7, #4]
 8004216:	f002 f88d 	bl	8006334 <SpiritRadioGetXtalFrequency>
 800421a:	0003      	movs	r3, r0
 800421c:	0018      	movs	r0, r3
 800421e:	f7fe fdf9 	bl	8002e14 <__aeabi_ui2d>
 8004222:	0002      	movs	r2, r0
 8004224:	000b      	movs	r3, r1
 8004226:	6838      	ldr	r0, [r7, #0]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	f7fd fbbf 	bl	80019ac <__aeabi_ddiv>
 800422e:	0002      	movs	r2, r0
 8004230:	000b      	movs	r3, r1
 8004232:	0020      	movs	r0, r4
 8004234:	0029      	movs	r1, r5
 8004236:	f7fd ffc3 	bl	80021c0 <__aeabi_dmul>
 800423a:	0003      	movs	r3, r0
 800423c:	000c      	movs	r4, r1
 800423e:	0018      	movs	r0, r3
 8004240:	0021      	movs	r1, r4
 8004242:	f7fc f967 	bl	8000514 <__aeabi_d2uiz>
 8004246:	0003      	movs	r3, r0
 8004248:	617b      	str	r3, [r7, #20]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	0d5b      	lsrs	r3, r3, #21
 800424e:	b2db      	uxtb	r3, r3
 8004250:	221f      	movs	r2, #31
 8004252:	4013      	ands	r3, r2
 8004254:	b2da      	uxtb	r2, r3
 8004256:	2408      	movs	r4, #8
 8004258:	193b      	adds	r3, r7, r4
 800425a:	199b      	adds	r3, r3, r6
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	015b      	lsls	r3, r3, #5
 8004260:	b2db      	uxtb	r3, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	b2da      	uxtb	r2, r3
 8004266:	2008      	movs	r0, #8
 8004268:	193b      	adds	r3, r7, r4
 800426a:	181b      	adds	r3, r3, r0
 800426c:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	0b5b      	lsrs	r3, r3, #13
 8004272:	b2da      	uxtb	r2, r3
 8004274:	193b      	adds	r3, r7, r4
 8004276:	181b      	adds	r3, r3, r0
 8004278:	705a      	strb	r2, [r3, #1]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	b2da      	uxtb	r2, r3
 8004280:	193b      	adds	r3, r7, r4
 8004282:	181b      	adds	r3, r3, r0
 8004284:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	b2da      	uxtb	r2, r3
 800428e:	2327      	movs	r3, #39	; 0x27
 8004290:	2108      	movs	r1, #8
 8004292:	468c      	mov	ip, r1
 8004294:	44bc      	add	ip, r7
 8004296:	4463      	add	r3, ip
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	4918      	ldr	r1, [pc, #96]	; (80042fc <SpiritManagementSetFrequencyBase+0x26c>)
 800429c:	5ccb      	ldrb	r3, [r1, r3]
 800429e:	4313      	orrs	r3, r2
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	193b      	adds	r3, r7, r4
 80042a4:	181b      	adds	r3, r3, r0
 80042a6:	70da      	strb	r2, [r3, #3]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80042a8:	193b      	adds	r3, r7, r4
 80042aa:	181b      	adds	r3, r3, r0
 80042ac:	001a      	movs	r2, r3
 80042ae:	2104      	movs	r1, #4
 80042b0:	2008      	movs	r0, #8
 80042b2:	f002 ffc9 	bl	8007248 <RadioSpiWriteRegisters>
 80042b6:	1c03      	adds	r3, r0, #0
 80042b8:	1c1a      	adds	r2, r3, #0
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <SpiritManagementSetFrequencyBase+0x270>)
 80042bc:	b212      	sxth	r2, r2
 80042be:	1c11      	adds	r1, r2, #0
 80042c0:	7019      	strb	r1, [r3, #0]
 80042c2:	0412      	lsls	r2, r2, #16
 80042c4:	0e12      	lsrs	r2, r2, #24
 80042c6:	705a      	strb	r2, [r3, #1]
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b00d      	add	sp, #52	; 0x34
 80042ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d0:	2e5f567f 	.word	0x2e5f567f
 80042d4:	390c2fe0 	.word	0x390c2fe0
 80042d8:	1701e47f 	.word	0x1701e47f
 80042dc:	1c146a60 	.word	0x1c146a60
 80042e0:	11d260bf 	.word	0x11d260bf
 80042e4:	14ced7e0 	.word	0x14ced7e0
 80042e8:	099cf4e1 	.word	0x099cf4e1
 80042ec:	1339e9c3 	.word	0x1339e9c3
 80042f0:	19a28d05 	.word	0x19a28d05
 80042f4:	33451a0a 	.word	0x33451a0a
 80042f8:	0800982c 	.word	0x0800982c
 80042fc:	08009828 	.word	0x08009828
 8004300:	20000378 	.word	0x20000378

08004304 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800430a:	230f      	movs	r3, #15
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
  uint8_t cStandby = 0;
 8004312:	230e      	movs	r3, #14
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800431a:	f002 f80b 	bl	8006334 <SpiritRadioGetXtalFrequency>
 800431e:	0003      	movs	r3, r0
 8004320:	60bb      	str	r3, [r7, #8]
  uint8_t nLockwon=0;
 8004322:	230d      	movs	r3, #13
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a64      	ldr	r2, [pc, #400]	; (80044c0 <SpiritManagementWaVcoCalibration+0x1bc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d912      	bls.n	8004358 <SpiritManagementWaVcoCalibration+0x54>
  {
    if(!SpiritRadioGetRefDiv())
 8004332:	f001 ff7f 	bl	8006234 <SpiritRadioGetRefDiv>
 8004336:	1e03      	subs	r3, r0, #0
 8004338:	d10e      	bne.n	8004358 <SpiritManagementWaVcoCalibration+0x54>
    {
      cRestore = 1;
 800433a:	230f      	movs	r3, #15
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
      nFreq = SpiritRadioGetFrequencyBase();
 8004342:	f001 f9bd 	bl	80056c0 <SpiritRadioGetFrequencyBase>
 8004346:	0003      	movs	r3, r0
 8004348:	607b      	str	r3, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800434a:	2001      	movs	r0, #1
 800434c:	f001 ff38 	bl	80061c0 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0018      	movs	r0, r3
 8004354:	f7ff fe9c 	bl	8004090 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8004358:	f001 f9b2 	bl	80056c0 <SpiritRadioGetFrequencyBase>
 800435c:	0003      	movs	r3, r0
 800435e:	607b      	str	r3, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8004360:	1c7b      	adds	r3, r7, #1
 8004362:	2225      	movs	r2, #37	; 0x25
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	1c7b      	adds	r3, r7, #1
 8004368:	001a      	movs	r2, r3
 800436a:	2101      	movs	r1, #1
 800436c:	20a1      	movs	r0, #161	; 0xa1
 800436e:	f002 ff6b 	bl	8007248 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8004372:	2001      	movs	r0, #1
 8004374:	f7ff fb44 	bl	8003a00 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8004378:	f002 f9f2 	bl	8006760 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 800437c:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	0e5b      	lsrs	r3, r3, #25
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d10f      	bne.n	80043aa <SpiritManagementWaVcoCalibration+0xa6>
  {
    cStandby = 1;
 800438a:	230e      	movs	r3, #14
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeReady();
 8004392:	2062      	movs	r0, #98	; 0x62
 8004394:	f7ff fc3e 	bl	8003c14 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8004398:	f002 f9e2 	bl	8006760 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800439c:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	0e5b      	lsrs	r3, r3, #25
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d1f6      	bne.n	8004398 <SpiritManagementWaVcoCalibration+0x94>
  }
  
  SpiritCmdStrobeLockTx();
 80043aa:	2066      	movs	r0, #102	; 0x66
 80043ac:	f7ff fc32 	bl	8003c14 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80043b0:	230d      	movs	r3, #13
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
  do{
    SpiritRefreshStatus();
 80043b8:	f002 f9d2 	bl	8006760 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80043bc:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	0e5b      	lsrs	r3, r3, #25
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b13      	cmp	r3, #19
 80043c8:	d109      	bne.n	80043de <SpiritManagementWaVcoCalibration+0xda>
    {
      if(nLockwon++==5) return 1;
 80043ca:	220d      	movs	r2, #13
 80043cc:	18bb      	adds	r3, r7, r2
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	18ba      	adds	r2, r7, r2
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	7011      	strb	r1, [r2, #0]
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d101      	bne.n	80043de <SpiritManagementWaVcoCalibration+0xda>
 80043da:	2301      	movs	r3, #1
 80043dc:	e06b      	b.n	80044b6 <SpiritManagementWaVcoCalibration+0x1b2>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80043de:	4b39      	ldr	r3, [pc, #228]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	061b      	lsls	r3, r3, #24
 80043e4:	0e5b      	lsrs	r3, r3, #25
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b0f      	cmp	r3, #15
 80043ea:	d1e5      	bne.n	80043b8 <SpiritManagementWaVcoCalibration+0xb4>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80043ec:	1cfc      	adds	r4, r7, #3
 80043ee:	f7ff fb49 	bl	8003a84 <SpiritCalibrationGetVcoCalData>
 80043f2:	0003      	movs	r3, r0
 80043f4:	7023      	strb	r3, [r4, #0]
  
  SpiritCmdStrobeReady();
 80043f6:	2062      	movs	r0, #98	; 0x62
 80043f8:	f7ff fc0c 	bl	8003c14 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80043fc:	f002 f9b0 	bl	8006760 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	0e5b      	lsrs	r3, r3, #25
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b03      	cmp	r3, #3
 800440c:	d1f6      	bne.n	80043fc <SpiritManagementWaVcoCalibration+0xf8>
  
    
  SpiritCmdStrobeLockRx();
 800440e:	2065      	movs	r0, #101	; 0x65
 8004410:	f7ff fc00 	bl	8003c14 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8004414:	230d      	movs	r3, #13
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
  do{
    SpiritRefreshStatus();
 800441c:	f002 f9a0 	bl	8006760 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	061b      	lsls	r3, r3, #24
 8004426:	0e5b      	lsrs	r3, r3, #25
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b13      	cmp	r3, #19
 800442c:	d109      	bne.n	8004442 <SpiritManagementWaVcoCalibration+0x13e>
    {
      if(nLockwon++==5) return 1;
 800442e:	220d      	movs	r2, #13
 8004430:	18bb      	adds	r3, r7, r2
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	18ba      	adds	r2, r7, r2
 8004436:	1c59      	adds	r1, r3, #1
 8004438:	7011      	strb	r1, [r2, #0]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d101      	bne.n	8004442 <SpiritManagementWaVcoCalibration+0x13e>
 800443e:	2301      	movs	r3, #1
 8004440:	e039      	b.n	80044b6 <SpiritManagementWaVcoCalibration+0x1b2>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8004442:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	061b      	lsls	r3, r3, #24
 8004448:	0e5b      	lsrs	r3, r3, #25
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d1e5      	bne.n	800441c <SpiritManagementWaVcoCalibration+0x118>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8004450:	1cbc      	adds	r4, r7, #2
 8004452:	f7ff fb17 	bl	8003a84 <SpiritCalibrationGetVcoCalData>
 8004456:	0003      	movs	r3, r0
 8004458:	7023      	strb	r3, [r4, #0]
  
  SpiritCmdStrobeReady();
 800445a:	2062      	movs	r0, #98	; 0x62
 800445c:	f7ff fbda 	bl	8003c14 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8004460:	f002 f97e 	bl	8006760 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <SpiritManagementWaVcoCalibration+0x1c0>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	0e5b      	lsrs	r3, r3, #25
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b03      	cmp	r3, #3
 8004470:	d1f6      	bne.n	8004460 <SpiritManagementWaVcoCalibration+0x15c>
  
  if(cStandby == 1)
 8004472:	230e      	movs	r3, #14
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <SpiritManagementWaVcoCalibration+0x17e>
  {
    SpiritCmdStrobeStandby();    
 800447c:	2063      	movs	r0, #99	; 0x63
 800447e:	f7ff fbc9 	bl	8003c14 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8004482:	2000      	movs	r0, #0
 8004484:	f7ff fabc 	bl	8003a00 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8004488:	230f      	movs	r3, #15
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <SpiritManagementWaVcoCalibration+0x19c>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8004492:	2000      	movs	r0, #0
 8004494:	f001 fe94 	bl	80061c0 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	0018      	movs	r0, r3
 800449c:	f7ff fdf8 	bl	8004090 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 80044a0:	1cfb      	adds	r3, r7, #3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7ff fb0b 	bl	8003ac0 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80044aa:	1cbb      	adds	r3, r7, #2
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f7ff fb40 	bl	8003b34 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b005      	add	sp, #20
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	01c9c380 	.word	0x01c9c380
 80044c4:	20000378 	.word	0x20000378

080044c8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80044ce:	4b17      	ldr	r3, [pc, #92]	; (800452c <SpiritManagementWaCmdStrobeTx+0x64>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d025      	beq.n	8004524 <SpiritManagementWaCmdStrobeTx+0x5c>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <SpiritManagementWaCmdStrobeTx+0x68>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d908      	bls.n	80044f4 <SpiritManagementWaCmdStrobeTx+0x2c>
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <SpiritManagementWaCmdStrobeTx+0x68>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a14      	ldr	r2, [pc, #80]	; (8004538 <SpiritManagementWaCmdStrobeTx+0x70>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d803      	bhi.n	80044f4 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80044ec:	20c0      	movs	r0, #192	; 0xc0
 80044ee:	f001 fd53 	bl	8005f98 <SpiritRadioSetPACwc>
 80044f2:	e002      	b.n	80044fa <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80044f4:	2000      	movs	r0, #0
 80044f6:	f001 fd4f 	bl	8005f98 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80044fa:	1dfb      	adds	r3, r7, #7
 80044fc:	2211      	movs	r2, #17
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	1dfb      	adds	r3, r7, #7
 8004502:	001a      	movs	r2, r3
 8004504:	2101      	movs	r1, #1
 8004506:	20a9      	movs	r0, #169	; 0xa9
 8004508:	f002 fe9e 	bl	8007248 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	2220      	movs	r2, #32
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	001a      	movs	r2, r3
 8004516:	2101      	movs	r1, #1
 8004518:	20a5      	movs	r0, #165	; 0xa5
 800451a:	f002 fe95 	bl	8007248 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <SpiritManagementWaCmdStrobeTx+0x64>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
  }
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000198 	.word	0x20000198
 8004530:	20000340 	.word	0x20000340
 8004534:	08f0d17f 	.word	0x08f0d17f
 8004538:	1c03a180 	.word	0x1c03a180

0800453c <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <SpiritManagementWaCmdStrobeRx+0x38>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d00e      	beq.n	800456a <SpiritManagementWaCmdStrobeRx+0x2e>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	2298      	movs	r2, #152	; 0x98
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	1dfb      	adds	r3, r7, #7
 8004554:	001a      	movs	r2, r3
 8004556:	2101      	movs	r1, #1
 8004558:	20a5      	movs	r0, #165	; 0xa5
 800455a:	f002 fe75 	bl	8007248 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 800455e:	2000      	movs	r0, #0
 8004560:	f001 fd1a 	bl	8005f98 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <SpiritManagementWaCmdStrobeRx+0x38>)
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
  }
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b002      	add	sp, #8
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	20000198 	.word	0x20000198

08004578 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <SpiritManagementWaTRxFcMem+0x1c>)
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <SpiritManagementWaTRxFcMem+0x20>)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000198 	.word	0x20000198
 8004598:	20000340 	.word	0x20000340

0800459c <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80045a4:	2408      	movs	r4, #8
 80045a6:	193b      	adds	r3, r7, r4
 80045a8:	001a      	movs	r2, r3
 80045aa:	2101      	movs	r1, #1
 80045ac:	2051      	movs	r0, #81	; 0x51
 80045ae:	f002 feed 	bl	800738c <RadioSpiReadRegisters>
 80045b2:	1c03      	adds	r3, r0, #0
 80045b4:	1c1a      	adds	r2, r3, #0
 80045b6:	4b76      	ldr	r3, [pc, #472]	; (8004790 <SpiritPktBasicInit+0x1f4>)
 80045b8:	b212      	sxth	r2, r2
 80045ba:	1c11      	adds	r1, r2, #0
 80045bc:	7019      	strb	r1, [r3, #0]
 80045be:	0412      	lsls	r2, r2, #16
 80045c0:	0e12      	lsrs	r2, r2, #24
 80045c2:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 80045c4:	193b      	adds	r3, r7, r4
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2220      	movs	r2, #32
 80045ca:	4393      	bics	r3, r2
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	193b      	adds	r3, r7, r4
 80045d0:	701a      	strb	r2, [r3, #0]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 80045d2:	193b      	adds	r3, r7, r4
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2201      	movs	r2, #1
 80045d8:	4313      	orrs	r3, r2
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	701a      	strb	r2, [r3, #0]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	001a      	movs	r2, r3
 80045e4:	2101      	movs	r1, #1
 80045e6:	2051      	movs	r0, #81	; 0x51
 80045e8:	f002 fe2e 	bl	8007248 <RadioSpiWriteRegisters>
 80045ec:	1c03      	adds	r3, r0, #0
 80045ee:	1c1a      	adds	r2, r3, #0
 80045f0:	4b67      	ldr	r3, [pc, #412]	; (8004790 <SpiritPktBasicInit+0x1f4>)
 80045f2:	b212      	sxth	r2, r2
 80045f4:	1c11      	adds	r1, r2, #0
 80045f6:	7019      	strb	r1, [r3, #0]
 80045f8:	0412      	lsls	r2, r2, #16
 80045fa:	0e12      	lsrs	r2, r2, #24
 80045fc:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80045fe:	193b      	adds	r3, r7, r4
 8004600:	001a      	movs	r2, r3
 8004602:	2101      	movs	r1, #1
 8004604:	204f      	movs	r0, #79	; 0x4f
 8004606:	f002 fec1 	bl	800738c <RadioSpiReadRegisters>
 800460a:	1c03      	adds	r3, r0, #0
 800460c:	1c1a      	adds	r2, r3, #0
 800460e:	4b60      	ldr	r3, [pc, #384]	; (8004790 <SpiritPktBasicInit+0x1f4>)
 8004610:	b212      	sxth	r2, r2
 8004612:	1c11      	adds	r1, r2, #0
 8004614:	7019      	strb	r1, [r3, #0]
 8004616:	0412      	lsls	r2, r2, #16
 8004618:	0e12      	lsrs	r2, r2, #24
 800461a:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 800461c:	193b      	adds	r3, r7, r4
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2230      	movs	r2, #48	; 0x30
 8004622:	4393      	bics	r3, r2
 8004624:	b2da      	uxtb	r2, r3
 8004626:	193b      	adds	r3, r7, r4
 8004628:	701a      	strb	r2, [r3, #0]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800462a:	193b      	adds	r3, r7, r4
 800462c:	001a      	movs	r2, r3
 800462e:	2101      	movs	r1, #1
 8004630:	204f      	movs	r0, #79	; 0x4f
 8004632:	f002 fe09 	bl	8007248 <RadioSpiWriteRegisters>
 8004636:	1c03      	adds	r3, r0, #0
 8004638:	1c1a      	adds	r2, r3, #0
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <SpiritPktBasicInit+0x1f4>)
 800463c:	b212      	sxth	r2, r2
 800463e:	1c11      	adds	r1, r2, #0
 8004640:	7019      	strb	r1, [r3, #0]
 8004642:	0412      	lsls	r2, r2, #16
 8004644:	0e12      	lsrs	r2, r2, #24
 8004646:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7b1b      	ldrb	r3, [r3, #12]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d104      	bne.n	800465a <SpiritPktBasicInit+0xbe>
  {
    tempRegValue[0]=0x08;
 8004650:	2308      	movs	r3, #8
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	2208      	movs	r2, #8
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e003      	b.n	8004662 <SpiritPktBasicInit+0xc6>
  }
  else
  {
    tempRegValue[0]=0x00;
 800465a:	2308      	movs	r3, #8
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 8004662:	2108      	movs	r1, #8
 8004664:	187b      	adds	r3, r7, r1
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7adb      	ldrb	r3, [r3, #11]
 800466c:	4313      	orrs	r3, r2
 800466e:	b2da      	uxtb	r2, r3
 8004670:	187b      	adds	r3, r7, r1
 8004672:	701a      	strb	r2, [r3, #0]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7a5b      	ldrb	r3, [r3, #9]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <SpiritPktBasicInit+0xe6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7a5b      	ldrb	r3, [r3, #9]
 8004686:	3b01      	subs	r3, #1
 8004688:	b2da      	uxtb	r2, r3
 800468a:	2108      	movs	r1, #8
 800468c:	187b      	adds	r3, r7, r1
 800468e:	705a      	strb	r2, [r3, #1]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	4313      	orrs	r3, r2
 800469a:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	709a      	strb	r2, [r3, #2]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7a9a      	ldrb	r2, [r3, #10]
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	70da      	strb	r2, [r3, #3]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7b9b      	ldrb	r3, [r3, #14]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d107      	bne.n	80046c8 <SpiritPktBasicInit+0x12c>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80046b8:	2108      	movs	r1, #8
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	78db      	ldrb	r3, [r3, #3]
 80046be:	2210      	movs	r2, #16
 80046c0:	4313      	orrs	r3, r2
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	70da      	strb	r2, [r3, #3]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7b5b      	ldrb	r3, [r3, #13]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d107      	bne.n	80046e0 <SpiritPktBasicInit+0x144>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80046d0:	2108      	movs	r1, #8
 80046d2:	187b      	adds	r3, r7, r1
 80046d4:	78db      	ldrb	r3, [r3, #3]
 80046d6:	2201      	movs	r2, #1
 80046d8:	4313      	orrs	r3, r2
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	70da      	strb	r2, [r3, #3]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80046e0:	2308      	movs	r3, #8
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	001a      	movs	r2, r3
 80046e6:	2104      	movs	r1, #4
 80046e8:	2030      	movs	r0, #48	; 0x30
 80046ea:	f002 fdad 	bl	8007248 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80046ee:	230f      	movs	r3, #15
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e026      	b.n	8004746 <SpiritPktBasicInit+0x1aa>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 80046f8:	230f      	movs	r3, #15
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	785b      	ldrb	r3, [r3, #1]
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	0019      	movs	r1, r3
 8004708:	2303      	movs	r3, #3
 800470a:	1a5b      	subs	r3, r3, r1
 800470c:	429a      	cmp	r2, r3
 800470e:	da07      	bge.n	8004720 <SpiritPktBasicInit+0x184>
    {
      tempRegValue[i]=0;
 8004710:	230f      	movs	r3, #15
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2208      	movs	r2, #8
 8004718:	18ba      	adds	r2, r7, r2
 800471a:	2100      	movs	r1, #0
 800471c:	54d1      	strb	r1, [r2, r3]
 800471e:	e00c      	b.n	800473a <SpiritPktBasicInit+0x19e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	210f      	movs	r1, #15
 8004726:	187b      	adds	r3, r7, r1
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	40da      	lsrs	r2, r3
 800472e:	187b      	adds	r3, r7, r1
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b2d1      	uxtb	r1, r2
 8004734:	2208      	movs	r2, #8
 8004736:	18ba      	adds	r2, r7, r2
 8004738:	54d1      	strb	r1, [r2, r3]
  for(i=0;i<4;i++)
 800473a:	210f      	movs	r1, #15
 800473c:	187b      	adds	r3, r7, r1
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	187b      	adds	r3, r7, r1
 8004742:	3201      	adds	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	230f      	movs	r3, #15
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d9d3      	bls.n	80046f8 <SpiritPktBasicInit+0x15c>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7a9b      	ldrb	r3, [r3, #10]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <SpiritPktBasicInit+0x1c4>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8004758:	2000      	movs	r0, #0
 800475a:	f000 f925 	bl	80049a8 <SpiritPktCommonFilterOnCrc>
 800475e:	e002      	b.n	8004766 <SpiritPktBasicInit+0x1ca>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8004760:	2001      	movs	r0, #1
 8004762:	f000 f921 	bl	80049a8 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8004766:	2308      	movs	r3, #8
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	001a      	movs	r2, r3
 800476c:	2104      	movs	r1, #4
 800476e:	2036      	movs	r0, #54	; 0x36
 8004770:	f002 fd6a 	bl	8007248 <RadioSpiWriteRegisters>
 8004774:	1c03      	adds	r3, r0, #0
 8004776:	1c1a      	adds	r2, r3, #0
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <SpiritPktBasicInit+0x1f4>)
 800477a:	b212      	sxth	r2, r2
 800477c:	1c11      	adds	r1, r2, #0
 800477e:	7019      	strb	r1, [r3, #0]
 8004780:	0412      	lsls	r2, r2, #16
 8004782:	0e12      	lsrs	r2, r2, #24
 8004784:	705a      	strb	r2, [r3, #1]

}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b005      	add	sp, #20
 800478c:	bd90      	pop	{r4, r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	20000378 	.word	0x20000378

08004794 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800479c:	230c      	movs	r3, #12
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	001a      	movs	r2, r3
 80047a2:	2101      	movs	r1, #1
 80047a4:	204f      	movs	r0, #79	; 0x4f
 80047a6:	f002 fdf1 	bl	800738c <RadioSpiReadRegisters>
 80047aa:	1c03      	adds	r3, r0, #0
 80047ac:	1c1a      	adds	r2, r3, #0
 80047ae:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <SpiritPktBasicAddressesInit+0x104>)
 80047b0:	b212      	sxth	r2, r2
 80047b2:	1c11      	adds	r1, r2, #0
 80047b4:	7019      	strb	r1, [r3, #0]
 80047b6:	0412      	lsls	r2, r2, #16
 80047b8:	0e12      	lsrs	r2, r2, #24
 80047ba:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d108      	bne.n	80047d6 <SpiritPktBasicAddressesInit+0x42>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80047c4:	210c      	movs	r1, #12
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2208      	movs	r2, #8
 80047cc:	4313      	orrs	r3, r2
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e007      	b.n	80047e6 <SpiritPktBasicAddressesInit+0x52>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80047d6:	210c      	movs	r1, #12
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2208      	movs	r2, #8
 80047de:	4393      	bics	r3, r2
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	187b      	adds	r3, r7, r1
 80047e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	789b      	ldrb	r3, [r3, #2]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d108      	bne.n	8004800 <SpiritPktBasicAddressesInit+0x6c>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80047ee:	210c      	movs	r1, #12
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2204      	movs	r2, #4
 80047f6:	4313      	orrs	r3, r2
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	187b      	adds	r3, r7, r1
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e007      	b.n	8004810 <SpiritPktBasicAddressesInit+0x7c>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8004800:	210c      	movs	r1, #12
 8004802:	187b      	adds	r3, r7, r1
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2204      	movs	r2, #4
 8004808:	4393      	bics	r3, r2
 800480a:	b2da      	uxtb	r2, r3
 800480c:	187b      	adds	r3, r7, r1
 800480e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	791b      	ldrb	r3, [r3, #4]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d108      	bne.n	800482a <SpiritPktBasicAddressesInit+0x96>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8004818:	210c      	movs	r1, #12
 800481a:	187b      	adds	r3, r7, r1
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2202      	movs	r2, #2
 8004820:	4313      	orrs	r3, r2
 8004822:	b2da      	uxtb	r2, r3
 8004824:	187b      	adds	r3, r7, r1
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	e007      	b.n	800483a <SpiritPktBasicAddressesInit+0xa6>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800482a:	210c      	movs	r1, #12
 800482c:	187b      	adds	r3, r7, r1
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2202      	movs	r2, #2
 8004832:	4393      	bics	r3, r2
 8004834:	b2da      	uxtb	r2, r3
 8004836:	187b      	adds	r3, r7, r1
 8004838:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800483a:	240c      	movs	r4, #12
 800483c:	193b      	adds	r3, r7, r4
 800483e:	001a      	movs	r2, r3
 8004840:	2101      	movs	r1, #1
 8004842:	204f      	movs	r0, #79	; 0x4f
 8004844:	f002 fd00 	bl	8007248 <RadioSpiWriteRegisters>
 8004848:	1c03      	adds	r3, r0, #0
 800484a:	1c1a      	adds	r2, r3, #0
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <SpiritPktBasicAddressesInit+0x104>)
 800484e:	b212      	sxth	r2, r2
 8004850:	1c11      	adds	r1, r2, #0
 8004852:	7019      	strb	r1, [r3, #0]
 8004854:	0412      	lsls	r2, r2, #16
 8004856:	0e12      	lsrs	r2, r2, #24
 8004858:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	795a      	ldrb	r2, [r3, #5]
 800485e:	193b      	adds	r3, r7, r4
 8004860:	701a      	strb	r2, [r3, #0]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	78da      	ldrb	r2, [r3, #3]
 8004866:	193b      	adds	r3, r7, r4
 8004868:	705a      	strb	r2, [r3, #1]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	785a      	ldrb	r2, [r3, #1]
 800486e:	193b      	adds	r3, r7, r4
 8004870:	709a      	strb	r2, [r3, #2]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8004872:	193b      	adds	r3, r7, r4
 8004874:	001a      	movs	r2, r3
 8004876:	2103      	movs	r1, #3
 8004878:	204c      	movs	r0, #76	; 0x4c
 800487a:	f002 fce5 	bl	8007248 <RadioSpiWriteRegisters>
 800487e:	1c03      	adds	r3, r0, #0
 8004880:	1c1a      	adds	r2, r3, #0
 8004882:	4b05      	ldr	r3, [pc, #20]	; (8004898 <SpiritPktBasicAddressesInit+0x104>)
 8004884:	b212      	sxth	r2, r2
 8004886:	1c11      	adds	r1, r2, #0
 8004888:	7019      	strb	r1, [r3, #0]
 800488a:	0412      	lsls	r2, r2, #16
 800488c:	0e12      	lsrs	r2, r2, #24
 800488e:	705a      	strb	r2, [r3, #1]
  
  
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b005      	add	sp, #20
 8004896:	bd90      	pop	{r4, r7, pc}
 8004898:	20000378 	.word	0x20000378

0800489c <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80048a2:	1dfb      	adds	r3, r7, #7
 80048a4:	001a      	movs	r2, r3
 80048a6:	2101      	movs	r1, #1
 80048a8:	2030      	movs	r0, #48	; 0x30
 80048aa:	f002 fd6f 	bl	800738c <RadioSpiReadRegisters>
 80048ae:	1c03      	adds	r3, r0, #0
 80048b0:	1c1a      	adds	r2, r3, #0
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <SpiritPktBasicGetAddressField+0x40>)
 80048b4:	b212      	sxth	r2, r2
 80048b6:	1c11      	adds	r1, r2, #0
 80048b8:	7019      	strb	r1, [r3, #0]
 80048ba:	0412      	lsls	r2, r2, #16
 80048bc:	0e12      	lsrs	r2, r2, #24
 80048be:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 80048c0:	1dfb      	adds	r3, r7, #7
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	001a      	movs	r2, r3
 80048c6:	2318      	movs	r3, #24
 80048c8:	4013      	ands	r3, r2
 80048ca:	d001      	beq.n	80048d0 <SpiritPktBasicGetAddressField+0x34>
  {
    return S_ENABLE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <SpiritPktBasicGetAddressField+0x36>
  }
  else
  {
    return S_DISABLE;
 80048d0:	2300      	movs	r3, #0
  }

}
 80048d2:	0018      	movs	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b002      	add	sp, #8
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	20000378 	.word	0x20000378

080048e0 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	0002      	movs	r2, r0
 80048e8:	1dbb      	adds	r3, r7, #6
 80048ea:	801a      	strh	r2, [r3, #0]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 80048ec:	230e      	movs	r3, #14
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	2200      	movs	r2, #0
 80048f2:	801a      	strh	r2, [r3, #0]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 80048f4:	f7ff ffd2 	bl	800489c <SpiritPktBasicGetAddressField>
 80048f8:	1e03      	subs	r3, r0, #0
 80048fa:	d003      	beq.n	8004904 <SpiritPktBasicSetPayloadLength+0x24>
  {
    overSize=1;
 80048fc:	230e      	movs	r3, #14
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	2201      	movs	r2, #1
 8004902:	801a      	strh	r2, [r3, #0]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8004904:	f000 f832 	bl	800496c <SpiritPktCommonGetControlLength>
 8004908:	0003      	movs	r3, r0
 800490a:	b299      	uxth	r1, r3
 800490c:	200e      	movs	r0, #14
 800490e:	183b      	adds	r3, r7, r0
 8004910:	183a      	adds	r2, r7, r0
 8004912:	8812      	ldrh	r2, [r2, #0]
 8004914:	188a      	adds	r2, r1, r2
 8004916:	801a      	strh	r2, [r3, #0]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8004918:	1dbb      	adds	r3, r7, #6
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b2da      	uxtb	r2, r3
 800491e:	0001      	movs	r1, r0
 8004920:	187b      	adds	r3, r7, r1
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	18d3      	adds	r3, r2, r3
 8004928:	b2da      	uxtb	r2, r3
 800492a:	200c      	movs	r0, #12
 800492c:	183b      	adds	r3, r7, r0
 800492e:	705a      	strb	r2, [r3, #1]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8004930:	1dbb      	adds	r3, r7, #6
 8004932:	881a      	ldrh	r2, [r3, #0]
 8004934:	187b      	adds	r3, r7, r1
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	121b      	asrs	r3, r3, #8
 800493c:	b2da      	uxtb	r2, r3
 800493e:	183b      	adds	r3, r7, r0
 8004940:	701a      	strb	r2, [r3, #0]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8004942:	183b      	adds	r3, r7, r0
 8004944:	001a      	movs	r2, r3
 8004946:	2102      	movs	r1, #2
 8004948:	2034      	movs	r0, #52	; 0x34
 800494a:	f002 fc7d 	bl	8007248 <RadioSpiWriteRegisters>
 800494e:	1c03      	adds	r3, r0, #0
 8004950:	1c1a      	adds	r2, r3, #0
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <SpiritPktBasicSetPayloadLength+0x88>)
 8004954:	b212      	sxth	r2, r2
 8004956:	1c11      	adds	r1, r2, #0
 8004958:	7019      	strb	r1, [r3, #0]
 800495a:	0412      	lsls	r2, r2, #16
 800495c:	0e12      	lsrs	r2, r2, #24
 800495e:	705a      	strb	r2, [r3, #1]

}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	b004      	add	sp, #16
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000378 	.word	0x20000378

0800496c <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8004972:	1dfb      	adds	r3, r7, #7
 8004974:	001a      	movs	r2, r3
 8004976:	2101      	movs	r1, #1
 8004978:	2030      	movs	r0, #48	; 0x30
 800497a:	f002 fd07 	bl	800738c <RadioSpiReadRegisters>
 800497e:	1c03      	adds	r3, r0, #0
 8004980:	1c1a      	adds	r2, r3, #0
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <SpiritPktCommonGetControlLength+0x38>)
 8004984:	b212      	sxth	r2, r2
 8004986:	1c11      	adds	r1, r2, #0
 8004988:	7019      	strb	r1, [r3, #0]
 800498a:	0412      	lsls	r2, r2, #16
 800498c:	0e12      	lsrs	r2, r2, #24
 800498e:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8004990:	1dfb      	adds	r3, r7, #7
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2207      	movs	r2, #7
 8004996:	4013      	ands	r3, r2
 8004998:	b2db      	uxtb	r3, r3

}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	20000378 	.word	0x20000378

080049a8 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	0002      	movs	r2, r0
 80049b0:	1dfb      	adds	r3, r7, #7
 80049b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80049b4:	230f      	movs	r3, #15
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	001a      	movs	r2, r3
 80049ba:	2101      	movs	r1, #1
 80049bc:	204f      	movs	r0, #79	; 0x4f
 80049be:	f002 fce5 	bl	800738c <RadioSpiReadRegisters>
 80049c2:	1c03      	adds	r3, r0, #0
 80049c4:	1c1a      	adds	r2, r3, #0
 80049c6:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <SpiritPktCommonFilterOnCrc+0x80>)
 80049c8:	b212      	sxth	r2, r2
 80049ca:	1c11      	adds	r1, r2, #0
 80049cc:	7019      	strb	r1, [r3, #0]
 80049ce:	0412      	lsls	r2, r2, #16
 80049d0:	0e12      	lsrs	r2, r2, #24
 80049d2:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80049d4:	1dfb      	adds	r3, r7, #7
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d108      	bne.n	80049ee <SpiritPktCommonFilterOnCrc+0x46>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80049dc:	210f      	movs	r1, #15
 80049de:	187b      	adds	r3, r7, r1
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	4313      	orrs	r3, r2
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	e007      	b.n	80049fe <SpiritPktCommonFilterOnCrc+0x56>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80049ee:	210f      	movs	r1, #15
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4393      	bics	r3, r2
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	701a      	strb	r2, [r3, #0]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80049fe:	230f      	movs	r3, #15
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	001a      	movs	r2, r3
 8004a04:	2101      	movs	r1, #1
 8004a06:	204f      	movs	r0, #79	; 0x4f
 8004a08:	f002 fc1e 	bl	8007248 <RadioSpiWriteRegisters>
 8004a0c:	1c03      	adds	r3, r0, #0
 8004a0e:	1c1a      	adds	r2, r3, #0
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <SpiritPktCommonFilterOnCrc+0x80>)
 8004a12:	b212      	sxth	r2, r2
 8004a14:	1c11      	adds	r1, r2, #0
 8004a16:	7019      	strb	r1, [r3, #0]
 8004a18:	0412      	lsls	r2, r2, #16
 8004a1a:	0e12      	lsrs	r2, r2, #24
 8004a1c:	705a      	strb	r2, [r3, #1]

}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b004      	add	sp, #16
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	20000378 	.word	0x20000378

08004a2c <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	0002      	movs	r2, r0
 8004a34:	1dfb      	adds	r3, r7, #7
 8004a36:	701a      	strb	r2, [r3, #0]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8004a38:	1dfb      	adds	r3, r7, #7
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	204b      	movs	r0, #75	; 0x4b
 8004a40:	f002 fc02 	bl	8007248 <RadioSpiWriteRegisters>
 8004a44:	1c03      	adds	r3, r0, #0
 8004a46:	1c1a      	adds	r2, r3, #0
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <SpiritPktCommonSetDestinationAddress+0x34>)
 8004a4a:	b212      	sxth	r2, r2
 8004a4c:	1c11      	adds	r1, r2, #0
 8004a4e:	7019      	strb	r1, [r3, #0]
 8004a50:	0412      	lsls	r2, r2, #16
 8004a52:	0e12      	lsrs	r2, r2, #24
 8004a54:	705a      	strb	r2, [r3, #1]

}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	20000378 	.word	0x20000378

08004a64 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	2101      	movs	r1, #1
 8004a70:	20d3      	movs	r0, #211	; 0xd3
 8004a72:	f002 fc8b 	bl	800738c <RadioSpiReadRegisters>
 8004a76:	1c03      	adds	r3, r0, #0
 8004a78:	1c1a      	adds	r2, r3, #0
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <SpiritPktCommonGetReceivedDestAddress+0x30>)
 8004a7c:	b212      	sxth	r2, r2
 8004a7e:	1c11      	adds	r1, r2, #0
 8004a80:	7019      	strb	r1, [r3, #0]
 8004a82:	0412      	lsls	r2, r2, #16
 8004a84:	0e12      	lsrs	r2, r2, #24
 8004a86:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8004a88:	1dfb      	adds	r3, r7, #7
 8004a8a:	781b      	ldrb	r3, [r3, #0]

}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000378 	.word	0x20000378

08004a98 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	001a      	movs	r2, r3
 8004aaa:	2101      	movs	r1, #1
 8004aac:	203a      	movs	r0, #58	; 0x3a
 8004aae:	f002 fc6d 	bl	800738c <RadioSpiReadRegisters>
 8004ab2:	1c03      	adds	r3, r0, #0
 8004ab4:	1c1a      	adds	r2, r3, #0
 8004ab6:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <SpiritQiSqiCheck+0x80>)
 8004ab8:	b212      	sxth	r2, r2
 8004aba:	1c11      	adds	r1, r2, #0
 8004abc:	7019      	strb	r1, [r3, #0]
 8004abe:	0412      	lsls	r2, r2, #16
 8004ac0:	0e12      	lsrs	r2, r2, #24
 8004ac2:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <SpiritQiSqiCheck+0x46>
  {
    tempRegValue |= QI_SQI_MASK;
 8004acc:	210f      	movs	r1, #15
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e007      	b.n	8004aee <SpiritQiSqiCheck+0x56>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8004ade:	210f      	movs	r1, #15
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	4393      	bics	r3, r2
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	701a      	strb	r2, [r3, #0]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8004aee:	230f      	movs	r3, #15
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	001a      	movs	r2, r3
 8004af4:	2101      	movs	r1, #1
 8004af6:	203a      	movs	r0, #58	; 0x3a
 8004af8:	f002 fba6 	bl	8007248 <RadioSpiWriteRegisters>
 8004afc:	1c03      	adds	r3, r0, #0
 8004afe:	1c1a      	adds	r2, r3, #0
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <SpiritQiSqiCheck+0x80>)
 8004b02:	b212      	sxth	r2, r2
 8004b04:	1c11      	adds	r1, r2, #0
 8004b06:	7019      	strb	r1, [r3, #0]
 8004b08:	0412      	lsls	r2, r2, #16
 8004b0a:	0e12      	lsrs	r2, r2, #24
 8004b0c:	705a      	strb	r2, [r3, #1]

}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b004      	add	sp, #16
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	20000378 	.word	0x20000378

08004b1c <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	0002      	movs	r2, r0
 8004b24:	1dfb      	adds	r3, r7, #7
 8004b26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8004b28:	240f      	movs	r4, #15
 8004b2a:	193b      	adds	r3, r7, r4
 8004b2c:	001a      	movs	r2, r3
 8004b2e:	2101      	movs	r1, #1
 8004b30:	203a      	movs	r0, #58	; 0x3a
 8004b32:	f002 fc2b 	bl	800738c <RadioSpiReadRegisters>
 8004b36:	1c03      	adds	r3, r0, #0
 8004b38:	1c1a      	adds	r2, r3, #0
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <SpiritQiSetSqiThreshold+0x70>)
 8004b3c:	b212      	sxth	r2, r2
 8004b3e:	1c11      	adds	r1, r2, #0
 8004b40:	7019      	strb	r1, [r3, #0]
 8004b42:	0412      	lsls	r2, r2, #16
 8004b44:	0e12      	lsrs	r2, r2, #24
 8004b46:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8004b48:	193b      	adds	r3, r7, r4
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	223f      	movs	r2, #63	; 0x3f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	701a      	strb	r2, [r3, #0]
  tempRegValue |= ((uint8_t)xSqiThr);
 8004b56:	193b      	adds	r3, r7, r4
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	193b      	adds	r3, r7, r4
 8004b64:	701a      	strb	r2, [r3, #0]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8004b66:	193b      	adds	r3, r7, r4
 8004b68:	001a      	movs	r2, r3
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	203a      	movs	r0, #58	; 0x3a
 8004b6e:	f002 fb6b 	bl	8007248 <RadioSpiWriteRegisters>
 8004b72:	1c03      	adds	r3, r0, #0
 8004b74:	1c1a      	adds	r2, r3, #0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <SpiritQiSetSqiThreshold+0x70>)
 8004b78:	b212      	sxth	r2, r2
 8004b7a:	1c11      	adds	r1, r2, #0
 8004b7c:	7019      	strb	r1, [r3, #0]
 8004b7e:	0412      	lsls	r2, r2, #16
 8004b80:	0e12      	lsrs	r2, r2, #24
 8004b82:	705a      	strb	r2, [r3, #1]

}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b005      	add	sp, #20
 8004b8a:	bd90      	pop	{r4, r7, pc}
 8004b8c:	20000378 	.word	0x20000378

08004b90 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3382      	adds	r3, #130	; 0x82
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	18db      	adds	r3, r3, r3
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	210f      	movs	r1, #15
 8004ba4:	187b      	adds	r3, r7, r1
 8004ba6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8004ba8:	187b      	adds	r3, r7, r1
 8004baa:	001a      	movs	r2, r3
 8004bac:	2101      	movs	r1, #1
 8004bae:	2022      	movs	r0, #34	; 0x22
 8004bb0:	f002 fb4a 	bl	8007248 <RadioSpiWriteRegisters>
 8004bb4:	1c03      	adds	r3, r0, #0
 8004bb6:	1c1a      	adds	r2, r3, #0
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <SpiritQiSetRssiThresholddBm+0x40>)
 8004bba:	b212      	sxth	r2, r2
 8004bbc:	1c11      	adds	r1, r2, #0
 8004bbe:	7019      	strb	r1, [r3, #0]
 8004bc0:	0412      	lsls	r2, r2, #16
 8004bc2:	0e12      	lsrs	r2, r2, #24
 8004bc4:	705a      	strb	r2, [r3, #1]

}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b004      	add	sp, #16
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	20000378 	.word	0x20000378

08004bd4 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8004bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd6:	b08d      	sub	sp, #52	; 0x34
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8004bdc:	2111      	movs	r1, #17
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	22a0      	movs	r2, #160	; 0xa0
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	001a      	movs	r2, r3
 8004be8:	2101      	movs	r1, #1
 8004bea:	209f      	movs	r0, #159	; 0x9f
 8004bec:	f002 fb2c 	bl	8007248 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	5e9b      	ldrsh	r3, [r3, r2]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7fc fb32 	bl	8001260 <__aeabi_i2f>
 8004bfc:	1c04      	adds	r4, r0, #0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f7fc fb76 	bl	80012f4 <__aeabi_ui2f>
 8004c08:	1c03      	adds	r3, r0, #0
 8004c0a:	1c19      	adds	r1, r3, #0
 8004c0c:	1c20      	adds	r0, r4, #0
 8004c0e:	f7fc f811 	bl	8000c34 <__aeabi_fmul>
 8004c12:	1c03      	adds	r3, r0, #0
 8004c14:	49cf      	ldr	r1, [pc, #828]	; (8004f54 <SpiritRadioInit+0x380>)
 8004c16:	1c18      	adds	r0, r3, #0
 8004c18:	f7fb fe34 	bl	8000884 <__aeabi_fdiv>
 8004c1c:	1c03      	adds	r3, r0, #0
 8004c1e:	1c18      	adds	r0, r3, #0
 8004c20:	f7fc fafe 	bl	8001220 <__aeabi_f2iz>
 8004c24:	0003      	movs	r3, r0
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8004c28:	2063      	movs	r0, #99	; 0x63
 8004c2a:	f002 fc5b 	bl	80074e4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8004c2e:	230e      	movs	r3, #14
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e007      	b.n	8004c48 <SpiritRadioInit+0x74>
 8004c38:	210e      	movs	r1, #14
 8004c3a:	187b      	adds	r3, r7, r1
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	230e      	movs	r3, #14
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2bff      	cmp	r3, #255	; 0xff
 8004c52:	d1f1      	bne.n	8004c38 <SpiritRadioInit+0x64>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8004c54:	f001 fd84 	bl	8006760 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8004c58:	4bbf      	ldr	r3, [pc, #764]	; (8004f58 <SpiritRadioInit+0x384>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	0e5b      	lsrs	r3, r3, #25
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d1e3      	bne.n	8004c2e <SpiritRadioInit+0x5a>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8004c66:	4bbd      	ldr	r3, [pc, #756]	; (8004f5c <SpiritRadioInit+0x388>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4abd      	ldr	r2, [pc, #756]	; (8004f60 <SpiritRadioInit+0x38c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d803      	bhi.n	8004c78 <SpiritRadioInit+0xa4>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f001 fb03 	bl	800627c <SpiritRadioSetDigDiv>
 8004c76:	e002      	b.n	8004c7e <SpiritRadioInit+0xaa>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f001 faff 	bl	800627c <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8004c7e:	2062      	movs	r0, #98	; 0x62
 8004c80:	f002 fc30 	bl	80074e4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8004c84:	230d      	movs	r3, #13
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e007      	b.n	8004c9e <SpiritRadioInit+0xca>
 8004c8e:	210d      	movs	r1, #13
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	3301      	adds	r3, #1
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	187b      	adds	r3, r7, r1
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	230d      	movs	r3, #13
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2bff      	cmp	r3, #255	; 0xff
 8004ca8:	d1f1      	bne.n	8004c8e <SpiritRadioInit+0xba>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8004caa:	f001 fd59 	bl	8006760 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8004cae:	4baa      	ldr	r3, [pc, #680]	; (8004f58 <SpiritRadioInit+0x384>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	0e5b      	lsrs	r3, r3, #25
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d1e3      	bne.n	8004c84 <SpiritRadioInit+0xb0>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8004cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cbe:	f7fc facf 	bl	8001260 <__aeabi_i2f>
 8004cc2:	1c03      	adds	r3, r0, #0
 8004cc4:	2191      	movs	r1, #145	; 0x91
 8004cc6:	05c9      	lsls	r1, r1, #23
 8004cc8:	1c18      	adds	r0, r3, #0
 8004cca:	f7fb ffb3 	bl	8000c34 <__aeabi_fmul>
 8004cce:	1c03      	adds	r3, r0, #0
 8004cd0:	1c1c      	adds	r4, r3, #0
 8004cd2:	4ba2      	ldr	r3, [pc, #648]	; (8004f5c <SpiritRadioInit+0x388>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f7fc fb0c 	bl	80012f4 <__aeabi_ui2f>
 8004cdc:	1c03      	adds	r3, r0, #0
 8004cde:	1c19      	adds	r1, r3, #0
 8004ce0:	1c20      	adds	r0, r4, #0
 8004ce2:	f7fb fdcf 	bl	8000884 <__aeabi_fdiv>
 8004ce6:	1c03      	adds	r3, r0, #0
 8004ce8:	212a      	movs	r1, #42	; 0x2a
 8004cea:	000d      	movs	r5, r1
 8004cec:	187c      	adds	r4, r7, r1
 8004cee:	1c18      	adds	r0, r3, #0
 8004cf0:	f7fc fa96 	bl	8001220 <__aeabi_f2iz>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	8023      	strh	r3, [r4, #0]
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8004cf8:	0029      	movs	r1, r5
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	220f      	movs	r2, #15
 8004d06:	4013      	ands	r3, r2
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	241c      	movs	r4, #28
 8004d0c:	193b      	adds	r3, r7, r4
 8004d0e:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	193b      	adds	r3, r7, r4
 8004d18:	70da      	strb	r2, [r3, #3]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	025a      	lsls	r2, r3, #9
 8004d20:	4b8e      	ldr	r3, [pc, #568]	; (8004f5c <SpiritRadioInit+0x388>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	099b      	lsrs	r3, r3, #6
 8004d26:	0019      	movs	r1, r3
 8004d28:	0010      	movs	r0, r2
 8004d2a:	f7fb f9ed 	bl	8000108 <__udivsi3>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	193b      	adds	r3, r7, r4
 8004d38:	701a      	strb	r2, [r3, #0]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f7ff fc1a 	bl	8004578 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8004d44:	2410      	movs	r4, #16
 8004d46:	193b      	adds	r3, r7, r4
 8004d48:	001a      	movs	r2, r3
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	20a3      	movs	r0, #163	; 0xa3
 8004d4e:	f002 fb1d 	bl	800738c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8004d52:	193b      	adds	r3, r7, r4
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2202      	movs	r2, #2
 8004d58:	4393      	bics	r3, r2
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	193b      	adds	r3, r7, r4
 8004d62:	001a      	movs	r2, r3
 8004d64:	2101      	movs	r1, #1
 8004d66:	20a3      	movs	r0, #163	; 0xa3
 8004d68:	f002 fa6e 	bl	8007248 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2616      	movs	r6, #22
 8004d72:	19ba      	adds	r2, r7, r6
 8004d74:	2517      	movs	r5, #23
 8004d76:	1979      	adds	r1, r7, r5
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 fcef 	bl	800575c <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8004d7e:	197b      	adds	r3, r7, r5
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	2518      	movs	r5, #24
 8004d84:	197b      	adds	r3, r7, r5
 8004d86:	701a      	strb	r2, [r3, #0]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	7b5a      	ldrb	r2, [r3, #13]
 8004d8c:	19bb      	adds	r3, r7, r6
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	197b      	adds	r3, r7, r5
 8004d96:	705a      	strb	r2, [r3, #1]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8004d98:	193b      	adds	r3, r7, r4
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	201c      	movs	r0, #28
 8004da0:	f002 faf4 	bl	800738c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	2614      	movs	r6, #20
 8004daa:	19ba      	adds	r2, r7, r6
 8004dac:	2115      	movs	r1, #21
 8004dae:	1879      	adds	r1, r7, r1
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 fedb 	bl	8005b6c <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8004db6:	19bb      	adds	r3, r7, r6
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	b25a      	sxtb	r2, r3
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	2108      	movs	r1, #8
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	b25b      	sxtb	r3, r3
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	b25a      	sxtb	r2, r3
 8004dce:	2115      	movs	r1, #21
 8004dd0:	187b      	adds	r3, r7, r1
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b25b      	sxtb	r3, r3
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b25b      	sxtb	r3, r3
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	197b      	adds	r3, r7, r5
 8004dde:	709a      	strb	r2, [r3, #2]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2412      	movs	r4, #18
 8004de6:	193a      	adds	r2, r7, r4
 8004de8:	2613      	movs	r6, #19
 8004dea:	19b9      	adds	r1, r7, r6
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 fdb1 	bl	8005954 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8004df2:	19bb      	adds	r3, r7, r6
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	b25a      	sxtb	r2, r3
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	197b      	adds	r3, r7, r5
 8004e08:	70da      	strb	r2, [r3, #3]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8004e0a:	4b54      	ldr	r3, [pc, #336]	; (8004f5c <SpiritRadioInit+0x388>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0b1b      	lsrs	r3, r3, #12
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7fc fa6f 	bl	80012f4 <__aeabi_ui2f>
 8004e16:	1c03      	adds	r3, r0, #0
 8004e18:	1c19      	adds	r1, r3, #0
 8004e1a:	4852      	ldr	r0, [pc, #328]	; (8004f64 <SpiritRadioInit+0x390>)
 8004e1c:	f7fb fd32 	bl	8000884 <__aeabi_fdiv>
 8004e20:	1c03      	adds	r3, r0, #0
 8004e22:	2185      	movs	r1, #133	; 0x85
 8004e24:	05c9      	lsls	r1, r1, #23
 8004e26:	1c18      	adds	r0, r3, #0
 8004e28:	f7fc f836 	bl	8000e98 <__aeabi_fsub>
 8004e2c:	1c03      	adds	r3, r0, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8004e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e32:	f7fb fb57 	bl	80004e4 <__aeabi_f2uiz>
 8004e36:	0003      	movs	r3, r0
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7fc fa5b 	bl	80012f4 <__aeabi_ui2f>
 8004e3e:	1c03      	adds	r3, r0, #0
 8004e40:	1c19      	adds	r1, r3, #0
 8004e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e44:	f7fc f828 	bl	8000e98 <__aeabi_fsub>
 8004e48:	1c03      	adds	r3, r0, #0
 8004e4a:	21fc      	movs	r1, #252	; 0xfc
 8004e4c:	0589      	lsls	r1, r1, #22
 8004e4e:	1c18      	adds	r0, r3, #0
 8004e50:	f7fb fb34 	bl	80004bc <__aeabi_fcmpgt>
 8004e54:	1e03      	subs	r3, r0, #0
 8004e56:	d007      	beq.n	8004e68 <SpiritRadioInit+0x294>
 8004e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e5a:	f7fb fb43 	bl	80004e4 <__aeabi_f2uiz>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3301      	adds	r3, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e004      	b.n	8004e72 <SpiritRadioInit+0x29e>
 8004e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e6a:	f7fb fb3b 	bl	80004e4 <__aeabi_f2uiz>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	220f      	movs	r2, #15
 8004e74:	18ba      	adds	r2, r7, r2
 8004e76:	7013      	strb	r3, [r2, #0]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8004e78:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <SpiritRadioInit+0x388>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a38      	ldr	r2, [pc, #224]	; (8004f60 <SpiritRadioInit+0x38c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d806      	bhi.n	8004e90 <SpiritRadioInit+0x2bc>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8004e82:	230f      	movs	r3, #15
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	781a      	ldrb	r2, [r3, #0]
 8004e88:	231c      	movs	r3, #28
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	705a      	strb	r2, [r3, #1]
 8004e8e:	e036      	b.n	8004efe <SpiritRadioInit+0x32a>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8004e90:	4b32      	ldr	r3, [pc, #200]	; (8004f5c <SpiritRadioInit+0x388>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0b5b      	lsrs	r3, r3, #13
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7fc fa2c 	bl	80012f4 <__aeabi_ui2f>
 8004e9c:	1c03      	adds	r3, r0, #0
 8004e9e:	1c19      	adds	r1, r3, #0
 8004ea0:	4830      	ldr	r0, [pc, #192]	; (8004f64 <SpiritRadioInit+0x390>)
 8004ea2:	f7fb fcef 	bl	8000884 <__aeabi_fdiv>
 8004ea6:	1c03      	adds	r3, r0, #0
 8004ea8:	2185      	movs	r1, #133	; 0x85
 8004eaa:	05c9      	lsls	r1, r1, #23
 8004eac:	1c18      	adds	r0, r3, #0
 8004eae:	f7fb fff3 	bl	8000e98 <__aeabi_fsub>
 8004eb2:	1c03      	adds	r3, r0, #0
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8004eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eb8:	f7fb fb14 	bl	80004e4 <__aeabi_f2uiz>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fc fa18 	bl	80012f4 <__aeabi_ui2f>
 8004ec4:	1c03      	adds	r3, r0, #0
 8004ec6:	1c19      	adds	r1, r3, #0
 8004ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eca:	f7fb ffe5 	bl	8000e98 <__aeabi_fsub>
 8004ece:	1c03      	adds	r3, r0, #0
 8004ed0:	21fc      	movs	r1, #252	; 0xfc
 8004ed2:	0589      	lsls	r1, r1, #22
 8004ed4:	1c18      	adds	r0, r3, #0
 8004ed6:	f7fb faf1 	bl	80004bc <__aeabi_fcmpgt>
 8004eda:	1e03      	subs	r3, r0, #0
 8004edc:	d007      	beq.n	8004eee <SpiritRadioInit+0x31a>
 8004ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ee0:	f7fb fb00 	bl	80004e4 <__aeabi_f2uiz>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3301      	adds	r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	e004      	b.n	8004ef8 <SpiritRadioInit+0x324>
 8004eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef0:	f7fb faf8 	bl	80004e4 <__aeabi_f2uiz>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	221c      	movs	r2, #28
 8004efa:	18ba      	adds	r2, r7, r2
 8004efc:	7053      	strb	r3, [r2, #1]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8004efe:	230f      	movs	r3, #15
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	001a      	movs	r2, r3
 8004f04:	2101      	movs	r1, #1
 8004f06:	2007      	movs	r0, #7
 8004f08:	f002 f99e 	bl	8007248 <RadioSpiWriteRegisters>
 8004f0c:	1c03      	adds	r3, r0, #0
 8004f0e:	1c1a      	adds	r2, r3, #0
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <SpiritRadioInit+0x384>)
 8004f12:	b212      	sxth	r2, r2
 8004f14:	1c11      	adds	r1, r2, #0
 8004f16:	7019      	strb	r1, [r3, #0]
 8004f18:	0412      	lsls	r2, r2, #16
 8004f1a:	0e12      	lsrs	r2, r2, #24
 8004f1c:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <SpiritRadioInit+0x388>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <SpiritRadioInit+0x394>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d923      	bls.n	8004f70 <SpiritRadioInit+0x39c>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <SpiritRadioInit+0x388>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7fd ff70 	bl	8002e14 <__aeabi_ui2d>
 8004f34:	2301      	movs	r3, #1
 8004f36:	1c1c      	adds	r4, r3, #0
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <SpiritRadioInit+0x398>)
 8004f3c:	f7fb fa8e 	bl	800045c <__aeabi_dcmpge>
 8004f40:	1e03      	subs	r3, r0, #0
 8004f42:	d101      	bne.n	8004f48 <SpiritRadioInit+0x374>
 8004f44:	2300      	movs	r3, #0
 8004f46:	1c1c      	adds	r4, r3, #0
 8004f48:	b2e3      	uxtb	r3, r4
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f000 f872 	bl	8005034 <SpiritRadioSetXtalFlag>
 8004f50:	e021      	b.n	8004f96 <SpiritRadioInit+0x3c2>
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	49742400 	.word	0x49742400
 8004f58:	20000378 	.word	0x20000378
 8004f5c:	20000344 	.word	0x20000344
 8004f60:	01c9c37f 	.word	0x01c9c37f
 8004f64:	49afd520 	.word	0x49afd520
 8004f68:	01c9c380 	.word	0x01c9c380
 8004f6c:	4177d784 	.word	0x4177d784
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <SpiritRadioInit+0x454>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fd ff4d 	bl	8002e14 <__aeabi_ui2d>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	1c1c      	adds	r4, r3, #0
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4b2a      	ldr	r3, [pc, #168]	; (800502c <SpiritRadioInit+0x458>)
 8004f82:	f7fb fa6b 	bl	800045c <__aeabi_dcmpge>
 8004f86:	1e03      	subs	r3, r0, #0
 8004f88:	d101      	bne.n	8004f8e <SpiritRadioInit+0x3ba>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	1c1c      	adds	r4, r3, #0
 8004f8e:	b2e3      	uxtb	r3, r4
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 f84f 	bl	8005034 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	001a      	movs	r2, r3
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	206c      	movs	r0, #108	; 0x6c
 8004fa0:	f002 f952 	bl	8007248 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8004fa4:	241c      	movs	r4, #28
 8004fa6:	193b      	adds	r3, r7, r4
 8004fa8:	001a      	movs	r2, r3
 8004faa:	2104      	movs	r1, #4
 8004fac:	200c      	movs	r0, #12
 8004fae:	f002 f94b 	bl	8007248 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8004fb2:	2318      	movs	r3, #24
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	2104      	movs	r1, #4
 8004fba:	201a      	movs	r0, #26
 8004fbc:	f002 f944 	bl	8007248 <RadioSpiWriteRegisters>
 8004fc0:	1c03      	adds	r3, r0, #0
 8004fc2:	1c1a      	adds	r2, r3, #0
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <SpiritRadioInit+0x45c>)
 8004fc6:	b212      	sxth	r2, r2
 8004fc8:	1c11      	adds	r1, r2, #0
 8004fca:	7019      	strb	r1, [r3, #0]
 8004fcc:	0412      	lsls	r2, r2, #16
 8004fce:	0e12      	lsrs	r2, r2, #24
 8004fd0:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f001 f848 	bl	8006068 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8004fd8:	193b      	adds	r3, r7, r4
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1]=0xE3;
 8004fde:	193b      	adds	r3, r7, r4
 8004fe0:	22e3      	movs	r2, #227	; 0xe3
 8004fe2:	705a      	strb	r2, [r3, #1]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8004fe4:	193b      	adds	r3, r7, r4
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	2102      	movs	r1, #2
 8004fea:	2099      	movs	r0, #153	; 0x99
 8004fec:	f002 f92c 	bl	8007248 <RadioSpiWriteRegisters>
 8004ff0:	1c03      	adds	r3, r0, #0
 8004ff2:	1c1a      	adds	r2, r3, #0
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <SpiritRadioInit+0x45c>)
 8004ff6:	b212      	sxth	r2, r2
 8004ff8:	1c11      	adds	r1, r2, #0
 8004ffa:	7019      	strb	r1, [r3, #0]
 8004ffc:	0412      	lsls	r2, r2, #16
 8004ffe:	0e12      	lsrs	r2, r2, #24
 8005000:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8005002:	193b      	adds	r3, r7, r4
 8005004:	2222      	movs	r2, #34	; 0x22
 8005006:	701a      	strb	r2, [r3, #0]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8005008:	193b      	adds	r3, r7, r4
 800500a:	001a      	movs	r2, r3
 800500c:	2101      	movs	r1, #1
 800500e:	20bc      	movs	r0, #188	; 0xbc
 8005010:	f002 f91a 	bl	8007248 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0018      	movs	r0, r3
 800501a:	f000 f9f7 	bl	800540c <SpiritRadioSetFrequencyBase>
 800501e:	0003      	movs	r3, r0
  
}
 8005020:	0018      	movs	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	b00d      	add	sp, #52	; 0x34
 8005026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005028:	20000344 	.word	0x20000344
 800502c:	4177d784 	.word	0x4177d784
 8005030:	20000378 	.word	0x20000378

08005034 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	0002      	movs	r2, r0
 800503c:	1dfb      	adds	r3, r7, #7
 800503e:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue = 0x00;
 8005040:	210f      	movs	r1, #15
 8005042:	187b      	adds	r3, r7, r1
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8005048:	187b      	adds	r3, r7, r1
 800504a:	001a      	movs	r2, r3
 800504c:	2101      	movs	r1, #1
 800504e:	2001      	movs	r0, #1
 8005050:	f002 f99c 	bl	800738c <RadioSpiReadRegisters>
 8005054:	1c03      	adds	r3, r0, #0
 8005056:	1c1a      	adds	r2, r3, #0
 8005058:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <SpiritRadioSetXtalFlag+0x84>)
 800505a:	b212      	sxth	r2, r2
 800505c:	1c11      	adds	r1, r2, #0
 800505e:	7019      	strb	r1, [r3, #0]
 8005060:	0412      	lsls	r2, r2, #16
 8005062:	0e12      	lsrs	r2, r2, #24
 8005064:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d108      	bne.n	8005080 <SpiritRadioSetXtalFlag+0x4c>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 800506e:	210f      	movs	r1, #15
 8005070:	187b      	adds	r3, r7, r1
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2240      	movs	r2, #64	; 0x40
 8005076:	4313      	orrs	r3, r2
 8005078:	b2da      	uxtb	r2, r3
 800507a:	187b      	adds	r3, r7, r1
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e007      	b.n	8005090 <SpiritRadioSetXtalFlag+0x5c>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8005080:	210f      	movs	r1, #15
 8005082:	187b      	adds	r3, r7, r1
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2240      	movs	r2, #64	; 0x40
 8005088:	4393      	bics	r3, r2
 800508a:	b2da      	uxtb	r2, r3
 800508c:	187b      	adds	r3, r7, r1
 800508e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8005090:	230f      	movs	r3, #15
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	001a      	movs	r2, r3
 8005096:	2101      	movs	r1, #1
 8005098:	2001      	movs	r0, #1
 800509a:	f002 f8d5 	bl	8007248 <RadioSpiWriteRegisters>
 800509e:	1c03      	adds	r3, r0, #0
 80050a0:	1c1a      	adds	r2, r3, #0
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <SpiritRadioSetXtalFlag+0x84>)
 80050a4:	b212      	sxth	r2, r2
 80050a6:	1c11      	adds	r1, r2, #0
 80050a8:	7019      	strb	r1, [r3, #0]
 80050aa:	0412      	lsls	r2, r2, #16
 80050ac:	0e12      	lsrs	r2, r2, #24
 80050ae:	705a      	strb	r2, [r3, #1]
  
}
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b004      	add	sp, #16
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000378 	.word	0x20000378

080050bc <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 80050c4:	230f      	movs	r3, #15
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
  uint32_t vcofreq=0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 80050d0:	230e      	movs	r3, #14
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a4b      	ldr	r2, [pc, #300]	; (8005208 <SpiritRadioSearchWCP+0x14c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d908      	bls.n	80050f2 <SpiritRadioSearchWCP+0x36>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a4a      	ldr	r2, [pc, #296]	; (800520c <SpiritRadioSearchWCP+0x150>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d804      	bhi.n	80050f2 <SpiritRadioSearchWCP+0x36>
  {
    BFactor = HIGH_BAND_FACTOR;
 80050e8:	230e      	movs	r3, #14
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	2206      	movs	r2, #6
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e025      	b.n	800513e <SpiritRadioSearchWCP+0x82>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a46      	ldr	r2, [pc, #280]	; (8005210 <SpiritRadioSearchWCP+0x154>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d908      	bls.n	800510c <SpiritRadioSearchWCP+0x50>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a45      	ldr	r2, [pc, #276]	; (8005214 <SpiritRadioSearchWCP+0x158>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d804      	bhi.n	800510c <SpiritRadioSearchWCP+0x50>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8005102:	230e      	movs	r3, #14
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	220c      	movs	r2, #12
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e018      	b.n	800513e <SpiritRadioSearchWCP+0x82>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a42      	ldr	r2, [pc, #264]	; (8005218 <SpiritRadioSearchWCP+0x15c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d908      	bls.n	8005126 <SpiritRadioSearchWCP+0x6a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a41      	ldr	r2, [pc, #260]	; (800521c <SpiritRadioSearchWCP+0x160>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d804      	bhi.n	8005126 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = LOW_BAND_FACTOR;
 800511c:	230e      	movs	r3, #14
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	2210      	movs	r2, #16
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e00b      	b.n	800513e <SpiritRadioSearchWCP+0x82>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <SpiritRadioSearchWCP+0x164>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d907      	bls.n	800513e <SpiritRadioSearchWCP+0x82>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a3c      	ldr	r2, [pc, #240]	; (8005224 <SpiritRadioSearchWCP+0x168>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d803      	bhi.n	800513e <SpiritRadioSearchWCP+0x82>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8005136:	230e      	movs	r3, #14
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	2220      	movs	r2, #32
 800513c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	23fa      	movs	r3, #250	; 0xfa
 8005142:	0099      	lsls	r1, r3, #2
 8005144:	0010      	movs	r0, r2
 8005146:	f7fa ffdf 	bl	8000108 <__udivsi3>
 800514a:	0003      	movs	r3, r0
 800514c:	001a      	movs	r2, r3
 800514e:	230e      	movs	r3, #14
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	4353      	muls	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8005158:	4b33      	ldr	r3, [pc, #204]	; (8005228 <SpiritRadioSearchWCP+0x16c>)
 800515a:	001a      	movs	r2, r3
 800515c:	0013      	movs	r3, r2
 800515e:	015b      	lsls	r3, r3, #5
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	189b      	adds	r3, r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	001a      	movs	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4293      	cmp	r3, r2
 800516e:	d304      	bcc.n	800517a <SpiritRadioSearchWCP+0xbe>
  {
    i=15;
 8005170:	230f      	movs	r3, #15
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	220f      	movs	r2, #15
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e034      	b.n	80051e4 <SpiritRadioSearchWCP+0x128>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800517a:	230f      	movs	r3, #15
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	e008      	b.n	8005196 <SpiritRadioSearchWCP+0xda>
 8005184:	210f      	movs	r1, #15
 8005186:	187b      	adds	r3, r7, r1
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	b25b      	sxtb	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	3301      	adds	r3, #1
 8005190:	b2da      	uxtb	r2, r3
 8005192:	187b      	adds	r3, r7, r1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	230f      	movs	r3, #15
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b25b      	sxtb	r3, r3
 800519e:	2b0e      	cmp	r3, #14
 80051a0:	dc11      	bgt.n	80051c6 <SpiritRadioSearchWCP+0x10a>
 80051a2:	230f      	movs	r3, #15
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	2200      	movs	r2, #0
 80051a8:	569a      	ldrsb	r2, [r3, r2]
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <SpiritRadioSearchWCP+0x170>)
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	5ad3      	ldrh	r3, [r2, r3]
 80051b0:	001a      	movs	r2, r3
 80051b2:	0013      	movs	r3, r2
 80051b4:	015b      	lsls	r3, r3, #5
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	001a      	movs	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d8de      	bhi.n	8005184 <SpiritRadioSearchWCP+0xc8>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 80051c6:	230f      	movs	r3, #15
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b25b      	sxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <SpiritRadioSearchWCP+0x128>
      i--;
 80051d2:	210f      	movs	r1, #15
 80051d4:	187b      	adds	r3, r7, r1
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b25b      	sxtb	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	187b      	adds	r3, r7, r1
 80051e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return index */
  return (i%8);
 80051e4:	230f      	movs	r3, #15
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	4a10      	ldr	r2, [pc, #64]	; (8005230 <SpiritRadioSearchWCP+0x174>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	d504      	bpl.n	80051fc <SpiritRadioSearchWCP+0x140>
 80051f2:	3b01      	subs	r3, #1
 80051f4:	2208      	movs	r2, #8
 80051f6:	4252      	negs	r2, r2
 80051f8:	4313      	orrs	r3, r2
 80051fa:	3301      	adds	r3, #1
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	b2db      	uxtb	r3, r3
  
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b004      	add	sp, #16
 8005206:	bd80      	pop	{r7, pc}
 8005208:	2e5f567f 	.word	0x2e5f567f
 800520c:	390c2fe0 	.word	0x390c2fe0
 8005210:	1701e47f 	.word	0x1701e47f
 8005214:	1c146a60 	.word	0x1c146a60
 8005218:	11d260bf 	.word	0x11d260bf
 800521c:	14ced7e0 	.word	0x14ced7e0
 8005220:	08e18f3f 	.word	0x08e18f3f
 8005224:	0a6fd060 	.word	0x0a6fd060
 8005228:	0000161f 	.word	0x0000161f
 800522c:	080098ec 	.word	0x080098ec
 8005230:	80000007 	.word	0x80000007

08005234 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	001a      	movs	r2, r3
 800523e:	2104      	movs	r1, #4
 8005240:	2008      	movs	r0, #8
 8005242:	f002 f8a3 	bl	800738c <RadioSpiReadRegisters>
 8005246:	1c03      	adds	r3, r0, #0
 8005248:	1c1a      	adds	r2, r3, #0
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <SpiritRadioGetSynthWord+0x54>)
 800524c:	b212      	sxth	r2, r2
 800524e:	1c11      	adds	r1, r2, #0
 8005250:	7019      	strb	r1, [r3, #0]
 8005252:	0412      	lsls	r2, r2, #16
 8005254:	0e12      	lsrs	r2, r2, #24
 8005256:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	055a      	lsls	r2, r3, #21
 800525e:	23f8      	movs	r3, #248	; 0xf8
 8005260:	049b      	lsls	r3, r3, #18
 8005262:	401a      	ands	r2, r3
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	035b      	lsls	r3, r3, #13
 800526a:	18d2      	adds	r2, r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	789b      	ldrb	r3, [r3, #2]
 8005270:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8005272:	18d3      	adds	r3, r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8005274:	1d3a      	adds	r2, r7, #4
 8005276:	78d2      	ldrb	r2, [r2, #3]
 8005278:	08d2      	lsrs	r2, r2, #3
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	189b      	adds	r3, r3, r2
  
}
 800527e:	0018      	movs	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	b002      	add	sp, #8
 8005284:	bd80      	pop	{r7, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	20000378 	.word	0x20000378

0800528c <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8005292:	1dfb      	adds	r3, r7, #7
 8005294:	001a      	movs	r2, r3
 8005296:	2101      	movs	r1, #1
 8005298:	200b      	movs	r0, #11
 800529a:	f002 f877 	bl	800738c <RadioSpiReadRegisters>
 800529e:	1c03      	adds	r3, r0, #0
 80052a0:	1c1a      	adds	r2, r3, #0
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <SpiritRadioGetBand+0x64>)
 80052a4:	b212      	sxth	r2, r2
 80052a6:	1c11      	adds	r1, r2, #0
 80052a8:	7019      	strb	r1, [r3, #0]
 80052aa:	0412      	lsls	r2, r2, #16
 80052ac:	0e12      	lsrs	r2, r2, #24
 80052ae:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80052b0:	1dfb      	adds	r3, r7, #7
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	001a      	movs	r2, r3
 80052b6:	2307      	movs	r3, #7
 80052b8:	4013      	ands	r3, r2
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <SpiritRadioGetBand+0x36>
  {
    return HIGH_BAND;
 80052be:	2300      	movs	r3, #0
 80052c0:	e012      	b.n	80052e8 <SpiritRadioGetBand+0x5c>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80052c2:	1dfb      	adds	r3, r7, #7
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	001a      	movs	r2, r3
 80052c8:	2307      	movs	r3, #7
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d101      	bne.n	80052d4 <SpiritRadioGetBand+0x48>
  {
    return MIDDLE_BAND;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e009      	b.n	80052e8 <SpiritRadioGetBand+0x5c>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 80052d4:	1dfb      	adds	r3, r7, #7
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	001a      	movs	r2, r3
 80052da:	2307      	movs	r3, #7
 80052dc:	4013      	ands	r3, r2
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d101      	bne.n	80052e6 <SpiritRadioGetBand+0x5a>
  {
    return LOW_BAND;
 80052e2:	2302      	movs	r3, #2
 80052e4:	e000      	b.n	80052e8 <SpiritRadioGetBand+0x5c>
  }
  else
  {
    return VERY_LOW_BAND;
 80052e6:	2303      	movs	r3, #3
  }
  
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000378 	.word	0x20000378

080052f4 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 80052fa:	1dfb      	adds	r3, r7, #7
 80052fc:	001a      	movs	r2, r3
 80052fe:	2101      	movs	r1, #1
 8005300:	206c      	movs	r0, #108	; 0x6c
 8005302:	f002 f843 	bl	800738c <RadioSpiReadRegisters>
 8005306:	1c03      	adds	r3, r0, #0
 8005308:	1c1a      	adds	r2, r3, #0
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <SpiritRadioGetChannel+0x30>)
 800530c:	b212      	sxth	r2, r2
 800530e:	1c11      	adds	r1, r2, #0
 8005310:	7019      	strb	r1, [r3, #0]
 8005312:	0412      	lsls	r2, r2, #16
 8005314:	0e12      	lsrs	r2, r2, #24
 8005316:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8005318:	1dfb      	adds	r3, r7, #7
 800531a:	781b      	ldrb	r3, [r3, #0]
  
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b002      	add	sp, #8
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20000378 	.word	0x20000378

08005328 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800532e:	1dfb      	adds	r3, r7, #7
 8005330:	001a      	movs	r2, r3
 8005332:	2101      	movs	r1, #1
 8005334:	200c      	movs	r0, #12
 8005336:	f002 f829 	bl	800738c <RadioSpiReadRegisters>
 800533a:	1c03      	adds	r3, r0, #0
 800533c:	1c1a      	adds	r2, r3, #0
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <SpiritRadioGetChannelSpace+0x3c>)
 8005340:	b212      	sxth	r2, r2
 8005342:	1c11      	adds	r1, r2, #0
 8005344:	7019      	strb	r1, [r3, #0]
 8005346:	0412      	lsls	r2, r2, #16
 8005348:	0e12      	lsrs	r2, r2, #24
 800534a:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	001a      	movs	r2, r3
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <SpiritRadioGetChannelSpace+0x40>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4353      	muls	r3, r2
 8005358:	0bdb      	lsrs	r3, r3, #15
  
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b002      	add	sp, #8
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	20000378 	.word	0x20000378
 8005368:	20000344 	.word	0x20000344

0800536c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8005372:	1d3b      	adds	r3, r7, #4
 8005374:	001a      	movs	r2, r3
 8005376:	2102      	movs	r1, #2
 8005378:	200e      	movs	r0, #14
 800537a:	f002 f807 	bl	800738c <RadioSpiReadRegisters>
 800537e:	1c03      	adds	r3, r0, #0
 8005380:	1c1a      	adds	r2, r3, #0
 8005382:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <SpiritRadioGetFrequencyOffset+0x90>)
 8005384:	b212      	sxth	r2, r2
 8005386:	1c11      	adds	r1, r2, #0
 8005388:	7019      	strb	r1, [r3, #0]
 800538a:	0412      	lsls	r2, r2, #16
 800538c:	0e12      	lsrs	r2, r2, #24
 800538e:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8005390:	1d3b      	adds	r3, r7, #4
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	b29a      	uxth	r2, r3
 800539a:	1d3b      	adds	r3, r7, #4
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	18d3      	adds	r3, r2, r3
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	1cbb      	adds	r3, r7, #2
 80053a6:	801a      	strh	r2, [r3, #0]
  
  if(xtalOffTemp & 0x0800)
 80053a8:	1cbb      	adds	r3, r7, #2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	001a      	movs	r2, r3
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	4013      	ands	r3, r2
 80053b4:	d007      	beq.n	80053c6 <SpiritRadioGetFrequencyOffset+0x5a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80053b6:	1cbb      	adds	r3, r7, #2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	4a11      	ldr	r2, [pc, #68]	; (8005400 <SpiritRadioGetFrequencyOffset+0x94>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	b29a      	uxth	r2, r3
 80053c0:	1cbb      	adds	r3, r7, #2
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	e006      	b.n	80053d4 <SpiritRadioGetFrequencyOffset+0x68>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80053c6:	1cbb      	adds	r3, r7, #2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	051b      	lsls	r3, r3, #20
 80053cc:	0d1b      	lsrs	r3, r3, #20
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	1cbb      	adds	r3, r7, #2
 80053d2:	801a      	strh	r2, [r3, #0]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80053d4:	1cba      	adds	r2, r7, #2
 80053d6:	1dbb      	adds	r3, r7, #6
 80053d8:	8812      	ldrh	r2, [r2, #0]
 80053da:	801a      	strh	r2, [r3, #0]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	2200      	movs	r2, #0
 80053e0:	5e9a      	ldrsh	r2, [r3, r2]
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <SpiritRadioGetFrequencyOffset+0x98>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4353      	muls	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da02      	bge.n	80053f2 <SpiritRadioGetFrequencyOffset+0x86>
 80053ec:	4a06      	ldr	r2, [pc, #24]	; (8005408 <SpiritRadioGetFrequencyOffset+0x9c>)
 80053ee:	4694      	mov	ip, r2
 80053f0:	4463      	add	r3, ip
 80053f2:	149b      	asrs	r3, r3, #18
  
}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b002      	add	sp, #8
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000378 	.word	0x20000378
 8005400:	fffff000 	.word	0xfffff000
 8005404:	20000344 	.word	0x20000344
 8005408:	0003ffff 	.word	0x0003ffff

0800540c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 800540c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540e:	b08d      	sub	sp, #52	; 0x34
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8005414:	2327      	movs	r3, #39	; 0x27
 8005416:	2208      	movs	r2, #8
 8005418:	4694      	mov	ip, r2
 800541a:	44bc      	add	ip, r7
 800541c:	4463      	add	r3, ip
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a95      	ldr	r2, [pc, #596]	; (800567c <SpiritRadioSetFrequencyBase+0x270>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d90b      	bls.n	8005442 <SpiritRadioSetFrequencyBase+0x36>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a94      	ldr	r2, [pc, #592]	; (8005680 <SpiritRadioSetFrequencyBase+0x274>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d807      	bhi.n	8005442 <SpiritRadioSetFrequencyBase+0x36>
  {
    band = HIGH_BAND;
 8005432:	2327      	movs	r3, #39	; 0x27
 8005434:	2208      	movs	r2, #8
 8005436:	4694      	mov	ip, r2
 8005438:	44bc      	add	ip, r7
 800543a:	4463      	add	r3, ip
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e02e      	b.n	80054a0 <SpiritRadioSetFrequencyBase+0x94>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a8f      	ldr	r2, [pc, #572]	; (8005684 <SpiritRadioSetFrequencyBase+0x278>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d90b      	bls.n	8005462 <SpiritRadioSetFrequencyBase+0x56>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a8e      	ldr	r2, [pc, #568]	; (8005688 <SpiritRadioSetFrequencyBase+0x27c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d807      	bhi.n	8005462 <SpiritRadioSetFrequencyBase+0x56>
  {
    band = MIDDLE_BAND;
 8005452:	2327      	movs	r3, #39	; 0x27
 8005454:	2208      	movs	r2, #8
 8005456:	4694      	mov	ip, r2
 8005458:	44bc      	add	ip, r7
 800545a:	4463      	add	r3, ip
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e01e      	b.n	80054a0 <SpiritRadioSetFrequencyBase+0x94>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a89      	ldr	r2, [pc, #548]	; (800568c <SpiritRadioSetFrequencyBase+0x280>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d90b      	bls.n	8005482 <SpiritRadioSetFrequencyBase+0x76>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a88      	ldr	r2, [pc, #544]	; (8005690 <SpiritRadioSetFrequencyBase+0x284>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d807      	bhi.n	8005482 <SpiritRadioSetFrequencyBase+0x76>
  {
    band = LOW_BAND;
 8005472:	2327      	movs	r3, #39	; 0x27
 8005474:	2208      	movs	r2, #8
 8005476:	4694      	mov	ip, r2
 8005478:	44bc      	add	ip, r7
 800547a:	4463      	add	r3, ip
 800547c:	2202      	movs	r2, #2
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e00e      	b.n	80054a0 <SpiritRadioSetFrequencyBase+0x94>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a83      	ldr	r2, [pc, #524]	; (8005694 <SpiritRadioSetFrequencyBase+0x288>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d90a      	bls.n	80054a0 <SpiritRadioSetFrequencyBase+0x94>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a82      	ldr	r2, [pc, #520]	; (8005698 <SpiritRadioSetFrequencyBase+0x28c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d806      	bhi.n	80054a0 <SpiritRadioSetFrequencyBase+0x94>
  {
    band = VERY_LOW_BAND;
 8005492:	2327      	movs	r3, #39	; 0x27
 8005494:	2208      	movs	r2, #8
 8005496:	4694      	mov	ip, r2
 8005498:	44bc      	add	ip, r7
 800549a:	4463      	add	r3, ip
 800549c:	2203      	movs	r2, #3
 800549e:	701a      	strb	r2, [r3, #0]
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80054a0:	f7ff ff64 	bl	800536c <SpiritRadioGetFrequencyOffset>
 80054a4:	0003      	movs	r3, r0
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80054a8:	f7ff ff3e 	bl	8005328 <SpiritRadioGetChannelSpace>
 80054ac:	0003      	movs	r3, r0
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80054b0:	251b      	movs	r5, #27
 80054b2:	2608      	movs	r6, #8
 80054b4:	19bb      	adds	r3, r7, r6
 80054b6:	195c      	adds	r4, r3, r5
 80054b8:	f7ff ff1c 	bl	80052f4 <SpiritRadioGetChannel>
 80054bc:	0003      	movs	r3, r0
 80054be:	7023      	strb	r3, [r4, #0]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80054c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	18d2      	adds	r2, r2, r3
 80054c6:	19bb      	adds	r3, r7, r6
 80054c8:	195b      	adds	r3, r3, r5
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ce:	434b      	muls	r3, r1
 80054d0:	18d3      	adds	r3, r2, r3
 80054d2:	61fb      	str	r3, [r7, #28]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80054d4:	f000 feae 	bl	8006234 <SpiritRadioGetRefDiv>
 80054d8:	0003      	movs	r3, r0
 80054da:	001a      	movs	r2, r3
 80054dc:	2313      	movs	r3, #19
 80054de:	2108      	movs	r1, #8
 80054e0:	468c      	mov	ip, r1
 80054e2:	44bc      	add	ip, r7
 80054e4:	4463      	add	r3, ip
 80054e6:	3201      	adds	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
  
  /* Selects the VCO */
  switch(band)
 80054ea:	2327      	movs	r3, #39	; 0x27
 80054ec:	2208      	movs	r2, #8
 80054ee:	4694      	mov	ip, r2
 80054f0:	44bc      	add	ip, r7
 80054f2:	4463      	add	r3, ip
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d01f      	beq.n	800553a <SpiritRadioSetFrequencyBase+0x12e>
 80054fa:	dc02      	bgt.n	8005502 <SpiritRadioSetFrequencyBase+0xf6>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d028      	beq.n	8005552 <SpiritRadioSetFrequencyBase+0x146>
 8005500:	e032      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
 8005502:	2b02      	cmp	r3, #2
 8005504:	d00d      	beq.n	8005522 <SpiritRadioSetFrequencyBase+0x116>
 8005506:	2b03      	cmp	r3, #3
 8005508:	d12e      	bne.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4a63      	ldr	r2, [pc, #396]	; (800569c <SpiritRadioSetFrequencyBase+0x290>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d803      	bhi.n	800551a <SpiritRadioSetFrequencyBase+0x10e>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8005512:	2000      	movs	r0, #0
 8005514:	f7fe fb48 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8005518:	e026      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
      SpiritCalibrationSelectVco(VCO_H);
 800551a:	2001      	movs	r0, #1
 800551c:	f7fe fb44 	bl	8003ba8 <SpiritCalibrationSelectVco>
    break;
 8005520:	e022      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
    
  case LOW_BAND:
    if(Fc<322562500)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4a5e      	ldr	r2, [pc, #376]	; (80056a0 <SpiritRadioSetFrequencyBase+0x294>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d803      	bhi.n	8005532 <SpiritRadioSetFrequencyBase+0x126>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800552a:	2000      	movs	r0, #0
 800552c:	f7fe fb3c 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8005530:	e01a      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
      SpiritCalibrationSelectVco(VCO_H);
 8005532:	2001      	movs	r0, #1
 8005534:	f7fe fb38 	bl	8003ba8 <SpiritCalibrationSelectVco>
    break;
 8005538:	e016      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4a59      	ldr	r2, [pc, #356]	; (80056a4 <SpiritRadioSetFrequencyBase+0x298>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d803      	bhi.n	800554a <SpiritRadioSetFrequencyBase+0x13e>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8005542:	2000      	movs	r0, #0
 8005544:	f7fe fb30 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8005548:	e00e      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
      SpiritCalibrationSelectVco(VCO_H);
 800554a:	2001      	movs	r0, #1
 800554c:	f7fe fb2c 	bl	8003ba8 <SpiritCalibrationSelectVco>
    break;
 8005550:	e00a      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4a54      	ldr	r2, [pc, #336]	; (80056a8 <SpiritRadioSetFrequencyBase+0x29c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d803      	bhi.n	8005562 <SpiritRadioSetFrequencyBase+0x156>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800555a:	2000      	movs	r0, #0
 800555c:	f7fe fb24 	bl	8003ba8 <SpiritCalibrationSelectVco>
 8005560:	e002      	b.n	8005568 <SpiritRadioSetFrequencyBase+0x15c>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8005562:	2001      	movs	r0, #1
 8005564:	f7fe fb20 	bl	8003ba8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8005568:	2612      	movs	r6, #18
 800556a:	2408      	movs	r4, #8
 800556c:	193a      	adds	r2, r7, r4
 800556e:	1994      	adds	r4, r2, r6
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	0018      	movs	r0, r3
 8005574:	f7ff fda2 	bl	80050bc <SpiritRadioSearchWCP>
 8005578:	0003      	movs	r3, r0
 800557a:	7023      	strb	r3, [r4, #0]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 800557c:	2327      	movs	r3, #39	; 0x27
 800557e:	2208      	movs	r2, #8
 8005580:	4694      	mov	ip, r2
 8005582:	44bc      	add	ip, r7
 8005584:	4463      	add	r3, ip
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4a48      	ldr	r2, [pc, #288]	; (80056ac <SpiritRadioSetFrequencyBase+0x2a0>)
 800558a:	5cd3      	ldrb	r3, [r2, r3]
 800558c:	001a      	movs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4353      	muls	r3, r2
 8005592:	0018      	movs	r0, r3
 8005594:	f7fd fc3e 	bl	8002e14 <__aeabi_ui2d>
 8005598:	0004      	movs	r4, r0
 800559a:	000d      	movs	r5, r1
 800559c:	2213      	movs	r2, #19
 800559e:	2308      	movs	r3, #8
 80055a0:	18f9      	adds	r1, r7, r3
 80055a2:	188b      	adds	r3, r1, r2
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	049b      	lsls	r3, r3, #18
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7fd fbf9 	bl	8002da0 <__aeabi_i2d>
 80055ae:	6038      	str	r0, [r7, #0]
 80055b0:	6079      	str	r1, [r7, #4]
 80055b2:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <SpiritRadioSetFrequencyBase+0x2a4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7fd fc2c 	bl	8002e14 <__aeabi_ui2d>
 80055bc:	0002      	movs	r2, r0
 80055be:	000b      	movs	r3, r1
 80055c0:	6838      	ldr	r0, [r7, #0]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	f7fc f9f2 	bl	80019ac <__aeabi_ddiv>
 80055c8:	0002      	movs	r2, r0
 80055ca:	000b      	movs	r3, r1
 80055cc:	0020      	movs	r0, r4
 80055ce:	0029      	movs	r1, r5
 80055d0:	f7fc fdf6 	bl	80021c0 <__aeabi_dmul>
 80055d4:	0003      	movs	r3, r0
 80055d6:	000c      	movs	r4, r1
 80055d8:	0018      	movs	r0, r3
 80055da:	0021      	movs	r1, r4
 80055dc:	f7fa ff9a 	bl	8000514 <__aeabi_d2uiz>
 80055e0:	0003      	movs	r3, r0
 80055e2:	617b      	str	r3, [r7, #20]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	0d5b      	lsrs	r3, r3, #21
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	221f      	movs	r2, #31
 80055ec:	4013      	ands	r3, r2
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	2408      	movs	r4, #8
 80055f2:	193b      	adds	r3, r7, r4
 80055f4:	199b      	adds	r3, r3, r6
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	015b      	lsls	r3, r3, #5
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	2008      	movs	r0, #8
 8005602:	193b      	adds	r3, r7, r4
 8005604:	181b      	adds	r3, r3, r0
 8005606:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	0b5b      	lsrs	r3, r3, #13
 800560c:	b2da      	uxtb	r2, r3
 800560e:	193b      	adds	r3, r7, r4
 8005610:	181b      	adds	r3, r3, r0
 8005612:	705a      	strb	r2, [r3, #1]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	b2da      	uxtb	r2, r3
 800561a:	193b      	adds	r3, r7, r4
 800561c:	181b      	adds	r3, r3, r0
 800561e:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	b2da      	uxtb	r2, r3
 8005628:	2327      	movs	r3, #39	; 0x27
 800562a:	2108      	movs	r1, #8
 800562c:	468c      	mov	ip, r1
 800562e:	44bc      	add	ip, r7
 8005630:	4463      	add	r3, ip
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	491f      	ldr	r1, [pc, #124]	; (80056b4 <SpiritRadioSetFrequencyBase+0x2a8>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	4313      	orrs	r3, r2
 800563a:	b2da      	uxtb	r2, r3
 800563c:	193b      	adds	r3, r7, r4
 800563e:	181b      	adds	r3, r3, r0
 8005640:	70da      	strb	r2, [r3, #3]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8005642:	193b      	adds	r3, r7, r4
 8005644:	181b      	adds	r3, r3, r0
 8005646:	001a      	movs	r2, r3
 8005648:	2104      	movs	r1, #4
 800564a:	2008      	movs	r0, #8
 800564c:	f001 fdfc 	bl	8007248 <RadioSpiWriteRegisters>
 8005650:	1c03      	adds	r3, r0, #0
 8005652:	1c1a      	adds	r2, r3, #0
 8005654:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <SpiritRadioSetFrequencyBase+0x2ac>)
 8005656:	b212      	sxth	r2, r2
 8005658:	1c11      	adds	r1, r2, #0
 800565a:	7019      	strb	r1, [r3, #0]
 800565c:	0412      	lsls	r2, r2, #16
 800565e:	0e12      	lsrs	r2, r2, #24
 8005660:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8005662:	4b16      	ldr	r3, [pc, #88]	; (80056bc <SpiritRadioSetFrequencyBase+0x2b0>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d103      	bne.n	8005672 <SpiritRadioSetFrequencyBase+0x266>
    return SpiritManagementWaVcoCalibration();
 800566a:	f7fe fe4b 	bl	8004304 <SpiritManagementWaVcoCalibration>
 800566e:	0003      	movs	r3, r0
 8005670:	e000      	b.n	8005674 <SpiritRadioSetFrequencyBase+0x268>
  
  return 0;
 8005672:	2300      	movs	r3, #0
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b00d      	add	sp, #52	; 0x34
 800567a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800567c:	2e5f567f 	.word	0x2e5f567f
 8005680:	390c2fe0 	.word	0x390c2fe0
 8005684:	1701e47f 	.word	0x1701e47f
 8005688:	1c146a60 	.word	0x1c146a60
 800568c:	11d260bf 	.word	0x11d260bf
 8005690:	14ced7e0 	.word	0x14ced7e0
 8005694:	08e18f3f 	.word	0x08e18f3f
 8005698:	0a6fd060 	.word	0x0a6fd060
 800569c:	099cf4e1 	.word	0x099cf4e1
 80056a0:	1339e9c3 	.word	0x1339e9c3
 80056a4:	19a28d05 	.word	0x19a28d05
 80056a8:	33451a0a 	.word	0x33451a0a
 80056ac:	08009830 	.word	0x08009830
 80056b0:	20000344 	.word	0x20000344
 80056b4:	08009834 	.word	0x08009834
 80056b8:	20000378 	.word	0x20000378
 80056bc:	20000199 	.word	0x20000199

080056c0 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80056c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80056c6:	f7ff fdb5 	bl	8005234 <SpiritRadioGetSynthWord>
 80056ca:	0003      	movs	r3, r0
 80056cc:	60fb      	str	r3, [r7, #12]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80056ce:	220b      	movs	r2, #11
 80056d0:	18bc      	adds	r4, r7, r2
 80056d2:	f7ff fddb 	bl	800528c <SpiritRadioGetBand>
 80056d6:	0003      	movs	r3, r0
 80056d8:	7023      	strb	r3, [r4, #0]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 80056da:	f000 fdab 	bl	8006234 <SpiritRadioGetRefDiv>
 80056de:	0003      	movs	r3, r0
 80056e0:	001a      	movs	r2, r3
 80056e2:	260a      	movs	r6, #10
 80056e4:	19bb      	adds	r3, r7, r6
 80056e6:	3201      	adds	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7fd fb92 	bl	8002e14 <__aeabi_ui2d>
 80056f0:	0004      	movs	r4, r0
 80056f2:	000d      	movs	r5, r1
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <SpiritRadioGetFrequencyBase+0x94>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7fd fb8b 	bl	8002e14 <__aeabi_ui2d>
 80056fe:	6038      	str	r0, [r7, #0]
 8005700:	6079      	str	r1, [r7, #4]
 8005702:	19bb      	adds	r3, r7, r6
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	049b      	lsls	r3, r3, #18
 8005708:	220b      	movs	r2, #11
 800570a:	18ba      	adds	r2, r7, r2
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	4912      	ldr	r1, [pc, #72]	; (8005758 <SpiritRadioGetFrequencyBase+0x98>)
 8005710:	5c8a      	ldrb	r2, [r1, r2]
 8005712:	4353      	muls	r3, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f7fd fb43 	bl	8002da0 <__aeabi_i2d>
 800571a:	0002      	movs	r2, r0
 800571c:	000b      	movs	r3, r1
 800571e:	6838      	ldr	r0, [r7, #0]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	f7fc f943 	bl	80019ac <__aeabi_ddiv>
 8005726:	0002      	movs	r2, r0
 8005728:	000b      	movs	r3, r1
 800572a:	0020      	movs	r0, r4
 800572c:	0029      	movs	r1, r5
 800572e:	f7fc fd47 	bl	80021c0 <__aeabi_dmul>
 8005732:	0003      	movs	r3, r0
 8005734:	000c      	movs	r4, r1
 8005736:	0018      	movs	r0, r3
 8005738:	0021      	movs	r1, r4
 800573a:	f004 f80f 	bl	800975c <round>
 800573e:	0003      	movs	r3, r0
 8005740:	000c      	movs	r4, r1
 8005742:	0018      	movs	r0, r3
 8005744:	0021      	movs	r1, r4
 8005746:	f7fa fee5 	bl	8000514 <__aeabi_d2uiz>
 800574a:	0003      	movs	r3, r0
}
 800574c:	0018      	movs	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	b005      	add	sp, #20
 8005752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005754:	20000344 	.word	0x20000344
 8005758:	08009830 	.word	0x08009830

0800575c <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8005768:	2318      	movs	r3, #24
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
  int8_t i=15;
 8005770:	231f      	movs	r3, #31
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	220f      	movs	r2, #15
 8005776:	701a      	strb	r2, [r3, #0]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8005778:	211a      	movs	r1, #26
 800577a:	187b      	adds	r3, r7, r1
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8005780:	187c      	adds	r4, r7, r1
 8005782:	f000 fdb3 	bl	80062ec <SpiritRadioGetDigDiv>
 8005786:	0003      	movs	r3, r0
 8005788:	7023      	strb	r3, [r4, #0]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 800578a:	e023      	b.n	80057d4 <SpiritRadioSearchDatarateME+0x78>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 800578c:	4b6f      	ldr	r3, [pc, #444]	; (800594c <SpiritRadioSearchDatarateME+0x1f0>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	231f      	movs	r3, #31
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b25b      	sxtb	r3, r3
 8005798:	2114      	movs	r1, #20
 800579a:	1ac9      	subs	r1, r1, r3
 800579c:	231a      	movs	r3, #26
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	18cb      	adds	r3, r1, r3
 80057a4:	40da      	lsrs	r2, r3
 80057a6:	0013      	movs	r3, r2
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d309      	bcc.n	80057c2 <SpiritRadioSearchDatarateME+0x66>
    {
      find = S_TRUE;
 80057ae:	2318      	movs	r3, #24
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	221f      	movs	r2, #31
 80057b8:	18bb      	adds	r3, r7, r2
 80057ba:	18ba      	adds	r2, r7, r2
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e008      	b.n	80057d4 <SpiritRadioSearchDatarateME+0x78>
    }
    else
    {
      i--;
 80057c2:	211f      	movs	r1, #31
 80057c4:	187b      	adds	r3, r7, r1
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	187b      	adds	r3, r7, r1
 80057d2:	701a      	strb	r2, [r3, #0]
  while(!find && i>=0)
 80057d4:	2318      	movs	r3, #24
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <SpiritRadioSearchDatarateME+0x8e>
 80057e0:	231f      	movs	r3, #31
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b7f      	cmp	r3, #127	; 0x7f
 80057e8:	d9d0      	bls.n	800578c <SpiritRadioSearchDatarateME+0x30>
    }
  }
  i<0 ? i=0 : i;
 80057ea:	231f      	movs	r3, #31
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b7f      	cmp	r3, #127	; 0x7f
 80057f2:	d903      	bls.n	80057fc <SpiritRadioSearchDatarateME+0xa0>
 80057f4:	231f      	movs	r3, #31
 80057f6:	18fb      	adds	r3, r7, r3
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
  *pcE = i;
 80057fc:	211f      	movs	r1, #31
 80057fe:	187b      	adds	r3, r7, r1
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8005806:	187b      	adds	r3, r7, r1
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	b25b      	sxtb	r3, r3
 800580c:	2217      	movs	r2, #23
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	409a      	lsls	r2, r3
 8005814:	0010      	movs	r0, r2
 8005816:	4b4d      	ldr	r3, [pc, #308]	; (800594c <SpiritRadioSearchDatarateME+0x1f0>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	231a      	movs	r3, #26
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	3305      	adds	r3, #5
 8005822:	40da      	lsrs	r2, r3
 8005824:	0013      	movs	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	f7fa fc6e 	bl	8000108 <__udivsi3>
 800582c:	0003      	movs	r3, r0
 800582e:	001a      	movs	r2, r3
 8005830:	2319      	movs	r3, #25
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	701a      	strb	r2, [r3, #0]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8005836:	231e      	movs	r3, #30
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e040      	b.n	80058c2 <SpiritRadioSearchDatarateME+0x166>
  {
    if((cMantissaTmp+j-1))
 8005840:	2319      	movs	r3, #25
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	781a      	ldrb	r2, [r3, #0]
 8005846:	231e      	movs	r3, #30
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	18d3      	adds	r3, r2, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d029      	beq.n	80058a6 <SpiritRadioSearchDatarateME+0x14a>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	b29a      	uxth	r2, r3
 8005856:	2319      	movs	r3, #25
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	1c59      	adds	r1, r3, #1
 800585e:	31ff      	adds	r1, #255	; 0xff
 8005860:	241e      	movs	r4, #30
 8005862:	193b      	adds	r3, r7, r4
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	18cb      	adds	r3, r1, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	0018      	movs	r0, r3
 800586c:	4b37      	ldr	r3, [pc, #220]	; (800594c <SpiritRadioSearchDatarateME+0x1f0>)
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	231a      	movs	r3, #26
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	3305      	adds	r3, #5
 8005878:	40d9      	lsrs	r1, r3
 800587a:	000b      	movs	r3, r1
 800587c:	4343      	muls	r3, r0
 800587e:	0019      	movs	r1, r3
 8005880:	231f      	movs	r3, #31
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b25b      	sxtb	r3, r3
 8005888:	2017      	movs	r0, #23
 800588a:	1ac3      	subs	r3, r0, r3
 800588c:	40d9      	lsrs	r1, r3
 800588e:	000b      	movs	r3, r1
 8005890:	b29b      	uxth	r3, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	b299      	uxth	r1, r3
 8005896:	193b      	adds	r3, r7, r4
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	b209      	sxth	r1, r1
 800589c:	2310      	movs	r3, #16
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	0052      	lsls	r2, r2, #1
 80058a2:	52d1      	strh	r1, [r2, r3]
 80058a4:	e007      	b.n	80058b6 <SpiritRadioSearchDatarateME+0x15a>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80058a6:	231e      	movs	r3, #30
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	2310      	movs	r3, #16
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	0052      	lsls	r2, r2, #1
 80058b2:	4927      	ldr	r1, [pc, #156]	; (8005950 <SpiritRadioSearchDatarateME+0x1f4>)
 80058b4:	52d1      	strh	r1, [r2, r3]
  for(uint8_t j=0;j<3;j++)
 80058b6:	211e      	movs	r1, #30
 80058b8:	187b      	adds	r3, r7, r1
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	187b      	adds	r3, r7, r1
 80058be:	3201      	adds	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	231e      	movs	r3, #30
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d9b9      	bls.n	8005840 <SpiritRadioSearchDatarateME+0xe4>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80058cc:	231c      	movs	r3, #28
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	2201      	movs	r2, #1
 80058d2:	4252      	negs	r2, r2
 80058d4:	801a      	strh	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80058d6:	231b      	movs	r3, #27
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e02c      	b.n	800593a <SpiritRadioSearchDatarateME+0x1de>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80058e0:	231b      	movs	r3, #27
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	2310      	movs	r3, #16
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	0052      	lsls	r2, r2, #1
 80058ec:	5ed3      	ldrsh	r3, [r2, r3]
 80058ee:	17d9      	asrs	r1, r3, #31
 80058f0:	185a      	adds	r2, r3, r1
 80058f2:	404a      	eors	r2, r1
 80058f4:	231c      	movs	r3, #28
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	da17      	bge.n	800592e <SpiritRadioSearchDatarateME+0x1d2>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80058fe:	211b      	movs	r1, #27
 8005900:	187b      	adds	r3, r7, r1
 8005902:	781a      	ldrb	r2, [r3, #0]
 8005904:	2310      	movs	r3, #16
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	0052      	lsls	r2, r2, #1
 800590a:	5ed3      	ldrsh	r3, [r2, r3]
 800590c:	17d8      	asrs	r0, r3, #31
 800590e:	181a      	adds	r2, r3, r0
 8005910:	4042      	eors	r2, r0
 8005912:	231c      	movs	r3, #28
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	801a      	strh	r2, [r3, #0]
      *pcM = cMantissaTmp+j-1;
 8005918:	2319      	movs	r3, #25
 800591a:	18fa      	adds	r2, r7, r3
 800591c:	187b      	adds	r3, r7, r1
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	18d3      	adds	r3, r2, r3
 8005924:	b2db      	uxtb	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b2da      	uxtb	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 800592e:	211b      	movs	r1, #27
 8005930:	187b      	adds	r3, r7, r1
 8005932:	781a      	ldrb	r2, [r3, #0]
 8005934:	187b      	adds	r3, r7, r1
 8005936:	3201      	adds	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	231b      	movs	r3, #27
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d9cd      	bls.n	80058e0 <SpiritRadioSearchDatarateME+0x184>
    }
  }
  
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b009      	add	sp, #36	; 0x24
 800594a:	bd90      	pop	{r4, r7, pc}
 800594c:	20000344 	.word	0x20000344
 8005950:	00007fff 	.word	0x00007fff

08005954 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8005954:	b5b0      	push	{r4, r5, r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8005960:	2326      	movs	r3, #38	; 0x26
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8005968:	f000 fcc0 	bl	80062ec <SpiritRadioGetDigDiv>
 800596c:	1e03      	subs	r3, r0, #0
 800596e:	d004      	beq.n	800597a <SpiritRadioSearchChannelBwME+0x26>
  {
    cDivider = 2;
 8005970:	2326      	movs	r3, #38	; 0x26
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	2202      	movs	r2, #2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e003      	b.n	8005982 <SpiritRadioSearchChannelBwME+0x2e>
  }
  else
  {
    cDivider = 1;
 800597a:	2326      	movs	r3, #38	; 0x26
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8005982:	4b76      	ldr	r3, [pc, #472]	; (8005b5c <SpiritRadioSearchChannelBwME+0x208>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2326      	movs	r3, #38	; 0x26
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	0019      	movs	r1, r3
 800598e:	0010      	movs	r0, r2
 8005990:	f7fa fbba 	bl	8000108 <__udivsi3>
 8005994:	0003      	movs	r3, r0
 8005996:	2164      	movs	r1, #100	; 0x64
 8005998:	0018      	movs	r0, r3
 800599a:	f7fa fbb5 	bl	8000108 <__udivsi3>
 800599e:	0003      	movs	r3, r0
 80059a0:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80059a2:	2327      	movs	r3, #39	; 0x27
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e008      	b.n	80059be <SpiritRadioSearchChannelBwME+0x6a>
 80059ac:	2127      	movs	r1, #39	; 0x27
 80059ae:	187b      	adds	r3, r7, r1
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b25b      	sxtb	r3, r3
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	3301      	adds	r3, #1
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	187b      	adds	r3, r7, r1
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	2327      	movs	r3, #39	; 0x27
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	2b59      	cmp	r3, #89	; 0x59
 80059c8:	dc12      	bgt.n	80059f0 <SpiritRadioSearchChannelBwME+0x9c>
 80059ca:	2327      	movs	r3, #39	; 0x27
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	2200      	movs	r2, #0
 80059d0:	569a      	ldrsb	r2, [r3, r2]
 80059d2:	4b63      	ldr	r3, [pc, #396]	; (8005b60 <SpiritRadioSearchChannelBwME+0x20c>)
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	5ad3      	ldrh	r3, [r2, r3]
 80059d8:	001a      	movs	r2, r3
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4353      	muls	r3, r2
 80059de:	4961      	ldr	r1, [pc, #388]	; (8005b64 <SpiritRadioSearchChannelBwME+0x210>)
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7fa fb91 	bl	8000108 <__udivsi3>
 80059e6:	0003      	movs	r3, r0
 80059e8:	001a      	movs	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d3dd      	bcc.n	80059ac <SpiritRadioSearchChannelBwME+0x58>
  
  if(i!=0)
 80059f0:	2327      	movs	r3, #39	; 0x27
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b25b      	sxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d100      	bne.n	80059fe <SpiritRadioSearchChannelBwME+0xaa>
 80059fc:	e091      	b.n	8005b22 <SpiritRadioSearchChannelBwME+0x1ce>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80059fe:	231b      	movs	r3, #27
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	2227      	movs	r2, #39	; 0x27
 8005a04:	18ba      	adds	r2, r7, r2
 8005a06:	7812      	ldrb	r2, [r2, #0]
 8005a08:	701a      	strb	r2, [r3, #0]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8005a0a:	2325      	movs	r3, #37	; 0x25
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e044      	b.n	8005a9e <SpiritRadioSearchChannelBwME+0x14a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8005a14:	231b      	movs	r3, #27
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2200      	movs	r2, #0
 8005a1a:	569a      	ldrsb	r2, [r3, r2]
 8005a1c:	2325      	movs	r3, #37	; 0x25
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	18d3      	adds	r3, r2, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	da0a      	bge.n	8005a40 <SpiritRadioSearchChannelBwME+0xec>
 8005a2a:	231b      	movs	r3, #27
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	2200      	movs	r2, #0
 8005a30:	569a      	ldrsb	r2, [r3, r2]
 8005a32:	2325      	movs	r3, #37	; 0x25
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	18d3      	adds	r3, r2, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	2b59      	cmp	r3, #89	; 0x59
 8005a3e:	dc20      	bgt.n	8005a82 <SpiritRadioSearchChannelBwME+0x12e>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	b29c      	uxth	r4, r3
 8005a44:	231b      	movs	r3, #27
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2200      	movs	r2, #0
 8005a4a:	569a      	ldrsb	r2, [r3, r2]
 8005a4c:	2525      	movs	r5, #37	; 0x25
 8005a4e:	197b      	adds	r3, r7, r5
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	1e5a      	subs	r2, r3, #1
 8005a56:	4b42      	ldr	r3, [pc, #264]	; (8005b60 <SpiritRadioSearchChannelBwME+0x20c>)
 8005a58:	0052      	lsls	r2, r2, #1
 8005a5a:	5ad3      	ldrh	r3, [r2, r3]
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4353      	muls	r3, r2
 8005a62:	4940      	ldr	r1, [pc, #256]	; (8005b64 <SpiritRadioSearchChannelBwME+0x210>)
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7fa fb4f 	bl	8000108 <__udivsi3>
 8005a6a:	0003      	movs	r3, r0
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	1ae3      	subs	r3, r4, r3
 8005a70:	b299      	uxth	r1, r3
 8005a72:	197b      	adds	r3, r7, r5
 8005a74:	781a      	ldrb	r2, [r3, #0]
 8005a76:	b209      	sxth	r1, r1
 8005a78:	2314      	movs	r3, #20
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	0052      	lsls	r2, r2, #1
 8005a7e:	52d1      	strh	r1, [r2, r3]
 8005a80:	e007      	b.n	8005a92 <SpiritRadioSearchChannelBwME+0x13e>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8005a82:	2325      	movs	r3, #37	; 0x25
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	781a      	ldrb	r2, [r3, #0]
 8005a88:	2314      	movs	r3, #20
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	0052      	lsls	r2, r2, #1
 8005a8e:	4936      	ldr	r1, [pc, #216]	; (8005b68 <SpiritRadioSearchChannelBwME+0x214>)
 8005a90:	52d1      	strh	r1, [r2, r3]
    for(uint8_t j=0;j<3;j++) 
 8005a92:	2125      	movs	r1, #37	; 0x25
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	3201      	adds	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	2325      	movs	r3, #37	; 0x25
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d9b5      	bls.n	8005a14 <SpiritRadioSearchChannelBwME+0xc0>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8005aa8:	2322      	movs	r3, #34	; 0x22
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2201      	movs	r2, #1
 8005aae:	4252      	negs	r2, r2
 8005ab0:	801a      	strh	r2, [r3, #0]
    
    for(uint8_t j=0;j<3;j++)
 8005ab2:	2321      	movs	r3, #33	; 0x21
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	e02d      	b.n	8005b18 <SpiritRadioSearchChannelBwME+0x1c4>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8005abc:	2321      	movs	r3, #33	; 0x21
 8005abe:	18fb      	adds	r3, r7, r3
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	2314      	movs	r3, #20
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	0052      	lsls	r2, r2, #1
 8005ac8:	5ed3      	ldrsh	r3, [r2, r3]
 8005aca:	17d9      	asrs	r1, r3, #31
 8005acc:	185a      	adds	r2, r3, r1
 8005ace:	404a      	eors	r2, r1
 8005ad0:	2322      	movs	r3, #34	; 0x22
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	da18      	bge.n	8005b0c <SpiritRadioSearchChannelBwME+0x1b8>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8005ada:	2121      	movs	r1, #33	; 0x21
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	2314      	movs	r3, #20
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	0052      	lsls	r2, r2, #1
 8005ae6:	5ed3      	ldrsh	r3, [r2, r3]
 8005ae8:	17d8      	asrs	r0, r3, #31
 8005aea:	181a      	adds	r2, r3, r0
 8005aec:	4042      	eors	r2, r0
 8005aee:	2322      	movs	r3, #34	; 0x22
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	801a      	strh	r2, [r3, #0]
        i=i_tmp+j-1;
 8005af4:	231b      	movs	r3, #27
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	18d3      	adds	r3, r2, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	2327      	movs	r3, #39	; 0x27
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	701a      	strb	r2, [r3, #0]
    for(uint8_t j=0;j<3;j++)
 8005b0c:	2121      	movs	r1, #33	; 0x21
 8005b0e:	187b      	adds	r3, r7, r1
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	3201      	adds	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	2321      	movs	r3, #33	; 0x21
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d9cc      	bls.n	8005abc <SpiritRadioSearchChannelBwME+0x168>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8005b22:	2427      	movs	r4, #39	; 0x27
 8005b24:	193b      	adds	r3, r7, r4
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	2109      	movs	r1, #9
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7fa fb75 	bl	800021c <__divsi3>
 8005b32:	0003      	movs	r3, r0
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8005b3c:	193b      	adds	r3, r7, r4
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	2109      	movs	r1, #9
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7fa fc4f 	bl	80003e8 <__aeabi_idivmod>
 8005b4a:	000b      	movs	r3, r1
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	701a      	strb	r2, [r3, #0]
  
}
 8005b54:	46c0      	nop			; (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b00a      	add	sp, #40	; 0x28
 8005b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b5c:	20000344 	.word	0x20000344
 8005b60:	08009838 	.word	0x08009838
 8005b64:	00000a28 	.word	0x00000a28
 8005b68:	00007fff 	.word	0x00007fff

08005b6c <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8005b6c:	b5b0      	push	{r4, r5, r7, lr}
 8005b6e:	b08a      	sub	sp, #40	; 0x28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8005b7c:	4b58      	ldr	r3, [pc, #352]	; (8005ce0 <SpiritRadioSearchFreqDevME+0x174>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fb fbb7 	bl	80012f4 <__aeabi_ui2f>
 8005b86:	1c03      	adds	r3, r0, #0
 8005b88:	2191      	movs	r1, #145	; 0x91
 8005b8a:	05c9      	lsls	r1, r1, #23
 8005b8c:	1c18      	adds	r0, r3, #0
 8005b8e:	f7fa fe79 	bl	8000884 <__aeabi_fdiv>
 8005b92:	1c03      	adds	r3, r0, #0
 8005b94:	61bb      	str	r3, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8005b96:	2327      	movs	r3, #39	; 0x27
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	e02b      	b.n	8005bf8 <SpiritRadioSearchFreqDevME+0x8c>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8005ba0:	2327      	movs	r3, #39	; 0x27
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	0013      	movs	r3, r2
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7fd f8f7 	bl	8002da0 <__aeabi_i2d>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	4b4b      	ldr	r3, [pc, #300]	; (8005ce4 <SpiritRadioSearchFreqDevME+0x178>)
 8005bb6:	f7fc fb03 	bl	80021c0 <__aeabi_dmul>
 8005bba:	0003      	movs	r3, r0
 8005bbc:	000c      	movs	r4, r1
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	0021      	movs	r1, r4
 8005bc2:	f7fa fca7 	bl	8000514 <__aeabi_d2uiz>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f7fb fb93 	bl	80012f4 <__aeabi_ui2f>
 8005bce:	1c03      	adds	r3, r0, #0
 8005bd0:	69b9      	ldr	r1, [r7, #24]
 8005bd2:	1c18      	adds	r0, r3, #0
 8005bd4:	f7fb f82e 	bl	8000c34 <__aeabi_fmul>
 8005bd8:	1c03      	adds	r3, r0, #0
 8005bda:	1c18      	adds	r0, r3, #0
 8005bdc:	f7fa fc82 	bl	80004e4 <__aeabi_f2uiz>
 8005be0:	0003      	movs	r3, r0
 8005be2:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d30b      	bcc.n	8005c04 <SpiritRadioSearchFreqDevME+0x98>
  for(i=0;i<10;i++)
 8005bec:	2127      	movs	r1, #39	; 0x27
 8005bee:	187b      	adds	r3, r7, r1
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	187b      	adds	r3, r7, r1
 8005bf4:	3201      	adds	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	2327      	movs	r3, #39	; 0x27
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	d9ce      	bls.n	8005ba0 <SpiritRadioSearchFreqDevME+0x34>
 8005c02:	e000      	b.n	8005c06 <SpiritRadioSearchFreqDevME+0x9a>
      break;
 8005c04:	46c0      	nop			; (mov r8, r8)
  }
  (*pcE) = i;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2127      	movs	r1, #39	; 0x27
 8005c0a:	187a      	adds	r2, r7, r1
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8005c10:	187b      	adds	r3, r7, r1
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e045      	b.n	8005ca4 <SpiritRadioSearchFreqDevME+0x138>
  {
    bp=b;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8005c1c:	2327      	movs	r3, #39	; 0x27
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7fd f8bc 	bl	8002da0 <__aeabi_i2d>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4b2f      	ldr	r3, [pc, #188]	; (8005ce8 <SpiritRadioSearchFreqDevME+0x17c>)
 8005c2c:	f7fb fba2 	bl	8001374 <__aeabi_dadd>
 8005c30:	0003      	movs	r3, r0
 8005c32:	000c      	movs	r4, r1
 8005c34:	0018      	movs	r0, r3
 8005c36:	0021      	movs	r1, r4
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	05db      	lsls	r3, r3, #23
 8005c3e:	f7fb feb5 	bl	80019ac <__aeabi_ddiv>
 8005c42:	0003      	movs	r3, r0
 8005c44:	000c      	movs	r4, r1
 8005c46:	0025      	movs	r5, r4
 8005c48:	001c      	movs	r4, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	001a      	movs	r2, r3
 8005c50:	2301      	movs	r3, #1
 8005c52:	4093      	lsls	r3, r2
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fd f8a3 	bl	8002da0 <__aeabi_i2d>
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	000b      	movs	r3, r1
 8005c5e:	0020      	movs	r0, r4
 8005c60:	0029      	movs	r1, r5
 8005c62:	f7fc faad 	bl	80021c0 <__aeabi_dmul>
 8005c66:	0003      	movs	r3, r0
 8005c68:	000c      	movs	r4, r1
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	0021      	movs	r1, r4
 8005c6e:	f7fa fc51 	bl	8000514 <__aeabi_d2uiz>
 8005c72:	0003      	movs	r3, r0
 8005c74:	0018      	movs	r0, r3
 8005c76:	f7fb fb3d 	bl	80012f4 <__aeabi_ui2f>
 8005c7a:	1c03      	adds	r3, r0, #0
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	1c18      	adds	r0, r3, #0
 8005c80:	f7fa ffd8 	bl	8000c34 <__aeabi_fmul>
 8005c84:	1c03      	adds	r3, r0, #0
 8005c86:	1c18      	adds	r0, r3, #0
 8005c88:	f7fa fc2c 	bl	80004e4 <__aeabi_f2uiz>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d30b      	bcc.n	8005cb0 <SpiritRadioSearchFreqDevME+0x144>
  for(i=0;i<8;i++)
 8005c98:	2127      	movs	r1, #39	; 0x27
 8005c9a:	187b      	adds	r3, r7, r1
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	187b      	adds	r3, r7, r1
 8005ca0:	3201      	adds	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	2327      	movs	r3, #39	; 0x27
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b07      	cmp	r3, #7
 8005cac:	d9b4      	bls.n	8005c18 <SpiritRadioSearchFreqDevME+0xac>
 8005cae:	e000      	b.n	8005cb2 <SpiritRadioSearchFreqDevME+0x146>
      break;
 8005cb0:	46c0      	nop			; (mov r8, r8)
  }
  
  (*pcM)=i;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2227      	movs	r2, #39	; 0x27
 8005cb6:	18ba      	adds	r2, r7, r2
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	69f9      	ldr	r1, [r7, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1acb      	subs	r3, r1, r3
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d205      	bcs.n	8005cd8 <SpiritRadioSearchFreqDevME+0x16c>
    (*pcM)--;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	701a      	strb	r2, [r3, #0]
  
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b00a      	add	sp, #40	; 0x28
 8005cde:	bdb0      	pop	{r4, r5, r7, pc}
 8005ce0:	20000344 	.word	0x20000344
 8005ce4:	401e0000 	.word	0x401e0000
 8005ce8:	40200000 	.word	0x40200000

08005cec <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8005cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint8_t i;
  uint8_t j=0;
 8005cf6:	230e      	movs	r3, #14
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a7f      	ldr	r2, [pc, #508]	; (8005f00 <SpiritRadioGetdBm2Reg+0x214>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d910      	bls.n	8005d28 <SpiritRadioGetdBm2Reg+0x3c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a7e      	ldr	r2, [pc, #504]	; (8005f04 <SpiritRadioGetdBm2Reg+0x218>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d80c      	bhi.n	8005d28 <SpiritRadioGetdBm2Reg+0x3c>
  {
    i=0;
 8005d0e:	230f      	movs	r3, #15
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
    if(lFBase<900000000) i=1;// 868   
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a7b      	ldr	r2, [pc, #492]	; (8005f08 <SpiritRadioGetdBm2Reg+0x21c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d82a      	bhi.n	8005d74 <SpiritRadioGetdBm2Reg+0x88>
 8005d1e:	230f      	movs	r3, #15
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e025      	b.n	8005d74 <SpiritRadioGetdBm2Reg+0x88>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a78      	ldr	r2, [pc, #480]	; (8005f0c <SpiritRadioGetdBm2Reg+0x220>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d908      	bls.n	8005d42 <SpiritRadioGetdBm2Reg+0x56>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a77      	ldr	r2, [pc, #476]	; (8005f10 <SpiritRadioGetdBm2Reg+0x224>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d804      	bhi.n	8005d42 <SpiritRadioGetdBm2Reg+0x56>
  {
    i=2;
 8005d38:	230f      	movs	r3, #15
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e018      	b.n	8005d74 <SpiritRadioGetdBm2Reg+0x88>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a73      	ldr	r2, [pc, #460]	; (8005f14 <SpiritRadioGetdBm2Reg+0x228>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d908      	bls.n	8005d5c <SpiritRadioGetdBm2Reg+0x70>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a72      	ldr	r2, [pc, #456]	; (8005f18 <SpiritRadioGetdBm2Reg+0x22c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d804      	bhi.n	8005d5c <SpiritRadioGetdBm2Reg+0x70>
  {
    i=3;
 8005d52:	230f      	movs	r3, #15
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	2203      	movs	r2, #3
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	e00b      	b.n	8005d74 <SpiritRadioGetdBm2Reg+0x88>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a6f      	ldr	r2, [pc, #444]	; (8005f1c <SpiritRadioGetdBm2Reg+0x230>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d907      	bls.n	8005d74 <SpiritRadioGetdBm2Reg+0x88>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a6e      	ldr	r2, [pc, #440]	; (8005f20 <SpiritRadioGetdBm2Reg+0x234>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d803      	bhi.n	8005d74 <SpiritRadioGetdBm2Reg+0x88>
  {
    i=4;
 8005d6c:	230f      	movs	r3, #15
 8005d6e:	18fb      	adds	r3, r7, r3
 8005d70:	2204      	movs	r2, #4
 8005d72:	701a      	strb	r2, [r3, #0]
  }
  
  j=1;
 8005d74:	230e      	movs	r3, #14
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	2201      	movs	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	6838      	ldr	r0, [r7, #0]
 8005d80:	f7fa fb9c 	bl	80004bc <__aeabi_fcmpgt>
 8005d84:	1e03      	subs	r3, r0, #0
 8005d86:	d038      	beq.n	8005dfa <SpiritRadioGetdBm2Reg+0x10e>
 8005d88:	250f      	movs	r5, #15
 8005d8a:	197b      	adds	r3, r7, r5
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	4965      	ldr	r1, [pc, #404]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005d90:	0013      	movs	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	189b      	adds	r3, r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	18cb      	adds	r3, r1, r3
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	1c19      	adds	r1, r3, #0
 8005da0:	4861      	ldr	r0, [pc, #388]	; (8005f28 <SpiritRadioGetdBm2Reg+0x23c>)
 8005da2:	f7fa fd6f 	bl	8000884 <__aeabi_fdiv>
 8005da6:	1c03      	adds	r3, r0, #0
 8005da8:	1c1c      	adds	r4, r3, #0
 8005daa:	197b      	adds	r3, r7, r5
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	495d      	ldr	r1, [pc, #372]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005db0:	0013      	movs	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	189b      	adds	r3, r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	18cb      	adds	r3, r1, r3
 8005dba:	330c      	adds	r3, #12
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	197b      	adds	r3, r7, r5
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	4958      	ldr	r1, [pc, #352]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005dc4:	0013      	movs	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	189b      	adds	r3, r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	18cb      	adds	r3, r1, r3
 8005dce:	3308      	adds	r3, #8
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	1c19      	adds	r1, r3, #0
 8005dd4:	f7fa fd56 	bl	8000884 <__aeabi_fdiv>
 8005dd8:	1c03      	adds	r3, r0, #0
 8005dda:	1c19      	adds	r1, r3, #0
 8005ddc:	1c20      	adds	r0, r4, #0
 8005dde:	f7fb f85b 	bl	8000e98 <__aeabi_fsub>
 8005de2:	1c03      	adds	r3, r0, #0
 8005de4:	1c19      	adds	r1, r3, #0
 8005de6:	6838      	ldr	r0, [r7, #0]
 8005de8:	f7fa fb68 	bl	80004bc <__aeabi_fcmpgt>
 8005dec:	1e03      	subs	r3, r0, #0
 8005dee:	d004      	beq.n	8005dfa <SpiritRadioGetdBm2Reg+0x10e>
      j=0;
 8005df0:	230e      	movs	r3, #14
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e03d      	b.n	8005e76 <SpiritRadioGetdBm2Reg+0x18a>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	6838      	ldr	r0, [r7, #0]
 8005dfe:	f7fa fb53 	bl	80004a8 <__aeabi_fcmple>
 8005e02:	1e03      	subs	r3, r0, #0
 8005e04:	d037      	beq.n	8005e76 <SpiritRadioGetdBm2Reg+0x18a>
 8005e06:	250f      	movs	r5, #15
 8005e08:	197b      	adds	r3, r7, r5
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	4945      	ldr	r1, [pc, #276]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005e0e:	0013      	movs	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	18cb      	adds	r3, r1, r3
 8005e18:	3308      	adds	r3, #8
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	1c19      	adds	r1, r3, #0
 8005e1e:	4843      	ldr	r0, [pc, #268]	; (8005f2c <SpiritRadioGetdBm2Reg+0x240>)
 8005e20:	f7fa fd30 	bl	8000884 <__aeabi_fdiv>
 8005e24:	1c03      	adds	r3, r0, #0
 8005e26:	1c1c      	adds	r4, r3, #0
 8005e28:	197b      	adds	r3, r7, r5
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	493d      	ldr	r1, [pc, #244]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005e2e:	0013      	movs	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	18cb      	adds	r3, r1, r3
 8005e38:	330c      	adds	r3, #12
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	197b      	adds	r3, r7, r5
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	4938      	ldr	r1, [pc, #224]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005e42:	0013      	movs	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	18cb      	adds	r3, r1, r3
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	1c19      	adds	r1, r3, #0
 8005e52:	f7fa fd17 	bl	8000884 <__aeabi_fdiv>
 8005e56:	1c03      	adds	r3, r0, #0
 8005e58:	1c19      	adds	r1, r3, #0
 8005e5a:	1c20      	adds	r0, r4, #0
 8005e5c:	f7fb f81c 	bl	8000e98 <__aeabi_fsub>
 8005e60:	1c03      	adds	r3, r0, #0
 8005e62:	1c19      	adds	r1, r3, #0
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	f7fa fb15 	bl	8000494 <__aeabi_fcmplt>
 8005e6a:	1e03      	subs	r3, r0, #0
 8005e6c:	d003      	beq.n	8005e76 <SpiritRadioGetdBm2Reg+0x18a>
      j=2;
 8005e6e:	230e      	movs	r3, #14
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	2202      	movs	r2, #2
 8005e74:	701a      	strb	r2, [r3, #0]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8005e76:	250f      	movs	r5, #15
 8005e78:	197b      	adds	r3, r7, r5
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	260e      	movs	r6, #14
 8005e7e:	19bb      	adds	r3, r7, r6
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	0058      	lsls	r0, r3, #1
 8005e84:	4927      	ldr	r1, [pc, #156]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005e86:	0013      	movs	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	189b      	adds	r3, r3, r2
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	181b      	adds	r3, r3, r0
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	585b      	ldr	r3, [r3, r1]
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	1c18      	adds	r0, r3, #0
 8005e98:	f7fa fecc 	bl	8000c34 <__aeabi_fmul>
 8005e9c:	1c03      	adds	r3, r0, #0
 8005e9e:	1c1c      	adds	r4, r3, #0
 8005ea0:	197b      	adds	r3, r7, r5
 8005ea2:	781a      	ldrb	r2, [r3, #0]
 8005ea4:	19bb      	adds	r3, r7, r6
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	1c58      	adds	r0, r3, #1
 8005eac:	491d      	ldr	r1, [pc, #116]	; (8005f24 <SpiritRadioGetdBm2Reg+0x238>)
 8005eae:	0013      	movs	r3, r2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	189b      	adds	r3, r3, r2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	181b      	adds	r3, r3, r0
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	585b      	ldr	r3, [r3, r1]
 8005ebc:	1c19      	adds	r1, r3, #0
 8005ebe:	1c20      	adds	r0, r4, #0
 8005ec0:	f7fa fb46 	bl	8000550 <__aeabi_fadd>
 8005ec4:	1c03      	adds	r3, r0, #0
 8005ec6:	60bb      	str	r3, [r7, #8]
  
  if(fReg<1)
 8005ec8:	21fe      	movs	r1, #254	; 0xfe
 8005eca:	0589      	lsls	r1, r1, #22
 8005ecc:	68b8      	ldr	r0, [r7, #8]
 8005ece:	f7fa fae1 	bl	8000494 <__aeabi_fcmplt>
 8005ed2:	1e03      	subs	r3, r0, #0
 8005ed4:	d003      	beq.n	8005ede <SpiritRadioGetdBm2Reg+0x1f2>
    fReg=1;
 8005ed6:	23fe      	movs	r3, #254	; 0xfe
 8005ed8:	059b      	lsls	r3, r3, #22
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	e007      	b.n	8005eee <SpiritRadioGetdBm2Reg+0x202>
  else if(fReg>90) 
 8005ede:	4914      	ldr	r1, [pc, #80]	; (8005f30 <SpiritRadioGetdBm2Reg+0x244>)
 8005ee0:	68b8      	ldr	r0, [r7, #8]
 8005ee2:	f7fa faeb 	bl	80004bc <__aeabi_fcmpgt>
 8005ee6:	1e03      	subs	r3, r0, #0
 8005ee8:	d001      	beq.n	8005eee <SpiritRadioGetdBm2Reg+0x202>
    fReg=90;
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <SpiritRadioGetdBm2Reg+0x244>)
 8005eec:	60bb      	str	r3, [r7, #8]
  
  return ((uint8_t)fReg);
 8005eee:	68b8      	ldr	r0, [r7, #8]
 8005ef0:	f7fa faf8 	bl	80004e4 <__aeabi_f2uiz>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	b2db      	uxtb	r3, r3
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b005      	add	sp, #20
 8005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f00:	2e5f567f 	.word	0x2e5f567f
 8005f04:	390c2fe0 	.word	0x390c2fe0
 8005f08:	35a4e8ff 	.word	0x35a4e8ff
 8005f0c:	1701e47f 	.word	0x1701e47f
 8005f10:	1c146a60 	.word	0x1c146a60
 8005f14:	11d260bf 	.word	0x11d260bf
 8005f18:	14ced7e0 	.word	0x14ced7e0
 8005f1c:	08e18f3f 	.word	0x08e18f3f
 8005f20:	0a6fd060 	.word	0x0a6fd060
 8005f24:	0800990c 	.word	0x0800990c
 8005f28:	41500000 	.word	0x41500000
 8005f2c:	42200000 	.word	0x42200000
 8005f30:	42b40000 	.word	0x42b40000

08005f34 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	0002      	movs	r2, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	1dfb      	adds	r3, r7, #7
 8005f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8005f42:	f7ff fbbd 	bl	80056c0 <SpiritRadioGetFrequencyBase>
 8005f46:	0002      	movs	r2, r0
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1c19      	adds	r1, r3, #0
 8005f4c:	0010      	movs	r0, r2
 8005f4e:	f7ff fecd 	bl	8005cec <SpiritRadioGetdBm2Reg>
 8005f52:	0003      	movs	r3, r0
 8005f54:	001a      	movs	r2, r3
 8005f56:	200e      	movs	r0, #14
 8005f58:	183b      	adds	r3, r7, r0
 8005f5a:	701a      	strb	r2, [r3, #0]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8005f5c:	240f      	movs	r4, #15
 8005f5e:	193b      	adds	r3, r7, r4
 8005f60:	1dfa      	adds	r2, r7, #7
 8005f62:	7812      	ldrb	r2, [r2, #0]
 8005f64:	2117      	movs	r1, #23
 8005f66:	1a8a      	subs	r2, r1, r2
 8005f68:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8005f6a:	183a      	adds	r2, r7, r0
 8005f6c:	193b      	adds	r3, r7, r4
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2101      	movs	r1, #1
 8005f72:	0018      	movs	r0, r3
 8005f74:	f001 f968 	bl	8007248 <RadioSpiWriteRegisters>
 8005f78:	1c03      	adds	r3, r0, #0
 8005f7a:	1c1a      	adds	r2, r3, #0
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <SpiritRadioSetPALeveldBm+0x60>)
 8005f7e:	b212      	sxth	r2, r2
 8005f80:	1c11      	adds	r1, r2, #0
 8005f82:	7019      	strb	r1, [r3, #0]
 8005f84:	0412      	lsls	r2, r2, #16
 8005f86:	0e12      	lsrs	r2, r2, #24
 8005f88:	705a      	strb	r2, [r3, #1]
  
}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b005      	add	sp, #20
 8005f90:	bd90      	pop	{r4, r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	20000378 	.word	0x20000378

08005f98 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	0002      	movs	r2, r0
 8005fa0:	1dfb      	adds	r3, r7, #7
 8005fa2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8005fa4:	210f      	movs	r1, #15
 8005fa6:	000c      	movs	r4, r1
 8005fa8:	187b      	adds	r3, r7, r1
 8005faa:	001a      	movs	r2, r3
 8005fac:	2101      	movs	r1, #1
 8005fae:	2018      	movs	r0, #24
 8005fb0:	f001 f9ec 	bl	800738c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8005fb4:	0021      	movs	r1, r4
 8005fb6:	187b      	adds	r3, r7, r1
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	223f      	movs	r2, #63	; 0x3f
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	701a      	strb	r2, [r3, #0]
  tempRegValue |= xCLoad;
 8005fc4:	187b      	adds	r3, r7, r1
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	1dfb      	adds	r3, r7, #7
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8005fd4:	187b      	adds	r3, r7, r1
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	2101      	movs	r1, #1
 8005fda:	2018      	movs	r0, #24
 8005fdc:	f001 f934 	bl	8007248 <RadioSpiWriteRegisters>
 8005fe0:	1c03      	adds	r3, r0, #0
 8005fe2:	1c1a      	adds	r2, r3, #0
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <SpiritRadioSetPACwc+0x64>)
 8005fe6:	b212      	sxth	r2, r2
 8005fe8:	1c11      	adds	r1, r2, #0
 8005fea:	7019      	strb	r1, [r3, #0]
 8005fec:	0412      	lsls	r2, r2, #16
 8005fee:	0e12      	lsrs	r2, r2, #24
 8005ff0:	705a      	strb	r2, [r3, #1]
  
}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	b005      	add	sp, #20
 8005ff8:	bd90      	pop	{r4, r7, pc}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	20000378 	.word	0x20000378

08006000 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	0002      	movs	r2, r0
 8006008:	1dfb      	adds	r3, r7, #7
 800600a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800600c:	210f      	movs	r1, #15
 800600e:	000c      	movs	r4, r1
 8006010:	187b      	adds	r3, r7, r1
 8006012:	001a      	movs	r2, r3
 8006014:	2101      	movs	r1, #1
 8006016:	2018      	movs	r0, #24
 8006018:	f001 f9b8 	bl	800738c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 800601c:	0021      	movs	r1, r4
 800601e:	187b      	adds	r3, r7, r1
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2207      	movs	r2, #7
 8006024:	4393      	bics	r3, r2
 8006026:	b2da      	uxtb	r2, r3
 8006028:	187b      	adds	r3, r7, r1
 800602a:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cIndex;
 800602c:	187b      	adds	r3, r7, r1
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	1dfb      	adds	r3, r7, #7
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	4313      	orrs	r3, r2
 8006036:	b2da      	uxtb	r2, r3
 8006038:	187b      	adds	r3, r7, r1
 800603a:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800603c:	187b      	adds	r3, r7, r1
 800603e:	001a      	movs	r2, r3
 8006040:	2101      	movs	r1, #1
 8006042:	2018      	movs	r0, #24
 8006044:	f001 f900 	bl	8007248 <RadioSpiWriteRegisters>
 8006048:	1c03      	adds	r3, r0, #0
 800604a:	1c1a      	adds	r2, r3, #0
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <SpiritRadioSetPALevelMaxIndex+0x64>)
 800604e:	b212      	sxth	r2, r2
 8006050:	1c11      	adds	r1, r2, #0
 8006052:	7019      	strb	r1, [r3, #0]
 8006054:	0412      	lsls	r2, r2, #16
 8006056:	0e12      	lsrs	r2, r2, #24
 8006058:	705a      	strb	r2, [r3, #1]
  
}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	46bd      	mov	sp, r7
 800605e:	b005      	add	sp, #20
 8006060:	bd90      	pop	{r4, r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	20000378 	.word	0x20000378

08006068 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	0002      	movs	r2, r0
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue = 0x00;
 8006074:	210f      	movs	r1, #15
 8006076:	187b      	adds	r3, r7, r1
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 800607c:	187b      	adds	r3, r7, r1
 800607e:	001a      	movs	r2, r3
 8006080:	2101      	movs	r1, #1
 8006082:	201e      	movs	r0, #30
 8006084:	f001 f982 	bl	800738c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8006088:	1dfb      	adds	r3, r7, #7
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d109      	bne.n	80060a4 <SpiritRadioAFCFreezeOnSync+0x3c>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8006090:	210f      	movs	r1, #15
 8006092:	187b      	adds	r3, r7, r1
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	4252      	negs	r2, r2
 800609a:	4313      	orrs	r3, r2
 800609c:	b2da      	uxtb	r2, r3
 800609e:	187b      	adds	r3, r7, r1
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e007      	b.n	80060b4 <SpiritRadioAFCFreezeOnSync+0x4c>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80060a4:	210f      	movs	r1, #15
 80060a6:	187b      	adds	r3, r7, r1
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	227f      	movs	r2, #127	; 0x7f
 80060ac:	4013      	ands	r3, r2
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80060b4:	230f      	movs	r3, #15
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	001a      	movs	r2, r3
 80060ba:	2101      	movs	r1, #1
 80060bc:	201e      	movs	r0, #30
 80060be:	f001 f8c3 	bl	8007248 <RadioSpiWriteRegisters>
 80060c2:	1c03      	adds	r3, r0, #0
 80060c4:	1c1a      	adds	r2, r3, #0
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <SpiritRadioAFCFreezeOnSync+0x74>)
 80060c8:	b212      	sxth	r2, r2
 80060ca:	1c11      	adds	r1, r2, #0
 80060cc:	7019      	strb	r1, [r3, #0]
 80060ce:	0412      	lsls	r2, r2, #16
 80060d0:	0e12      	lsrs	r2, r2, #24
 80060d2:	705a      	strb	r2, [r3, #1]
  
}
 80060d4:	46c0      	nop			; (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b004      	add	sp, #16
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000378 	.word	0x20000378

080060e0 <SpiritRadioCsBlanking>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	0002      	movs	r2, r0
 80060e8:	1dfb      	adds	r3, r7, #7
 80060ea:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the ANT_SELECT_CONF_BASE and mask the CS_BLANKING BIT field */
  SpiritSpiReadRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 80060ec:	230f      	movs	r3, #15
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	001a      	movs	r2, r3
 80060f2:	2101      	movs	r1, #1
 80060f4:	2027      	movs	r0, #39	; 0x27
 80060f6:	f001 f949 	bl	800738c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80060fa:	1dfb      	adds	r3, r7, #7
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d108      	bne.n	8006114 <SpiritRadioCsBlanking+0x34>
  {
    tempRegValue |= ANT_SELECT_CS_BLANKING_MASK;
 8006102:	210f      	movs	r1, #15
 8006104:	187b      	adds	r3, r7, r1
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2210      	movs	r2, #16
 800610a:	4313      	orrs	r3, r2
 800610c:	b2da      	uxtb	r2, r3
 800610e:	187b      	adds	r3, r7, r1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e007      	b.n	8006124 <SpiritRadioCsBlanking+0x44>
  }
  else
  {
    tempRegValue &= (~ANT_SELECT_CS_BLANKING_MASK);
 8006114:	210f      	movs	r1, #15
 8006116:	187b      	adds	r3, r7, r1
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2210      	movs	r2, #16
 800611c:	4393      	bics	r3, r2
 800611e:	b2da      	uxtb	r2, r3
 8006120:	187b      	adds	r3, r7, r1
 8006122:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the ANT_SELECT_CONF register */
  g_xStatus = SpiritSpiWriteRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8006124:	230f      	movs	r3, #15
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	001a      	movs	r2, r3
 800612a:	2101      	movs	r1, #1
 800612c:	2027      	movs	r0, #39	; 0x27
 800612e:	f001 f88b 	bl	8007248 <RadioSpiWriteRegisters>
 8006132:	1c03      	adds	r3, r0, #0
 8006134:	1c1a      	adds	r2, r3, #0
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <SpiritRadioCsBlanking+0x6c>)
 8006138:	b212      	sxth	r2, r2
 800613a:	1c11      	adds	r1, r2, #0
 800613c:	7019      	strb	r1, [r3, #0]
 800613e:	0412      	lsls	r2, r2, #16
 8006140:	0e12      	lsrs	r2, r2, #24
 8006142:	705a      	strb	r2, [r3, #1]
  
  
}
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b004      	add	sp, #16
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000378 	.word	0x20000378

08006150 <SpiritRadioPersistenRx>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	0002      	movs	r2, r0
 8006158:	1dfb      	adds	r3, r7, #7
 800615a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the PROTOCOL0_BASE and mask the PROTOCOL0_PERS_RX_MASK bitfield */
  SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 800615c:	230f      	movs	r3, #15
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	001a      	movs	r2, r3
 8006162:	2101      	movs	r1, #1
 8006164:	2052      	movs	r0, #82	; 0x52
 8006166:	f001 f911 	bl	800738c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 800616a:	1dfb      	adds	r3, r7, #7
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d108      	bne.n	8006184 <SpiritRadioPersistenRx+0x34>
  {
    tempRegValue |= PROTOCOL0_PERS_RX_MASK;
 8006172:	210f      	movs	r1, #15
 8006174:	187b      	adds	r3, r7, r1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2202      	movs	r2, #2
 800617a:	4313      	orrs	r3, r2
 800617c:	b2da      	uxtb	r2, r3
 800617e:	187b      	adds	r3, r7, r1
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	e007      	b.n	8006194 <SpiritRadioPersistenRx+0x44>
  }
  else
  {
    tempRegValue &= (~PROTOCOL0_PERS_RX_MASK);
 8006184:	210f      	movs	r1, #15
 8006186:	187b      	adds	r3, r7, r1
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2202      	movs	r2, #2
 800618c:	4393      	bics	r3, r2
 800618e:	b2da      	uxtb	r2, r3
 8006190:	187b      	adds	r3, r7, r1
 8006192:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the PROTOCOL0_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8006194:	230f      	movs	r3, #15
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	001a      	movs	r2, r3
 800619a:	2101      	movs	r1, #1
 800619c:	2052      	movs	r0, #82	; 0x52
 800619e:	f001 f853 	bl	8007248 <RadioSpiWriteRegisters>
 80061a2:	1c03      	adds	r3, r0, #0
 80061a4:	1c1a      	adds	r2, r3, #0
 80061a6:	4b05      	ldr	r3, [pc, #20]	; (80061bc <SpiritRadioPersistenRx+0x6c>)
 80061a8:	b212      	sxth	r2, r2
 80061aa:	1c11      	adds	r1, r2, #0
 80061ac:	7019      	strb	r1, [r3, #0]
 80061ae:	0412      	lsls	r2, r2, #16
 80061b0:	0e12      	lsrs	r2, r2, #24
 80061b2:	705a      	strb	r2, [r3, #1]
  
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b004      	add	sp, #16
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000378 	.word	0x20000378

080061c0 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	0002      	movs	r2, r0
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80061cc:	230f      	movs	r3, #15
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	001a      	movs	r2, r3
 80061d2:	2101      	movs	r1, #1
 80061d4:	209e      	movs	r0, #158	; 0x9e
 80061d6:	f001 f8d9 	bl	800738c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80061da:	1dfb      	adds	r3, r7, #7
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d109      	bne.n	80061f6 <SpiritRadioSetRefDiv+0x36>
  {
    tempRegValue |= 0x80;
 80061e2:	210f      	movs	r1, #15
 80061e4:	187b      	adds	r3, r7, r1
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2280      	movs	r2, #128	; 0x80
 80061ea:	4252      	negs	r2, r2
 80061ec:	4313      	orrs	r3, r2
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	187b      	adds	r3, r7, r1
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e007      	b.n	8006206 <SpiritRadioSetRefDiv+0x46>
  }
  else
  {
    tempRegValue &= 0x7F;
 80061f6:	210f      	movs	r1, #15
 80061f8:	187b      	adds	r3, r7, r1
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	227f      	movs	r2, #127	; 0x7f
 80061fe:	4013      	ands	r3, r2
 8006200:	b2da      	uxtb	r2, r3
 8006202:	187b      	adds	r3, r7, r1
 8006204:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8006206:	230f      	movs	r3, #15
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	001a      	movs	r2, r3
 800620c:	2101      	movs	r1, #1
 800620e:	209e      	movs	r0, #158	; 0x9e
 8006210:	f001 f81a 	bl	8007248 <RadioSpiWriteRegisters>
 8006214:	1c03      	adds	r3, r0, #0
 8006216:	1c1a      	adds	r2, r3, #0
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <SpiritRadioSetRefDiv+0x70>)
 800621a:	b212      	sxth	r2, r2
 800621c:	1c11      	adds	r1, r2, #0
 800621e:	7019      	strb	r1, [r3, #0]
 8006220:	0412      	lsls	r2, r2, #16
 8006222:	0e12      	lsrs	r2, r2, #24
 8006224:	705a      	strb	r2, [r3, #1]
  
}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	20000378 	.word	0x20000378

08006234 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800623a:	1dfb      	adds	r3, r7, #7
 800623c:	001a      	movs	r2, r3
 800623e:	2101      	movs	r1, #1
 8006240:	209e      	movs	r0, #158	; 0x9e
 8006242:	f001 f8a3 	bl	800738c <RadioSpiReadRegisters>
 8006246:	1c03      	adds	r3, r0, #0
 8006248:	1c1a      	adds	r2, r3, #0
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <SpiritRadioGetRefDiv+0x44>)
 800624c:	b212      	sxth	r2, r2
 800624e:	1c11      	adds	r1, r2, #0
 8006250:	7019      	strb	r1, [r3, #0]
 8006252:	0412      	lsls	r2, r2, #16
 8006254:	0e12      	lsrs	r2, r2, #24
 8006256:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8006258:	1dfb      	adds	r3, r7, #7
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	b2db      	uxtb	r3, r3
 8006260:	001a      	movs	r2, r3
 8006262:	2301      	movs	r3, #1
 8006264:	4013      	ands	r3, r2
 8006266:	d001      	beq.n	800626c <SpiritRadioGetRefDiv+0x38>
  {
    return S_ENABLE;
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <SpiritRadioGetRefDiv+0x3a>
  }
  else
  {
    return S_DISABLE;
 800626c:	2300      	movs	r3, #0
  }
  
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b002      	add	sp, #8
 8006274:	bd80      	pop	{r7, pc}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	20000378 	.word	0x20000378

0800627c <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	0002      	movs	r2, r0
 8006284:	1dfb      	adds	r3, r7, #7
 8006286:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8006288:	230f      	movs	r3, #15
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	001a      	movs	r2, r3
 800628e:	2101      	movs	r1, #1
 8006290:	20b4      	movs	r0, #180	; 0xb4
 8006292:	f001 f87b 	bl	800738c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8006296:	1dfb      	adds	r3, r7, #7
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d108      	bne.n	80062b0 <SpiritRadioSetDigDiv+0x34>
  {
    tempRegValue &= 0xf7;
 800629e:	210f      	movs	r1, #15
 80062a0:	187b      	adds	r3, r7, r1
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2208      	movs	r2, #8
 80062a6:	4393      	bics	r3, r2
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	187b      	adds	r3, r7, r1
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e007      	b.n	80062c0 <SpiritRadioSetDigDiv+0x44>
  }
  else
  {
    
    tempRegValue |= 0x08;
 80062b0:	210f      	movs	r1, #15
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2208      	movs	r2, #8
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	187b      	adds	r3, r7, r1
 80062be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80062c0:	230f      	movs	r3, #15
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	001a      	movs	r2, r3
 80062c6:	2101      	movs	r1, #1
 80062c8:	20b4      	movs	r0, #180	; 0xb4
 80062ca:	f000 ffbd 	bl	8007248 <RadioSpiWriteRegisters>
 80062ce:	1c03      	adds	r3, r0, #0
 80062d0:	1c1a      	adds	r2, r3, #0
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <SpiritRadioSetDigDiv+0x6c>)
 80062d4:	b212      	sxth	r2, r2
 80062d6:	1c11      	adds	r1, r2, #0
 80062d8:	7019      	strb	r1, [r3, #0]
 80062da:	0412      	lsls	r2, r2, #16
 80062dc:	0e12      	lsrs	r2, r2, #24
 80062de:	705a      	strb	r2, [r3, #1]
  
}
 80062e0:	46c0      	nop			; (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b004      	add	sp, #16
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000378 	.word	0x20000378

080062ec <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80062f2:	1dfb      	adds	r3, r7, #7
 80062f4:	001a      	movs	r2, r3
 80062f6:	2101      	movs	r1, #1
 80062f8:	20b4      	movs	r0, #180	; 0xb4
 80062fa:	f001 f847 	bl	800738c <RadioSpiReadRegisters>
 80062fe:	1c03      	adds	r3, r0, #0
 8006300:	1c1a      	adds	r2, r3, #0
 8006302:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <SpiritRadioGetDigDiv+0x44>)
 8006304:	b212      	sxth	r2, r2
 8006306:	1c11      	adds	r1, r2, #0
 8006308:	7019      	strb	r1, [r3, #0]
 800630a:	0412      	lsls	r2, r2, #16
 800630c:	0e12      	lsrs	r2, r2, #24
 800630e:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8006310:	1dfb      	adds	r3, r7, #7
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	08db      	lsrs	r3, r3, #3
 8006316:	b2db      	uxtb	r3, r3
 8006318:	001a      	movs	r2, r3
 800631a:	2301      	movs	r3, #1
 800631c:	4013      	ands	r3, r2
 800631e:	d001      	beq.n	8006324 <SpiritRadioGetDigDiv+0x38>
  {
    return S_DISABLE;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <SpiritRadioGetDigDiv+0x3a>
  }
  else
  {
    return S_ENABLE;
 8006324:	2301      	movs	r3, #1
  }
  
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b002      	add	sp, #8
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	20000378 	.word	0x20000378

08006334 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8006338:	4b02      	ldr	r3, [pc, #8]	; (8006344 <SpiritRadioGetXtalFrequency+0x10>)
 800633a:	681b      	ldr	r3, [r3, #0]
}
 800633c:	0018      	movs	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	20000344 	.word	0x20000344

08006348 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <SpiritRadioSetXtalFrequency+0x18>)
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b002      	add	sp, #8
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	20000344 	.word	0x20000344

08006364 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8006364:	b590      	push	{r4, r7, lr}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 800636c:	240c      	movs	r4, #12
 800636e:	193a      	adds	r2, r7, r4
 8006370:	193b      	adds	r3, r7, r4
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	1c18      	adds	r0, r3, #0
 8006378:	f000 f832 	bl	80063e0 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 800637c:	193b      	adds	r3, r7, r4
 800637e:	001a      	movs	r2, r3
 8006380:	2102      	movs	r1, #2
 8006382:	2053      	movs	r0, #83	; 0x53
 8006384:	f000 ff60 	bl	8007248 <RadioSpiWriteRegisters>
 8006388:	1c03      	adds	r3, r0, #0
 800638a:	1c1a      	adds	r2, r3, #0
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <SpiritTimerSetRxTimeoutMs+0x40>)
 800638e:	b212      	sxth	r2, r2
 8006390:	1c11      	adds	r1, r2, #0
 8006392:	7019      	strb	r1, [r3, #0]
 8006394:	0412      	lsls	r2, r2, #16
 8006396:	0e12      	lsrs	r2, r2, #24
 8006398:	705a      	strb	r2, [r3, #1]

}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	b005      	add	sp, #20
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	20000378 	.word	0x20000378

080063a8 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	0002      	movs	r2, r0
 80063b0:	1dfb      	adds	r3, r7, #7
 80063b2:	701a      	strb	r2, [r3, #0]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 80063b4:	1dfb      	adds	r3, r7, #7
 80063b6:	001a      	movs	r2, r3
 80063b8:	2101      	movs	r1, #1
 80063ba:	2054      	movs	r0, #84	; 0x54
 80063bc:	f000 ff44 	bl	8007248 <RadioSpiWriteRegisters>
 80063c0:	1c03      	adds	r3, r0, #0
 80063c2:	1c1a      	adds	r2, r3, #0
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <SpiritTimerSetRxTimeoutCounter+0x34>)
 80063c6:	b212      	sxth	r2, r2
 80063c8:	1c11      	adds	r1, r2, #0
 80063ca:	7019      	strb	r1, [r3, #0]
 80063cc:	0412      	lsls	r2, r2, #16
 80063ce:	0e12      	lsrs	r2, r2, #24
 80063d0:	705a      	strb	r2, [r3, #1]

}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b002      	add	sp, #8
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	20000378 	.word	0x20000378

080063e0 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 80063e0:	b590      	push	{r4, r7, lr}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 80063ec:	f7ff ffa2 	bl	8006334 <SpiritRadioGetXtalFrequency>
 80063f0:	0003      	movs	r3, r0
 80063f2:	61fb      	str	r3, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4aac      	ldr	r2, [pc, #688]	; (80066a8 <SpiritTimerComputeRxTimeoutValues+0x2c8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d902      	bls.n	8006402 <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8006402:	69f8      	ldr	r0, [r7, #28]
 8006404:	f7fa ff76 	bl	80012f4 <__aeabi_ui2f>
 8006408:	1c03      	adds	r3, r0, #0
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	1c18      	adds	r0, r3, #0
 800640e:	f7fa fc11 	bl	8000c34 <__aeabi_fmul>
 8006412:	1c03      	adds	r3, r0, #0
 8006414:	49a5      	ldr	r1, [pc, #660]	; (80066ac <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 8006416:	1c18      	adds	r0, r3, #0
 8006418:	f7fa fa34 	bl	8000884 <__aeabi_fdiv>
 800641c:	1c03      	adds	r3, r0, #0
 800641e:	1c18      	adds	r0, r3, #0
 8006420:	f7fa f860 	bl	80004e4 <__aeabi_f2uiz>
 8006424:	0003      	movs	r3, r0
 8006426:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	4aa1      	ldr	r2, [pc, #644]	; (80066b0 <SpiritTimerComputeRxTimeoutValues+0x2d0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d906      	bls.n	800643e <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	22ff      	movs	r2, #255	; 0xff
 8006434:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	22ff      	movs	r2, #255	; 0xff
 800643a:	701a      	strb	r2, [r3, #0]
    return;
 800643c:	e131      	b.n	80066a2 <SpiritTimerComputeRxTimeoutValues+0x2c2>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	21ff      	movs	r1, #255	; 0xff
 8006442:	0018      	movs	r0, r3
 8006444:	f7f9 fe60 	bl	8000108 <__udivsi3>
 8006448:	0003      	movs	r3, r0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	3302      	adds	r3, #2
 800644e:	b2da      	uxtb	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	0019      	movs	r1, r3
 800645a:	69b8      	ldr	r0, [r7, #24]
 800645c:	f7f9 fe54 	bl	8000108 <__udivsi3>
 8006460:	0003      	movs	r3, r0
 8006462:	b2da      	uxtb	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	0018      	movs	r0, r3
 800646e:	f7fa ff41 	bl	80012f4 <__aeabi_ui2f>
 8006472:	1c04      	adds	r4, r0, #0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	0018      	movs	r0, r3
 800647a:	f7fa fef1 	bl	8001260 <__aeabi_i2f>
 800647e:	1c03      	adds	r3, r0, #0
 8006480:	1c19      	adds	r1, r3, #0
 8006482:	1c20      	adds	r0, r4, #0
 8006484:	f7fa fbd6 	bl	8000c34 <__aeabi_fmul>
 8006488:	1c03      	adds	r3, r0, #0
 800648a:	4988      	ldr	r1, [pc, #544]	; (80066ac <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 800648c:	1c18      	adds	r0, r3, #0
 800648e:	f7fa fbd1 	bl	8000c34 <__aeabi_fmul>
 8006492:	1c03      	adds	r3, r0, #0
 8006494:	1c1c      	adds	r4, r3, #0
 8006496:	69f8      	ldr	r0, [r7, #28]
 8006498:	f7fa ff2c 	bl	80012f4 <__aeabi_ui2f>
 800649c:	1c03      	adds	r3, r0, #0
 800649e:	1c19      	adds	r1, r3, #0
 80064a0:	1c20      	adds	r0, r4, #0
 80064a2:	f7fa f9ef 	bl	8000884 <__aeabi_fdiv>
 80064a6:	1c03      	adds	r3, r0, #0
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	1c18      	adds	r0, r3, #0
 80064ac:	f7fa fcf4 	bl	8000e98 <__aeabi_fsub>
 80064b0:	1c03      	adds	r3, r0, #0
 80064b2:	2100      	movs	r1, #0
 80064b4:	1c18      	adds	r0, r3, #0
 80064b6:	f7fa f801 	bl	80004bc <__aeabi_fcmpgt>
 80064ba:	1e03      	subs	r3, r0, #0
 80064bc:	d025      	beq.n	800650a <SpiritTimerComputeRxTimeoutValues+0x12a>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	0018      	movs	r0, r3
 80064c4:	f7fa ff16 	bl	80012f4 <__aeabi_ui2f>
 80064c8:	1c04      	adds	r4, r0, #0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f7fa fec6 	bl	8001260 <__aeabi_i2f>
 80064d4:	1c03      	adds	r3, r0, #0
 80064d6:	1c19      	adds	r1, r3, #0
 80064d8:	1c20      	adds	r0, r4, #0
 80064da:	f7fa fbab 	bl	8000c34 <__aeabi_fmul>
 80064de:	1c03      	adds	r3, r0, #0
 80064e0:	4972      	ldr	r1, [pc, #456]	; (80066ac <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 80064e2:	1c18      	adds	r0, r3, #0
 80064e4:	f7fa fba6 	bl	8000c34 <__aeabi_fmul>
 80064e8:	1c03      	adds	r3, r0, #0
 80064ea:	1c1c      	adds	r4, r3, #0
 80064ec:	69f8      	ldr	r0, [r7, #28]
 80064ee:	f7fa ff01 	bl	80012f4 <__aeabi_ui2f>
 80064f2:	1c03      	adds	r3, r0, #0
 80064f4:	1c19      	adds	r1, r3, #0
 80064f6:	1c20      	adds	r0, r4, #0
 80064f8:	f7fa f9c4 	bl	8000884 <__aeabi_fdiv>
 80064fc:	1c03      	adds	r3, r0, #0
 80064fe:	68f9      	ldr	r1, [r7, #12]
 8006500:	1c18      	adds	r0, r3, #0
 8006502:	f7fa fcc9 	bl	8000e98 <__aeabi_fsub>
 8006506:	1c03      	adds	r3, r0, #0
 8006508:	e028      	b.n	800655c <SpiritTimerComputeRxTimeoutValues+0x17c>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	0018      	movs	r0, r3
 8006510:	f7fa fef0 	bl	80012f4 <__aeabi_ui2f>
 8006514:	1c04      	adds	r4, r0, #0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	0018      	movs	r0, r3
 800651c:	f7fa fea0 	bl	8001260 <__aeabi_i2f>
 8006520:	1c03      	adds	r3, r0, #0
 8006522:	1c19      	adds	r1, r3, #0
 8006524:	1c20      	adds	r0, r4, #0
 8006526:	f7fa fb85 	bl	8000c34 <__aeabi_fmul>
 800652a:	1c03      	adds	r3, r0, #0
 800652c:	495f      	ldr	r1, [pc, #380]	; (80066ac <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 800652e:	1c18      	adds	r0, r3, #0
 8006530:	f7fa fb80 	bl	8000c34 <__aeabi_fmul>
 8006534:	1c03      	adds	r3, r0, #0
 8006536:	1c1c      	adds	r4, r3, #0
 8006538:	69f8      	ldr	r0, [r7, #28]
 800653a:	f7fa fedb 	bl	80012f4 <__aeabi_ui2f>
 800653e:	1c03      	adds	r3, r0, #0
 8006540:	1c19      	adds	r1, r3, #0
 8006542:	1c20      	adds	r0, r4, #0
 8006544:	f7fa f99e 	bl	8000884 <__aeabi_fdiv>
 8006548:	1c03      	adds	r3, r0, #0
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	1c18      	adds	r0, r3, #0
 800654e:	f7fa fca3 	bl	8000e98 <__aeabi_fsub>
 8006552:	1c03      	adds	r3, r0, #0
 8006554:	1c1a      	adds	r2, r3, #0
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	061b      	lsls	r3, r3, #24
 800655a:	4053      	eors	r3, r2
 800655c:	617b      	str	r3, [r7, #20]
  
  if((*pcCounter)<=254)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2bff      	cmp	r3, #255	; 0xff
 8006564:	d100      	bne.n	8006568 <SpiritTimerComputeRxTimeoutValues+0x188>
 8006566:	e088      	b.n	800667a <SpiritTimerComputeRxTimeoutValues+0x29a>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	0018      	movs	r0, r3
 8006570:	f7fa fe76 	bl	8001260 <__aeabi_i2f>
 8006574:	1c04      	adds	r4, r0, #0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	0018      	movs	r0, r3
 800657c:	f7fa fe70 	bl	8001260 <__aeabi_i2f>
 8006580:	1c03      	adds	r3, r0, #0
 8006582:	1c19      	adds	r1, r3, #0
 8006584:	1c20      	adds	r0, r4, #0
 8006586:	f7fa fb55 	bl	8000c34 <__aeabi_fmul>
 800658a:	1c03      	adds	r3, r0, #0
 800658c:	4947      	ldr	r1, [pc, #284]	; (80066ac <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 800658e:	1c18      	adds	r0, r3, #0
 8006590:	f7fa fb50 	bl	8000c34 <__aeabi_fmul>
 8006594:	1c03      	adds	r3, r0, #0
 8006596:	1c1c      	adds	r4, r3, #0
 8006598:	69f8      	ldr	r0, [r7, #28]
 800659a:	f7fa feab 	bl	80012f4 <__aeabi_ui2f>
 800659e:	1c03      	adds	r3, r0, #0
 80065a0:	1c19      	adds	r1, r3, #0
 80065a2:	1c20      	adds	r0, r4, #0
 80065a4:	f7fa f96e 	bl	8000884 <__aeabi_fdiv>
 80065a8:	1c03      	adds	r3, r0, #0
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	1c18      	adds	r0, r3, #0
 80065ae:	f7fa fc73 	bl	8000e98 <__aeabi_fsub>
 80065b2:	1c03      	adds	r3, r0, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	1c18      	adds	r0, r3, #0
 80065b8:	f7f9 ff80 	bl	80004bc <__aeabi_fcmpgt>
 80065bc:	1e03      	subs	r3, r0, #0
 80065be:	d026      	beq.n	800660e <SpiritTimerComputeRxTimeoutValues+0x22e>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7fa fe4a 	bl	8001260 <__aeabi_i2f>
 80065cc:	1c04      	adds	r4, r0, #0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7fa fe44 	bl	8001260 <__aeabi_i2f>
 80065d8:	1c03      	adds	r3, r0, #0
 80065da:	1c19      	adds	r1, r3, #0
 80065dc:	1c20      	adds	r0, r4, #0
 80065de:	f7fa fb29 	bl	8000c34 <__aeabi_fmul>
 80065e2:	1c03      	adds	r3, r0, #0
 80065e4:	4931      	ldr	r1, [pc, #196]	; (80066ac <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 80065e6:	1c18      	adds	r0, r3, #0
 80065e8:	f7fa fb24 	bl	8000c34 <__aeabi_fmul>
 80065ec:	1c03      	adds	r3, r0, #0
 80065ee:	1c1c      	adds	r4, r3, #0
 80065f0:	69f8      	ldr	r0, [r7, #28]
 80065f2:	f7fa fe7f 	bl	80012f4 <__aeabi_ui2f>
 80065f6:	1c03      	adds	r3, r0, #0
 80065f8:	1c19      	adds	r1, r3, #0
 80065fa:	1c20      	adds	r0, r4, #0
 80065fc:	f7fa f942 	bl	8000884 <__aeabi_fdiv>
 8006600:	1c03      	adds	r3, r0, #0
 8006602:	68f9      	ldr	r1, [r7, #12]
 8006604:	1c18      	adds	r0, r3, #0
 8006606:	f7fa fc47 	bl	8000e98 <__aeabi_fsub>
 800660a:	1c03      	adds	r3, r0, #0
 800660c:	e029      	b.n	8006662 <SpiritTimerComputeRxTimeoutValues+0x282>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	0018      	movs	r0, r3
 8006616:	f7fa fe23 	bl	8001260 <__aeabi_i2f>
 800661a:	1c04      	adds	r4, r0, #0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	0018      	movs	r0, r3
 8006622:	f7fa fe1d 	bl	8001260 <__aeabi_i2f>
 8006626:	1c03      	adds	r3, r0, #0
 8006628:	1c19      	adds	r1, r3, #0
 800662a:	1c20      	adds	r0, r4, #0
 800662c:	f7fa fb02 	bl	8000c34 <__aeabi_fmul>
 8006630:	1c03      	adds	r3, r0, #0
 8006632:	491e      	ldr	r1, [pc, #120]	; (80066ac <SpiritTimerComputeRxTimeoutValues+0x2cc>)
 8006634:	1c18      	adds	r0, r3, #0
 8006636:	f7fa fafd 	bl	8000c34 <__aeabi_fmul>
 800663a:	1c03      	adds	r3, r0, #0
 800663c:	1c1c      	adds	r4, r3, #0
 800663e:	69f8      	ldr	r0, [r7, #28]
 8006640:	f7fa fe58 	bl	80012f4 <__aeabi_ui2f>
 8006644:	1c03      	adds	r3, r0, #0
 8006646:	1c19      	adds	r1, r3, #0
 8006648:	1c20      	adds	r0, r4, #0
 800664a:	f7fa f91b 	bl	8000884 <__aeabi_fdiv>
 800664e:	1c03      	adds	r3, r0, #0
 8006650:	68f9      	ldr	r1, [r7, #12]
 8006652:	1c18      	adds	r0, r3, #0
 8006654:	f7fa fc20 	bl	8000e98 <__aeabi_fsub>
 8006658:	1c03      	adds	r3, r0, #0
 800665a:	1c1a      	adds	r2, r3, #0
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	4053      	eors	r3, r2
 8006662:	6979      	ldr	r1, [r7, #20]
 8006664:	1c18      	adds	r0, r3, #0
 8006666:	f7f9 ff15 	bl	8000494 <__aeabi_fcmplt>
 800666a:	1e03      	subs	r3, r0, #0
 800666c:	d005      	beq.n	800667a <SpiritTimerComputeRxTimeoutValues+0x29a>
      (*pcCounter)=(*pcCounter)+1;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	b2da      	uxtb	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	3b01      	subs	r3, #1
 8006680:	b2da      	uxtb	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d906      	bls.n	800669c <SpiritTimerComputeRxTimeoutValues+0x2bc>
    (*pcCounter)--;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	3b01      	subs	r3, #1
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e002      	b.n	80066a2 <SpiritTimerComputeRxTimeoutValues+0x2c2>
  else
    (*pcCounter)=1;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2201      	movs	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
}
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b009      	add	sp, #36	; 0x24
 80066a6:	bd90      	pop	{r4, r7, pc}
 80066a8:	01c9c380 	.word	0x01c9c380
 80066ac:	4993b480 	.word	0x4993b480
 80066b0:	0000fd01 	.word	0x0000fd01

080066b4 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80066b4:	b590      	push	{r4, r7, lr}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	0002      	movs	r2, r0
 80066bc:	1dfb      	adds	r3, r7, #7
 80066be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80066c0:	240c      	movs	r4, #12
 80066c2:	193b      	adds	r3, r7, r4
 80066c4:	001a      	movs	r2, r3
 80066c6:	2102      	movs	r1, #2
 80066c8:	204f      	movs	r0, #79	; 0x4f
 80066ca:	f000 fe5f 	bl	800738c <RadioSpiReadRegisters>
 80066ce:	1c03      	adds	r3, r0, #0
 80066d0:	1c1a      	adds	r2, r3, #0
 80066d2:	4b22      	ldr	r3, [pc, #136]	; (800675c <SpiritTimerSetRxTimeoutStopCondition+0xa8>)
 80066d4:	b212      	sxth	r2, r2
 80066d6:	1c11      	adds	r1, r2, #0
 80066d8:	7019      	strb	r1, [r3, #0]
 80066da:	0412      	lsls	r2, r2, #16
 80066dc:	0e12      	lsrs	r2, r2, #24
 80066de:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 80066e0:	0020      	movs	r0, r4
 80066e2:	183b      	adds	r3, r7, r0
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2240      	movs	r2, #64	; 0x40
 80066e8:	4393      	bics	r3, r2
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	183b      	adds	r3, r7, r0
 80066ee:	701a      	strb	r2, [r3, #0]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 80066f0:	183b      	adds	r3, r7, r0
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b25a      	sxtb	r2, r3
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	2140      	movs	r1, #64	; 0x40
 8006700:	400b      	ands	r3, r1
 8006702:	b25b      	sxtb	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b25b      	sxtb	r3, r3
 8006708:	b2da      	uxtb	r2, r3
 800670a:	0001      	movs	r1, r0
 800670c:	187b      	adds	r3, r7, r1
 800670e:	701a      	strb	r2, [r3, #0]

  tempRegValue[1] &= 0x1F;
 8006710:	187b      	adds	r3, r7, r1
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	221f      	movs	r2, #31
 8006716:	4013      	ands	r3, r2
 8006718:	b2da      	uxtb	r2, r3
 800671a:	187b      	adds	r3, r7, r1
 800671c:	705a      	strb	r2, [r3, #1]
  tempRegValue[1] |= (xStopCondition << 5);
 800671e:	187b      	adds	r3, r7, r1
 8006720:	785b      	ldrb	r3, [r3, #1]
 8006722:	b25a      	sxtb	r2, r3
 8006724:	1dfb      	adds	r3, r7, #7
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	015b      	lsls	r3, r3, #5
 800672a:	b25b      	sxtb	r3, r3
 800672c:	4313      	orrs	r3, r2
 800672e:	b25b      	sxtb	r3, r3
 8006730:	b2da      	uxtb	r2, r3
 8006732:	187b      	adds	r3, r7, r1
 8006734:	705a      	strb	r2, [r3, #1]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8006736:	187b      	adds	r3, r7, r1
 8006738:	001a      	movs	r2, r3
 800673a:	2102      	movs	r1, #2
 800673c:	204f      	movs	r0, #79	; 0x4f
 800673e:	f000 fd83 	bl	8007248 <RadioSpiWriteRegisters>
 8006742:	1c03      	adds	r3, r0, #0
 8006744:	1c1a      	adds	r2, r3, #0
 8006746:	4b05      	ldr	r3, [pc, #20]	; (800675c <SpiritTimerSetRxTimeoutStopCondition+0xa8>)
 8006748:	b212      	sxth	r2, r2
 800674a:	1c11      	adds	r1, r2, #0
 800674c:	7019      	strb	r1, [r3, #0]
 800674e:	0412      	lsls	r2, r2, #16
 8006750:	0e12      	lsrs	r2, r2, #24
 8006752:	705a      	strb	r2, [r3, #1]

}
 8006754:	46c0      	nop			; (mov r8, r8)
 8006756:	46bd      	mov	sp, r7
 8006758:	b005      	add	sp, #20
 800675a:	bd90      	pop	{r4, r7, pc}
 800675c:	20000378 	.word	0x20000378

08006760 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8006766:	1d3b      	adds	r3, r7, #4
 8006768:	001a      	movs	r2, r3
 800676a:	2102      	movs	r1, #2
 800676c:	20c0      	movs	r0, #192	; 0xc0
 800676e:	f000 fe0d 	bl	800738c <RadioSpiReadRegisters>
 8006772:	1c03      	adds	r3, r0, #0
 8006774:	1c1a      	adds	r2, r3, #0
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <SpiritRefreshStatus+0x4c>)
 8006778:	b212      	sxth	r2, r2
 800677a:	1c11      	adds	r1, r2, #0
 800677c:	7019      	strb	r1, [r3, #0]
 800677e:	0412      	lsls	r2, r2, #16
 8006780:	0e12      	lsrs	r2, r2, #24
 8006782:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <SpiritRefreshStatus+0x4c>)
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	1d3b      	adds	r3, r7, #4
 800678a:	785b      	ldrb	r3, [r3, #1]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 800678c:	429a      	cmp	r2, r3
 800678e:	d1ea      	bne.n	8006766 <SpiritRefreshStatus+0x6>
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <SpiritRefreshStatus+0x50>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	001a      	movs	r2, r3
 8006796:	230f      	movs	r3, #15
 8006798:	4013      	ands	r3, r2
 800679a:	1d3a      	adds	r2, r7, #4
 800679c:	7812      	ldrb	r2, [r2, #0]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800679e:	4293      	cmp	r3, r2
 80067a0:	d1e1      	bne.n	8006766 <SpiritRefreshStatus+0x6>

}
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b002      	add	sp, #8
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	20000378 	.word	0x20000378
 80067b0:	20000379 	.word	0x20000379

080067b4 <Spirit1InterfaceInit>:
* @brief  Read the status register.
* @param  None
* @retval Status
*/
void Spirit1InterfaceInit(void)
{ 
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* Initialize the SDN pin micro side */
  RadioGpioInit(RADIO_GPIO_SDN,RADIO_MODE_GPIO_OUT);
 80067b8:	2102      	movs	r1, #2
 80067ba:	2004      	movs	r0, #4
 80067bc:	f000 fab4 	bl	8006d28 <RadioGpioInit>

  SpiritSpiInit();
 80067c0:	f000 fc3a 	bl	8007038 <RadioSpiInit>
#if defined(SPIRIT1_HAS_EEPROM)
  EepromSpiInitialization();
#endif
     
  /* Board management */   
  SpiritEnterShutdown(); 
 80067c4:	f000 fba2 	bl	8006f0c <RadioEnterShutdown>
  SpiritExitShutdown();   
 80067c8:	f000 fbaa 	bl	8006f20 <RadioExitShutdown>
    
  SpiritManagementIdentificationRFBoard();
 80067cc:	f000 f816 	bl	80067fc <SpiritManagementIdentificationRFBoard>
    
  /* Initialize the signals to drive the range extender application board */
  SpiritManagementRangeExtInit(); 
 80067d0:	f000 f83c 	bl	800684c <SpiritManagementRangeExtInit>
  
  /* Micro EXTI config */      
  RadioGpioInit(RADIO_GPIO_3,RADIO_MODE_EXTI_IN);
 80067d4:	2101      	movs	r1, #1
 80067d6:	2003      	movs	r0, #3
 80067d8:	f000 faa6 	bl	8006d28 <RadioGpioInit>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,DISABLE); 
 80067dc:	2300      	movs	r3, #0
 80067de:	2204      	movs	r2, #4
 80067e0:	2104      	movs	r1, #4
 80067e2:	2003      	movs	r0, #3
 80067e4:	f000 fb38 	bl	8006e58 <RadioGpioInterruptCmd>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,ENABLE);
 80067e8:	2301      	movs	r3, #1
 80067ea:	2204      	movs	r2, #4
 80067ec:	2104      	movs	r1, #4
 80067ee:	2003      	movs	r0, #3
 80067f0:	f000 fb32 	bl	8006e58 <RadioGpioInterruptCmd>
}
 80067f4:	46c0      	nop			; (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <SpiritManagementIdentificationRFBoard>:
* @brief  Identifies the SPIRIT1 Xtal frequency and version.
* @param  None
* @retval Status
*/
void SpiritManagementIdentificationRFBoard(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8006802:	1dfb      	adds	r3, r7, #7
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e006      	b.n	8006818 <SpiritManagementIdentificationRFBoard+0x1c>
 800680a:	1dfb      	adds	r3, r7, #7
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	3301      	adds	r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	1dfb      	adds	r3, r7, #7
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	1dfb      	adds	r3, r7, #7
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2bff      	cmp	r3, #255	; 0xff
 8006820:	d1f3      	bne.n	800680a <SpiritManagementIdentificationRFBoard+0xe>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8006822:	f7ff ff9d 	bl	8006760 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <SpiritManagementIdentificationRFBoard+0x48>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	061b      	lsls	r3, r3, #24
 800682c:	0e5b      	lsrs	r3, r3, #25
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b03      	cmp	r3, #3
 8006832:	d1e6      	bne.n	8006802 <SpiritManagementIdentificationRFBoard+0x6>

    SpiritRadioSetXtalFrequency(XTAL_FREQUENCY);        
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <SpiritManagementIdentificationRFBoard+0x4c>)
 8006836:	0018      	movs	r0, r3
 8006838:	f7ff fd86 	bl	8006348 <SpiritRadioSetXtalFrequency>
    //SpiritGeneralSetSpiritVersion(SPIRIT_VERSION); 
}
 800683c:	46c0      	nop			; (mov r8, r8)
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000378 	.word	0x20000378
 8006848:	02faf080 	.word	0x02faf080

0800684c <SpiritManagementRangeExtInit>:
/**
* @defgroup RANGE_EXT_MANAGEMENT_FUNCTIONS              SDK SPIRIT Management Range Extender Functions
* @{
*/
void SpiritManagementRangeExtInit(void)
{
 800684c:	b5b0      	push	{r4, r5, r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
  RangeExtType range_type = SpiritManagementGetRangeExtender();
 8006852:	251f      	movs	r5, #31
 8006854:	197c      	adds	r4, r7, r5
 8006856:	f000 f869 	bl	800692c <SpiritManagementGetRangeExtender>
 800685a:	0003      	movs	r3, r0
 800685c:	7023      	strb	r3, [r4, #0]
  
  if(range_type==RANGE_EXT_SKYWORKS_169) {
 800685e:	197b      	adds	r3, r7, r5
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d12d      	bne.n	80068c2 <SpiritManagementRangeExtInit+0x76>
    /* TCXO optimization power consumption */
    SpiritGeneralSetExtRef(MODE_EXT_XIN);
 8006866:	2001      	movs	r0, #1
 8006868:	f7fd faa0 	bl	8003dac <SpiritGeneralSetExtRef>
    uint8_t tmp = 0x01; SpiritSpiWriteRegisters(0xB6,1,&tmp);
 800686c:	1dfb      	adds	r3, r7, #7
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	1dfb      	adds	r3, r7, #7
 8006874:	001a      	movs	r2, r3
 8006876:	2101      	movs	r1, #1
 8006878:	20b6      	movs	r0, #182	; 0xb6
 800687a:	f000 fce5 	bl	8007248 <RadioSpiWriteRegisters>
    
    /* CSD control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 800687e:	2008      	movs	r0, #8
 8006880:	183b      	adds	r3, r7, r0
 8006882:	4a25      	ldr	r2, [pc, #148]	; (8006918 <SpiritManagementRangeExtInit+0xcc>)
 8006884:	8811      	ldrh	r1, [r2, #0]
 8006886:	8019      	strh	r1, [r3, #0]
 8006888:	7892      	ldrb	r2, [r2, #2]
 800688a:	709a      	strb	r2, [r3, #2]
 800688c:	183b      	adds	r3, r7, r0
 800688e:	0018      	movs	r0, r3
 8006890:	f7fd fac4 	bl	8003e1c <SpiritGpioInit>
    
    /* CTX/BYP control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 8006894:	200c      	movs	r0, #12
 8006896:	183b      	adds	r3, r7, r0
 8006898:	4a20      	ldr	r2, [pc, #128]	; (800691c <SpiritManagementRangeExtInit+0xd0>)
 800689a:	8811      	ldrh	r1, [r2, #0]
 800689c:	8019      	strh	r1, [r3, #0]
 800689e:	7892      	ldrb	r2, [r2, #2]
 80068a0:	709a      	strb	r2, [r3, #2]
 80068a2:	183b      	adds	r3, r7, r0
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7fd fab9 	bl	8003e1c <SpiritGpioInit>
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 80068aa:	2010      	movs	r0, #16
 80068ac:	183b      	adds	r3, r7, r0
 80068ae:	4a1c      	ldr	r2, [pc, #112]	; (8006920 <SpiritManagementRangeExtInit+0xd4>)
 80068b0:	8811      	ldrh	r1, [r2, #0]
 80068b2:	8019      	strh	r1, [r3, #0]
 80068b4:	7892      	ldrb	r2, [r2, #2]
 80068b6:	709a      	strb	r2, [r3, #2]
 80068b8:	183b      	adds	r3, r7, r0
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fd faae 	bl	8003e1c <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
  }
}
 80068c0:	e025      	b.n	800690e <SpiritManagementRangeExtInit+0xc2>
  else if(range_type==RANGE_EXT_SKYWORKS_868) {   
 80068c2:	231f      	movs	r3, #31
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d120      	bne.n	800690e <SpiritManagementRangeExtInit+0xc2>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 80068cc:	2014      	movs	r0, #20
 80068ce:	183b      	adds	r3, r7, r0
 80068d0:	4a11      	ldr	r2, [pc, #68]	; (8006918 <SpiritManagementRangeExtInit+0xcc>)
 80068d2:	8811      	ldrh	r1, [r2, #0]
 80068d4:	8019      	strh	r1, [r3, #0]
 80068d6:	7892      	ldrb	r2, [r2, #2]
 80068d8:	709a      	strb	r2, [r3, #2]
 80068da:	183b      	adds	r3, r7, r0
 80068dc:	0018      	movs	r0, r3
 80068de:	f7fd fa9d 	bl	8003e1c <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 80068e2:	2018      	movs	r0, #24
 80068e4:	183b      	adds	r3, r7, r0
 80068e6:	4a0f      	ldr	r2, [pc, #60]	; (8006924 <SpiritManagementRangeExtInit+0xd8>)
 80068e8:	8811      	ldrh	r1, [r2, #0]
 80068ea:	8019      	strh	r1, [r3, #0]
 80068ec:	7892      	ldrb	r2, [r2, #2]
 80068ee:	709a      	strb	r2, [r3, #2]
 80068f0:	183b      	adds	r3, r7, r0
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fd fa92 	bl	8003e1c <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 80068f8:	201c      	movs	r0, #28
 80068fa:	183b      	adds	r3, r7, r0
 80068fc:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <SpiritManagementRangeExtInit+0xdc>)
 80068fe:	8811      	ldrh	r1, [r2, #0]
 8006900:	8019      	strh	r1, [r3, #0]
 8006902:	7892      	ldrb	r2, [r2, #2]
 8006904:	709a      	strb	r2, [r3, #2]
 8006906:	183b      	adds	r3, r7, r0
 8006908:	0018      	movs	r0, r3
 800690a:	f7fd fa87 	bl	8003e1c <SpiritGpioInit>
}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	46bd      	mov	sp, r7
 8006912:	b008      	add	sp, #32
 8006914:	bdb0      	pop	{r4, r5, r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	08009990 	.word	0x08009990
 800691c:	08009994 	.word	0x08009994
 8006920:	08009998 	.word	0x08009998
 8006924:	0800999c 	.word	0x0800999c
 8006928:	080099a0 	.word	0x080099a0

0800692c <SpiritManagementGetRangeExtender>:
* @brief  returns the spirit1 range extender type
* @param  None
* @retval RangeExtType
*/
RangeExtType SpiritManagementGetRangeExtender(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  return xRangeExtType;
 8006930:	4b02      	ldr	r3, [pc, #8]	; (800693c <SpiritManagementGetRangeExtender+0x10>)
 8006932:	781b      	ldrb	r3, [r3, #0]
}
 8006934:	0018      	movs	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	20000348 	.word	0x20000348

08006940 <Spirit1GpioIrqInit>:
* @brief  this function intializes the spirit1 gpio irq for TX and Rx
* @param  None
* @retval None
*/
void Spirit1GpioIrqInit(SGpioInit *pGpioIRQ)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Spirit IRQ config */
  SpiritGpioInit(pGpioIRQ);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	0018      	movs	r0, r3
 800694c:	f7fd fa66 	bl	8003e1c <SpiritGpioInit>
}
 8006950:	46c0      	nop			; (mov r8, r8)
 8006952:	46bd      	mov	sp, r7
 8006954:	b002      	add	sp, #8
 8006956:	bd80      	pop	{r7, pc}

08006958 <Spirit1RadioInit>:
* @brief  this function used to receive RX packet
* @param  None
* @retval None
*/
void Spirit1RadioInit(SRadioInit *pRadioInit)
{    
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Spirit Radio config */
  SpiritRadioInit(pRadioInit);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe f936 	bl	8004bd4 <SpiritRadioInit>

}
 8006968:	46c0      	nop			; (mov r8, r8)
 800696a:	46bd      	mov	sp, r7
 800696c:	b002      	add	sp, #8
 800696e:	bd80      	pop	{r7, pc}

08006970 <Spirit1SetPower>:
* @brief  this function sets the radio power
* @param  uint8_t cIndex, float fPowerdBm
* @retval None
*/
void Spirit1SetPower(uint8_t cIndex, float fPowerdBm)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	0002      	movs	r2, r0
 8006978:	6039      	str	r1, [r7, #0]
 800697a:	1dfb      	adds	r3, r7, #7
 800697c:	701a      	strb	r2, [r3, #0]
  /* Spirit Radio set power */
  SpiritRadioSetPALeveldBm(cIndex,fPowerdBm);
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	1dfb      	adds	r3, r7, #7
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	1c11      	adds	r1, r2, #0
 8006986:	0018      	movs	r0, r3
 8006988:	f7ff fad4 	bl	8005f34 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(cIndex);
 800698c:	1dfb      	adds	r3, r7, #7
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff fb35 	bl	8006000 <SpiritRadioSetPALevelMaxIndex>
}
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	46bd      	mov	sp, r7
 800699a:	b002      	add	sp, #8
 800699c:	bd80      	pop	{r7, pc}

0800699e <Spirit1PacketConfig>:
* @brief  this function sets the packet configuration according to the protocol used
* @param  None
* @retval None
*/
void Spirit1PacketConfig(void)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	af00      	add	r7, sp, #0
  
  STackProtocolInit();
   
#elif defined(USE_BASIC_PROTOCOL)
  
  BasicProtocolInit();
 80069a2:	f7fc febf 	bl	8003724 <BasicProtocolInit>
  
#endif
}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <Spirit1SetPayloadlength>:
* @brief  this function sets the payload length
* @param  uint8_t length
* @retval None
*/
void Spirit1SetPayloadlength(uint8_t length)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	0002      	movs	r2, r0
 80069b4:	1dfb      	adds	r3, r7, #7
 80069b6:	701a      	strb	r2, [r3, #0]
    /* Payload length config */
  SpiritPktStackSetPayloadLength(length);
  
#elif defined(USE_BASIC_PROTOCOL)
  /* payload length config */
  SpiritPktBasicSetPayloadLength(length);
 80069b8:	1dfb      	adds	r3, r7, #7
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	0018      	movs	r0, r3
 80069c0:	f7fd ff8e 	bl	80048e0 <SpiritPktBasicSetPayloadLength>
#endif
}
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b002      	add	sp, #8
 80069ca:	bd80      	pop	{r7, pc}

080069cc <Spirit1SetDestinationAddress>:
* @brief  this function sets the destination address
* @param  uint8_t adress
* @retval None
*/
void Spirit1SetDestinationAddress(uint8_t address)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	0002      	movs	r2, r0
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	701a      	strb	r2, [r3, #0]
#if defined(USE_STack_PROTOCOL)
  /* Destination address */
  SpiritPktStackSetDestinationAddress(address);
#elif defined(USE_BASIC_PROTOCOL)
  /* destination address */
  SpiritPktBasicSetDestinationAddress(address);
 80069d8:	1dfb      	adds	r3, r7, #7
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	0018      	movs	r0, r3
 80069de:	f7fe f825 	bl	8004a2c <SpiritPktCommonSetDestinationAddress>
#endif
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b002      	add	sp, #8
 80069e8:	bd80      	pop	{r7, pc}

080069ea <Spirit1EnableTxIrq>:
* @brief  this function enables the Tx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableTxIrq(void)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrq(TX_DATA_SENT, S_ENABLE); 
 80069ee:	2101      	movs	r1, #1
 80069f0:	2004      	movs	r0, #4
 80069f2:	f7fd fa65 	bl	8003ec0 <SpiritIrq>
#if defined(USE_STack_LLP)
  SpiritIrq(MAX_RE_TX_REACH, S_ENABLE);
#endif  
}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <Spirit1EnableRxIrq>:
* @brief  this function enables the Rx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableRxIrq(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
    /* Spirit IRQs enable */
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8006a00:	2101      	movs	r1, #1
 8006a02:	2001      	movs	r0, #1
 8006a04:	f7fd fa5c 	bl	8003ec0 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE); 
 8006a08:	2101      	movs	r1, #1
 8006a0a:	2002      	movs	r0, #2
 8006a0c:	f7fd fa58 	bl	8003ec0 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	059b      	lsls	r3, r3, #22
 8006a14:	2101      	movs	r1, #1
 8006a16:	0018      	movs	r0, r3
 8006a18:	f7fd fa52 	bl	8003ec0 <SpiritIrq>
}
 8006a1c:	46c0      	nop			; (mov r8, r8)
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <Spirit1DisableIrq>:
* @brief  this function disable IRQs
* @param  None
* @retval None
*/
void Spirit1DisableIrq(void)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrqDeInit(NULL);
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7fd fa1e 	bl	8003e68 <SpiritIrqDeInit>
}
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <Spirit1SetRxTimeout>:
* @brief  this function set the receive timeout period
* @param  None
* @retval None
*/
void Spirit1SetRxTimeout(float cRxTimeOut)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  if(cRxTimeOut == 0)
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7f9 fd23 	bl	8000488 <__aeabi_fcmpeq>
 8006a42:	1e03      	subs	r3, r0, #0
 8006a44:	d006      	beq.n	8006a54 <Spirit1SetRxTimeout+0x22>
  {
    /* rx timeout config */
    SET_INFINITE_RX_TIMEOUT();
 8006a46:	2000      	movs	r0, #0
 8006a48:	f7ff fcae 	bl	80063a8 <SpiritTimerSetRxTimeoutCounter>
    SpiritTimerSetRxTimeoutStopCondition(ANY_ABOVE_THRESHOLD);
 8006a4c:	200f      	movs	r0, #15
 8006a4e:	f7ff fe31 	bl	80066b4 <SpiritTimerSetRxTimeoutStopCondition>
    /* RX timeout config */
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
    Spirit1EnableSQI();
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
  }
}
 8006a52:	e008      	b.n	8006a66 <Spirit1SetRxTimeout+0x34>
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1c18      	adds	r0, r3, #0
 8006a58:	f7ff fc84 	bl	8006364 <SpiritTimerSetRxTimeoutMs>
    Spirit1EnableSQI();
 8006a5c:	f000 f813 	bl	8006a86 <Spirit1EnableSQI>
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
 8006a60:	2006      	movs	r0, #6
 8006a62:	f7ff fe27 	bl	80066b4 <SpiritTimerSetRxTimeoutStopCondition>
}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b002      	add	sp, #8
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <Spirit1SetRssiTH>:
* @brief  this function sets the RSSI threshold
* @param  int dbmValue
* @retval None
*/
void Spirit1SetRssiTH(int dbmValue)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  SpiritQiSetRssiThresholddBm(dbmValue);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7fe f889 	bl	8004b90 <SpiritQiSetRssiThresholddBm>
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b002      	add	sp, #8
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <Spirit1EnableSQI>:
* @brief  this function enables SQI check
* @param  None
* @retval None
*/
void Spirit1EnableSQI(void)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	af00      	add	r7, sp, #0
  /* enable SQI check */
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7fe f846 	bl	8004b1c <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8006a90:	2001      	movs	r0, #1
 8006a92:	f7fe f801 	bl	8004a98 <SpiritQiSqiCheck>
}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <Spirit1StartRx>:
* @brief  this function starts the RX process
* @param  None
* @retval None
*/
void Spirit1StartRx(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <Spirit1StartRx+0x28>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	0e5b      	lsrs	r3, r3, #25
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b33      	cmp	r3, #51	; 0x33
 8006aac:	d102      	bne.n	8006ab4 <Spirit1StartRx+0x18>
  {
    SpiritCmdStrobeSabort();
 8006aae:	2067      	movs	r0, #103	; 0x67
 8006ab0:	f7fd f8b0 	bl	8003c14 <SpiritCmdStrobeCommand>
  }
  /* RX command */
  SpiritCmdStrobeRx();
 8006ab4:	f7fd fd42 	bl	800453c <SpiritManagementWaCmdStrobeRx>
 8006ab8:	2061      	movs	r0, #97	; 0x61
 8006aba:	f7fd f8ab 	bl	8003c14 <SpiritCmdStrobeCommand>
}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000378 	.word	0x20000378

08006ac8 <Spirit1GetRxPacket>:
* @brief  this function receives the data
* @param  None
* @retval None
*/
void Spirit1GetRxPacket(uint8_t *buffer, uint8_t *cRxData )
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint8_t noofbytes = 0;
 8006ad2:	240f      	movs	r4, #15
 8006ad4:	193b      	adds	r3, r7, r4
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
  /* when rx data ready read the number of received bytes */
  *cRxData=SpiritLinearFifoReadNumElementsRxFifo();
 8006ada:	f7fd fabb 	bl	8004054 <SpiritLinearFifoReadNumElementsRxFifo>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	001a      	movs	r2, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	701a      	strb	r2, [r3, #0]
  noofbytes = *cRxData;
 8006ae6:	193b      	adds	r3, r7, r4
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	7812      	ldrb	r2, [r2, #0]
 8006aec:	701a      	strb	r2, [r3, #0]
    /* read the RX FIFO */
  SpiritSpiReadLinearFifo(noofbytes, buffer);
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	193b      	adds	r3, r7, r4
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	0011      	movs	r1, r2
 8006af6:	0018      	movs	r0, r3
 8006af8:	f000 fe1e 	bl	8007738 <RadioSpiReadFifo>
  
  SpiritCmdStrobeFlushRxFifo();
 8006afc:	2071      	movs	r0, #113	; 0x71
 8006afe:	f7fd f889 	bl	8003c14 <SpiritCmdStrobeCommand>
}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b005      	add	sp, #20
 8006b08:	bd90      	pop	{r4, r7, pc}
	...

08006b0c <Spirit1StartTx>:
* @brief  this function starts the TX process
* @param  None
* @retval None
*/
void Spirit1StartTx(uint8_t *buffer, uint8_t size )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	000a      	movs	r2, r1
 8006b16:	1cfb      	adds	r3, r7, #3
 8006b18:	701a      	strb	r2, [r3, #0]
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8006b1a:	4b17      	ldr	r3, [pc, #92]	; (8006b78 <Spirit1StartTx+0x6c>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	061b      	lsls	r3, r3, #24
 8006b20:	0e5b      	lsrs	r3, r3, #25
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b33      	cmp	r3, #51	; 0x33
 8006b26:	d102      	bne.n	8006b2e <Spirit1StartTx+0x22>
  {
    SpiritCmdStrobeSabort();
 8006b28:	2067      	movs	r0, #103	; 0x67
 8006b2a:	f7fd f873 	bl	8003c14 <SpiritCmdStrobeCommand>
  }
  
#ifdef CSMA_ENABLE
  
    /* Enable CSMA */
    SpiritRadioPersistenRx(S_DISABLE);
 8006b2e:	2000      	movs	r0, #0
 8006b30:	f7ff fb0e 	bl	8006150 <SpiritRadioPersistenRx>
    SpiritRadioCsBlanking(S_DISABLE);
 8006b34:	2000      	movs	r0, #0
 8006b36:	f7ff fad3 	bl	80060e0 <SpiritRadioCsBlanking>

    SpiritCsmaInit(&xCsmaInit);
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <Spirit1StartTx+0x70>)
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f7fd f883 	bl	8003c48 <SpiritCsmaInit>
    SpiritCsma(S_ENABLE);
 8006b42:	2001      	movs	r0, #1
 8006b44:	f7fd f8f0 	bl	8003d28 <SpiritCsma>
    SpiritQiSetRssiThresholddBm(CSMA_RSSI_THRESHOLD);
 8006b48:	235a      	movs	r3, #90	; 0x5a
 8006b4a:	425b      	negs	r3, r3
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7fe f81f 	bl	8004b90 <SpiritQiSetRssiThresholddBm>
    
#endif 
  
  /* fit the TX FIFO */
  SpiritCmdStrobeFlushTxFifo();
 8006b52:	2072      	movs	r0, #114	; 0x72
 8006b54:	f7fd f85e 	bl	8003c14 <SpiritCmdStrobeCommand>
  
  SpiritSpiWriteLinearFifo(size, buffer);
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	1cfb      	adds	r3, r7, #3
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	0011      	movs	r1, r2
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 fd4b 	bl	80075fc <RadioSpiWriteFifo>
  
  /* send the TX command */
  SpiritCmdStrobeTx();
 8006b66:	f7fd fcaf 	bl	80044c8 <SpiritManagementWaCmdStrobeTx>
 8006b6a:	2060      	movs	r0, #96	; 0x60
 8006b6c:	f7fd f852 	bl	8003c14 <SpiritCmdStrobeCommand>
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000378 	.word	0x20000378
 8006b7c:	20000098 	.word	0x20000098

08006b80 <Spirit1ClearIRQ>:
* @brief  this function clear the IRQ status
* @param  None
* @retval None
*/
void Spirit1ClearIRQ(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  SpiritIrqClearStatus();
 8006b84:	f7fd fa4e 	bl	8004024 <SpiritIrqClearStatus>
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	0002      	movs	r2, r0
 8006b98:	1dfb      	adds	r3, r7, #7
 8006b9a:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006b9c:	1dfb      	adds	r3, r7, #7
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <BSP_LED_Init+0x2c>
 8006ba4:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <BSP_LED_Init+0x78>)
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <BSP_LED_Init+0x78>)
 8006baa:	2101      	movs	r1, #1
 8006bac:	430a      	orrs	r2, r1
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bb0:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <BSP_LED_Init+0x78>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	001a      	movs	r2, r3
 8006bc0:	210c      	movs	r1, #12
 8006bc2:	187b      	adds	r3, r7, r1
 8006bc4:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc6:	187b      	adds	r3, r7, r1
 8006bc8:	2201      	movs	r2, #1
 8006bca:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8006bcc:	187b      	adds	r3, r7, r1
 8006bce:	2200      	movs	r2, #0
 8006bd0:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd2:	187b      	adds	r3, r7, r1
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8006bd8:	1dfb      	adds	r3, r7, #7
 8006bda:	781a      	ldrb	r2, [r3, #0]
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <BSP_LED_Init+0x7c>)
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	58d3      	ldr	r3, [r2, r3]
 8006be2:	187a      	adds	r2, r7, r1
 8006be4:	0011      	movs	r1, r2
 8006be6:	0018      	movs	r0, r3
 8006be8:	f001 f804 	bl	8007bf4 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8006bec:	1dfb      	adds	r3, r7, #7
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <BSP_LED_Init+0x7c>)
 8006bf2:	0092      	lsls	r2, r2, #2
 8006bf4:	58d3      	ldr	r3, [r2, r3]
 8006bf6:	2120      	movs	r1, #32
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f001 f970 	bl	8007ee0 <HAL_GPIO_WritePin>
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b008      	add	sp, #32
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	2000019c 	.word	0x2000019c

08006c10 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	0002      	movs	r2, r0
 8006c18:	1dfb      	adds	r3, r7, #7
 8006c1a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8006c1c:	1dfb      	adds	r3, r7, #7
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <BSP_LED_Off+0x28>)
 8006c22:	0092      	lsls	r2, r2, #2
 8006c24:	58d3      	ldr	r3, [r2, r3]
 8006c26:	2120      	movs	r1, #32
 8006c28:	2200      	movs	r2, #0
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f001 f958 	bl	8007ee0 <HAL_GPIO_WritePin>
}
 8006c30:	46c0      	nop			; (mov r8, r8)
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b002      	add	sp, #8
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	2000019c 	.word	0x2000019c

08006c3c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	0002      	movs	r2, r0
 8006c44:	1dfb      	adds	r3, r7, #7
 8006c46:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8006c48:	1dfb      	adds	r3, r7, #7
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <BSP_LED_Toggle+0x28>)
 8006c4e:	0092      	lsls	r2, r2, #2
 8006c50:	58d3      	ldr	r3, [r2, r3]
 8006c52:	2220      	movs	r2, #32
 8006c54:	0011      	movs	r1, r2
 8006c56:	0018      	movs	r0, r3
 8006c58:	f001 f95f 	bl	8007f1a <HAL_GPIO_TogglePin>
}
 8006c5c:	46c0      	nop			; (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b002      	add	sp, #8
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	2000019c 	.word	0x2000019c

08006c68 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	0002      	movs	r2, r0
 8006c70:	1dfb      	adds	r3, r7, #7
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	1dbb      	adds	r3, r7, #6
 8006c76:	1c0a      	adds	r2, r1, #0
 8006c78:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef gpioinitstruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8006c7a:	1dfb      	adds	r3, r7, #7
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <BSP_PB_Init+0x32>
 8006c82:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <BSP_PB_Init+0xb4>)
 8006c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c86:	4b25      	ldr	r3, [pc, #148]	; (8006d1c <BSP_PB_Init+0xb4>)
 8006c88:	2104      	movs	r1, #4
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c8e:	4b23      	ldr	r3, [pc, #140]	; (8006d1c <BSP_PB_Init+0xb4>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	2204      	movs	r2, #4
 8006c94:	4013      	ands	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]

  gpioinitstruct.Pin = BUTTON_PIN[Button];
 8006c9a:	2380      	movs	r3, #128	; 0x80
 8006c9c:	019b      	lsls	r3, r3, #6
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	210c      	movs	r1, #12
 8006ca2:	187b      	adds	r3, r7, r1
 8006ca4:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8006ca6:	187b      	adds	r3, r7, r1
 8006ca8:	2200      	movs	r2, #0
 8006caa:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006cac:	187b      	adds	r3, r7, r1
 8006cae:	2201      	movs	r2, #1
 8006cb0:	60da      	str	r2, [r3, #12]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8006cb2:	1dbb      	adds	r3, r7, #6
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10d      	bne.n	8006cd6 <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8006cba:	210c      	movs	r1, #12
 8006cbc:	187b      	adds	r3, r7, r1
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	605a      	str	r2, [r3, #4]
  
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8006cc2:	1dfb      	adds	r3, r7, #7
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <BSP_PB_Init+0xb8>)
 8006cc8:	0092      	lsls	r2, r2, #2
 8006cca:	58d3      	ldr	r3, [r2, r3]
 8006ccc:	187a      	adds	r2, r7, r1
 8006cce:	0011      	movs	r1, r2
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f000 ff8f 	bl	8007bf4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8006cd6:	1dbb      	adds	r3, r7, #6
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d119      	bne.n	8006d12 <BSP_PB_Init+0xaa>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Mode   = GPIO_MODE_IT_FALLING; 
 8006cde:	210c      	movs	r1, #12
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <BSP_PB_Init+0xbc>)
 8006ce4:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8006ce6:	1dfb      	adds	r3, r7, #7
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <BSP_PB_Init+0xb8>)
 8006cec:	0092      	lsls	r2, r2, #2
 8006cee:	58d3      	ldr	r3, [r2, r3]
 8006cf0:	187a      	adds	r2, r7, r1
 8006cf2:	0011      	movs	r1, r2
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f000 ff7d 	bl	8007bf4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8006cfa:	2307      	movs	r3, #7
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	2200      	movs	r2, #0
 8006d00:	210f      	movs	r1, #15
 8006d02:	0018      	movs	r0, r3
 8006d04:	f000 ff2c 	bl	8007b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8006d08:	2307      	movs	r3, #7
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f000 ff3c 	bl	8007b8a <HAL_NVIC_EnableIRQ>
  }
}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b008      	add	sp, #32
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	200001a0 	.word	0x200001a0
 8006d24:	10210000 	.word	0x10210000

08006d28 <RadioGpioInit>:
*         @arg RADIO_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
*         generation capability.
* @retval None.
*/
void RadioGpioInit(RadioGpioPin xGpio, RadioGpioMode xGpioMode)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	0002      	movs	r2, r0
 8006d30:	1dfb      	adds	r3, r7, #7
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	1dbb      	adds	r3, r7, #6
 8006d36:	1c0a      	adds	r2, r1, #0
 8006d38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RADIO_GPIO_PIN(xGpio));
  assert_param(IS_RADIO_GPIO_MODE(xGpioMode));
  
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8006d3a:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <RadioGpioInit+0x118>)
 8006d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3e:	4b40      	ldr	r3, [pc, #256]	; (8006e40 <RadioGpioInit+0x118>)
 8006d40:	2101      	movs	r1, #1
 8006d42:	430a      	orrs	r2, r1
 8006d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d46:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <RadioGpioInit+0x118>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	693b      	ldr	r3, [r7, #16]
  __GPIOC_CLK_ENABLE();
 8006d52:	4b3b      	ldr	r3, [pc, #236]	; (8006e40 <RadioGpioInit+0x118>)
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	4b3a      	ldr	r3, [pc, #232]	; (8006e40 <RadioGpioInit+0x118>)
 8006d58:	2104      	movs	r1, #4
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d5e:	4b38      	ldr	r3, [pc, #224]	; (8006e40 <RadioGpioInit+0x118>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	2204      	movs	r2, #4
 8006d64:	4013      	ands	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 8006d6a:	4b35      	ldr	r3, [pc, #212]	; (8006e40 <RadioGpioInit+0x118>)
 8006d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6e:	4b34      	ldr	r3, [pc, #208]	; (8006e40 <RadioGpioInit+0x118>)
 8006d70:	2102      	movs	r1, #2
 8006d72:	430a      	orrs	r2, r1
 8006d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d76:	4b32      	ldr	r3, [pc, #200]	; (8006e40 <RadioGpioInit+0x118>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	68bb      	ldr	r3, [r7, #8]
  
  /* Configures MCU GPIO */
  if (xGpioMode == RADIO_MODE_GPIO_OUT)
 8006d82:	1dbb      	adds	r3, r7, #6
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d104      	bne.n	8006d94 <RadioGpioInit+0x6c>
  {
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d8a:	2314      	movs	r3, #20
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	2201      	movs	r2, #1
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	e003      	b.n	8006d9c <RadioGpioInit+0x74>
  }
  else
  {
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d94:	2314      	movs	r3, #20
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
  }
  
  GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8006d9c:	1dfb      	adds	r3, r7, #7
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	4b28      	ldr	r3, [pc, #160]	; (8006e44 <RadioGpioInit+0x11c>)
 8006da2:	0052      	lsls	r2, r2, #1
 8006da4:	5ad3      	ldrh	r3, [r2, r3]
 8006da6:	001a      	movs	r2, r3
 8006da8:	2114      	movs	r1, #20
 8006daa:	187b      	adds	r3, r7, r1
 8006dac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 8006dae:	1dfb      	adds	r3, r7, #7
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <RadioGpioInit+0x120>)
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	58d2      	ldr	r2, [r2, r3]
 8006db8:	187b      	adds	r3, r7, r1
 8006dba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8006dbc:	1dfb      	adds	r3, r7, #7
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <RadioGpioInit+0x124>)
 8006dc2:	0092      	lsls	r2, r2, #2
 8006dc4:	58d2      	ldr	r2, [r2, r3]
 8006dc6:	187b      	adds	r3, r7, r1
 8006dc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8006dca:	1dfb      	adds	r3, r7, #7
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <RadioGpioInit+0x128>)
 8006dd0:	0092      	lsls	r2, r2, #2
 8006dd2:	58d3      	ldr	r3, [r2, r3]
 8006dd4:	187a      	adds	r2, r7, r1
 8006dd6:	0011      	movs	r1, r2
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f000 ff0b 	bl	8007bf4 <HAL_GPIO_Init>
  
  if (xGpioMode == RADIO_MODE_EXTI_IN)
 8006dde:	1dbb      	adds	r3, r7, #6
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d127      	bne.n	8006e36 <RadioGpioInit+0x10e>
  {
    GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8006de6:	1dfb      	adds	r3, r7, #7
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <RadioGpioInit+0x11c>)
 8006dec:	0052      	lsls	r2, r2, #1
 8006dee:	5ad3      	ldrh	r3, [r2, r3]
 8006df0:	001a      	movs	r2, r3
 8006df2:	2114      	movs	r1, #20
 8006df4:	187b      	adds	r3, r7, r1
 8006df6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 8006df8:	1dfb      	adds	r3, r7, #7
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <RadioGpioInit+0x120>)
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	58d2      	ldr	r2, [r2, r3]
 8006e02:	187b      	adds	r3, r7, r1
 8006e04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8006e06:	1dfb      	adds	r3, r7, #7
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	4b10      	ldr	r3, [pc, #64]	; (8006e4c <RadioGpioInit+0x124>)
 8006e0c:	0092      	lsls	r2, r2, #2
 8006e0e:	58d2      	ldr	r2, [r2, r3]
 8006e10:	187b      	adds	r3, r7, r1
 8006e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Mode = aRADIO_GPIO_EXTI_MODE[xGpio];
 8006e14:	1dfb      	adds	r3, r7, #7
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <RadioGpioInit+0x12c>)
 8006e1a:	0092      	lsls	r2, r2, #2
 8006e1c:	58d2      	ldr	r2, [r2, r3]
 8006e1e:	187b      	adds	r3, r7, r1
 8006e20:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8006e22:	1dfb      	adds	r3, r7, #7
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <RadioGpioInit+0x128>)
 8006e28:	0092      	lsls	r2, r2, #2
 8006e2a:	58d3      	ldr	r3, [r2, r3]
 8006e2c:	187a      	adds	r2, r7, r1
 8006e2e:	0011      	movs	r1, r2
 8006e30:	0018      	movs	r0, r3
 8006e32:	f000 fedf 	bl	8007bf4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    /*  NVIC_SetPriority((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]), 0x02); */
    /*  HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));     */
  } 
}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b00a      	add	sp, #40	; 0x28
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	40021000 	.word	0x40021000
 8006e44:	080099a4 	.word	0x080099a4
 8006e48:	080099c4 	.word	0x080099c4
 8006e4c:	080099b0 	.word	0x080099b0
 8006e50:	200001a8 	.word	0x200001a8
 8006e54:	080099d8 	.word	0x080099d8

08006e58 <RadioGpioInterruptCmd>:
*         @arg ENABLE: Interrupt is enabled
*         @arg DISABLE: Interrupt is disabled
* @retval None.
*/
void RadioGpioInterruptCmd(RadioGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, FunctionalState xNewState)
{
 8006e58:	b5b0      	push	{r4, r5, r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	0005      	movs	r5, r0
 8006e60:	000c      	movs	r4, r1
 8006e62:	0010      	movs	r0, r2
 8006e64:	0019      	movs	r1, r3
 8006e66:	1dfb      	adds	r3, r7, #7
 8006e68:	1c2a      	adds	r2, r5, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	1dbb      	adds	r3, r7, #6
 8006e6e:	1c22      	adds	r2, r4, #0
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	1d7b      	adds	r3, r7, #5
 8006e74:	1c02      	adds	r2, r0, #0
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	1d3b      	adds	r3, r7, #4
 8006e7a:	1c0a      	adds	r2, r1, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriority((IRQn_Type) (aRADIO_GPIO_IRQn[xGpio]), nPreemption, nSubpriority);
 8006e7e:	1dfb      	adds	r3, r7, #7
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <RadioGpioInterruptCmd+0x70>)
 8006e84:	5cd3      	ldrb	r3, [r2, r3]
 8006e86:	b258      	sxtb	r0, r3
 8006e88:	1dbb      	adds	r3, r7, #6
 8006e8a:	7819      	ldrb	r1, [r3, #0]
 8006e8c:	1d7b      	adds	r3, r7, #5
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	001a      	movs	r2, r3
 8006e92:	f000 fe65 	bl	8007b60 <HAL_NVIC_SetPriority>
  if (!xNewState)
 8006e96:	1d3b      	adds	r3, r7, #4
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d108      	bne.n	8006eb0 <RadioGpioInterruptCmd+0x58>
  {
    HAL_NVIC_DisableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio])); 
 8006e9e:	1dfb      	adds	r3, r7, #7
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <RadioGpioInterruptCmd+0x70>)
 8006ea4:	5cd3      	ldrb	r3, [r2, r3]
 8006ea6:	b25b      	sxtb	r3, r3
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f000 fe7e 	bl	8007baa <HAL_NVIC_DisableIRQ>
  }
  else
  {
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
  }
}
 8006eae:	e007      	b.n	8006ec0 <RadioGpioInterruptCmd+0x68>
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
 8006eb0:	1dfb      	adds	r3, r7, #7
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	4a04      	ldr	r2, [pc, #16]	; (8006ec8 <RadioGpioInterruptCmd+0x70>)
 8006eb6:	5cd3      	ldrb	r3, [r2, r3]
 8006eb8:	b25b      	sxtb	r3, r3
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 fe65 	bl	8007b8a <HAL_NVIC_EnableIRQ>
}
 8006ec0:	46c0      	nop			; (mov r8, r8)
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ec8:	080099e8 	.word	0x080099e8

08006ecc <RadioGpioSetLevel>:
* @param  GPIO_PinState Level of the GPIO. This parameter can be:
*         GPIO_PIN_SET or GPIO_PIN_RESET.
* @retval None.
*/
void RadioGpioSetLevel(RadioGpioPin xGpio, GPIO_PinState xState)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	0002      	movs	r2, r0
 8006ed4:	1dfb      	adds	r3, r7, #7
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	1dbb      	adds	r3, r7, #6
 8006eda:	1c0a      	adds	r2, r1, #0
 8006edc:	701a      	strb	r2, [r3, #0]
  /* Sets the GPIO level */
  HAL_GPIO_WritePin(aRADIO_GPIO_PORT[xGpio], aRADIO_GPIO_PIN[xGpio], xState); 
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <RadioGpioSetLevel+0x38>)
 8006ee4:	0092      	lsls	r2, r2, #2
 8006ee6:	58d0      	ldr	r0, [r2, r3]
 8006ee8:	1dfb      	adds	r3, r7, #7
 8006eea:	781a      	ldrb	r2, [r3, #0]
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <RadioGpioSetLevel+0x3c>)
 8006eee:	0052      	lsls	r2, r2, #1
 8006ef0:	5ad1      	ldrh	r1, [r2, r3]
 8006ef2:	1dbb      	adds	r3, r7, #6
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	f000 fff2 	bl	8007ee0 <HAL_GPIO_WritePin>
}
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b002      	add	sp, #8
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	200001a8 	.word	0x200001a8
 8006f08:	080099a4 	.word	0x080099a4

08006f0c <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  /* Check the parameters */ 
  RadioGpioSetLevel(RADIO_GPIO_SDN, GPIO_PIN_SET);
 8006f10:	2101      	movs	r1, #1
 8006f12:	2004      	movs	r0, #4
 8006f14:	f7ff ffda 	bl	8006ecc <RadioGpioSetLevel>
}
 8006f18:	46c0      	nop			; (mov r8, r8)
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  RadioGpioSetLevel(RADIO_GPIO_SDN, GPIO_PIN_RESET);
 8006f26:	2100      	movs	r1, #0
 8006f28:	2004      	movs	r0, #4
 8006f2a:	f7ff ffcf 	bl	8006ecc <RadioGpioSetLevel>
  
  /* Delay to allow the circuit POR, about 700 us */
  for (volatile uint32_t Index = 0; Index < POR_TIME; Index++);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e002      	b.n	8006f3a <RadioExitShutdown+0x1a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3301      	adds	r3, #1
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a03      	ldr	r2, [pc, #12]	; (8006f4c <RadioExitShutdown+0x2c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d9f8      	bls.n	8006f34 <RadioExitShutdown+0x14>
}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	46bd      	mov	sp, r7
 8006f46:	b002      	add	sp, #8
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	00001dff 	.word	0x00001dff

08006f50 <RadioShieldLedInit>:
*   This parameter can be one of the following values:
* @arg    Led_t Led
* @retval None
*/
void RadioShieldLedInit(Led_t Led)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	0002      	movs	r2, r0
 8006f58:	1dfb      	adds	r3, r7, #7
 8006f5a:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  RADIO_SHIELD_LED_GPIO_CLK_ENABLE();
 8006f5c:	4b13      	ldr	r3, [pc, #76]	; (8006fac <RadioShieldLedInit+0x5c>)
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4b12      	ldr	r3, [pc, #72]	; (8006fac <RadioShieldLedInit+0x5c>)
 8006f62:	2102      	movs	r1, #2
 8006f64:	430a      	orrs	r2, r1
 8006f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f68:	4b10      	ldr	r3, [pc, #64]	; (8006fac <RadioShieldLedInit+0x5c>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	4013      	ands	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = aLED_GPIO_PIN[Led];
 8006f74:	2310      	movs	r3, #16
 8006f76:	001a      	movs	r2, r3
 8006f78:	210c      	movs	r1, #12
 8006f7a:	187b      	adds	r3, r7, r1
 8006f7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f7e:	187b      	adds	r3, r7, r1
 8006f80:	2201      	movs	r2, #1
 8006f82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f84:	187b      	adds	r3, r7, r1
 8006f86:	2201      	movs	r2, #1
 8006f88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(aLED_GPIO_PORT[Led], &GPIO_InitStruct);
 8006f90:	1dfb      	adds	r3, r7, #7
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <RadioShieldLedInit+0x60>)
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	58d3      	ldr	r3, [r2, r3]
 8006f9a:	187a      	adds	r2, r7, r1
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 fe28 	bl	8007bf4 <HAL_GPIO_Init>
}
 8006fa4:	46c0      	nop			; (mov r8, r8)
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b008      	add	sp, #32
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	200001bc 	.word	0x200001bc

08006fb4 <RadioShieldLedOn>:
*   This parameter can be one of following parameters:
* @arg  Led_t Led
* @retval None
*/
void RadioShieldLedOn(Led_t Led)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	0002      	movs	r2, r0
 8006fbc:	1dfb      	adds	r3, r7, #7
 8006fbe:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_SET); 
 8006fc0:	1dfb      	adds	r3, r7, #7
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <RadioShieldLedOn+0x28>)
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	58d3      	ldr	r3, [r2, r3]
 8006fca:	2110      	movs	r1, #16
 8006fcc:	2201      	movs	r2, #1
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f000 ff86 	bl	8007ee0 <HAL_GPIO_WritePin>
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b002      	add	sp, #8
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200001bc 	.word	0x200001bc

08006fe0 <RadioShieldLedOff>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedOff(Led_t Led)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	0002      	movs	r2, r0
 8006fe8:	1dfb      	adds	r3, r7, #7
 8006fea:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_RESET); 
 8006fec:	1dfb      	adds	r3, r7, #7
 8006fee:	781a      	ldrb	r2, [r3, #0]
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <RadioShieldLedOff+0x28>)
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	58d3      	ldr	r3, [r2, r3]
 8006ff6:	2110      	movs	r1, #16
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 ff70 	bl	8007ee0 <HAL_GPIO_WritePin>
}
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}
 8007008:	200001bc 	.word	0x200001bc

0800700c <RadioShieldLedToggle>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedToggle(Led_t Led)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	0002      	movs	r2, r0
 8007014:	1dfb      	adds	r3, r7, #7
 8007016:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led]);
 8007018:	1dfb      	adds	r3, r7, #7
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <RadioShieldLedToggle+0x28>)
 800701e:	0092      	lsls	r2, r2, #2
 8007020:	58d3      	ldr	r3, [r2, r3]
 8007022:	2210      	movs	r2, #16
 8007024:	0011      	movs	r1, r2
 8007026:	0018      	movs	r0, r3
 8007028:	f000 ff77 	bl	8007f1a <HAL_GPIO_TogglePin>
}
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	46bd      	mov	sp, r7
 8007030:	b002      	add	sp, #8
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200001bc 	.word	0x200001bc

08007038 <RadioSpiInit>:
* @brief  Initializes SPI HAL.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&pSpiHandle) == HAL_SPI_STATE_RESET)
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <RadioSpiInit+0x6c>)
 800703e:	0018      	movs	r0, r3
 8007040:	f002 fa2c 	bl	800949c <HAL_SPI_GetState>
 8007044:	1e03      	subs	r3, r0, #0
 8007046:	d129      	bne.n	800709c <RadioSpiInit+0x64>
  {
    /* SPI Config */
    pSpiHandle.Instance               = RADIO_SPI;
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <RadioSpiInit+0x6c>)
 800704a:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <RadioSpiInit+0x70>)
 800704c:	601a      	str	r2, [r3, #0]
    pSpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <RadioSpiInit+0x6c>)
 8007050:	2208      	movs	r2, #8
 8007052:	61da      	str	r2, [r3, #28]
    pSpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8007054:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <RadioSpiInit+0x6c>)
 8007056:	2200      	movs	r2, #0
 8007058:	609a      	str	r2, [r3, #8]
    pSpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <RadioSpiInit+0x6c>)
 800705c:	2200      	movs	r2, #0
 800705e:	615a      	str	r2, [r3, #20]
    pSpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8007060:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <RadioSpiInit+0x6c>)
 8007062:	2200      	movs	r2, #0
 8007064:	611a      	str	r2, [r3, #16]
    pSpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <RadioSpiInit+0x6c>)
 8007068:	2200      	movs	r2, #0
 800706a:	629a      	str	r2, [r3, #40]	; 0x28
    pSpiHandle.Init.CRCPolynomial     = 7;
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <RadioSpiInit+0x6c>)
 800706e:	2207      	movs	r2, #7
 8007070:	62da      	str	r2, [r3, #44]	; 0x2c
    pSpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <RadioSpiInit+0x6c>)
 8007074:	2200      	movs	r2, #0
 8007076:	60da      	str	r2, [r3, #12]
    pSpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <RadioSpiInit+0x6c>)
 800707a:	2200      	movs	r2, #0
 800707c:	621a      	str	r2, [r3, #32]
    pSpiHandle.Init.NSS               = SPI_NSS_SOFT;       
 800707e:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <RadioSpiInit+0x6c>)
 8007080:	2280      	movs	r2, #128	; 0x80
 8007082:	0092      	lsls	r2, r2, #2
 8007084:	619a      	str	r2, [r3, #24]
    pSpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <RadioSpiInit+0x6c>)
 8007088:	2200      	movs	r2, #0
 800708a:	625a      	str	r2, [r3, #36]	; 0x24
    pSpiHandle.Init.Mode              = SPI_MODE_MASTER;
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <RadioSpiInit+0x6c>)
 800708e:	2282      	movs	r2, #130	; 0x82
 8007090:	0052      	lsls	r2, r2, #1
 8007092:	605a      	str	r2, [r3, #4]
    
    //HAL_SPI_MspInit(&pSpiHandle);
    HAL_SPI_Init(&pSpiHandle);
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <RadioSpiInit+0x6c>)
 8007096:	0018      	movs	r0, r3
 8007098:	f001 fd9a 	bl	8008bd0 <HAL_SPI_Init>
  }
}
 800709c:	46c0      	nop			; (mov r8, r8)
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	2000037c 	.word	0x2000037c
 80070a8:	40013000 	.word	0x40013000

080070ac <HAL_SPI_MspInit>:
* @brief  Initializes SPI MSP.
* @param  SPI_HandleTypeDef* pSpiHandle
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* pSpiHandle)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b08d      	sub	sp, #52	; 0x34
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_InitStruct;
  if (pSpiHandle->Instance==RADIO_SPI)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a43      	ldr	r2, [pc, #268]	; (80071c8 <HAL_SPI_MspInit+0x11c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d17f      	bne.n	80071be <HAL_SPI_MspInit+0x112>
  {
    /*** Configure the GPIOs ***/  
    /* Enable GPIO clock */
    RADIO_SPI_SCLK_CLK_ENABLE();
 80070be:	4b43      	ldr	r3, [pc, #268]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	4b42      	ldr	r3, [pc, #264]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070c4:	2102      	movs	r1, #2
 80070c6:	430a      	orrs	r2, r1
 80070c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80070ca:	4b40      	ldr	r3, [pc, #256]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	2202      	movs	r2, #2
 80070d0:	4013      	ands	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
 80070d4:	69bb      	ldr	r3, [r7, #24]
    RADIO_SPI_MISO_CLK_ENABLE();
 80070d6:	4b3d      	ldr	r3, [pc, #244]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	4b3c      	ldr	r3, [pc, #240]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070dc:	2101      	movs	r1, #1
 80070de:	430a      	orrs	r2, r1
 80070e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80070e2:	4b3a      	ldr	r3, [pc, #232]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	2201      	movs	r2, #1
 80070e8:	4013      	ands	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	697b      	ldr	r3, [r7, #20]
    RADIO_SPI_MOSI_CLOCK_ENABLE();
 80070ee:	4b37      	ldr	r3, [pc, #220]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f2:	4b36      	ldr	r3, [pc, #216]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070f4:	2101      	movs	r1, #1
 80070f6:	430a      	orrs	r2, r1
 80070f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80070fa:	4b34      	ldr	r3, [pc, #208]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	2201      	movs	r2, #1
 8007100:	4013      	ands	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	693b      	ldr	r3, [r7, #16]
    
    /**SPI1 GPIO Configuration */   
    
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007106:	241c      	movs	r4, #28
 8007108:	193b      	adds	r3, r7, r4
 800710a:	2202      	movs	r2, #2
 800710c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800710e:	193b      	adds	r3, r7, r4
 8007110:	2201      	movs	r2, #1
 8007112:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007114:	193b      	adds	r3, r7, r4
 8007116:	2203      	movs	r2, #3
 8007118:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = RADIO_SPI_SCK_AF;
 800711a:	193b      	adds	r3, r7, r4
 800711c:	2200      	movs	r2, #0
 800711e:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Pin = RADIO_SPI_SCK_PIN;
 8007120:	193b      	adds	r3, r7, r4
 8007122:	2208      	movs	r2, #8
 8007124:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_SPI_SCK_PORT, &GPIO_InitStruct);
 8007126:	193b      	adds	r3, r7, r4
 8007128:	4a29      	ldr	r2, [pc, #164]	; (80071d0 <HAL_SPI_MspInit+0x124>)
 800712a:	0019      	movs	r1, r3
 800712c:	0010      	movs	r0, r2
 800712e:	f000 fd61 	bl	8007bf4 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007132:	193b      	adds	r3, r7, r4
 8007134:	2202      	movs	r2, #2
 8007136:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007138:	193b      	adds	r3, r7, r4
 800713a:	2202      	movs	r2, #2
 800713c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800713e:	193b      	adds	r3, r7, r4
 8007140:	2203      	movs	r2, #3
 8007142:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = RADIO_SPI_MISO_AF;
 8007144:	193b      	adds	r3, r7, r4
 8007146:	2200      	movs	r2, #0
 8007148:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Pin = RADIO_SPI_MISO_PIN;
 800714a:	193b      	adds	r3, r7, r4
 800714c:	2240      	movs	r2, #64	; 0x40
 800714e:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_SPI_MISO_PORT, &GPIO_InitStruct);
 8007150:	193a      	adds	r2, r7, r4
 8007152:	23a0      	movs	r3, #160	; 0xa0
 8007154:	05db      	lsls	r3, r3, #23
 8007156:	0011      	movs	r1, r2
 8007158:	0018      	movs	r0, r3
 800715a:	f000 fd4b 	bl	8007bf4 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = RADIO_SPI_MOSI_PIN;
 800715e:	193b      	adds	r3, r7, r4
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_SPI_MOSI_PORT, &GPIO_InitStruct); 
 8007164:	193a      	adds	r2, r7, r4
 8007166:	23a0      	movs	r3, #160	; 0xa0
 8007168:	05db      	lsls	r3, r3, #23
 800716a:	0011      	movs	r1, r2
 800716c:	0018      	movs	r0, r3
 800716e:	f000 fd41 	bl	8007bf4 <HAL_GPIO_Init>
    
    RADIO_SPI_CS_CLOCK_ENABLE();
 8007172:	4b16      	ldr	r3, [pc, #88]	; (80071cc <HAL_SPI_MspInit+0x120>)
 8007174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <HAL_SPI_MspInit+0x120>)
 8007178:	2102      	movs	r1, #2
 800717a:	430a      	orrs	r2, r1
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <HAL_SPI_MspInit+0x120>)
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	2202      	movs	r2, #2
 8007184:	4013      	ands	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
    
    /* Configure SPI pin: CS */
    GPIO_InitStruct.Pin = RADIO_SPI_CS_PIN;
 800718a:	0021      	movs	r1, r4
 800718c:	187b      	adds	r3, r7, r1
 800718e:	2240      	movs	r2, #64	; 0x40
 8007190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007192:	187b      	adds	r3, r7, r1
 8007194:	2201      	movs	r2, #1
 8007196:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007198:	187b      	adds	r3, r7, r1
 800719a:	2201      	movs	r2, #1
 800719c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800719e:	187b      	adds	r3, r7, r1
 80071a0:	2203      	movs	r2, #3
 80071a2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(RADIO_SPI_CS_PORT, &GPIO_InitStruct);
 80071a4:	187b      	adds	r3, r7, r1
 80071a6:	4a0a      	ldr	r2, [pc, #40]	; (80071d0 <HAL_SPI_MspInit+0x124>)
 80071a8:	0019      	movs	r1, r3
 80071aa:	0010      	movs	r0, r2
 80071ac:	f000 fd22 	bl	8007bf4 <HAL_GPIO_Init>
    
    RADIO_SPI_CLK_ENABLE();
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80071b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <HAL_SPI_MspInit+0x120>)
 80071b6:	2180      	movs	r1, #128	; 0x80
 80071b8:	0149      	lsls	r1, r1, #5
 80071ba:	430a      	orrs	r2, r1
 80071bc:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b00d      	add	sp, #52	; 0x34
 80071c4:	bd90      	pop	{r4, r7, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	40013000 	.word	0x40013000
 80071cc:	40021000 	.word	0x40021000
 80071d0:	50000400 	.word	0x50000400

080071d4 <SPI_Write>:
* @brief  SPI Write a byte to device
* @param  Value: value to be written
* @retval None
*/
static void SPI_Write(uint8_t Value)
{
 80071d4:	b5b0      	push	{r4, r5, r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	0002      	movs	r2, r0
 80071dc:	1dfb      	adds	r3, r7, #7
 80071de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071e0:	230f      	movs	r3, #15
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	2200      	movs	r2, #0
 80071e6:	701a      	strb	r2, [r3, #0]
  
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	4b0e      	ldr	r3, [pc, #56]	; (8007224 <SPI_Write+0x50>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	2202      	movs	r2, #2
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d1f8      	bne.n	80071ea <SPI_Write+0x16>
  status = HAL_SPI_Transmit(&pSpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <SPI_Write+0x54>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	250f      	movs	r5, #15
 80071fe:	197c      	adds	r4, r7, r5
 8007200:	1df9      	adds	r1, r7, #7
 8007202:	4808      	ldr	r0, [pc, #32]	; (8007224 <SPI_Write+0x50>)
 8007204:	2201      	movs	r2, #1
 8007206:	f001 fd81 	bl	8008d0c <HAL_SPI_Transmit>
 800720a:	0003      	movs	r3, r0
 800720c:	7023      	strb	r3, [r4, #0]
  
  /* Check the communication status */
  if (status != HAL_OK)
 800720e:	197b      	adds	r3, r7, r5
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <SPI_Write+0x46>
  {
    /* Execute user timeout callback */
    SPI_Error();
 8007216:	f000 f809 	bl	800722c <SPI_Error>
  }
}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	46bd      	mov	sp, r7
 800721e:	b004      	add	sp, #16
 8007220:	bdb0      	pop	{r4, r5, r7, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	2000037c 	.word	0x2000037c
 8007228:	200001c0 	.word	0x200001c0

0800722c <SPI_Error>:
* @brief  SPI error treatment function
* @param  None
* @retval None
*/
static void SPI_Error(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&pSpiHandle);
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <SPI_Error+0x18>)
 8007232:	0018      	movs	r0, r3
 8007234:	f001 fd38 	bl	8008ca8 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  RadioSpiInit();
 8007238:	f7ff fefe 	bl	8007038 <RadioSpiInit>
}
 800723c:	46c0      	nop			; (mov r8, r8)
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	2000037c 	.word	0x2000037c

08007248 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8007248:	b5b0      	push	{r4, r5, r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af02      	add	r7, sp, #8
 800724e:	603a      	str	r2, [r7, #0]
 8007250:	1dfb      	adds	r3, r7, #7
 8007252:	1c02      	adds	r2, r0, #0
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	1dbb      	adds	r3, r7, #6
 8007258:	1c0a      	adds	r2, r1, #0
 800725a:	701a      	strb	r2, [r3, #0]
  uint8_t aHeader[2] = {0};
 800725c:	2110      	movs	r1, #16
 800725e:	187b      	adds	r3, r7, r1
 8007260:	2200      	movs	r2, #0
 8007262:	801a      	strh	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 8007264:	200e      	movs	r0, #14
 8007266:	183b      	adds	r3, r7, r0
 8007268:	2200      	movs	r2, #0
 800726a:	801a      	strh	r2, [r3, #0]
  
  StatusBytes *pStatus=(StatusBytes *)&tmpstatus;
 800726c:	183b      	adds	r3, r7, r0
 800726e:	61bb      	str	r3, [r7, #24]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8007270:	187b      	adds	r3, r7, r1
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
  aHeader[1] = cRegAddress;
 8007276:	187b      	adds	r3, r7, r1
 8007278:	1dfa      	adds	r2, r7, #7
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 800727e:	2300      	movs	r3, #0
 8007280:	2204      	movs	r2, #4
 8007282:	2104      	movs	r1, #4
 8007284:	2003      	movs	r0, #3
 8007286:	f7ff fde7 	bl	8006e58 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 800728a:	4b3c      	ldr	r3, [pc, #240]	; (800737c <RadioSpiWriteRegisters+0x134>)
 800728c:	2200      	movs	r2, #0
 800728e:	2140      	movs	r1, #64	; 0x40
 8007290:	0018      	movs	r0, r3
 8007292:	f000 fe25 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8007296:	230c      	movs	r3, #12
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	2200      	movs	r2, #0
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e007      	b.n	80072b0 <RadioSpiWriteRegisters+0x68>
 80072a0:	210c      	movs	r1, #12
 80072a2:	187b      	adds	r3, r7, r1
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3301      	adds	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	187b      	adds	r3, r7, r1
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	230c      	movs	r3, #12
 80072b2:	18fb      	adds	r3, r7, r3
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2bff      	cmp	r3, #255	; 0xff
 80072ba:	d9f1      	bls.n	80072a0 <RadioSpiWriteRegisters+0x58>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 80072bc:	4b30      	ldr	r3, [pc, #192]	; (8007380 <RadioSpiWriteRegisters+0x138>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	210e      	movs	r1, #14
 80072c2:	000c      	movs	r4, r1
 80072c4:	187a      	adds	r2, r7, r1
 80072c6:	2510      	movs	r5, #16
 80072c8:	1979      	adds	r1, r7, r5
 80072ca:	482e      	ldr	r0, [pc, #184]	; (8007384 <RadioSpiWriteRegisters+0x13c>)
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2301      	movs	r3, #1
 80072d0:	f001 fe6c 	bl	8008fac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 80072d4:	0021      	movs	r1, r4
 80072d6:	187b      	adds	r3, r7, r1
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	b29a      	uxth	r2, r3
 80072de:	187b      	adds	r3, r7, r1
 80072e0:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80072e2:	4b27      	ldr	r3, [pc, #156]	; (8007380 <RadioSpiWriteRegisters+0x138>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	187c      	adds	r4, r7, r1
 80072e8:	197a      	adds	r2, r7, r5
 80072ea:	1c51      	adds	r1, r2, #1
 80072ec:	4825      	ldr	r0, [pc, #148]	; (8007384 <RadioSpiWriteRegisters+0x13c>)
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2301      	movs	r3, #1
 80072f2:	0022      	movs	r2, r4
 80072f4:	f001 fe5a 	bl	8008fac <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 80072f8:	2300      	movs	r3, #0
 80072fa:	61fb      	str	r3, [r7, #28]
 80072fc:	e009      	b.n	8007312 <RadioSpiWriteRegisters+0xca>
  {
    SPI_Write(pcBuffer[index]);
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	18d3      	adds	r3, r2, r3
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	0018      	movs	r0, r3
 8007308:	f7ff ff64 	bl	80071d4 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	3301      	adds	r3, #1
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	1dbb      	adds	r3, r7, #6
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	429a      	cmp	r2, r3
 800731a:	dbf0      	blt.n	80072fe <RadioSpiWriteRegisters+0xb6>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 800731c:	46c0      	nop			; (mov r8, r8)
 800731e:	4b19      	ldr	r3, [pc, #100]	; (8007384 <RadioSpiWriteRegisters+0x13c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2202      	movs	r2, #2
 8007326:	4013      	ands	r3, r2
 8007328:	2b02      	cmp	r3, #2
 800732a:	d1f8      	bne.n	800731e <RadioSpiWriteRegisters+0xd6>
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 800732c:	4b13      	ldr	r3, [pc, #76]	; (800737c <RadioSpiWriteRegisters+0x134>)
 800732e:	2201      	movs	r2, #1
 8007330:	2140      	movs	r1, #64	; 0x40
 8007332:	0018      	movs	r0, r3
 8007334:	f000 fdd4 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8007338:	2301      	movs	r3, #1
 800733a:	2204      	movs	r2, #4
 800733c:	2104      	movs	r1, #4
 800733e:	2003      	movs	r0, #3
 8007340:	f7ff fd8a 	bl	8006e58 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8007344:	2414      	movs	r4, #20
 8007346:	193a      	adds	r2, r7, r4
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	0010      	movs	r0, r2
 800734c:	0019      	movs	r1, r3
 800734e:	2302      	movs	r3, #2
 8007350:	001a      	movs	r2, r3
 8007352:	f002 f987 	bl	8009664 <memcpy>
 8007356:	193a      	adds	r2, r7, r4
 8007358:	2300      	movs	r3, #0
 800735a:	7811      	ldrb	r1, [r2, #0]
 800735c:	20ff      	movs	r0, #255	; 0xff
 800735e:	4001      	ands	r1, r0
 8007360:	20ff      	movs	r0, #255	; 0xff
 8007362:	4383      	bics	r3, r0
 8007364:	430b      	orrs	r3, r1
 8007366:	7852      	ldrb	r2, [r2, #1]
 8007368:	21ff      	movs	r1, #255	; 0xff
 800736a:	400a      	ands	r2, r1
 800736c:	0212      	lsls	r2, r2, #8
 800736e:	4906      	ldr	r1, [pc, #24]	; (8007388 <RadioSpiWriteRegisters+0x140>)
 8007370:	400b      	ands	r3, r1
 8007372:	4313      	orrs	r3, r2
  
}
 8007374:	1c18      	adds	r0, r3, #0
 8007376:	46bd      	mov	sp, r7
 8007378:	b008      	add	sp, #32
 800737a:	bdb0      	pop	{r4, r5, r7, pc}
 800737c:	50000400 	.word	0x50000400
 8007380:	200001c0 	.word	0x200001c0
 8007384:	2000037c 	.word	0x2000037c
 8007388:	ffff00ff 	.word	0xffff00ff

0800738c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval StatusBytes
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800738c:	b5b0      	push	{r4, r5, r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af02      	add	r7, sp, #8
 8007392:	603a      	str	r2, [r7, #0]
 8007394:	1dfb      	adds	r3, r7, #7
 8007396:	1c02      	adds	r2, r0, #0
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	1dbb      	adds	r3, r7, #6
 800739c:	1c0a      	adds	r2, r1, #0
 800739e:	701a      	strb	r2, [r3, #0]
  uint16_t tmpstatus = 0x00;
 80073a0:	2112      	movs	r1, #18
 80073a2:	187b      	adds	r3, r7, r1
 80073a4:	2200      	movs	r2, #0
 80073a6:	801a      	strh	r2, [r3, #0]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 80073a8:	187b      	adds	r3, r7, r1
 80073aa:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 80073ac:	2110      	movs	r1, #16
 80073ae:	187b      	adds	r3, r7, r1
 80073b0:	2200      	movs	r2, #0
 80073b2:	801a      	strh	r2, [r3, #0]
  uint8_t dummy = 0xFF;
 80073b4:	230f      	movs	r3, #15
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	22ff      	movs	r2, #255	; 0xff
 80073ba:	701a      	strb	r2, [r3, #0]
  
  /* Built the aHeader bytes */
  aHeader[0] = READ_HEADER;
 80073bc:	187b      	adds	r3, r7, r1
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
  aHeader[1] = cRegAddress;
 80073c2:	187b      	adds	r3, r7, r1
 80073c4:	1dfa      	adds	r2, r7, #7
 80073c6:	7812      	ldrb	r2, [r2, #0]
 80073c8:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 80073ca:	2300      	movs	r3, #0
 80073cc:	2204      	movs	r2, #4
 80073ce:	2104      	movs	r1, #4
 80073d0:	2003      	movs	r0, #3
 80073d2:	f7ff fd41 	bl	8006e58 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 80073d6:	4b3f      	ldr	r3, [pc, #252]	; (80074d4 <RadioSpiReadRegisters+0x148>)
 80073d8:	2200      	movs	r2, #0
 80073da:	2140      	movs	r1, #64	; 0x40
 80073dc:	0018      	movs	r0, r3
 80073de:	f000 fd7f 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 80073e2:	230c      	movs	r3, #12
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	2200      	movs	r2, #0
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	e007      	b.n	80073fc <RadioSpiReadRegisters+0x70>
 80073ec:	210c      	movs	r1, #12
 80073ee:	187b      	adds	r3, r7, r1
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3301      	adds	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	187b      	adds	r3, r7, r1
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	230c      	movs	r3, #12
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	2bff      	cmp	r3, #255	; 0xff
 8007406:	d9f1      	bls.n	80073ec <RadioSpiReadRegisters+0x60>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8007408:	4b33      	ldr	r3, [pc, #204]	; (80074d8 <RadioSpiReadRegisters+0x14c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2112      	movs	r1, #18
 800740e:	000c      	movs	r4, r1
 8007410:	187a      	adds	r2, r7, r1
 8007412:	2510      	movs	r5, #16
 8007414:	1979      	adds	r1, r7, r5
 8007416:	4831      	ldr	r0, [pc, #196]	; (80074dc <RadioSpiReadRegisters+0x150>)
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	2301      	movs	r3, #1
 800741c:	f001 fdc6 	bl	8008fac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8007420:	0021      	movs	r1, r4
 8007422:	187b      	adds	r3, r7, r1
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	b29a      	uxth	r2, r3
 800742a:	187b      	adds	r3, r7, r1
 800742c:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800742e:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <RadioSpiReadRegisters+0x14c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	187c      	adds	r4, r7, r1
 8007434:	197a      	adds	r2, r7, r5
 8007436:	1c51      	adds	r1, r2, #1
 8007438:	4828      	ldr	r0, [pc, #160]	; (80074dc <RadioSpiReadRegisters+0x150>)
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	2301      	movs	r3, #1
 800743e:	0022      	movs	r2, r4
 8007440:	f001 fdb4 	bl	8008fac <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	e00e      	b.n	8007468 <RadioSpiReadRegisters+0xdc>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&(pcBuffer)[index], 1, SpiTimeout);
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	18d2      	adds	r2, r2, r3
 8007450:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <RadioSpiReadRegisters+0x14c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	210f      	movs	r1, #15
 8007456:	1879      	adds	r1, r7, r1
 8007458:	4820      	ldr	r0, [pc, #128]	; (80074dc <RadioSpiReadRegisters+0x150>)
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	2301      	movs	r3, #1
 800745e:	f001 fda5 	bl	8008fac <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	3301      	adds	r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	1dbb      	adds	r3, r7, #6
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	69fa      	ldr	r2, [r7, #28]
 800746e:	429a      	cmp	r2, r3
 8007470:	dbeb      	blt.n	800744a <RadioSpiReadRegisters+0xbe>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	4b19      	ldr	r3, [pc, #100]	; (80074dc <RadioSpiReadRegisters+0x150>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	2202      	movs	r2, #2
 800747c:	4013      	ands	r3, r2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d1f8      	bne.n	8007474 <RadioSpiReadRegisters+0xe8>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 8007482:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <RadioSpiReadRegisters+0x148>)
 8007484:	2201      	movs	r2, #1
 8007486:	2140      	movs	r1, #64	; 0x40
 8007488:	0018      	movs	r0, r3
 800748a:	f000 fd29 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 800748e:	2301      	movs	r3, #1
 8007490:	2204      	movs	r2, #4
 8007492:	2104      	movs	r1, #4
 8007494:	2003      	movs	r0, #3
 8007496:	f7ff fcdf 	bl	8006e58 <RadioGpioInterruptCmd>
  
  return *pStatus;
 800749a:	2414      	movs	r4, #20
 800749c:	193a      	adds	r2, r7, r4
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	0010      	movs	r0, r2
 80074a2:	0019      	movs	r1, r3
 80074a4:	2302      	movs	r3, #2
 80074a6:	001a      	movs	r2, r3
 80074a8:	f002 f8dc 	bl	8009664 <memcpy>
 80074ac:	193a      	adds	r2, r7, r4
 80074ae:	2300      	movs	r3, #0
 80074b0:	7811      	ldrb	r1, [r2, #0]
 80074b2:	20ff      	movs	r0, #255	; 0xff
 80074b4:	4001      	ands	r1, r0
 80074b6:	20ff      	movs	r0, #255	; 0xff
 80074b8:	4383      	bics	r3, r0
 80074ba:	430b      	orrs	r3, r1
 80074bc:	7852      	ldrb	r2, [r2, #1]
 80074be:	21ff      	movs	r1, #255	; 0xff
 80074c0:	400a      	ands	r2, r1
 80074c2:	0212      	lsls	r2, r2, #8
 80074c4:	4906      	ldr	r1, [pc, #24]	; (80074e0 <RadioSpiReadRegisters+0x154>)
 80074c6:	400b      	ands	r3, r1
 80074c8:	4313      	orrs	r3, r2
  
}
 80074ca:	1c18      	adds	r0, r3, #0
 80074cc:	46bd      	mov	sp, r7
 80074ce:	b008      	add	sp, #32
 80074d0:	bdb0      	pop	{r4, r5, r7, pc}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	50000400 	.word	0x50000400
 80074d8:	200001c0 	.word	0x200001c0
 80074dc:	2000037c 	.word	0x2000037c
 80074e0:	ffff00ff 	.word	0xffff00ff

080074e4 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval StatusBytes
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80074e4:	b5b0      	push	{r4, r5, r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	0002      	movs	r2, r0
 80074ec:	1dfb      	adds	r3, r7, #7
 80074ee:	701a      	strb	r2, [r3, #0]
  uint8_t aHeader[2] = {0};
 80074f0:	210c      	movs	r1, #12
 80074f2:	187b      	adds	r3, r7, r1
 80074f4:	2200      	movs	r2, #0
 80074f6:	801a      	strh	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 80074f8:	200a      	movs	r0, #10
 80074fa:	183b      	adds	r3, r7, r0
 80074fc:	2200      	movs	r2, #0
 80074fe:	801a      	strh	r2, [r3, #0]
  
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8007500:	183b      	adds	r3, r7, r0
 8007502:	617b      	str	r3, [r7, #20]
  
  /* Built the aHeader bytes */
  aHeader[0] = COMMAND_HEADER;
 8007504:	187b      	adds	r3, r7, r1
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	701a      	strb	r2, [r3, #0]
  aHeader[1] = cCommandCode;
 800750a:	187b      	adds	r3, r7, r1
 800750c:	1dfa      	adds	r2, r7, #7
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 8007512:	2300      	movs	r3, #0
 8007514:	2204      	movs	r2, #4
 8007516:	2104      	movs	r1, #4
 8007518:	2003      	movs	r0, #3
 800751a:	f7ff fc9d 	bl	8006e58 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 800751e:	4b33      	ldr	r3, [pc, #204]	; (80075ec <RadioSpiCommandStrobes+0x108>)
 8007520:	2200      	movs	r2, #0
 8007522:	2140      	movs	r1, #64	; 0x40
 8007524:	0018      	movs	r0, r3
 8007526:	f000 fcdb 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 800752a:	2308      	movs	r3, #8
 800752c:	18fb      	adds	r3, r7, r3
 800752e:	2200      	movs	r2, #0
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	e007      	b.n	8007544 <RadioSpiCommandStrobes+0x60>
 8007534:	2108      	movs	r1, #8
 8007536:	187b      	adds	r3, r7, r1
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	3301      	adds	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	187b      	adds	r3, r7, r1
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	2308      	movs	r3, #8
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	2bff      	cmp	r3, #255	; 0xff
 800754e:	d9f1      	bls.n	8007534 <RadioSpiCommandStrobes+0x50>
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007550:	4b27      	ldr	r3, [pc, #156]	; (80075f0 <RadioSpiCommandStrobes+0x10c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	210a      	movs	r1, #10
 8007556:	000c      	movs	r4, r1
 8007558:	187a      	adds	r2, r7, r1
 800755a:	250c      	movs	r5, #12
 800755c:	1979      	adds	r1, r7, r5
 800755e:	4825      	ldr	r0, [pc, #148]	; (80075f4 <RadioSpiCommandStrobes+0x110>)
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	2301      	movs	r3, #1
 8007564:	f001 fd22 	bl	8008fac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8007568:	0021      	movs	r1, r4
 800756a:	187b      	adds	r3, r7, r1
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	b29a      	uxth	r2, r3
 8007572:	187b      	adds	r3, r7, r1
 8007574:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007576:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <RadioSpiCommandStrobes+0x10c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	187c      	adds	r4, r7, r1
 800757c:	197a      	adds	r2, r7, r5
 800757e:	1c51      	adds	r1, r2, #1
 8007580:	481c      	ldr	r0, [pc, #112]	; (80075f4 <RadioSpiCommandStrobes+0x110>)
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	2301      	movs	r3, #1
 8007586:	0022      	movs	r2, r4
 8007588:	f001 fd10 	bl	8008fac <HAL_SPI_TransmitReceive>
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 800758c:	46c0      	nop			; (mov r8, r8)
 800758e:	4b19      	ldr	r3, [pc, #100]	; (80075f4 <RadioSpiCommandStrobes+0x110>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2202      	movs	r2, #2
 8007596:	4013      	ands	r3, r2
 8007598:	2b02      	cmp	r3, #2
 800759a:	d1f8      	bne.n	800758e <RadioSpiCommandStrobes+0xaa>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 800759c:	4b13      	ldr	r3, [pc, #76]	; (80075ec <RadioSpiCommandStrobes+0x108>)
 800759e:	2201      	movs	r2, #1
 80075a0:	2140      	movs	r1, #64	; 0x40
 80075a2:	0018      	movs	r0, r3
 80075a4:	f000 fc9c 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80075a8:	2301      	movs	r3, #1
 80075aa:	2204      	movs	r2, #4
 80075ac:	2104      	movs	r1, #4
 80075ae:	2003      	movs	r0, #3
 80075b0:	f7ff fc52 	bl	8006e58 <RadioGpioInterruptCmd>
  
  return *pStatus;
 80075b4:	2410      	movs	r4, #16
 80075b6:	193a      	adds	r2, r7, r4
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	0010      	movs	r0, r2
 80075bc:	0019      	movs	r1, r3
 80075be:	2302      	movs	r3, #2
 80075c0:	001a      	movs	r2, r3
 80075c2:	f002 f84f 	bl	8009664 <memcpy>
 80075c6:	193a      	adds	r2, r7, r4
 80075c8:	2300      	movs	r3, #0
 80075ca:	7811      	ldrb	r1, [r2, #0]
 80075cc:	20ff      	movs	r0, #255	; 0xff
 80075ce:	4001      	ands	r1, r0
 80075d0:	20ff      	movs	r0, #255	; 0xff
 80075d2:	4383      	bics	r3, r0
 80075d4:	430b      	orrs	r3, r1
 80075d6:	7852      	ldrb	r2, [r2, #1]
 80075d8:	21ff      	movs	r1, #255	; 0xff
 80075da:	400a      	ands	r2, r1
 80075dc:	0212      	lsls	r2, r2, #8
 80075de:	4906      	ldr	r1, [pc, #24]	; (80075f8 <RadioSpiCommandStrobes+0x114>)
 80075e0:	400b      	ands	r3, r1
 80075e2:	4313      	orrs	r3, r2
  
}
 80075e4:	1c18      	adds	r0, r3, #0
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b006      	add	sp, #24
 80075ea:	bdb0      	pop	{r4, r5, r7, pc}
 80075ec:	50000400 	.word	0x50000400
 80075f0:	200001c0 	.word	0x200001c0
 80075f4:	2000037c 	.word	0x2000037c
 80075f8:	ffff00ff 	.word	0xffff00ff

080075fc <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80075fc:	b5b0      	push	{r4, r5, r7, lr}
 80075fe:	b08a      	sub	sp, #40	; 0x28
 8007600:	af02      	add	r7, sp, #8
 8007602:	0002      	movs	r2, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	1dfb      	adds	r3, r7, #7
 8007608:	701a      	strb	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 800760a:	2112      	movs	r1, #18
 800760c:	187b      	adds	r3, r7, r1
 800760e:	2200      	movs	r2, #0
 8007610:	801a      	strh	r2, [r3, #0]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8007612:	187b      	adds	r3, r7, r1
 8007614:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8007616:	2110      	movs	r1, #16
 8007618:	187b      	adds	r3, r7, r1
 800761a:	2200      	movs	r2, #0
 800761c:	801a      	strh	r2, [r3, #0]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 800761e:	187b      	adds	r3, r7, r1
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
  aHeader[1] = LINEAR_FIFO_ADDRESS;
 8007624:	187b      	adds	r3, r7, r1
 8007626:	22ff      	movs	r2, #255	; 0xff
 8007628:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 800762a:	2300      	movs	r3, #0
 800762c:	2204      	movs	r2, #4
 800762e:	2104      	movs	r1, #4
 8007630:	2003      	movs	r0, #3
 8007632:	f7ff fc11 	bl	8006e58 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8007636:	4b3c      	ldr	r3, [pc, #240]	; (8007728 <RadioSpiWriteFifo+0x12c>)
 8007638:	2200      	movs	r2, #0
 800763a:	2140      	movs	r1, #64	; 0x40
 800763c:	0018      	movs	r0, r3
 800763e:	f000 fc4f 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8007642:	230e      	movs	r3, #14
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	2200      	movs	r2, #0
 8007648:	801a      	strh	r2, [r3, #0]
 800764a:	e007      	b.n	800765c <RadioSpiWriteFifo+0x60>
 800764c:	210e      	movs	r1, #14
 800764e:	187b      	adds	r3, r7, r1
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	3301      	adds	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	187b      	adds	r3, r7, r1
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	230e      	movs	r3, #14
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	2bff      	cmp	r3, #255	; 0xff
 8007666:	d9f1      	bls.n	800764c <RadioSpiWriteFifo+0x50>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8007668:	4b30      	ldr	r3, [pc, #192]	; (800772c <RadioSpiWriteFifo+0x130>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2112      	movs	r1, #18
 800766e:	000c      	movs	r4, r1
 8007670:	187a      	adds	r2, r7, r1
 8007672:	2510      	movs	r5, #16
 8007674:	1979      	adds	r1, r7, r5
 8007676:	482e      	ldr	r0, [pc, #184]	; (8007730 <RadioSpiWriteFifo+0x134>)
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2301      	movs	r3, #1
 800767c:	f001 fc96 	bl	8008fac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8007680:	0021      	movs	r1, r4
 8007682:	187b      	adds	r3, r7, r1
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	b29a      	uxth	r2, r3
 800768a:	187b      	adds	r3, r7, r1
 800768c:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800768e:	4b27      	ldr	r3, [pc, #156]	; (800772c <RadioSpiWriteFifo+0x130>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	187c      	adds	r4, r7, r1
 8007694:	197a      	adds	r2, r7, r5
 8007696:	1c51      	adds	r1, r2, #1
 8007698:	4825      	ldr	r0, [pc, #148]	; (8007730 <RadioSpiWriteFifo+0x134>)
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2301      	movs	r3, #1
 800769e:	0022      	movs	r2, r4
 80076a0:	f001 fc84 	bl	8008fac <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	e009      	b.n	80076be <RadioSpiWriteFifo+0xc2>
  {
    SPI_Write(pcBuffer[index]);
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	18d3      	adds	r3, r2, r3
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f7ff fd8e 	bl	80071d4 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	1dfb      	adds	r3, r7, #7
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	dbf0      	blt.n	80076aa <RadioSpiWriteFifo+0xae>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET); 
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	4b19      	ldr	r3, [pc, #100]	; (8007730 <RadioSpiWriteFifo+0x134>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2202      	movs	r2, #2
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d1f8      	bne.n	80076ca <RadioSpiWriteFifo+0xce>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 80076d8:	4b13      	ldr	r3, [pc, #76]	; (8007728 <RadioSpiWriteFifo+0x12c>)
 80076da:	2201      	movs	r2, #1
 80076dc:	2140      	movs	r1, #64	; 0x40
 80076de:	0018      	movs	r0, r3
 80076e0:	f000 fbfe 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80076e4:	2301      	movs	r3, #1
 80076e6:	2204      	movs	r2, #4
 80076e8:	2104      	movs	r1, #4
 80076ea:	2003      	movs	r0, #3
 80076ec:	f7ff fbb4 	bl	8006e58 <RadioGpioInterruptCmd>
  
  return *pStatus; 
 80076f0:	2414      	movs	r4, #20
 80076f2:	193a      	adds	r2, r7, r4
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	0010      	movs	r0, r2
 80076f8:	0019      	movs	r1, r3
 80076fa:	2302      	movs	r3, #2
 80076fc:	001a      	movs	r2, r3
 80076fe:	f001 ffb1 	bl	8009664 <memcpy>
 8007702:	193a      	adds	r2, r7, r4
 8007704:	2300      	movs	r3, #0
 8007706:	7811      	ldrb	r1, [r2, #0]
 8007708:	20ff      	movs	r0, #255	; 0xff
 800770a:	4001      	ands	r1, r0
 800770c:	20ff      	movs	r0, #255	; 0xff
 800770e:	4383      	bics	r3, r0
 8007710:	430b      	orrs	r3, r1
 8007712:	7852      	ldrb	r2, [r2, #1]
 8007714:	21ff      	movs	r1, #255	; 0xff
 8007716:	400a      	ands	r2, r1
 8007718:	0212      	lsls	r2, r2, #8
 800771a:	4906      	ldr	r1, [pc, #24]	; (8007734 <RadioSpiWriteFifo+0x138>)
 800771c:	400b      	ands	r3, r1
 800771e:	4313      	orrs	r3, r2
}
 8007720:	1c18      	adds	r0, r3, #0
 8007722:	46bd      	mov	sp, r7
 8007724:	b008      	add	sp, #32
 8007726:	bdb0      	pop	{r4, r5, r7, pc}
 8007728:	50000400 	.word	0x50000400
 800772c:	200001c0 	.word	0x200001c0
 8007730:	2000037c 	.word	0x2000037c
 8007734:	ffff00ff 	.word	0xffff00ff

08007738 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval StatusBytes
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8007738:	b5b0      	push	{r4, r5, r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af02      	add	r7, sp, #8
 800773e:	0002      	movs	r2, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	1dfb      	adds	r3, r7, #7
 8007744:	701a      	strb	r2, [r3, #0]
  uint16_t tmpstatus = 0x0000;
 8007746:	2112      	movs	r1, #18
 8007748:	187b      	adds	r3, r7, r1
 800774a:	2200      	movs	r2, #0
 800774c:	801a      	strh	r2, [r3, #0]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 800774e:	187b      	adds	r3, r7, r1
 8007750:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2];
  uint8_t dummy=0xFF;
 8007752:	230f      	movs	r3, #15
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	22ff      	movs	r2, #255	; 0xff
 8007758:	701a      	strb	r2, [r3, #0]
  
  /* Built the aHeader bytes */
  aHeader[0]=READ_HEADER;
 800775a:	2110      	movs	r1, #16
 800775c:	187b      	adds	r3, r7, r1
 800775e:	2201      	movs	r2, #1
 8007760:	701a      	strb	r2, [r3, #0]
  aHeader[1]=LINEAR_FIFO_ADDRESS;
 8007762:	187b      	adds	r3, r7, r1
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	705a      	strb	r2, [r3, #1]
  
  SPI_ENTER_CRITICAL();
 8007768:	2300      	movs	r3, #0
 800776a:	2204      	movs	r2, #4
 800776c:	2104      	movs	r1, #4
 800776e:	2003      	movs	r0, #3
 8007770:	f7ff fb72 	bl	8006e58 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8007774:	4b3e      	ldr	r3, [pc, #248]	; (8007870 <RadioSpiReadFifo+0x138>)
 8007776:	2200      	movs	r2, #0
 8007778:	2140      	movs	r1, #64	; 0x40
 800777a:	0018      	movs	r0, r3
 800777c:	f000 fbb0 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8007780:	230c      	movs	r3, #12
 8007782:	18fb      	adds	r3, r7, r3
 8007784:	2200      	movs	r2, #0
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	e007      	b.n	800779a <RadioSpiReadFifo+0x62>
 800778a:	210c      	movs	r1, #12
 800778c:	187b      	adds	r3, r7, r1
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	3301      	adds	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	187b      	adds	r3, r7, r1
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	230c      	movs	r3, #12
 800779c:	18fb      	adds	r3, r7, r3
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2bff      	cmp	r3, #255	; 0xff
 80077a4:	d9f1      	bls.n	800778a <RadioSpiReadFifo+0x52>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80077a6:	4b33      	ldr	r3, [pc, #204]	; (8007874 <RadioSpiReadFifo+0x13c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2112      	movs	r1, #18
 80077ac:	000c      	movs	r4, r1
 80077ae:	187a      	adds	r2, r7, r1
 80077b0:	2510      	movs	r5, #16
 80077b2:	1979      	adds	r1, r7, r5
 80077b4:	4830      	ldr	r0, [pc, #192]	; (8007878 <RadioSpiReadFifo+0x140>)
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	2301      	movs	r3, #1
 80077ba:	f001 fbf7 	bl	8008fac <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 80077be:	0021      	movs	r1, r4
 80077c0:	187b      	adds	r3, r7, r1
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	187b      	adds	r3, r7, r1
 80077ca:	801a      	strh	r2, [r3, #0]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80077cc:	4b29      	ldr	r3, [pc, #164]	; (8007874 <RadioSpiReadFifo+0x13c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	187c      	adds	r4, r7, r1
 80077d2:	197a      	adds	r2, r7, r5
 80077d4:	1c51      	adds	r1, r2, #1
 80077d6:	4828      	ldr	r0, [pc, #160]	; (8007878 <RadioSpiReadFifo+0x140>)
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	2301      	movs	r3, #1
 80077dc:	0022      	movs	r2, r4
 80077de:	f001 fbe5 	bl	8008fac <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
 80077e6:	e00e      	b.n	8007806 <RadioSpiReadFifo+0xce>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&pcBuffer[index], 1, SpiTimeout);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	18d2      	adds	r2, r2, r3
 80077ee:	4b21      	ldr	r3, [pc, #132]	; (8007874 <RadioSpiReadFifo+0x13c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	210f      	movs	r1, #15
 80077f4:	1879      	adds	r1, r7, r1
 80077f6:	4820      	ldr	r0, [pc, #128]	; (8007878 <RadioSpiReadFifo+0x140>)
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	2301      	movs	r3, #1
 80077fc:	f001 fbd6 	bl	8008fac <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	3301      	adds	r3, #1
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	1dfb      	adds	r3, r7, #7
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	429a      	cmp	r2, r3
 800780e:	dbeb      	blt.n	80077e8 <RadioSpiReadFifo+0xb0>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while(__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8007810:	46c0      	nop			; (mov r8, r8)
 8007812:	4b19      	ldr	r3, [pc, #100]	; (8007878 <RadioSpiReadFifo+0x140>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2202      	movs	r2, #2
 800781a:	4013      	ands	r3, r2
 800781c:	2b02      	cmp	r3, #2
 800781e:	d1f8      	bne.n	8007812 <RadioSpiReadFifo+0xda>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 8007820:	4b13      	ldr	r3, [pc, #76]	; (8007870 <RadioSpiReadFifo+0x138>)
 8007822:	2201      	movs	r2, #1
 8007824:	2140      	movs	r1, #64	; 0x40
 8007826:	0018      	movs	r0, r3
 8007828:	f000 fb5a 	bl	8007ee0 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 800782c:	2301      	movs	r3, #1
 800782e:	2204      	movs	r2, #4
 8007830:	2104      	movs	r1, #4
 8007832:	2003      	movs	r0, #3
 8007834:	f7ff fb10 	bl	8006e58 <RadioGpioInterruptCmd>
  
  return *pStatus;  
 8007838:	2414      	movs	r4, #20
 800783a:	193a      	adds	r2, r7, r4
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	0010      	movs	r0, r2
 8007840:	0019      	movs	r1, r3
 8007842:	2302      	movs	r3, #2
 8007844:	001a      	movs	r2, r3
 8007846:	f001 ff0d 	bl	8009664 <memcpy>
 800784a:	193a      	adds	r2, r7, r4
 800784c:	2300      	movs	r3, #0
 800784e:	7811      	ldrb	r1, [r2, #0]
 8007850:	20ff      	movs	r0, #255	; 0xff
 8007852:	4001      	ands	r1, r0
 8007854:	20ff      	movs	r0, #255	; 0xff
 8007856:	4383      	bics	r3, r0
 8007858:	430b      	orrs	r3, r1
 800785a:	7852      	ldrb	r2, [r2, #1]
 800785c:	21ff      	movs	r1, #255	; 0xff
 800785e:	400a      	ands	r2, r1
 8007860:	0212      	lsls	r2, r2, #8
 8007862:	4906      	ldr	r1, [pc, #24]	; (800787c <RadioSpiReadFifo+0x144>)
 8007864:	400b      	ands	r3, r1
 8007866:	4313      	orrs	r3, r2
}
 8007868:	1c18      	adds	r0, r3, #0
 800786a:	46bd      	mov	sp, r7
 800786c:	b008      	add	sp, #32
 800786e:	bdb0      	pop	{r4, r5, r7, pc}
 8007870:	50000400 	.word	0x50000400
 8007874:	200001c0 	.word	0x200001c0
 8007878:	2000037c 	.word	0x2000037c
 800787c:	ffff00ff 	.word	0xffff00ff

08007880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007884:	4b17      	ldr	r3, [pc, #92]	; (80078e4 <SystemInit+0x64>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	4b16      	ldr	r3, [pc, #88]	; (80078e4 <SystemInit+0x64>)
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	0049      	lsls	r1, r1, #1
 800788e:	430a      	orrs	r2, r1
 8007890:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8007892:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <SystemInit+0x64>)
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <SystemInit+0x64>)
 8007898:	4913      	ldr	r1, [pc, #76]	; (80078e8 <SystemInit+0x68>)
 800789a:	400a      	ands	r2, r1
 800789c:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800789e:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <SystemInit+0x64>)
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <SystemInit+0x64>)
 80078a4:	4911      	ldr	r1, [pc, #68]	; (80078ec <SystemInit+0x6c>)
 80078a6:	400a      	ands	r2, r1
 80078a8:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80078aa:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <SystemInit+0x64>)
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <SystemInit+0x64>)
 80078b0:	2101      	movs	r1, #1
 80078b2:	438a      	bics	r2, r1
 80078b4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <SystemInit+0x64>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <SystemInit+0x64>)
 80078bc:	490c      	ldr	r1, [pc, #48]	; (80078f0 <SystemInit+0x70>)
 80078be:	400a      	ands	r2, r1
 80078c0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <SystemInit+0x64>)
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <SystemInit+0x64>)
 80078c8:	490a      	ldr	r1, [pc, #40]	; (80078f4 <SystemInit+0x74>)
 80078ca:	400a      	ands	r2, r1
 80078cc:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <SystemInit+0x64>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078d4:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <SystemInit+0x78>)
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	0512      	lsls	r2, r2, #20
 80078da:	609a      	str	r2, [r3, #8]
#endif
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	40021000 	.word	0x40021000
 80078e8:	88ff400c 	.word	0x88ff400c
 80078ec:	fef6fff6 	.word	0xfef6fff6
 80078f0:	fffbffff 	.word	0xfffbffff
 80078f4:	ff02ffff 	.word	0xff02ffff
 80078f8:	e000ed00 	.word	0xe000ed00

080078fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <HAL_Init+0x30>)
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	4b09      	ldr	r3, [pc, #36]	; (800792c <HAL_Init+0x30>)
 8007906:	2140      	movs	r1, #64	; 0x40
 8007908:	430a      	orrs	r2, r1
 800790a:	601a      	str	r2, [r3, #0]
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800790c:	4b07      	ldr	r3, [pc, #28]	; (800792c <HAL_Init+0x30>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <HAL_Init+0x30>)
 8007912:	2102      	movs	r1, #2
 8007914:	430a      	orrs	r2, r1
 8007916:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8007918:	2003      	movs	r0, #3
 800791a:	f000 f809 	bl	8007930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800791e:	f000 fb2b 	bl	8007f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	0018      	movs	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	40022000 	.word	0x40022000

08007930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8007938:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <HAL_InitTick+0x38>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	23fa      	movs	r3, #250	; 0xfa
 800793e:	0099      	lsls	r1, r3, #2
 8007940:	0010      	movs	r0, r2
 8007942:	f7f8 fbe1 	bl	8000108 <__udivsi3>
 8007946:	0003      	movs	r3, r0
 8007948:	0018      	movs	r0, r3
 800794a:	f000 f93e 	bl	8007bca <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	2301      	movs	r3, #1
 8007952:	425b      	negs	r3, r3
 8007954:	2200      	movs	r2, #0
 8007956:	0018      	movs	r0, r3
 8007958:	f000 f902 	bl	8007b60 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	0018      	movs	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	b002      	add	sp, #8
 8007964:	bd80      	pop	{r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	200001c4 	.word	0x200001c4

0800796c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  uwTick++;
 8007970:	4b03      	ldr	r3, [pc, #12]	; (8007980 <HAL_IncTick+0x14>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	4b02      	ldr	r3, [pc, #8]	; (8007980 <HAL_IncTick+0x14>)
 8007978:	601a      	str	r2, [r3, #0]
}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	200003d4 	.word	0x200003d4

08007984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  return uwTick;
 8007988:	4b02      	ldr	r3, [pc, #8]	; (8007994 <HAL_GetTick+0x10>)
 800798a:	681b      	ldr	r3, [r3, #0]
}
 800798c:	0018      	movs	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	46c0      	nop			; (mov r8, r8)
 8007994:	200003d4 	.word	0x200003d4

08007998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80079a4:	f7ff ffee 	bl	8007984 <HAL_GetTick>
 80079a8:	0003      	movs	r3, r0
 80079aa:	60fb      	str	r3, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80079ac:	46c0      	nop			; (mov r8, r8)
 80079ae:	f7ff ffe9 	bl	8007984 <HAL_GetTick>
 80079b2:	0002      	movs	r2, r0
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d3f7      	bcc.n	80079ae <HAL_Delay+0x16>
  {
  }
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b004      	add	sp, #16
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	0002      	movs	r2, r0
 80079d0:	1dfb      	adds	r3, r7, #7
 80079d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80079d4:	1dfb      	adds	r3, r7, #7
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b7f      	cmp	r3, #127	; 0x7f
 80079da:	d809      	bhi.n	80079f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079dc:	1dfb      	adds	r3, r7, #7
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	001a      	movs	r2, r3
 80079e2:	231f      	movs	r3, #31
 80079e4:	401a      	ands	r2, r3
 80079e6:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <__NVIC_EnableIRQ+0x30>)
 80079e8:	2101      	movs	r1, #1
 80079ea:	4091      	lsls	r1, r2
 80079ec:	000a      	movs	r2, r1
 80079ee:	601a      	str	r2, [r3, #0]
  }
}
 80079f0:	46c0      	nop			; (mov r8, r8)
 80079f2:	46bd      	mov	sp, r7
 80079f4:	b002      	add	sp, #8
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	e000e100 	.word	0xe000e100

080079fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	0002      	movs	r2, r0
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007a08:	1dfb      	adds	r3, r7, #7
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a0e:	d80e      	bhi.n	8007a2e <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a10:	1dfb      	adds	r3, r7, #7
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	001a      	movs	r2, r3
 8007a16:	231f      	movs	r3, #31
 8007a18:	4013      	ands	r3, r2
 8007a1a:	4907      	ldr	r1, [pc, #28]	; (8007a38 <__NVIC_DisableIRQ+0x3c>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	0013      	movs	r3, r2
 8007a22:	2280      	movs	r2, #128	; 0x80
 8007a24:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007a26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007a2a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	46bd      	mov	sp, r7
 8007a32:	b002      	add	sp, #8
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	e000e100 	.word	0xe000e100

08007a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	0002      	movs	r2, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	1dfb      	adds	r3, r7, #7
 8007a48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007a4a:	1dfb      	adds	r3, r7, #7
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a50:	d828      	bhi.n	8007aa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a52:	4a2f      	ldr	r2, [pc, #188]	; (8007b10 <__NVIC_SetPriority+0xd4>)
 8007a54:	1dfb      	adds	r3, r7, #7
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b25b      	sxtb	r3, r3
 8007a5a:	089b      	lsrs	r3, r3, #2
 8007a5c:	33c0      	adds	r3, #192	; 0xc0
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	589b      	ldr	r3, [r3, r2]
 8007a62:	1dfa      	adds	r2, r7, #7
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	0011      	movs	r1, r2
 8007a68:	2203      	movs	r2, #3
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	00d2      	lsls	r2, r2, #3
 8007a6e:	21ff      	movs	r1, #255	; 0xff
 8007a70:	4091      	lsls	r1, r2
 8007a72:	000a      	movs	r2, r1
 8007a74:	43d2      	mvns	r2, r2
 8007a76:	401a      	ands	r2, r3
 8007a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	019b      	lsls	r3, r3, #6
 8007a7e:	22ff      	movs	r2, #255	; 0xff
 8007a80:	401a      	ands	r2, r3
 8007a82:	1dfb      	adds	r3, r7, #7
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	0018      	movs	r0, r3
 8007a88:	2303      	movs	r3, #3
 8007a8a:	4003      	ands	r3, r0
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a90:	481f      	ldr	r0, [pc, #124]	; (8007b10 <__NVIC_SetPriority+0xd4>)
 8007a92:	1dfb      	adds	r3, r7, #7
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b25b      	sxtb	r3, r3
 8007a98:	089b      	lsrs	r3, r3, #2
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	33c0      	adds	r3, #192	; 0xc0
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007aa2:	e031      	b.n	8007b08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007aa4:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <__NVIC_SetPriority+0xd8>)
 8007aa6:	1dfb      	adds	r3, r7, #7
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	0019      	movs	r1, r3
 8007aac:	230f      	movs	r3, #15
 8007aae:	400b      	ands	r3, r1
 8007ab0:	3b08      	subs	r3, #8
 8007ab2:	089b      	lsrs	r3, r3, #2
 8007ab4:	3306      	adds	r3, #6
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	18d3      	adds	r3, r2, r3
 8007aba:	3304      	adds	r3, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	1dfa      	adds	r2, r7, #7
 8007ac0:	7812      	ldrb	r2, [r2, #0]
 8007ac2:	0011      	movs	r1, r2
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	400a      	ands	r2, r1
 8007ac8:	00d2      	lsls	r2, r2, #3
 8007aca:	21ff      	movs	r1, #255	; 0xff
 8007acc:	4091      	lsls	r1, r2
 8007ace:	000a      	movs	r2, r1
 8007ad0:	43d2      	mvns	r2, r2
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	019b      	lsls	r3, r3, #6
 8007ada:	22ff      	movs	r2, #255	; 0xff
 8007adc:	401a      	ands	r2, r3
 8007ade:	1dfb      	adds	r3, r7, #7
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	4003      	ands	r3, r0
 8007ae8:	00db      	lsls	r3, r3, #3
 8007aea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007aec:	4809      	ldr	r0, [pc, #36]	; (8007b14 <__NVIC_SetPriority+0xd8>)
 8007aee:	1dfb      	adds	r3, r7, #7
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	001c      	movs	r4, r3
 8007af4:	230f      	movs	r3, #15
 8007af6:	4023      	ands	r3, r4
 8007af8:	3b08      	subs	r3, #8
 8007afa:	089b      	lsrs	r3, r3, #2
 8007afc:	430a      	orrs	r2, r1
 8007afe:	3306      	adds	r3, #6
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	18c3      	adds	r3, r0, r3
 8007b04:	3304      	adds	r3, #4
 8007b06:	601a      	str	r2, [r3, #0]
}
 8007b08:	46c0      	nop			; (mov r8, r8)
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b003      	add	sp, #12
 8007b0e:	bd90      	pop	{r4, r7, pc}
 8007b10:	e000e100 	.word	0xe000e100
 8007b14:	e000ed00 	.word	0xe000ed00

08007b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	4a0c      	ldr	r2, [pc, #48]	; (8007b58 <SysTick_Config+0x40>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d901      	bls.n	8007b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e010      	b.n	8007b50 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <SysTick_Config+0x44>)
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	3a01      	subs	r2, #1
 8007b34:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b36:	2301      	movs	r3, #1
 8007b38:	425b      	negs	r3, r3
 8007b3a:	2103      	movs	r1, #3
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f7ff ff7d 	bl	8007a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <SysTick_Config+0x44>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <SysTick_Config+0x44>)
 8007b4a:	2207      	movs	r2, #7
 8007b4c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	0018      	movs	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	b002      	add	sp, #8
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	00ffffff 	.word	0x00ffffff
 8007b5c:	e000e010 	.word	0xe000e010

08007b60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	210f      	movs	r1, #15
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	1c02      	adds	r2, r0, #0
 8007b70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	187b      	adds	r3, r7, r1
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	0011      	movs	r1, r2
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f7ff ff5d 	bl	8007a3c <__NVIC_SetPriority>
}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b004      	add	sp, #16
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	0002      	movs	r2, r0
 8007b92:	1dfb      	adds	r3, r7, #7
 8007b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b96:	1dfb      	adds	r3, r7, #7
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	b25b      	sxtb	r3, r3
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f7ff ff13 	bl	80079c8 <__NVIC_EnableIRQ>
}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b002      	add	sp, #8
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	0002      	movs	r2, r0
 8007bb2:	1dfb      	adds	r3, r7, #7
 8007bb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007bb6:	1dfb      	adds	r3, r7, #7
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b25b      	sxtb	r3, r3
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f7ff ff1d 	bl	80079fc <__NVIC_DisableIRQ>
}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b002      	add	sp, #8
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f7ff ff9f 	bl	8007b18 <SysTick_Config>
 8007bda:	0003      	movs	r3, r0
}
 8007bdc:	0018      	movs	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b002      	add	sp, #8
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007be8:	f7fb fe5c 	bl	80038a4 <HAL_SYSTICK_Callback>
}
 8007bec:	46c0      	nop			; (mov r8, r8)
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007c0a:	e14f      	b.n	8007eac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2101      	movs	r1, #1
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4091      	lsls	r1, r2
 8007c16:	000a      	movs	r2, r1
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d100      	bne.n	8007c24 <HAL_GPIO_Init+0x30>
 8007c22:	e140      	b.n	8007ea6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d003      	beq.n	8007c34 <HAL_GPIO_Init+0x40>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2b12      	cmp	r3, #18
 8007c32:	d123      	bne.n	8007c7c <HAL_GPIO_Init+0x88>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	08da      	lsrs	r2, r3, #3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3208      	adds	r2, #8
 8007c3c:	0092      	lsls	r2, r2, #2
 8007c3e:	58d3      	ldr	r3, [r2, r3]
 8007c40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2207      	movs	r2, #7
 8007c46:	4013      	ands	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	220f      	movs	r2, #15
 8007c4c:	409a      	lsls	r2, r3
 8007c4e:	0013      	movs	r3, r2
 8007c50:	43da      	mvns	r2, r3
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4013      	ands	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2107      	movs	r1, #7
 8007c60:	400b      	ands	r3, r1
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	409a      	lsls	r2, r3
 8007c66:	0013      	movs	r3, r2
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	08da      	lsrs	r2, r3, #3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3208      	adds	r2, #8
 8007c76:	0092      	lsls	r2, r2, #2
 8007c78:	6939      	ldr	r1, [r7, #16]
 8007c7a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d00b      	beq.n	8007c9c <HAL_GPIO_Init+0xa8>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d007      	beq.n	8007c9c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c90:	2b11      	cmp	r3, #17
 8007c92:	d003      	beq.n	8007c9c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b12      	cmp	r3, #18
 8007c9a:	d130      	bne.n	8007cfe <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	409a      	lsls	r2, r3
 8007caa:	0013      	movs	r3, r2
 8007cac:	43da      	mvns	r2, r3
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	409a      	lsls	r2, r3
 8007cbe:	0013      	movs	r3, r2
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	409a      	lsls	r2, r3
 8007cd8:	0013      	movs	r3, r2
 8007cda:	43da      	mvns	r2, r3
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	091b      	lsrs	r3, r3, #4
 8007ce8:	2201      	movs	r2, #1
 8007cea:	401a      	ands	r2, r3
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	0013      	movs	r3, r2
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	2203      	movs	r2, #3
 8007d0a:	409a      	lsls	r2, r3
 8007d0c:	0013      	movs	r3, r2
 8007d0e:	43da      	mvns	r2, r3
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4013      	ands	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	401a      	ands	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	409a      	lsls	r2, r3
 8007d24:	0013      	movs	r3, r2
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	0013      	movs	r3, r2
 8007d42:	43da      	mvns	r2, r3
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4013      	ands	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	409a      	lsls	r2, r3
 8007d54:	0013      	movs	r3, r2
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	2380      	movs	r3, #128	; 0x80
 8007d68:	055b      	lsls	r3, r3, #21
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	d100      	bne.n	8007d70 <HAL_GPIO_Init+0x17c>
 8007d6e:	e09a      	b.n	8007ea6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d70:	4b54      	ldr	r3, [pc, #336]	; (8007ec4 <HAL_GPIO_Init+0x2d0>)
 8007d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d74:	4b53      	ldr	r3, [pc, #332]	; (8007ec4 <HAL_GPIO_Init+0x2d0>)
 8007d76:	2101      	movs	r1, #1
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8007d7c:	4a52      	ldr	r2, [pc, #328]	; (8007ec8 <HAL_GPIO_Init+0x2d4>)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	089b      	lsrs	r3, r3, #2
 8007d82:	3302      	adds	r3, #2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	589b      	ldr	r3, [r3, r2]
 8007d88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	4013      	ands	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	220f      	movs	r2, #15
 8007d94:	409a      	lsls	r2, r3
 8007d96:	0013      	movs	r3, r2
 8007d98:	43da      	mvns	r2, r3
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	23a0      	movs	r3, #160	; 0xa0
 8007da4:	05db      	lsls	r3, r3, #23
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d019      	beq.n	8007dde <HAL_GPIO_Init+0x1ea>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a47      	ldr	r2, [pc, #284]	; (8007ecc <HAL_GPIO_Init+0x2d8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <HAL_GPIO_Init+0x1e6>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a46      	ldr	r2, [pc, #280]	; (8007ed0 <HAL_GPIO_Init+0x2dc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00d      	beq.n	8007dd6 <HAL_GPIO_Init+0x1e2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a45      	ldr	r2, [pc, #276]	; (8007ed4 <HAL_GPIO_Init+0x2e0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d007      	beq.n	8007dd2 <HAL_GPIO_Init+0x1de>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a44      	ldr	r2, [pc, #272]	; (8007ed8 <HAL_GPIO_Init+0x2e4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <HAL_GPIO_Init+0x1da>
 8007dca:	2305      	movs	r3, #5
 8007dcc:	e008      	b.n	8007de0 <HAL_GPIO_Init+0x1ec>
 8007dce:	2306      	movs	r3, #6
 8007dd0:	e006      	b.n	8007de0 <HAL_GPIO_Init+0x1ec>
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e004      	b.n	8007de0 <HAL_GPIO_Init+0x1ec>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e002      	b.n	8007de0 <HAL_GPIO_Init+0x1ec>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <HAL_GPIO_Init+0x1ec>
 8007dde:	2300      	movs	r3, #0
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	2103      	movs	r1, #3
 8007de4:	400a      	ands	r2, r1
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	4093      	lsls	r3, r2
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007df0:	4935      	ldr	r1, [pc, #212]	; (8007ec8 <HAL_GPIO_Init+0x2d4>)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	089b      	lsrs	r3, r3, #2
 8007df6:	3302      	adds	r3, #2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007dfe:	4b37      	ldr	r3, [pc, #220]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	43da      	mvns	r2, r3
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	025b      	lsls	r3, r3, #9
 8007e16:	4013      	ands	r3, r2
 8007e18:	d003      	beq.n	8007e22 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007e22:	4b2e      	ldr	r3, [pc, #184]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007e28:	4b2c      	ldr	r3, [pc, #176]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	43da      	mvns	r2, r3
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4013      	ands	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	2380      	movs	r3, #128	; 0x80
 8007e3e:	029b      	lsls	r3, r3, #10
 8007e40:	4013      	ands	r3, r2
 8007e42:	d003      	beq.n	8007e4c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007e4c:	4b23      	ldr	r3, [pc, #140]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e52:	4b22      	ldr	r3, [pc, #136]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	43da      	mvns	r2, r3
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	2380      	movs	r3, #128	; 0x80
 8007e68:	035b      	lsls	r3, r3, #13
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007e76:	4b19      	ldr	r3, [pc, #100]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007e7c:	4b17      	ldr	r3, [pc, #92]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	43da      	mvns	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	2380      	movs	r3, #128	; 0x80
 8007e92:	039b      	lsls	r3, r3, #14
 8007e94:	4013      	ands	r3, r2
 8007e96:	d003      	beq.n	8007ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007ea0:	4b0e      	ldr	r3, [pc, #56]	; (8007edc <HAL_GPIO_Init+0x2e8>)
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	40da      	lsrs	r2, r3
 8007eb4:	1e13      	subs	r3, r2, #0
 8007eb6:	d000      	beq.n	8007eba <HAL_GPIO_Init+0x2c6>
 8007eb8:	e6a8      	b.n	8007c0c <HAL_GPIO_Init+0x18>
  }
}
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b006      	add	sp, #24
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	50000400 	.word	0x50000400
 8007ed0:	50000800 	.word	0x50000800
 8007ed4:	50000c00 	.word	0x50000c00
 8007ed8:	50001c00 	.word	0x50001c00
 8007edc:	40010400 	.word	0x40010400

08007ee0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	0008      	movs	r0, r1
 8007eea:	0011      	movs	r1, r2
 8007eec:	1cbb      	adds	r3, r7, #2
 8007eee:	1c02      	adds	r2, r0, #0
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	1c7b      	adds	r3, r7, #1
 8007ef4:	1c0a      	adds	r2, r1, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8007ef8:	1c7b      	adds	r3, r7, #1
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f00:	1cbb      	adds	r3, r7, #2
 8007f02:	881a      	ldrh	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007f08:	e003      	b.n	8007f12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007f0a:	1cbb      	adds	r3, r7, #2
 8007f0c:	881a      	ldrh	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007f12:	46c0      	nop			; (mov r8, r8)
 8007f14:	46bd      	mov	sp, r7
 8007f16:	b002      	add	sp, #8
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	000a      	movs	r2, r1
 8007f24:	1cbb      	adds	r3, r7, #2
 8007f26:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	695a      	ldr	r2, [r3, #20]
 8007f2c:	1cbb      	adds	r3, r7, #2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	405a      	eors	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	615a      	str	r2, [r3, #20]
}
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b002      	add	sp, #8
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	0002      	movs	r2, r0
 8007f48:	1dbb      	adds	r3, r7, #6
 8007f4a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8007f4c:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	1dba      	adds	r2, r7, #6
 8007f52:	8812      	ldrh	r2, [r2, #0]
 8007f54:	4013      	ands	r3, r2
 8007f56:	d008      	beq.n	8007f6a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f58:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007f5a:	1dba      	adds	r2, r7, #6
 8007f5c:	8812      	ldrh	r2, [r2, #0]
 8007f5e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f60:	1dbb      	adds	r3, r7, #6
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	0018      	movs	r0, r3
 8007f66:	f7fb fcb9 	bl	80038dc <HAL_GPIO_EXTI_Callback>
  }
}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	b002      	add	sp, #8
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	40010400 	.word	0x40010400

08007f78 <HAL_MspInit>:
  * @brief  Initializes the Global BSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* NOTE : This function is eventually modified by the user */ 
}
 8007f7c:	46c0      	nop			; (mov r8, r8)
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	000a      	movs	r2, r1
 8007f8e:	1cfb      	adds	r3, r7, #3
 8007f90:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <HAL_PWR_EnterSLEEPMode+0x54>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	4393      	bics	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <HAL_PWR_EnterSLEEPMode+0x54>)
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <HAL_PWR_EnterSLEEPMode+0x58>)
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <HAL_PWR_EnterSLEEPMode+0x58>)
 8007fb8:	2104      	movs	r1, #4
 8007fba:	438a      	bics	r2, r1
 8007fbc:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007fbe:	1cfb      	adds	r3, r7, #3
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_PWR_EnterSLEEPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007fc6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8007fc8:	e002      	b.n	8007fd0 <HAL_PWR_EnterSLEEPMode+0x4c>
    __SEV();
 8007fca:	bf40      	sev
    __WFE();
 8007fcc:	bf20      	wfe
    __WFE();
 8007fce:	bf20      	wfe
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b004      	add	sp, #16
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40007000 	.word	0x40007000
 8007fdc:	e000ed00 	.word	0xe000ed00

08007fe0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	000a      	movs	r2, r1
 8007fea:	1cfb      	adds	r3, r7, #3
 8007fec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007ff2:	4b13      	ldr	r3, [pc, #76]	; (8008040 <HAL_PWR_EnterSTOPMode+0x60>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	4393      	bics	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008008:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <HAL_PWR_EnterSTOPMode+0x60>)
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800800e:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <HAL_PWR_EnterSTOPMode+0x64>)
 8008010:	691a      	ldr	r2, [r3, #16]
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <HAL_PWR_EnterSTOPMode+0x64>)
 8008014:	2104      	movs	r1, #4
 8008016:	430a      	orrs	r2, r1
 8008018:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800801a:	1cfb      	adds	r3, r7, #3
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008022:	bf30      	wfi
 8008024:	e002      	b.n	800802c <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008026:	bf40      	sev
    __WFE();
 8008028:	bf20      	wfe
    __WFE();
 800802a:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <HAL_PWR_EnterSTOPMode+0x64>)
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	4b04      	ldr	r3, [pc, #16]	; (8008044 <HAL_PWR_EnterSTOPMode+0x64>)
 8008032:	2104      	movs	r1, #4
 8008034:	438a      	bics	r2, r1
 8008036:	611a      	str	r2, [r3, #16]

}
 8008038:	46c0      	nop			; (mov r8, r8)
 800803a:	46bd      	mov	sp, r7
 800803c:	b004      	add	sp, #16
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40007000 	.word	0x40007000
 8008044:	e000ed00 	.word	0xe000ed00

08008048 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <HAL_PWR_EnterSTANDBYMode+0x24>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b06      	ldr	r3, [pc, #24]	; (800806c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8008052:	2102      	movs	r1, #2
 8008054:	430a      	orrs	r2, r1
 8008056:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800805a:	691a      	ldr	r2, [r3, #16]
 800805c:	4b04      	ldr	r3, [pc, #16]	; (8008070 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800805e:	2104      	movs	r1, #4
 8008060:	430a      	orrs	r2, r1
 8008062:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8008064:	bf30      	wfi
}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40007000 	.word	0x40007000
 8008070:	e000ed00 	.word	0xe000ed00

08008074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2201      	movs	r2, #1
 8008086:	4013      	ands	r3, r2
 8008088:	d100      	bne.n	800808c <HAL_RCC_OscConfig+0x18>
 800808a:	e087      	b.n	800819c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800808c:	4bc2      	ldr	r3, [pc, #776]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	220c      	movs	r2, #12
 8008092:	4013      	ands	r3, r2
 8008094:	2b08      	cmp	r3, #8
 8008096:	d00e      	beq.n	80080b6 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008098:	4bbf      	ldr	r3, [pc, #764]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	220c      	movs	r2, #12
 800809e:	4013      	ands	r3, r2
 80080a0:	2b0c      	cmp	r3, #12
 80080a2:	d116      	bne.n	80080d2 <HAL_RCC_OscConfig+0x5e>
 80080a4:	4bbc      	ldr	r3, [pc, #752]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	025b      	lsls	r3, r3, #9
 80080ac:	401a      	ands	r2, r3
 80080ae:	2380      	movs	r3, #128	; 0x80
 80080b0:	025b      	lsls	r3, r3, #9
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d10d      	bne.n	80080d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080b6:	4bb8      	ldr	r3, [pc, #736]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	2380      	movs	r3, #128	; 0x80
 80080bc:	029b      	lsls	r3, r3, #10
 80080be:	4013      	ands	r3, r2
 80080c0:	d100      	bne.n	80080c4 <HAL_RCC_OscConfig+0x50>
 80080c2:	e06a      	b.n	800819a <HAL_RCC_OscConfig+0x126>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d166      	bne.n	800819a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f000 fb70 	bl	80087b2 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	2380      	movs	r3, #128	; 0x80
 80080d8:	025b      	lsls	r3, r3, #9
 80080da:	429a      	cmp	r2, r3
 80080dc:	d107      	bne.n	80080ee <HAL_RCC_OscConfig+0x7a>
 80080de:	4bae      	ldr	r3, [pc, #696]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4bad      	ldr	r3, [pc, #692]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80080e4:	2180      	movs	r1, #128	; 0x80
 80080e6:	0249      	lsls	r1, r1, #9
 80080e8:	430a      	orrs	r2, r1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e027      	b.n	800813e <HAL_RCC_OscConfig+0xca>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	23a0      	movs	r3, #160	; 0xa0
 80080f4:	02db      	lsls	r3, r3, #11
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d10e      	bne.n	8008118 <HAL_RCC_OscConfig+0xa4>
 80080fa:	4ba7      	ldr	r3, [pc, #668]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4ba6      	ldr	r3, [pc, #664]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008100:	2180      	movs	r1, #128	; 0x80
 8008102:	02c9      	lsls	r1, r1, #11
 8008104:	430a      	orrs	r2, r1
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	4ba3      	ldr	r3, [pc, #652]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	4ba2      	ldr	r3, [pc, #648]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800810e:	2180      	movs	r1, #128	; 0x80
 8008110:	0249      	lsls	r1, r1, #9
 8008112:	430a      	orrs	r2, r1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e012      	b.n	800813e <HAL_RCC_OscConfig+0xca>
 8008118:	4b9f      	ldr	r3, [pc, #636]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b9e      	ldr	r3, [pc, #632]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800811e:	499f      	ldr	r1, [pc, #636]	; (800839c <HAL_RCC_OscConfig+0x328>)
 8008120:	400a      	ands	r2, r1
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	4b9c      	ldr	r3, [pc, #624]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	025b      	lsls	r3, r3, #9
 800812c:	4013      	ands	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4b99      	ldr	r3, [pc, #612]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b98      	ldr	r3, [pc, #608]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008138:	4999      	ldr	r1, [pc, #612]	; (80083a0 <HAL_RCC_OscConfig+0x32c>)
 800813a:	400a      	ands	r2, r1
 800813c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d014      	beq.n	8008170 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008146:	f7ff fc1d 	bl	8007984 <HAL_GetTick>
 800814a:	0003      	movs	r3, r0
 800814c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008150:	f7ff fc18 	bl	8007984 <HAL_GetTick>
 8008154:	0002      	movs	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b64      	cmp	r3, #100	; 0x64
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e327      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008162:	4b8d      	ldr	r3, [pc, #564]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	2380      	movs	r3, #128	; 0x80
 8008168:	029b      	lsls	r3, r3, #10
 800816a:	4013      	ands	r3, r2
 800816c:	d0f0      	beq.n	8008150 <HAL_RCC_OscConfig+0xdc>
 800816e:	e015      	b.n	800819c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008170:	f7ff fc08 	bl	8007984 <HAL_GetTick>
 8008174:	0003      	movs	r3, r0
 8008176:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800817a:	f7ff fc03 	bl	8007984 <HAL_GetTick>
 800817e:	0002      	movs	r2, r0
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b64      	cmp	r3, #100	; 0x64
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e312      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800818c:	4b82      	ldr	r3, [pc, #520]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	2380      	movs	r3, #128	; 0x80
 8008192:	029b      	lsls	r3, r3, #10
 8008194:	4013      	ands	r3, r2
 8008196:	d1f0      	bne.n	800817a <HAL_RCC_OscConfig+0x106>
 8008198:	e000      	b.n	800819c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800819a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2202      	movs	r2, #2
 80081a2:	4013      	ands	r3, r2
 80081a4:	d100      	bne.n	80081a8 <HAL_RCC_OscConfig+0x134>
 80081a6:	e06e      	b.n	8008286 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80081a8:	4b7b      	ldr	r3, [pc, #492]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	220c      	movs	r2, #12
 80081ae:	4013      	ands	r3, r2
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d00b      	beq.n	80081cc <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80081b4:	4b78      	ldr	r3, [pc, #480]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	220c      	movs	r2, #12
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b0c      	cmp	r3, #12
 80081be:	d11c      	bne.n	80081fa <HAL_RCC_OscConfig+0x186>
 80081c0:	4b75      	ldr	r3, [pc, #468]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	025b      	lsls	r3, r3, #9
 80081c8:	4013      	ands	r3, r2
 80081ca:	d116      	bne.n	80081fa <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081cc:	4b72      	ldr	r3, [pc, #456]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2204      	movs	r2, #4
 80081d2:	4013      	ands	r3, r2
 80081d4:	d005      	beq.n	80081e2 <HAL_RCC_OscConfig+0x16e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d001      	beq.n	80081e2 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e2e7      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e2:	4b6d      	ldr	r3, [pc, #436]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	4a6f      	ldr	r2, [pc, #444]	; (80083a4 <HAL_RCC_OscConfig+0x330>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	0019      	movs	r1, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	021a      	lsls	r2, r3, #8
 80081f2:	4b69      	ldr	r3, [pc, #420]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80081f4:	430a      	orrs	r2, r1
 80081f6:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081f8:	e045      	b.n	8008286 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d028      	beq.n	8008254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008202:	4b65      	ldr	r3, [pc, #404]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2209      	movs	r2, #9
 8008208:	4393      	bics	r3, r2
 800820a:	0019      	movs	r1, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	4b61      	ldr	r3, [pc, #388]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008212:	430a      	orrs	r2, r1
 8008214:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008216:	f7ff fbb5 	bl	8007984 <HAL_GetTick>
 800821a:	0003      	movs	r3, r0
 800821c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800821e:	e008      	b.n	8008232 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008220:	f7ff fbb0 	bl	8007984 <HAL_GetTick>
 8008224:	0002      	movs	r2, r0
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b02      	cmp	r3, #2
 800822c:	d901      	bls.n	8008232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e2bf      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008232:	4b59      	ldr	r3, [pc, #356]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2204      	movs	r2, #4
 8008238:	4013      	ands	r3, r2
 800823a:	d0f1      	beq.n	8008220 <HAL_RCC_OscConfig+0x1ac>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823c:	4b56      	ldr	r3, [pc, #344]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	4a58      	ldr	r2, [pc, #352]	; (80083a4 <HAL_RCC_OscConfig+0x330>)
 8008242:	4013      	ands	r3, r2
 8008244:	0019      	movs	r1, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	021a      	lsls	r2, r3, #8
 800824c:	4b52      	ldr	r3, [pc, #328]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	e018      	b.n	8008286 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008254:	4b50      	ldr	r3, [pc, #320]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	4b4f      	ldr	r3, [pc, #316]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800825a:	2101      	movs	r1, #1
 800825c:	438a      	bics	r2, r1
 800825e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008260:	f7ff fb90 	bl	8007984 <HAL_GetTick>
 8008264:	0003      	movs	r3, r0
 8008266:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008268:	e008      	b.n	800827c <HAL_RCC_OscConfig+0x208>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800826a:	f7ff fb8b 	bl	8007984 <HAL_GetTick>
 800826e:	0002      	movs	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e29a      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800827c:	4b46      	ldr	r3, [pc, #280]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2204      	movs	r2, #4
 8008282:	4013      	ands	r3, r2
 8008284:	d1f1      	bne.n	800826a <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2210      	movs	r2, #16
 800828c:	4013      	ands	r3, r2
 800828e:	d100      	bne.n	8008292 <HAL_RCC_OscConfig+0x21e>
 8008290:	e0c5      	b.n	800841e <HAL_RCC_OscConfig+0x3aa>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8008292:	4b41      	ldr	r3, [pc, #260]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	220c      	movs	r2, #12
 8008298:	4013      	ands	r3, r2
 800829a:	d164      	bne.n	8008366 <HAL_RCC_OscConfig+0x2f2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800829c:	4b3e      	ldr	r3, [pc, #248]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	2380      	movs	r3, #128	; 0x80
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4013      	ands	r3, r2
 80082a6:	d005      	beq.n	80082b4 <HAL_RCC_OscConfig+0x240>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e27e      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082b8:	4b37      	ldr	r3, [pc, #220]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80082ba:	6859      	ldr	r1, [r3, #4]
 80082bc:	23e0      	movs	r3, #224	; 0xe0
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	400b      	ands	r3, r1
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d91d      	bls.n	8008302 <HAL_RCC_OscConfig+0x28e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	0018      	movs	r0, r3
 80082cc:	f000 fc28 	bl	8008b20 <RCC_SetFlashLatencyFromMSIRange>
 80082d0:	1e03      	subs	r3, r0, #0
 80082d2:	d001      	beq.n	80082d8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e26c      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082d8:	4b2f      	ldr	r3, [pc, #188]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	4a32      	ldr	r2, [pc, #200]	; (80083a8 <HAL_RCC_OscConfig+0x334>)
 80082de:	4013      	ands	r3, r2
 80082e0:	0019      	movs	r1, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082e6:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80082e8:	430a      	orrs	r2, r1
 80082ea:	605a      	str	r2, [r3, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082ec:	4b2a      	ldr	r3, [pc, #168]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	021b      	lsls	r3, r3, #8
 80082f2:	0a19      	lsrs	r1, r3, #8
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	061a      	lsls	r2, r3, #24
 80082fa:	4b27      	ldr	r3, [pc, #156]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 80082fc:	430a      	orrs	r2, r1
 80082fe:	605a      	str	r2, [r3, #4]
 8008300:	e01c      	b.n	800833c <HAL_RCC_OscConfig+0x2c8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008302:	4b25      	ldr	r3, [pc, #148]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	4a28      	ldr	r2, [pc, #160]	; (80083a8 <HAL_RCC_OscConfig+0x334>)
 8008308:	4013      	ands	r3, r2
 800830a:	0019      	movs	r1, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008310:	4b21      	ldr	r3, [pc, #132]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008316:	4b20      	ldr	r3, [pc, #128]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	0a19      	lsrs	r1, r3, #8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	061a      	lsls	r2, r3, #24
 8008324:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	0018      	movs	r0, r3
 8008330:	f000 fbf6 	bl	8008b20 <RCC_SetFlashLatencyFromMSIRange>
 8008334:	1e03      	subs	r3, r0, #0
 8008336:	d001      	beq.n	800833c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e23a      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	0b5b      	lsrs	r3, r3, #13
 8008342:	3301      	adds	r3, #1
 8008344:	2280      	movs	r2, #128	; 0x80
 8008346:	0212      	lsls	r2, r2, #8
 8008348:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800834a:	4b13      	ldr	r3, [pc, #76]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	091b      	lsrs	r3, r3, #4
 8008350:	210f      	movs	r1, #15
 8008352:	400b      	ands	r3, r1
 8008354:	4915      	ldr	r1, [pc, #84]	; (80083ac <HAL_RCC_OscConfig+0x338>)
 8008356:	5ccb      	ldrb	r3, [r1, r3]
 8008358:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800835a:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <HAL_RCC_OscConfig+0x33c>)
 800835c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800835e:	2003      	movs	r0, #3
 8008360:	f7ff fae6 	bl	8007930 <HAL_InitTick>
 8008364:	e05b      	b.n	800841e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d03d      	beq.n	80083ea <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800836e:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <HAL_RCC_OscConfig+0x324>)
 8008374:	2180      	movs	r1, #128	; 0x80
 8008376:	0049      	lsls	r1, r1, #1
 8008378:	430a      	orrs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800837c:	f7ff fb02 	bl	8007984 <HAL_GetTick>
 8008380:	0003      	movs	r3, r0
 8008382:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8008384:	e016      	b.n	80083b4 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008386:	f7ff fafd 	bl	8007984 <HAL_GetTick>
 800838a:	0002      	movs	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d90f      	bls.n	80083b4 <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e20c      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
 8008398:	40021000 	.word	0x40021000
 800839c:	fffeffff 	.word	0xfffeffff
 80083a0:	fffbffff 	.word	0xfffbffff
 80083a4:	ffffe0ff 	.word	0xffffe0ff
 80083a8:	ffff1fff 	.word	0xffff1fff
 80083ac:	080099ec 	.word	0x080099ec
 80083b0:	200001c4 	.word	0x200001c4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80083b4:	4bc8      	ldr	r3, [pc, #800]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	2380      	movs	r3, #128	; 0x80
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4013      	ands	r3, r2
 80083be:	d0e2      	beq.n	8008386 <HAL_RCC_OscConfig+0x312>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083c0:	4bc5      	ldr	r3, [pc, #788]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4ac5      	ldr	r2, [pc, #788]	; (80086dc <HAL_RCC_OscConfig+0x668>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	0019      	movs	r1, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083ce:	4bc2      	ldr	r3, [pc, #776]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80083d0:	430a      	orrs	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083d4:	4bc0      	ldr	r3, [pc, #768]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	0a19      	lsrs	r1, r3, #8
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	061a      	lsls	r2, r3, #24
 80083e2:	4bbd      	ldr	r3, [pc, #756]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80083e4:	430a      	orrs	r2, r1
 80083e6:	605a      	str	r2, [r3, #4]
 80083e8:	e019      	b.n	800841e <HAL_RCC_OscConfig+0x3aa>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80083ea:	4bbb      	ldr	r3, [pc, #748]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	4bba      	ldr	r3, [pc, #744]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80083f0:	49bb      	ldr	r1, [pc, #748]	; (80086e0 <HAL_RCC_OscConfig+0x66c>)
 80083f2:	400a      	ands	r2, r1
 80083f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f6:	f7ff fac5 	bl	8007984 <HAL_GetTick>
 80083fa:	0003      	movs	r3, r0
 80083fc:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80083fe:	e008      	b.n	8008412 <HAL_RCC_OscConfig+0x39e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008400:	f7ff fac0 	bl	8007984 <HAL_GetTick>
 8008404:	0002      	movs	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d901      	bls.n	8008412 <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e1cf      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8008412:	4bb1      	ldr	r3, [pc, #708]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	2380      	movs	r3, #128	; 0x80
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4013      	ands	r3, r2
 800841c:	d1f0      	bne.n	8008400 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2208      	movs	r2, #8
 8008424:	4013      	ands	r3, r2
 8008426:	d036      	beq.n	8008496 <HAL_RCC_OscConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d019      	beq.n	8008464 <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008430:	4ba9      	ldr	r3, [pc, #676]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008434:	4ba8      	ldr	r3, [pc, #672]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008436:	2101      	movs	r1, #1
 8008438:	430a      	orrs	r2, r1
 800843a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800843c:	f7ff faa2 	bl	8007984 <HAL_GetTick>
 8008440:	0003      	movs	r3, r0
 8008442:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008444:	e008      	b.n	8008458 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008446:	f7ff fa9d 	bl	8007984 <HAL_GetTick>
 800844a:	0002      	movs	r2, r0
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e1ac      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008458:	4b9f      	ldr	r3, [pc, #636]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	2202      	movs	r2, #2
 800845e:	4013      	ands	r3, r2
 8008460:	d0f1      	beq.n	8008446 <HAL_RCC_OscConfig+0x3d2>
 8008462:	e018      	b.n	8008496 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008464:	4b9c      	ldr	r3, [pc, #624]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008468:	4b9b      	ldr	r3, [pc, #620]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800846a:	2101      	movs	r1, #1
 800846c:	438a      	bics	r2, r1
 800846e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008470:	f7ff fa88 	bl	8007984 <HAL_GetTick>
 8008474:	0003      	movs	r3, r0
 8008476:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x418>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800847a:	f7ff fa83 	bl	8007984 <HAL_GetTick>
 800847e:	0002      	movs	r2, r0
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x418>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e192      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800848c:	4b92      	ldr	r3, [pc, #584]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800848e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008490:	2202      	movs	r2, #2
 8008492:	4013      	ands	r3, r2
 8008494:	d1f1      	bne.n	800847a <HAL_RCC_OscConfig+0x406>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2204      	movs	r2, #4
 800849c:	4013      	ands	r3, r2
 800849e:	d100      	bne.n	80084a2 <HAL_RCC_OscConfig+0x42e>
 80084a0:	e0af      	b.n	8008602 <HAL_RCC_OscConfig+0x58e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084a2:	2317      	movs	r3, #23
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084aa:	4b8b      	ldr	r3, [pc, #556]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80084ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ae:	2380      	movs	r3, #128	; 0x80
 80084b0:	055b      	lsls	r3, r3, #21
 80084b2:	4013      	ands	r3, r2
 80084b4:	d10a      	bne.n	80084cc <HAL_RCC_OscConfig+0x458>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084b6:	4b88      	ldr	r3, [pc, #544]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80084b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ba:	4b87      	ldr	r3, [pc, #540]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80084bc:	2180      	movs	r1, #128	; 0x80
 80084be:	0549      	lsls	r1, r1, #21
 80084c0:	430a      	orrs	r2, r1
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80084c4:	2317      	movs	r3, #23
 80084c6:	18fb      	adds	r3, r7, r3
 80084c8:	2201      	movs	r2, #1
 80084ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084cc:	4b85      	ldr	r3, [pc, #532]	; (80086e4 <HAL_RCC_OscConfig+0x670>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4013      	ands	r3, r2
 80084d6:	d11a      	bne.n	800850e <HAL_RCC_OscConfig+0x49a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084d8:	4b82      	ldr	r3, [pc, #520]	; (80086e4 <HAL_RCC_OscConfig+0x670>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	4b81      	ldr	r3, [pc, #516]	; (80086e4 <HAL_RCC_OscConfig+0x670>)
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	0049      	lsls	r1, r1, #1
 80084e2:	430a      	orrs	r2, r1
 80084e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084e6:	f7ff fa4d 	bl	8007984 <HAL_GetTick>
 80084ea:	0003      	movs	r3, r0
 80084ec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0x48e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084f0:	f7ff fa48 	bl	8007984 <HAL_GetTick>
 80084f4:	0002      	movs	r2, r0
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b64      	cmp	r3, #100	; 0x64
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e157      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008502:	4b78      	ldr	r3, [pc, #480]	; (80086e4 <HAL_RCC_OscConfig+0x670>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	2380      	movs	r3, #128	; 0x80
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	4013      	ands	r3, r2
 800850c:	d0f0      	beq.n	80084f0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	2380      	movs	r3, #128	; 0x80
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	429a      	cmp	r2, r3
 8008518:	d107      	bne.n	800852a <HAL_RCC_OscConfig+0x4b6>
 800851a:	4b6f      	ldr	r3, [pc, #444]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800851c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800851e:	4b6e      	ldr	r3, [pc, #440]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008520:	2180      	movs	r1, #128	; 0x80
 8008522:	0049      	lsls	r1, r1, #1
 8008524:	430a      	orrs	r2, r1
 8008526:	651a      	str	r2, [r3, #80]	; 0x50
 8008528:	e031      	b.n	800858e <HAL_RCC_OscConfig+0x51a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10c      	bne.n	800854c <HAL_RCC_OscConfig+0x4d8>
 8008532:	4b69      	ldr	r3, [pc, #420]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008536:	4b68      	ldr	r3, [pc, #416]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008538:	4969      	ldr	r1, [pc, #420]	; (80086e0 <HAL_RCC_OscConfig+0x66c>)
 800853a:	400a      	ands	r2, r1
 800853c:	651a      	str	r2, [r3, #80]	; 0x50
 800853e:	4b66      	ldr	r3, [pc, #408]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008542:	4b65      	ldr	r3, [pc, #404]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008544:	4968      	ldr	r1, [pc, #416]	; (80086e8 <HAL_RCC_OscConfig+0x674>)
 8008546:	400a      	ands	r2, r1
 8008548:	651a      	str	r2, [r3, #80]	; 0x50
 800854a:	e020      	b.n	800858e <HAL_RCC_OscConfig+0x51a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	23a0      	movs	r3, #160	; 0xa0
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	429a      	cmp	r2, r3
 8008556:	d10e      	bne.n	8008576 <HAL_RCC_OscConfig+0x502>
 8008558:	4b5f      	ldr	r3, [pc, #380]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800855a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800855c:	4b5e      	ldr	r3, [pc, #376]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	00c9      	lsls	r1, r1, #3
 8008562:	430a      	orrs	r2, r1
 8008564:	651a      	str	r2, [r3, #80]	; 0x50
 8008566:	4b5c      	ldr	r3, [pc, #368]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800856a:	4b5b      	ldr	r3, [pc, #364]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800856c:	2180      	movs	r1, #128	; 0x80
 800856e:	0049      	lsls	r1, r1, #1
 8008570:	430a      	orrs	r2, r1
 8008572:	651a      	str	r2, [r3, #80]	; 0x50
 8008574:	e00b      	b.n	800858e <HAL_RCC_OscConfig+0x51a>
 8008576:	4b58      	ldr	r3, [pc, #352]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800857a:	4b57      	ldr	r3, [pc, #348]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800857c:	4958      	ldr	r1, [pc, #352]	; (80086e0 <HAL_RCC_OscConfig+0x66c>)
 800857e:	400a      	ands	r2, r1
 8008580:	651a      	str	r2, [r3, #80]	; 0x50
 8008582:	4b55      	ldr	r3, [pc, #340]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008586:	4b54      	ldr	r3, [pc, #336]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008588:	4957      	ldr	r1, [pc, #348]	; (80086e8 <HAL_RCC_OscConfig+0x674>)
 800858a:	400a      	ands	r2, r1
 800858c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d015      	beq.n	80085c2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008596:	f7ff f9f5 	bl	8007984 <HAL_GetTick>
 800859a:	0003      	movs	r3, r0
 800859c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800859e:	e009      	b.n	80085b4 <HAL_RCC_OscConfig+0x540>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085a0:	f7ff f9f0 	bl	8007984 <HAL_GetTick>
 80085a4:	0002      	movs	r2, r0
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	4a50      	ldr	r2, [pc, #320]	; (80086ec <HAL_RCC_OscConfig+0x678>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d901      	bls.n	80085b4 <HAL_RCC_OscConfig+0x540>
        {
          return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e0fe      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b4:	4b48      	ldr	r3, [pc, #288]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80085b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4013      	ands	r3, r2
 80085be:	d0ef      	beq.n	80085a0 <HAL_RCC_OscConfig+0x52c>
 80085c0:	e014      	b.n	80085ec <HAL_RCC_OscConfig+0x578>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085c2:	f7ff f9df 	bl	8007984 <HAL_GetTick>
 80085c6:	0003      	movs	r3, r0
 80085c8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085ca:	e009      	b.n	80085e0 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085cc:	f7ff f9da 	bl	8007984 <HAL_GetTick>
 80085d0:	0002      	movs	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	4a45      	ldr	r2, [pc, #276]	; (80086ec <HAL_RCC_OscConfig+0x678>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e0e8      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085e0:	4b3d      	ldr	r3, [pc, #244]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80085e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e4:	2380      	movs	r3, #128	; 0x80
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4013      	ands	r3, r2
 80085ea:	d1ef      	bne.n	80085cc <HAL_RCC_OscConfig+0x558>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80085ec:	2317      	movs	r3, #23
 80085ee:	18fb      	adds	r3, r7, r3
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d105      	bne.n	8008602 <HAL_RCC_OscConfig+0x58e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085f6:	4b38      	ldr	r3, [pc, #224]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80085f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fa:	4b37      	ldr	r3, [pc, #220]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80085fc:	493c      	ldr	r1, [pc, #240]	; (80086f0 <HAL_RCC_OscConfig+0x67c>)
 80085fe:	400a      	ands	r2, r1
 8008600:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2220      	movs	r2, #32
 8008608:	4013      	ands	r3, r2
 800860a:	d049      	beq.n	80086a0 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d026      	beq.n	8008662 <HAL_RCC_OscConfig+0x5ee>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008614:	4b30      	ldr	r3, [pc, #192]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	4b2f      	ldr	r3, [pc, #188]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 800861a:	2101      	movs	r1, #1
 800861c:	430a      	orrs	r2, r1
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	4b2d      	ldr	r3, [pc, #180]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008624:	4b2c      	ldr	r3, [pc, #176]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008626:	2101      	movs	r1, #1
 8008628:	430a      	orrs	r2, r1
 800862a:	635a      	str	r2, [r3, #52]	; 0x34
 800862c:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <HAL_RCC_OscConfig+0x680>)
 800862e:	6a1a      	ldr	r2, [r3, #32]
 8008630:	4b30      	ldr	r3, [pc, #192]	; (80086f4 <HAL_RCC_OscConfig+0x680>)
 8008632:	2180      	movs	r1, #128	; 0x80
 8008634:	0189      	lsls	r1, r1, #6
 8008636:	430a      	orrs	r2, r1
 8008638:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800863a:	f7ff f9a3 	bl	8007984 <HAL_GetTick>
 800863e:	0003      	movs	r3, r0
 8008640:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0x5e2>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008644:	f7ff f99e 	bl	8007984 <HAL_GetTick>
 8008648:	0002      	movs	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0x5e2>
          {
            return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e0ad      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008656:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2202      	movs	r2, #2
 800865c:	4013      	ands	r3, r2
 800865e:	d0f1      	beq.n	8008644 <HAL_RCC_OscConfig+0x5d0>
 8008660:	e01e      	b.n	80086a0 <HAL_RCC_OscConfig+0x62c>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008662:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008664:	689a      	ldr	r2, [r3, #8]
 8008666:	4b1c      	ldr	r3, [pc, #112]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008668:	2101      	movs	r1, #1
 800866a:	438a      	bics	r2, r1
 800866c:	609a      	str	r2, [r3, #8]
 800866e:	4b21      	ldr	r3, [pc, #132]	; (80086f4 <HAL_RCC_OscConfig+0x680>)
 8008670:	6a1a      	ldr	r2, [r3, #32]
 8008672:	4b20      	ldr	r3, [pc, #128]	; (80086f4 <HAL_RCC_OscConfig+0x680>)
 8008674:	4920      	ldr	r1, [pc, #128]	; (80086f8 <HAL_RCC_OscConfig+0x684>)
 8008676:	400a      	ands	r2, r1
 8008678:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800867a:	f7ff f983 	bl	8007984 <HAL_GetTick>
 800867e:	0003      	movs	r3, r0
 8008680:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x622>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008684:	f7ff f97e 	bl	8007984 <HAL_GetTick>
 8008688:	0002      	movs	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x622>
          {
            return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e08d      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008696:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2202      	movs	r2, #2
 800869c:	4013      	ands	r3, r2
 800869e:	d1f1      	bne.n	8008684 <HAL_RCC_OscConfig+0x610>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d100      	bne.n	80086aa <HAL_RCC_OscConfig+0x636>
 80086a8:	e082      	b.n	80087b0 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086aa:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	220c      	movs	r2, #12
 80086b0:	4013      	ands	r3, r2
 80086b2:	2b0c      	cmp	r3, #12
 80086b4:	d100      	bne.n	80086b8 <HAL_RCC_OscConfig+0x644>
 80086b6:	e079      	b.n	80087ac <HAL_RCC_OscConfig+0x738>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d15a      	bne.n	8008776 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086c0:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	4b04      	ldr	r3, [pc, #16]	; (80086d8 <HAL_RCC_OscConfig+0x664>)
 80086c6:	490d      	ldr	r1, [pc, #52]	; (80086fc <HAL_RCC_OscConfig+0x688>)
 80086c8:	400a      	ands	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086cc:	f7ff f95a 	bl	8007984 <HAL_GetTick>
 80086d0:	0003      	movs	r3, r0
 80086d2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80086d4:	e01d      	b.n	8008712 <HAL_RCC_OscConfig+0x69e>
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	40021000 	.word	0x40021000
 80086dc:	ffff1fff 	.word	0xffff1fff
 80086e0:	fffffeff 	.word	0xfffffeff
 80086e4:	40007000 	.word	0x40007000
 80086e8:	fffffbff 	.word	0xfffffbff
 80086ec:	00001388 	.word	0x00001388
 80086f0:	efffffff 	.word	0xefffffff
 80086f4:	40010000 	.word	0x40010000
 80086f8:	ffffdfff 	.word	0xffffdfff
 80086fc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008700:	f7ff f940 	bl	8007984 <HAL_GetTick>
 8008704:	0002      	movs	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e04f      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008712:	4b2a      	ldr	r3, [pc, #168]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	2380      	movs	r3, #128	; 0x80
 8008718:	049b      	lsls	r3, r3, #18
 800871a:	4013      	ands	r3, r2
 800871c:	d1f0      	bne.n	8008700 <HAL_RCC_OscConfig+0x68c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800871e:	4b27      	ldr	r3, [pc, #156]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	4a27      	ldr	r2, [pc, #156]	; (80087c0 <HAL_RCC_OscConfig+0x74c>)
 8008724:	4013      	ands	r3, r2
 8008726:	0019      	movs	r1, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008736:	431a      	orrs	r2, r3
 8008738:	4b20      	ldr	r3, [pc, #128]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 800873a:	430a      	orrs	r2, r1
 800873c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800873e:	4b1f      	ldr	r3, [pc, #124]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4b1e      	ldr	r3, [pc, #120]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 8008744:	2180      	movs	r1, #128	; 0x80
 8008746:	0449      	lsls	r1, r1, #17
 8008748:	430a      	orrs	r2, r1
 800874a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800874c:	f7ff f91a 	bl	8007984 <HAL_GetTick>
 8008750:	0003      	movs	r3, r0
 8008752:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008754:	e008      	b.n	8008768 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008756:	f7ff f915 	bl	8007984 <HAL_GetTick>
 800875a:	0002      	movs	r2, r0
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e024      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008768:	4b14      	ldr	r3, [pc, #80]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	2380      	movs	r3, #128	; 0x80
 800876e:	049b      	lsls	r3, r3, #18
 8008770:	4013      	ands	r3, r2
 8008772:	d0f0      	beq.n	8008756 <HAL_RCC_OscConfig+0x6e2>
 8008774:	e01c      	b.n	80087b0 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 800877c:	4911      	ldr	r1, [pc, #68]	; (80087c4 <HAL_RCC_OscConfig+0x750>)
 800877e:	400a      	ands	r2, r1
 8008780:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008782:	f7ff f8ff 	bl	8007984 <HAL_GetTick>
 8008786:	0003      	movs	r3, r0
 8008788:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800878c:	f7ff f8fa 	bl	8007984 <HAL_GetTick>
 8008790:	0002      	movs	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e009      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800879e:	4b07      	ldr	r3, [pc, #28]	; (80087bc <HAL_RCC_OscConfig+0x748>)
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	2380      	movs	r3, #128	; 0x80
 80087a4:	049b      	lsls	r3, r3, #18
 80087a6:	4013      	ands	r3, r2
 80087a8:	d1f0      	bne.n	800878c <HAL_RCC_OscConfig+0x718>
 80087aa:	e001      	b.n	80087b0 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <HAL_RCC_OscConfig+0x73e>
    }
  }
  
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	0018      	movs	r0, r3
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b006      	add	sp, #24
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	40021000 	.word	0x40021000
 80087c0:	ff02ffff 	.word	0xff02ffff
 80087c4:	feffffff 	.word	0xfeffffff

080087c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80087d6:	4b83      	ldr	r3, [pc, #524]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2201      	movs	r2, #1
 80087dc:	4013      	ands	r3, r2
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d911      	bls.n	8008808 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087e4:	4b7f      	ldr	r3, [pc, #508]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2201      	movs	r2, #1
 80087ea:	4393      	bics	r3, r2
 80087ec:	0019      	movs	r1, r3
 80087ee:	4b7d      	ldr	r3, [pc, #500]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80087f6:	4b7b      	ldr	r3, [pc, #492]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2201      	movs	r2, #1
 80087fc:	4013      	ands	r3, r2
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0e8      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2202      	movs	r2, #2
 800880e:	4013      	ands	r3, r2
 8008810:	d009      	beq.n	8008826 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008812:	4b75      	ldr	r3, [pc, #468]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	22f0      	movs	r2, #240	; 0xf0
 8008818:	4393      	bics	r3, r2
 800881a:	0019      	movs	r1, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	4b71      	ldr	r3, [pc, #452]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 8008822:	430a      	orrs	r2, r1
 8008824:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2201      	movs	r2, #1
 800882c:	4013      	ands	r3, r2
 800882e:	d100      	bne.n	8008832 <HAL_RCC_ClockConfig+0x6a>
 8008830:	e089      	b.n	8008946 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d107      	bne.n	800884a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800883a:	4b6b      	ldr	r3, [pc, #428]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	029b      	lsls	r3, r3, #10
 8008842:	4013      	ands	r3, r2
 8008844:	d120      	bne.n	8008888 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e0c7      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b03      	cmp	r3, #3
 8008850:	d107      	bne.n	8008862 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008852:	4b65      	ldr	r3, [pc, #404]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	2380      	movs	r3, #128	; 0x80
 8008858:	049b      	lsls	r3, r3, #18
 800885a:	4013      	ands	r3, r2
 800885c:	d114      	bne.n	8008888 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e0bb      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d106      	bne.n	8008878 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800886a:	4b5f      	ldr	r3, [pc, #380]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2204      	movs	r2, #4
 8008870:	4013      	ands	r3, r2
 8008872:	d109      	bne.n	8008888 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0b0      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8008878:	4b5b      	ldr	r3, [pc, #364]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	2380      	movs	r3, #128	; 0x80
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4013      	ands	r3, r2
 8008882:	d101      	bne.n	8008888 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e0a8      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008888:	4b57      	ldr	r3, [pc, #348]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	2203      	movs	r2, #3
 800888e:	4393      	bics	r3, r2
 8008890:	0019      	movs	r1, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 8008898:	430a      	orrs	r2, r1
 800889a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800889c:	f7ff f872 	bl	8007984 <HAL_GetTick>
 80088a0:	0003      	movs	r3, r0
 80088a2:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d111      	bne.n	80088d0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088ac:	e009      	b.n	80088c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088ae:	f7ff f869 	bl	8007984 <HAL_GetTick>
 80088b2:	0002      	movs	r2, r0
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	4a4c      	ldr	r2, [pc, #304]	; (80089ec <HAL_RCC_ClockConfig+0x224>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e08b      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088c2:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	220c      	movs	r2, #12
 80088c8:	4013      	ands	r3, r2
 80088ca:	2b08      	cmp	r3, #8
 80088cc:	d1ef      	bne.n	80088ae <HAL_RCC_ClockConfig+0xe6>
 80088ce:	e03a      	b.n	8008946 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d111      	bne.n	80088fc <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088d8:	e009      	b.n	80088ee <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088da:	f7ff f853 	bl	8007984 <HAL_GetTick>
 80088de:	0002      	movs	r2, r0
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	4a41      	ldr	r2, [pc, #260]	; (80089ec <HAL_RCC_ClockConfig+0x224>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e075      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088ee:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	220c      	movs	r2, #12
 80088f4:	4013      	ands	r3, r2
 80088f6:	2b0c      	cmp	r3, #12
 80088f8:	d1ef      	bne.n	80088da <HAL_RCC_ClockConfig+0x112>
 80088fa:	e024      	b.n	8008946 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d11b      	bne.n	800893c <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008904:	e009      	b.n	800891a <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008906:	f7ff f83d 	bl	8007984 <HAL_GetTick>
 800890a:	0002      	movs	r2, r0
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	4a36      	ldr	r2, [pc, #216]	; (80089ec <HAL_RCC_ClockConfig+0x224>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d901      	bls.n	800891a <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e05f      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800891a:	4b33      	ldr	r3, [pc, #204]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	220c      	movs	r2, #12
 8008920:	4013      	ands	r3, r2
 8008922:	2b04      	cmp	r3, #4
 8008924:	d1ef      	bne.n	8008906 <HAL_RCC_ClockConfig+0x13e>
 8008926:	e00e      	b.n	8008946 <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008928:	f7ff f82c 	bl	8007984 <HAL_GetTick>
 800892c:	0002      	movs	r2, r0
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	4a2e      	ldr	r2, [pc, #184]	; (80089ec <HAL_RCC_ClockConfig+0x224>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d901      	bls.n	800893c <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e04e      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800893c:	4b2a      	ldr	r3, [pc, #168]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	220c      	movs	r2, #12
 8008942:	4013      	ands	r3, r2
 8008944:	d1f0      	bne.n	8008928 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008946:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2201      	movs	r2, #1
 800894c:	4013      	ands	r3, r2
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d211      	bcs.n	8008978 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008954:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2201      	movs	r2, #1
 800895a:	4393      	bics	r3, r2
 800895c:	0019      	movs	r1, r3
 800895e:	4b21      	ldr	r3, [pc, #132]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008966:	4b1f      	ldr	r3, [pc, #124]	; (80089e4 <HAL_RCC_ClockConfig+0x21c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2201      	movs	r2, #1
 800896c:	4013      	ands	r3, r2
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d001      	beq.n	8008978 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e030      	b.n	80089da <HAL_RCC_ClockConfig+0x212>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2204      	movs	r2, #4
 800897e:	4013      	ands	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	4a1a      	ldr	r2, [pc, #104]	; (80089f0 <HAL_RCC_ClockConfig+0x228>)
 8008988:	4013      	ands	r3, r2
 800898a:	0019      	movs	r1, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 8008992:	430a      	orrs	r2, r1
 8008994:	60da      	str	r2, [r3, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2208      	movs	r2, #8
 800899c:	4013      	ands	r3, r2
 800899e:	d00a      	beq.n	80089b6 <HAL_RCC_ClockConfig+0x1ee>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	4a13      	ldr	r2, [pc, #76]	; (80089f4 <HAL_RCC_ClockConfig+0x22c>)
 80089a6:	4013      	ands	r3, r2
 80089a8:	0019      	movs	r1, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	00da      	lsls	r2, r3, #3
 80089b0:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 80089b2:	430a      	orrs	r2, r1
 80089b4:	60da      	str	r2, [r3, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80089b6:	f000 f823 	bl	8008a00 <HAL_RCC_GetSysClockFreq>
 80089ba:	0001      	movs	r1, r0
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <HAL_RCC_ClockConfig+0x220>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	091b      	lsrs	r3, r3, #4
 80089c2:	220f      	movs	r2, #15
 80089c4:	4013      	ands	r3, r2
 80089c6:	4a0c      	ldr	r2, [pc, #48]	; (80089f8 <HAL_RCC_ClockConfig+0x230>)
 80089c8:	5cd3      	ldrb	r3, [r2, r3]
 80089ca:	000a      	movs	r2, r1
 80089cc:	40da      	lsrs	r2, r3
 80089ce:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <HAL_RCC_ClockConfig+0x234>)
 80089d0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80089d2:	2003      	movs	r0, #3
 80089d4:	f7fe ffac 	bl	8007930 <HAL_InitTick>
  
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	0018      	movs	r0, r3
 80089dc:	46bd      	mov	sp, r7
 80089de:	b004      	add	sp, #16
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	40022000 	.word	0x40022000
 80089e8:	40021000 	.word	0x40021000
 80089ec:	00001388 	.word	0x00001388
 80089f0:	fffff8ff 	.word	0xfffff8ff
 80089f4:	ffffc7ff 	.word	0xffffc7ff
 80089f8:	080099ec 	.word	0x080099ec
 80089fc:	200001c4 	.word	0x200001c4

08008a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	2300      	movs	r3, #0
 8008a18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8008a1e:	4b3b      	ldr	r3, [pc, #236]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	220c      	movs	r2, #12
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2b08      	cmp	r3, #8
 8008a2c:	d00e      	beq.n	8008a4c <HAL_RCC_GetSysClockFreq+0x4c>
 8008a2e:	2b0c      	cmp	r3, #12
 8008a30:	d00f      	beq.n	8008a52 <HAL_RCC_GetSysClockFreq+0x52>
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d157      	bne.n	8008ae6 <HAL_RCC_GetSysClockFreq+0xe6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8008a36:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2210      	movs	r2, #16
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	d002      	beq.n	8008a46 <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008a40:	4b33      	ldr	r3, [pc, #204]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8008a42:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008a44:	e05d      	b.n	8008b02 <HAL_RCC_GetSysClockFreq+0x102>
        sysclockfreq =  HSI_VALUE;
 8008a46:	4b33      	ldr	r3, [pc, #204]	; (8008b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8008a48:	613b      	str	r3, [r7, #16]
      break;
 8008a4a:	e05a      	b.n	8008b02 <HAL_RCC_GetSysClockFreq+0x102>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008a4c:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x118>)
 8008a4e:	613b      	str	r3, [r7, #16]
      break;
 8008a50:	e057      	b.n	8008b02 <HAL_RCC_GetSysClockFreq+0x102>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	0c9b      	lsrs	r3, r3, #18
 8008a56:	220f      	movs	r2, #15
 8008a58:	4013      	ands	r3, r2
 8008a5a:	4a30      	ldr	r2, [pc, #192]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x11c>)
 8008a5c:	5cd3      	ldrb	r3, [r2, r3]
 8008a5e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	0d9b      	lsrs	r3, r3, #22
 8008a64:	2203      	movs	r2, #3
 8008a66:	4013      	ands	r3, r2
 8008a68:	3301      	adds	r3, #1
 8008a6a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a6c:	4b27      	ldr	r3, [pc, #156]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	2380      	movs	r3, #128	; 0x80
 8008a72:	025b      	lsls	r3, r3, #9
 8008a74:	4013      	ands	r3, r2
 8008a76:	d00f      	beq.n	8008a98 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	000a      	movs	r2, r1
 8008a7c:	0152      	lsls	r2, r2, #5
 8008a7e:	1a52      	subs	r2, r2, r1
 8008a80:	0193      	lsls	r3, r2, #6
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	185b      	adds	r3, r3, r1
 8008a88:	025b      	lsls	r3, r3, #9
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f7f7 fb3b 	bl	8000108 <__udivsi3>
 8008a92:	0003      	movs	r3, r0
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e023      	b.n	8008ae0 <HAL_RCC_GetSysClockFreq+0xe0>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8008a98:	4b1c      	ldr	r3, [pc, #112]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2210      	movs	r2, #16
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	d00f      	beq.n	8008ac2 <HAL_RCC_GetSysClockFreq+0xc2>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	000a      	movs	r2, r1
 8008aa6:	0152      	lsls	r2, r2, #5
 8008aa8:	1a52      	subs	r2, r2, r1
 8008aaa:	0193      	lsls	r3, r2, #6
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	185b      	adds	r3, r3, r1
 8008ab2:	021b      	lsls	r3, r3, #8
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f7f7 fb26 	bl	8000108 <__udivsi3>
 8008abc:	0003      	movs	r3, r0
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e00e      	b.n	8008ae0 <HAL_RCC_GetSysClockFreq+0xe0>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	000a      	movs	r2, r1
 8008ac6:	0152      	lsls	r2, r2, #5
 8008ac8:	1a52      	subs	r2, r2, r1
 8008aca:	0193      	lsls	r3, r2, #6
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	185b      	adds	r3, r3, r1
 8008ad2:	029b      	lsls	r3, r3, #10
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f7f7 fb16 	bl	8000108 <__udivsi3>
 8008adc:	0003      	movs	r3, r0
 8008ade:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	613b      	str	r3, [r7, #16]
      break;
 8008ae4:	e00d      	b.n	8008b02 <HAL_RCC_GetSysClockFreq+0x102>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	0b5b      	lsrs	r3, r3, #13
 8008aec:	2207      	movs	r2, #7
 8008aee:	4013      	ands	r3, r2
 8008af0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	2280      	movs	r2, #128	; 0x80
 8008af8:	0212      	lsls	r2, r2, #8
 8008afa:	409a      	lsls	r2, r3
 8008afc:	0013      	movs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]
      break;
 8008b00:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008b02:	693b      	ldr	r3, [r7, #16]
}
 8008b04:	0018      	movs	r0, r3
 8008b06:	46bd      	mov	sp, r7
 8008b08:	b006      	add	sp, #24
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40021000 	.word	0x40021000
 8008b10:	003d0900 	.word	0x003d0900
 8008b14:	00f42400 	.word	0x00f42400
 8008b18:	007a1200 	.word	0x007a1200
 8008b1c:	08009a04 	.word	0x08009a04

08008b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008b30:	4b23      	ldr	r3, [pc, #140]	; (8008bc0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	22f0      	movs	r2, #240	; 0xf0
 8008b36:	4013      	ands	r3, r2
 8008b38:	d12b      	bne.n	8008b92 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008b3a:	4b21      	ldr	r3, [pc, #132]	; (8008bc0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8008b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b3e:	2380      	movs	r3, #128	; 0x80
 8008b40:	055b      	lsls	r3, r3, #21
 8008b42:	4013      	ands	r3, r2
 8008b44:	d006      	beq.n	8008b54 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008b46:	4b1f      	ldr	r3, [pc, #124]	; (8008bc4 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	23c0      	movs	r3, #192	; 0xc0
 8008b4c:	015b      	lsls	r3, r3, #5
 8008b4e:	4013      	ands	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e012      	b.n	8008b7a <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b54:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8008b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b58:	4b19      	ldr	r3, [pc, #100]	; (8008bc0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8008b5a:	2180      	movs	r1, #128	; 0x80
 8008b5c:	0549      	lsls	r1, r1, #21
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008b62:	4b18      	ldr	r3, [pc, #96]	; (8008bc4 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	23c0      	movs	r3, #192	; 0xc0
 8008b68:	015b      	lsls	r3, r3, #5
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b6e:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8008b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b72:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8008b74:	4914      	ldr	r1, [pc, #80]	; (8008bc8 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8008b76:	400a      	ands	r2, r1
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	23c0      	movs	r3, #192	; 0xc0
 8008b7e:	015b      	lsls	r3, r3, #5
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d106      	bne.n	8008b92 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	23c0      	movs	r3, #192	; 0xc0
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d101      	bne.n	8008b92 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8008b8e:	2301      	movs	r3, #1
 8008b90:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8008b92:	4b0e      	ldr	r3, [pc, #56]	; (8008bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2201      	movs	r2, #1
 8008b98:	4393      	bics	r3, r2
 8008b9a:	0019      	movs	r1, r3
 8008b9c:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008ba4:	4b09      	ldr	r3, [pc, #36]	; (8008bcc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	4013      	ands	r3, r2
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d001      	beq.n	8008bb6 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e000      	b.n	8008bb8 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	0018      	movs	r0, r3
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b004      	add	sp, #16
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40021000 	.word	0x40021000
 8008bc4:	40007000 	.word	0x40007000
 8008bc8:	efffffff 	.word	0xefffffff
 8008bcc:	40022000 	.word	0x40022000

08008bd0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e05b      	b.n	8008c9a <HAL_SPI_Init+0xca>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2251      	movs	r2, #81	; 0x51
 8008be6:	5c9b      	ldrb	r3, [r3, r2]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <HAL_SPI_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2250      	movs	r2, #80	; 0x50
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	f7fe fa57 	bl	80070ac <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2251      	movs	r2, #81	; 0x51
 8008c02:	2102      	movs	r1, #2
 8008c04:	5499      	strb	r1, [r3, r2]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2140      	movs	r1, #64	; 0x40
 8008c12:	438a      	bics	r2, r1
 8008c14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	431a      	orrs	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6999      	ldr	r1, [r3, #24]
 8008c36:	2380      	movs	r3, #128	; 0x80
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	400b      	ands	r3, r1
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	2204      	movs	r2, #4
 8008c60:	4013      	ands	r3, r2
 8008c62:	0019      	movs	r1, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c78:	611a      	str	r2, [r3, #16]
  
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	69da      	ldr	r2, [r3, #28]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4907      	ldr	r1, [pc, #28]	; (8008ca4 <HAL_SPI_Init+0xd4>)
 8008c86:	400a      	ands	r2, r1
 8008c88:	61da      	str	r2, [r3, #28]
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2251      	movs	r2, #81	; 0x51
 8008c94:	2101      	movs	r1, #1
 8008c96:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	b002      	add	sp, #8
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	fffff7ff 	.word	0xfffff7ff

08008ca8 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e01b      	b.n	8008cf2 <HAL_SPI_DeInit+0x4a>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2251      	movs	r2, #81	; 0x51
 8008cbe:	2102      	movs	r1, #2
 8008cc0:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2140      	movs	r1, #64	; 0x40
 8008cce:	438a      	bics	r2, r1
 8008cd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f000 f810 	bl	8008cfa <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2251      	movs	r2, #81	; 0x51
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2250      	movs	r2, #80	; 0x50
 8008cec:	2100      	movs	r1, #0
 8008cee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b002      	add	sp, #8
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit could be implenetd in the user file
   */
}
 8008d02:	46c0      	nop			; (mov r8, r8)
 8008d04:	46bd      	mov	sp, r7
 8008d06:	b002      	add	sp, #8
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	1dbb      	adds	r3, r7, #6
 8008d1a:	801a      	strh	r2, [r3, #0]

  if(hspi->State == HAL_SPI_STATE_READY)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2251      	movs	r2, #81	; 0x51
 8008d20:	5c9b      	ldrb	r3, [r3, r2]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d000      	beq.n	8008d2a <HAL_SPI_Transmit+0x1e>
 8008d28:	e139      	b.n	8008f9e <HAL_SPI_Transmit+0x292>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d003      	beq.n	8008d38 <HAL_SPI_Transmit+0x2c>
 8008d30:	1dbb      	adds	r3, r7, #6
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_SPI_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e131      	b.n	8008fa0 <HAL_SPI_Transmit+0x294>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2250      	movs	r2, #80	; 0x50
 8008d40:	5c9b      	ldrb	r3, [r3, r2]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <HAL_SPI_Transmit+0x3e>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e12a      	b.n	8008fa0 <HAL_SPI_Transmit+0x294>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2250      	movs	r2, #80	; 0x50
 8008d4e:	2101      	movs	r1, #1
 8008d50:	5499      	strb	r1, [r3, r2]

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2251      	movs	r2, #81	; 0x51
 8008d56:	2112      	movs	r1, #18
 8008d58:	5499      	strb	r1, [r3, r2]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pTxBuffPtr  = pData;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	1dba      	adds	r2, r7, #6
 8008d6a:	8812      	ldrh	r2, [r2, #0]
 8008d6c:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	1dba      	adds	r2, r7, #6
 8008d72:	8812      	ldrh	r2, [r2, #0]
 8008d74:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->TxISR = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->RxISR = 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = 0U;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = 0U;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	019b      	lsls	r3, r3, #6
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d110      	bne.n	8008dc2 <HAL_SPI_Transmit+0xb6>
    {
      SPI_RESET_CRC(hspi);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	497f      	ldr	r1, [pc, #508]	; (8008fa8 <HAL_SPI_Transmit+0x29c>)
 8008dac:	400a      	ands	r2, r1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2180      	movs	r1, #128	; 0x80
 8008dbc:	0189      	lsls	r1, r1, #6
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	601a      	str	r2, [r3, #0]
    }

    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	2380      	movs	r3, #128	; 0x80
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d108      	bne.n	8008de0 <HAL_SPI_Transmit+0xd4>
    {
      /* Configure communication direction : 1Line */
      SPI_1LINE_TX(hspi);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2180      	movs	r1, #128	; 0x80
 8008dda:	01c9      	lsls	r1, r1, #7
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2240      	movs	r2, #64	; 0x40
 8008de8:	4013      	ands	r3, r2
 8008dea:	2b40      	cmp	r3, #64	; 0x40
 8008dec:	d007      	beq.n	8008dfe <HAL_SPI_Transmit+0xf2>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]
    }

    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d148      	bne.n	8008e98 <HAL_SPI_Transmit+0x18c>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01U))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d004      	beq.n	8008e18 <HAL_SPI_Transmit+0x10c>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d12a      	bne.n	8008e6e <HAL_SPI_Transmit+0x162>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	1c59      	adds	r1, r3, #1
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	6311      	str	r1, [r2, #48]	; 0x30
 8008e22:	781a      	ldrb	r2, [r3, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	3b01      	subs	r3, #1
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0U)
 8008e38:	e019      	b.n	8008e6e <HAL_SPI_Transmit+0x162>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2102      	movs	r1, #2
 8008e42:	f000 fb37 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 8008e46:	1e03      	subs	r3, r0, #0
 8008e48:	d001      	beq.n	8008e4e <HAL_SPI_Transmit+0x142>
        { 
          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e0a8      	b.n	8008fa0 <HAL_SPI_Transmit+0x294>
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e52:	1c59      	adds	r1, r3, #1
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	6311      	str	r1, [r2, #48]	; 0x30
 8008e58:	781a      	ldrb	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	86da      	strh	r2, [r3, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e0      	bne.n	8008e3a <HAL_SPI_Transmit+0x12e>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	019b      	lsls	r3, r3, #6
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d155      	bne.n	8008f30 <HAL_SPI_Transmit+0x224>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2180      	movs	r1, #128	; 0x80
 8008e90:	0149      	lsls	r1, r1, #5
 8008e92:	430a      	orrs	r2, r1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e04b      	b.n	8008f30 <HAL_SPI_Transmit+0x224>
      }
    }
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <HAL_SPI_Transmit+0x19e>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d12e      	bne.n	8008f08 <HAL_SPI_Transmit+0x1fc>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	881a      	ldrh	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eba:	1c9a      	adds	r2, r3, #2
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	86da      	strh	r2, [r3, #54]	; 0x36
      }

      while(hspi->TxXferCount > 0U)
 8008ece:	e01b      	b.n	8008f08 <HAL_SPI_Transmit+0x1fc>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2102      	movs	r1, #2
 8008ed8:	f000 faec 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 8008edc:	1e03      	subs	r3, r0, #0
 8008ede:	d001      	beq.n	8008ee4 <HAL_SPI_Transmit+0x1d8>
        { 
          return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e05d      	b.n	8008fa0 <HAL_SPI_Transmit+0x294>
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee8:	881a      	ldrh	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	1c9a      	adds	r2, r3, #2
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	86da      	strh	r2, [r3, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1de      	bne.n	8008ed0 <HAL_SPI_Transmit+0x1c4>
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f16:	2380      	movs	r3, #128	; 0x80
 8008f18:	019b      	lsls	r3, r3, #6
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d108      	bne.n	8008f30 <HAL_SPI_Transmit+0x224>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2180      	movs	r1, #128	; 0x80
 8008f2a:	0149      	lsls	r1, r1, #5
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	2102      	movs	r1, #2
 8008f38:	f000 fabc 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 8008f3c:	1e03      	subs	r3, r0, #0
 8008f3e:	d007      	beq.n	8008f50 <HAL_SPI_Transmit+0x244>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f44:	2220      	movs	r2, #32
 8008f46:	431a      	orrs	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e027      	b.n	8008fa0 <HAL_SPI_Transmit+0x294>
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	2180      	movs	r1, #128	; 0x80
 8008f58:	f000 faac 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 8008f5c:	1e03      	subs	r3, r0, #0
 8008f5e:	d007      	beq.n	8008f70 <HAL_SPI_Transmit+0x264>
    { 
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	2220      	movs	r2, #32
 8008f66:	431a      	orrs	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e017      	b.n	8008fa0 <HAL_SPI_Transmit+0x294>
    }
 
    /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d108      	bne.n	8008f8a <HAL_SPI_Transmit+0x27e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	697b      	ldr	r3, [r7, #20]
    }

    hspi->State = HAL_SPI_STATE_READY; 
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2251      	movs	r2, #81	; 0x51
 8008f8e:	2101      	movs	r1, #1
 8008f90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2250      	movs	r2, #80	; 0x50
 8008f96:	2100      	movs	r1, #0
 8008f98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e000      	b.n	8008fa0 <HAL_SPI_Transmit+0x294>
  }
  else
  {
    return HAL_BUSY;
 8008f9e:	2302      	movs	r3, #2
  }
}
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	b006      	add	sp, #24
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	ffffdfff 	.word	0xffffdfff

08008fac <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	001a      	movs	r2, r3
 8008fba:	1cbb      	adds	r3, r7, #2
 8008fbc:	801a      	strh	r2, [r3, #0]
  __IO uint16_t tmpreg = 0U;
 8008fbe:	2316      	movs	r3, #22
 8008fc0:	18fb      	adds	r3, r7, r3
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	801a      	strh	r2, [r3, #0]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2251      	movs	r2, #81	; 0x51
 8008fca:	5c9b      	ldrb	r3, [r3, r2]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d006      	beq.n	8008fe0 <HAL_SPI_TransmitReceive+0x34>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2251      	movs	r2, #81	; 0x51
 8008fd6:	5c9b      	ldrb	r3, [r3, r2]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b22      	cmp	r3, #34	; 0x22
 8008fdc:	d000      	beq.n	8008fe0 <HAL_SPI_TransmitReceive+0x34>
 8008fde:	e255      	b.n	800948c <HAL_SPI_TransmitReceive+0x4e0>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d006      	beq.n	8008ff4 <HAL_SPI_TransmitReceive+0x48>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <HAL_SPI_TransmitReceive+0x48>
 8008fec:	1cbb      	adds	r3, r7, #2
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x4c>
    {
      return  HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e24a      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2250      	movs	r2, #80	; 0x50
 8008ffc:	5c9b      	ldrb	r3, [r3, r2]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_SPI_TransmitReceive+0x5a>
 8009002:	2302      	movs	r3, #2
 8009004:	e243      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2250      	movs	r2, #80	; 0x50
 800900a:	2101      	movs	r1, #1
 800900c:	5499      	strb	r1, [r3, r2]
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2251      	movs	r2, #81	; 0x51
 8009012:	5c9b      	ldrb	r3, [r3, r2]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	d103      	bne.n	8009022 <HAL_SPI_TransmitReceive+0x76>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2251      	movs	r2, #81	; 0x51
 800901e:	2132      	movs	r1, #50	; 0x32
 8009020:	5499      	strb	r1, [r3, r2]
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1cba      	adds	r2, r7, #2
 8009032:	8812      	ldrh	r2, [r2, #0]
 8009034:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1cba      	adds	r2, r7, #2
 800903a:	8812      	ldrh	r2, [r2, #0]
 800903c:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	1cba      	adds	r2, r7, #2
 8009048:	8812      	ldrh	r2, [r2, #0]
 800904a:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	1cba      	adds	r2, r7, #2
 8009050:	8812      	ldrh	r2, [r2, #0]
 8009052:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009064:	2380      	movs	r3, #128	; 0x80
 8009066:	019b      	lsls	r3, r3, #6
 8009068:	429a      	cmp	r2, r3
 800906a:	d110      	bne.n	800908e <HAL_SPI_TransmitReceive+0xe2>
    {
      SPI_RESET_CRC(hspi);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	49ca      	ldr	r1, [pc, #808]	; (80093a0 <HAL_SPI_TransmitReceive+0x3f4>)
 8009078:	400a      	ands	r2, r1
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2180      	movs	r1, #128	; 0x80
 8009088:	0189      	lsls	r1, r1, #6
 800908a:	430a      	orrs	r2, r1
 800908c:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2240      	movs	r2, #64	; 0x40
 8009096:	4013      	ands	r3, r2
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d007      	beq.n	80090ac <HAL_SPI_TransmitReceive+0x100>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2140      	movs	r1, #64	; 0x40
 80090a8:	430a      	orrs	r2, r1
 80090aa:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	2380      	movs	r3, #128	; 0x80
 80090b2:	011b      	lsls	r3, r3, #4
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d000      	beq.n	80090ba <HAL_SPI_TransmitReceive+0x10e>
 80090b8:	e0c8      	b.n	800924c <HAL_SPI_TransmitReceive+0x2a0>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <HAL_SPI_TransmitReceive+0x12c>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	2382      	movs	r3, #130	; 0x82
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d116      	bne.n	80090fc <HAL_SPI_TransmitReceive+0x150>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d111      	bne.n	80090fc <HAL_SPI_TransmitReceive+0x150>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090dc:	881a      	ldrh	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	1c9a      	adds	r2, r3, #2
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d000      	beq.n	8009108 <HAL_SPI_TransmitReceive+0x15c>
 8009106:	e079      	b.n	80091fc <HAL_SPI_TransmitReceive+0x250>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	019b      	lsls	r3, r3, #6
 8009110:	429a      	cmp	r2, r3
 8009112:	d108      	bne.n	8009126 <HAL_SPI_TransmitReceive+0x17a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2180      	movs	r1, #128	; 0x80
 8009120:	0149      	lsls	r1, r1, #5
 8009122:	430a      	orrs	r2, r1
 8009124:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	2101      	movs	r1, #1
 800912e:	f000 f9c1 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 8009132:	1e03      	subs	r3, r0, #0
 8009134:	d001      	beq.n	800913a <HAL_SPI_TransmitReceive+0x18e>
        { 
          return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e1a9      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009144:	b292      	uxth	r2, r2
 8009146:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr+=2U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	1c9a      	adds	r2, r3, #2
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009156:	b29b      	uxth	r3, r3
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009160:	e131      	b.n	80093c6 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	2102      	movs	r1, #2
 800916a:	f000 f9a3 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 800916e:	1e03      	subs	r3, r0, #0
 8009170:	d001      	beq.n	8009176 <HAL_SPI_TransmitReceive+0x1ca>
          { 
            return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e18b      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	881a      	ldrh	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	1c9a      	adds	r2, r3, #2
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009190:	b29b      	uxth	r3, r3
 8009192:	3b01      	subs	r3, #1
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800919e:	b29b      	uxth	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10e      	bne.n	80091c2 <HAL_SPI_TransmitReceive+0x216>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091a8:	2380      	movs	r3, #128	; 0x80
 80091aa:	019b      	lsls	r3, r3, #6
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d108      	bne.n	80091c2 <HAL_SPI_TransmitReceive+0x216>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2180      	movs	r1, #128	; 0x80
 80091bc:	0149      	lsls	r1, r1, #5
 80091be:	430a      	orrs	r2, r1
 80091c0:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	2101      	movs	r1, #1
 80091ca:	f000 f973 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 80091ce:	1e03      	subs	r3, r0, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_SPI_TransmitReceive+0x22a>
          { 
            return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e15b      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	b292      	uxth	r2, r2
 80091e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e8:	1c9a      	adds	r2, r3, #2
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3b01      	subs	r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1ad      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x1b6>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d000      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x264>
 800920e:	e0da      	b.n	80093c6 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	2101      	movs	r1, #1
 8009218:	f000 f94c 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 800921c:	1e03      	subs	r3, r0, #0
 800921e:	d001      	beq.n	8009224 <HAL_SPI_TransmitReceive+0x278>
          {
            return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e134      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	b292      	uxth	r2, r2
 8009230:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	1c9a      	adds	r2, r3, #2
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	87da      	strh	r2, [r3, #62]	; 0x3e
 800924a:	e0bc      	b.n	80093c6 <HAL_SPI_TransmitReceive+0x41a>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <HAL_SPI_TransmitReceive+0x2be>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	2382      	movs	r3, #130	; 0x82
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	429a      	cmp	r2, r3
 800925e:	d114      	bne.n	800928a <HAL_SPI_TransmitReceive+0x2de>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b01      	cmp	r3, #1
 8009268:	d10f      	bne.n	800928a <HAL_SPI_TransmitReceive+0x2de>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926e:	1c59      	adds	r1, r3, #1
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	6311      	str	r1, [r2, #48]	; 0x30
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29a      	uxth	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800928e:	b29b      	uxth	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	d000      	beq.n	8009296 <HAL_SPI_TransmitReceive+0x2ea>
 8009294:	e070      	b.n	8009378 <HAL_SPI_TransmitReceive+0x3cc>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800929a:	2380      	movs	r3, #128	; 0x80
 800929c:	019b      	lsls	r3, r3, #6
 800929e:	429a      	cmp	r2, r3
 80092a0:	d108      	bne.n	80092b4 <HAL_SPI_TransmitReceive+0x308>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2180      	movs	r1, #128	; 0x80
 80092ae:	0149      	lsls	r1, r1, #5
 80092b0:	430a      	orrs	r2, r1
 80092b2:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2101      	movs	r1, #1
 80092bc:	f000 f8fa 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 80092c0:	1e03      	subs	r3, r0, #0
 80092c2:	d001      	beq.n	80092c8 <HAL_SPI_TransmitReceive+0x31c>
        {
          return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e0e2      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3b01      	subs	r3, #1
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092e4:	e06f      	b.n	80093c6 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	2102      	movs	r1, #2
 80092ee:	f000 f8e1 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d001      	beq.n	80092fa <HAL_SPI_TransmitReceive+0x34e>
          {
            return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e0c9      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fe:	1c59      	adds	r1, r3, #1
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	6311      	str	r1, [r2, #48]	; 0x30
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800931e:	b29b      	uxth	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10e      	bne.n	8009342 <HAL_SPI_TransmitReceive+0x396>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009328:	2380      	movs	r3, #128	; 0x80
 800932a:	019b      	lsls	r3, r3, #6
 800932c:	429a      	cmp	r2, r3
 800932e:	d108      	bne.n	8009342 <HAL_SPI_TransmitReceive+0x396>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2180      	movs	r1, #128	; 0x80
 800933c:	0149      	lsls	r1, r1, #5
 800933e:	430a      	orrs	r2, r1
 8009340:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	2101      	movs	r1, #1
 800934a:	f000 f8b3 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 800934e:	1e03      	subs	r3, r0, #0
 8009350:	d001      	beq.n	8009356 <HAL_SPI_TransmitReceive+0x3aa>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e09b      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68d8      	ldr	r0, [r3, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	1c59      	adds	r1, r3, #1
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	6391      	str	r1, [r2, #56]	; 0x38
 8009366:	b2c2      	uxtb	r2, r0
 8009368:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29a      	uxth	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1b1      	bne.n	80092e6 <HAL_SPI_TransmitReceive+0x33a>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11d      	bne.n	80093c6 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	2101      	movs	r1, #1
 8009392:	f000 f88f 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 8009396:	1e03      	subs	r3, r0, #0
 8009398:	d004      	beq.n	80093a4 <HAL_SPI_TransmitReceive+0x3f8>
          {
            return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e077      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	ffffdfff 	.word	0xffffdfff
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68d8      	ldr	r0, [r3, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	1c59      	adds	r1, r3, #1
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	6391      	str	r1, [r2, #56]	; 0x38
 80093b4:	b2c2      	uxtb	r2, r0
 80093b6:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093bc:	b29b      	uxth	r3, r3
 80093be:	3b01      	subs	r3, #1
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ca:	2380      	movs	r3, #128	; 0x80
 80093cc:	019b      	lsls	r3, r3, #6
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d118      	bne.n	8009404 <HAL_SPI_TransmitReceive+0x458>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	2101      	movs	r1, #1
 80093da:	f000 f86b 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 80093de:	1e03      	subs	r3, r0, #0
 80093e0:	d007      	beq.n	80093f2 <HAL_SPI_TransmitReceive+0x446>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e6:	2202      	movs	r2, #2
 80093e8:	431a      	orrs	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e04d      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	2116      	movs	r1, #22
 80093fc:	187b      	adds	r3, r7, r1
 80093fe:	801a      	strh	r2, [r3, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8009400:	187b      	adds	r3, r7, r1
 8009402:	881b      	ldrh	r3, [r3, #0]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	2180      	movs	r1, #128	; 0x80
 800940c:	f000 f852 	bl	80094b4 <SPI_WaitOnFlagUntilTimeout>
 8009410:	1e03      	subs	r3, r0, #0
 8009412:	d007      	beq.n	8009424 <HAL_SPI_TransmitReceive+0x478>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009418:	2220      	movs	r2, #32
 800941a:	431a      	orrs	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e034      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2251      	movs	r2, #81	; 0x51
 8009428:	2101      	movs	r1, #1
 800942a:	5499      	strb	r1, [r3, r2]

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009430:	2380      	movs	r3, #128	; 0x80
 8009432:	019b      	lsls	r3, r3, #6
 8009434:	429a      	cmp	r2, r3
 8009436:	d123      	bne.n	8009480 <HAL_SPI_TransmitReceive+0x4d4>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	2210      	movs	r2, #16
 8009440:	4013      	ands	r3, r2
 8009442:	2b10      	cmp	r3, #16
 8009444:	d11c      	bne.n	8009480 <HAL_SPI_TransmitReceive+0x4d4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944a:	2202      	movs	r2, #2
 800944c:	431a      	orrs	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	490e      	ldr	r1, [pc, #56]	; (8009498 <HAL_SPI_TransmitReceive+0x4ec>)
 800945e:	400a      	ands	r2, r1
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2180      	movs	r1, #128	; 0x80
 800946e:	0189      	lsls	r1, r1, #6
 8009470:	430a      	orrs	r2, r1
 8009472:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2250      	movs	r2, #80	; 0x50
 8009478:	2100      	movs	r1, #0
 800947a:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR; 
 800947c:	2301      	movs	r3, #1
 800947e:	e006      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2250      	movs	r2, #80	; 0x50
 8009484:	2100      	movs	r1, #0
 8009486:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	e000      	b.n	800948e <HAL_SPI_TransmitReceive+0x4e2>
  }
  else
  {
    return HAL_BUSY;
 800948c:	2302      	movs	r3, #2
  }
}
 800948e:	0018      	movs	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	b006      	add	sp, #24
 8009494:	bd80      	pop	{r7, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	ffffdfff 	.word	0xffffdfff

0800949c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  return hspi->State;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2251      	movs	r2, #81	; 0x51
 80094a8:	5c9b      	ldrb	r3, [r3, r2]
 80094aa:	b2db      	uxtb	r3, r3
}
 80094ac:	0018      	movs	r0, r3
 80094ae:	46bd      	mov	sp, r7
 80094b0:	b002      	add	sp, #8
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	1dfb      	adds	r3, r7, #7
 80094c2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80094c8:	f7fe fa5c 	bl	8007984 <HAL_GetTick>
 80094cc:	0003      	movs	r3, r0
 80094ce:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80094d0:	1dfb      	adds	r3, r7, #7
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d000      	beq.n	80094da <SPI_WaitOnFlagUntilTimeout+0x26>
 80094d8:	e087      	b.n	80095ea <SPI_WaitOnFlagUntilTimeout+0x136>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80094da:	e03e      	b.n	800955a <SPI_WaitOnFlagUntilTimeout+0xa6>
    {
      if(Timeout != HAL_MAX_DELAY)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	3301      	adds	r3, #1
 80094e0:	d03b      	beq.n	800955a <SPI_WaitOnFlagUntilTimeout+0xa6>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <SPI_WaitOnFlagUntilTimeout+0x44>
 80094e8:	f7fe fa4c 	bl	8007984 <HAL_GetTick>
 80094ec:	0002      	movs	r2, r0
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d230      	bcs.n	800955a <SPI_WaitOnFlagUntilTimeout+0xa6>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	21e0      	movs	r1, #224	; 0xe0
 8009504:	438a      	bics	r2, r1
 8009506:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2140      	movs	r1, #64	; 0x40
 8009514:	438a      	bics	r2, r1
 8009516:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800951c:	2380      	movs	r3, #128	; 0x80
 800951e:	019b      	lsls	r3, r3, #6
 8009520:	429a      	cmp	r2, r3
 8009522:	d110      	bne.n	8009546 <SPI_WaitOnFlagUntilTimeout+0x92>
          {
            SPI_RESET_CRC(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4935      	ldr	r1, [pc, #212]	; (8009604 <SPI_WaitOnFlagUntilTimeout+0x150>)
 8009530:	400a      	ands	r2, r1
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2180      	movs	r1, #128	; 0x80
 8009540:	0189      	lsls	r1, r1, #6
 8009542:	430a      	orrs	r2, r1
 8009544:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2251      	movs	r2, #81	; 0x51
 800954a:	2101      	movs	r1, #1
 800954c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2250      	movs	r2, #80	; 0x50
 8009552:	2100      	movs	r1, #0
 8009554:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e050      	b.n	80095fc <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	4013      	ands	r3, r2
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	429a      	cmp	r2, r3
 8009568:	d1b8      	bne.n	80094dc <SPI_WaitOnFlagUntilTimeout+0x28>
 800956a:	e046      	b.n	80095fa <SPI_WaitOnFlagUntilTimeout+0x146>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	3301      	adds	r3, #1
 8009570:	d03b      	beq.n	80095ea <SPI_WaitOnFlagUntilTimeout+0x136>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <SPI_WaitOnFlagUntilTimeout+0xd4>
 8009578:	f7fe fa04 	bl	8007984 <HAL_GetTick>
 800957c:	0002      	movs	r2, r0
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	429a      	cmp	r2, r3
 8009586:	d230      	bcs.n	80095ea <SPI_WaitOnFlagUntilTimeout+0x136>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	21e0      	movs	r1, #224	; 0xe0
 8009594:	438a      	bics	r2, r1
 8009596:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2140      	movs	r1, #64	; 0x40
 80095a4:	438a      	bics	r2, r1
 80095a6:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095ac:	2380      	movs	r3, #128	; 0x80
 80095ae:	019b      	lsls	r3, r3, #6
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d110      	bne.n	80095d6 <SPI_WaitOnFlagUntilTimeout+0x122>
          {
            SPI_RESET_CRC(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4911      	ldr	r1, [pc, #68]	; (8009604 <SPI_WaitOnFlagUntilTimeout+0x150>)
 80095c0:	400a      	ands	r2, r1
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2180      	movs	r1, #128	; 0x80
 80095d0:	0189      	lsls	r1, r1, #6
 80095d2:	430a      	orrs	r2, r1
 80095d4:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2251      	movs	r2, #81	; 0x51
 80095da:	2101      	movs	r1, #1
 80095dc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2250      	movs	r2, #80	; 0x50
 80095e2:	2100      	movs	r1, #0
 80095e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e008      	b.n	80095fc <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4013      	ands	r3, r2
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d0b8      	beq.n	800956c <SPI_WaitOnFlagUntilTimeout+0xb8>
        }
      }
    }
  }
  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	0018      	movs	r0, r3
 80095fe:	46bd      	mov	sp, r7
 8009600:	b006      	add	sp, #24
 8009602:	bd80      	pop	{r7, pc}
 8009604:	ffffdfff 	.word	0xffffdfff

08009608 <__libc_init_array>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	2600      	movs	r6, #0
 800960c:	4d0c      	ldr	r5, [pc, #48]	; (8009640 <__libc_init_array+0x38>)
 800960e:	4c0d      	ldr	r4, [pc, #52]	; (8009644 <__libc_init_array+0x3c>)
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	42a6      	cmp	r6, r4
 8009616:	d109      	bne.n	800962c <__libc_init_array+0x24>
 8009618:	2600      	movs	r6, #0
 800961a:	f000 f8f9 	bl	8009810 <_init>
 800961e:	4d0a      	ldr	r5, [pc, #40]	; (8009648 <__libc_init_array+0x40>)
 8009620:	4c0a      	ldr	r4, [pc, #40]	; (800964c <__libc_init_array+0x44>)
 8009622:	1b64      	subs	r4, r4, r5
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	42a6      	cmp	r6, r4
 8009628:	d105      	bne.n	8009636 <__libc_init_array+0x2e>
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	00b3      	lsls	r3, r6, #2
 800962e:	58eb      	ldr	r3, [r5, r3]
 8009630:	4798      	blx	r3
 8009632:	3601      	adds	r6, #1
 8009634:	e7ee      	b.n	8009614 <__libc_init_array+0xc>
 8009636:	00b3      	lsls	r3, r6, #2
 8009638:	58eb      	ldr	r3, [r5, r3]
 800963a:	4798      	blx	r3
 800963c:	3601      	adds	r6, #1
 800963e:	e7f2      	b.n	8009626 <__libc_init_array+0x1e>
 8009640:	08009b50 	.word	0x08009b50
 8009644:	08009b50 	.word	0x08009b50
 8009648:	08009b50 	.word	0x08009b50
 800964c:	08009b54 	.word	0x08009b54

08009650 <malloc>:
 8009650:	b510      	push	{r4, lr}
 8009652:	4b03      	ldr	r3, [pc, #12]	; (8009660 <malloc+0x10>)
 8009654:	0001      	movs	r1, r0
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	f000 f80e 	bl	8009678 <_malloc_r>
 800965c:	bd10      	pop	{r4, pc}
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	200001c8 	.word	0x200001c8

08009664 <memcpy>:
 8009664:	2300      	movs	r3, #0
 8009666:	b510      	push	{r4, lr}
 8009668:	429a      	cmp	r2, r3
 800966a:	d100      	bne.n	800966e <memcpy+0xa>
 800966c:	bd10      	pop	{r4, pc}
 800966e:	5ccc      	ldrb	r4, [r1, r3]
 8009670:	54c4      	strb	r4, [r0, r3]
 8009672:	3301      	adds	r3, #1
 8009674:	e7f8      	b.n	8009668 <memcpy+0x4>
	...

08009678 <_malloc_r>:
 8009678:	2303      	movs	r3, #3
 800967a:	b570      	push	{r4, r5, r6, lr}
 800967c:	1ccd      	adds	r5, r1, #3
 800967e:	439d      	bics	r5, r3
 8009680:	3508      	adds	r5, #8
 8009682:	0006      	movs	r6, r0
 8009684:	2d0c      	cmp	r5, #12
 8009686:	d21e      	bcs.n	80096c6 <_malloc_r+0x4e>
 8009688:	250c      	movs	r5, #12
 800968a:	42a9      	cmp	r1, r5
 800968c:	d81d      	bhi.n	80096ca <_malloc_r+0x52>
 800968e:	0030      	movs	r0, r6
 8009690:	f000 f862 	bl	8009758 <__malloc_lock>
 8009694:	4a25      	ldr	r2, [pc, #148]	; (800972c <_malloc_r+0xb4>)
 8009696:	6814      	ldr	r4, [r2, #0]
 8009698:	0021      	movs	r1, r4
 800969a:	2900      	cmp	r1, #0
 800969c:	d119      	bne.n	80096d2 <_malloc_r+0x5a>
 800969e:	4c24      	ldr	r4, [pc, #144]	; (8009730 <_malloc_r+0xb8>)
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d103      	bne.n	80096ae <_malloc_r+0x36>
 80096a6:	0030      	movs	r0, r6
 80096a8:	f000 f844 	bl	8009734 <_sbrk_r>
 80096ac:	6020      	str	r0, [r4, #0]
 80096ae:	0029      	movs	r1, r5
 80096b0:	0030      	movs	r0, r6
 80096b2:	f000 f83f 	bl	8009734 <_sbrk_r>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d12b      	bne.n	8009712 <_malloc_r+0x9a>
 80096ba:	230c      	movs	r3, #12
 80096bc:	0030      	movs	r0, r6
 80096be:	6033      	str	r3, [r6, #0]
 80096c0:	f000 f84b 	bl	800975a <__malloc_unlock>
 80096c4:	e003      	b.n	80096ce <_malloc_r+0x56>
 80096c6:	2d00      	cmp	r5, #0
 80096c8:	dadf      	bge.n	800968a <_malloc_r+0x12>
 80096ca:	230c      	movs	r3, #12
 80096cc:	6033      	str	r3, [r6, #0]
 80096ce:	2000      	movs	r0, #0
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	680b      	ldr	r3, [r1, #0]
 80096d4:	1b5b      	subs	r3, r3, r5
 80096d6:	d419      	bmi.n	800970c <_malloc_r+0x94>
 80096d8:	2b0b      	cmp	r3, #11
 80096da:	d903      	bls.n	80096e4 <_malloc_r+0x6c>
 80096dc:	600b      	str	r3, [r1, #0]
 80096de:	18cc      	adds	r4, r1, r3
 80096e0:	6025      	str	r5, [r4, #0]
 80096e2:	e003      	b.n	80096ec <_malloc_r+0x74>
 80096e4:	684b      	ldr	r3, [r1, #4]
 80096e6:	428c      	cmp	r4, r1
 80096e8:	d10d      	bne.n	8009706 <_malloc_r+0x8e>
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	0030      	movs	r0, r6
 80096ee:	f000 f834 	bl	800975a <__malloc_unlock>
 80096f2:	0020      	movs	r0, r4
 80096f4:	2207      	movs	r2, #7
 80096f6:	300b      	adds	r0, #11
 80096f8:	1d23      	adds	r3, r4, #4
 80096fa:	4390      	bics	r0, r2
 80096fc:	1ac3      	subs	r3, r0, r3
 80096fe:	d0e7      	beq.n	80096d0 <_malloc_r+0x58>
 8009700:	425a      	negs	r2, r3
 8009702:	50e2      	str	r2, [r4, r3]
 8009704:	e7e4      	b.n	80096d0 <_malloc_r+0x58>
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	000c      	movs	r4, r1
 800970a:	e7ef      	b.n	80096ec <_malloc_r+0x74>
 800970c:	000c      	movs	r4, r1
 800970e:	6849      	ldr	r1, [r1, #4]
 8009710:	e7c3      	b.n	800969a <_malloc_r+0x22>
 8009712:	2303      	movs	r3, #3
 8009714:	1cc4      	adds	r4, r0, #3
 8009716:	439c      	bics	r4, r3
 8009718:	42a0      	cmp	r0, r4
 800971a:	d0e1      	beq.n	80096e0 <_malloc_r+0x68>
 800971c:	1a21      	subs	r1, r4, r0
 800971e:	0030      	movs	r0, r6
 8009720:	f000 f808 	bl	8009734 <_sbrk_r>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d1db      	bne.n	80096e0 <_malloc_r+0x68>
 8009728:	e7c7      	b.n	80096ba <_malloc_r+0x42>
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	20000350 	.word	0x20000350
 8009730:	20000354 	.word	0x20000354

08009734 <_sbrk_r>:
 8009734:	2300      	movs	r3, #0
 8009736:	b570      	push	{r4, r5, r6, lr}
 8009738:	4c06      	ldr	r4, [pc, #24]	; (8009754 <_sbrk_r+0x20>)
 800973a:	0005      	movs	r5, r0
 800973c:	0008      	movs	r0, r1
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	f000 f856 	bl	80097f0 <_sbrk>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d103      	bne.n	8009750 <_sbrk_r+0x1c>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d000      	beq.n	8009750 <_sbrk_r+0x1c>
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	bd70      	pop	{r4, r5, r6, pc}
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	200003d8 	.word	0x200003d8

08009758 <__malloc_lock>:
 8009758:	4770      	bx	lr

0800975a <__malloc_unlock>:
 800975a:	4770      	bx	lr

0800975c <round>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	004a      	lsls	r2, r1, #1
 8009760:	0007      	movs	r7, r0
 8009762:	481f      	ldr	r0, [pc, #124]	; (80097e0 <round+0x84>)
 8009764:	0d52      	lsrs	r2, r2, #21
 8009766:	1815      	adds	r5, r2, r0
 8009768:	000e      	movs	r6, r1
 800976a:	2d13      	cmp	r5, #19
 800976c:	dc18      	bgt.n	80097a0 <round+0x44>
 800976e:	2d00      	cmp	r5, #0
 8009770:	da09      	bge.n	8009786 <round+0x2a>
 8009772:	0fcb      	lsrs	r3, r1, #31
 8009774:	07db      	lsls	r3, r3, #31
 8009776:	2200      	movs	r2, #0
 8009778:	1c69      	adds	r1, r5, #1
 800977a:	d101      	bne.n	8009780 <round+0x24>
 800977c:	4919      	ldr	r1, [pc, #100]	; (80097e4 <round+0x88>)
 800977e:	430b      	orrs	r3, r1
 8009780:	0019      	movs	r1, r3
 8009782:	0010      	movs	r0, r2
 8009784:	e017      	b.n	80097b6 <round+0x5a>
 8009786:	4a18      	ldr	r2, [pc, #96]	; (80097e8 <round+0x8c>)
 8009788:	412a      	asrs	r2, r5
 800978a:	420a      	tst	r2, r1
 800978c:	d101      	bne.n	8009792 <round+0x36>
 800978e:	2f00      	cmp	r7, #0
 8009790:	d012      	beq.n	80097b8 <round+0x5c>
 8009792:	2380      	movs	r3, #128	; 0x80
 8009794:	031b      	lsls	r3, r3, #12
 8009796:	412b      	asrs	r3, r5
 8009798:	199b      	adds	r3, r3, r6
 800979a:	4393      	bics	r3, r2
 800979c:	2200      	movs	r2, #0
 800979e:	e7ef      	b.n	8009780 <round+0x24>
 80097a0:	2d33      	cmp	r5, #51	; 0x33
 80097a2:	dd0b      	ble.n	80097bc <round+0x60>
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	429d      	cmp	r5, r3
 80097aa:	d105      	bne.n	80097b8 <round+0x5c>
 80097ac:	003a      	movs	r2, r7
 80097ae:	000b      	movs	r3, r1
 80097b0:	0038      	movs	r0, r7
 80097b2:	f7f7 fddf 	bl	8001374 <__aeabi_dadd>
 80097b6:	0007      	movs	r7, r0
 80097b8:	0038      	movs	r0, r7
 80097ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097bc:	2601      	movs	r6, #1
 80097be:	480b      	ldr	r0, [pc, #44]	; (80097ec <round+0x90>)
 80097c0:	4276      	negs	r6, r6
 80097c2:	1812      	adds	r2, r2, r0
 80097c4:	40d6      	lsrs	r6, r2
 80097c6:	423e      	tst	r6, r7
 80097c8:	d0f6      	beq.n	80097b8 <round+0x5c>
 80097ca:	2233      	movs	r2, #51	; 0x33
 80097cc:	1b55      	subs	r5, r2, r5
 80097ce:	3a32      	subs	r2, #50	; 0x32
 80097d0:	40aa      	lsls	r2, r5
 80097d2:	19d2      	adds	r2, r2, r7
 80097d4:	42ba      	cmp	r2, r7
 80097d6:	41a4      	sbcs	r4, r4
 80097d8:	4264      	negs	r4, r4
 80097da:	190b      	adds	r3, r1, r4
 80097dc:	43b2      	bics	r2, r6
 80097de:	e7cf      	b.n	8009780 <round+0x24>
 80097e0:	fffffc01 	.word	0xfffffc01
 80097e4:	3ff00000 	.word	0x3ff00000
 80097e8:	000fffff 	.word	0x000fffff
 80097ec:	fffffbed 	.word	0xfffffbed

080097f0 <_sbrk>:
 80097f0:	4b05      	ldr	r3, [pc, #20]	; (8009808 <_sbrk+0x18>)
 80097f2:	0002      	movs	r2, r0
 80097f4:	6819      	ldr	r1, [r3, #0]
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d101      	bne.n	80097fe <_sbrk+0xe>
 80097fa:	4904      	ldr	r1, [pc, #16]	; (800980c <_sbrk+0x1c>)
 80097fc:	6019      	str	r1, [r3, #0]
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	1882      	adds	r2, r0, r2
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	4770      	bx	lr
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	20000358 	.word	0x20000358
 800980c:	200003e0 	.word	0x200003e0

08009810 <_init>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr

0800981c <_fini>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr
