
SDR_eval_board_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  0800ada0  0800ada0  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d8  0800b5d8  00020448  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5e0  0800b5e0  00020448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5e0  0800b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5e4  0800b5e4  0001b5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  20000000  0800b5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000448  0800ba30  00020448  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  0800ba30  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245ef  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f5f  00000000  00000000  00044a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ce0  00000000  00000000  000499c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a98  00000000  00000000  0004b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d8be  00000000  00000000  0004d140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000165dd  00000000  00000000  0006a9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3563  00000000  00000000  00080fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012453e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008478  00000000  00000000  001245bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000448 	.word	0x20000448
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad88 	.word	0x0800ad88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000044c 	.word	0x2000044c
 80001dc:	0800ad88 	.word	0x0800ad88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000e74:	2008      	movs	r0, #8
 8000e76:	f008 f929 	bl	80090cc <malloc>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f000 f805 	bl	8000e90 <fsm_init>
  return this;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e01c      	b.n	8000efe <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d113      	bne.n	8000ef8 <fsm_fire+0x44>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	4798      	blx	r3
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00c      	beq.n	8000ef8 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00c      	beq.n	8000f08 <fsm_fire+0x54>
        t->out(this);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	4798      	blx	r3
      break;
 8000ef6:	e007      	b.n	8000f08 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3310      	adds	r3, #16
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	dade      	bge.n	8000ec4 <fsm_fire+0x10>
    }
  }
}
 8000f06:	e000      	b.n	8000f0a <fsm_fire+0x56>
      break;
 8000f08:	bf00      	nop
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f004 ff52 	bl	8005dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  Clock_Enable();
 8000f1c:	f000 f9f0 	bl	8001300 <Clock_Enable>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f832 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 f946 	bl	80011b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f28:	f000 f91a 	bl	8001160 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f2c:	f000 f896 	bl	800105c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f30:	f000 f8ca 	bl	80010c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize LEDs*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  RadioShieldLedInit(RADIO_SHIELD_LED);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f004 fb49 	bl	80055cc <RadioShieldLedInit>
#endif
  BSP_LED_Init(LED2);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f004 fa30 	bl	80053a0 <BSP_LED_Init>
  HAL_Radio_Init();
 8000f40:	f000 fef2 	bl	8001d28 <HAL_Radio_Init>
  APP_Init();
 8000f44:	f000 ffa8 	bl	8001e98 <APP_Init>
  HAL_TIM_OC_Start_IT(&htim2,0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	480a      	ldr	r0, [pc, #40]	; (8000f74 <main+0x60>)
 8000f4c:	f006 fc8a 	bl	8007864 <HAL_TIM_OC_Start_IT>

  RetargetInit(&huart2);
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <main+0x64>)
 8000f52:	f001 f9b3 	bl	80022bc <RetargetInit>
  HAL_UART_Receive_IT(&huart2, RxData, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4908      	ldr	r1, [pc, #32]	; (8000f7c <main+0x68>)
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <main+0x64>)
 8000f5c:	f007 fa3a 	bl	80083d4 <HAL_UART_Receive_IT>

  printf("\r\nDispositivo SDR preparado\r\n");
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <main+0x6c>)
 8000f62:	f008 f9df 	bl	8009324 <puts>
  printf("\r\nPara enviar un mensaje pulse cualquier tecla\r\n");
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <main+0x70>)
 8000f68:	f008 f9dc 	bl	8009324 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	APP_Process();
 8000f6c:	f000 feec 	bl	8001d48 <APP_Process>
 8000f70:	e7fc      	b.n	8000f6c <main+0x58>
 8000f72:	bf00      	nop
 8000f74:	20000640 	.word	0x20000640
 8000f78:	20000680 	.word	0x20000680
 8000f7c:	2000062c 	.word	0x2000062c
 8000f80:	0800ada0 	.word	0x0800ada0
 8000f84:	0800adc0 	.word	0x0800adc0

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2230      	movs	r2, #48	; 0x30
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f008 f8a0 	bl	80090dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <SystemClock_Config+0xcc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <SystemClock_Config+0xcc>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <SystemClock_Config+0xd0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fd4:	4a20      	ldr	r2, [pc, #128]	; (8001058 <SystemClock_Config+0xd0>)
 8000fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <SystemClock_Config+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001000:	2378      	movs	r3, #120	; 0x78
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001004:	2306      	movs	r3, #6
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f005 fb7d 	bl	8006710 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800101c:	f000 f9fe 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f005 fdd8 	bl	8006bf0 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001046:	f000 f9e9 	bl	800141c <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	; 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_SPI1_Init+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001090:	2208      	movs	r2, #8
 8001092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010ae:	f005 ff91 	bl	8006fd4 <HAL_SPI_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010b8:	f000 f9b0 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200005d4 	.word	0x200005d4
 80010c4:	40013000 	.word	0x40013000

080010c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_TIM2_Init+0x94>)
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_TIM2_Init+0x94>)
 80010ee:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80010f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_TIM2_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_TIM2_Init+0x94>)
 80010fc:	2263      	movs	r2, #99	; 0x63
 80010fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_TIM2_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_TIM2_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_TIM2_Init+0x94>)
 800110e:	f006 fb7d 	bl	800780c <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001118:	f000 f980 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_TIM2_Init+0x94>)
 800112a:	f006 fd1b 	bl	8007b64 <HAL_TIM_ConfigClockSource>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001134:	f000 f972 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM2_Init+0x94>)
 8001146:	f006 ff37 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001150:	f000 f964 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000640 	.word	0x20000640

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART2_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001198:	f006 ff90 	bl	80080bc <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f93b 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000680 	.word	0x20000680
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <MX_GPIO_Init+0x138>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a46      	ldr	r2, [pc, #280]	; (80012ec <MX_GPIO_Init+0x138>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b44      	ldr	r3, [pc, #272]	; (80012ec <MX_GPIO_Init+0x138>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <MX_GPIO_Init+0x138>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a3f      	ldr	r2, [pc, #252]	; (80012ec <MX_GPIO_Init+0x138>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <MX_GPIO_Init+0x138>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <MX_GPIO_Init+0x138>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a38      	ldr	r2, [pc, #224]	; (80012ec <MX_GPIO_Init+0x138>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <MX_GPIO_Init+0x138>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b32      	ldr	r3, [pc, #200]	; (80012ec <MX_GPIO_Init+0x138>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a31      	ldr	r2, [pc, #196]	; (80012ec <MX_GPIO_Init+0x138>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <MX_GPIO_Init+0x138>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NUCLEO_LED1_PIN_Pin|SDN_SP1_433_Pin|SDN_SP1_868_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001240:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_GPIO_Init+0x13c>)
 8001242:	f005 fa19 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_S_CS_Pin|SPI1_H_CS_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2160      	movs	r1, #96	; 0x60
 800124a:	482a      	ldr	r0, [pc, #168]	; (80012f4 <MX_GPIO_Init+0x140>)
 800124c:	f005 fa14 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_Pin PC7 */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|GPIO_PIN_7;
 8001250:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_GPIO_Init+0x144>)
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4825      	ldr	r0, [pc, #148]	; (80012fc <MX_GPIO_Init+0x148>)
 8001266:	f004 ffa3 	bl	80061b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUCLEO_LED1_PIN_Pin SDN_SP1_433_Pin */
  GPIO_InitStruct.Pin = NUCLEO_LED1_PIN_Pin|SDN_SP1_433_Pin;
 800126a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	481b      	ldr	r0, [pc, #108]	; (80012f0 <MX_GPIO_Init+0x13c>)
 8001284:	f004 ff94 	bl	80061b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_SP1_868_Pin */
  GPIO_InitStruct.Pin = SDN_SP1_868_Pin;
 8001288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDN_SP1_868_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_GPIO_Init+0x13c>)
 80012a2:	f004 ff85 	bl	80061b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_S_CS_Pin SPI1_H_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_S_CS_Pin|SPI1_H_CS_Pin;
 80012a6:	2360      	movs	r3, #96	; 0x60
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b2:	2302      	movs	r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_GPIO_Init+0x140>)
 80012be:	f004 ff77 	bl	80061b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2017      	movs	r0, #23
 80012c8:	f004 ff0b 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012cc:	2017      	movs	r0, #23
 80012ce:	f004 ff24 	bl	800611a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2028      	movs	r0, #40	; 0x28
 80012d8:	f004 ff03 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012dc:	2028      	movs	r0, #40	; 0x28
 80012de:	f004 ff1c 	bl	800611a <HAL_NVIC_EnableIRQ>

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	10210000 	.word	0x10210000
 80012fc:	40020800 	.word	0x40020800

08001300 <Clock_Enable>:

/* USER CODE BEGIN 4 */
void Clock_Enable(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
  __GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <Clock_Enable+0x84>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <Clock_Enable+0x84>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <Clock_Enable+0x84>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <Clock_Enable+0x84>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <Clock_Enable+0x84>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <Clock_Enable+0x84>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <Clock_Enable+0x84>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <Clock_Enable+0x84>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <Clock_Enable+0x84>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __GPIOD_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <Clock_Enable+0x84>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <Clock_Enable+0x84>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <Clock_Enable+0x84>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <handle_TIM2>:

void handle_TIM2(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	Rx_count++;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <handle_TIM2+0x18>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <handle_TIM2+0x18>)
 8001394:	6013      	str	r3, [r2, #0]
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	200006c0 	.word	0x200006c0

080013a4 <check_Rx_count>:

FlagStatus check_Rx_count(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
	FlagStatus retval = RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
	if(Rx_count >= 100) //Debug value 100 for 10 secs. Final value 10000 for 10 secs.
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <check_Rx_count+0x2c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b63      	cmp	r3, #99	; 0x63
 80013b4:	d904      	bls.n	80013c0 <check_Rx_count+0x1c>
	{
		retval = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	71fb      	strb	r3, [r7, #7]
		Rx_count = 0;
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <check_Rx_count+0x2c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
	}
	return retval;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200006c0 	.word	0x200006c0

080013d4 <check_Tx_count>:

FlagStatus check_Tx_count(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
	FlagStatus retval = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
	if(Rx_count >= 50) //Debug value 100 for 10 secs. Final value 10000 for 10 secs.
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <check_Tx_count+0x2c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b31      	cmp	r3, #49	; 0x31
 80013e4:	d904      	bls.n	80013f0 <check_Tx_count+0x1c>
	{
		retval = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	71fb      	strb	r3, [r7, #7]
		Rx_count = 0;
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <check_Tx_count+0x2c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	}
	return retval;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200006c0 	.word	0x200006c0

08001404 <reset_RX_count>:

void reset_RX_count(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	Rx_count = 0;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <reset_RX_count+0x14>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	200006c0 	.word	0x200006c0

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <time_out_rx>:

/* Private function prototypes -----------------------------------------------*/


static int time_out_rx(fsm_t* this)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	return ((Spirit1_RX_timeout)||(check_Rx_count()));
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <time_out_rx+0x2c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d104      	bne.n	8001448 <time_out_rx+0x1c>
 800143e:	f7ff ffb1 	bl	80013a4 <check_Rx_count>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <time_out_rx+0x20>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <time_out_rx+0x22>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000052e 	.word	0x2000052e

0800145c <time_out_tx>:

static int time_out_tx(fsm_t* this)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	return check_Tx_count();
 8001464:	f7ff ffb6 	bl	80013d4 <check_Tx_count>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <tx_flag>:

static int tx_flag(fsm_t* this)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	return (tx_value && LEDxOnFlag);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <tx_flag+0x2c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <tx_flag+0x1c>
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <tx_flag+0x30>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <tx_flag+0x1c>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <tx_flag+0x1e>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2000052f 	.word	0x2000052f
 80014a4:	200006cc 	.word	0x200006cc

080014a8 <rx_flag>:

static int rx_flag(fsm_t* this)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	return xRxDoneFlag;
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <rx_flag+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000052c 	.word	0x2000052c

080014c8 <data_received>:


static int data_received(fsm_t* this)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if(xRxFrame.Cmd == MSG_CMD) return 1;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <data_received+0x24>)
 80014d2:	78db      	ldrb	r3, [r3, #3]
 80014d4:	2bff      	cmp	r3, #255	; 0xff
 80014d6:	d101      	bne.n	80014dc <data_received+0x14>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <data_received+0x16>
	else return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000053c 	.word	0x2000053c

080014f0 <ack_received>:

static int ack_received(fsm_t* this)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    if(xRxFrame.Cmd == ACK_OK) return 1;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <ack_received+0x24>)
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <ack_received+0x14>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <ack_received+0x16>
    else return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000053c 	.word	0x2000053c

08001518 <multicast>:

static int multicast(fsm_t* this)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

	if ((dest_addr == MULTICAST_ADDRESS) || (dest_addr == BROADCAST_ADDRESS)) return 1;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <multicast+0x2c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2bee      	cmp	r3, #238	; 0xee
 8001526:	d003      	beq.n	8001530 <multicast+0x18>
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <multicast+0x2c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d101      	bne.n	8001534 <multicast+0x1c>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <multicast+0x1e>
	else return 0;
 8001534:	2300      	movs	r3, #0

}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200006d8 	.word	0x200006d8

08001548 <address_known>:

static int address_known(fsm_t* this)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if ((dest_addr != MULTICAST_ADDRESS) && (dest_addr != BROADCAST_ADDRESS)) return 1;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <address_known+0x2c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2bee      	cmp	r3, #238	; 0xee
 8001556:	d005      	beq.n	8001564 <address_known+0x1c>
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <address_known+0x2c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2bff      	cmp	r3, #255	; 0xff
 800155e:	d001      	beq.n	8001564 <address_known+0x1c>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <address_known+0x1e>
	else return 0;
 8001564:	2300      	movs	r3, #0

}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200006d8 	.word	0x200006d8

08001578 <END_Tx>:

static int END_Tx(fsm_t* this)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	return (xTxDoneFlag && LEDxOffFlag);
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <END_Tx+0x2c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <END_Tx+0x1e>
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <END_Tx+0x30>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <END_Tx+0x1e>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <END_Tx+0x20>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	2000052d 	.word	0x2000052d
 80015a8:	200006e0 	.word	0x200006e0

080015ac <switch_channel>:

static int switch_channel(fsm_t* this)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	return CCAxItFlag;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <switch_channel+0x18>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	200006c5 	.word	0x200006c5

080015c8 <ACK_confirm>:

static int ACK_confirm (fsm_t* this)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	return ACK_Process;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <ACK_confirm+0x18>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	200006da 	.word	0x200006da

080015e4 <EN_Rx>:

void EN_Rx(fsm_t* this)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	selectedBand.conf_433 = !(selectedBand.conf_433);
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <EN_Rx+0x78>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <EN_Rx+0x78>)
 80015fe:	705a      	strb	r2, [r3, #1]
	selectedBand.conf_868 = !(selectedBand.conf_868);
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <EN_Rx+0x78>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <EN_Rx+0x78>)
 8001612:	701a      	strb	r2, [r3, #0]

    AppliReceiveBuff(aReceiveBuffer, RxLength);
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <EN_Rx+0x7c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <EN_Rx+0x80>)
 800161c:	f000 fc0e 	bl	8001e3c <AppliReceiveBuff>
    Spirit1_RX_timeout = RESET;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <EN_Rx+0x84>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    reset_RX_count();
 8001626:	f7ff feed 	bl	8001404 <reset_RX_count>

    resetFlag = SET;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <EN_Rx+0x88>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]

	xTxDoneFlag = RESET;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <EN_Rx+0x8c>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

    //RadioShieldLedOff(RADIO_SHIELD_LED);
    ACK_Process = RESET;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <EN_Rx+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
    IDLE_Process = SET;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <EN_Rx+0x94>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]

    LEDxOffFlag = RESET;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <EN_Rx+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]

    printf("\r\nDispositivo SDR preparado\r\n");
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <EN_Rx+0x9c>)
 800164a:	f007 fe6b 	bl	8009324 <puts>
    printf("\r\nPara enviar un mensaje pulse cualquier tecla\r\n");
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <EN_Rx+0xa0>)
 8001650:	f007 fe68 	bl	8009324 <puts>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200006ec 	.word	0x200006ec
 8001660:	20000464 	.word	0x20000464
 8001664:	2000047c 	.word	0x2000047c
 8001668:	2000052e 	.word	0x2000052e
 800166c:	200006c4 	.word	0x200006c4
 8001670:	2000052d 	.word	0x2000052d
 8001674:	200006da 	.word	0x200006da
 8001678:	200006f8 	.word	0x200006f8
 800167c:	200006e0 	.word	0x200006e0
 8001680:	0800adf0 	.word	0x0800adf0
 8001684:	0800ae10 	.word	0x0800ae10

08001688 <Tx_Error>:

void Tx_Error(fsm_t* this)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	printf("\r\nError En la transmision por el canal ");
 8001690:	4825      	ldr	r0, [pc, #148]	; (8001728 <Tx_Error+0xa0>)
 8001692:	f007 fdd3 	bl	800923c <iprintf>
	if 	 (selectedBand.conf_868 == SET) printf("868 MHz:\r\n");
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <Tx_Error+0xa4>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d103      	bne.n	80016a6 <Tx_Error+0x1e>
 800169e:	4824      	ldr	r0, [pc, #144]	; (8001730 <Tx_Error+0xa8>)
 80016a0:	f007 fe40 	bl	8009324 <puts>
 80016a4:	e002      	b.n	80016ac <Tx_Error+0x24>
	else printf("433 MHz:\r\n");
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <Tx_Error+0xac>)
 80016a8:	f007 fe3c 	bl	8009324 <puts>
    printf("\r\nERROR AL INTENTAR CONECTAR CON EL TRANSCEPTOR \r\n");
 80016ac:	4822      	ldr	r0, [pc, #136]	; (8001738 <Tx_Error+0xb0>)
 80016ae:	f007 fe39 	bl	8009324 <puts>

    AppliReceiveBuff(aReceiveBuffer, RxLength);
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <Tx_Error+0xb4>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4821      	ldr	r0, [pc, #132]	; (8001740 <Tx_Error+0xb8>)
 80016ba:	f000 fbbf 	bl	8001e3c <AppliReceiveBuff>
    Spirit1_RX_timeout = RESET;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <Tx_Error+0xbc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    reset_RX_count();
 80016c4:	f7ff fe9e 	bl	8001404 <reset_RX_count>

    resetFlag = SET;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <Tx_Error+0xc0>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]

	xTxDoneFlag = RESET;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <Tx_Error+0xc4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

   // RadioShieldLedOff(RADIO_SHIELD_LED);
    ACK_Process = RESET;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <Tx_Error+0xc8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
    IDLE_Process = SET;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <Tx_Error+0xcc>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]

    TxErrorFlag = SET;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <Tx_Error+0xd0>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
	tx_value = RESET;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <Tx_Error+0xd4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]

    selectedBand.conf_433 = !(selectedBand.conf_433);
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <Tx_Error+0xa4>)
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <Tx_Error+0xa4>)
 80016fe:	705a      	strb	r2, [r3, #1]
	selectedBand.conf_868 = !(selectedBand.conf_868);
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <Tx_Error+0xa4>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <Tx_Error+0xa4>)
 8001712:	701a      	strb	r2, [r3, #0]

	printf("\r\nDispositivo SDR preparado\r\n");
 8001714:	4812      	ldr	r0, [pc, #72]	; (8001760 <Tx_Error+0xd8>)
 8001716:	f007 fe05 	bl	8009324 <puts>
    printf("\r\nPara enviar un mensaje pulse cualquier tecla\r\n");
 800171a:	4812      	ldr	r0, [pc, #72]	; (8001764 <Tx_Error+0xdc>)
 800171c:	f007 fe02 	bl	8009324 <puts>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	0800ae40 	.word	0x0800ae40
 800172c:	200006ec 	.word	0x200006ec
 8001730:	0800ae68 	.word	0x0800ae68
 8001734:	0800ae74 	.word	0x0800ae74
 8001738:	0800ae80 	.word	0x0800ae80
 800173c:	20000464 	.word	0x20000464
 8001740:	2000047c 	.word	0x2000047c
 8001744:	2000052e 	.word	0x2000052e
 8001748:	200006c4 	.word	0x200006c4
 800174c:	2000052d 	.word	0x2000052d
 8001750:	200006da 	.word	0x200006da
 8001754:	200006f8 	.word	0x200006f8
 8001758:	200006db 	.word	0x200006db
 800175c:	2000052f 	.word	0x2000052f
 8001760:	0800adf0 	.word	0x0800adf0
 8001764:	0800ae10 	.word	0x0800ae10

08001768 <send_data>:
void send_data(fsm_t* this)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]
	tx_value = RESET;
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <send_data+0xc0>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
	xTxFrame.Cmd = MSG_CMD;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <send_data+0xc4>)
 8001778:	22ff      	movs	r2, #255	; 0xff
 800177a:	70da      	strb	r2, [r3, #3]
	xTxFrame.CmdLen = 0x01;
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <send_data+0xc4>)
 800177e:	2201      	movs	r2, #1
 8001780:	709a      	strb	r2, [r3, #2]
	xTxFrame.Cmdtag = txCounter++;
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <send_data+0xc8>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	b291      	uxth	r1, r2
 800178a:	4a29      	ldr	r2, [pc, #164]	; (8001830 <send_data+0xc8>)
 800178c:	8011      	strh	r1, [r2, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <send_data+0xc4>)
 8001792:	701a      	strb	r2, [r3, #0]
	xTxFrame.CmdType = APPLI_CMD;
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <send_data+0xc4>)
 8001796:	2211      	movs	r2, #17
 8001798:	705a      	strb	r2, [r3, #1]
	xTxFrame.DataBuff = aTransmitBuffer;
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <send_data+0xc4>)
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <send_data+0xcc>)
 800179e:	609a      	str	r2, [r3, #8]
	xTxFrame.DataLen = TxLength;
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <send_data+0xd0>)
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <send_data+0xc4>)
 80017a6:	711a      	strb	r2, [r3, #4]
	AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <send_data+0xc4>)
 80017aa:	791b      	ldrb	r3, [r3, #4]
 80017ac:	4619      	mov	r1, r3
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <send_data+0xc4>)
 80017b0:	f000 faea 	bl	8001d88 <AppliSendBuff>

	reset_RX_count();
 80017b4:	f7ff fe26 	bl	8001404 <reset_RX_count>

    LEDxOnFlag = RESET;
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <send_data+0xd4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]

	printf("\r\n\r\nEnviando el siguiente mensaje por el canal ");
 80017be:	4820      	ldr	r0, [pc, #128]	; (8001840 <send_data+0xd8>)
 80017c0:	f007 fd3c 	bl	800923c <iprintf>
	if 	 (selectedBand.conf_868 == SET) printf("868 MHz:\r\n");
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <send_data+0xdc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d103      	bne.n	80017d4 <send_data+0x6c>
 80017cc:	481e      	ldr	r0, [pc, #120]	; (8001848 <send_data+0xe0>)
 80017ce:	f007 fda9 	bl	8009324 <puts>
 80017d2:	e002      	b.n	80017da <send_data+0x72>
	else printf("433 MHz:\r\n");
 80017d4:	481d      	ldr	r0, [pc, #116]	; (800184c <send_data+0xe4>)
 80017d6:	f007 fda5 	bl	8009324 <puts>
	printf("\r\nCampo CMD: %d\r\n", MSG_CMD);
 80017da:	21ff      	movs	r1, #255	; 0xff
 80017dc:	481c      	ldr	r0, [pc, #112]	; (8001850 <send_data+0xe8>)
 80017de:	f007 fd2d 	bl	800923c <iprintf>
	printf("\r\nCampo CMD Tag: %d\r\n", txCounter);
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <send_data+0xc8>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	4619      	mov	r1, r3
 80017e8:	481a      	ldr	r0, [pc, #104]	; (8001854 <send_data+0xec>)
 80017ea:	f007 fd27 	bl	800923c <iprintf>
	printf("\r\nCampo CMD Type: %d\r\n", APPLI_CMD);
 80017ee:	2111      	movs	r1, #17
 80017f0:	4819      	ldr	r0, [pc, #100]	; (8001858 <send_data+0xf0>)
 80017f2:	f007 fd23 	bl	800923c <iprintf>
	printf("\r\nComando: %d%d%d%d%d\r\n", aTransmitBuffer[0], aTransmitBuffer[1], aTransmitBuffer[2], aTransmitBuffer[3], aTransmitBuffer[4]);
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <send_data+0xcc>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <send_data+0xcc>)
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	4618      	mov	r0, r3
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <send_data+0xcc>)
 8001804:	789b      	ldrb	r3, [r3, #2]
 8001806:	461c      	mov	r4, r3
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <send_data+0xcc>)
 800180a:	78db      	ldrb	r3, [r3, #3]
 800180c:	461a      	mov	r2, r3
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <send_data+0xcc>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	9200      	str	r2, [sp, #0]
 8001816:	4623      	mov	r3, r4
 8001818:	4602      	mov	r2, r0
 800181a:	4810      	ldr	r0, [pc, #64]	; (800185c <send_data+0xf4>)
 800181c:	f007 fd0e 	bl	800923c <iprintf>

}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	2000052f 	.word	0x2000052f
 800182c:	20000530 	.word	0x20000530
 8001830:	200005aa 	.word	0x200005aa
 8001834:	20000468 	.word	0x20000468
 8001838:	20000084 	.word	0x20000084
 800183c:	200006cc 	.word	0x200006cc
 8001840:	0800aeb4 	.word	0x0800aeb4
 8001844:	200006ec 	.word	0x200006ec
 8001848:	0800ae68 	.word	0x0800ae68
 800184c:	0800ae74 	.word	0x0800ae74
 8001850:	0800aee4 	.word	0x0800aee4
 8001854:	0800aef8 	.word	0x0800aef8
 8001858:	0800af10 	.word	0x0800af10
 800185c:	0800af28 	.word	0x0800af28

08001860 <read_RX_Data>:

void read_RX_Data(fsm_t* this)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	uint8_t msg_length = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

	xRxDoneFlag = RESET;
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <read_RX_Data+0xe4>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]

	Spirit1GetRxPacket(aReceiveBuffer,&RxLength);
 8001872:	4935      	ldr	r1, [pc, #212]	; (8001948 <read_RX_Data+0xe8>)
 8001874:	4835      	ldr	r0, [pc, #212]	; (800194c <read_RX_Data+0xec>)
 8001876:	f003 fd3b 	bl	80052f0 <Spirit1GetRxPacket>
	/*rRSSIValue = Spirit1GetRssiTH();*/
	/*rRSSIValue = S2LPGetRssiTH();*/
	xRxFrame.Cmd = aReceiveBuffer[0];
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <read_RX_Data+0xec>)
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <read_RX_Data+0xf0>)
 8001880:	70da      	strb	r2, [r3, #3]
	xRxFrame.CmdLen = aReceiveBuffer[1];
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <read_RX_Data+0xec>)
 8001884:	785a      	ldrb	r2, [r3, #1]
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <read_RX_Data+0xf0>)
 8001888:	709a      	strb	r2, [r3, #2]
	xRxFrame.Cmdtag = aReceiveBuffer[2];
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <read_RX_Data+0xec>)
 800188c:	789a      	ldrb	r2, [r3, #2]
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <read_RX_Data+0xf0>)
 8001890:	701a      	strb	r2, [r3, #0]
	xRxFrame.CmdType = aReceiveBuffer[3];
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <read_RX_Data+0xec>)
 8001894:	78da      	ldrb	r2, [r3, #3]
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <read_RX_Data+0xf0>)
 8001898:	705a      	strb	r2, [r3, #1]
	xRxFrame.DataLen = aReceiveBuffer[4];
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <read_RX_Data+0xec>)
 800189c:	791a      	ldrb	r2, [r3, #4]
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <read_RX_Data+0xf0>)
 80018a0:	711a      	strb	r2, [r3, #4]

	/*FIXED BUG IN DATA RECEPTION*/
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 80018a2:	2305      	movs	r3, #5
 80018a4:	73bb      	strb	r3, [r7, #14]
 80018a6:	e008      	b.n	80018ba <read_RX_Data+0x5a>
	{
	  temp_DataBuff[xIndex] = aReceiveBuffer[xIndex];
 80018a8:	7bba      	ldrb	r2, [r7, #14]
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	4927      	ldr	r1, [pc, #156]	; (800194c <read_RX_Data+0xec>)
 80018ae:	5c89      	ldrb	r1, [r1, r2]
 80018b0:	4a28      	ldr	r2, [pc, #160]	; (8001954 <read_RX_Data+0xf4>)
 80018b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	3301      	adds	r3, #1
 80018b8:	73bb      	strb	r3, [r7, #14]
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <read_RX_Data+0xe8>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	7bba      	ldrb	r2, [r7, #14]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3f1      	bcc.n	80018a8 <read_RX_Data+0x48>
	}

	printf("\r\nSe ha Recibido el siguiente mensaje a traves del canal ");
 80018c4:	4824      	ldr	r0, [pc, #144]	; (8001958 <read_RX_Data+0xf8>)
 80018c6:	f007 fcb9 	bl	800923c <iprintf>
	if 	 (selectedBand.conf_868 == SET)printf("868 MHz:\r\n");
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <read_RX_Data+0xfc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d103      	bne.n	80018da <read_RX_Data+0x7a>
 80018d2:	4823      	ldr	r0, [pc, #140]	; (8001960 <read_RX_Data+0x100>)
 80018d4:	f007 fd26 	bl	8009324 <puts>
 80018d8:	e002      	b.n	80018e0 <read_RX_Data+0x80>
	else printf("433 MHz:\r\n");
 80018da:	4822      	ldr	r0, [pc, #136]	; (8001964 <read_RX_Data+0x104>)
 80018dc:	f007 fd22 	bl	8009324 <puts>
	printf("\r\nCampo CMD: %d\r\n", aReceiveBuffer[0]);
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <read_RX_Data+0xec>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4820      	ldr	r0, [pc, #128]	; (8001968 <read_RX_Data+0x108>)
 80018e8:	f007 fca8 	bl	800923c <iprintf>
	printf("\r\nCampo CMD Tag: %d\r\n", aReceiveBuffer[2]);
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <read_RX_Data+0xec>)
 80018ee:	789b      	ldrb	r3, [r3, #2]
 80018f0:	4619      	mov	r1, r3
 80018f2:	481e      	ldr	r0, [pc, #120]	; (800196c <read_RX_Data+0x10c>)
 80018f4:	f007 fca2 	bl	800923c <iprintf>
	printf("\r\nCampo CMD Type: %d\r\n", aReceiveBuffer[3]);
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <read_RX_Data+0xec>)
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	4619      	mov	r1, r3
 80018fe:	481c      	ldr	r0, [pc, #112]	; (8001970 <read_RX_Data+0x110>)
 8001900:	f007 fc9c 	bl	800923c <iprintf>
	printf("\r\nComando: ");
 8001904:	481b      	ldr	r0, [pc, #108]	; (8001974 <read_RX_Data+0x114>)
 8001906:	f007 fc99 	bl	800923c <iprintf>

	msg_length = 5;
 800190a:	2305      	movs	r3, #5
 800190c:	73fb      	strb	r3, [r7, #15]
	while (msg_length < RxLength)
 800190e:	e009      	b.n	8001924 <read_RX_Data+0xc4>
	{
		printf("%d", aReceiveBuffer[msg_length]);
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <read_RX_Data+0xec>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	4619      	mov	r1, r3
 8001918:	4817      	ldr	r0, [pc, #92]	; (8001978 <read_RX_Data+0x118>)
 800191a:	f007 fc8f 	bl	800923c <iprintf>
		msg_length++;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	3301      	adds	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
	while (msg_length < RxLength)
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <read_RX_Data+0xe8>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	429a      	cmp	r2, r3
 800192c:	d3f0      	bcc.n	8001910 <read_RX_Data+0xb0>
	}
	printf("\r\n");
 800192e:	4813      	ldr	r0, [pc, #76]	; (800197c <read_RX_Data+0x11c>)
 8001930:	f007 fcf8 	bl	8009324 <puts>

	xRxFrame.DataBuff= temp_DataBuff;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <read_RX_Data+0xf0>)
 8001936:	4a07      	ldr	r2, [pc, #28]	; (8001954 <read_RX_Data+0xf4>)
 8001938:	609a      	str	r2, [r3, #8]
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000052c 	.word	0x2000052c
 8001948:	20000464 	.word	0x20000464
 800194c:	2000047c 	.word	0x2000047c
 8001950:	2000053c 	.word	0x2000053c
 8001954:	200005ac 	.word	0x200005ac
 8001958:	0800af40 	.word	0x0800af40
 800195c:	200006ec 	.word	0x200006ec
 8001960:	0800ae68 	.word	0x0800ae68
 8001964:	0800ae74 	.word	0x0800ae74
 8001968:	0800aee4 	.word	0x0800aee4
 800196c:	0800aef8 	.word	0x0800aef8
 8001970:	0800af10 	.word	0x0800af10
 8001974:	0800af7c 	.word	0x0800af7c
 8001978:	0800af88 	.word	0x0800af88
 800197c:	0800af8c 	.word	0x0800af8c

08001980 <read_address>:

void read_address(fsm_t* this)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 8001988:	f001 fe6a 	bl	8003660 <SpiritPktCommonGetReceivedDestAddress>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <read_address+0x1c>)
 8001992:	701a      	strb	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200006d8 	.word	0x200006d8

080019a0 <read_ACK_address>:

void read_ACK_address(fsm_t* this)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 80019a8:	f001 fe5a 	bl	8003660 <SpiritPktCommonGetReceivedDestAddress>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <read_ACK_address+0x24>)
 80019b2:	701a      	strb	r2, [r3, #0]
    ACK_Process = SET;
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <read_ACK_address+0x28>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200006d8 	.word	0x200006d8
 80019c8:	200006da 	.word	0x200006da

080019cc <send_ACK>:
    ACK_Process = RESET;
    IDLE_Process = SET;
}

void send_ACK(fsm_t* this)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	  xTxFrame.Cmd = ACK_OK;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <send_ACK+0x50>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	70da      	strb	r2, [r3, #3]
	  xTxFrame.CmdLen = 0x01;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <send_ACK+0x50>)
 80019dc:	2201      	movs	r2, #1
 80019de:	709a      	strb	r2, [r3, #2]
	  xTxFrame.Cmdtag = xRxFrame.Cmdtag;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <send_ACK+0x54>)
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <send_ACK+0x50>)
 80019e6:	701a      	strb	r2, [r3, #0]
	  xTxFrame.CmdType = APPLI_CMD;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <send_ACK+0x50>)
 80019ea:	2211      	movs	r2, #17
 80019ec:	705a      	strb	r2, [r3, #1]
	  xTxFrame.DataBuff = aTransmitBuffer;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <send_ACK+0x50>)
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <send_ACK+0x58>)
 80019f2:	609a      	str	r2, [r3, #8]
	  xTxFrame.DataLen = TxLength;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <send_ACK+0x5c>)
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <send_ACK+0x50>)
 80019fa:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(DELAY_TX_LED_GLOW);
 80019fc:	20c8      	movs	r0, #200	; 0xc8
 80019fe:	f004 fa51 	bl	8005ea4 <HAL_Delay>

	  printf("\r\nEnviando ACK...\r\n");
 8001a02:	480a      	ldr	r0, [pc, #40]	; (8001a2c <send_ACK+0x60>)
 8001a04:	f007 fc8e 	bl	8009324 <puts>

	  AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <send_ACK+0x50>)
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <send_ACK+0x50>)
 8001a10:	f000 f9ba 	bl	8001d88 <AppliSendBuff>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000530 	.word	0x20000530
 8001a20:	2000053c 	.word	0x2000053c
 8001a24:	20000468 	.word	0x20000468
 8001a28:	20000084 	.word	0x20000084
 8001a2c:	0800af90 	.word	0x0800af90

08001a30 <TxFlag433>:

/*LED IN/OUT STATE MACHINE*/
static int TxFlag433(fsm_t* this)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	return (tx_value && selectedBand.conf_433);
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <TxFlag433+0x2c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <TxFlag433+0x1c>
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <TxFlag433+0x30>)
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <TxFlag433+0x1c>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <TxFlag433+0x1e>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000052f 	.word	0x2000052f
 8001a60:	200006ec 	.word	0x200006ec

08001a64 <RxFlag433>:

static int RxFlag433(fsm_t* this)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	return (xRxDoneFlag && selectedBand.conf_433);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <RxFlag433+0x2c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <RxFlag433+0x1e>
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <RxFlag433+0x30>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <RxFlag433+0x1e>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <RxFlag433+0x20>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	2000052c 	.word	0x2000052c
 8001a94:	200006ec 	.word	0x200006ec

08001a98 <TxFlag868>:

static int TxFlag868(fsm_t* this)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	return (tx_value && selectedBand.conf_868);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <TxFlag868+0x2c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <TxFlag868+0x1c>
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <TxFlag868+0x30>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <TxFlag868+0x1c>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <TxFlag868+0x1e>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2000052f 	.word	0x2000052f
 8001ac8:	200006ec 	.word	0x200006ec

08001acc <RxFlag868>:

static int RxFlag868(fsm_t* this)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	return (xRxDoneFlag && selectedBand.conf_868);
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <RxFlag868+0x2c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <RxFlag868+0x1e>
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <RxFlag868+0x30>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <RxFlag868+0x1e>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <RxFlag868+0x20>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	2000052c 	.word	0x2000052c
 8001afc:	200006ec 	.word	0x200006ec

08001b00 <time_in_flag>:


static int time_in_flag(fsm_t* this)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	return !resetFlag;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <time_in_flag+0x24>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200006c4 	.word	0x200006c4

08001b28 <time_out_flag>:

static int time_out_flag(fsm_t* this)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	return resetFlag;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <time_out_flag+0x18>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	200006c4 	.word	0x200006c4

08001b44 <Tx_Error_flag>:

static int Tx_Error_flag(fsm_t* this)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	return TxErrorFlag;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <Tx_Error_flag+0x18>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	200006db 	.word	0x200006db

08001b60 <tx_done>:

static int tx_done(fsm_t* this)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	return xTxDoneFlag;
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <tx_done+0x1c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	2000052d 	.word	0x2000052d

08001b80 <LED_ON>:


void LED_ON(fsm_t* this)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	if		(selectedBand.conf_433) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <LED_ON+0x50>)
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <LED_ON+0x1c>
 8001b90:	2201      	movs	r2, #1
 8001b92:	2110      	movs	r1, #16
 8001b94:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <LED_ON+0x54>)
 8001b96:	f004 fd6f 	bl	8006678 <HAL_GPIO_WritePin>
 8001b9a:	e00e      	b.n	8001bba <LED_ON+0x3a>
	else if (selectedBand.conf_868) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <LED_ON+0x50>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <LED_ON+0x30>
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <LED_ON+0x54>)
 8001baa:	f004 fd65 	bl	8006678 <HAL_GPIO_WritePin>
 8001bae:	e004      	b.n	8001bba <LED_ON+0x3a>
	else
	{
		/*BOTH LEDS ON IF ERROR*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <LED_ON+0x54>)
 8001bb6:	f004 fd5f 	bl	8006678 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
    LEDxOnFlag = SET;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <LED_ON+0x58>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
    LEDxOffFlag = RESET;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <LED_ON+0x5c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200006ec 	.word	0x200006ec
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	200006cc 	.word	0x200006cc
 8001bdc:	200006e0 	.word	0x200006e0

08001be0 <LED_OFF>:

void LED_OFF(fsm_t* this)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	if		(selectedBand.conf_433) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <LED_OFF+0x54>)
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <LED_OFF+0x1c>
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	4810      	ldr	r0, [pc, #64]	; (8001c38 <LED_OFF+0x58>)
 8001bf6:	f004 fd3f 	bl	8006678 <HAL_GPIO_WritePin>
 8001bfa:	e00e      	b.n	8001c1a <LED_OFF+0x3a>
	else if (selectedBand.conf_868) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <LED_OFF+0x54>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <LED_OFF+0x30>
 8001c04:	2200      	movs	r2, #0
 8001c06:	2110      	movs	r1, #16
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <LED_OFF+0x58>)
 8001c0a:	f004 fd35 	bl	8006678 <HAL_GPIO_WritePin>
 8001c0e:	e004      	b.n	8001c1a <LED_OFF+0x3a>
	else
	{
		/*BOTH LEDS ON IF ERROR*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2110      	movs	r1, #16
 8001c14:	4808      	ldr	r0, [pc, #32]	; (8001c38 <LED_OFF+0x58>)
 8001c16:	f004 fd2f 	bl	8006678 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
    TxErrorFlag = RESET;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <LED_OFF+0x5c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
    LEDxOffFlag = SET;
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <LED_OFF+0x60>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
    LEDxOnFlag = RESET;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <LED_OFF+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200006ec 	.word	0x200006ec
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	200006db 	.word	0x200006db
 8001c40:	200006e0 	.word	0x200006e0
 8001c44:	200006cc 	.word	0x200006cc

08001c48 <LED1_ON>:

void LED1_ON(fsm_t* this)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	BSP_LED_On(RADIO_SHIELD_LED);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f003 fbdf 	bl	8005414 <BSP_LED_On>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <LED_Toggle>:

void LED_Toggle(fsm_t* this)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]

    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 8001c6c:	f001 fcf8 	bl	8003660 <SpiritPktCommonGetReceivedDestAddress>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <LED_Toggle+0x64>)
 8001c76:	701a      	strb	r2, [r3, #0]

	HAL_Delay(DELAY_TX_LED_GLOW);
 8001c78:	20c8      	movs	r0, #200	; 0xc8
 8001c7a:	f004 f913 	bl	8005ea4 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001c7e:	e016      	b.n	8001cae <LED_Toggle+0x4e>
	{
		if		(selectedBand.conf_433) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <LED_Toggle+0x68>)
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <LED_Toggle+0x32>
 8001c88:	2110      	movs	r1, #16
 8001c8a:	4810      	ldr	r0, [pc, #64]	; (8001ccc <LED_Toggle+0x6c>)
 8001c8c:	f004 fd0d 	bl	80066aa <HAL_GPIO_TogglePin>
 8001c90:	e007      	b.n	8001ca2 <LED_Toggle+0x42>
		else if (selectedBand.conf_868) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <LED_Toggle+0x68>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <LED_Toggle+0x42>
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	480b      	ldr	r0, [pc, #44]	; (8001ccc <LED_Toggle+0x6c>)
 8001c9e:	f004 fd04 	bl	80066aa <HAL_GPIO_TogglePin>

		HAL_Delay(DELAY_RX_LED_TOGGLE);
 8001ca2:	2064      	movs	r0, #100	; 0x64
 8001ca4:	f004 f8fe 	bl	8005ea4 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	3301      	adds	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d9e5      	bls.n	8001c80 <LED_Toggle+0x20>
	}

	RadioShieldLedOff(RADIO_SHIELD_LED);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f003 fcb7 	bl	8005628 <RadioShieldLedOff>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200006d8 	.word	0x200006d8
 8001cc8:	200006ec 	.word	0x200006ec
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <LED1_Toggle>:

void LED1_Toggle(fsm_t* this)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]

    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 8001cdc:	f001 fcc0 	bl	8003660 <SpiritPktCommonGetReceivedDestAddress>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <LED1_Toggle+0x50>)
 8001ce6:	701a      	strb	r2, [r3, #0]

    reset_RX_count();
 8001ce8:	f7ff fb8c 	bl	8001404 <reset_RX_count>

	HAL_Delay(DELAY_TX_LED_GLOW);
 8001cec:	20c8      	movs	r0, #200	; 0xc8
 8001cee:	f004 f8d9 	bl	8005ea4 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001cf2:	e008      	b.n	8001d06 <LED1_Toggle+0x36>
	{
	    BSP_LED_Toggle(LED2);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f003 fba1 	bl	800543c <BSP_LED_Toggle>

		HAL_Delay(DELAY_RX_LED_TOGGLE);
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	f004 f8d2 	bl	8005ea4 <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	3301      	adds	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d9f3      	bls.n	8001cf4 <LED1_Toggle+0x24>
	}

	BSP_LED_On(RADIO_SHIELD_LED);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f003 fb81 	bl	8005414 <BSP_LED_On>

    resetFlag = RESET;
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <LED1_Toggle+0x54>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200006d8 	.word	0x200006d8
 8001d24:	200006c4 	.word	0x200006c4

08001d28 <HAL_Radio_Init>:
* @brief  Initializes RF Transceiver's HAL.
* @param  None
* @retval None.
*/
void HAL_Radio_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  pRadioDriver = &radio_cb;
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_Radio_Init+0x18>)
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_Radio_Init+0x1c>)
 8001d30:	601a      	str	r2, [r3, #0]
  pRadioDriver->Init( ); 
 8001d32:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_Radio_Init+0x18>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4798      	blx	r3
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200006e4 	.word	0x200006e4
 8001d44:	20000000 	.word	0x20000000

08001d48 <APP_Process>:
*         uint8_t* pRxBuff = Pointer to aReceiveBuffer
*         uint8_t cRxlen= length of aReceiveBuffer
* @retval None.
*/
void APP_Process(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	fsm_fire(radio_fsm);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <APP_Process+0x30>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f8af 	bl	8000eb4 <fsm_fire>
	fsm_fire(LED1_fsm);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <APP_Process+0x34>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f8aa 	bl	8000eb4 <fsm_fire>
	fsm_fire(LED433_fsm);
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <APP_Process+0x38>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f8a5 	bl	8000eb4 <fsm_fire>
	fsm_fire(LED868_fsm);
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <APP_Process+0x3c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f8a0 	bl	8000eb4 <fsm_fire>
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200006f4 	.word	0x200006f4
 8001d7c:	200006c8 	.word	0x200006c8
 8001d80:	200006e8 	.word	0x200006e8
 8001d84:	200006f0 	.word	0x200006f0

08001d88 <AppliSendBuff>:
* @param  AppliFrame_t *xTxFrame = Pointer to AppliFrame_t structure 
*         uint8_t cTxlen = Length of aTransmitBuffer
* @retval None
*/
void AppliSendBuff(AppliFrame_t *xTxFrame, uint8_t cTxlen)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  uint8_t xIndex = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint8_t trxLength = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73bb      	strb	r3, [r7, #14]
  
#ifdef USE_BASIC_PROTOCOL
  SpiritPktBasicAddressesInit(&xAddressInit);
 8001d9c:	4823      	ldr	r0, [pc, #140]	; (8001e2c <AppliSendBuff+0xa4>)
 8001d9e:	f001 fb2b 	bl	80033f8 <SpiritPktBasicAddressesInit>
#endif  
  
  TxFrameBuff[0] = xTxFrame->Cmd;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	78da      	ldrb	r2, [r3, #3]
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <AppliSendBuff+0xa8>)
 8001da8:	701a      	strb	r2, [r3, #0]
  TxFrameBuff[1] = xTxFrame->CmdLen;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	789a      	ldrb	r2, [r3, #2]
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <AppliSendBuff+0xa8>)
 8001db0:	705a      	strb	r2, [r3, #1]
  TxFrameBuff[2] = xTxFrame->Cmdtag;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <AppliSendBuff+0xa8>)
 8001db8:	709a      	strb	r2, [r3, #2]
  TxFrameBuff[3] = xTxFrame->CmdType;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	785a      	ldrb	r2, [r3, #1]
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <AppliSendBuff+0xa8>)
 8001dc0:	70da      	strb	r2, [r3, #3]
  TxFrameBuff[4] = xTxFrame->DataLen;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	791a      	ldrb	r2, [r3, #4]
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <AppliSendBuff+0xa8>)
 8001dc8:	711a      	strb	r2, [r3, #4]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 8001dca:	e00b      	b.n	8001de4 <AppliSendBuff+0x5c>
  {
    TxFrameBuff[xIndex+5] =  xTxFrame->DataBuff[xIndex];
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	441a      	add	r2, r3
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3305      	adds	r3, #5
 8001dd8:	7811      	ldrb	r1, [r2, #0]
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <AppliSendBuff+0xa8>)
 8001ddc:	54d1      	strb	r1, [r2, r3]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	3301      	adds	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3ee      	bcc.n	8001dcc <AppliSendBuff+0x44>
  }

  trxLength = (xIndex+5);
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3305      	adds	r3, #5
 8001df2:	73bb      	strb	r3, [r7, #14]

  /* Spirit IRQs disable */
  Spirit1DisableIrq();
 8001df4:	f003 fa29 	bl	800524a <Spirit1DisableIrq>
  /* Spirit IRQs enable */
  Spirit1EnableTxIrq();
 8001df8:	f003 fa0e 	bl	8005218 <Spirit1EnableTxIrq>
  /* payload length config */
  Spirit1SetPayloadlength(trxLength);
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f9ef 	bl	80051e2 <Spirit1SetPayloadlength>
  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8001e04:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001e34 <AppliSendBuff+0xac>
 8001e08:	f003 fa26 	bl	8005258 <Spirit1SetRxTimeout>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 8001e0c:	f003 fac2 	bl	8005394 <Spirit1ClearIRQ>
  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <AppliSendBuff+0xb0>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 f9f2 	bl	80051fe <Spirit1SetDestinationAddress>
  /* send the TX command */
  Spirit1StartTx(TxFrameBuff, trxLength);
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4804      	ldr	r0, [pc, #16]	; (8001e30 <AppliSendBuff+0xa8>)
 8001e20:	f003 fa82 	bl	8005328 <Spirit1StartTx>
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000074 	.word	0x20000074
 8001e30:	20000548 	.word	0x20000548
 8001e34:	00000000 	.word	0x00000000
 8001e38:	200006d9 	.word	0x200006d9

08001e3c <AppliReceiveBuff>:
* @param  uint8_t *RxFrameBuff = Pointer to ReceiveBuffer
*         uint8_t cRxlen = length of ReceiveBuffer
* @retval None
*/
void AppliReceiveBuff(uint8_t *RxFrameBuff, uint8_t cRxlen)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  /*float rRSSIValue = 0;*/
//  SW_RX_timeout = SET;
  exitCounter = TIME_TO_EXIT_RX;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <AppliReceiveBuff+0x4c>)
 8001e4a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e4e:	801a      	strh	r2, [r3, #0]
  SpiritPktBasicAddressesInit(&xAddressInit);
 8001e50:	480e      	ldr	r0, [pc, #56]	; (8001e8c <AppliReceiveBuff+0x50>)
 8001e52:	f001 fad1 	bl	80033f8 <SpiritPktBasicAddressesInit>

  Spirit1DisableIrq();
 8001e56:	f003 f9f8 	bl	800524a <Spirit1DisableIrq>
  Spirit1EnableRxIrq();
 8001e5a:	f003 f9e5 	bl	8005228 <Spirit1EnableRxIrq>

  /* payload length config */
  Spirit1SetPayloadlength(PAYLOAD_LEN);
 8001e5e:	2019      	movs	r0, #25
 8001e60:	f003 f9bf 	bl	80051e2 <Spirit1SetPayloadlength>

  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8001e64:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001e90 <AppliReceiveBuff+0x54>
 8001e68:	f003 f9f6 	bl	8005258 <Spirit1SetRxTimeout>

  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <AppliReceiveBuff+0x58>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 f9c4 	bl	80051fe <Spirit1SetDestinationAddress>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 8001e76:	f003 fa8d 	bl	8005394 <Spirit1ClearIRQ>
  /* RX command */ 
  Spirit1StartRx();
 8001e7a:	f003 fa23 	bl	80052c4 <Spirit1StartRx>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200005a8 	.word	0x200005a8
 8001e8c:	20000074 	.word	0x20000074
 8001e90:	00000000 	.word	0x00000000
 8001e94:	200006d9 	.word	0x200006d9

08001e98 <APP_Init>:
* communication
* @param  None
* @retval None
*/
void APP_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  DestinationAddr = DESTINATION_ADDRESS;
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <APP_Init+0x8c>)
 8001e9e:	2244      	movs	r2, #68	; 0x44
 8001ea0:	701a      	strb	r2, [r3, #0]
  pRadioDriver->GpioIrq(&xGpioIRQ);
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <APP_Init+0x90>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4820      	ldr	r0, [pc, #128]	; (8001f2c <APP_Init+0x94>)
 8001eaa:	4798      	blx	r3

  /*Configure 868 transceiver*/
  selectedBand.conf_868 = SET;
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <APP_Init+0x98>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
  selectedBand.conf_433 = RESET;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <APP_Init+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	705a      	strb	r2, [r3, #1]
  Spirit1RadioInit(&xRadioInit);
 8001eb8:	481e      	ldr	r0, [pc, #120]	; (8001f34 <APP_Init+0x9c>)
 8001eba:	f003 f96c 	bl	8005196 <Spirit1RadioInit>
  Spirit1SetPower(POWER_INDEX, POWER_DBM);
 8001ebe:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001f38 <APP_Init+0xa0>
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f003 f972 	bl	80051ac <Spirit1SetPower>
  Spirit1PacketConfig();
 8001ec8:	f003 f985 	bl	80051d6 <Spirit1PacketConfig>
  Spirit1EnableSQI();
 8001ecc:	f003 f9ef 	bl	80052ae <Spirit1EnableSQI>
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001ed0:	f06f 0081 	mvn.w	r0, #129	; 0x81
 8001ed4:	f001 fc48 	bl	8003768 <SpiritQiSetRssiThresholddBm>
  Spirit1PacketConfig();
  Spirit1EnableSQI();
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);*/


  radio_fsm = fsm_new (radio_states);
 8001ed8:	4818      	ldr	r0, [pc, #96]	; (8001f3c <APP_Init+0xa4>)
 8001eda:	f7fe ffc7 	bl	8000e6c <fsm_new>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <APP_Init+0xa8>)
 8001ee2:	601a      	str	r2, [r3, #0]
  LED433_fsm = fsm_new (LED_433_states);
 8001ee4:	4817      	ldr	r0, [pc, #92]	; (8001f44 <APP_Init+0xac>)
 8001ee6:	f7fe ffc1 	bl	8000e6c <fsm_new>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <APP_Init+0xb0>)
 8001eee:	601a      	str	r2, [r3, #0]
  LED868_fsm = fsm_new (LED_868_states);
 8001ef0:	4816      	ldr	r0, [pc, #88]	; (8001f4c <APP_Init+0xb4>)
 8001ef2:	f7fe ffbb 	bl	8000e6c <fsm_new>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <APP_Init+0xb8>)
 8001efa:	601a      	str	r2, [r3, #0]
  LED1_fsm   = fsm_new (LED1_states);
 8001efc:	4815      	ldr	r0, [pc, #84]	; (8001f54 <APP_Init+0xbc>)
 8001efe:	f7fe ffb5 	bl	8000e6c <fsm_new>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <APP_Init+0xc0>)
 8001f06:	601a      	str	r2, [r3, #0]

  /*868MHz band as predetermined band*/
  selectedBand.conf_433 = RESET;
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <APP_Init+0x98>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
  selectedBand.conf_868 = SET;
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <APP_Init+0x98>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]

  CCAxItFlag = RESET;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <APP_Init+0xc4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
  CCAxItCount = 0;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <APP_Init+0xc8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200006d9 	.word	0x200006d9
 8001f28:	200006e4 	.word	0x200006e4
 8001f2c:	20000044 	.word	0x20000044
 8001f30:	200006ec 	.word	0x200006ec
 8001f34:	20000048 	.word	0x20000048
 8001f38:	4139999a 	.word	0x4139999a
 8001f3c:	20000088 	.word	0x20000088
 8001f40:	200006f4 	.word	0x200006f4
 8001f44:	20000158 	.word	0x20000158
 8001f48:	200006e8 	.word	0x200006e8
 8001f4c:	200001b8 	.word	0x200001b8
 8001f50:	200006f0 	.word	0x200006f0
 8001f54:	20000218 	.word	0x20000218
 8001f58:	200006c8 	.word	0x200006c8
 8001f5c:	200006c5 	.word	0x200006c5
 8001f60:	200006ee 	.word	0x200006ee

08001f64 <BasicProtocolInit>:
* @brief  This function initializes the BASIC Packet handler of S2LP
* @param  None
* @retval None
*/
void BasicProtocolInit(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* RAdio Packet config */
	SpiritPktBasicInit(&xBasicInit);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <BasicProtocolInit+0x10>)
 8001f6a:	f001 f96d 	bl	8003248 <SpiritPktBasicInit>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000064 	.word	0x20000064

08001f78 <bandSelect>:

radio_select_t bandSelect(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
	return selectedBand;
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <bandSelect+0x28>)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	793a      	ldrb	r2, [r7, #4]
 8001f8a:	f362 0307 	bfi	r3, r2, #0, #8
 8001f8e:	797a      	ldrb	r2, [r7, #5]
 8001f90:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	200006ec 	.word	0x200006ec

08001fa4 <APPInterruptHandler>:
*         to manage the S2LP IRQ configured to be notified on the S2LP GPIO_3.
* @param  None
* @retval None
*/
void APPInterruptHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	SpiritIrqGetStatus(&xIrqStatus);
 8001fa8:	4848      	ldr	r0, [pc, #288]	; (80020cc <APPInterruptHandler+0x128>)
 8001faa:	f000 febd 	bl	8002d28 <SpiritIrqGetStatus>
  
  
  /* Check the SPIRIT1 TX_DATA_SENT IRQ flag */
  if((xIrqStatus.IRQ_TX_DATA_SENT) || (xIrqStatus.IRQ_MAX_BO_CCA_REACH))
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <APPInterruptHandler+0x128>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <APPInterruptHandler+0x26>
 8001fbc:	4b43      	ldr	r3, [pc, #268]	; (80020cc <APPInterruptHandler+0x128>)
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d058      	beq.n	800207c <APPInterruptHandler+0xd8>
  {
	xTxDoneFlag = SET;
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <APPInterruptHandler+0x12c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
	SpiritCsma(S_DISABLE);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f000 fd8f 	bl	8002af4 <SpiritCsma>
	SpiritRadioPersistenRx(S_ENABLE);	/*To comeback to RX state*/
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f002 fd36 	bl	8004a48 <SpiritRadioPersistenRx>
	SpiritRadioCsBlanking(S_ENABLE);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f002 fd03 	bl	80049e8 <SpiritRadioCsBlanking>

    SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001fe2:	f06f 0081 	mvn.w	r0, #129	; 0x81
 8001fe6:	f001 fbbf 	bl	8003768 <SpiritQiSetRssiThresholddBm>
	SpiritCmdStrobeSabort();
 8001fea:	2067      	movs	r0, #103	; 0x67
 8001fec:	f000 fd06 	bl	80029fc <SpiritCmdStrobeCommand>

	if(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <APPInterruptHandler+0x128>)
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d03e      	beq.n	800207c <APPInterruptHandler+0xd8>
	{
		if(CCAxItCount < CCA_MAX_IT)
 8001ffe:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <APPInterruptHandler+0x130>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d82e      	bhi.n	8002064 <APPInterruptHandler+0xc0>
		{
			selectedBand.conf_433 = !(selectedBand.conf_433);
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <APPInterruptHandler+0x134>)
 8002008:	785b      	ldrb	r3, [r3, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <APPInterruptHandler+0x134>)
 8002018:	705a      	strb	r2, [r3, #1]
			selectedBand.conf_868 = !(selectedBand.conf_868);
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <APPInterruptHandler+0x134>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <APPInterruptHandler+0x134>)
 800202c:	701a      	strb	r2, [r3, #0]
			CCAxItFlag = SET;
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <APPInterruptHandler+0x138>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
			xTxDoneFlag = RESET;
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <APPInterruptHandler+0x12c>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
			CCAxItCount++;
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <APPInterruptHandler+0x130>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <APPInterruptHandler+0x130>)
 8002044:	701a      	strb	r2, [r3, #0]

			printf("\r\nNo ha sido posible transmitir el mensaje a través del canal ");
 8002046:	4826      	ldr	r0, [pc, #152]	; (80020e0 <APPInterruptHandler+0x13c>)
 8002048:	f007 f8f8 	bl	800923c <iprintf>
			if (selectedBand.conf_433) printf("433 MHz\r\nReintentando transmision por el canal 868 MHz\r\n");
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <APPInterruptHandler+0x134>)
 800204e:	785b      	ldrb	r3, [r3, #1]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <APPInterruptHandler+0xb8>
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <APPInterruptHandler+0x140>)
 8002056:	f007 f965 	bl	8009324 <puts>
 800205a:	e00f      	b.n	800207c <APPInterruptHandler+0xd8>
			else printf("868 MHz\r\nReintentando transmision por el canal 433 MHz\r\n");
 800205c:	4822      	ldr	r0, [pc, #136]	; (80020e8 <APPInterruptHandler+0x144>)
 800205e:	f007 f961 	bl	8009324 <puts>
 8002062:	e00b      	b.n	800207c <APPInterruptHandler+0xd8>
		}
		else
		{
			CCAxItCount = 0;
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <APPInterruptHandler+0x130>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
			CCAxItFlag = RESET;
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <APPInterruptHandler+0x138>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
			xTxDoneFlag = SET;
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <APPInterruptHandler+0x12c>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
			// ERROR MSG!
	        printf("\r\nNumero de retransmisiones maximas superadas,\r\nvolviendo al estado por defecto...\r\n");
 8002076:	481d      	ldr	r0, [pc, #116]	; (80020ec <APPInterruptHandler+0x148>)
 8002078:	f007 f954 	bl	8009324 <puts>
	}

  }
  
  /* Check the S2LP RX_DATA_READY IRQ flag */
  if((xIrqStatus.IRQ_RX_DATA_READY))
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <APPInterruptHandler+0x128>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <APPInterruptHandler+0xec>
  {
    xRxDoneFlag = SET;   
 800208a:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <APPInterruptHandler+0x14c>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Restart receive after receive timeout*/
  if (xIrqStatus.IRQ_RX_TIMEOUT)
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <APPInterruptHandler+0x128>)
 8002092:	78db      	ldrb	r3, [r3, #3]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <APPInterruptHandler+0x10a>
  {
    Spirit1_RX_timeout = SET; 
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <APPInterruptHandler+0x150>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeRx();
 80020a4:	f001 f8a0 	bl	80031e8 <SpiritManagementWaCmdStrobeRx>
 80020a8:	2061      	movs	r0, #97	; 0x61
 80020aa:	f000 fca7 	bl	80029fc <SpiritCmdStrobeCommand>
    
  }
  
  /* Check the S2LP RX_DATA_DISC IRQ flag */
  if(xIrqStatus.IRQ_RX_DATA_DISC)
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <APPInterruptHandler+0x128>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <APPInterruptHandler+0x122>
  {      
    /* RX command - to ensure the device will be ready for the next reception */
	  SpiritCmdStrobeRx();
 80020bc:	f001 f894 	bl	80031e8 <SpiritManagementWaCmdStrobeRx>
 80020c0:	2061      	movs	r0, #97	; 0x61
 80020c2:	f000 fc9b 	bl	80029fc <SpiritCmdStrobeCommand>
    
  }  
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200006d0 	.word	0x200006d0
 80020d0:	2000052d 	.word	0x2000052d
 80020d4:	200006ee 	.word	0x200006ee
 80020d8:	200006ec 	.word	0x200006ec
 80020dc:	200006c5 	.word	0x200006c5
 80020e0:	0800afb4 	.word	0x0800afb4
 80020e4:	0800aff4 	.word	0x0800aff4
 80020e8:	0800b02c 	.word	0x0800b02c
 80020ec:	0800b064 	.word	0x0800b064
 80020f0:	2000052c 	.word	0x2000052c
 80020f4:	2000052e 	.word	0x2000052e

080020f8 <HAL_GPIO_EXTI_Callback>:
* @param uint16_t GPIO_Pin
* @retval None
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  PushButtonStatusData = RESET;
  wakeupCounter = LPM_WAKEUP_TIME; 
  dataSendCounter = DATA_SEND_TIME;
  dataSendCounter++;
#endif
  if(GPIO_Pin==USER_BUTTON_PIN)
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002108:	d110      	bne.n	800212c <HAL_GPIO_EXTI_Callback+0x34>
  {

	/*It will be an USB interrupt, not a button*/
	tx_value = SET;
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_GPIO_EXTI_Callback+0x48>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 8002110:	e008      	b.n	8002124 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		aTransmitBuffer[i] = i*2;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	0052      	lsls	r2, r2, #1
 8002118:	b2d1      	uxtb	r1, r2
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_GPIO_EXTI_Callback+0x4c>)
 800211c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	3301      	adds	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b13      	cmp	r3, #19
 8002128:	d9f3      	bls.n	8002112 <HAL_GPIO_EXTI_Callback+0x1a>
      APPInterruptHandler();
    }
  
#endif
  
}
 800212a:	e004      	b.n	8002136 <HAL_GPIO_EXTI_Callback+0x3e>
    if(GPIO_Pin==RADIO_GPIO_3_EXTI_LINE)
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_EXTI_Callback+0x3e>
      APPInterruptHandler();
 8002132:	f7ff ff37 	bl	8001fa4 <APPInterruptHandler>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000052f 	.word	0x2000052f
 8002144:	20000468 	.word	0x20000468

08002148 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

	printf("\r\n Teclee el primer parametro a enviar (uint8_t): ");
 8002150:	4849      	ldr	r0, [pc, #292]	; (8002278 <HAL_UART_RxCpltCallback+0x130>)
 8002152:	f007 f873 	bl	800923c <iprintf>
    scanf("%d", &a[0]);
 8002156:	4949      	ldr	r1, [pc, #292]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 8002158:	4849      	ldr	r0, [pc, #292]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 800215a:	f007 f8fb 	bl	8009354 <iscanf>

    while (a[0] > 255)
 800215e:	e009      	b.n	8002174 <HAL_UART_RxCpltCallback+0x2c>
    {
    	printf("\r\n Debe ser tipo uint8_t. \r\n");
 8002160:	4848      	ldr	r0, [pc, #288]	; (8002284 <HAL_UART_RxCpltCallback+0x13c>)
 8002162:	f007 f8df 	bl	8009324 <puts>
    	printf("\r\n Teclee el primer parametro a enviar (uint8_t): ");
 8002166:	4844      	ldr	r0, [pc, #272]	; (8002278 <HAL_UART_RxCpltCallback+0x130>)
 8002168:	f007 f868 	bl	800923c <iprintf>
    	scanf("%d", &a[0]);
 800216c:	4943      	ldr	r1, [pc, #268]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 800216e:	4844      	ldr	r0, [pc, #272]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 8002170:	f007 f8f0 	bl	8009354 <iscanf>
    while (a[0] > 255)
 8002174:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2bff      	cmp	r3, #255	; 0xff
 800217a:	dcf1      	bgt.n	8002160 <HAL_UART_RxCpltCallback+0x18>
    }

	printf("\r\n\r\n Teclee el segundo parametro a enviar (uint8_t): ");
 800217c:	4842      	ldr	r0, [pc, #264]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 800217e:	f007 f85d 	bl	800923c <iprintf>
    scanf("%d", &a[1]);
 8002182:	4942      	ldr	r1, [pc, #264]	; (800228c <HAL_UART_RxCpltCallback+0x144>)
 8002184:	483e      	ldr	r0, [pc, #248]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 8002186:	f007 f8e5 	bl	8009354 <iscanf>

    while (a[1] > 255)
 800218a:	e009      	b.n	80021a0 <HAL_UART_RxCpltCallback+0x58>
    {
    	printf("\r\n Debe ser tipo uint8_t.\r\n");
 800218c:	4840      	ldr	r0, [pc, #256]	; (8002290 <HAL_UART_RxCpltCallback+0x148>)
 800218e:	f007 f8c9 	bl	8009324 <puts>
    	printf("\r\n\r\n Teclee el segundo parametro a enviar (uint8_t): ");
 8002192:	483d      	ldr	r0, [pc, #244]	; (8002288 <HAL_UART_RxCpltCallback+0x140>)
 8002194:	f007 f852 	bl	800923c <iprintf>
    	scanf("%d", &a[1]);
 8002198:	493c      	ldr	r1, [pc, #240]	; (800228c <HAL_UART_RxCpltCallback+0x144>)
 800219a:	4839      	ldr	r0, [pc, #228]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 800219c:	f007 f8da 	bl	8009354 <iscanf>
    while (a[1] > 255)
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2bff      	cmp	r3, #255	; 0xff
 80021a6:	dcf1      	bgt.n	800218c <HAL_UART_RxCpltCallback+0x44>
    }

	printf("\r\n\r\n Teclee el tercer parametro a enviar (uint8_t): ");
 80021a8:	483a      	ldr	r0, [pc, #232]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 80021aa:	f007 f847 	bl	800923c <iprintf>
    scanf("%d", &a[2]);
 80021ae:	493a      	ldr	r1, [pc, #232]	; (8002298 <HAL_UART_RxCpltCallback+0x150>)
 80021b0:	4833      	ldr	r0, [pc, #204]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 80021b2:	f007 f8cf 	bl	8009354 <iscanf>

    while (a[2] > 255)
 80021b6:	e009      	b.n	80021cc <HAL_UART_RxCpltCallback+0x84>
    {
    	printf("\r\n Debe ser tipo uint8_t.\r\n");
 80021b8:	4835      	ldr	r0, [pc, #212]	; (8002290 <HAL_UART_RxCpltCallback+0x148>)
 80021ba:	f007 f8b3 	bl	8009324 <puts>
    	printf("\r\n\r\n Teclee el tercer parametro a enviar (uint8_t): ");
 80021be:	4835      	ldr	r0, [pc, #212]	; (8002294 <HAL_UART_RxCpltCallback+0x14c>)
 80021c0:	f007 f83c 	bl	800923c <iprintf>
    	scanf("%d", &a[2]);
 80021c4:	4934      	ldr	r1, [pc, #208]	; (8002298 <HAL_UART_RxCpltCallback+0x150>)
 80021c6:	482e      	ldr	r0, [pc, #184]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 80021c8:	f007 f8c4 	bl	8009354 <iscanf>
    while (a[2] > 255)
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2bff      	cmp	r3, #255	; 0xff
 80021d2:	dcf1      	bgt.n	80021b8 <HAL_UART_RxCpltCallback+0x70>
    }

	printf("\r\n\r\n Teclee el cuarto parametro a enviar (uint8_t): ");
 80021d4:	4831      	ldr	r0, [pc, #196]	; (800229c <HAL_UART_RxCpltCallback+0x154>)
 80021d6:	f007 f831 	bl	800923c <iprintf>
    scanf("%d", &a[3]);
 80021da:	4931      	ldr	r1, [pc, #196]	; (80022a0 <HAL_UART_RxCpltCallback+0x158>)
 80021dc:	4828      	ldr	r0, [pc, #160]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 80021de:	f007 f8b9 	bl	8009354 <iscanf>

    while (a[3] > 255)
 80021e2:	e009      	b.n	80021f8 <HAL_UART_RxCpltCallback+0xb0>
    {
    	printf("\r\n Debe ser tipo uint8_t.\r\n");
 80021e4:	482a      	ldr	r0, [pc, #168]	; (8002290 <HAL_UART_RxCpltCallback+0x148>)
 80021e6:	f007 f89d 	bl	8009324 <puts>
    	printf("\r\n\r\n Teclee el cuarto parametro a enviar (uint8_t): ");
 80021ea:	482c      	ldr	r0, [pc, #176]	; (800229c <HAL_UART_RxCpltCallback+0x154>)
 80021ec:	f007 f826 	bl	800923c <iprintf>
    	scanf("%d", &a[3]);
 80021f0:	492b      	ldr	r1, [pc, #172]	; (80022a0 <HAL_UART_RxCpltCallback+0x158>)
 80021f2:	4823      	ldr	r0, [pc, #140]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 80021f4:	f007 f8ae 	bl	8009354 <iscanf>
    while (a[3] > 255)
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2bff      	cmp	r3, #255	; 0xff
 80021fe:	dcf1      	bgt.n	80021e4 <HAL_UART_RxCpltCallback+0x9c>
    }

	printf("\r\n\r\n Teclee el quinto parametro a enviar (uint8_t): ");
 8002200:	4828      	ldr	r0, [pc, #160]	; (80022a4 <HAL_UART_RxCpltCallback+0x15c>)
 8002202:	f007 f81b 	bl	800923c <iprintf>
    scanf("%d", &a[4]);
 8002206:	4928      	ldr	r1, [pc, #160]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 8002208:	481d      	ldr	r0, [pc, #116]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 800220a:	f007 f8a3 	bl	8009354 <iscanf>

    while (a[4] > 255)
 800220e:	e009      	b.n	8002224 <HAL_UART_RxCpltCallback+0xdc>
    {
    	printf("\r\n Debe ser tipo uint8_t.\r\n");
 8002210:	481f      	ldr	r0, [pc, #124]	; (8002290 <HAL_UART_RxCpltCallback+0x148>)
 8002212:	f007 f887 	bl	8009324 <puts>
    	printf("\r\n\r\n Teclee el primer parametro a enviar (uint8_t): ");
 8002216:	4825      	ldr	r0, [pc, #148]	; (80022ac <HAL_UART_RxCpltCallback+0x164>)
 8002218:	f007 f810 	bl	800923c <iprintf>
    	scanf("%d", &a[4]);
 800221c:	4922      	ldr	r1, [pc, #136]	; (80022a8 <HAL_UART_RxCpltCallback+0x160>)
 800221e:	4818      	ldr	r0, [pc, #96]	; (8002280 <HAL_UART_RxCpltCallback+0x138>)
 8002220:	f007 f898 	bl	8009354 <iscanf>
    while (a[4] > 255)
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2bff      	cmp	r3, #255	; 0xff
 800222a:	dcf1      	bgt.n	8002210 <HAL_UART_RxCpltCallback+0xc8>
    }

    aTransmitBuffer[0] = a[0];
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 8002234:	701a      	strb	r2, [r3, #0]
    aTransmitBuffer[1] = a[1];
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 800223e:	705a      	strb	r2, [r3, #1]
    aTransmitBuffer[2] = a[2];
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 8002248:	709a      	strb	r2, [r3, #2]
    aTransmitBuffer[3] = a[3];
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 8002252:	70da      	strb	r2, [r3, #3]
    aTransmitBuffer[4] = a[4];
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_UART_RxCpltCallback+0x134>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 800225c:	711a      	strb	r2, [r3, #4]

	tx_value = SET;
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_UART_RxCpltCallback+0x16c>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart2, aTransmitBuffer, 1);
 8002264:	2201      	movs	r2, #1
 8002266:	4912      	ldr	r1, [pc, #72]	; (80022b0 <HAL_UART_RxCpltCallback+0x168>)
 8002268:	4813      	ldr	r0, [pc, #76]	; (80022b8 <HAL_UART_RxCpltCallback+0x170>)
 800226a:	f006 f8b3 	bl	80083d4 <HAL_UART_Receive_IT>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	0800b0b8 	.word	0x0800b0b8
 800227c:	200004dc 	.word	0x200004dc
 8002280:	0800af88 	.word	0x0800af88
 8002284:	0800b0ec 	.word	0x0800b0ec
 8002288:	0800b108 	.word	0x0800b108
 800228c:	200004e0 	.word	0x200004e0
 8002290:	0800b140 	.word	0x0800b140
 8002294:	0800b15c 	.word	0x0800b15c
 8002298:	200004e4 	.word	0x200004e4
 800229c:	0800b194 	.word	0x0800b194
 80022a0:	200004e8 	.word	0x200004e8
 80022a4:	0800b1cc 	.word	0x0800b1cc
 80022a8:	200004ec 	.word	0x200004ec
 80022ac:	0800b204 	.word	0x0800b204
 80022b0:	20000468 	.word	0x20000468
 80022b4:	2000052f 	.word	0x2000052f
 80022b8:	20000680 	.word	0x20000680

080022bc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <RetargetInit+0x28>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <RetargetInit+0x2c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6898      	ldr	r0, [r3, #8]
 80022d0:	2300      	movs	r3, #0
 80022d2:	2202      	movs	r2, #2
 80022d4:	2100      	movs	r1, #0
 80022d6:	f007 f855 	bl	8009384 <setvbuf>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200006fc 	.word	0x200006fc
 80022e8:	20000278 	.word	0x20000278

080022ec <_isatty>:

int _isatty(int fd) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db04      	blt.n	8002304 <_isatty+0x18>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	dc01      	bgt.n	8002304 <_isatty+0x18>
    return 1;
 8002300:	2301      	movs	r3, #1
 8002302:	e005      	b.n	8002310 <_isatty+0x24>

  errno = EBADF;
 8002304:	f006 feb8 	bl	8009078 <__errno>
 8002308:	4602      	mov	r2, r0
 800230a:	2309      	movs	r3, #9
 800230c:	6013      	str	r3, [r2, #0]
  return 0;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_write>:

int _write(int fd, char* ptr, int len) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d002      	beq.n	8002330 <_write+0x18>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d111      	bne.n	8002354 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <_write+0x54>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	b29a      	uxth	r2, r3
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	f005 ff0a 	bl	8008156 <HAL_UART_Transmit>
 8002342:	4603      	mov	r3, r0
 8002344:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <_write+0x38>
      return len;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	e008      	b.n	8002362 <_write+0x4a>
    else
      return EIO;
 8002350:	2305      	movs	r3, #5
 8002352:	e006      	b.n	8002362 <_write+0x4a>
  }
  errno = EBADF;
 8002354:	f006 fe90 	bl	8009078 <__errno>
 8002358:	4602      	mov	r2, r0
 800235a:	2309      	movs	r3, #9
 800235c:	6013      	str	r3, [r2, #0]
  return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200006fc 	.word	0x200006fc

08002370 <_close>:

int _close(int fd) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db04      	blt.n	8002388 <_close+0x18>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b02      	cmp	r3, #2
 8002382:	dc01      	bgt.n	8002388 <_close+0x18>
    return 0;
 8002384:	2300      	movs	r3, #0
 8002386:	e006      	b.n	8002396 <_close+0x26>

  errno = EBADF;
 8002388:	f006 fe76 	bl	8009078 <__errno>
 800238c:	4602      	mov	r2, r0
 800238e:	2309      	movs	r3, #9
 8002390:	6013      	str	r3, [r2, #0]
  return -1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80023aa:	f006 fe65 	bl	8009078 <__errno>
 80023ae:	4602      	mov	r2, r0
 80023b0:	2309      	movs	r3, #9
 80023b2:	6013      	str	r3, [r2, #0]
  return -1;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d110      	bne.n	80023f4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <_read+0x4c>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	2201      	movs	r2, #1
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	f005 ff53 	bl	8008288 <HAL_UART_Receive>
 80023e2:	4603      	mov	r3, r0
 80023e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <_read+0x30>
      return 1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e008      	b.n	8002402 <_read+0x42>
    else
      return EIO;
 80023f0:	2305      	movs	r3, #5
 80023f2:	e006      	b.n	8002402 <_read+0x42>
  }
  errno = EBADF;
 80023f4:	f006 fe40 	bl	8009078 <__errno>
 80023f8:	4602      	mov	r2, r0
 80023fa:	2309      	movs	r3, #9
 80023fc:	6013      	str	r3, [r2, #0]
  return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200006fc 	.word	0x200006fc

08002410 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db08      	blt.n	8002432 <_fstat+0x22>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	dc05      	bgt.n	8002432 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800242c:	605a      	str	r2, [r3, #4]
    return 0;
 800242e:	2300      	movs	r3, #0
 8002430:	e005      	b.n	800243e <_fstat+0x2e>
  }

  errno = EBADF;
 8002432:	f006 fe21 	bl	8009078 <__errno>
 8002436:	4602      	mov	r2, r0
 8002438:	2309      	movs	r3, #9
 800243a:	6013      	str	r3, [r2, #0]
  return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_MspInit+0x4c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <HAL_MspInit+0x4c>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_MspInit+0x4c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_MspInit+0x4c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_MspInit+0x4c>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_MspInit+0x4c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002486:	2007      	movs	r0, #7
 8002488:	f003 fe20 	bl	80060cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <HAL_SPI_MspInit+0xc0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d149      	bne.n	800254e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
//////
  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a26      	ldr	r2, [pc, #152]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <HAL_SPI_MspInit+0xc4>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_SPI_MspInit+0xc4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800250e:	23c0      	movs	r3, #192	; 0xc0
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800251e:	2305      	movs	r3, #5
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <HAL_SPI_MspInit+0xc8>)
 800252a:	f003 fe41 	bl	80061b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800252e:	2308      	movs	r3, #8
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002536:	2301      	movs	r3, #1
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253a:	2302      	movs	r3, #2
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800253e:	2305      	movs	r3, #5
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4806      	ldr	r0, [pc, #24]	; (8002564 <HAL_SPI_MspInit+0xcc>)
 800254a:	f003 fe31 	bl	80061b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */
//////
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40013000 	.word	0x40013000
 800255c:	40023800 	.word	0x40023800
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400

08002568 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_SPI_MspDeInit+0x38>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10d      	bne.n	8002596 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_SPI_MspDeInit+0x3c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_SPI_MspDeInit+0x3c>)
 8002580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8002586:	21c0      	movs	r1, #192	; 0xc0
 8002588:	4807      	ldr	r0, [pc, #28]	; (80025a8 <HAL_SPI_MspDeInit+0x40>)
 800258a:	f003 ff93 	bl	80064b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800258e:	2108      	movs	r1, #8
 8002590:	4806      	ldr	r0, [pc, #24]	; (80025ac <HAL_SPI_MspDeInit+0x44>)
 8002592:	f003 ff8f 	bl	80064b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40013000 	.word	0x40013000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400

080025b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d115      	bne.n	80025ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_TIM_Base_MspInit+0x48>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_TIM_Base_MspInit+0x48>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_TIM_Base_MspInit+0x48>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	201c      	movs	r0, #28
 80025e4:	f003 fd7d 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025e8:	201c      	movs	r0, #28
 80025ea:	f003 fd96 	bl	800611a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_UART_MspInit+0x94>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d133      	bne.n	8002686 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_UART_MspInit+0x98>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_UART_MspInit+0x98>)
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_UART_MspInit+0x98>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_UART_MspInit+0x98>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <HAL_UART_MspInit+0x98>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_UART_MspInit+0x98>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002656:	230c      	movs	r3, #12
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002666:	2307      	movs	r3, #7
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4809      	ldr	r0, [pc, #36]	; (8002698 <HAL_UART_MspInit+0x9c>)
 8002672:	f003 fd9d 	bl	80061b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2026      	movs	r0, #38	; 0x26
 800267c:	f003 fd31 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002680:	2026      	movs	r0, #38	; 0x26
 8002682:	f003 fd4a 	bl	800611a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40004400 	.word	0x40004400
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <HardFault_Handler+0x4>

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <MemManage_Handler+0x4>

080026b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ba:	e7fe      	b.n	80026ba <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f0:	f003 fbb8 	bl	8005e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80026fc:	2080      	movs	r0, #128	; 0x80
 80026fe:	f003 ffef 	bl	80066e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <TIM2_IRQHandler+0x14>)
 800270e:	f005 f921 	bl	8007954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  handle_TIM2();
 8002712:	f7fe fe39 	bl	8001388 <handle_TIM2>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000640 	.word	0x20000640

08002720 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <USART2_IRQHandler+0x10>)
 8002726:	f005 feab 	bl	8008480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000680 	.word	0x20000680

08002734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800273c:	f003 ffd0 	bl	80066e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f006 fc80 	bl	8009078 <__errno>
 8002778:	4602      	mov	r2, r0
 800277a:	230c      	movs	r3, #12
 800277c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20018000 	.word	0x20018000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	200005b0 	.word	0x200005b0
 80027ac:	20000768 	.word	0x20000768

080027b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <SystemInit+0x28>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <SystemInit+0x28>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SystemInit+0x28>)
 80027c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ca:	609a      	str	r2, [r3, #8]
#endif
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027e2:	e003      	b.n	80027ec <LoopCopyDataInit>

080027e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027ea:	3104      	adds	r1, #4

080027ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027ec:	480b      	ldr	r0, [pc, #44]	; (800281c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027f4:	d3f6      	bcc.n	80027e4 <CopyDataInit>
  ldr  r2, =_sbss
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027f8:	e002      	b.n	8002800 <LoopFillZerobss>

080027fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027fc:	f842 3b04 	str.w	r3, [r2], #4

08002800 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002802:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002804:	d3f9      	bcc.n	80027fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002806:	f7ff ffd3 	bl	80027b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280a:	f006 fc3b 	bl	8009084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280e:	f7fe fb81 	bl	8000f14 <main>
  bx  lr    
 8002812:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002814:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002818:	0800b5e8 	.word	0x0800b5e8
  ldr  r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002820:	20000448 	.word	0x20000448
  ldr  r2, =_sbss
 8002824:	20000448 	.word	0x20000448
  ldr  r3, = _ebss
 8002828:	20000764 	.word	0x20000764

0800282c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC_IRQHandler>
	...

08002830 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 800283a:	f107 030f 	add.w	r3, r7, #15
 800283e:	461a      	mov	r2, r3
 8002840:	2101      	movs	r1, #1
 8002842:	2050      	movs	r0, #80	; 0x50
 8002844:	f003 f81a 	bl	800587c <RadioSpiReadRegisters>
 8002848:	4602      	mov	r2, r0
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <SpiritCalibrationVco+0x6c>)
 800284c:	b212      	sxth	r2, r2
 800284e:	4611      	mov	r1, r2
 8002850:	7019      	strb	r1, [r3, #0]
 8002852:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002856:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e004      	b.n	8002874 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	f023 0302 	bic.w	r3, r3, #2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8002874:	f107 030f 	add.w	r3, r7, #15
 8002878:	461a      	mov	r2, r3
 800287a:	2101      	movs	r1, #1
 800287c:	2050      	movs	r0, #80	; 0x50
 800287e:	f002 ff51 	bl	8005724 <RadioSpiWriteRegisters>
 8002882:	4602      	mov	r2, r0
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <SpiritCalibrationVco+0x6c>)
 8002886:	b212      	sxth	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	7019      	strb	r1, [r3, #0]
 800288c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002890:	705a      	strb	r2, [r3, #1]

}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000700 	.word	0x20000700

080028a0 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	461a      	mov	r2, r3
 80028aa:	2101      	movs	r1, #1
 80028ac:	20e5      	movs	r0, #229	; 0xe5
 80028ae:	f002 ffe5 	bl	800587c <RadioSpiReadRegisters>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <SpiritCalibrationGetVcoCalData+0x34>)
 80028b6:	b212      	sxth	r2, r2
 80028b8:	4611      	mov	r1, r2
 80028ba:	7019      	strb	r1, [r3, #0]
 80028bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028c0:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c8:	b2db      	uxtb	r3, r3

}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000700 	.word	0x20000700

080028d8 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80028e2:	f107 030f 	add.w	r3, r7, #15
 80028e6:	461a      	mov	r2, r3
 80028e8:	2101      	movs	r1, #1
 80028ea:	206e      	movs	r0, #110	; 0x6e
 80028ec:	f002 ffc6 	bl	800587c <RadioSpiReadRegisters>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80028f4:	b212      	sxth	r2, r2
 80028f6:	4611      	mov	r1, r2
 80028f8:	7019      	strb	r1, [r3, #0]
 80028fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028fe:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002906:	b2db      	uxtb	r3, r3
 8002908:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	4313      	orrs	r3, r2
 8002910:	b2db      	uxtb	r3, r3
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8002914:	f107 030f 	add.w	r3, r7, #15
 8002918:	461a      	mov	r2, r3
 800291a:	2101      	movs	r1, #1
 800291c:	206e      	movs	r0, #110	; 0x6e
 800291e:	f002 ff01 	bl	8005724 <RadioSpiWriteRegisters>
 8002922:	4602      	mov	r2, r0
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8002926:	b212      	sxth	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	7019      	strb	r1, [r3, #0]
 800292c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002930:	705a      	strb	r2, [r3, #1]

}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000700 	.word	0x20000700

08002940 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800294a:	f107 030f 	add.w	r3, r7, #15
 800294e:	461a      	mov	r2, r3
 8002950:	2101      	movs	r1, #1
 8002952:	206f      	movs	r0, #111	; 0x6f
 8002954:	f002 ff92 	bl	800587c <RadioSpiReadRegisters>
 8002958:	4602      	mov	r2, r0
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800295c:	b212      	sxth	r2, r2
 800295e:	4611      	mov	r1, r2
 8002960:	7019      	strb	r1, [r3, #0]
 8002962:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002966:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800296e:	b2db      	uxtb	r3, r3
 8002970:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	4313      	orrs	r3, r2
 8002978:	b2db      	uxtb	r3, r3
 800297a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800297c:	f107 030f 	add.w	r3, r7, #15
 8002980:	461a      	mov	r2, r3
 8002982:	2101      	movs	r1, #1
 8002984:	206f      	movs	r0, #111	; 0x6f
 8002986:	f002 fecd 	bl	8005724 <RadioSpiWriteRegisters>
 800298a:	4602      	mov	r2, r0
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800298e:	b212      	sxth	r2, r2
 8002990:	4611      	mov	r1, r2
 8002992:	7019      	strb	r1, [r3, #0]
 8002994:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002998:	705a      	strb	r2, [r3, #1]

}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000700 	.word	0x20000700

080029a8 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80029b2:	f107 030f 	add.w	r3, r7, #15
 80029b6:	461a      	mov	r2, r3
 80029b8:	2101      	movs	r1, #1
 80029ba:	209e      	movs	r0, #158	; 0x9e
 80029bc:	f002 ff5e 	bl	800587c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	f023 0306 	bic.w	r3, r3, #6
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e004      	b.n	80029e6 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 80029e6:	f107 030f 	add.w	r3, r7, #15
 80029ea:	461a      	mov	r2, r3
 80029ec:	2101      	movs	r1, #1
 80029ee:	209e      	movs	r0, #158	; 0x9e
 80029f0:	f002 fe98 	bl	8005724 <RadioSpiWriteRegisters>
  
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 ffe9 	bl	80059e0 <RadioSpiCommandStrobes>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <SpiritCmdStrobeCommand+0x2c>)
 8002a12:	b212      	sxth	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	7019      	strb	r1, [r3, #0]
 8002a18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a1c:	705a      	strb	r2, [r3, #1]
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000700 	.word	0x20000700

08002a2c <SpiritCsmaInit>:
 * @param  pxCsmaInit Csma init structure.
 *         This parameter is a pointer to @ref CsmaInit.
 * @retval None.
 */
void SpiritCsmaInit(CsmaInit* pxCsmaInit)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_BU_COUNTER_SEED(pxCsmaInit->nBuCounterSeed));
  s_assert_param(IS_BU_PRESCALER(pxCsmaInit->cBuPrescaler));
  s_assert_param(IS_CMAX_NB(pxCsmaInit->cMaxNb));

  /* CSMA BU counter seed (MSB) config */
  tempRegValue[0] = (uint8_t)(pxCsmaInit->nBuCounterSeed >> 8);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	889b      	ldrh	r3, [r3, #4]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	723b      	strb	r3, [r7, #8]

  /* CSMA BU counter seed (LSB) config */
  tempRegValue[1] = (uint8_t) pxCsmaInit->nBuCounterSeed;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	889b      	ldrh	r3, [r3, #4]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	727b      	strb	r3, [r7, #9]

  /* CSMA BU prescaler config and CCA period config */
  tempRegValue[2] = (pxCsmaInit->cBuPrescaler << 2) | pxCsmaInit->xMultiplierTbit;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	799b      	ldrb	r3, [r3, #6]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	b25a      	sxtb	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	72bb      	strb	r3, [r7, #10]

  /* CSMA CCA length config and max number of back-off */
  tempRegValue[3] = (pxCsmaInit->xCcaLength | pxCsmaInit->cMaxNb);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	789a      	ldrb	r2, [r3, #2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	78db      	ldrb	r3, [r3, #3]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	72fb      	strb	r3, [r7, #11]

  /* Reads the PROTOCOL1_BASE register value, to write the SEED_RELOAD and CSMA_PERS_ON fields */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	3304      	adds	r3, #4
 8002a72:	461a      	mov	r2, r3
 8002a74:	2101      	movs	r1, #1
 8002a76:	2051      	movs	r0, #81	; 0x51
 8002a78:	f002 ff00 	bl	800587c <RadioSpiReadRegisters>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <SpiritCsmaInit+0xc4>)
 8002a80:	b212      	sxth	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	7019      	strb	r1, [r3, #0]
 8002a86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a8a:	705a      	strb	r2, [r3, #1]

  /* Writes the new value for persistent mode */
  if(pxCsmaInit->xCsmaPersistentMode==S_ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <SpiritCsmaInit+0x74>
  {
    tempRegValue[4] |= PROTOCOL1_CSMA_PERS_ON_MASK;
 8002a94:	7b3b      	ldrb	r3, [r7, #12]
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	733b      	strb	r3, [r7, #12]
 8002a9e:	e004      	b.n	8002aaa <SpiritCsmaInit+0x7e>
  }
  else
  {
    tempRegValue[4] &= ~PROTOCOL1_CSMA_PERS_ON_MASK;
 8002aa0:	7b3b      	ldrb	r3, [r7, #12]
 8002aa2:	f023 0302 	bic.w	r3, r3, #2
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	733b      	strb	r3, [r7, #12]
  }

  /* Writes PROTOCOL1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	3304      	adds	r3, #4
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	2051      	movs	r0, #81	; 0x51
 8002ab6:	f002 fe35 	bl	8005724 <RadioSpiWriteRegisters>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <SpiritCsmaInit+0xc4>)
 8002abe:	b212      	sxth	r2, r2
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	7019      	strb	r1, [r3, #0]
 8002ac4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ac8:	705a      	strb	r2, [r3, #1]

  /* Writes CSMA_CONFIGx_BASE registers */
  g_xStatus = SpiritSpiWriteRegisters(CSMA_CONFIG3_BASE, 4, tempRegValue);
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	2064      	movs	r0, #100	; 0x64
 8002ad4:	f002 fe26 	bl	8005724 <RadioSpiWriteRegisters>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SpiritCsmaInit+0xc4>)
 8002adc:	b212      	sxth	r2, r2
 8002ade:	4611      	mov	r1, r2
 8002ae0:	7019      	strb	r1, [r3, #0]
 8002ae2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae6:	705a      	strb	r2, [r3, #1]

}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000700 	.word	0x20000700

08002af4 <SpiritCsma>:
 * @param  xNewState the state of the CSMA mode.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCsma(SpiritFunctionalState xNewState)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PROTOCOL1 register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8002afe:	f107 030f 	add.w	r3, r7, #15
 8002b02:	461a      	mov	r2, r3
 8002b04:	2101      	movs	r1, #1
 8002b06:	2051      	movs	r0, #81	; 0x51
 8002b08:	f002 feb8 	bl	800587c <RadioSpiReadRegisters>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <SpiritCsma+0x6c>)
 8002b10:	b212      	sxth	r2, r2
 8002b12:	4611      	mov	r1, r2
 8002b14:	7019      	strb	r1, [r3, #0]
 8002b16:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b1a:	705a      	strb	r2, [r3, #1]

  /* Sets or resets the CSMA enable bit */
  if(xNewState==S_ENABLE)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <SpiritCsma+0x3a>
  {
    tempRegValue |= PROTOCOL1_CSMA_ON_MASK;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e004      	b.n	8002b38 <SpiritCsma+0x44>
  }
  else
  {
    tempRegValue &= ~PROTOCOL1_CSMA_ON_MASK;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the new value on the PROTOCOL1 register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8002b38:	f107 030f 	add.w	r3, r7, #15
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2051      	movs	r0, #81	; 0x51
 8002b42:	f002 fdef 	bl	8005724 <RadioSpiWriteRegisters>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <SpiritCsma+0x6c>)
 8002b4a:	b212      	sxth	r2, r2
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	7019      	strb	r1, [r3, #0]
 8002b50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b54:	705a      	strb	r2, [r3, #1]

}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000700 	.word	0x20000700

08002b64 <SpiritGeneralSetExtRef>:
 * @param  xExtMode new state for the external reference.
 *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
 * @retval None.
 */
void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_MODE_EXT(xExtMode));

  /* Reads the ANA_FUNC_CONF0_BASE register value */
  SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002b6e:	f107 030f 	add.w	r3, r7, #15
 8002b72:	461a      	mov	r2, r3
 8002b74:	2101      	movs	r1, #1
 8002b76:	2001      	movs	r0, #1
 8002b78:	f002 fe80 	bl	800587c <RadioSpiReadRegisters>

  /* Build the value to write */
  if(xExtMode == MODE_EXT_XO)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <SpiritGeneralSetExtRef+0x2a>
  {
    tempRegValue &= ~EXT_REF_MASK;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	f023 0310 	bic.w	r3, r3, #16
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e004      	b.n	8002b98 <SpiritGeneralSetExtRef+0x34>
  }
  else
  {
    tempRegValue |= EXT_REF_MASK;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	f043 0310 	orr.w	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002b98:	f107 030f 	add.w	r3, r7, #15
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f002 fdbf 	bl	8005724 <RadioSpiWriteRegisters>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <SpiritGeneralSetExtRef+0x5c>)
 8002baa:	b212      	sxth	r2, r2
 8002bac:	4611      	mov	r1, r2
 8002bae:	7019      	strb	r1, [r3, #0]
 8002bb0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bb4:	705a      	strb	r2, [r3, #1]

}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000700 	.word	0x20000700

08002bc4 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	785a      	ldrb	r2, [r3, #1]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	789b      	ldrb	r3, [r3, #2]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	f107 020f 	add.w	r2, r7, #15
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 fd9b 	bl	8005724 <RadioSpiWriteRegisters>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SpiritGpioInit+0x44>)
 8002bf2:	b212      	sxth	r2, r2
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	7019      	strb	r1, [r3, #0]
 8002bf8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bfc:	705a      	strb	r2, [r3, #1]

}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000700 	.word	0x20000700

08002c0c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <SpiritIrqDeInit+0x20>
  {
    uint32_t tempValue = 0x00000000;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
    
    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6013      	str	r3, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	461a      	mov	r2, r3
 8002c32:	2104      	movs	r1, #4
 8002c34:	2090      	movs	r0, #144	; 0x90
 8002c36:	f002 fd75 	bl	8005724 <RadioSpiWriteRegisters>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SpiritIrqDeInit+0x48>)
 8002c3e:	b212      	sxth	r2, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	7019      	strb	r1, [r3, #0]
 8002c44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c48:	705a      	strb	r2, [r3, #1]
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000700 	.word	0x20000700

08002c58 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2104      	movs	r1, #4
 8002c70:	2090      	movs	r0, #144	; 0x90
 8002c72:	f002 fe03 	bl	800587c <RadioSpiReadRegisters>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <SpiritIrq+0xcc>)
 8002c7a:	b212      	sxth	r2, r2
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	7019      	strb	r1, [r3, #0]
 8002c80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c84:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	74fb      	strb	r3, [r7, #19]
 8002c8a:	e012      	b.n	8002cb2 <SpiritIrq+0x5a>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	f107 0218 	add.w	r2, r7, #24
 8002c92:	4413      	add	r3, r2
 8002c94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	f1c3 0303 	rsb	r3, r3, #3
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4413      	add	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	74fb      	strb	r3, [r7, #19]
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d9e9      	bls.n	8002c8c <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <SpiritIrq+0x72>
  {
    tempValue &= (~xIrq);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e003      	b.n	8002cd2 <SpiritIrq+0x7a>
  }
  else
  {
    tempValue |= (xIrq);
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	74bb      	strb	r3, [r7, #18]
 8002cd6:	e00f      	b.n	8002cf8 <SpiritIrq+0xa0>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8002cd8:	7cbb      	ldrb	r3, [r7, #18]
 8002cda:	f1c3 0303 	rsb	r3, r3, #3
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	40da      	lsrs	r2, r3
 8002ce4:	7cbb      	ldrb	r3, [r7, #18]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f107 0118 	add.w	r1, r7, #24
 8002cec:	440b      	add	r3, r1
 8002cee:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002cf2:	7cbb      	ldrb	r3, [r7, #18]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	74bb      	strb	r3, [r7, #18]
 8002cf8:	7cbb      	ldrb	r3, [r7, #18]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d9ec      	bls.n	8002cd8 <SpiritIrq+0x80>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	461a      	mov	r2, r3
 8002d04:	2104      	movs	r1, #4
 8002d06:	2090      	movs	r0, #144	; 0x90
 8002d08:	f002 fd0c 	bl	8005724 <RadioSpiWriteRegisters>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <SpiritIrq+0xcc>)
 8002d10:	b212      	sxth	r2, r2
 8002d12:	4611      	mov	r1, r2
 8002d14:	7019      	strb	r1, [r3, #0]
 8002d16:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d1a:	705a      	strb	r2, [r3, #1]

}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000700 	.word	0x20000700

08002d28 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	20fa      	movs	r0, #250	; 0xfa
 8002d3e:	f002 fd9d 	bl	800587c <RadioSpiReadRegisters>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <SpiritIrqGetStatus+0x60>)
 8002d46:	b212      	sxth	r2, r2
 8002d48:	4611      	mov	r1, r2
 8002d4a:	7019      	strb	r1, [r3, #0]
 8002d4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d50:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	74fb      	strb	r3, [r7, #19]
 8002d56:	e00f      	b.n	8002d78 <SpiritIrqGetStatus+0x50>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	f1c3 0303 	rsb	r3, r3, #3
 8002d5e:	f107 0218 	add.w	r2, r7, #24
 8002d62:	4413      	add	r3, r2
 8002d64:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	3301      	adds	r3, #1
 8002d76:	74fb      	strb	r3, [r7, #19]
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d9ec      	bls.n	8002d58 <SpiritIrqGetStatus+0x30>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000700 	.word	0x20000700

08002d8c <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	461a      	mov	r2, r3
 8002d96:	2104      	movs	r1, #4
 8002d98:	20fa      	movs	r0, #250	; 0xfa
 8002d9a:	f002 fd6f 	bl	800587c <RadioSpiReadRegisters>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SpiritIrqClearStatus+0x2c>)
 8002da2:	b212      	sxth	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	7019      	strb	r1, [r3, #0]
 8002da8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dac:	705a      	strb	r2, [r3, #1]

}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000700 	.word	0x20000700

08002dbc <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	20e7      	movs	r0, #231	; 0xe7
 8002dca:	f002 fd57 	bl	800587c <RadioSpiReadRegisters>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8002dd2:	b212      	sxth	r2, r2
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	7019      	strb	r1, [r3, #0]
 8002dd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ddc:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de4:	b2db      	uxtb	r3, r3

}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000700 	.word	0x20000700

08002df4 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002df8:	b08a      	sub	sp, #40	; 0x28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a70      	ldr	r2, [pc, #448]	; (8002fc4 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d907      	bls.n	8002e16 <SpiritManagementSetFrequencyBase+0x22>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a6f      	ldr	r2, [pc, #444]	; (8002fc8 <SpiritManagementSetFrequencyBase+0x1d4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d803      	bhi.n	8002e16 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e14:	e01a      	b.n	8002e4c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a6c      	ldr	r2, [pc, #432]	; (8002fcc <SpiritManagementSetFrequencyBase+0x1d8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d907      	bls.n	8002e2e <SpiritManagementSetFrequencyBase+0x3a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a6b      	ldr	r2, [pc, #428]	; (8002fd0 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d803      	bhi.n	8002e2e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e2c:	e00e      	b.n	8002e4c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a68      	ldr	r2, [pc, #416]	; (8002fd4 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d907      	bls.n	8002e46 <SpiritManagementSetFrequencyBase+0x52>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a67      	ldr	r2, [pc, #412]	; (8002fd8 <SpiritManagementSetFrequencyBase+0x1e4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d803      	bhi.n	8002e46 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e44:	e002      	b.n	8002e4c <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002e4c:	f001 f806 	bl	8003e5c <SpiritRadioGetFrequencyOffset>
 8002e50:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002e52:	f000 ffe3 	bl	8003e1c <SpiritRadioGetChannelSpace>
 8002e56:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002e58:	f000 ffc8 	bl	8003dec <SpiritRadioGetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	441a      	add	r2, r3
 8002e66:	7efb      	ldrb	r3, [r7, #27]
 8002e68:	69f9      	ldr	r1, [r7, #28]
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002e72:	f001 fe49 	bl	8004b08 <SpiritRadioGetRefDiv>
 8002e76:	4603      	mov	r3, r0
 8002e78:	3301      	adds	r3, #1
 8002e7a:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8002e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d83a      	bhi.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <SpiritManagementSetFrequencyBase+0x98>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002ee5 	.word	0x08002ee5
 8002e90:	08002ecd 	.word	0x08002ecd
 8002e94:	08002eb5 	.word	0x08002eb5
 8002e98:	08002e9d 	.word	0x08002e9d
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <SpiritManagementSetFrequencyBase+0x1e8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d803      	bhi.n	8002eac <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7ff fd7f 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002eaa:	e026      	b.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7ff fd7b 	bl	80029a8 <SpiritCalibrationSelectVco>
    break;
 8002eb2:	e022      	b.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	4a4a      	ldr	r2, [pc, #296]	; (8002fe0 <SpiritManagementSetFrequencyBase+0x1ec>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d803      	bhi.n	8002ec4 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff fd73 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002ec2:	e01a      	b.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	f7ff fd6f 	bl	80029a8 <SpiritCalibrationSelectVco>
    break;
 8002eca:	e016      	b.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	4a45      	ldr	r2, [pc, #276]	; (8002fe4 <SpiritManagementSetFrequencyBase+0x1f0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d803      	bhi.n	8002edc <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7ff fd67 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002eda:	e00e      	b.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7ff fd63 	bl	80029a8 <SpiritCalibrationSelectVco>
    break;
 8002ee2:	e00a      	b.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d803      	bhi.n	8002ef4 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7ff fd5b 	bl	80029a8 <SpiritCalibrationSelectVco>
 8002ef2:	e002      	b.n	8002efa <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f7ff fd57 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f000 fe8e 	bl	8003c1c <SpiritRadioSearchWCP>
 8002f00:	4603      	mov	r3, r0
 8002f02:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fd fafd 	bl	8000504 <__aeabi_ui2d>
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	460d      	mov	r5, r1
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	049b      	lsls	r3, r3, #18
 8002f12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f16:	4935      	ldr	r1, [pc, #212]	; (8002fec <SpiritManagementSetFrequencyBase+0x1f8>)
 8002f18:	5c8a      	ldrb	r2, [r1, r2]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fb00 	bl	8000524 <__aeabi_i2d>
 8002f24:	4680      	mov	r8, r0
 8002f26:	4689      	mov	r9, r1
 8002f28:	f001 fe62 	bl	8004bf0 <SpiritRadioGetXtalFrequency>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fae8 	bl	8000504 <__aeabi_ui2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4640      	mov	r0, r8
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	f7fd fc86 	bl	800084c <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd fb56 	bl	80005f8 <__aeabi_dmul>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	4618      	mov	r0, r3
 8002f52:	4621      	mov	r1, r4
 8002f54:	f7fd fdea 	bl	8000b2c <__aeabi_d2uiz>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	0d5b      	lsrs	r3, r3, #21
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	7cbb      	ldrb	r3, [r7, #18]
 8002f6a:	015b      	lsls	r3, r3, #5
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	0b5b      	lsrs	r3, r3, #13
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f90:	4917      	ldr	r1, [pc, #92]	; (8002ff0 <SpiritManagementSetFrequencyBase+0x1fc>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	2008      	movs	r0, #8
 8002fa4:	f002 fbbe 	bl	8005724 <RadioSpiWriteRegisters>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <SpiritManagementSetFrequencyBase+0x200>)
 8002fac:	b212      	sxth	r2, r2
 8002fae:	4611      	mov	r1, r2
 8002fb0:	7019      	strb	r1, [r3, #0]
 8002fb2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fb6:	705a      	strb	r2, [r3, #1]
}
 8002fb8:	bf00      	nop
 8002fba:	3728      	adds	r7, #40	; 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2e5f567f 	.word	0x2e5f567f
 8002fc8:	390c2fe0 	.word	0x390c2fe0
 8002fcc:	1701e47f 	.word	0x1701e47f
 8002fd0:	1c146a60 	.word	0x1c146a60
 8002fd4:	11d260bf 	.word	0x11d260bf
 8002fd8:	14ced7e0 	.word	0x14ced7e0
 8002fdc:	099cf4e1 	.word	0x099cf4e1
 8002fe0:	1339e9c3 	.word	0x1339e9c3
 8002fe4:	19a28d05 	.word	0x19a28d05
 8002fe8:	33451a0a 	.word	0x33451a0a
 8002fec:	0800b278 	.word	0x0800b278
 8002ff0:	0800b274 	.word	0x0800b274
 8002ff4:	20000700 	.word	0x20000700

08002ff8 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8003006:	f001 fdf3 	bl	8004bf0 <SpiritRadioGetXtalFrequency>
 800300a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800300c:	2300      	movs	r3, #0
 800300e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4a57      	ldr	r2, [pc, #348]	; (8003170 <SpiritManagementWaVcoCalibration+0x178>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d90f      	bls.n	8003038 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8003018:	f001 fd76 	bl	8004b08 <SpiritRadioGetRefDiv>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8003026:	f001 f87b 	bl	8004120 <SpiritRadioGetFrequencyBase>
 800302a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800302c:	2001      	movs	r0, #1
 800302e:	f001 fd3b 	bl	8004aa8 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fede 	bl	8002df4 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8003038:	f001 f872 	bl	8004120 <SpiritRadioGetFrequencyBase>
 800303c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800303e:	2325      	movs	r3, #37	; 0x25
 8003040:	707b      	strb	r3, [r7, #1]
 8003042:	1c7b      	adds	r3, r7, #1
 8003044:	461a      	mov	r2, r3
 8003046:	2101      	movs	r1, #1
 8003048:	20a1      	movs	r0, #161	; 0xa1
 800304a:	f002 fb6b 	bl	8005724 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800304e:	2001      	movs	r0, #1
 8003050:	f7ff fbee 	bl	8002830 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8003054:	f001 ffa4 	bl	8004fa0 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d10d      	bne.n	8003082 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800306a:	2062      	movs	r0, #98	; 0x62
 800306c:	f7ff fcc6 	bl	80029fc <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8003070:	f001 ff96 	bl	8004fa0 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8003074:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b03      	cmp	r3, #3
 8003080:	d1f6      	bne.n	8003070 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 8003082:	2066      	movs	r0, #102	; 0x66
 8003084:	f7ff fcba 	bl	80029fc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8003088:	2300      	movs	r3, #0
 800308a:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 800308c:	f001 ff88 	bl	8004fa0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8003090:	4b38      	ldr	r3, [pc, #224]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b13      	cmp	r3, #19
 800309c:	d106      	bne.n	80030ac <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 800309e:	7b7b      	ldrb	r3, [r7, #13]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	737a      	strb	r2, [r7, #13]
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d101      	bne.n	80030ac <SpiritManagementWaVcoCalibration+0xb4>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e05d      	b.n	8003168 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	d1e8      	bne.n	800308c <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80030ba:	f7ff fbf1 	bl	80028a0 <SpiritCalibrationGetVcoCalData>
 80030be:	4603      	mov	r3, r0
 80030c0:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80030c2:	2062      	movs	r0, #98	; 0x62
 80030c4:	f7ff fc9a 	bl	80029fc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80030c8:	f001 ff6a 	bl	8004fa0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d1f6      	bne.n	80030c8 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80030da:	2065      	movs	r0, #101	; 0x65
 80030dc:	f7ff fc8e 	bl	80029fc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80030e4:	f001 ff5c 	bl	8004fa0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b13      	cmp	r3, #19
 80030f4:	d106      	bne.n	8003104 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80030f6:	7b7b      	ldrb	r3, [r7, #13]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	737a      	strb	r2, [r7, #13]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d101      	bne.n	8003104 <SpiritManagementWaVcoCalibration+0x10c>
 8003100:	2301      	movs	r3, #1
 8003102:	e031      	b.n	8003168 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b0f      	cmp	r3, #15
 8003110:	d1e8      	bne.n	80030e4 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8003112:	f7ff fbc5 	bl	80028a0 <SpiritCalibrationGetVcoCalData>
 8003116:	4603      	mov	r3, r0
 8003118:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800311a:	2062      	movs	r0, #98	; 0x62
 800311c:	f7ff fc6e 	bl	80029fc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8003120:	f001 ff3e 	bl	8004fa0 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <SpiritManagementWaVcoCalibration+0x17c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b03      	cmp	r3, #3
 8003130:	d1f6      	bne.n	8003120 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8003132:	7bbb      	ldrb	r3, [r7, #14]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8003138:	2063      	movs	r0, #99	; 0x63
 800313a:	f7ff fc5f 	bl	80029fc <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800313e:	2000      	movs	r0, #0
 8003140:	f7ff fb76 	bl	8002830 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800314a:	2000      	movs	r0, #0
 800314c:	f001 fcac 	bl	8004aa8 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fe4f 	bl	8002df4 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fbbd 	bl	80028d8 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800315e:	78bb      	ldrb	r3, [r7, #2]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fbed 	bl	8002940 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	01c9c380 	.word	0x01c9c380
 8003174:	20000700 	.word	0x20000700

08003178 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <SpiritManagementWaCmdStrobeTx+0x60>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d023      	beq.n	80031d0 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <SpiritManagementWaCmdStrobeTx+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <SpiritManagementWaCmdStrobeTx+0x68>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d908      	bls.n	80031a4 <SpiritManagementWaCmdStrobeTx+0x2c>
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <SpiritManagementWaCmdStrobeTx+0x64>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d803      	bhi.n	80031a4 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 800319c:	20c0      	movs	r0, #192	; 0xc0
 800319e:	f001 fb99 	bl	80048d4 <SpiritRadioSetPACwc>
 80031a2:	e002      	b.n	80031aa <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f001 fb95 	bl	80048d4 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80031aa:	2311      	movs	r3, #17
 80031ac:	71fb      	strb	r3, [r7, #7]
 80031ae:	1dfb      	adds	r3, r7, #7
 80031b0:	461a      	mov	r2, r3
 80031b2:	2101      	movs	r1, #1
 80031b4:	20a9      	movs	r0, #169	; 0xa9
 80031b6:	f002 fab5 	bl	8005724 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80031ba:	2320      	movs	r3, #32
 80031bc:	71fb      	strb	r3, [r7, #7]
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	461a      	mov	r2, r3
 80031c2:	2101      	movs	r1, #1
 80031c4:	20a5      	movs	r0, #165	; 0xa5
 80031c6:	f002 faad 	bl	8005724 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80031ca:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <SpiritManagementWaCmdStrobeTx+0x60>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
  }
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000024c 	.word	0x2000024c
 80031dc:	200005b4 	.word	0x200005b4
 80031e0:	08f0d17f 	.word	0x08f0d17f
 80031e4:	1c03a180 	.word	0x1c03a180

080031e8 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <SpiritManagementWaCmdStrobeRx+0x34>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d00d      	beq.n	8003214 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 80031f8:	2398      	movs	r3, #152	; 0x98
 80031fa:	71fb      	strb	r3, [r7, #7]
 80031fc:	1dfb      	adds	r3, r7, #7
 80031fe:	461a      	mov	r2, r3
 8003200:	2101      	movs	r1, #1
 8003202:	20a5      	movs	r0, #165	; 0xa5
 8003204:	f002 fa8e 	bl	8005724 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8003208:	2000      	movs	r0, #0
 800320a:	f001 fb63 	bl	80048d4 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <SpiritManagementWaCmdStrobeRx+0x34>)
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
  }
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000024c 	.word	0x2000024c

08003220 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <SpiritManagementWaTRxFcMem+0x20>)
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <SpiritManagementWaTRxFcMem+0x24>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	2000024c 	.word	0x2000024c
 8003244:	200005b4 	.word	0x200005b4

08003248 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8003250:	f107 0308 	add.w	r3, r7, #8
 8003254:	461a      	mov	r2, r3
 8003256:	2101      	movs	r1, #1
 8003258:	2051      	movs	r0, #81	; 0x51
 800325a:	f002 fb0f 	bl	800587c <RadioSpiReadRegisters>
 800325e:	4602      	mov	r2, r0
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <SpiritPktBasicInit+0x1ac>)
 8003262:	b212      	sxth	r2, r2
 8003264:	4611      	mov	r1, r2
 8003266:	7019      	strb	r1, [r3, #0]
 8003268:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800326c:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800326e:	7a3b      	ldrb	r3, [r7, #8]
 8003270:	f023 0320 	bic.w	r3, r3, #32
 8003274:	b2db      	uxtb	r3, r3
 8003276:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8003278:	7a3b      	ldrb	r3, [r7, #8]
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	461a      	mov	r2, r3
 8003288:	2101      	movs	r1, #1
 800328a:	2051      	movs	r0, #81	; 0x51
 800328c:	f002 fa4a 	bl	8005724 <RadioSpiWriteRegisters>
 8003290:	4602      	mov	r2, r0
 8003292:	4b58      	ldr	r3, [pc, #352]	; (80033f4 <SpiritPktBasicInit+0x1ac>)
 8003294:	b212      	sxth	r2, r2
 8003296:	4611      	mov	r1, r2
 8003298:	7019      	strb	r1, [r3, #0]
 800329a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800329e:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80032a0:	f107 0308 	add.w	r3, r7, #8
 80032a4:	461a      	mov	r2, r3
 80032a6:	2101      	movs	r1, #1
 80032a8:	204f      	movs	r0, #79	; 0x4f
 80032aa:	f002 fae7 	bl	800587c <RadioSpiReadRegisters>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b50      	ldr	r3, [pc, #320]	; (80033f4 <SpiritPktBasicInit+0x1ac>)
 80032b2:	b212      	sxth	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	7019      	strb	r1, [r3, #0]
 80032b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032bc:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 80032be:	7a3b      	ldrb	r3, [r7, #8]
 80032c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	461a      	mov	r2, r3
 80032ce:	2101      	movs	r1, #1
 80032d0:	204f      	movs	r0, #79	; 0x4f
 80032d2:	f002 fa27 	bl	8005724 <RadioSpiWriteRegisters>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <SpiritPktBasicInit+0x1ac>)
 80032da:	b212      	sxth	r2, r2
 80032dc:	4611      	mov	r1, r2
 80032de:	7019      	strb	r1, [r3, #0]
 80032e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032e4:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7b1b      	ldrb	r3, [r3, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 80032ee:	2308      	movs	r3, #8
 80032f0:	723b      	strb	r3, [r7, #8]
 80032f2:	e001      	b.n	80032f8 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80032f4:	2300      	movs	r3, #0
 80032f6:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 80032f8:	7a3a      	ldrb	r2, [r7, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7adb      	ldrb	r3, [r3, #11]
 80032fe:	4313      	orrs	r3, r2
 8003300:	b2db      	uxtb	r3, r3
 8003302:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7a5b      	ldrb	r3, [r3, #9]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <SpiritPktBasicInit+0xca>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7a5b      	ldrb	r3, [r3, #9]
 8003316:	3b01      	subs	r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	4313      	orrs	r3, r2
 8003326:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 800332c:	4313      	orrs	r3, r2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7a9b      	ldrb	r3, [r3, #10]
 8003336:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7b9b      	ldrb	r3, [r3, #14]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d104      	bne.n	800334a <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8003340:	7afb      	ldrb	r3, [r7, #11]
 8003342:	f043 0310 	orr.w	r3, r3, #16
 8003346:	b2db      	uxtb	r3, r3
 8003348:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7b5b      	ldrb	r3, [r3, #13]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d104      	bne.n	800335c <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	461a      	mov	r2, r3
 8003362:	2104      	movs	r1, #4
 8003364:	2030      	movs	r0, #48	; 0x30
 8003366:	f002 f9dd 	bl	8005724 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	e01f      	b.n	80033b0 <SpiritPktBasicInit+0x168>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f1c3 0303 	rsb	r3, r3, #3
 800337e:	429a      	cmp	r2, r3
 8003380:	da07      	bge.n	8003392 <SpiritPktBasicInit+0x14a>
    {
      tempRegValue[i]=0;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	f107 0210 	add.w	r2, r7, #16
 8003388:	4413      	add	r3, r2
 800338a:	2200      	movs	r2, #0
 800338c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003390:	e00b      	b.n	80033aa <SpiritPktBasicInit+0x162>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	40da      	lsrs	r2, r3
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	f107 0110 	add.w	r1, r7, #16
 80033a4:	440b      	add	r3, r1
 80033a6:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	3301      	adds	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d9dc      	bls.n	8003370 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7a9b      	ldrb	r3, [r3, #10]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <SpiritPktBasicInit+0x17e>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 80033be:	2000      	movs	r0, #0
 80033c0:	f000 f8fc 	bl	80035bc <SpiritPktCommonFilterOnCrc>
 80033c4:	e002      	b.n	80033cc <SpiritPktBasicInit+0x184>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f000 f8f8 	bl	80035bc <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	461a      	mov	r2, r3
 80033d2:	2104      	movs	r1, #4
 80033d4:	2036      	movs	r0, #54	; 0x36
 80033d6:	f002 f9a5 	bl	8005724 <RadioSpiWriteRegisters>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <SpiritPktBasicInit+0x1ac>)
 80033de:	b212      	sxth	r2, r2
 80033e0:	4611      	mov	r1, r2
 80033e2:	7019      	strb	r1, [r3, #0]
 80033e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80033e8:	705a      	strb	r2, [r3, #1]

}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000700 	.word	0x20000700

080033f8 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	461a      	mov	r2, r3
 8003406:	2101      	movs	r1, #1
 8003408:	204f      	movs	r0, #79	; 0x4f
 800340a:	f002 fa37 	bl	800587c <RadioSpiReadRegisters>
 800340e:	4602      	mov	r2, r0
 8003410:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <SpiritPktBasicAddressesInit+0xd8>)
 8003412:	b212      	sxth	r2, r2
 8003414:	4611      	mov	r1, r2
 8003416:	7019      	strb	r1, [r3, #0]
 8003418:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800341c:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8003426:	7b3b      	ldrb	r3, [r7, #12]
 8003428:	f043 0308 	orr.w	r3, r3, #8
 800342c:	b2db      	uxtb	r3, r3
 800342e:	733b      	strb	r3, [r7, #12]
 8003430:	e004      	b.n	800343c <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8003432:	7b3b      	ldrb	r3, [r7, #12]
 8003434:	f023 0308 	bic.w	r3, r3, #8
 8003438:	b2db      	uxtb	r3, r3
 800343a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	789b      	ldrb	r3, [r3, #2]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8003444:	7b3b      	ldrb	r3, [r7, #12]
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	b2db      	uxtb	r3, r3
 800344c:	733b      	strb	r3, [r7, #12]
 800344e:	e004      	b.n	800345a <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8003450:	7b3b      	ldrb	r3, [r7, #12]
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	b2db      	uxtb	r3, r3
 8003458:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	791b      	ldrb	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8003462:	7b3b      	ldrb	r3, [r7, #12]
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	b2db      	uxtb	r3, r3
 800346a:	733b      	strb	r3, [r7, #12]
 800346c:	e004      	b.n	8003478 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800346e:	7b3b      	ldrb	r3, [r7, #12]
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	b2db      	uxtb	r3, r3
 8003476:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	461a      	mov	r2, r3
 800347e:	2101      	movs	r1, #1
 8003480:	204f      	movs	r0, #79	; 0x4f
 8003482:	f002 f94f 	bl	8005724 <RadioSpiWriteRegisters>
 8003486:	4602      	mov	r2, r0
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <SpiritPktBasicAddressesInit+0xd8>)
 800348a:	b212      	sxth	r2, r2
 800348c:	4611      	mov	r1, r2
 800348e:	7019      	strb	r1, [r3, #0]
 8003490:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003494:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	795b      	ldrb	r3, [r3, #5]
 800349a:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	78db      	ldrb	r3, [r3, #3]
 80034a0:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 80034a8:	f107 030c 	add.w	r3, r7, #12
 80034ac:	461a      	mov	r2, r3
 80034ae:	2103      	movs	r1, #3
 80034b0:	204c      	movs	r0, #76	; 0x4c
 80034b2:	f002 f937 	bl	8005724 <RadioSpiWriteRegisters>
 80034b6:	4602      	mov	r2, r0
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <SpiritPktBasicAddressesInit+0xd8>)
 80034ba:	b212      	sxth	r2, r2
 80034bc:	4611      	mov	r1, r2
 80034be:	7019      	strb	r1, [r3, #0]
 80034c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034c4:	705a      	strb	r2, [r3, #1]
  
  
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000700 	.word	0x20000700

080034d4 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	461a      	mov	r2, r3
 80034de:	2101      	movs	r1, #1
 80034e0:	2030      	movs	r0, #48	; 0x30
 80034e2:	f002 f9cb 	bl	800587c <RadioSpiReadRegisters>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <SpiritPktBasicGetAddressField+0x3c>)
 80034ea:	b212      	sxth	r2, r2
 80034ec:	4611      	mov	r1, r2
 80034ee:	7019      	strb	r1, [r3, #0]
 80034f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034f4:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 0318 	and.w	r3, r3, #24
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8003504:	2300      	movs	r3, #0
  }

}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000700 	.word	0x20000700

08003514 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 800351e:	2300      	movs	r3, #0
 8003520:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8003522:	f7ff ffd7 	bl	80034d4 <SpiritPktBasicGetAddressField>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 800352c:	2301      	movs	r3, #1
 800352e:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8003530:	f000 f828 	bl	8003584 <SpiritPktCommonGetControlLength>
 8003534:	4603      	mov	r3, r0
 8003536:	b29a      	uxth	r2, r3
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	4413      	add	r3, r2
 800353c:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4413      	add	r3, r2
 8003548:	b2db      	uxtb	r3, r3
 800354a:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	89fb      	ldrh	r3, [r7, #14]
 8003550:	4413      	add	r3, r2
 8003552:	121b      	asrs	r3, r3, #8
 8003554:	b2db      	uxtb	r3, r3
 8003556:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	461a      	mov	r2, r3
 800355e:	2102      	movs	r1, #2
 8003560:	2034      	movs	r0, #52	; 0x34
 8003562:	f002 f8df 	bl	8005724 <RadioSpiWriteRegisters>
 8003566:	4602      	mov	r2, r0
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <SpiritPktBasicSetPayloadLength+0x6c>)
 800356a:	b212      	sxth	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	7019      	strb	r1, [r3, #0]
 8003570:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003574:	705a      	strb	r2, [r3, #1]

}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000700 	.word	0x20000700

08003584 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 800358a:	1dfb      	adds	r3, r7, #7
 800358c:	461a      	mov	r2, r3
 800358e:	2101      	movs	r1, #1
 8003590:	2030      	movs	r0, #48	; 0x30
 8003592:	f002 f973 	bl	800587c <RadioSpiReadRegisters>
 8003596:	4602      	mov	r2, r0
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <SpiritPktCommonGetControlLength+0x34>)
 800359a:	b212      	sxth	r2, r2
 800359c:	4611      	mov	r1, r2
 800359e:	7019      	strb	r1, [r3, #0]
 80035a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80035a4:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	b2db      	uxtb	r3, r3

}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000700 	.word	0x20000700

080035bc <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80035c6:	f107 030f 	add.w	r3, r7, #15
 80035ca:	461a      	mov	r2, r3
 80035cc:	2101      	movs	r1, #1
 80035ce:	204f      	movs	r0, #79	; 0x4f
 80035d0:	f002 f954 	bl	800587c <RadioSpiReadRegisters>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <SpiritPktCommonFilterOnCrc+0x6c>)
 80035d8:	b212      	sxth	r2, r2
 80035da:	4611      	mov	r1, r2
 80035dc:	7019      	strb	r1, [r3, #0]
 80035de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80035e2:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d105      	bne.n	80035f6 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e004      	b.n	8003600 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8003600:	f107 030f 	add.w	r3, r7, #15
 8003604:	461a      	mov	r2, r3
 8003606:	2101      	movs	r1, #1
 8003608:	204f      	movs	r0, #79	; 0x4f
 800360a:	f002 f88b 	bl	8005724 <RadioSpiWriteRegisters>
 800360e:	4602      	mov	r2, r0
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <SpiritPktCommonFilterOnCrc+0x6c>)
 8003612:	b212      	sxth	r2, r2
 8003614:	4611      	mov	r1, r2
 8003616:	7019      	strb	r1, [r3, #0]
 8003618:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800361c:	705a      	strb	r2, [r3, #1]

}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000700 	.word	0x20000700

0800362c <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	461a      	mov	r2, r3
 800363a:	2101      	movs	r1, #1
 800363c:	204b      	movs	r0, #75	; 0x4b
 800363e:	f002 f871 	bl	8005724 <RadioSpiWriteRegisters>
 8003642:	4602      	mov	r2, r0
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <SpiritPktCommonSetDestinationAddress+0x30>)
 8003646:	b212      	sxth	r2, r2
 8003648:	4611      	mov	r1, r2
 800364a:	7019      	strb	r1, [r3, #0]
 800364c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003650:	705a      	strb	r2, [r3, #1]

}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000700 	.word	0x20000700

08003660 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	461a      	mov	r2, r3
 800366a:	2101      	movs	r1, #1
 800366c:	20d3      	movs	r0, #211	; 0xd3
 800366e:	f002 f905 	bl	800587c <RadioSpiReadRegisters>
 8003672:	4602      	mov	r2, r0
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8003676:	b212      	sxth	r2, r2
 8003678:	4611      	mov	r1, r2
 800367a:	7019      	strb	r1, [r3, #0]
 800367c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003680:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8003682:	79fb      	ldrb	r3, [r7, #7]

}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000700 	.word	0x20000700

08003690 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800369a:	f107 030f 	add.w	r3, r7, #15
 800369e:	461a      	mov	r2, r3
 80036a0:	2101      	movs	r1, #1
 80036a2:	203a      	movs	r0, #58	; 0x3a
 80036a4:	f002 f8ea 	bl	800587c <RadioSpiReadRegisters>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b14      	ldr	r3, [pc, #80]	; (80036fc <SpiritQiSqiCheck+0x6c>)
 80036ac:	b212      	sxth	r2, r2
 80036ae:	4611      	mov	r1, r2
 80036b0:	7019      	strb	r1, [r3, #0]
 80036b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036b6:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	73fb      	strb	r3, [r7, #15]
 80036c8:	e004      	b.n	80036d4 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	f023 0302 	bic.w	r3, r3, #2
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80036d4:	f107 030f 	add.w	r3, r7, #15
 80036d8:	461a      	mov	r2, r3
 80036da:	2101      	movs	r1, #1
 80036dc:	203a      	movs	r0, #58	; 0x3a
 80036de:	f002 f821 	bl	8005724 <RadioSpiWriteRegisters>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <SpiritQiSqiCheck+0x6c>)
 80036e6:	b212      	sxth	r2, r2
 80036e8:	4611      	mov	r1, r2
 80036ea:	7019      	strb	r1, [r3, #0]
 80036ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036f0:	705a      	strb	r2, [r3, #1]

}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000700 	.word	0x20000700

08003700 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800370a:	f107 030f 	add.w	r3, r7, #15
 800370e:	461a      	mov	r2, r3
 8003710:	2101      	movs	r1, #1
 8003712:	203a      	movs	r0, #58	; 0x3a
 8003714:	f002 f8b2 	bl	800587c <RadioSpiReadRegisters>
 8003718:	4602      	mov	r2, r0
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <SpiritQiSetSqiThreshold+0x64>)
 800371c:	b212      	sxth	r2, r2
 800371e:	4611      	mov	r1, r2
 8003720:	7019      	strb	r1, [r3, #0]
 8003722:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003726:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800372e:	b2db      	uxtb	r3, r3
 8003730:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	4313      	orrs	r3, r2
 8003738:	b2db      	uxtb	r3, r3
 800373a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 800373c:	f107 030f 	add.w	r3, r7, #15
 8003740:	461a      	mov	r2, r3
 8003742:	2101      	movs	r1, #1
 8003744:	203a      	movs	r0, #58	; 0x3a
 8003746:	f001 ffed 	bl	8005724 <RadioSpiWriteRegisters>
 800374a:	4602      	mov	r2, r0
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SpiritQiSetSqiThreshold+0x64>)
 800374e:	b212      	sxth	r2, r2
 8003750:	4611      	mov	r1, r2
 8003752:	7019      	strb	r1, [r3, #0]
 8003754:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003758:	705a      	strb	r2, [r3, #1]

}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000700 	.word	0x20000700

08003768 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3382      	adds	r3, #130	; 0x82
 8003774:	b2db      	uxtb	r3, r3
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 800377c:	f107 030f 	add.w	r3, r7, #15
 8003780:	461a      	mov	r2, r3
 8003782:	2101      	movs	r1, #1
 8003784:	2022      	movs	r0, #34	; 0x22
 8003786:	f001 ffcd 	bl	8005724 <RadioSpiWriteRegisters>
 800378a:	4602      	mov	r2, r0
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <SpiritQiSetRssiThresholddBm+0x3c>)
 800378e:	b212      	sxth	r2, r2
 8003790:	4611      	mov	r1, r2
 8003792:	7019      	strb	r1, [r3, #0]
 8003794:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003798:	705a      	strb	r2, [r3, #1]

}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000700 	.word	0x20000700

080037a8 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b08d      	sub	sp, #52	; 0x34
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 80037b0:	23a0      	movs	r3, #160	; 0xa0
 80037b2:	747b      	strb	r3, [r7, #17]
 80037b4:	f107 0311 	add.w	r3, r7, #17
 80037b8:	461a      	mov	r2, r3
 80037ba:	2101      	movs	r1, #1
 80037bc:	209f      	movs	r0, #159	; 0x9f
 80037be:	f001 ffb1 	bl	8005724 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037e0:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8003ac0 <SpiritRadioInit+0x318>
 80037e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ec:	ee17 3a90 	vmov	r3, s15
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 80037f2:	2063      	movs	r0, #99	; 0x63
 80037f4:	f002 f8f4 	bl	80059e0 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80037f8:	2300      	movs	r3, #0
 80037fa:	73bb      	strb	r3, [r7, #14]
 80037fc:	e004      	b.n	8003808 <SpiritRadioInit+0x60>
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	3301      	adds	r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	73bb      	strb	r3, [r7, #14]
 8003808:	7bbb      	ldrb	r3, [r7, #14]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d1f6      	bne.n	80037fe <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8003810:	f001 fbc6 	bl	8004fa0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8003814:	4bab      	ldr	r3, [pc, #684]	; (8003ac4 <SpiritRadioInit+0x31c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d1ea      	bne.n	80037f8 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8003822:	4ba9      	ldr	r3, [pc, #676]	; (8003ac8 <SpiritRadioInit+0x320>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4aa9      	ldr	r2, [pc, #676]	; (8003acc <SpiritRadioInit+0x324>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d803      	bhi.n	8003834 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 800382c:	2000      	movs	r0, #0
 800382e:	f001 f98d 	bl	8004b4c <SpiritRadioSetDigDiv>
 8003832:	e002      	b.n	800383a <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8003834:	2001      	movs	r0, #1
 8003836:	f001 f989 	bl	8004b4c <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 800383a:	2062      	movs	r0, #98	; 0x62
 800383c:	f002 f8d0 	bl	80059e0 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8003840:	2300      	movs	r3, #0
 8003842:	737b      	strb	r3, [r7, #13]
 8003844:	e004      	b.n	8003850 <SpiritRadioInit+0xa8>
 8003846:	7b7b      	ldrb	r3, [r7, #13]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	3301      	adds	r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	737b      	strb	r3, [r7, #13]
 8003850:	7b7b      	ldrb	r3, [r7, #13]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2bff      	cmp	r3, #255	; 0xff
 8003856:	d1f6      	bne.n	8003846 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8003858:	f001 fba2 	bl	8004fa0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 800385c:	4b99      	ldr	r3, [pc, #612]	; (8003ac4 <SpiritRadioInit+0x31c>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b03      	cmp	r3, #3
 8003868:	d1ea      	bne.n	8003840 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003874:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8003ad0 <SpiritRadioInit+0x328>
 8003878:	ee67 6a87 	vmul.f32	s13, s15, s14
 800387c:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <SpiritRadioInit+0x320>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800388c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003890:	ee17 3a90 	vmov	r3, s15
 8003894:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8003896:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	b29b      	uxth	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 80038a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	025a      	lsls	r2, r3, #9
 80038b2:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <SpiritRadioInit+0x320>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fca9 	bl	8003220 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 80038ce:	f107 0310 	add.w	r3, r7, #16
 80038d2:	461a      	mov	r2, r3
 80038d4:	2101      	movs	r1, #1
 80038d6:	20a3      	movs	r0, #163	; 0xa3
 80038d8:	f001 ffd0 	bl	800587c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 80038dc:	7c3b      	ldrb	r3, [r7, #16]
 80038de:	f023 0302 	bic.w	r3, r3, #2
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	743b      	strb	r3, [r7, #16]
 80038e6:	f107 0310 	add.w	r3, r7, #16
 80038ea:	461a      	mov	r2, r3
 80038ec:	2101      	movs	r1, #1
 80038ee:	20a3      	movs	r0, #163	; 0xa3
 80038f0:	f001 ff18 	bl	8005724 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f107 0216 	add.w	r2, r7, #22
 80038fc:	f107 0117 	add.w	r1, r7, #23
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fc59 	bl	80041b8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7b5a      	ldrb	r2, [r3, #13]
 800390e:	7dbb      	ldrb	r3, [r7, #22]
 8003910:	4313      	orrs	r3, r2
 8003912:	b2db      	uxtb	r3, r3
 8003914:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8003916:	f107 0310 	add.w	r3, r7, #16
 800391a:	461a      	mov	r2, r3
 800391c:	2101      	movs	r1, #1
 800391e:	201c      	movs	r0, #28
 8003920:	f001 ffac 	bl	800587c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f107 0214 	add.w	r2, r7, #20
 800392c:	f107 0115 	add.w	r1, r7, #21
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fde1 	bl	80044f8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8003936:	7d3b      	ldrb	r3, [r7, #20]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	b25a      	sxtb	r2, r3
 800393c:	7c3b      	ldrb	r3, [r7, #16]
 800393e:	b25b      	sxtb	r3, r3
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	b25b      	sxtb	r3, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	b25a      	sxtb	r2, r3
 800394a:	7d7b      	ldrb	r3, [r7, #21]
 800394c:	b25b      	sxtb	r3, r3
 800394e:	4313      	orrs	r3, r2
 8003950:	b25b      	sxtb	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f107 0212 	add.w	r2, r7, #18
 800395e:	f107 0113 	add.w	r1, r7, #19
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fcdc 	bl	8004320 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	b25a      	sxtb	r2, r3
 800396e:	7cbb      	ldrb	r3, [r7, #18]
 8003970:	b25b      	sxtb	r3, r3
 8003972:	4313      	orrs	r3, r2
 8003974:	b25b      	sxtb	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 800397a:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <SpiritRadioInit+0x320>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0b1b      	lsrs	r3, r3, #12
 8003980:	ee07 3a90 	vmov	s15, r3
 8003984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003988:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003ad4 <SpiritRadioInit+0x32c>
 800398c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003990:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003ad8 <SpiritRadioInit+0x330>
 8003994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003998:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800399c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80039ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80039b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039bc:	dd0a      	ble.n	80039d4 <SpiritRadioInit+0x22c>
 80039be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c6:	edc7 7a00 	vstr	s15, [r7]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e007      	b.n	80039e4 <SpiritRadioInit+0x23c>
 80039d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039dc:	edc7 7a00 	vstr	s15, [r7]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <SpiritRadioInit+0x320>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a38      	ldr	r2, [pc, #224]	; (8003acc <SpiritRadioInit+0x324>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d802      	bhi.n	80039f6 <SpiritRadioInit+0x24e>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	777b      	strb	r3, [r7, #29]
 80039f4:	e035      	b.n	8003a62 <SpiritRadioInit+0x2ba>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <SpiritRadioInit+0x320>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	0b5b      	lsrs	r3, r3, #13
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a04:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003ad4 <SpiritRadioInit+0x32c>
 8003a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003ad8 <SpiritRadioInit+0x330>
 8003a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8003a18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a38:	dd0a      	ble.n	8003a50 <SpiritRadioInit+0x2a8>
 8003a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a42:	edc7 7a00 	vstr	s15, [r7]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e007      	b.n	8003a60 <SpiritRadioInit+0x2b8>
 8003a50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a58:	edc7 7a00 	vstr	s15, [r7]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8003a62:	f107 030f 	add.w	r3, r7, #15
 8003a66:	461a      	mov	r2, r3
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2007      	movs	r0, #7
 8003a6c:	f001 fe5a 	bl	8005724 <RadioSpiWriteRegisters>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <SpiritRadioInit+0x31c>)
 8003a74:	b212      	sxth	r2, r2
 8003a76:	4611      	mov	r1, r2
 8003a78:	7019      	strb	r1, [r3, #0]
 8003a7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a7e:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <SpiritRadioInit+0x320>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <SpiritRadioInit+0x334>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d92a      	bls.n	8003ae0 <SpiritRadioInit+0x338>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <SpiritRadioInit+0x320>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fc fd37 	bl	8000504 <__aeabi_ui2d>
 8003a96:	2301      	movs	r3, #1
 8003a98:	461c      	mov	r4, r3
 8003a9a:	a307      	add	r3, pc, #28	; (adr r3, 8003ab8 <SpiritRadioInit+0x310>)
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f7fd f830 	bl	8000b04 <__aeabi_dcmpge>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <SpiritRadioInit+0x306>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	461c      	mov	r4, r3
 8003aae:	b2e3      	uxtb	r3, r4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f879 	bl	8003ba8 <SpiritRadioSetXtalFlag>
 8003ab6:	e028      	b.n	8003b0a <SpiritRadioInit+0x362>
 8003ab8:	00000000 	.word	0x00000000
 8003abc:	4177d784 	.word	0x4177d784
 8003ac0:	49742400 	.word	0x49742400
 8003ac4:	20000700 	.word	0x20000700
 8003ac8:	200005b8 	.word	0x200005b8
 8003acc:	01c9c37f 	.word	0x01c9c37f
 8003ad0:	48800000 	.word	0x48800000
 8003ad4:	49afd520 	.word	0x49afd520
 8003ad8:	42800000 	.word	0x42800000
 8003adc:	01c9c380 	.word	0x01c9c380
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <SpiritRadioInit+0x3f8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fc fd0d 	bl	8000504 <__aeabi_ui2d>
 8003aea:	2301      	movs	r3, #1
 8003aec:	461c      	mov	r4, r3
 8003aee:	a32a      	add	r3, pc, #168	; (adr r3, 8003b98 <SpiritRadioInit+0x3f0>)
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f7fd f806 	bl	8000b04 <__aeabi_dcmpge>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <SpiritRadioInit+0x35a>
 8003afe:	2300      	movs	r3, #0
 8003b00:	461c      	mov	r4, r3
 8003b02:	b2e3      	uxtb	r3, r4
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f84f 	bl	8003ba8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2101      	movs	r1, #1
 8003b12:	206c      	movs	r0, #108	; 0x6c
 8003b14:	f001 fe06 	bl	8005724 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2104      	movs	r1, #4
 8003b20:	200c      	movs	r0, #12
 8003b22:	f001 fdff 	bl	8005724 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8003b26:	f107 0318 	add.w	r3, r7, #24
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	201a      	movs	r0, #26
 8003b30:	f001 fdf8 	bl	8005724 <RadioSpiWriteRegisters>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <SpiritRadioInit+0x3fc>)
 8003b38:	b212      	sxth	r2, r2
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	7019      	strb	r1, [r3, #0]
 8003b3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b42:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8003b44:	2001      	movs	r0, #1
 8003b46:	f000 ff1d 	bl	8004984 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8003b4e:	23e3      	movs	r3, #227	; 0xe3
 8003b50:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8003b52:	f107 031c 	add.w	r3, r7, #28
 8003b56:	461a      	mov	r2, r3
 8003b58:	2102      	movs	r1, #2
 8003b5a:	2099      	movs	r0, #153	; 0x99
 8003b5c:	f001 fde2 	bl	8005724 <RadioSpiWriteRegisters>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <SpiritRadioInit+0x3fc>)
 8003b64:	b212      	sxth	r2, r2
 8003b66:	4611      	mov	r1, r2
 8003b68:	7019      	strb	r1, [r3, #0]
 8003b6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b6e:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8003b70:	2322      	movs	r3, #34	; 0x22
 8003b72:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8003b74:	f107 031c 	add.w	r3, r7, #28
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	20bc      	movs	r0, #188	; 0xbc
 8003b7e:	f001 fdd1 	bl	8005724 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9ac 	bl	8003ee4 <SpiritRadioSetFrequencyBase>
 8003b8c:	4603      	mov	r3, r0
  
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3734      	adds	r7, #52	; 0x34
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd90      	pop	{r4, r7, pc}
 8003b96:	bf00      	nop
 8003b98:	00000000 	.word	0x00000000
 8003b9c:	4177d784 	.word	0x4177d784
 8003ba0:	200005b8 	.word	0x200005b8
 8003ba4:	20000700 	.word	0x20000700

08003ba8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003bb6:	f107 030f 	add.w	r3, r7, #15
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f001 fe5c 	bl	800587c <RadioSpiReadRegisters>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <SpiritRadioSetXtalFlag+0x70>)
 8003bc8:	b212      	sxth	r2, r2
 8003bca:	4611      	mov	r1, r2
 8003bcc:	7019      	strb	r1, [r3, #0]
 8003bce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bd2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	73fb      	strb	r3, [r7, #15]
 8003be4:	e004      	b.n	8003bf0 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003bf0:	f107 030f 	add.w	r3, r7, #15
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f001 fd93 	bl	8005724 <RadioSpiWriteRegisters>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <SpiritRadioSetXtalFlag+0x70>)
 8003c02:	b212      	sxth	r2, r2
 8003c04:	4611      	mov	r1, r2
 8003c06:	7019      	strb	r1, [r3, #0]
 8003c08:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c0c:	705a      	strb	r2, [r3, #1]
  
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000700 	.word	0x20000700

08003c1c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3a      	ldr	r2, [pc, #232]	; (8003d1c <SpiritRadioSearchWCP+0x100>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d906      	bls.n	8003c46 <SpiritRadioSearchWCP+0x2a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a39      	ldr	r2, [pc, #228]	; (8003d20 <SpiritRadioSearchWCP+0x104>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d802      	bhi.n	8003c46 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003c40:	2306      	movs	r3, #6
 8003c42:	73bb      	strb	r3, [r7, #14]
 8003c44:	e01f      	b.n	8003c86 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a36      	ldr	r2, [pc, #216]	; (8003d24 <SpiritRadioSearchWCP+0x108>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d906      	bls.n	8003c5c <SpiritRadioSearchWCP+0x40>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a35      	ldr	r2, [pc, #212]	; (8003d28 <SpiritRadioSearchWCP+0x10c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d802      	bhi.n	8003c5c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8003c56:	230c      	movs	r3, #12
 8003c58:	73bb      	strb	r3, [r7, #14]
 8003c5a:	e014      	b.n	8003c86 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a33      	ldr	r2, [pc, #204]	; (8003d2c <SpiritRadioSearchWCP+0x110>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d906      	bls.n	8003c72 <SpiritRadioSearchWCP+0x56>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a32      	ldr	r2, [pc, #200]	; (8003d30 <SpiritRadioSearchWCP+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d802      	bhi.n	8003c72 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	73bb      	strb	r3, [r7, #14]
 8003c70:	e009      	b.n	8003c86 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <SpiritRadioSearchWCP+0x118>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d905      	bls.n	8003c86 <SpiritRadioSearchWCP+0x6a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2e      	ldr	r2, [pc, #184]	; (8003d38 <SpiritRadioSearchWCP+0x11c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d801      	bhi.n	8003c86 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8003c82:	2320      	movs	r3, #32
 8003c84:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <SpiritRadioSearchWCP+0x120>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	7bba      	ldrb	r2, [r7, #14]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8003c98:	f241 631f 	movw	r3, #5663	; 0x161f
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca2:	fb03 f302 	mul.w	r3, r3, r2
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8003cac:	230f      	movs	r3, #15
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e023      	b.n	8003cfa <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e005      	b.n	8003cc4 <SpiritRadioSearchWCP+0xa8>
 8003cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc8:	2b0e      	cmp	r3, #14
 8003cca:	dc0c      	bgt.n	8003ce6 <SpiritRadioSearchWCP+0xca>
 8003ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <SpiritRadioSearchWCP+0x124>)
 8003cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cdc:	fb03 f302 	mul.w	r3, r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d8e8      	bhi.n	8003cb8 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8003ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <SpiritRadioSearchWCP+0xde>
      i--;
 8003cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfe:	425a      	negs	r2, r3
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	f002 0207 	and.w	r2, r2, #7
 8003d08:	bf58      	it	pl
 8003d0a:	4253      	negpl	r3, r2
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
  
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	2e5f567f 	.word	0x2e5f567f
 8003d20:	390c2fe0 	.word	0x390c2fe0
 8003d24:	1701e47f 	.word	0x1701e47f
 8003d28:	1c146a60 	.word	0x1c146a60
 8003d2c:	11d260bf 	.word	0x11d260bf
 8003d30:	14ced7e0 	.word	0x14ced7e0
 8003d34:	08e18f3f 	.word	0x08e18f3f
 8003d38:	0a6fd060 	.word	0x0a6fd060
 8003d3c:	10624dd3 	.word	0x10624dd3
 8003d40:	0800b338 	.word	0x0800b338

08003d44 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2104      	movs	r1, #4
 8003d50:	2008      	movs	r0, #8
 8003d52:	f001 fd93 	bl	800587c <RadioSpiReadRegisters>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <SpiritRadioGetSynthWord+0x48>)
 8003d5a:	b212      	sxth	r2, r2
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	7019      	strb	r1, [r3, #0]
 8003d60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d64:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003d66:	793b      	ldrb	r3, [r7, #4]
 8003d68:	055b      	lsls	r3, r3, #21
 8003d6a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8003d6e:	797b      	ldrb	r3, [r7, #5]
 8003d70:	035b      	lsls	r3, r3, #13
 8003d72:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003d74:	79bb      	ldrb	r3, [r7, #6]
 8003d76:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003d78:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003d7a:	79fa      	ldrb	r2, [r7, #7]
 8003d7c:	08d2      	lsrs	r2, r2, #3
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	4413      	add	r3, r2
  
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000700 	.word	0x20000700

08003d90 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	200b      	movs	r0, #11
 8003d9e:	f001 fd6d 	bl	800587c <RadioSpiReadRegisters>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <SpiritRadioGetBand+0x58>)
 8003da6:	b212      	sxth	r2, r2
 8003da8:	4611      	mov	r1, r2
 8003daa:	7019      	strb	r1, [r3, #0]
 8003dac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003db0:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e00e      	b.n	8003dde <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d101      	bne.n	8003dce <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e007      	b.n	8003dde <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d101      	bne.n	8003ddc <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e000      	b.n	8003dde <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003ddc:	2303      	movs	r3, #3
  }
  
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000700 	.word	0x20000700

08003dec <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8003df2:	1dfb      	adds	r3, r7, #7
 8003df4:	461a      	mov	r2, r3
 8003df6:	2101      	movs	r1, #1
 8003df8:	206c      	movs	r0, #108	; 0x6c
 8003dfa:	f001 fd3f 	bl	800587c <RadioSpiReadRegisters>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <SpiritRadioGetChannel+0x2c>)
 8003e02:	b212      	sxth	r2, r2
 8003e04:	4611      	mov	r1, r2
 8003e06:	7019      	strb	r1, [r3, #0]
 8003e08:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e0c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000700 	.word	0x20000700

08003e1c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	461a      	mov	r2, r3
 8003e26:	2101      	movs	r1, #1
 8003e28:	200c      	movs	r0, #12
 8003e2a:	f001 fd27 	bl	800587c <RadioSpiReadRegisters>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <SpiritRadioGetChannelSpace+0x38>)
 8003e32:	b212      	sxth	r2, r2
 8003e34:	4611      	mov	r1, r2
 8003e36:	7019      	strb	r1, [r3, #0]
 8003e38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e3c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <SpiritRadioGetChannelSpace+0x3c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	fb03 f302 	mul.w	r3, r3, r2
 8003e4a:	0bdb      	lsrs	r3, r3, #15
  
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000700 	.word	0x20000700
 8003e58:	200005b8 	.word	0x200005b8

08003e5c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	461a      	mov	r2, r3
 8003e66:	2102      	movs	r1, #2
 8003e68:	200e      	movs	r0, #14
 8003e6a:	f001 fd07 	bl	800587c <RadioSpiReadRegisters>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <SpiritRadioGetFrequencyOffset+0x80>)
 8003e72:	b212      	sxth	r2, r2
 8003e74:	4611      	mov	r1, r2
 8003e76:	7019      	strb	r1, [r3, #0]
 8003e78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e7c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8003e7e:	793b      	ldrb	r3, [r7, #4]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	797b      	ldrb	r3, [r7, #5]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8003e9a:	887b      	ldrh	r3, [r7, #2]
 8003e9c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003ea0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	807b      	strh	r3, [r7, #2]
 8003ea8:	e004      	b.n	8003eb4 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003eb4:	1cbb      	adds	r3, r7, #2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ebe:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <SpiritRadioGetFrequencyOffset+0x84>)
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da03      	bge.n	8003ed2 <SpiritRadioGetFrequencyOffset+0x76>
 8003eca:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003ece:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ed2:	149b      	asrs	r3, r3, #18
  
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000700 	.word	0x20000700
 8003ee0:	200005b8 	.word	0x200005b8

08003ee4 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ee8:	b08a      	sub	sp, #40	; 0x28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a79      	ldr	r2, [pc, #484]	; (80040dc <SpiritRadioSetFrequencyBase+0x1f8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d907      	bls.n	8003f0c <SpiritRadioSetFrequencyBase+0x28>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a78      	ldr	r2, [pc, #480]	; (80040e0 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d803      	bhi.n	8003f0c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f0a:	e022      	b.n	8003f52 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	; (80040e4 <SpiritRadioSetFrequencyBase+0x200>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d907      	bls.n	8003f24 <SpiritRadioSetFrequencyBase+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a74      	ldr	r2, [pc, #464]	; (80040e8 <SpiritRadioSetFrequencyBase+0x204>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d803      	bhi.n	8003f24 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f22:	e016      	b.n	8003f52 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a71      	ldr	r2, [pc, #452]	; (80040ec <SpiritRadioSetFrequencyBase+0x208>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d907      	bls.n	8003f3c <SpiritRadioSetFrequencyBase+0x58>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a70      	ldr	r2, [pc, #448]	; (80040f0 <SpiritRadioSetFrequencyBase+0x20c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d803      	bhi.n	8003f3c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f3a:	e00a      	b.n	8003f52 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a6d      	ldr	r2, [pc, #436]	; (80040f4 <SpiritRadioSetFrequencyBase+0x210>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d906      	bls.n	8003f52 <SpiritRadioSetFrequencyBase+0x6e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a6c      	ldr	r2, [pc, #432]	; (80040f8 <SpiritRadioSetFrequencyBase+0x214>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d802      	bhi.n	8003f52 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003f52:	f7ff ff83 	bl	8003e5c <SpiritRadioGetFrequencyOffset>
 8003f56:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003f58:	f7ff ff60 	bl	8003e1c <SpiritRadioGetChannelSpace>
 8003f5c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8003f5e:	f7ff ff45 	bl	8003dec <SpiritRadioGetChannel>
 8003f62:	4603      	mov	r3, r0
 8003f64:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003f66:	6a3a      	ldr	r2, [r7, #32]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	7efb      	ldrb	r3, [r7, #27]
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003f78:	f000 fdc6 	bl	8004b08 <SpiritRadioGetRefDiv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	3301      	adds	r3, #1
 8003f80:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d839      	bhi.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <SpiritRadioSetFrequencyBase+0xac>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003fd1 	.word	0x08003fd1
 8003f98:	08003fb9 	.word	0x08003fb9
 8003f9c:	08003fa1 	.word	0x08003fa1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4a56      	ldr	r2, [pc, #344]	; (80040fc <SpiritRadioSetFrequencyBase+0x218>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d803      	bhi.n	8003fb0 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fe fcfd 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003fae:	e026      	b.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f7fe fcf9 	bl	80029a8 <SpiritCalibrationSelectVco>
    break;
 8003fb6:	e022      	b.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4a51      	ldr	r2, [pc, #324]	; (8004100 <SpiritRadioSetFrequencyBase+0x21c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d803      	bhi.n	8003fc8 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f7fe fcf1 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003fc6:	e01a      	b.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f7fe fced 	bl	80029a8 <SpiritCalibrationSelectVco>
    break;
 8003fce:	e016      	b.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4a4c      	ldr	r2, [pc, #304]	; (8004104 <SpiritRadioSetFrequencyBase+0x220>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d803      	bhi.n	8003fe0 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7fe fce5 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003fde:	e00e      	b.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f7fe fce1 	bl	80029a8 <SpiritCalibrationSelectVco>
    break;
 8003fe6:	e00a      	b.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4a47      	ldr	r2, [pc, #284]	; (8004108 <SpiritRadioSetFrequencyBase+0x224>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d803      	bhi.n	8003ff8 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f7fe fcd9 	bl	80029a8 <SpiritCalibrationSelectVco>
 8003ff6:	e002      	b.n	8003ffe <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fe fcd5 	bl	80029a8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7ff fe0c 	bl	8003c1c <SpiritRadioSearchWCP>
 8004004:	4603      	mov	r3, r0
 8004006:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800400c:	4a3f      	ldr	r2, [pc, #252]	; (800410c <SpiritRadioSetFrequencyBase+0x228>)
 800400e:	5cd3      	ldrb	r3, [r2, r3]
 8004010:	461a      	mov	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	fb03 f302 	mul.w	r3, r3, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fa73 	bl	8000504 <__aeabi_ui2d>
 800401e:	4604      	mov	r4, r0
 8004020:	460d      	mov	r5, r1
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	049b      	lsls	r3, r3, #18
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc fa7c 	bl	8000524 <__aeabi_i2d>
 800402c:	4680      	mov	r8, r0
 800402e:	4689      	mov	r9, r1
 8004030:	4b37      	ldr	r3, [pc, #220]	; (8004110 <SpiritRadioSetFrequencyBase+0x22c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc fa65 	bl	8000504 <__aeabi_ui2d>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4640      	mov	r0, r8
 8004040:	4649      	mov	r1, r9
 8004042:	f7fc fc03 	bl	800084c <__aeabi_ddiv>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4620      	mov	r0, r4
 800404c:	4629      	mov	r1, r5
 800404e:	f7fc fad3 	bl	80005f8 <__aeabi_dmul>
 8004052:	4603      	mov	r3, r0
 8004054:	460c      	mov	r4, r1
 8004056:	4618      	mov	r0, r3
 8004058:	4621      	mov	r1, r4
 800405a:	f7fc fd67 	bl	8000b2c <__aeabi_d2uiz>
 800405e:	4603      	mov	r3, r0
 8004060:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	0d5b      	lsrs	r3, r3, #21
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	b2da      	uxtb	r2, r3
 800406e:	7cbb      	ldrb	r3, [r7, #18]
 8004070:	015b      	lsls	r3, r3, #5
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4313      	orrs	r3, r2
 8004076:	b2db      	uxtb	r3, r3
 8004078:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	0b5b      	lsrs	r3, r3, #13
 800407e:	b2db      	uxtb	r3, r3
 8004080:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	b2db      	uxtb	r3, r3
 8004088:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	b2da      	uxtb	r2, r3
 8004092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004096:	491f      	ldr	r1, [pc, #124]	; (8004114 <SpiritRadioSetFrequencyBase+0x230>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	4313      	orrs	r3, r2
 800409c:	b2db      	uxtb	r3, r3
 800409e:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	461a      	mov	r2, r3
 80040a6:	2104      	movs	r1, #4
 80040a8:	2008      	movs	r0, #8
 80040aa:	f001 fb3b 	bl	8005724 <RadioSpiWriteRegisters>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <SpiritRadioSetFrequencyBase+0x234>)
 80040b2:	b212      	sxth	r2, r2
 80040b4:	4611      	mov	r1, r2
 80040b6:	7019      	strb	r1, [r3, #0]
 80040b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040bc:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <SpiritRadioSetFrequencyBase+0x238>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d103      	bne.n	80040ce <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80040c6:	f7fe ff97 	bl	8002ff8 <SpiritManagementWaVcoCalibration>
 80040ca:	4603      	mov	r3, r0
 80040cc:	e000      	b.n	80040d0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040da:	bf00      	nop
 80040dc:	2e5f567f 	.word	0x2e5f567f
 80040e0:	390c2fe0 	.word	0x390c2fe0
 80040e4:	1701e47f 	.word	0x1701e47f
 80040e8:	1c146a60 	.word	0x1c146a60
 80040ec:	11d260bf 	.word	0x11d260bf
 80040f0:	14ced7e0 	.word	0x14ced7e0
 80040f4:	08e18f3f 	.word	0x08e18f3f
 80040f8:	0a6fd060 	.word	0x0a6fd060
 80040fc:	099cf4e1 	.word	0x099cf4e1
 8004100:	1339e9c3 	.word	0x1339e9c3
 8004104:	19a28d05 	.word	0x19a28d05
 8004108:	33451a0a 	.word	0x33451a0a
 800410c:	0800b27c 	.word	0x0800b27c
 8004110:	200005b8 	.word	0x200005b8
 8004114:	0800b280 	.word	0x0800b280
 8004118:	20000700 	.word	0x20000700
 800411c:	2000024d 	.word	0x2000024d

08004120 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8004120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8004128:	f7ff fe0c 	bl	8003d44 <SpiritRadioGetSynthWord>
 800412c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800412e:	f7ff fe2f 	bl	8003d90 <SpiritRadioGetBand>
 8004132:	4603      	mov	r3, r0
 8004134:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8004136:	f000 fce7 	bl	8004b08 <SpiritRadioGetRefDiv>
 800413a:	4603      	mov	r3, r0
 800413c:	3301      	adds	r3, #1
 800413e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fc f9df 	bl	8000504 <__aeabi_ui2d>
 8004146:	4604      	mov	r4, r0
 8004148:	460d      	mov	r5, r1
 800414a:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <SpiritRadioGetFrequencyBase+0x90>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc f9d8 	bl	8000504 <__aeabi_ui2d>
 8004154:	4680      	mov	r8, r0
 8004156:	4689      	mov	r9, r1
 8004158:	78bb      	ldrb	r3, [r7, #2]
 800415a:	049b      	lsls	r3, r3, #18
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	4915      	ldr	r1, [pc, #84]	; (80041b4 <SpiritRadioGetFrequencyBase+0x94>)
 8004160:	5c8a      	ldrb	r2, [r1, r2]
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc f9dc 	bl	8000524 <__aeabi_i2d>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4640      	mov	r0, r8
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc fb6a 	bl	800084c <__aeabi_ddiv>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4620      	mov	r0, r4
 800417e:	4629      	mov	r1, r5
 8004180:	f7fc fa3a 	bl	80005f8 <__aeabi_dmul>
 8004184:	4603      	mov	r3, r0
 8004186:	460c      	mov	r4, r1
 8004188:	ec44 3b17 	vmov	d7, r3, r4
 800418c:	eeb0 0a47 	vmov.f32	s0, s14
 8004190:	eef0 0a67 	vmov.f32	s1, s15
 8004194:	f006 fdae 	bl	800acf4 <round>
 8004198:	ec54 3b10 	vmov	r3, r4, d0
 800419c:	4618      	mov	r0, r3
 800419e:	4621      	mov	r1, r4
 80041a0:	f7fc fcc4 	bl	8000b2c <__aeabi_d2uiz>
 80041a4:	4603      	mov	r3, r0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041b0:	200005b8 	.word	0x200005b8
 80041b4:	0800b27c 	.word	0x0800b27c

080041b8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80041c8:	230f      	movs	r3, #15
 80041ca:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80041d0:	f000 fcec 	bl	8004bac <SpiritRadioGetDigDiv>
 80041d4:	4603      	mov	r3, r0
 80041d6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80041d8:	e015      	b.n	8004206 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80041da:	4b50      	ldr	r3, [pc, #320]	; (800431c <SpiritRadioSearchDatarateME+0x164>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041e2:	f1c3 0114 	rsb	r1, r3, #20
 80041e6:	7ebb      	ldrb	r3, [r7, #26]
 80041e8:	440b      	add	r3, r1
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d302      	bcc.n	80041fa <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	763b      	strb	r3, [r7, #24]
 80041f8:	e005      	b.n	8004206 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80041fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8004206:	7e3b      	ldrb	r3, [r7, #24]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <SpiritRadioSearchDatarateME+0x5e>
 800420e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004212:	2b00      	cmp	r3, #0
 8004214:	dae1      	bge.n	80041da <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8004216:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da01      	bge.n	8004222 <SpiritRadioSearchDatarateME+0x6a>
 800421e:	2300      	movs	r3, #0
 8004220:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8004222:	7ffa      	ldrb	r2, [r7, #31]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8004228:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800422c:	f1c3 0317 	rsb	r3, r3, #23
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	409a      	lsls	r2, r3
 8004234:	4b39      	ldr	r3, [pc, #228]	; (800431c <SpiritRadioSearchDatarateME+0x164>)
 8004236:	6819      	ldr	r1, [r3, #0]
 8004238:	7ebb      	ldrb	r3, [r7, #26]
 800423a:	3305      	adds	r3, #5
 800423c:	fa21 f303 	lsr.w	r3, r1, r3
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8004246:	2300      	movs	r3, #0
 8004248:	77bb      	strb	r3, [r7, #30]
 800424a:	e033      	b.n	80042b4 <SpiritRadioSearchDatarateME+0xfc>
  {
    if((cMantissaTmp+j-1))
 800424c:	7e7a      	ldrb	r2, [r7, #25]
 800424e:	7fbb      	ldrb	r3, [r7, #30]
 8004250:	4413      	add	r3, r2
 8004252:	2b01      	cmp	r3, #1
 8004254:	d022      	beq.n	800429c <SpiritRadioSearchDatarateME+0xe4>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	b29a      	uxth	r2, r3
 800425a:	7e7b      	ldrb	r3, [r7, #25]
 800425c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8004260:	7fbb      	ldrb	r3, [r7, #30]
 8004262:	440b      	add	r3, r1
 8004264:	3b01      	subs	r3, #1
 8004266:	4618      	mov	r0, r3
 8004268:	4b2c      	ldr	r3, [pc, #176]	; (800431c <SpiritRadioSearchDatarateME+0x164>)
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	7ebb      	ldrb	r3, [r7, #26]
 800426e:	3305      	adds	r3, #5
 8004270:	fa21 f303 	lsr.w	r3, r1, r3
 8004274:	fb03 f100 	mul.w	r1, r3, r0
 8004278:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800427c:	f1c3 0317 	rsb	r3, r3, #23
 8004280:	fa21 f303 	lsr.w	r3, r1, r3
 8004284:	b29b      	uxth	r3, r3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	b29a      	uxth	r2, r3
 800428a:	7fbb      	ldrb	r3, [r7, #30]
 800428c:	b212      	sxth	r2, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	f107 0120 	add.w	r1, r7, #32
 8004294:	440b      	add	r3, r1
 8004296:	f823 2c10 	strh.w	r2, [r3, #-16]
 800429a:	e008      	b.n	80042ae <SpiritRadioSearchDatarateME+0xf6>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800429c:	7fbb      	ldrb	r3, [r7, #30]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	f107 0220 	add.w	r2, r7, #32
 80042a4:	4413      	add	r3, r2
 80042a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80042aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80042ae:	7fbb      	ldrb	r3, [r7, #30]
 80042b0:	3301      	adds	r3, #1
 80042b2:	77bb      	strb	r3, [r7, #30]
 80042b4:	7fbb      	ldrb	r3, [r7, #30]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d9c8      	bls.n	800424c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80042ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042be:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	76fb      	strb	r3, [r7, #27]
 80042c4:	e023      	b.n	800430e <SpiritRadioSearchDatarateME+0x156>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80042c6:	7efb      	ldrb	r3, [r7, #27]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	f107 0220 	add.w	r2, r7, #32
 80042ce:	4413      	add	r3, r2
 80042d0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80042d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80042d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80042dc:	8bbb      	ldrh	r3, [r7, #28]
 80042de:	429a      	cmp	r2, r3
 80042e0:	da12      	bge.n	8004308 <SpiritRadioSearchDatarateME+0x150>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80042e2:	7efb      	ldrb	r3, [r7, #27]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	f107 0220 	add.w	r2, r7, #32
 80042ea:	4413      	add	r3, r2
 80042ec:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bfb8      	it	lt
 80042f4:	425b      	neglt	r3, r3
 80042f6:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80042f8:	7e7a      	ldrb	r2, [r7, #25]
 80042fa:	7efb      	ldrb	r3, [r7, #27]
 80042fc:	4413      	add	r3, r2
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8004308:	7efb      	ldrb	r3, [r7, #27]
 800430a:	3301      	adds	r3, #1
 800430c:	76fb      	strb	r3, [r7, #27]
 800430e:	7efb      	ldrb	r3, [r7, #27]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d9d8      	bls.n	80042c6 <SpiritRadioSearchDatarateME+0x10e>
    }
  }
  
}
 8004314:	bf00      	nop
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200005b8 	.word	0x200005b8

08004320 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8004332:	f000 fc3b 	bl	8004bac <SpiritRadioGetDigDiv>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 800433c:	2302      	movs	r3, #2
 800433e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004342:	e002      	b.n	800434a <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800434a:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <SpiritRadioSearchChannelBwME+0x1c4>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	4a64      	ldr	r2, [pc, #400]	; (80044e8 <SpiritRadioSearchChannelBwME+0x1c8>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004366:	e006      	b.n	8004376 <SpiritRadioSearchChannelBwME+0x56>
 8004368:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800436c:	b2db      	uxtb	r3, r3
 800436e:	3301      	adds	r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004376:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800437a:	2b59      	cmp	r3, #89	; 0x59
 800437c:	dc0f      	bgt.n	800439e <SpiritRadioSearchChannelBwME+0x7e>
 800437e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004382:	4a5a      	ldr	r2, [pc, #360]	; (80044ec <SpiritRadioSearchChannelBwME+0x1cc>)
 8004384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004388:	461a      	mov	r2, r3
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fb03 f302 	mul.w	r3, r3, r2
 8004390:	4a57      	ldr	r2, [pc, #348]	; (80044f0 <SpiritRadioSearchChannelBwME+0x1d0>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	0adb      	lsrs	r3, r3, #11
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	429a      	cmp	r2, r3
 800439c:	d3e4      	bcc.n	8004368 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800439e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d07d      	beq.n	80044a2 <SpiritRadioSearchChannelBwME+0x182>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80043a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043aa:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80043ac:	2300      	movs	r3, #0
 80043ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80043b2:	e03e      	b.n	8004432 <SpiritRadioSearchChannelBwME+0x112>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80043b4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80043b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043bc:	4413      	add	r3, r2
 80043be:	3b01      	subs	r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	da07      	bge.n	80043d4 <SpiritRadioSearchChannelBwME+0xb4>
 80043c4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80043c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043cc:	4413      	add	r3, r2
 80043ce:	3b01      	subs	r3, #1
 80043d0:	2b59      	cmp	r3, #89	; 0x59
 80043d2:	dc1f      	bgt.n	8004414 <SpiritRadioSearchChannelBwME+0xf4>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	f997 101b 	ldrsb.w	r1, [r7, #27]
 80043dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043e0:	440b      	add	r3, r1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	4941      	ldr	r1, [pc, #260]	; (80044ec <SpiritRadioSearchChannelBwME+0x1cc>)
 80043e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80043ea:	4619      	mov	r1, r3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	fb03 f301 	mul.w	r3, r3, r1
 80043f2:	493f      	ldr	r1, [pc, #252]	; (80044f0 <SpiritRadioSearchChannelBwME+0x1d0>)
 80043f4:	fba1 1303 	umull	r1, r3, r1, r3
 80043f8:	0adb      	lsrs	r3, r3, #11
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	b29a      	uxth	r2, r3
 8004400:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004404:	b212      	sxth	r2, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800440c:	440b      	add	r3, r1
 800440e:	f823 2c14 	strh.w	r2, [r3, #-20]
 8004412:	e009      	b.n	8004428 <SpiritRadioSearchChannelBwME+0x108>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8004414:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800441e:	4413      	add	r3, r2
 8004420:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004424:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8004428:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800442c:	3301      	adds	r3, #1
 800442e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004432:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004436:	2b02      	cmp	r3, #2
 8004438:	d9bc      	bls.n	80043b4 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 800443a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800443e:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004446:	e028      	b.n	800449a <SpiritRadioSearchChannelBwME+0x17a>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8004448:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004452:	4413      	add	r3, r2
 8004454:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8004458:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800445c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004460:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004462:	429a      	cmp	r2, r3
 8004464:	da14      	bge.n	8004490 <SpiritRadioSearchChannelBwME+0x170>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8004466:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004470:	4413      	add	r3, r2
 8004472:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfb8      	it	lt
 800447a:	425b      	neglt	r3, r3
 800447c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800447e:	7efa      	ldrb	r2, [r7, #27]
 8004480:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004484:	4413      	add	r3, r2
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8004490:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004494:	3301      	adds	r3, #1
 8004496:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800449a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d9d2      	bls.n	8004448 <SpiritRadioSearchChannelBwME+0x128>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80044a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044a6:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <SpiritRadioSearchChannelBwME+0x1d4>)
 80044a8:	fb82 1203 	smull	r1, r2, r2, r3
 80044ac:	1052      	asrs	r2, r2, #1
 80044ae:	17db      	asrs	r3, r3, #31
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80044ba:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <SpiritRadioSearchChannelBwME+0x1d4>)
 80044c0:	fb83 1302 	smull	r1, r3, r3, r2
 80044c4:	1059      	asrs	r1, r3, #1
 80044c6:	17d3      	asrs	r3, r2, #31
 80044c8:	1ac9      	subs	r1, r1, r3
 80044ca:	460b      	mov	r3, r1
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	440b      	add	r3, r1
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	701a      	strb	r2, [r3, #0]
  
}
 80044da:	bf00      	nop
 80044dc:	3728      	adds	r7, #40	; 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200005b8 	.word	0x200005b8
 80044e8:	51eb851f 	.word	0x51eb851f
 80044ec:	0800b284 	.word	0x0800b284
 80044f0:	c9a633fd 	.word	0xc9a633fd
 80044f4:	38e38e39 	.word	0x38e38e39

080044f8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80044f8:	b5b0      	push	{r4, r5, r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8004508:	4b53      	ldr	r3, [pc, #332]	; (8004658 <SpiritRadioSearchFreqDevME+0x160>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004514:	eddf 6a51 	vldr	s13, [pc, #324]	; 800465c <SpiritRadioSearchFreqDevME+0x164>
 8004518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800451c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8004520:	2300      	movs	r3, #0
 8004522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004526:	e028      	b.n	800457a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8004528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800452c:	2201      	movs	r2, #1
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb fff6 	bl	8000524 <__aeabi_i2d>
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	4b48      	ldr	r3, [pc, #288]	; (8004660 <SpiritRadioSearchFreqDevME+0x168>)
 800453e:	f7fc f85b 	bl	80005f8 <__aeabi_dmul>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	4618      	mov	r0, r3
 8004548:	4621      	mov	r1, r4
 800454a:	f7fc faef 	bl	8000b2c <__aeabi_d2uiz>
 800454e:	ee07 0a90 	vmov	s15, r0
 8004552:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004556:	edd7 7a06 	vldr	s15, [r7, #24]
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004562:	ee17 3a90 	vmov	r3, s15
 8004566:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	429a      	cmp	r2, r3
 800456e:	d309      	bcc.n	8004584 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8004570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004574:	3301      	adds	r3, #1
 8004576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800457a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800457e:	2b09      	cmp	r3, #9
 8004580:	d9d2      	bls.n	8004528 <SpiritRadioSearchFreqDevME+0x30>
 8004582:	e000      	b.n	8004586 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8004584:	bf00      	nop
  }
  (*pcE) = i;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800458c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800458e:	2300      	movs	r3, #0
 8004590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004594:	e043      	b.n	800461e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800459a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fb ffc0 	bl	8000524 <__aeabi_i2d>
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <SpiritRadioSearchFreqDevME+0x16c>)
 80045aa:	f7fb fe6f 	bl	800028c <__adddf3>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	4618      	mov	r0, r3
 80045b4:	4621      	mov	r1, r4
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045be:	f7fc f945 	bl	800084c <__aeabi_ddiv>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	4625      	mov	r5, r4
 80045c8:	461c      	mov	r4, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	2301      	movs	r3, #1
 80045d2:	4093      	lsls	r3, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fb ffa5 	bl	8000524 <__aeabi_i2d>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4620      	mov	r0, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	f7fc f809 	bl	80005f8 <__aeabi_dmul>
 80045e6:	4603      	mov	r3, r0
 80045e8:	460c      	mov	r4, r1
 80045ea:	4618      	mov	r0, r3
 80045ec:	4621      	mov	r1, r4
 80045ee:	f7fc fa9d 	bl	8000b2c <__aeabi_d2uiz>
 80045f2:	ee07 0a90 	vmov	s15, r0
 80045f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004606:	ee17 3a90 	vmov	r3, s15
 800460a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	429a      	cmp	r2, r3
 8004612:	d309      	bcc.n	8004628 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8004614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004618:	3301      	adds	r3, #1
 800461a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800461e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004622:	2b07      	cmp	r3, #7
 8004624:	d9b7      	bls.n	8004596 <SpiritRadioSearchFreqDevME+0x9e>
 8004626:	e000      	b.n	800462a <SpiritRadioSearchFreqDevME+0x132>
      break;
 8004628:	bf00      	nop
  }
  
  (*pcM)=i;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004630:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	69f9      	ldr	r1, [r7, #28]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1acb      	subs	r3, r1, r3
 800463e:	429a      	cmp	r2, r3
 8004640:	d205      	bcs.n	800464e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	3b01      	subs	r3, #1
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	701a      	strb	r2, [r3, #0]
  
}
 800464e:	bf00      	nop
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bdb0      	pop	{r4, r5, r7, pc}
 8004656:	bf00      	nop
 8004658:	200005b8 	.word	0x200005b8
 800465c:	48800000 	.word	0x48800000
 8004660:	401e0000 	.word	0x401e0000
 8004664:	40200000 	.word	0x40200000

08004668 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i;
  uint8_t j=0;
 8004674:	2300      	movs	r3, #0
 8004676:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a74      	ldr	r2, [pc, #464]	; (800484c <SpiritRadioGetdBm2Reg+0x1e4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d90c      	bls.n	800469a <SpiritRadioGetdBm2Reg+0x32>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a73      	ldr	r2, [pc, #460]	; (8004850 <SpiritRadioGetdBm2Reg+0x1e8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d808      	bhi.n	800469a <SpiritRadioGetdBm2Reg+0x32>
  {
    i=0;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a71      	ldr	r2, [pc, #452]	; (8004854 <SpiritRadioGetdBm2Reg+0x1ec>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d822      	bhi.n	80046da <SpiritRadioGetdBm2Reg+0x72>
 8004694:	2301      	movs	r3, #1
 8004696:	75fb      	strb	r3, [r7, #23]
 8004698:	e01f      	b.n	80046da <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a6e      	ldr	r2, [pc, #440]	; (8004858 <SpiritRadioGetdBm2Reg+0x1f0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d906      	bls.n	80046b0 <SpiritRadioGetdBm2Reg+0x48>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a6d      	ldr	r2, [pc, #436]	; (800485c <SpiritRadioGetdBm2Reg+0x1f4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d802      	bhi.n	80046b0 <SpiritRadioGetdBm2Reg+0x48>
  {
    i=2;
 80046aa:	2302      	movs	r3, #2
 80046ac:	75fb      	strb	r3, [r7, #23]
 80046ae:	e014      	b.n	80046da <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a6b      	ldr	r2, [pc, #428]	; (8004860 <SpiritRadioGetdBm2Reg+0x1f8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d906      	bls.n	80046c6 <SpiritRadioGetdBm2Reg+0x5e>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a6a      	ldr	r2, [pc, #424]	; (8004864 <SpiritRadioGetdBm2Reg+0x1fc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d802      	bhi.n	80046c6 <SpiritRadioGetdBm2Reg+0x5e>
  {
    i=3;
 80046c0:	2303      	movs	r3, #3
 80046c2:	75fb      	strb	r3, [r7, #23]
 80046c4:	e009      	b.n	80046da <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a67      	ldr	r2, [pc, #412]	; (8004868 <SpiritRadioGetdBm2Reg+0x200>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d905      	bls.n	80046da <SpiritRadioGetdBm2Reg+0x72>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a66      	ldr	r2, [pc, #408]	; (800486c <SpiritRadioGetdBm2Reg+0x204>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d801      	bhi.n	80046da <SpiritRadioGetdBm2Reg+0x72>
  {
    i=4;
 80046d6:	2304      	movs	r3, #4
 80046d8:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 80046da:	2301      	movs	r3, #1
 80046dc:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 80046de:	edd7 7a02 	vldr	s15, [r7, #8]
 80046e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	dd2f      	ble.n	800474c <SpiritRadioGetdBm2Reg+0xe4>
 80046ec:	7dfa      	ldrb	r2, [r7, #23]
 80046ee:	4960      	ldr	r1, [pc, #384]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 80046f0:	4613      	mov	r3, r2
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	4413      	add	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	440b      	add	r3, r1
 80046fa:	3308      	adds	r3, #8
 80046fc:	edd3 7a00 	vldr	s15, [r3]
 8004700:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8004704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004708:	7dfa      	ldrb	r2, [r7, #23]
 800470a:	4959      	ldr	r1, [pc, #356]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 800470c:	4613      	mov	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4413      	add	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	440b      	add	r3, r1
 8004716:	330c      	adds	r3, #12
 8004718:	ed93 6a00 	vldr	s12, [r3]
 800471c:	7dfa      	ldrb	r2, [r7, #23]
 800471e:	4954      	ldr	r1, [pc, #336]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	440b      	add	r3, r1
 800472a:	3308      	adds	r3, #8
 800472c:	edd3 6a00 	vldr	s13, [r3]
 8004730:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004738:	ed97 7a02 	vldr	s14, [r7, #8]
 800473c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004744:	dd02      	ble.n	800474c <SpiritRadioGetdBm2Reg+0xe4>
      j=0;
 8004746:	2300      	movs	r3, #0
 8004748:	75bb      	strb	r3, [r7, #22]
 800474a:	e035      	b.n	80047b8 <SpiritRadioGetdBm2Reg+0x150>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 800474c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	d82e      	bhi.n	80047b8 <SpiritRadioGetdBm2Reg+0x150>
 800475a:	7dfa      	ldrb	r2, [r7, #23]
 800475c:	4944      	ldr	r1, [pc, #272]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 800475e:	4613      	mov	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4413      	add	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	440b      	add	r3, r1
 8004768:	3308      	adds	r3, #8
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004874 <SpiritRadioGetdBm2Reg+0x20c>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	7dfa      	ldrb	r2, [r7, #23]
 8004778:	493d      	ldr	r1, [pc, #244]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	440b      	add	r3, r1
 8004784:	330c      	adds	r3, #12
 8004786:	ed93 6a00 	vldr	s12, [r3]
 800478a:	7dfa      	ldrb	r2, [r7, #23]
 800478c:	4938      	ldr	r1, [pc, #224]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	440b      	add	r3, r1
 8004798:	3308      	adds	r3, #8
 800479a:	edd3 6a00 	vldr	s13, [r3]
 800479e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80047a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80047aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b2:	d501      	bpl.n	80047b8 <SpiritRadioGetdBm2Reg+0x150>
      j=2;
 80047b4:	2302      	movs	r3, #2
 80047b6:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80047b8:	7dfa      	ldrb	r2, [r7, #23]
 80047ba:	7dbb      	ldrb	r3, [r7, #22]
 80047bc:	0059      	lsls	r1, r3, #1
 80047be:	482c      	ldr	r0, [pc, #176]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 80047c0:	4613      	mov	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4413      	add	r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	440b      	add	r3, r1
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4403      	add	r3, r0
 80047ce:	ed93 7a00 	vldr	s14, [r3]
 80047d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80047d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047da:	7dfa      	ldrb	r2, [r7, #23]
 80047dc:	7dbb      	ldrb	r3, [r7, #22]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	1c59      	adds	r1, r3, #1
 80047e2:	4823      	ldr	r0, [pc, #140]	; (8004870 <SpiritRadioGetdBm2Reg+0x208>)
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	440b      	add	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4403      	add	r3, r0
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047fa:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 80047fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	d503      	bpl.n	8004818 <SpiritRadioGetdBm2Reg+0x1b0>
    fReg=1;
 8004810:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	e00a      	b.n	800482e <SpiritRadioGetdBm2Reg+0x1c6>
  else if(fReg>90) 
 8004818:	edd7 7a04 	vldr	s15, [r7, #16]
 800481c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004878 <SpiritRadioGetdBm2Reg+0x210>
 8004820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	dd01      	ble.n	800482e <SpiritRadioGetdBm2Reg+0x1c6>
    fReg=90;
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <SpiritRadioGetdBm2Reg+0x214>)
 800482c:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 800482e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004836:	edc7 7a01 	vstr	s15, [r7, #4]
 800483a:	793b      	ldrb	r3, [r7, #4]
 800483c:	b2db      	uxtb	r3, r3
}
 800483e:	4618      	mov	r0, r3
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2e5f567f 	.word	0x2e5f567f
 8004850:	390c2fe0 	.word	0x390c2fe0
 8004854:	35a4e8ff 	.word	0x35a4e8ff
 8004858:	1701e47f 	.word	0x1701e47f
 800485c:	1c146a60 	.word	0x1c146a60
 8004860:	11d260bf 	.word	0x11d260bf
 8004864:	14ced7e0 	.word	0x14ced7e0
 8004868:	08e18f3f 	.word	0x08e18f3f
 800486c:	0a6fd060 	.word	0x0a6fd060
 8004870:	0800b358 	.word	0x0800b358
 8004874:	42200000 	.word	0x42200000
 8004878:	42b40000 	.word	0x42b40000
 800487c:	42b40000 	.word	0x42b40000

08004880 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	ed87 0a00 	vstr	s0, [r7]
 800488c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 800488e:	f7ff fc47 	bl	8004120 <SpiritRadioGetFrequencyBase>
 8004892:	4603      	mov	r3, r0
 8004894:	ed97 0a00 	vldr	s0, [r7]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fee5 	bl	8004668 <SpiritRadioGetdBm2Reg>
 800489e:	4603      	mov	r3, r0
 80048a0:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	f1c3 0317 	rsb	r3, r3, #23
 80048a8:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80048aa:	f107 020e 	add.w	r2, r7, #14
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2101      	movs	r1, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ff36 	bl	8005724 <RadioSpiWriteRegisters>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <SpiritRadioSetPALeveldBm+0x50>)
 80048bc:	b212      	sxth	r2, r2
 80048be:	4611      	mov	r1, r2
 80048c0:	7019      	strb	r1, [r3, #0]
 80048c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80048c6:	705a      	strb	r2, [r3, #1]
  
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000700 	.word	0x20000700

080048d4 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80048de:	f107 030f 	add.w	r3, r7, #15
 80048e2:	461a      	mov	r2, r3
 80048e4:	2101      	movs	r1, #1
 80048e6:	2018      	movs	r0, #24
 80048e8:	f000 ffc8 	bl	800587c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004900:	f107 030f 	add.w	r3, r7, #15
 8004904:	461a      	mov	r2, r3
 8004906:	2101      	movs	r1, #1
 8004908:	2018      	movs	r0, #24
 800490a:	f000 ff0b 	bl	8005724 <RadioSpiWriteRegisters>
 800490e:	4602      	mov	r2, r0
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <SpiritRadioSetPACwc+0x54>)
 8004912:	b212      	sxth	r2, r2
 8004914:	4611      	mov	r1, r2
 8004916:	7019      	strb	r1, [r3, #0]
 8004918:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800491c:	705a      	strb	r2, [r3, #1]
  
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000700 	.word	0x20000700

0800492c <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004936:	f107 030f 	add.w	r3, r7, #15
 800493a:	461a      	mov	r2, r3
 800493c:	2101      	movs	r1, #1
 800493e:	2018      	movs	r0, #24
 8004940:	f000 ff9c 	bl	800587c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	b2db      	uxtb	r3, r3
 800494c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	4313      	orrs	r3, r2
 8004954:	b2db      	uxtb	r3, r3
 8004956:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004958:	f107 030f 	add.w	r3, r7, #15
 800495c:	461a      	mov	r2, r3
 800495e:	2101      	movs	r1, #1
 8004960:	2018      	movs	r0, #24
 8004962:	f000 fedf 	bl	8005724 <RadioSpiWriteRegisters>
 8004966:	4602      	mov	r2, r0
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800496a:	b212      	sxth	r2, r2
 800496c:	4611      	mov	r1, r2
 800496e:	7019      	strb	r1, [r3, #0]
 8004970:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004974:	705a      	strb	r2, [r3, #1]
  
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000700 	.word	0x20000700

08004984 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8004992:	f107 030f 	add.w	r3, r7, #15
 8004996:	461a      	mov	r2, r3
 8004998:	2101      	movs	r1, #1
 800499a:	201e      	movs	r0, #30
 800499c:	f000 ff6e 	bl	800587c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e004      	b.n	80049bc <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80049bc:	f107 030f 	add.w	r3, r7, #15
 80049c0:	461a      	mov	r2, r3
 80049c2:	2101      	movs	r1, #1
 80049c4:	201e      	movs	r0, #30
 80049c6:	f000 fead 	bl	8005724 <RadioSpiWriteRegisters>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <SpiritRadioAFCFreezeOnSync+0x60>)
 80049ce:	b212      	sxth	r2, r2
 80049d0:	4611      	mov	r1, r2
 80049d2:	7019      	strb	r1, [r3, #0]
 80049d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80049d8:	705a      	strb	r2, [r3, #1]
  
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000700 	.word	0x20000700

080049e8 <SpiritRadioCsBlanking>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the ANT_SELECT_CONF_BASE and mask the CS_BLANKING BIT field */
  SpiritSpiReadRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 80049f2:	f107 030f 	add.w	r3, r7, #15
 80049f6:	461a      	mov	r2, r3
 80049f8:	2101      	movs	r1, #1
 80049fa:	2027      	movs	r0, #39	; 0x27
 80049fc:	f000 ff3e 	bl	800587c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <SpiritRadioCsBlanking+0x2a>
  {
    tempRegValue |= ANT_SELECT_CS_BLANKING_MASK;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	f043 0310 	orr.w	r3, r3, #16
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	e004      	b.n	8004a1c <SpiritRadioCsBlanking+0x34>
  }
  else
  {
    tempRegValue &= (~ANT_SELECT_CS_BLANKING_MASK);
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	f023 0310 	bic.w	r3, r3, #16
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the ANT_SELECT_CONF register */
  g_xStatus = SpiritSpiWriteRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8004a1c:	f107 030f 	add.w	r3, r7, #15
 8004a20:	461a      	mov	r2, r3
 8004a22:	2101      	movs	r1, #1
 8004a24:	2027      	movs	r0, #39	; 0x27
 8004a26:	f000 fe7d 	bl	8005724 <RadioSpiWriteRegisters>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <SpiritRadioCsBlanking+0x5c>)
 8004a2e:	b212      	sxth	r2, r2
 8004a30:	4611      	mov	r1, r2
 8004a32:	7019      	strb	r1, [r3, #0]
 8004a34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004a38:	705a      	strb	r2, [r3, #1]
  
  
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000700 	.word	0x20000700

08004a48 <SpiritRadioPersistenRx>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the PROTOCOL0_BASE and mask the PROTOCOL0_PERS_RX_MASK bitfield */
  SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8004a52:	f107 030f 	add.w	r3, r7, #15
 8004a56:	461a      	mov	r2, r3
 8004a58:	2101      	movs	r1, #1
 8004a5a:	2052      	movs	r0, #82	; 0x52
 8004a5c:	f000 ff0e 	bl	800587c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d105      	bne.n	8004a72 <SpiritRadioPersistenRx+0x2a>
  {
    tempRegValue |= PROTOCOL0_PERS_RX_MASK;
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	73fb      	strb	r3, [r7, #15]
 8004a70:	e004      	b.n	8004a7c <SpiritRadioPersistenRx+0x34>
  }
  else
  {
    tempRegValue &= (~PROTOCOL0_PERS_RX_MASK);
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	f023 0302 	bic.w	r3, r3, #2
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the PROTOCOL0_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8004a7c:	f107 030f 	add.w	r3, r7, #15
 8004a80:	461a      	mov	r2, r3
 8004a82:	2101      	movs	r1, #1
 8004a84:	2052      	movs	r0, #82	; 0x52
 8004a86:	f000 fe4d 	bl	8005724 <RadioSpiWriteRegisters>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <SpiritRadioPersistenRx+0x5c>)
 8004a8e:	b212      	sxth	r2, r2
 8004a90:	4611      	mov	r1, r2
 8004a92:	7019      	strb	r1, [r3, #0]
 8004a94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004a98:	705a      	strb	r2, [r3, #1]
  
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000700 	.word	0x20000700

08004aa8 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004ab2:	f107 030f 	add.w	r3, r7, #15
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2101      	movs	r1, #1
 8004aba:	209e      	movs	r0, #158	; 0x9e
 8004abc:	f000 fede 	bl	800587c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e004      	b.n	8004adc <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004adc:	f107 030f 	add.w	r3, r7, #15
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	209e      	movs	r0, #158	; 0x9e
 8004ae6:	f000 fe1d 	bl	8005724 <RadioSpiWriteRegisters>
 8004aea:	4602      	mov	r2, r0
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <SpiritRadioSetRefDiv+0x5c>)
 8004aee:	b212      	sxth	r2, r2
 8004af0:	4611      	mov	r1, r2
 8004af2:	7019      	strb	r1, [r3, #0]
 8004af4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004af8:	705a      	strb	r2, [r3, #1]
  
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000700 	.word	0x20000700

08004b08 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	461a      	mov	r2, r3
 8004b12:	2101      	movs	r1, #1
 8004b14:	209e      	movs	r0, #158	; 0x9e
 8004b16:	f000 feb1 	bl	800587c <RadioSpiReadRegisters>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <SpiritRadioGetRefDiv+0x40>)
 8004b1e:	b212      	sxth	r2, r2
 8004b20:	4611      	mov	r1, r2
 8004b22:	7019      	strb	r1, [r3, #0]
 8004b24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004b28:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	09db      	lsrs	r3, r3, #7
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8004b3c:	2300      	movs	r3, #0
  }
  
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000700 	.word	0x20000700

08004b4c <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004b56:	f107 030f 	add.w	r3, r7, #15
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	20b4      	movs	r0, #180	; 0xb4
 8004b60:	f000 fe8c 	bl	800587c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	f023 0308 	bic.w	r3, r3, #8
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	e004      	b.n	8004b80 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	f043 0308 	orr.w	r3, r3, #8
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004b80:	f107 030f 	add.w	r3, r7, #15
 8004b84:	461a      	mov	r2, r3
 8004b86:	2101      	movs	r1, #1
 8004b88:	20b4      	movs	r0, #180	; 0xb4
 8004b8a:	f000 fdcb 	bl	8005724 <RadioSpiWriteRegisters>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <SpiritRadioSetDigDiv+0x5c>)
 8004b92:	b212      	sxth	r2, r2
 8004b94:	4611      	mov	r1, r2
 8004b96:	7019      	strb	r1, [r3, #0]
 8004b98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004b9c:	705a      	strb	r2, [r3, #1]
  
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000700 	.word	0x20000700

08004bac <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004bb2:	1dfb      	adds	r3, r7, #7
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	20b4      	movs	r0, #180	; 0xb4
 8004bba:	f000 fe5f 	bl	800587c <RadioSpiReadRegisters>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <SpiritRadioGetDigDiv+0x40>)
 8004bc2:	b212      	sxth	r2, r2
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	7019      	strb	r1, [r3, #0]
 8004bc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004bcc:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8004be0:	2301      	movs	r3, #1
  }
  
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000700 	.word	0x20000700

08004bf0 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <SpiritRadioGetXtalFrequency+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200005b8 	.word	0x200005b8

08004c08 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <SpiritRadioSetXtalFrequency+0x1c>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6013      	str	r3, [r2, #0]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	200005b8 	.word	0x200005b8

08004c28 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8004c32:	f107 020c 	add.w	r2, r7, #12
 8004c36:	f107 030c 	add.w	r3, r7, #12
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c44:	f000 f830 	bl	8004ca8 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8004c48:	f107 030c 	add.w	r3, r7, #12
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2102      	movs	r1, #2
 8004c50:	2053      	movs	r0, #83	; 0x53
 8004c52:	f000 fd67 	bl	8005724 <RadioSpiWriteRegisters>
 8004c56:	4602      	mov	r2, r0
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <SpiritTimerSetRxTimeoutMs+0x48>)
 8004c5a:	b212      	sxth	r2, r2
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	7019      	strb	r1, [r3, #0]
 8004c60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004c64:	705a      	strb	r2, [r3, #1]

}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000700 	.word	0x20000700

08004c74 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8004c7e:	1dfb      	adds	r3, r7, #7
 8004c80:	461a      	mov	r2, r3
 8004c82:	2101      	movs	r1, #1
 8004c84:	2054      	movs	r0, #84	; 0x54
 8004c86:	f000 fd4d 	bl	8005724 <RadioSpiWriteRegisters>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <SpiritTimerSetRxTimeoutCounter+0x30>)
 8004c8e:	b212      	sxth	r2, r2
 8004c90:	4611      	mov	r1, r2
 8004c92:	7019      	strb	r1, [r3, #0]
 8004c94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004c98:	705a      	strb	r2, [r3, #1]

}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000700 	.word	0x20000700

08004ca8 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	ed87 0a03 	vstr	s0, [r7, #12]
 8004cb2:	60b8      	str	r0, [r7, #8]
 8004cb4:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8004cb6:	f7ff ff9b 	bl	8004bf0 <SpiritRadioGetXtalFrequency>
 8004cba:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4a91      	ldr	r2, [pc, #580]	; (8004f04 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d902      	bls.n	8004cca <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cdc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004f08 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004ce0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce8:	ee17 3a90 	vmov	r3, s15
 8004cec:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f64f 5201 	movw	r2, #64769	; 0xfd01
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d906      	bls.n	8004d06 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	22ff      	movs	r2, #255	; 0xff
 8004cfc:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	701a      	strb	r2, [r3, #0]
    return;
 8004d04:	e0fa      	b.n	8004efc <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4a80      	ldr	r2, [pc, #512]	; (8004f0c <SpiritTimerComputeRxTimeoutValues+0x264>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	09db      	lsrs	r3, r3, #7
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	3302      	adds	r3, #2
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d48:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004f08 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004d4c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	dd1d      	ble.n	8004dac <SpiritTimerComputeRxTimeoutValues+0x104>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004f08 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004d90:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004daa:	e01e      	b.n	8004dea <SpiritTimerComputeRxTimeoutValues+0x142>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004f08 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004dcc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8004de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de6:	eef1 7a67 	vneg.f32	s15, s15
 8004dea:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2bff      	cmp	r3, #255	; 0xff
 8004df4:	d06e      	beq.n	8004ed4 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e14:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004f08 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004e18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3a:	dd1e      	ble.n	8004e7a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004f08 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004e5e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e78:	e01f      	b.n	8004eba <SpiritTimerComputeRxTimeoutValues+0x212>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e98:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004f08 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004e9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eb6:	eef1 7a67 	vneg.f32	s15, s15
 8004eba:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec6:	d505      	bpl.n	8004ed4 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d906      	bls.n	8004ef6 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
}
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	01c9c380 	.word	0x01c9c380
 8004f08:	4993b480 	.word	0x4993b480
 8004f0c:	80808081 	.word	0x80808081

08004f10 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004f1a:	f107 030c 	add.w	r3, r7, #12
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2102      	movs	r1, #2
 8004f22:	204f      	movs	r0, #79	; 0x4f
 8004f24:	f000 fcaa 	bl	800587c <RadioSpiReadRegisters>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004f2c:	b212      	sxth	r2, r2
 8004f2e:	4611      	mov	r1, r2
 8004f30:	7019      	strb	r1, [r3, #0]
 8004f32:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004f36:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004f38:	7b3b      	ldrb	r3, [r7, #12]
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004f42:	7b3b      	ldrb	r3, [r7, #12]
 8004f44:	b25a      	sxtb	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	b25b      	sxtb	r3, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	b25b      	sxtb	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8004f5a:	7b7b      	ldrb	r3, [r7, #13]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004f64:	7b7b      	ldrb	r3, [r7, #13]
 8004f66:	b25a      	sxtb	r2, r3
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	b25b      	sxtb	r3, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004f76:	f107 030c 	add.w	r3, r7, #12
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	204f      	movs	r0, #79	; 0x4f
 8004f80:	f000 fbd0 	bl	8005724 <RadioSpiWriteRegisters>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004f88:	b212      	sxth	r2, r2
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	7019      	strb	r1, [r3, #0]
 8004f8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004f92:	705a      	strb	r2, [r3, #1]

}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000700 	.word	0x20000700

08004fa0 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2102      	movs	r1, #2
 8004fac:	20c0      	movs	r0, #192	; 0xc0
 8004fae:	f000 fc65 	bl	800587c <RadioSpiReadRegisters>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <SpiritRefreshStatus+0x44>)
 8004fb6:	b212      	sxth	r2, r2
 8004fb8:	4611      	mov	r1, r2
 8004fba:	7019      	strb	r1, [r3, #0]
 8004fbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004fc0:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <SpiritRefreshStatus+0x44>)
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d1ec      	bne.n	8004fa6 <SpiritRefreshStatus+0x6>
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <SpiritRefreshStatus+0x48>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d1e5      	bne.n	8004fa6 <SpiritRefreshStatus+0x6>

}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000700 	.word	0x20000700
 8004fe8:	20000701 	.word	0x20000701

08004fec <Spirit1InterfaceInit>:
* @brief  Read the status register.
* @param  None
* @retval Status
*/
void Spirit1InterfaceInit(void)
{ 
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Initialize the SDN pin micro side */
  RadioGpioInit(RADIO_GPIO_SDN,RADIO_MODE_GPIO_OUT);
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	2004      	movs	r0, #4
 8004ff4:	f000 fa36 	bl	8005464 <RadioGpioInit>

  SpiritSpiInit();
 8004ff8:	f000 fb2a 	bl	8005650 <RadioSpiInit>
     
  /* Board management */   
//  SpiritEnterShutdown();
//  SpiritExitShutdown();
//
  SpiritManagementIdentificationRFBoard();
 8004ffc:	f000 f814 	bl	8005028 <SpiritManagementIdentificationRFBoard>
    
  /* Initialize the signals to drive the range extender application board */
  SpiritManagementRangeExtInit(); 
 8005000:	f000 f836 	bl	8005070 <SpiritManagementRangeExtInit>
  
  /* Micro EXTI config */      
  RadioGpioInit(RADIO_GPIO_3,RADIO_MODE_EXTI_IN);
 8005004:	2101      	movs	r1, #1
 8005006:	2003      	movs	r0, #3
 8005008:	f000 fa2c 	bl	8005464 <RadioGpioInit>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,DISABLE); 
 800500c:	2300      	movs	r3, #0
 800500e:	2204      	movs	r2, #4
 8005010:	2104      	movs	r1, #4
 8005012:	2003      	movs	r0, #3
 8005014:	f000 faaa 	bl	800556c <RadioGpioInterruptCmd>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,ENABLE);
 8005018:	2301      	movs	r3, #1
 800501a:	2204      	movs	r2, #4
 800501c:	2104      	movs	r1, #4
 800501e:	2003      	movs	r0, #3
 8005020:	f000 faa4 	bl	800556c <RadioGpioInterruptCmd>
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}

08005028 <SpiritManagementIdentificationRFBoard>:
* @brief  Identifies the SPIRIT1 Xtal frequency and version.
* @param  None
* @retval Status
*/
void SpiritManagementIdentificationRFBoard(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 800502e:	2300      	movs	r3, #0
 8005030:	71fb      	strb	r3, [r7, #7]
 8005032:	e004      	b.n	800503e <SpiritManagementIdentificationRFBoard+0x16>
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	3301      	adds	r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	71fb      	strb	r3, [r7, #7]
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2bff      	cmp	r3, #255	; 0xff
 8005044:	d1f6      	bne.n	8005034 <SpiritManagementIdentificationRFBoard+0xc>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8005046:	f7ff ffab 	bl	8004fa0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <SpiritManagementIdentificationRFBoard+0x40>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b03      	cmp	r3, #3
 8005056:	d1ea      	bne.n	800502e <SpiritManagementIdentificationRFBoard+0x6>

    SpiritRadioSetXtalFrequency(XTAL_FREQUENCY);        
 8005058:	4804      	ldr	r0, [pc, #16]	; (800506c <SpiritManagementIdentificationRFBoard+0x44>)
 800505a:	f7ff fdd5 	bl	8004c08 <SpiritRadioSetXtalFrequency>
    //SpiritGeneralSetSpiritVersion(SPIRIT_VERSION); 
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000700 	.word	0x20000700
 800506c:	02faf080 	.word	0x02faf080

08005070 <SpiritManagementRangeExtInit>:
/**
* @defgroup RANGE_EXT_MANAGEMENT_FUNCTIONS              SDK SPIRIT Management Range Extender Functions
* @{
*/
void SpiritManagementRangeExtInit(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
  RangeExtType range_type = SpiritManagementGetRangeExtender();
 8005076:	f000 f877 	bl	8005168 <SpiritManagementGetRangeExtender>
 800507a:	4603      	mov	r3, r0
 800507c:	77fb      	strb	r3, [r7, #31]
  
  if(range_type==RANGE_EXT_SKYWORKS_169) {
 800507e:	7ffb      	ldrb	r3, [r7, #31]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d135      	bne.n	80050f0 <SpiritManagementRangeExtInit+0x80>
    /* TCXO optimization power consumption */
    SpiritGeneralSetExtRef(MODE_EXT_XIN);
 8005084:	2001      	movs	r0, #1
 8005086:	f7fd fd6d 	bl	8002b64 <SpiritGeneralSetExtRef>
    uint8_t tmp = 0x01; SpiritSpiWriteRegisters(0xB6,1,&tmp);
 800508a:	2301      	movs	r3, #1
 800508c:	71fb      	strb	r3, [r7, #7]
 800508e:	1dfb      	adds	r3, r7, #7
 8005090:	461a      	mov	r2, r3
 8005092:	2101      	movs	r1, #1
 8005094:	20b6      	movs	r0, #182	; 0xb6
 8005096:	f000 fb45 	bl	8005724 <RadioSpiWriteRegisters>
    
    /* CSD control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 800509a:	4a2e      	ldr	r2, [pc, #184]	; (8005154 <SpiritManagementRangeExtInit+0xe4>)
 800509c:	f107 0308 	add.w	r3, r7, #8
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	4611      	mov	r1, r2
 80050a4:	8019      	strh	r1, [r3, #0]
 80050a6:	3302      	adds	r3, #2
 80050a8:	0c12      	lsrs	r2, r2, #16
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	f107 0308 	add.w	r3, r7, #8
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fd fd87 	bl	8002bc4 <SpiritGpioInit>
    
    /* CTX/BYP control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 80050b6:	4a28      	ldr	r2, [pc, #160]	; (8005158 <SpiritManagementRangeExtInit+0xe8>)
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	4611      	mov	r1, r2
 80050c0:	8019      	strh	r1, [r3, #0]
 80050c2:	3302      	adds	r3, #2
 80050c4:	0c12      	lsrs	r2, r2, #16
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	f107 030c 	add.w	r3, r7, #12
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fd fd79 	bl	8002bc4 <SpiritGpioInit>
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 80050d2:	4a22      	ldr	r2, [pc, #136]	; (800515c <SpiritManagementRangeExtInit+0xec>)
 80050d4:	f107 0310 	add.w	r3, r7, #16
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	4611      	mov	r1, r2
 80050dc:	8019      	strh	r1, [r3, #0]
 80050de:	3302      	adds	r3, #2
 80050e0:	0c12      	lsrs	r2, r2, #16
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	f107 0310 	add.w	r3, r7, #16
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fd fd6b 	bl	8002bc4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
  }
}
 80050ee:	e02c      	b.n	800514a <SpiritManagementRangeExtInit+0xda>
  else if(range_type==RANGE_EXT_SKYWORKS_868) {   
 80050f0:	7ffb      	ldrb	r3, [r7, #31]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d129      	bne.n	800514a <SpiritManagementRangeExtInit+0xda>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <SpiritManagementRangeExtInit+0xe4>)
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	4611      	mov	r1, r2
 8005100:	8019      	strh	r1, [r3, #0]
 8005102:	3302      	adds	r3, #2
 8005104:	0c12      	lsrs	r2, r2, #16
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	f107 0314 	add.w	r3, r7, #20
 800510c:	4618      	mov	r0, r3
 800510e:	f7fd fd59 	bl	8002bc4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 8005112:	4a13      	ldr	r2, [pc, #76]	; (8005160 <SpiritManagementRangeExtInit+0xf0>)
 8005114:	f107 0318 	add.w	r3, r7, #24
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	4611      	mov	r1, r2
 800511c:	8019      	strh	r1, [r3, #0]
 800511e:	3302      	adds	r3, #2
 8005120:	0c12      	lsrs	r2, r2, #16
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	f107 0318 	add.w	r3, r7, #24
 8005128:	4618      	mov	r0, r3
 800512a:	f7fd fd4b 	bl	8002bc4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 800512e:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <SpiritManagementRangeExtInit+0xf4>)
 8005130:	f107 031c 	add.w	r3, r7, #28
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	4611      	mov	r1, r2
 8005138:	8019      	strh	r1, [r3, #0]
 800513a:	3302      	adds	r3, #2
 800513c:	0c12      	lsrs	r2, r2, #16
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	f107 031c 	add.w	r3, r7, #28
 8005144:	4618      	mov	r0, r3
 8005146:	f7fd fd3d 	bl	8002bc4 <SpiritGpioInit>
}
 800514a:	bf00      	nop
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	0800b23c 	.word	0x0800b23c
 8005158:	0800b240 	.word	0x0800b240
 800515c:	0800b244 	.word	0x0800b244
 8005160:	0800b248 	.word	0x0800b248
 8005164:	0800b24c 	.word	0x0800b24c

08005168 <SpiritManagementGetRangeExtender>:
* @brief  returns the spirit1 range extender type
* @param  None
* @retval RangeExtType
*/
RangeExtType SpiritManagementGetRangeExtender(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return xRangeExtType;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <SpiritManagementGetRangeExtender+0x14>)
 800516e:	781b      	ldrb	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	200005bc 	.word	0x200005bc

08005180 <Spirit1GpioIrqInit>:
* @brief  this function intializes the spirit1 gpio irq for TX and Rx
* @param  None
* @retval None
*/
void Spirit1GpioIrqInit(SGpioInit *pGpioIRQ)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Spirit IRQ config */
  SpiritGpioInit(pGpioIRQ);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7fd fd1b 	bl	8002bc4 <SpiritGpioInit>
}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <Spirit1RadioInit>:
* @brief  this function used to receive RX packet
* @param  None
* @retval None
*/
void Spirit1RadioInit(SRadioInit *pRadioInit)
{    
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Spirit Radio config */
  SpiritRadioInit(pRadioInit);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fe fb02 	bl	80037a8 <SpiritRadioInit>

}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <Spirit1SetPower>:
* @brief  this function sets the radio power
* @param  uint8_t cIndex, float fPowerdBm
* @retval None
*/
void Spirit1SetPower(uint8_t cIndex, float fPowerdBm)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	ed87 0a00 	vstr	s0, [r7]
 80051b8:	71fb      	strb	r3, [r7, #7]
  /* Spirit Radio set power */
  SpiritRadioSetPALeveldBm(cIndex,fPowerdBm);
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	ed97 0a00 	vldr	s0, [r7]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fb5d 	bl	8004880 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(cIndex);
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fbaf 	bl	800492c <SpiritRadioSetPALevelMaxIndex>
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <Spirit1PacketConfig>:
* @brief  this function sets the packet configuration according to the protocol used
* @param  None
* @retval None
*/
void Spirit1PacketConfig(void)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	af00      	add	r7, sp, #0
  
  STackProtocolInit();
   
#elif defined(USE_BASIC_PROTOCOL)
  
  BasicProtocolInit();
 80051da:	f7fc fec3 	bl	8001f64 <BasicProtocolInit>
  
#endif
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <Spirit1SetPayloadlength>:
* @brief  this function sets the payload length
* @param  uint8_t length
* @retval None
*/
void Spirit1SetPayloadlength(uint8_t length)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	71fb      	strb	r3, [r7, #7]
    /* Payload length config */
  SpiritPktStackSetPayloadLength(length);
  
#elif defined(USE_BASIC_PROTOCOL)
  /* payload length config */
  SpiritPktBasicSetPayloadLength(length);
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe f98f 	bl	8003514 <SpiritPktBasicSetPayloadLength>
#endif
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <Spirit1SetDestinationAddress>:
* @brief  this function sets the destination address
* @param  uint8_t adress
* @retval None
*/
void Spirit1SetDestinationAddress(uint8_t address)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	4603      	mov	r3, r0
 8005206:	71fb      	strb	r3, [r7, #7]
#if defined(USE_STack_PROTOCOL)
  /* Destination address */
  SpiritPktStackSetDestinationAddress(address);
#elif defined(USE_BASIC_PROTOCOL)
  /* destination address */
  SpiritPktBasicSetDestinationAddress(address);
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fa0e 	bl	800362c <SpiritPktCommonSetDestinationAddress>
#endif
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <Spirit1EnableTxIrq>:
* @brief  this function enables the Tx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableTxIrq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrq(TX_DATA_SENT, S_ENABLE); 
 800521c:	2101      	movs	r1, #1
 800521e:	2004      	movs	r0, #4
 8005220:	f7fd fd1a 	bl	8002c58 <SpiritIrq>
#if defined(USE_STack_LLP)
  SpiritIrq(MAX_RE_TX_REACH, S_ENABLE);
#endif  
}
 8005224:	bf00      	nop
 8005226:	bd80      	pop	{r7, pc}

08005228 <Spirit1EnableRxIrq>:
* @brief  this function enables the Rx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableRxIrq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
    /* Spirit IRQs enable */
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 800522c:	2101      	movs	r1, #1
 800522e:	2001      	movs	r0, #1
 8005230:	f7fd fd12 	bl	8002c58 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE); 
 8005234:	2101      	movs	r1, #1
 8005236:	2002      	movs	r0, #2
 8005238:	f7fd fd0e 	bl	8002c58 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800523c:	2101      	movs	r1, #1
 800523e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8005242:	f7fd fd09 	bl	8002c58 <SpiritIrq>
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}

0800524a <Spirit1DisableIrq>:
* @brief  this function disable IRQs
* @param  None
* @retval None
*/
void Spirit1DisableIrq(void)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrqDeInit(NULL);
 800524e:	2000      	movs	r0, #0
 8005250:	f7fd fcdc 	bl	8002c0c <SpiritIrqDeInit>
}
 8005254:	bf00      	nop
 8005256:	bd80      	pop	{r7, pc}

08005258 <Spirit1SetRxTimeout>:
* @brief  this function set the receive timeout period
* @param  None
* @retval None
*/
void Spirit1SetRxTimeout(float cRxTimeOut)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	ed87 0a01 	vstr	s0, [r7, #4]
  if(cRxTimeOut == 0)
 8005262:	edd7 7a01 	vldr	s15, [r7, #4]
 8005266:	eef5 7a40 	vcmp.f32	s15, #0.0
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	d106      	bne.n	800527e <Spirit1SetRxTimeout+0x26>
  {
    /* rx timeout config */
    SET_INFINITE_RX_TIMEOUT();
 8005270:	2000      	movs	r0, #0
 8005272:	f7ff fcff 	bl	8004c74 <SpiritTimerSetRxTimeoutCounter>
    SpiritTimerSetRxTimeoutStopCondition(ANY_ABOVE_THRESHOLD);
 8005276:	200f      	movs	r0, #15
 8005278:	f7ff fe4a 	bl	8004f10 <SpiritTimerSetRxTimeoutStopCondition>
    /* RX timeout config */
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
    Spirit1EnableSQI();
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
  }
}
 800527c:	e008      	b.n	8005290 <Spirit1SetRxTimeout+0x38>
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
 800527e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005282:	f7ff fcd1 	bl	8004c28 <SpiritTimerSetRxTimeoutMs>
    Spirit1EnableSQI();
 8005286:	f000 f812 	bl	80052ae <Spirit1EnableSQI>
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
 800528a:	2006      	movs	r0, #6
 800528c:	f7ff fe40 	bl	8004f10 <SpiritTimerSetRxTimeoutStopCondition>
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <Spirit1SetRssiTH>:
* @brief  this function sets the RSSI threshold
* @param  int dbmValue
* @retval None
*/
void Spirit1SetRssiTH(int dbmValue)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  SpiritQiSetRssiThresholddBm(dbmValue);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7fe fa61 	bl	8003768 <SpiritQiSetRssiThresholddBm>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <Spirit1EnableSQI>:
* @brief  this function enables SQI check
* @param  None
* @retval None
*/
void Spirit1EnableSQI(void)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	af00      	add	r7, sp, #0
  /* enable SQI check */
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80052b2:	2000      	movs	r0, #0
 80052b4:	f7fe fa24 	bl	8003700 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80052b8:	2001      	movs	r0, #1
 80052ba:	f7fe f9e9 	bl	8003690 <SpiritQiSqiCheck>
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <Spirit1StartRx>:
* @brief  this function starts the RX process
* @param  None
* @retval None
*/
void Spirit1StartRx(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <Spirit1StartRx+0x28>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b33      	cmp	r3, #51	; 0x33
 80052d4:	d102      	bne.n	80052dc <Spirit1StartRx+0x18>
  {
    SpiritCmdStrobeSabort();
 80052d6:	2067      	movs	r0, #103	; 0x67
 80052d8:	f7fd fb90 	bl	80029fc <SpiritCmdStrobeCommand>
  }
  /* RX command */
  SpiritCmdStrobeRx();
 80052dc:	f7fd ff84 	bl	80031e8 <SpiritManagementWaCmdStrobeRx>
 80052e0:	2061      	movs	r0, #97	; 0x61
 80052e2:	f7fd fb8b 	bl	80029fc <SpiritCmdStrobeCommand>
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000700 	.word	0x20000700

080052f0 <Spirit1GetRxPacket>:
* @brief  this function receives the data
* @param  None
* @retval None
*/
void Spirit1GetRxPacket(uint8_t *buffer, uint8_t *cRxData )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint8_t noofbytes = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  /* when rx data ready read the number of received bytes */
  *cRxData=SpiritLinearFifoReadNumElementsRxFifo();
 80052fe:	f7fd fd5d 	bl	8002dbc <SpiritLinearFifoReadNumElementsRxFifo>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	701a      	strb	r2, [r3, #0]
  noofbytes = *cRxData;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	73fb      	strb	r3, [r7, #15]
    /* read the RX FIFO */
  SpiritSpiReadLinearFifo(noofbytes, buffer);
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fca5 	bl	8005c64 <RadioSpiReadFifo>
  
  SpiritCmdStrobeFlushRxFifo();
 800531a:	2071      	movs	r0, #113	; 0x71
 800531c:	f7fd fb6e 	bl	80029fc <SpiritCmdStrobeCommand>
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <Spirit1StartTx>:
* @brief  this function starts the TX process
* @param  None
* @retval None
*/
void Spirit1StartTx(uint8_t *buffer, uint8_t size )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8005334:	4b15      	ldr	r3, [pc, #84]	; (800538c <Spirit1StartTx+0x64>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b33      	cmp	r3, #51	; 0x33
 8005340:	d102      	bne.n	8005348 <Spirit1StartTx+0x20>
  {
    SpiritCmdStrobeSabort();
 8005342:	2067      	movs	r0, #103	; 0x67
 8005344:	f7fd fb5a 	bl	80029fc <SpiritCmdStrobeCommand>
  }
  
#ifdef CSMA_ENABLE
  
    /* Enable CSMA */
    SpiritRadioPersistenRx(S_DISABLE);
 8005348:	2000      	movs	r0, #0
 800534a:	f7ff fb7d 	bl	8004a48 <SpiritRadioPersistenRx>
    SpiritRadioCsBlanking(S_DISABLE);
 800534e:	2000      	movs	r0, #0
 8005350:	f7ff fb4a 	bl	80049e8 <SpiritRadioCsBlanking>

    SpiritCsmaInit(&xCsmaInit);
 8005354:	480e      	ldr	r0, [pc, #56]	; (8005390 <Spirit1StartTx+0x68>)
 8005356:	f7fd fb69 	bl	8002a2c <SpiritCsmaInit>
    SpiritCsma(S_ENABLE);
 800535a:	2001      	movs	r0, #1
 800535c:	f7fd fbca 	bl	8002af4 <SpiritCsma>
    SpiritQiSetRssiThresholddBm(CSMA_RSSI_THRESHOLD);
 8005360:	f06f 0069 	mvn.w	r0, #105	; 0x69
 8005364:	f7fe fa00 	bl	8003768 <SpiritQiSetRssiThresholddBm>
    
#endif 
  
  /* fit the TX FIFO */
  SpiritCmdStrobeFlushTxFifo();
 8005368:	2072      	movs	r0, #114	; 0x72
 800536a:	f7fd fb47 	bl	80029fc <SpiritCmdStrobeCommand>
  
  SpiritSpiWriteLinearFifo(size, buffer);
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fbcc 	bl	8005b10 <RadioSpiWriteFifo>
  
  /* send the TX command */
  SpiritCmdStrobeTx();
 8005378:	f7fd fefe 	bl	8003178 <SpiritManagementWaCmdStrobeTx>
 800537c:	2060      	movs	r0, #96	; 0x60
 800537e:	f7fd fb3d 	bl	80029fc <SpiritCmdStrobeCommand>
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000700 	.word	0x20000700
 8005390:	2000007c 	.word	0x2000007c

08005394 <Spirit1ClearIRQ>:
* @brief  this function clear the IRQ status
* @param  None
* @retval None
*/
void Spirit1ClearIRQ(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  SpiritIrqClearStatus();
 8005398:	f7fd fcf8 	bl	8002d8c <SpiritIrqClearStatus>
}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}

080053a0 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10d      	bne.n	80053cc <BSP_LED_Init+0x2c>
 80053b0:	2300      	movs	r3, #0
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	4b15      	ldr	r3, [pc, #84]	; (800540c <BSP_LED_Init+0x6c>)
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <BSP_LED_Init+0x6c>)
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	6313      	str	r3, [r2, #48]	; 0x30
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <BSP_LED_Init+0x6c>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 80053cc:	2320      	movs	r3, #32
 80053ce:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053d0:	2301      	movs	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d8:	2303      	movs	r3, #3
 80053da:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <BSP_LED_Init+0x70>)
 80053e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e4:	f107 020c 	add.w	r2, r7, #12
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fee0 	bl	80061b0 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	4a07      	ldr	r2, [pc, #28]	; (8005410 <BSP_LED_Init+0x70>)
 80053f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f8:	2120      	movs	r1, #32
 80053fa:	2200      	movs	r2, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 f93b 	bl	8006678 <HAL_GPIO_WritePin>
}
 8005402:	bf00      	nop
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	20000250 	.word	0x20000250

08005414 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	4a05      	ldr	r2, [pc, #20]	; (8005438 <BSP_LED_On+0x24>)
 8005422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005426:	2120      	movs	r1, #32
 8005428:	2201      	movs	r2, #1
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f924 	bl	8006678 <HAL_GPIO_WritePin>
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000250 	.word	0x20000250

0800543c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	4a05      	ldr	r2, [pc, #20]	; (8005460 <BSP_LED_Toggle+0x24>)
 800544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544e:	2220      	movs	r2, #32
 8005450:	4611      	mov	r1, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f001 f929 	bl	80066aa <HAL_GPIO_TogglePin>
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000250 	.word	0x20000250

08005464 <RadioGpioInit>:
*         @arg RADIO_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
*         generation capability.
* @retval None.
*/
void RadioGpioInit(RadioGpioPin xGpio, RadioGpioMode xGpioMode)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	460a      	mov	r2, r1
 800546e:	71fb      	strb	r3, [r7, #7]
 8005470:	4613      	mov	r3, r2
 8005472:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RADIO_GPIO_PIN(xGpio));
  assert_param(IS_RADIO_GPIO_MODE(xGpioMode));
  
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	4b36      	ldr	r3, [pc, #216]	; (8005554 <RadioGpioInit+0xf0>)
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	4a35      	ldr	r2, [pc, #212]	; (8005554 <RadioGpioInit+0xf0>)
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	6313      	str	r3, [r2, #48]	; 0x30
 8005484:	4b33      	ldr	r3, [pc, #204]	; (8005554 <RadioGpioInit+0xf0>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	693b      	ldr	r3, [r7, #16]
  __GPIOC_CLK_ENABLE();
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <RadioGpioInit+0xf0>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	4a2e      	ldr	r2, [pc, #184]	; (8005554 <RadioGpioInit+0xf0>)
 800549a:	f043 0304 	orr.w	r3, r3, #4
 800549e:	6313      	str	r3, [r2, #48]	; 0x30
 80054a0:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <RadioGpioInit+0xf0>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <RadioGpioInit+0xf0>)
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	4a27      	ldr	r2, [pc, #156]	; (8005554 <RadioGpioInit+0xf0>)
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	6313      	str	r3, [r2, #48]	; 0x30
 80054bc:	4b25      	ldr	r3, [pc, #148]	; (8005554 <RadioGpioInit+0xf0>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	68bb      	ldr	r3, [r7, #8]
  
  /* Configures MCU GPIO */
  if (xGpioMode == RADIO_MODE_GPIO_OUT)
 80054c8:	79bb      	ldrb	r3, [r7, #6]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d102      	bne.n	80054d4 <RadioGpioInit+0x70>
  {
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054ce:	2301      	movs	r3, #1
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	e001      	b.n	80054d8 <RadioGpioInit+0x74>
  }
  else
  {
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
  }
  
  GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <RadioGpioInit+0xf4>)
 80054dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	; (800555c <RadioGpioInit+0xf8>)
 80054e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <RadioGpioInit+0xfc>)
 80054f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <RadioGpioInit+0x100>)
 80054fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fe:	f107 0214 	add.w	r2, r7, #20
 8005502:	4611      	mov	r1, r2
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fe53 	bl	80061b0 <HAL_GPIO_Init>
  
  if (xGpioMode == RADIO_MODE_EXTI_IN)
 800550a:	79bb      	ldrb	r3, [r7, #6]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d11d      	bne.n	800554c <RadioGpioInit+0xe8>
  {
    GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	4a11      	ldr	r2, [pc, #68]	; (8005558 <RadioGpioInit+0xf4>)
 8005514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4a0f      	ldr	r2, [pc, #60]	; (800555c <RadioGpioInit+0xf8>)
 800551e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	4a0e      	ldr	r2, [pc, #56]	; (8005560 <RadioGpioInit+0xfc>)
 8005528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800552c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = aRADIO_GPIO_EXTI_MODE[xGpio];
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <RadioGpioInit+0x104>)
 8005532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <RadioGpioInit+0x100>)
 800553c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005540:	f107 0214 	add.w	r2, r7, #20
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fe32 	bl	80061b0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    /*  NVIC_SetPriority((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]), 0x02); */
    /*  HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));     */
  } 
}
 800554c:	bf00      	nop
 800554e:	3728      	adds	r7, #40	; 0x28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40023800 	.word	0x40023800
 8005558:	0800b3d0 	.word	0x0800b3d0
 800555c:	0800b3f0 	.word	0x0800b3f0
 8005560:	0800b3dc 	.word	0x0800b3dc
 8005564:	20000254 	.word	0x20000254
 8005568:	0800b404 	.word	0x0800b404

0800556c <RadioGpioInterruptCmd>:
*         @arg ENABLE: Interrupt is enabled
*         @arg DISABLE: Interrupt is disabled
* @retval None.
*/
void RadioGpioInterruptCmd(RadioGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, FunctionalState xNewState)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	461a      	mov	r2, r3
 800557a:	4623      	mov	r3, r4
 800557c:	71fb      	strb	r3, [r7, #7]
 800557e:	4603      	mov	r3, r0
 8005580:	71bb      	strb	r3, [r7, #6]
 8005582:	460b      	mov	r3, r1
 8005584:	717b      	strb	r3, [r7, #5]
 8005586:	4613      	mov	r3, r2
 8005588:	713b      	strb	r3, [r7, #4]
  HAL_NVIC_SetPriority((IRQn_Type) (aRADIO_GPIO_IRQn[xGpio]), nPreemption, nSubpriority);
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <RadioGpioInterruptCmd+0x5c>)
 800558e:	5cd3      	ldrb	r3, [r2, r3]
 8005590:	b25b      	sxtb	r3, r3
 8005592:	79b9      	ldrb	r1, [r7, #6]
 8005594:	797a      	ldrb	r2, [r7, #5]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fda3 	bl	80060e2 <HAL_NVIC_SetPriority>
  if (!xNewState)
 800559c:	793b      	ldrb	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <RadioGpioInterruptCmd+0x46>
  {
    HAL_NVIC_DisableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio])); 
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <RadioGpioInterruptCmd+0x5c>)
 80055a6:	5cd3      	ldrb	r3, [r2, r3]
 80055a8:	b25b      	sxtb	r3, r3
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fdc3 	bl	8006136 <HAL_NVIC_DisableIRQ>
  }
  else
  {
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
  }
}
 80055b0:	e006      	b.n	80055c0 <RadioGpioInterruptCmd+0x54>
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <RadioGpioInterruptCmd+0x5c>)
 80055b6:	5cd3      	ldrb	r3, [r2, r3]
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fdad 	bl	800611a <HAL_NVIC_EnableIRQ>
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd90      	pop	{r4, r7, pc}
 80055c8:	0800b414 	.word	0x0800b414

080055cc <RadioShieldLedInit>:
*   This parameter can be one of the following values:
* @arg    Led_t Led
* @retval None
*/
void RadioShieldLedInit(Led_t Led)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  RADIO_SHIELD_LED_GPIO_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <RadioShieldLedInit+0x54>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <RadioShieldLedInit+0x54>)
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <RadioShieldLedInit+0x54>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	60bb      	str	r3, [r7, #8]
 80055f0:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = aLED_GPIO_PIN[Led];
 80055f2:	2310      	movs	r3, #16
 80055f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055f6:	2301      	movs	r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055fa:	2301      	movs	r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80055fe:	2303      	movs	r3, #3
 8005600:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(aLED_GPIO_PORT[Led], &GPIO_InitStruct);
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	4a07      	ldr	r2, [pc, #28]	; (8005624 <RadioShieldLedInit+0x58>)
 8005606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560a:	f107 020c 	add.w	r2, r7, #12
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fdcd 	bl	80061b0 <HAL_GPIO_Init>
}
 8005616:	bf00      	nop
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800
 8005624:	20000268 	.word	0x20000268

08005628 <RadioShieldLedOff>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedOff(Led_t Led)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_RESET); 
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	4a05      	ldr	r2, [pc, #20]	; (800564c <RadioShieldLedOff+0x24>)
 8005636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563a:	2110      	movs	r1, #16
 800563c:	2200      	movs	r2, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f81a 	bl	8006678 <HAL_GPIO_WritePin>
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000268 	.word	0x20000268

08005650 <RadioSpiInit>:
* @brief  Initializes SPI HAL.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&pSpiHandle) == HAL_SPI_STATE_RESET)
 8005654:	4818      	ldr	r0, [pc, #96]	; (80056b8 <RadioSpiInit+0x68>)
 8005656:	f002 f81f 	bl	8007698 <HAL_SPI_GetState>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d128      	bne.n	80056b2 <RadioSpiInit+0x62>
  {
    /* SPI Config */
    pSpiHandle.Instance               = RADIO_SPI;
 8005660:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <RadioSpiInit+0x68>)
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <RadioSpiInit+0x6c>)
 8005664:	601a      	str	r2, [r3, #0]
    pSpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <RadioSpiInit+0x68>)
 8005668:	2208      	movs	r2, #8
 800566a:	61da      	str	r2, [r3, #28]
    pSpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <RadioSpiInit+0x68>)
 800566e:	2200      	movs	r2, #0
 8005670:	609a      	str	r2, [r3, #8]
    pSpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8005672:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <RadioSpiInit+0x68>)
 8005674:	2200      	movs	r2, #0
 8005676:	615a      	str	r2, [r3, #20]
    pSpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <RadioSpiInit+0x68>)
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
    pSpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 800567e:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <RadioSpiInit+0x68>)
 8005680:	2200      	movs	r2, #0
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
    pSpiHandle.Init.CRCPolynomial     = 7;
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <RadioSpiInit+0x68>)
 8005686:	2207      	movs	r2, #7
 8005688:	62da      	str	r2, [r3, #44]	; 0x2c
    pSpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <RadioSpiInit+0x68>)
 800568c:	2200      	movs	r2, #0
 800568e:	60da      	str	r2, [r3, #12]
    pSpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8005690:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <RadioSpiInit+0x68>)
 8005692:	2200      	movs	r2, #0
 8005694:	621a      	str	r2, [r3, #32]
    pSpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <RadioSpiInit+0x68>)
 8005698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569c:	619a      	str	r2, [r3, #24]
    pSpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <RadioSpiInit+0x68>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24
    pSpiHandle.Init.Mode              = SPI_MODE_MASTER;
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <RadioSpiInit+0x68>)
 80056a6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056aa:	605a      	str	r2, [r3, #4]

    //HAL_SPI_MspInit(&pSpiHandle);
    HAL_SPI_Init(&pSpiHandle);
 80056ac:	4802      	ldr	r0, [pc, #8]	; (80056b8 <RadioSpiInit+0x68>)
 80056ae:	f001 fc91 	bl	8006fd4 <HAL_SPI_Init>
  }
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000704 	.word	0x20000704
 80056bc:	40013000 	.word	0x40013000

080056c0 <SPI_Write>:
* @brief  SPI Write a byte to device
* @param  Value: value to be written
* @retval None
*/
static void SPI_Write(uint8_t Value)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 80056ce:	bf00      	nop
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <SPI_Write+0x44>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d1f8      	bne.n	80056d0 <SPI_Write+0x10>
  status = HAL_SPI_Transmit(&pSpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <SPI_Write+0x48>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1df9      	adds	r1, r7, #7
 80056e4:	2201      	movs	r2, #1
 80056e6:	4807      	ldr	r0, [pc, #28]	; (8005704 <SPI_Write+0x44>)
 80056e8:	f001 fd00 	bl	80070ec <HAL_SPI_Transmit>
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if (status != HAL_OK)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <SPI_Write+0x3a>
  {
    /* Execute user timeout callback */
    SPI_Error();
 80056f6:	f000 f809 	bl	800570c <SPI_Error>
  }
}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000704 	.word	0x20000704
 8005708:	2000026c 	.word	0x2000026c

0800570c <SPI_Error>:
* @brief  SPI error treatment function
* @param  None
* @retval None
*/
static void SPI_Error(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&pSpiHandle);
 8005710:	4803      	ldr	r0, [pc, #12]	; (8005720 <SPI_Error+0x14>)
 8005712:	f001 fcc3 	bl	800709c <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  RadioSpiInit();
 8005716:	f7ff ff9b 	bl	8005650 <RadioSpiInit>
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000704 	.word	0x20000704

08005724 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af02      	add	r7, sp, #8
 800572a:	4603      	mov	r3, r0
 800572c:	603a      	str	r2, [r7, #0]
 800572e:	71fb      	strb	r3, [r7, #7]
 8005730:	460b      	mov	r3, r1
 8005732:	71bb      	strb	r3, [r7, #6]
  uint8_t aHeader[2] = {0};
 8005734:	2300      	movs	r3, #0
 8005736:	823b      	strh	r3, [r7, #16]
  uint16_t tmpstatus = 0x0000;
 8005738:	2300      	movs	r3, #0
 800573a:	81fb      	strh	r3, [r7, #14]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus=(StatusBytes *)&tmpstatus;
 800573c:	f107 030e 	add.w	r3, r7, #14
 8005740:	61bb      	str	r3, [r7, #24]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8005742:	2300      	movs	r3, #0
 8005744:	743b      	strb	r3, [r7, #16]
  aHeader[1] = cRegAddress;
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 800574a:	2300      	movs	r3, #0
 800574c:	2204      	movs	r2, #4
 800574e:	2104      	movs	r1, #4
 8005750:	2003      	movs	r0, #3
 8005752:	f7ff ff0b 	bl	800556c <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8005756:	f7fc fc0f 	bl	8001f78 <bandSelect>
 800575a:	4603      	mov	r3, r0
 800575c:	81bb      	strh	r3, [r7, #12]
  if(selectedBand.conf_868 == SET)
 800575e:	7b3b      	ldrb	r3, [r7, #12]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10a      	bne.n	800577a <RadioSpiWriteRegisters+0x56>
  {
	  RadioSpiHCSLow();
 8005764:	2200      	movs	r2, #0
 8005766:	2140      	movs	r1, #64	; 0x40
 8005768:	4841      	ldr	r0, [pc, #260]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 800576a:	f000 ff85 	bl	8006678 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 800576e:	2201      	movs	r2, #1
 8005770:	2120      	movs	r1, #32
 8005772:	483f      	ldr	r0, [pc, #252]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 8005774:	f000 ff80 	bl	8006678 <HAL_GPIO_WritePin>
 8005778:	e017      	b.n	80057aa <RadioSpiWriteRegisters+0x86>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 800577a:	7b7b      	ldrb	r3, [r7, #13]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10a      	bne.n	8005796 <RadioSpiWriteRegisters+0x72>
	  {
		  RadioSpiHCSHigh();
 8005780:	2201      	movs	r2, #1
 8005782:	2140      	movs	r1, #64	; 0x40
 8005784:	483a      	ldr	r0, [pc, #232]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 8005786:	f000 ff77 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 800578a:	2200      	movs	r2, #0
 800578c:	2120      	movs	r1, #32
 800578e:	4838      	ldr	r0, [pc, #224]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 8005790:	f000 ff72 	bl	8006678 <HAL_GPIO_WritePin>
 8005794:	e009      	b.n	80057aa <RadioSpiWriteRegisters+0x86>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8005796:	2200      	movs	r2, #0
 8005798:	2140      	movs	r1, #64	; 0x40
 800579a:	4835      	ldr	r0, [pc, #212]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 800579c:	f000 ff6c 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 80057a0:	2201      	movs	r2, #1
 80057a2:	2120      	movs	r1, #32
 80057a4:	4832      	ldr	r0, [pc, #200]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 80057a6:	f000 ff67 	bl	8006678 <HAL_GPIO_WritePin>
	  }
  }
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 80057aa:	2300      	movs	r3, #0
 80057ac:	817b      	strh	r3, [r7, #10]
 80057ae:	e004      	b.n	80057ba <RadioSpiWriteRegisters+0x96>
 80057b0:	897b      	ldrh	r3, [r7, #10]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3301      	adds	r3, #1
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	817b      	strh	r3, [r7, #10]
 80057ba:	897b      	ldrh	r3, [r7, #10]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c2:	d3f5      	bcc.n	80057b0 <RadioSpiWriteRegisters+0x8c>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 80057c4:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <RadioSpiWriteRegisters+0x150>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f107 020e 	add.w	r2, r7, #14
 80057cc:	f107 0110 	add.w	r1, r7, #16
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2301      	movs	r3, #1
 80057d4:	4828      	ldr	r0, [pc, #160]	; (8005878 <RadioSpiWriteRegisters+0x154>)
 80057d6:	f001 fdbd 	bl	8007354 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 80057da:	89fb      	ldrh	r3, [r7, #14]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	b29b      	uxth	r3, r3
 80057e0:	81fb      	strh	r3, [r7, #14]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <RadioSpiWriteRegisters+0x150>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f107 000e 	add.w	r0, r7, #14
 80057ea:	f107 0210 	add.w	r2, r7, #16
 80057ee:	1c51      	adds	r1, r2, #1
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2301      	movs	r3, #1
 80057f4:	4602      	mov	r2, r0
 80057f6:	4820      	ldr	r0, [pc, #128]	; (8005878 <RadioSpiWriteRegisters+0x154>)
 80057f8:	f001 fdac 	bl	8007354 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	e009      	b.n	8005816 <RadioSpiWriteRegisters+0xf2>
  {
    SPI_Write(pcBuffer[index]);
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	4413      	add	r3, r2
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff ff58 	bl	80056c0 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	3301      	adds	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	79bb      	ldrb	r3, [r7, #6]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	429a      	cmp	r2, r3
 800581c:	dbf1      	blt.n	8005802 <RadioSpiWriteRegisters+0xde>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 800581e:	bf00      	nop
 8005820:	4b15      	ldr	r3, [pc, #84]	; (8005878 <RadioSpiWriteRegisters+0x154>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d1f8      	bne.n	8005820 <RadioSpiWriteRegisters+0xfc>
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 800582e:	2201      	movs	r2, #1
 8005830:	2140      	movs	r1, #64	; 0x40
 8005832:	480f      	ldr	r0, [pc, #60]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 8005834:	f000 ff20 	bl	8006678 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8005838:	2201      	movs	r2, #1
 800583a:	2120      	movs	r1, #32
 800583c:	480c      	ldr	r0, [pc, #48]	; (8005870 <RadioSpiWriteRegisters+0x14c>)
 800583e:	f000 ff1b 	bl	8006678 <HAL_GPIO_WritePin>

  
  SPI_EXIT_CRITICAL();
 8005842:	2301      	movs	r3, #1
 8005844:	2204      	movs	r2, #4
 8005846:	2104      	movs	r1, #4
 8005848:	2003      	movs	r0, #3
 800584a:	f7ff fe8f 	bl	800556c <RadioGpioInterruptCmd>
  
  return *pStatus;
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	f107 0314 	add.w	r3, r7, #20
 8005854:	8812      	ldrh	r2, [r2, #0]
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	7d3a      	ldrb	r2, [r7, #20]
 800585c:	f362 0307 	bfi	r3, r2, #0, #8
 8005860:	7d7a      	ldrb	r2, [r7, #21]
 8005862:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40020400 	.word	0x40020400
 8005874:	2000026c 	.word	0x2000026c
 8005878:	20000704 	.word	0x20000704

0800587c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval StatusBytes
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af02      	add	r7, sp, #8
 8005882:	4603      	mov	r3, r0
 8005884:	603a      	str	r2, [r7, #0]
 8005886:	71fb      	strb	r3, [r7, #7]
 8005888:	460b      	mov	r3, r1
 800588a:	71bb      	strb	r3, [r7, #6]
  uint16_t tmpstatus = 0x00;
 800588c:	2300      	movs	r3, #0
 800588e:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8005890:	f107 0312 	add.w	r3, r7, #18
 8005894:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8005896:	2300      	movs	r3, #0
 8005898:	81bb      	strh	r3, [r7, #12]
  uint8_t dummy = 0xFF;
 800589a:	23ff      	movs	r3, #255	; 0xff
 800589c:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0] = READ_HEADER;
 800589e:	2301      	movs	r3, #1
 80058a0:	733b      	strb	r3, [r7, #12]
  aHeader[1] = cRegAddress;
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 80058a6:	2300      	movs	r3, #0
 80058a8:	2204      	movs	r2, #4
 80058aa:	2104      	movs	r1, #4
 80058ac:	2003      	movs	r0, #3
 80058ae:	f7ff fe5d 	bl	800556c <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 80058b2:	f7fc fb61 	bl	8001f78 <bandSelect>
 80058b6:	4603      	mov	r3, r0
 80058b8:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 80058ba:	7c3b      	ldrb	r3, [r7, #16]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d10a      	bne.n	80058d6 <RadioSpiReadRegisters+0x5a>
  {
	  RadioSpiHCSLow();
 80058c0:	2200      	movs	r2, #0
 80058c2:	2140      	movs	r1, #64	; 0x40
 80058c4:	4843      	ldr	r0, [pc, #268]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 80058c6:	f000 fed7 	bl	8006678 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 80058ca:	2201      	movs	r2, #1
 80058cc:	2120      	movs	r1, #32
 80058ce:	4841      	ldr	r0, [pc, #260]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 80058d0:	f000 fed2 	bl	8006678 <HAL_GPIO_WritePin>
 80058d4:	e017      	b.n	8005906 <RadioSpiReadRegisters+0x8a>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 80058d6:	7c7b      	ldrb	r3, [r7, #17]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d10a      	bne.n	80058f2 <RadioSpiReadRegisters+0x76>
	  {
		  RadioSpiHCSHigh();
 80058dc:	2201      	movs	r2, #1
 80058de:	2140      	movs	r1, #64	; 0x40
 80058e0:	483c      	ldr	r0, [pc, #240]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 80058e2:	f000 fec9 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 80058e6:	2200      	movs	r2, #0
 80058e8:	2120      	movs	r1, #32
 80058ea:	483a      	ldr	r0, [pc, #232]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 80058ec:	f000 fec4 	bl	8006678 <HAL_GPIO_WritePin>
 80058f0:	e009      	b.n	8005906 <RadioSpiReadRegisters+0x8a>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 80058f2:	2200      	movs	r2, #0
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	4837      	ldr	r0, [pc, #220]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 80058f8:	f000 febe 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 80058fc:	2201      	movs	r2, #1
 80058fe:	2120      	movs	r1, #32
 8005900:	4834      	ldr	r0, [pc, #208]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 8005902:	f000 feb9 	bl	8006678 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8005906:	2300      	movs	r3, #0
 8005908:	813b      	strh	r3, [r7, #8]
 800590a:	e004      	b.n	8005916 <RadioSpiReadRegisters+0x9a>
 800590c:	893b      	ldrh	r3, [r7, #8]
 800590e:	b29b      	uxth	r3, r3
 8005910:	3301      	adds	r3, #1
 8005912:	b29b      	uxth	r3, r3
 8005914:	813b      	strh	r3, [r7, #8]
 8005916:	893b      	ldrh	r3, [r7, #8]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591e:	d3f5      	bcc.n	800590c <RadioSpiReadRegisters+0x90>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8005920:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <RadioSpiReadRegisters+0x15c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f107 0212 	add.w	r2, r7, #18
 8005928:	f107 010c 	add.w	r1, r7, #12
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2301      	movs	r3, #1
 8005930:	482a      	ldr	r0, [pc, #168]	; (80059dc <RadioSpiReadRegisters+0x160>)
 8005932:	f001 fd0f 	bl	8007354 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8005936:	8a7b      	ldrh	r3, [r7, #18]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	b29b      	uxth	r3, r3
 800593c:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800593e:	4b26      	ldr	r3, [pc, #152]	; (80059d8 <RadioSpiReadRegisters+0x15c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f107 0012 	add.w	r0, r7, #18
 8005946:	f107 020c 	add.w	r2, r7, #12
 800594a:	1c51      	adds	r1, r2, #1
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	2301      	movs	r3, #1
 8005950:	4602      	mov	r2, r0
 8005952:	4822      	ldr	r0, [pc, #136]	; (80059dc <RadioSpiReadRegisters+0x160>)
 8005954:	f001 fcfe 	bl	8007354 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e00e      	b.n	800597c <RadioSpiReadRegisters+0x100>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&(pcBuffer)[index], 1, SpiTimeout);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	441a      	add	r2, r3
 8005964:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <RadioSpiReadRegisters+0x15c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f107 010b 	add.w	r1, r7, #11
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2301      	movs	r3, #1
 8005970:	481a      	ldr	r0, [pc, #104]	; (80059dc <RadioSpiReadRegisters+0x160>)
 8005972:	f001 fcef 	bl	8007354 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3301      	adds	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	79bb      	ldrb	r3, [r7, #6]
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	429a      	cmp	r2, r3
 8005982:	dbec      	blt.n	800595e <RadioSpiReadRegisters+0xe2>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8005984:	bf00      	nop
 8005986:	4b15      	ldr	r3, [pc, #84]	; (80059dc <RadioSpiReadRegisters+0x160>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d1f8      	bne.n	8005986 <RadioSpiReadRegisters+0x10a>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8005994:	2201      	movs	r2, #1
 8005996:	2140      	movs	r1, #64	; 0x40
 8005998:	480e      	ldr	r0, [pc, #56]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 800599a:	f000 fe6d 	bl	8006678 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 800599e:	2201      	movs	r2, #1
 80059a0:	2120      	movs	r1, #32
 80059a2:	480c      	ldr	r0, [pc, #48]	; (80059d4 <RadioSpiReadRegisters+0x158>)
 80059a4:	f000 fe68 	bl	8006678 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80059a8:	2301      	movs	r3, #1
 80059aa:	2204      	movs	r2, #4
 80059ac:	2104      	movs	r1, #4
 80059ae:	2003      	movs	r0, #3
 80059b0:	f7ff fddc 	bl	800556c <RadioGpioInterruptCmd>
  
  return *pStatus;
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	f107 0314 	add.w	r3, r7, #20
 80059ba:	8812      	ldrh	r2, [r2, #0]
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	2300      	movs	r3, #0
 80059c0:	7d3a      	ldrb	r2, [r7, #20]
 80059c2:	f362 0307 	bfi	r3, r2, #0, #8
 80059c6:	7d7a      	ldrb	r2, [r7, #21]
 80059c8:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40020400 	.word	0x40020400
 80059d8:	2000026c 	.word	0x2000026c
 80059dc:	20000704 	.word	0x20000704

080059e0 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval StatusBytes
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
  uint8_t aHeader[2] = {0};
 80059ea:	2300      	movs	r3, #0
 80059ec:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpstatus = 0x0000;
 80059ee:	2300      	movs	r3, #0
 80059f0:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 80059f2:	f107 0312 	add.w	r3, r7, #18
 80059f6:	61fb      	str	r3, [r7, #28]
  
  /* Built the aHeader bytes */
  aHeader[0] = COMMAND_HEADER;
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	753b      	strb	r3, [r7, #20]
  aHeader[1] = cCommandCode;
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	757b      	strb	r3, [r7, #21]
  
  SPI_ENTER_CRITICAL();
 8005a00:	2300      	movs	r3, #0
 8005a02:	2204      	movs	r2, #4
 8005a04:	2104      	movs	r1, #4
 8005a06:	2003      	movs	r0, #3
 8005a08:	f7ff fdb0 	bl	800556c <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8005a0c:	f7fc fab4 	bl	8001f78 <bandSelect>
 8005a10:	4603      	mov	r3, r0
 8005a12:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8005a14:	7c3b      	ldrb	r3, [r7, #16]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10a      	bne.n	8005a30 <RadioSpiCommandStrobes+0x50>
  {
	  RadioSpiHCSLow();
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2140      	movs	r1, #64	; 0x40
 8005a1e:	4839      	ldr	r0, [pc, #228]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005a20:	f000 fe2a 	bl	8006678 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8005a24:	2201      	movs	r2, #1
 8005a26:	2120      	movs	r1, #32
 8005a28:	4836      	ldr	r0, [pc, #216]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005a2a:	f000 fe25 	bl	8006678 <HAL_GPIO_WritePin>
 8005a2e:	e017      	b.n	8005a60 <RadioSpiCommandStrobes+0x80>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8005a30:	7c7b      	ldrb	r3, [r7, #17]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d10a      	bne.n	8005a4c <RadioSpiCommandStrobes+0x6c>
	  {
		  RadioSpiHCSHigh();
 8005a36:	2201      	movs	r2, #1
 8005a38:	2140      	movs	r1, #64	; 0x40
 8005a3a:	4832      	ldr	r0, [pc, #200]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005a3c:	f000 fe1c 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8005a40:	2200      	movs	r2, #0
 8005a42:	2120      	movs	r1, #32
 8005a44:	482f      	ldr	r0, [pc, #188]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005a46:	f000 fe17 	bl	8006678 <HAL_GPIO_WritePin>
 8005a4a:	e009      	b.n	8005a60 <RadioSpiCommandStrobes+0x80>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2140      	movs	r1, #64	; 0x40
 8005a50:	482c      	ldr	r0, [pc, #176]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005a52:	f000 fe11 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8005a56:	2201      	movs	r2, #1
 8005a58:	2120      	movs	r1, #32
 8005a5a:	482a      	ldr	r0, [pc, #168]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005a5c:	f000 fe0c 	bl	8006678 <HAL_GPIO_WritePin>
	  }
  }

  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8005a60:	2300      	movs	r3, #0
 8005a62:	81fb      	strh	r3, [r7, #14]
 8005a64:	e004      	b.n	8005a70 <RadioSpiCommandStrobes+0x90>
 8005a66:	89fb      	ldrh	r3, [r7, #14]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	81fb      	strh	r3, [r7, #14]
 8005a70:	89fb      	ldrh	r3, [r7, #14]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a78:	d3f5      	bcc.n	8005a66 <RadioSpiCommandStrobes+0x86>
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005a7a:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <RadioSpiCommandStrobes+0x128>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f107 0212 	add.w	r2, r7, #18
 8005a82:	f107 0114 	add.w	r1, r7, #20
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4820      	ldr	r0, [pc, #128]	; (8005b0c <RadioSpiCommandStrobes+0x12c>)
 8005a8c:	f001 fc62 	bl	8007354 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8005a90:	8a7b      	ldrh	r3, [r7, #18]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005a98:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <RadioSpiCommandStrobes+0x128>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f107 0012 	add.w	r0, r7, #18
 8005aa0:	f107 0214 	add.w	r2, r7, #20
 8005aa4:	1c51      	adds	r1, r2, #1
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4602      	mov	r2, r0
 8005aac:	4817      	ldr	r0, [pc, #92]	; (8005b0c <RadioSpiCommandStrobes+0x12c>)
 8005aae:	f001 fc51 	bl	8007354 <HAL_SPI_TransmitReceive>
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8005ab2:	bf00      	nop
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <RadioSpiCommandStrobes+0x12c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d1f8      	bne.n	8005ab4 <RadioSpiCommandStrobes+0xd4>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2140      	movs	r1, #64	; 0x40
 8005ac6:	480f      	ldr	r0, [pc, #60]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005ac8:	f000 fdd6 	bl	8006678 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8005acc:	2201      	movs	r2, #1
 8005ace:	2120      	movs	r1, #32
 8005ad0:	480c      	ldr	r0, [pc, #48]	; (8005b04 <RadioSpiCommandStrobes+0x124>)
 8005ad2:	f000 fdd1 	bl	8006678 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	2204      	movs	r2, #4
 8005ada:	2104      	movs	r1, #4
 8005adc:	2003      	movs	r0, #3
 8005ade:	f7ff fd45 	bl	800556c <RadioGpioInterruptCmd>
  
  return *pStatus;
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	f107 0318 	add.w	r3, r7, #24
 8005ae8:	8812      	ldrh	r2, [r2, #0]
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	7e3a      	ldrb	r2, [r7, #24]
 8005af0:	f362 0307 	bfi	r3, r2, #0, #8
 8005af4:	7e7a      	ldrb	r2, [r7, #25]
 8005af6:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40020400 	.word	0x40020400
 8005b08:	2000026c 	.word	0x2000026c
 8005b0c:	20000704 	.word	0x20000704

08005b10 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	4603      	mov	r3, r0
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;

  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8005b20:	f107 0312 	add.w	r3, r7, #18
 8005b24:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8005b26:	2300      	movs	r3, #0
 8005b28:	81bb      	strh	r3, [r7, #12]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	733b      	strb	r3, [r7, #12]
  aHeader[1] = LINEAR_FIFO_ADDRESS;
 8005b2e:	23ff      	movs	r3, #255	; 0xff
 8005b30:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8005b32:	2300      	movs	r3, #0
 8005b34:	2204      	movs	r2, #4
 8005b36:	2104      	movs	r1, #4
 8005b38:	2003      	movs	r0, #3
 8005b3a:	f7ff fd17 	bl	800556c <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8005b3e:	f7fc fa1b 	bl	8001f78 <bandSelect>
 8005b42:	4603      	mov	r3, r0
 8005b44:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8005b46:	7c3b      	ldrb	r3, [r7, #16]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d10a      	bne.n	8005b62 <RadioSpiWriteFifo+0x52>
  {
	  RadioSpiHCSLow();
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2140      	movs	r1, #64	; 0x40
 8005b50:	4841      	ldr	r0, [pc, #260]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005b52:	f000 fd91 	bl	8006678 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8005b56:	2201      	movs	r2, #1
 8005b58:	2120      	movs	r1, #32
 8005b5a:	483f      	ldr	r0, [pc, #252]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005b5c:	f000 fd8c 	bl	8006678 <HAL_GPIO_WritePin>
 8005b60:	e017      	b.n	8005b92 <RadioSpiWriteFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8005b62:	7c7b      	ldrb	r3, [r7, #17]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d10a      	bne.n	8005b7e <RadioSpiWriteFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 8005b68:	2201      	movs	r2, #1
 8005b6a:	2140      	movs	r1, #64	; 0x40
 8005b6c:	483a      	ldr	r0, [pc, #232]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005b6e:	f000 fd83 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8005b72:	2200      	movs	r2, #0
 8005b74:	2120      	movs	r1, #32
 8005b76:	4838      	ldr	r0, [pc, #224]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005b78:	f000 fd7e 	bl	8006678 <HAL_GPIO_WritePin>
 8005b7c:	e009      	b.n	8005b92 <RadioSpiWriteFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	4835      	ldr	r0, [pc, #212]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005b84:	f000 fd78 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8005b88:	2201      	movs	r2, #1
 8005b8a:	2120      	movs	r1, #32
 8005b8c:	4832      	ldr	r0, [pc, #200]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005b8e:	f000 fd73 	bl	8006678 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8005b92:	2300      	movs	r3, #0
 8005b94:	817b      	strh	r3, [r7, #10]
 8005b96:	e004      	b.n	8005ba2 <RadioSpiWriteFifo+0x92>
 8005b98:	897b      	ldrh	r3, [r7, #10]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	817b      	strh	r3, [r7, #10]
 8005ba2:	897b      	ldrh	r3, [r7, #10]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005baa:	d3f5      	bcc.n	8005b98 <RadioSpiWriteFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005bac:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <RadioSpiWriteFifo+0x14c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f107 0212 	add.w	r2, r7, #18
 8005bb4:	f107 010c 	add.w	r1, r7, #12
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4828      	ldr	r0, [pc, #160]	; (8005c60 <RadioSpiWriteFifo+0x150>)
 8005bbe:	f001 fbc9 	bl	8007354 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8005bc2:	8a7b      	ldrh	r3, [r7, #18]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <RadioSpiWriteFifo+0x14c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f107 0012 	add.w	r0, r7, #18
 8005bd2:	f107 020c 	add.w	r2, r7, #12
 8005bd6:	1c51      	adds	r1, r2, #1
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4820      	ldr	r0, [pc, #128]	; (8005c60 <RadioSpiWriteFifo+0x150>)
 8005be0:	f001 fbb8 	bl	8007354 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e009      	b.n	8005bfe <RadioSpiWriteFifo+0xee>
  {
    SPI_Write(pcBuffer[index]);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	4413      	add	r3, r2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fd64 	bl	80056c0 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	dbf1      	blt.n	8005bea <RadioSpiWriteFifo+0xda>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET); 
 8005c06:	bf00      	nop
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <RadioSpiWriteFifo+0x150>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d1f8      	bne.n	8005c08 <RadioSpiWriteFifo+0xf8>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8005c16:	2201      	movs	r2, #1
 8005c18:	2140      	movs	r1, #64	; 0x40
 8005c1a:	480f      	ldr	r0, [pc, #60]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005c1c:	f000 fd2c 	bl	8006678 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8005c20:	2201      	movs	r2, #1
 8005c22:	2120      	movs	r1, #32
 8005c24:	480c      	ldr	r0, [pc, #48]	; (8005c58 <RadioSpiWriteFifo+0x148>)
 8005c26:	f000 fd27 	bl	8006678 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	2104      	movs	r1, #4
 8005c30:	2003      	movs	r0, #3
 8005c32:	f7ff fc9b 	bl	800556c <RadioGpioInterruptCmd>
  
  return *pStatus; 
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	f107 0314 	add.w	r3, r7, #20
 8005c3c:	8812      	ldrh	r2, [r2, #0]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	2300      	movs	r3, #0
 8005c42:	7d3a      	ldrb	r2, [r7, #20]
 8005c44:	f362 0307 	bfi	r3, r2, #0, #8
 8005c48:	7d7a      	ldrb	r2, [r7, #21]
 8005c4a:	f362 230f 	bfi	r3, r2, #8, #8
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40020400 	.word	0x40020400
 8005c5c:	2000026c 	.word	0x2000026c
 8005c60:	20000704 	.word	0x20000704

08005c64 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval StatusBytes
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 8005c70:	2300      	movs	r3, #0
 8005c72:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8005c74:	f107 0312 	add.w	r3, r7, #18
 8005c78:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2];
  uint8_t dummy=0xFF;
 8005c7a:	23ff      	movs	r3, #255	; 0xff
 8005c7c:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0]=READ_HEADER;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	733b      	strb	r3, [r7, #12]
  aHeader[1]=LINEAR_FIFO_ADDRESS;
 8005c82:	23ff      	movs	r3, #255	; 0xff
 8005c84:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8005c86:	2300      	movs	r3, #0
 8005c88:	2204      	movs	r2, #4
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	2003      	movs	r0, #3
 8005c8e:	f7ff fc6d 	bl	800556c <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8005c92:	f7fc f971 	bl	8001f78 <bandSelect>
 8005c96:	4603      	mov	r3, r0
 8005c98:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8005c9a:	7c3b      	ldrb	r3, [r7, #16]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10a      	bne.n	8005cb6 <RadioSpiReadFifo+0x52>
  {
	  RadioSpiHCSLow();
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2140      	movs	r1, #64	; 0x40
 8005ca4:	4843      	ldr	r0, [pc, #268]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005ca6:	f000 fce7 	bl	8006678 <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8005caa:	2201      	movs	r2, #1
 8005cac:	2120      	movs	r1, #32
 8005cae:	4841      	ldr	r0, [pc, #260]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005cb0:	f000 fce2 	bl	8006678 <HAL_GPIO_WritePin>
 8005cb4:	e017      	b.n	8005ce6 <RadioSpiReadFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8005cb6:	7c7b      	ldrb	r3, [r7, #17]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d10a      	bne.n	8005cd2 <RadioSpiReadFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	2140      	movs	r1, #64	; 0x40
 8005cc0:	483c      	ldr	r0, [pc, #240]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005cc2:	f000 fcd9 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2120      	movs	r1, #32
 8005cca:	483a      	ldr	r0, [pc, #232]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005ccc:	f000 fcd4 	bl	8006678 <HAL_GPIO_WritePin>
 8005cd0:	e009      	b.n	8005ce6 <RadioSpiReadFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	4837      	ldr	r0, [pc, #220]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005cd8:	f000 fcce 	bl	8006678 <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8005cdc:	2201      	movs	r2, #1
 8005cde:	2120      	movs	r1, #32
 8005ce0:	4834      	ldr	r0, [pc, #208]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005ce2:	f000 fcc9 	bl	8006678 <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	813b      	strh	r3, [r7, #8]
 8005cea:	e004      	b.n	8005cf6 <RadioSpiReadFifo+0x92>
 8005cec:	893b      	ldrh	r3, [r7, #8]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	813b      	strh	r3, [r7, #8]
 8005cf6:	893b      	ldrh	r3, [r7, #8]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfe:	d3f5      	bcc.n	8005cec <RadioSpiReadFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005d00:	4b2d      	ldr	r3, [pc, #180]	; (8005db8 <RadioSpiReadFifo+0x154>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f107 0212 	add.w	r2, r7, #18
 8005d08:	f107 010c 	add.w	r1, r7, #12
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	2301      	movs	r3, #1
 8005d10:	482a      	ldr	r0, [pc, #168]	; (8005dbc <RadioSpiReadFifo+0x158>)
 8005d12:	f001 fb1f 	bl	8007354 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8005d16:	8a7b      	ldrh	r3, [r7, #18]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005d1e:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <RadioSpiReadFifo+0x154>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f107 0012 	add.w	r0, r7, #18
 8005d26:	f107 020c 	add.w	r2, r7, #12
 8005d2a:	1c51      	adds	r1, r2, #1
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4602      	mov	r2, r0
 8005d32:	4822      	ldr	r0, [pc, #136]	; (8005dbc <RadioSpiReadFifo+0x158>)
 8005d34:	f001 fb0e 	bl	8007354 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	e00e      	b.n	8005d5c <RadioSpiReadFifo+0xf8>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&pcBuffer[index], 1, SpiTimeout);
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	441a      	add	r2, r3
 8005d44:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <RadioSpiReadFifo+0x154>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f107 010b 	add.w	r1, r7, #11
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	481a      	ldr	r0, [pc, #104]	; (8005dbc <RadioSpiReadFifo+0x158>)
 8005d52:	f001 faff 	bl	8007354 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	dbec      	blt.n	8005d3e <RadioSpiReadFifo+0xda>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while(__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8005d64:	bf00      	nop
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <RadioSpiReadFifo+0x158>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d1f8      	bne.n	8005d66 <RadioSpiReadFifo+0x102>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8005d74:	2201      	movs	r2, #1
 8005d76:	2140      	movs	r1, #64	; 0x40
 8005d78:	480e      	ldr	r0, [pc, #56]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005d7a:	f000 fc7d 	bl	8006678 <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2120      	movs	r1, #32
 8005d82:	480c      	ldr	r0, [pc, #48]	; (8005db4 <RadioSpiReadFifo+0x150>)
 8005d84:	f000 fc78 	bl	8006678 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8005d88:	2301      	movs	r3, #1
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	2003      	movs	r0, #3
 8005d90:	f7ff fbec 	bl	800556c <RadioGpioInterruptCmd>
  
  return *pStatus;  
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	8812      	ldrh	r2, [r2, #0]
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	7d3a      	ldrb	r2, [r7, #20]
 8005da2:	f362 0307 	bfi	r3, r2, #0, #8
 8005da6:	7d7a      	ldrb	r2, [r7, #21]
 8005da8:	f362 230f 	bfi	r3, r2, #8, #8
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40020400 	.word	0x40020400
 8005db8:	2000026c 	.word	0x2000026c
 8005dbc:	20000704 	.word	0x20000704

08005dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <HAL_Init+0x40>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <HAL_Init+0x40>)
 8005dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <HAL_Init+0x40>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <HAL_Init+0x40>)
 8005dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ddc:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <HAL_Init+0x40>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a07      	ldr	r2, [pc, #28]	; (8005e00 <HAL_Init+0x40>)
 8005de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005de8:	2003      	movs	r0, #3
 8005dea:	f000 f96f 	bl	80060cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dee:	2000      	movs	r0, #0
 8005df0:	f000 f808 	bl	8005e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005df4:	f7fc fb28 	bl	8002448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023c00 	.word	0x40023c00

08005e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e0c:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <HAL_InitTick+0x54>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_InitTick+0x58>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	4619      	mov	r1, r3
 8005e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f995 	bl	8006152 <HAL_SYSTICK_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e00e      	b.n	8005e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b0f      	cmp	r3, #15
 8005e36:	d80a      	bhi.n	8005e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	f000 f94f 	bl	80060e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e44:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <HAL_InitTick+0x5c>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e000      	b.n	8005e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000248 	.word	0x20000248
 8005e5c:	20000274 	.word	0x20000274
 8005e60:	20000270 	.word	0x20000270

08005e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_IncTick+0x20>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_IncTick+0x24>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4413      	add	r3, r2
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <HAL_IncTick+0x24>)
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000274 	.word	0x20000274
 8005e88:	2000075c 	.word	0x2000075c

08005e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <HAL_GetTick+0x14>)
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	2000075c 	.word	0x2000075c

08005ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005eac:	f7ff ffee 	bl	8005e8c <HAL_GetTick>
 8005eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d005      	beq.n	8005eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_Delay+0x40>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005eca:	bf00      	nop
 8005ecc:	f7ff ffde 	bl	8005e8c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d8f7      	bhi.n	8005ecc <HAL_Delay+0x28>
  {
  }
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000274 	.word	0x20000274

08005ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <__NVIC_SetPriorityGrouping+0x44>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f04:	4013      	ands	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f1a:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <__NVIC_SetPriorityGrouping+0x44>)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	60d3      	str	r3, [r2, #12]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000ed00 	.word	0xe000ed00

08005f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <__NVIC_GetPriorityGrouping+0x18>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	0a1b      	lsrs	r3, r3, #8
 8005f3a:	f003 0307 	and.w	r3, r3, #7
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000ed00 	.word	0xe000ed00

08005f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	db0b      	blt.n	8005f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	f003 021f 	and.w	r2, r3, #31
 8005f64:	4907      	ldr	r1, [pc, #28]	; (8005f84 <__NVIC_EnableIRQ+0x38>)
 8005f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	e000e100 	.word	0xe000e100

08005f88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	db10      	blt.n	8005fbc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	f003 021f 	and.w	r2, r3, #31
 8005fa0:	4909      	ldr	r1, [pc, #36]	; (8005fc8 <__NVIC_DisableIRQ+0x40>)
 8005fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	2001      	movs	r0, #1
 8005faa:	fa00 f202 	lsl.w	r2, r0, r2
 8005fae:	3320      	adds	r3, #32
 8005fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005fb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005fb8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	e000e100 	.word	0xe000e100

08005fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db0a      	blt.n	8005ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	490c      	ldr	r1, [pc, #48]	; (8006018 <__NVIC_SetPriority+0x4c>)
 8005fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fea:	0112      	lsls	r2, r2, #4
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	440b      	add	r3, r1
 8005ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff4:	e00a      	b.n	800600c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4908      	ldr	r1, [pc, #32]	; (800601c <__NVIC_SetPriority+0x50>)
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	3b04      	subs	r3, #4
 8006004:	0112      	lsls	r2, r2, #4
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	440b      	add	r3, r1
 800600a:	761a      	strb	r2, [r3, #24]
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	e000e100 	.word	0xe000e100
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f1c3 0307 	rsb	r3, r3, #7
 800603a:	2b04      	cmp	r3, #4
 800603c:	bf28      	it	cs
 800603e:	2304      	movcs	r3, #4
 8006040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3304      	adds	r3, #4
 8006046:	2b06      	cmp	r3, #6
 8006048:	d902      	bls.n	8006050 <NVIC_EncodePriority+0x30>
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3b03      	subs	r3, #3
 800604e:	e000      	b.n	8006052 <NVIC_EncodePriority+0x32>
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	401a      	ands	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006068:	f04f 31ff 	mov.w	r1, #4294967295
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	fa01 f303 	lsl.w	r3, r1, r3
 8006072:	43d9      	mvns	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006078:	4313      	orrs	r3, r2
         );
}
 800607a:	4618      	mov	r0, r3
 800607c:	3724      	adds	r7, #36	; 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3b01      	subs	r3, #1
 8006094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006098:	d301      	bcc.n	800609e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800609a:	2301      	movs	r3, #1
 800609c:	e00f      	b.n	80060be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800609e:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <SysTick_Config+0x40>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060a6:	210f      	movs	r1, #15
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	f7ff ff8e 	bl	8005fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <SysTick_Config+0x40>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060b6:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <SysTick_Config+0x40>)
 80060b8:	2207      	movs	r2, #7
 80060ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	e000e010 	.word	0xe000e010

080060cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ff07 	bl	8005ee8 <__NVIC_SetPriorityGrouping>
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	4603      	mov	r3, r0
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060f4:	f7ff ff1c 	bl	8005f30 <__NVIC_GetPriorityGrouping>
 80060f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f7ff ff8e 	bl	8006020 <NVIC_EncodePriority>
 8006104:	4602      	mov	r2, r0
 8006106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff5d 	bl	8005fcc <__NVIC_SetPriority>
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	4603      	mov	r3, r0
 8006122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff ff0f 	bl	8005f4c <__NVIC_EnableIRQ>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ff1f 	bl	8005f88 <__NVIC_DisableIRQ>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ff94 	bl	8006088 <SysTick_Config>
 8006160:	4603      	mov	r3, r0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d004      	beq.n	8006188 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2280      	movs	r2, #128	; 0x80
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e00c      	b.n	80061a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2205      	movs	r2, #5
 800618c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b089      	sub	sp, #36	; 0x24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e159      	b.n	8006480 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061cc:	2201      	movs	r2, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4013      	ands	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	f040 8148 	bne.w	800647a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d00b      	beq.n	800620a <HAL_GPIO_Init+0x5a>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d007      	beq.n	800620a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061fe:	2b11      	cmp	r3, #17
 8006200:	d003      	beq.n	800620a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b12      	cmp	r3, #18
 8006208:	d130      	bne.n	800626c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	2203      	movs	r2, #3
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4013      	ands	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4313      	orrs	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006240:	2201      	movs	r2, #1
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	43db      	mvns	r3, r3
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4013      	ands	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 0201 	and.w	r2, r3, #1
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4313      	orrs	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	2203      	movs	r2, #3
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	4013      	ands	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d003      	beq.n	80062ac <HAL_GPIO_Init+0xfc>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b12      	cmp	r3, #18
 80062aa:	d123      	bne.n	80062f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	08da      	lsrs	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3208      	adds	r2, #8
 80062b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	220f      	movs	r2, #15
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	08da      	lsrs	r2, r3, #3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3208      	adds	r2, #8
 80062ee:	69b9      	ldr	r1, [r7, #24]
 80062f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	2203      	movs	r2, #3
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0203 	and.w	r2, r3, #3
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80a2 	beq.w	800647a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	4b56      	ldr	r3, [pc, #344]	; (8006494 <HAL_GPIO_Init+0x2e4>)
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	4a55      	ldr	r2, [pc, #340]	; (8006494 <HAL_GPIO_Init+0x2e4>)
 8006340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006344:	6453      	str	r3, [r2, #68]	; 0x44
 8006346:	4b53      	ldr	r3, [pc, #332]	; (8006494 <HAL_GPIO_Init+0x2e4>)
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006352:	4a51      	ldr	r2, [pc, #324]	; (8006498 <HAL_GPIO_Init+0x2e8>)
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	3302      	adds	r3, #2
 800635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	220f      	movs	r2, #15
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	43db      	mvns	r3, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4013      	ands	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a48      	ldr	r2, [pc, #288]	; (800649c <HAL_GPIO_Init+0x2ec>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d019      	beq.n	80063b2 <HAL_GPIO_Init+0x202>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a47      	ldr	r2, [pc, #284]	; (80064a0 <HAL_GPIO_Init+0x2f0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <HAL_GPIO_Init+0x1fe>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a46      	ldr	r2, [pc, #280]	; (80064a4 <HAL_GPIO_Init+0x2f4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00d      	beq.n	80063aa <HAL_GPIO_Init+0x1fa>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a45      	ldr	r2, [pc, #276]	; (80064a8 <HAL_GPIO_Init+0x2f8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d007      	beq.n	80063a6 <HAL_GPIO_Init+0x1f6>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a44      	ldr	r2, [pc, #272]	; (80064ac <HAL_GPIO_Init+0x2fc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_GPIO_Init+0x1f2>
 800639e:	2304      	movs	r3, #4
 80063a0:	e008      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063a2:	2307      	movs	r3, #7
 80063a4:	e006      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063a6:	2303      	movs	r3, #3
 80063a8:	e004      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e002      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063b2:	2300      	movs	r3, #0
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	f002 0203 	and.w	r2, r2, #3
 80063ba:	0092      	lsls	r2, r2, #2
 80063bc:	4093      	lsls	r3, r2
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063c4:	4934      	ldr	r1, [pc, #208]	; (8006498 <HAL_GPIO_Init+0x2e8>)
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	089b      	lsrs	r3, r3, #2
 80063ca:	3302      	adds	r3, #2
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063d2:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <HAL_GPIO_Init+0x300>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063f6:	4a2e      	ldr	r2, [pc, #184]	; (80064b0 <HAL_GPIO_Init+0x300>)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063fc:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <HAL_GPIO_Init+0x300>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006420:	4a23      	ldr	r2, [pc, #140]	; (80064b0 <HAL_GPIO_Init+0x300>)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006426:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <HAL_GPIO_Init+0x300>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800644a:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <HAL_GPIO_Init+0x300>)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <HAL_GPIO_Init+0x300>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006474:	4a0e      	ldr	r2, [pc, #56]	; (80064b0 <HAL_GPIO_Init+0x300>)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3301      	adds	r3, #1
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	f67f aea2 	bls.w	80061cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006488:	bf00      	nop
 800648a:	3724      	adds	r7, #36	; 0x24
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40023800 	.word	0x40023800
 8006498:	40013800 	.word	0x40013800
 800649c:	40020000 	.word	0x40020000
 80064a0:	40020400 	.word	0x40020400
 80064a4:	40020800 	.word	0x40020800
 80064a8:	40020c00 	.word	0x40020c00
 80064ac:	40021000 	.word	0x40021000
 80064b0:	40013c00 	.word	0x40013c00

080064b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e0bb      	b.n	8006648 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064d0:	2201      	movs	r2, #1
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4013      	ands	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f040 80ab 	bne.w	8006642 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80064ec:	4a5b      	ldr	r2, [pc, #364]	; (800665c <HAL_GPIO_DeInit+0x1a8>)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	089b      	lsrs	r3, r3, #2
 80064f2:	3302      	adds	r3, #2
 80064f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	220f      	movs	r2, #15
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	4013      	ands	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a53      	ldr	r2, [pc, #332]	; (8006660 <HAL_GPIO_DeInit+0x1ac>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d019      	beq.n	800654a <HAL_GPIO_DeInit+0x96>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a52      	ldr	r2, [pc, #328]	; (8006664 <HAL_GPIO_DeInit+0x1b0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_GPIO_DeInit+0x92>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a51      	ldr	r2, [pc, #324]	; (8006668 <HAL_GPIO_DeInit+0x1b4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00d      	beq.n	8006542 <HAL_GPIO_DeInit+0x8e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a50      	ldr	r2, [pc, #320]	; (800666c <HAL_GPIO_DeInit+0x1b8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <HAL_GPIO_DeInit+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a4f      	ldr	r2, [pc, #316]	; (8006670 <HAL_GPIO_DeInit+0x1bc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <HAL_GPIO_DeInit+0x86>
 8006536:	2304      	movs	r3, #4
 8006538:	e008      	b.n	800654c <HAL_GPIO_DeInit+0x98>
 800653a:	2307      	movs	r3, #7
 800653c:	e006      	b.n	800654c <HAL_GPIO_DeInit+0x98>
 800653e:	2303      	movs	r3, #3
 8006540:	e004      	b.n	800654c <HAL_GPIO_DeInit+0x98>
 8006542:	2302      	movs	r3, #2
 8006544:	e002      	b.n	800654c <HAL_GPIO_DeInit+0x98>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <HAL_GPIO_DeInit+0x98>
 800654a:	2300      	movs	r3, #0
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	f002 0203 	and.w	r2, r2, #3
 8006552:	0092      	lsls	r2, r2, #2
 8006554:	4093      	lsls	r3, r2
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	429a      	cmp	r2, r3
 800655a:	d132      	bne.n	80065c2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800655c:	4b45      	ldr	r3, [pc, #276]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	43db      	mvns	r3, r3
 8006564:	4943      	ldr	r1, [pc, #268]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 8006566:	4013      	ands	r3, r2
 8006568:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800656a:	4b42      	ldr	r3, [pc, #264]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	43db      	mvns	r3, r3
 8006572:	4940      	ldr	r1, [pc, #256]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 8006574:	4013      	ands	r3, r2
 8006576:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006578:	4b3e      	ldr	r3, [pc, #248]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	43db      	mvns	r3, r3
 8006580:	493c      	ldr	r1, [pc, #240]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 8006582:	4013      	ands	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006586:	4b3b      	ldr	r3, [pc, #236]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	43db      	mvns	r3, r3
 800658e:	4939      	ldr	r1, [pc, #228]	; (8006674 <HAL_GPIO_DeInit+0x1c0>)
 8006590:	4013      	ands	r3, r2
 8006592:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	220f      	movs	r2, #15
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80065a4:	4a2d      	ldr	r2, [pc, #180]	; (800665c <HAL_GPIO_DeInit+0x1a8>)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	089b      	lsrs	r3, r3, #2
 80065aa:	3302      	adds	r3, #2
 80065ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	43da      	mvns	r2, r3
 80065b4:	4829      	ldr	r0, [pc, #164]	; (800665c <HAL_GPIO_DeInit+0x1a8>)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	089b      	lsrs	r3, r3, #2
 80065ba:	400a      	ands	r2, r1
 80065bc:	3302      	adds	r3, #2
 80065be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	2103      	movs	r1, #3
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	08da      	lsrs	r2, r3, #3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3208      	adds	r2, #8
 80065e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	220f      	movs	r2, #15
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	43db      	mvns	r3, r3
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	08d2      	lsrs	r2, r2, #3
 80065f8:	4019      	ands	r1, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3208      	adds	r2, #8
 80065fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	2103      	movs	r1, #3
 800660c:	fa01 f303 	lsl.w	r3, r1, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	401a      	ands	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	2101      	movs	r1, #1
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	fa01 f303 	lsl.w	r3, r1, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	401a      	ands	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	2103      	movs	r1, #3
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	401a      	ands	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	3301      	adds	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b0f      	cmp	r3, #15
 800664c:	f67f af40 	bls.w	80064d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006650:	bf00      	nop
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	40013800 	.word	0x40013800
 8006660:	40020000 	.word	0x40020000
 8006664:	40020400 	.word	0x40020400
 8006668:	40020800 	.word	0x40020800
 800666c:	40020c00 	.word	0x40020c00
 8006670:	40021000 	.word	0x40021000
 8006674:	40013c00 	.word	0x40013c00

08006678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
 8006684:	4613      	mov	r3, r2
 8006686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006688:	787b      	ldrb	r3, [r7, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006694:	e003      	b.n	800669e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006696:	887b      	ldrh	r3, [r7, #2]
 8006698:	041a      	lsls	r2, r3, #16
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	619a      	str	r2, [r3, #24]
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	887b      	ldrh	r3, [r7, #2]
 80066bc:	401a      	ands	r2, r3
 80066be:	887b      	ldrh	r3, [r7, #2]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d104      	bne.n	80066ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066c4:	887b      	ldrh	r3, [r7, #2]
 80066c6:	041a      	lsls	r2, r3, #16
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80066cc:	e002      	b.n	80066d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	619a      	str	r2, [r3, #24]
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066ea:	4b08      	ldr	r3, [pc, #32]	; (800670c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d006      	beq.n	8006704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066f6:	4a05      	ldr	r2, [pc, #20]	; (800670c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fb fcfa 	bl	80020f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40013c00 	.word	0x40013c00

08006710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e25b      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d075      	beq.n	800681a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800672e:	4ba3      	ldr	r3, [pc, #652]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
 8006736:	2b04      	cmp	r3, #4
 8006738:	d00c      	beq.n	8006754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800673a:	4ba0      	ldr	r3, [pc, #640]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006742:	2b08      	cmp	r3, #8
 8006744:	d112      	bne.n	800676c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006746:	4b9d      	ldr	r3, [pc, #628]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006752:	d10b      	bne.n	800676c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006754:	4b99      	ldr	r3, [pc, #612]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05b      	beq.n	8006818 <HAL_RCC_OscConfig+0x108>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d157      	bne.n	8006818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e236      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006774:	d106      	bne.n	8006784 <HAL_RCC_OscConfig+0x74>
 8006776:	4b91      	ldr	r3, [pc, #580]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a90      	ldr	r2, [pc, #576]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 800677c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	e01d      	b.n	80067c0 <HAL_RCC_OscConfig+0xb0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800678c:	d10c      	bne.n	80067a8 <HAL_RCC_OscConfig+0x98>
 800678e:	4b8b      	ldr	r3, [pc, #556]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a8a      	ldr	r2, [pc, #552]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4b88      	ldr	r3, [pc, #544]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a87      	ldr	r2, [pc, #540]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80067a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	e00b      	b.n	80067c0 <HAL_RCC_OscConfig+0xb0>
 80067a8:	4b84      	ldr	r3, [pc, #528]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a83      	ldr	r2, [pc, #524]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80067ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	4b81      	ldr	r3, [pc, #516]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a80      	ldr	r2, [pc, #512]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80067ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d013      	beq.n	80067f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c8:	f7ff fb60 	bl	8005e8c <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067d0:	f7ff fb5c 	bl	8005e8c <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b64      	cmp	r3, #100	; 0x64
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e1fb      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e2:	4b76      	ldr	r3, [pc, #472]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCC_OscConfig+0xc0>
 80067ee:	e014      	b.n	800681a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7ff fb4c 	bl	8005e8c <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067f8:	f7ff fb48 	bl	8005e8c <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b64      	cmp	r3, #100	; 0x64
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e1e7      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680a:	4b6c      	ldr	r3, [pc, #432]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0xe8>
 8006816:	e000      	b.n	800681a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d063      	beq.n	80068ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006826:	4b65      	ldr	r3, [pc, #404]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006832:	4b62      	ldr	r3, [pc, #392]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800683a:	2b08      	cmp	r3, #8
 800683c:	d11c      	bne.n	8006878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800683e:	4b5f      	ldr	r3, [pc, #380]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d116      	bne.n	8006878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800684a:	4b5c      	ldr	r3, [pc, #368]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_RCC_OscConfig+0x152>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d001      	beq.n	8006862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e1bb      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006862:	4b56      	ldr	r3, [pc, #344]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4952      	ldr	r1, [pc, #328]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006872:	4313      	orrs	r3, r2
 8006874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006876:	e03a      	b.n	80068ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d020      	beq.n	80068c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006880:	4b4f      	ldr	r3, [pc, #316]	; (80069c0 <HAL_RCC_OscConfig+0x2b0>)
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7ff fb01 	bl	8005e8c <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800688e:	f7ff fafd 	bl	8005e8c <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e19c      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a0:	4b46      	ldr	r3, [pc, #280]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ac:	4b43      	ldr	r3, [pc, #268]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	4940      	ldr	r1, [pc, #256]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	600b      	str	r3, [r1, #0]
 80068c0:	e015      	b.n	80068ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c2:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <HAL_RCC_OscConfig+0x2b0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7ff fae0 	bl	8005e8c <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068d0:	f7ff fadc 	bl	8005e8c <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e17b      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e2:	4b36      	ldr	r3, [pc, #216]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d030      	beq.n	800695c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d016      	beq.n	8006930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006902:	4b30      	ldr	r3, [pc, #192]	; (80069c4 <HAL_RCC_OscConfig+0x2b4>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006908:	f7ff fac0 	bl	8005e8c <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006910:	f7ff fabc 	bl	8005e8c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e15b      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006922:	4b26      	ldr	r3, [pc, #152]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0f0      	beq.n	8006910 <HAL_RCC_OscConfig+0x200>
 800692e:	e015      	b.n	800695c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006930:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <HAL_RCC_OscConfig+0x2b4>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006936:	f7ff faa9 	bl	8005e8c <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800693e:	f7ff faa5 	bl	8005e8c <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e144      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006950:	4b1a      	ldr	r3, [pc, #104]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f0      	bne.n	800693e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80a0 	beq.w	8006aaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10f      	bne.n	800699a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	4a0e      	ldr	r2, [pc, #56]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 8006984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006988:	6413      	str	r3, [r2, #64]	; 0x40
 800698a:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <HAL_RCC_OscConfig+0x2ac>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	60bb      	str	r3, [r7, #8]
 8006994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006996:	2301      	movs	r3, #1
 8006998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_RCC_OscConfig+0x2b8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d121      	bne.n	80069ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069a6:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <HAL_RCC_OscConfig+0x2b8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a07      	ldr	r2, [pc, #28]	; (80069c8 <HAL_RCC_OscConfig+0x2b8>)
 80069ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069b2:	f7ff fa6b 	bl	8005e8c <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b8:	e011      	b.n	80069de <HAL_RCC_OscConfig+0x2ce>
 80069ba:	bf00      	nop
 80069bc:	40023800 	.word	0x40023800
 80069c0:	42470000 	.word	0x42470000
 80069c4:	42470e80 	.word	0x42470e80
 80069c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069cc:	f7ff fa5e 	bl	8005e8c <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0fd      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069de:	4b81      	ldr	r3, [pc, #516]	; (8006be4 <HAL_RCC_OscConfig+0x4d4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d106      	bne.n	8006a00 <HAL_RCC_OscConfig+0x2f0>
 80069f2:	4b7d      	ldr	r3, [pc, #500]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f6:	4a7c      	ldr	r2, [pc, #496]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 80069f8:	f043 0301 	orr.w	r3, r3, #1
 80069fc:	6713      	str	r3, [r2, #112]	; 0x70
 80069fe:	e01c      	b.n	8006a3a <HAL_RCC_OscConfig+0x32a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	d10c      	bne.n	8006a22 <HAL_RCC_OscConfig+0x312>
 8006a08:	4b77      	ldr	r3, [pc, #476]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0c:	4a76      	ldr	r2, [pc, #472]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a0e:	f043 0304 	orr.w	r3, r3, #4
 8006a12:	6713      	str	r3, [r2, #112]	; 0x70
 8006a14:	4b74      	ldr	r3, [pc, #464]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	4a73      	ldr	r2, [pc, #460]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a20:	e00b      	b.n	8006a3a <HAL_RCC_OscConfig+0x32a>
 8006a22:	4b71      	ldr	r3, [pc, #452]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	4a70      	ldr	r2, [pc, #448]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2e:	4b6e      	ldr	r3, [pc, #440]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	4a6d      	ldr	r2, [pc, #436]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d015      	beq.n	8006a6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a42:	f7ff fa23 	bl	8005e8c <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a48:	e00a      	b.n	8006a60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a4a:	f7ff fa1f 	bl	8005e8c <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e0bc      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a60:	4b61      	ldr	r3, [pc, #388]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0ee      	beq.n	8006a4a <HAL_RCC_OscConfig+0x33a>
 8006a6c:	e014      	b.n	8006a98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a6e:	f7ff fa0d 	bl	8005e8c <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a74:	e00a      	b.n	8006a8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a76:	f7ff fa09 	bl	8005e8c <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e0a6      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a8c:	4b56      	ldr	r3, [pc, #344]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1ee      	bne.n	8006a76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d105      	bne.n	8006aaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a9e:	4b52      	ldr	r3, [pc, #328]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	4a51      	ldr	r2, [pc, #324]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8092 	beq.w	8006bd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ab4:	4b4c      	ldr	r3, [pc, #304]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 030c 	and.w	r3, r3, #12
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d05c      	beq.n	8006b7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d141      	bne.n	8006b4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac8:	4b48      	ldr	r3, [pc, #288]	; (8006bec <HAL_RCC_OscConfig+0x4dc>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ace:	f7ff f9dd 	bl	8005e8c <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad6:	f7ff f9d9 	bl	8005e8c <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e078      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae8:	4b3f      	ldr	r3, [pc, #252]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1f0      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	019b      	lsls	r3, r3, #6
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	4933      	ldr	r1, [pc, #204]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b1e:	4b33      	ldr	r3, [pc, #204]	; (8006bec <HAL_RCC_OscConfig+0x4dc>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b24:	f7ff f9b2 	bl	8005e8c <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7ff f9ae 	bl	8005e8c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e04d      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3e:	4b2a      	ldr	r3, [pc, #168]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x41c>
 8006b4a:	e045      	b.n	8006bd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4c:	4b27      	ldr	r3, [pc, #156]	; (8006bec <HAL_RCC_OscConfig+0x4dc>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b52:	f7ff f99b 	bl	8005e8c <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b5a:	f7ff f997 	bl	8005e8c <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e036      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f0      	bne.n	8006b5a <HAL_RCC_OscConfig+0x44a>
 8006b78:	e02e      	b.n	8006bd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e029      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b86:	4b18      	ldr	r3, [pc, #96]	; (8006be8 <HAL_RCC_OscConfig+0x4d8>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d11c      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d115      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bae:	4013      	ands	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d10d      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d106      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40007000 	.word	0x40007000
 8006be8:	40023800 	.word	0x40023800
 8006bec:	42470060 	.word	0x42470060

08006bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0cc      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c04:	4b68      	ldr	r3, [pc, #416]	; (8006da8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d90c      	bls.n	8006c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4b65      	ldr	r3, [pc, #404]	; (8006da8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1a:	4b63      	ldr	r3, [pc, #396]	; (8006da8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0b8      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d020      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c44:	4b59      	ldr	r3, [pc, #356]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4a58      	ldr	r2, [pc, #352]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c5c:	4b53      	ldr	r3, [pc, #332]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4a52      	ldr	r2, [pc, #328]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c68:	4b50      	ldr	r3, [pc, #320]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	494d      	ldr	r1, [pc, #308]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d044      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8e:	4b47      	ldr	r3, [pc, #284]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d119      	bne.n	8006cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e07f      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d003      	beq.n	8006cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d107      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cae:	4b3f      	ldr	r3, [pc, #252]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e06f      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cbe:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e067      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cce:	4b37      	ldr	r3, [pc, #220]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f023 0203 	bic.w	r2, r3, #3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	4934      	ldr	r1, [pc, #208]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ce0:	f7ff f8d4 	bl	8005e8c <HAL_GetTick>
 8006ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ce6:	e00a      	b.n	8006cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ce8:	f7ff f8d0 	bl	8005e8c <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e04f      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cfe:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 020c 	and.w	r2, r3, #12
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d1eb      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d10:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d20c      	bcs.n	8006d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1e:	4b22      	ldr	r3, [pc, #136]	; (8006da8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d26:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e032      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d44:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	4916      	ldr	r1, [pc, #88]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	490e      	ldr	r1, [pc, #56]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d76:	f000 f821 	bl	8006dbc <HAL_RCC_GetSysClockFreq>
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	091b      	lsrs	r3, r3, #4
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d88:	5cd3      	ldrb	r3, [r2, r3]
 8006d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8006d8e:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff f834 	bl	8005e04 <HAL_InitTick>

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40023c00 	.word	0x40023c00
 8006dac:	40023800 	.word	0x40023800
 8006db0:	0800b25c 	.word	0x0800b25c
 8006db4:	20000248 	.word	0x20000248
 8006db8:	20000270 	.word	0x20000270

08006dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dd2:	4b63      	ldr	r3, [pc, #396]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 030c 	and.w	r3, r3, #12
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d007      	beq.n	8006dee <HAL_RCC_GetSysClockFreq+0x32>
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d008      	beq.n	8006df4 <HAL_RCC_GetSysClockFreq+0x38>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 80b4 	bne.w	8006f50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006de8:	4b5e      	ldr	r3, [pc, #376]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006dea:	60bb      	str	r3, [r7, #8]
       break;
 8006dec:	e0b3      	b.n	8006f56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dee:	4b5e      	ldr	r3, [pc, #376]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006df0:	60bb      	str	r3, [r7, #8]
      break;
 8006df2:	e0b0      	b.n	8006f56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006df4:	4b5a      	ldr	r3, [pc, #360]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dfe:	4b58      	ldr	r3, [pc, #352]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d04a      	beq.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e0a:	4b55      	ldr	r3, [pc, #340]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	099b      	lsrs	r3, r3, #6
 8006e10:	f04f 0400 	mov.w	r4, #0
 8006e14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	ea03 0501 	and.w	r5, r3, r1
 8006e20:	ea04 0602 	and.w	r6, r4, r2
 8006e24:	4629      	mov	r1, r5
 8006e26:	4632      	mov	r2, r6
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	f04f 0400 	mov.w	r4, #0
 8006e30:	0154      	lsls	r4, r2, #5
 8006e32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e36:	014b      	lsls	r3, r1, #5
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	1b49      	subs	r1, r1, r5
 8006e3e:	eb62 0206 	sbc.w	r2, r2, r6
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	f04f 0400 	mov.w	r4, #0
 8006e4a:	0194      	lsls	r4, r2, #6
 8006e4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e50:	018b      	lsls	r3, r1, #6
 8006e52:	1a5b      	subs	r3, r3, r1
 8006e54:	eb64 0402 	sbc.w	r4, r4, r2
 8006e58:	f04f 0100 	mov.w	r1, #0
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	00e2      	lsls	r2, r4, #3
 8006e62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e66:	00d9      	lsls	r1, r3, #3
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	195b      	adds	r3, r3, r5
 8006e6e:	eb44 0406 	adc.w	r4, r4, r6
 8006e72:	f04f 0100 	mov.w	r1, #0
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	0262      	lsls	r2, r4, #9
 8006e7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006e80:	0259      	lsls	r1, r3, #9
 8006e82:	460b      	mov	r3, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	4621      	mov	r1, r4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f04f 0400 	mov.w	r4, #0
 8006e90:	461a      	mov	r2, r3
 8006e92:	4623      	mov	r3, r4
 8006e94:	f7f9 fe6a 	bl	8000b6c <__aeabi_uldivmod>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e049      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ea0:	4b2f      	ldr	r3, [pc, #188]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	099b      	lsrs	r3, r3, #6
 8006ea6:	f04f 0400 	mov.w	r4, #0
 8006eaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	ea03 0501 	and.w	r5, r3, r1
 8006eb6:	ea04 0602 	and.w	r6, r4, r2
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	f04f 0400 	mov.w	r4, #0
 8006ec6:	0154      	lsls	r4, r2, #5
 8006ec8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ecc:	014b      	lsls	r3, r1, #5
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	1b49      	subs	r1, r1, r5
 8006ed4:	eb62 0206 	sbc.w	r2, r2, r6
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	f04f 0400 	mov.w	r4, #0
 8006ee0:	0194      	lsls	r4, r2, #6
 8006ee2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ee6:	018b      	lsls	r3, r1, #6
 8006ee8:	1a5b      	subs	r3, r3, r1
 8006eea:	eb64 0402 	sbc.w	r4, r4, r2
 8006eee:	f04f 0100 	mov.w	r1, #0
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	00e2      	lsls	r2, r4, #3
 8006ef8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006efc:	00d9      	lsls	r1, r3, #3
 8006efe:	460b      	mov	r3, r1
 8006f00:	4614      	mov	r4, r2
 8006f02:	195b      	adds	r3, r3, r5
 8006f04:	eb44 0406 	adc.w	r4, r4, r6
 8006f08:	f04f 0100 	mov.w	r1, #0
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	02a2      	lsls	r2, r4, #10
 8006f12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006f16:	0299      	lsls	r1, r3, #10
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	4621      	mov	r1, r4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f04f 0400 	mov.w	r4, #0
 8006f26:	461a      	mov	r2, r3
 8006f28:	4623      	mov	r3, r4
 8006f2a:	f7f9 fe1f 	bl	8000b6c <__aeabi_uldivmod>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	0c1b      	lsrs	r3, r3, #16
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	3301      	adds	r3, #1
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	60bb      	str	r3, [r7, #8]
      break;
 8006f4e:	e002      	b.n	8006f56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006f52:	60bb      	str	r3, [r7, #8]
      break;
 8006f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f56:	68bb      	ldr	r3, [r7, #8]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f60:	40023800 	.word	0x40023800
 8006f64:	00f42400 	.word	0x00f42400
 8006f68:	007a1200 	.word	0x007a1200

08006f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f70:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f72:	681b      	ldr	r3, [r3, #0]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000248 	.word	0x20000248

08006f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f88:	f7ff fff0 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006f8c:	4601      	mov	r1, r0
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	0a9b      	lsrs	r3, r3, #10
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4a03      	ldr	r2, [pc, #12]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9a:	5cd3      	ldrb	r3, [r2, r3]
 8006f9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	0800b26c 	.word	0x0800b26c

08006fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fb0:	f7ff ffdc 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006fb4:	4601      	mov	r1, r0
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	0b5b      	lsrs	r3, r3, #13
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	4a03      	ldr	r2, [pc, #12]	; (8006fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc2:	5cd3      	ldrb	r3, [r2, r3]
 8006fc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	0800b26c 	.word	0x0800b26c

08006fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e056      	b.n	8007094 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fb fa49 	bl	8002498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800701c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	ea42 0103 	orr.w	r1, r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	0c1b      	lsrs	r3, r3, #16
 8007064:	f003 0104 	and.w	r1, r3, #4
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007082:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e01a      	b.n	80070e4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb fa4e 	bl	8002568 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_SPI_Transmit+0x22>
 800710a:	2302      	movs	r3, #2
 800710c:	e11e      	b.n	800734c <HAL_SPI_Transmit+0x260>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007116:	f7fe feb9 	bl	8005e8c <HAL_GetTick>
 800711a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	d002      	beq.n	8007132 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007130:	e103      	b.n	800733a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_Transmit+0x52>
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007142:	e0fa      	b.n	800733a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2203      	movs	r2, #3
 8007148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	88fa      	ldrh	r2, [r7, #6]
 800715c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718a:	d107      	bne.n	800719c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800719a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d007      	beq.n	80071ba <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c2:	d14b      	bne.n	800725c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_SPI_Transmit+0xe6>
 80071cc:	8afb      	ldrh	r3, [r7, #22]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d13e      	bne.n	8007250 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	881a      	ldrh	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071f6:	e02b      	b.n	8007250 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b02      	cmp	r3, #2
 8007204:	d112      	bne.n	800722c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	881a      	ldrh	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	1c9a      	adds	r2, r3, #2
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	86da      	strh	r2, [r3, #54]	; 0x36
 800722a:	e011      	b.n	8007250 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800722c:	f7fe fe2e 	bl	8005e8c <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	429a      	cmp	r2, r3
 800723a:	d803      	bhi.n	8007244 <HAL_SPI_Transmit+0x158>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d102      	bne.n	800724a <HAL_SPI_Transmit+0x15e>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800724e:	e074      	b.n	800733a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1ce      	bne.n	80071f8 <HAL_SPI_Transmit+0x10c>
 800725a:	e04c      	b.n	80072f6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <HAL_SPI_Transmit+0x17e>
 8007264:	8afb      	ldrh	r3, [r7, #22]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d140      	bne.n	80072ec <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007290:	e02c      	b.n	80072ec <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b02      	cmp	r3, #2
 800729e:	d113      	bne.n	80072c8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	330c      	adds	r3, #12
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80072c6:	e011      	b.n	80072ec <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072c8:	f7fe fde0 	bl	8005e8c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d803      	bhi.n	80072e0 <HAL_SPI_Transmit+0x1f4>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d102      	bne.n	80072e6 <HAL_SPI_Transmit+0x1fa>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072ea:	e026      	b.n	800733a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1cd      	bne.n	8007292 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fa44 	bl	8007788 <SPI_EndRxTxTransaction>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	77fb      	strb	r3, [r7, #31]
 8007336:	e000      	b.n	800733a <HAL_SPI_Transmit+0x24e>
  }

error:
 8007338:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800734a:	7ffb      	ldrb	r3, [r7, #31]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3720      	adds	r7, #32
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	; 0x30
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007362:	2301      	movs	r3, #1
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_SPI_TransmitReceive+0x26>
 8007376:	2302      	movs	r3, #2
 8007378:	e18a      	b.n	8007690 <HAL_SPI_TransmitReceive+0x33c>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007382:	f7fe fd83 	bl	8005e8c <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007398:	887b      	ldrh	r3, [r7, #2]
 800739a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800739c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d00f      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x70>
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073aa:	d107      	bne.n	80073bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d103      	bne.n	80073bc <HAL_SPI_TransmitReceive+0x68>
 80073b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d003      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073c2:	e15b      	b.n	800767c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x82>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x82>
 80073d0:	887b      	ldrh	r3, [r7, #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073dc:	e14e      	b.n	800767c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d003      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2205      	movs	r2, #5
 80073ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	887a      	ldrh	r2, [r7, #2]
 8007402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	887a      	ldrh	r2, [r7, #2]
 8007408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	887a      	ldrh	r2, [r7, #2]
 800741a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d007      	beq.n	8007446 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800744e:	d178      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_SPI_TransmitReceive+0x10a>
 8007458:	8b7b      	ldrh	r3, [r7, #26]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d166      	bne.n	800752c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	881a      	ldrh	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	1c9a      	adds	r2, r3, #2
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007482:	e053      	b.n	800752c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b02      	cmp	r3, #2
 8007490:	d11b      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x176>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d016      	beq.n	80074ca <HAL_SPI_TransmitReceive+0x176>
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d113      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	881a      	ldrh	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b2:	1c9a      	adds	r2, r3, #2
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d119      	bne.n	800750c <HAL_SPI_TransmitReceive+0x1b8>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d014      	beq.n	800750c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	b292      	uxth	r2, r2
 80074ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	1c9a      	adds	r2, r3, #2
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007508:	2301      	movs	r3, #1
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800750c:	f7fe fcbe 	bl	8005e8c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007518:	429a      	cmp	r2, r3
 800751a:	d807      	bhi.n	800752c <HAL_SPI_TransmitReceive+0x1d8>
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d003      	beq.n	800752c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800752a:	e0a7      	b.n	800767c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1a6      	bne.n	8007484 <HAL_SPI_TransmitReceive+0x130>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1a1      	bne.n	8007484 <HAL_SPI_TransmitReceive+0x130>
 8007540:	e07c      	b.n	800763c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x1fc>
 800754a:	8b7b      	ldrh	r3, [r7, #26]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d16b      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007576:	e057      	b.n	8007628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d11c      	bne.n	80075c0 <HAL_SPI_TransmitReceive+0x26c>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d017      	beq.n	80075c0 <HAL_SPI_TransmitReceive+0x26c>
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d114      	bne.n	80075c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	7812      	ldrb	r2, [r2, #0]
 80075a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d119      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x2ae>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d014      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075fe:	2301      	movs	r3, #1
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007602:	f7fe fc43 	bl	8005e8c <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800760e:	429a      	cmp	r2, r3
 8007610:	d803      	bhi.n	800761a <HAL_SPI_TransmitReceive+0x2c6>
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007618:	d102      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x2cc>
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007626:	e029      	b.n	800767c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1a2      	bne.n	8007578 <HAL_SPI_TransmitReceive+0x224>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d19d      	bne.n	8007578 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f8a1 	bl	8007788 <SPI_EndRxTxTransaction>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d006      	beq.n	800765a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007658:	e010      	b.n	800767c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10b      	bne.n	800767a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	e000      	b.n	800767c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800767a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800768c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007690:	4618      	mov	r0, r3
 8007692:	3730      	adds	r7, #48	; 0x30
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a6:	b2db      	uxtb	r3, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c4:	e04c      	b.n	8007760 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076cc:	d048      	beq.n	8007760 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80076ce:	f7fe fbdd 	bl	8005e8c <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d902      	bls.n	80076e4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d13d      	bne.n	8007760 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fc:	d111      	bne.n	8007722 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007706:	d004      	beq.n	8007712 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007710:	d107      	bne.n	8007722 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007720:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772a:	d10f      	bne.n	800774c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800774a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e00f      	b.n	8007780 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4013      	ands	r3, r2
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	429a      	cmp	r2, r3
 800776e:	bf0c      	ite	eq
 8007770:	2301      	moveq	r3, #1
 8007772:	2300      	movne	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	461a      	mov	r2, r3
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	429a      	cmp	r2, r3
 800777c:	d1a3      	bne.n	80076c6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af02      	add	r7, sp, #8
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007794:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <SPI_EndRxTxTransaction+0x7c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <SPI_EndRxTxTransaction+0x80>)
 800779a:	fba2 2303 	umull	r2, r3, r2, r3
 800779e:	0d5b      	lsrs	r3, r3, #21
 80077a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077a4:	fb02 f303 	mul.w	r3, r2, r3
 80077a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b2:	d112      	bne.n	80077da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2180      	movs	r1, #128	; 0x80
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff ff78 	bl	80076b4 <SPI_WaitFlagStateUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d016      	beq.n	80077f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e00f      	b.n	80077fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f0:	2b80      	cmp	r3, #128	; 0x80
 80077f2:	d0f2      	beq.n	80077da <SPI_EndRxTxTransaction+0x52>
 80077f4:	e000      	b.n	80077f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80077f6:	bf00      	nop
  }

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000248 	.word	0x20000248
 8007808:	165e9f81 	.word	0x165e9f81

0800780c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e01d      	b.n	800785a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fa febc 	bl	80025b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f000 fa74 	bl	8007d38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b0c      	cmp	r3, #12
 8007872:	d841      	bhi.n	80078f8 <HAL_TIM_OC_Start_IT+0x94>
 8007874:	a201      	add	r2, pc, #4	; (adr r2, 800787c <HAL_TIM_OC_Start_IT+0x18>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	080078b1 	.word	0x080078b1
 8007880:	080078f9 	.word	0x080078f9
 8007884:	080078f9 	.word	0x080078f9
 8007888:	080078f9 	.word	0x080078f9
 800788c:	080078c3 	.word	0x080078c3
 8007890:	080078f9 	.word	0x080078f9
 8007894:	080078f9 	.word	0x080078f9
 8007898:	080078f9 	.word	0x080078f9
 800789c:	080078d5 	.word	0x080078d5
 80078a0:	080078f9 	.word	0x080078f9
 80078a4:	080078f9 	.word	0x080078f9
 80078a8:	080078f9 	.word	0x080078f9
 80078ac:	080078e7 	.word	0x080078e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0202 	orr.w	r2, r2, #2
 80078be:	60da      	str	r2, [r3, #12]
      break;
 80078c0:	e01b      	b.n	80078fa <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0204 	orr.w	r2, r2, #4
 80078d0:	60da      	str	r2, [r3, #12]
      break;
 80078d2:	e012      	b.n	80078fa <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0208 	orr.w	r2, r2, #8
 80078e2:	60da      	str	r2, [r3, #12]
      break;
 80078e4:	e009      	b.n	80078fa <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0210 	orr.w	r2, r2, #16
 80078f4:	60da      	str	r2, [r3, #12]
      break;
 80078f6:	e000      	b.n	80078fa <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80078f8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2201      	movs	r2, #1
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fb32 	bl	8007f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a10      	ldr	r2, [pc, #64]	; (8007950 <HAL_TIM_OC_Start_IT+0xec>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d107      	bne.n	8007922 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b06      	cmp	r3, #6
 8007932:	d007      	beq.n	8007944 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40010000 	.word	0x40010000

08007954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b02      	cmp	r3, #2
 8007968:	d122      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b02      	cmp	r3, #2
 8007976:	d11b      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f06f 0202 	mvn.w	r2, #2
 8007980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	f003 0303 	and.w	r3, r3, #3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9af 	bl	8007cfa <HAL_TIM_IC_CaptureCallback>
 800799c:	e005      	b.n	80079aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f9a1 	bl	8007ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9b2 	bl	8007d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	f003 0304 	and.w	r3, r3, #4
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d122      	bne.n	8007a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d11b      	bne.n	8007a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f06f 0204 	mvn.w	r2, #4
 80079d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f985 	bl	8007cfa <HAL_TIM_IC_CaptureCallback>
 80079f0:	e005      	b.n	80079fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f977 	bl	8007ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f988 	bl	8007d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d122      	bne.n	8007a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f003 0308 	and.w	r3, r3, #8
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d11b      	bne.n	8007a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f06f 0208 	mvn.w	r2, #8
 8007a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f003 0303 	and.w	r3, r3, #3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f95b 	bl	8007cfa <HAL_TIM_IC_CaptureCallback>
 8007a44:	e005      	b.n	8007a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f94d 	bl	8007ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f95e 	bl	8007d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d122      	bne.n	8007aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	2b10      	cmp	r3, #16
 8007a72:	d11b      	bne.n	8007aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f06f 0210 	mvn.w	r2, #16
 8007a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2208      	movs	r2, #8
 8007a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f931 	bl	8007cfa <HAL_TIM_IC_CaptureCallback>
 8007a98:	e005      	b.n	8007aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f923 	bl	8007ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f934 	bl	8007d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d10e      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d107      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0201 	mvn.w	r2, #1
 8007ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f8fd 	bl	8007cd2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae2:	2b80      	cmp	r3, #128	; 0x80
 8007ae4:	d10e      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d107      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fad2 	bl	80080a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	d10e      	bne.n	8007b30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d107      	bne.n	8007b30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8f9 	bl	8007d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d10e      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d107      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0220 	mvn.w	r2, #32
 8007b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa9c 	bl	8008094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_TIM_ConfigClockSource+0x18>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e0a6      	b.n	8007cca <HAL_TIM_ConfigClockSource+0x166>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ba2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b40      	cmp	r3, #64	; 0x40
 8007bb2:	d067      	beq.n	8007c84 <HAL_TIM_ConfigClockSource+0x120>
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	d80b      	bhi.n	8007bd0 <HAL_TIM_ConfigClockSource+0x6c>
 8007bb8:	2b10      	cmp	r3, #16
 8007bba:	d073      	beq.n	8007ca4 <HAL_TIM_ConfigClockSource+0x140>
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d802      	bhi.n	8007bc6 <HAL_TIM_ConfigClockSource+0x62>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d06f      	beq.n	8007ca4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007bc4:	e078      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007bc6:	2b20      	cmp	r3, #32
 8007bc8:	d06c      	beq.n	8007ca4 <HAL_TIM_ConfigClockSource+0x140>
 8007bca:	2b30      	cmp	r3, #48	; 0x30
 8007bcc:	d06a      	beq.n	8007ca4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007bce:	e073      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007bd0:	2b70      	cmp	r3, #112	; 0x70
 8007bd2:	d00d      	beq.n	8007bf0 <HAL_TIM_ConfigClockSource+0x8c>
 8007bd4:	2b70      	cmp	r3, #112	; 0x70
 8007bd6:	d804      	bhi.n	8007be2 <HAL_TIM_ConfigClockSource+0x7e>
 8007bd8:	2b50      	cmp	r3, #80	; 0x50
 8007bda:	d033      	beq.n	8007c44 <HAL_TIM_ConfigClockSource+0xe0>
 8007bdc:	2b60      	cmp	r3, #96	; 0x60
 8007bde:	d041      	beq.n	8007c64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007be0:	e06a      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be6:	d066      	beq.n	8007cb6 <HAL_TIM_ConfigClockSource+0x152>
 8007be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bec:	d017      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007bee:	e063      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	6899      	ldr	r1, [r3, #8]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f000 f994 	bl	8007f2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	609a      	str	r2, [r3, #8]
      break;
 8007c1c:	e04c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6899      	ldr	r1, [r3, #8]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f000 f97d 	bl	8007f2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c40:	609a      	str	r2, [r3, #8]
      break;
 8007c42:	e039      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	6859      	ldr	r1, [r3, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	461a      	mov	r2, r3
 8007c52:	f000 f8f1 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2150      	movs	r1, #80	; 0x50
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 f94a 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007c62:	e029      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6859      	ldr	r1, [r3, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	461a      	mov	r2, r3
 8007c72:	f000 f910 	bl	8007e96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2160      	movs	r1, #96	; 0x60
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f93a 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007c82:	e019      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	461a      	mov	r2, r3
 8007c92:	f000 f8d1 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2140      	movs	r1, #64	; 0x40
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 f92a 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007ca2:	e009      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f000 f921 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007cb4:	e000      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
	...

08007d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a34      	ldr	r2, [pc, #208]	; (8007e1c <TIM_Base_SetConfig+0xe4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00f      	beq.n	8007d70 <TIM_Base_SetConfig+0x38>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d56:	d00b      	beq.n	8007d70 <TIM_Base_SetConfig+0x38>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a31      	ldr	r2, [pc, #196]	; (8007e20 <TIM_Base_SetConfig+0xe8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d007      	beq.n	8007d70 <TIM_Base_SetConfig+0x38>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a30      	ldr	r2, [pc, #192]	; (8007e24 <TIM_Base_SetConfig+0xec>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_Base_SetConfig+0x38>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a2f      	ldr	r2, [pc, #188]	; (8007e28 <TIM_Base_SetConfig+0xf0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d108      	bne.n	8007d82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a25      	ldr	r2, [pc, #148]	; (8007e1c <TIM_Base_SetConfig+0xe4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01b      	beq.n	8007dc2 <TIM_Base_SetConfig+0x8a>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d90:	d017      	beq.n	8007dc2 <TIM_Base_SetConfig+0x8a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a22      	ldr	r2, [pc, #136]	; (8007e20 <TIM_Base_SetConfig+0xe8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <TIM_Base_SetConfig+0x8a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <TIM_Base_SetConfig+0xec>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00f      	beq.n	8007dc2 <TIM_Base_SetConfig+0x8a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a20      	ldr	r2, [pc, #128]	; (8007e28 <TIM_Base_SetConfig+0xf0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00b      	beq.n	8007dc2 <TIM_Base_SetConfig+0x8a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1f      	ldr	r2, [pc, #124]	; (8007e2c <TIM_Base_SetConfig+0xf4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <TIM_Base_SetConfig+0x8a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <TIM_Base_SetConfig+0xf8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_Base_SetConfig+0x8a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <TIM_Base_SetConfig+0xfc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d108      	bne.n	8007dd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a08      	ldr	r2, [pc, #32]	; (8007e1c <TIM_Base_SetConfig+0xe4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d103      	bne.n	8007e08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	615a      	str	r2, [r3, #20]
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40010000 	.word	0x40010000
 8007e20:	40000400 	.word	0x40000400
 8007e24:	40000800 	.word	0x40000800
 8007e28:	40000c00 	.word	0x40000c00
 8007e2c:	40014000 	.word	0x40014000
 8007e30:	40014400 	.word	0x40014400
 8007e34:	40014800 	.word	0x40014800

08007e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	f023 0201 	bic.w	r2, r3, #1
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 030a 	bic.w	r3, r3, #10
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	621a      	str	r2, [r3, #32]
}
 8007e8a:	bf00      	nop
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f023 0210 	bic.w	r2, r3, #16
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f043 0307 	orr.w	r3, r3, #7
 8007f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	609a      	str	r2, [r3, #8]
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	021a      	lsls	r2, r3, #8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	609a      	str	r2, [r3, #8]
}
 8007f60:	bf00      	nop
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	2201      	movs	r2, #1
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1a      	ldr	r2, [r3, #32]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	401a      	ands	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f003 031f 	and.w	r3, r3, #31
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e050      	b.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d018      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801c:	d013      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a18      	ldr	r2, [pc, #96]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00e      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a16      	ldr	r2, [pc, #88]	; (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d009      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a15      	ldr	r2, [pc, #84]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d004      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a13      	ldr	r2, [pc, #76]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d10c      	bne.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800804c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4313      	orrs	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000
 8008084:	40000400 	.word	0x40000400
 8008088:	40000800 	.word	0x40000800
 800808c:	40000c00 	.word	0x40000c00
 8008090:	40014000 	.word	0x40014000

08008094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e03f      	b.n	800814e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fa fa8a 	bl	80025fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2224      	movs	r2, #36	; 0x24
 80080ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fc3d 	bl	8008980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691a      	ldr	r2, [r3, #16]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b088      	sub	sp, #32
 800815a:	af02      	add	r7, sp, #8
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b20      	cmp	r3, #32
 8008174:	f040 8083 	bne.w	800827e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <HAL_UART_Transmit+0x2e>
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e07b      	b.n	8008280 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_UART_Transmit+0x40>
 8008192:	2302      	movs	r3, #2
 8008194:	e074      	b.n	8008280 <HAL_UART_Transmit+0x12a>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2221      	movs	r2, #33	; 0x21
 80081a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80081ac:	f7fd fe6e 	bl	8005e8c <HAL_GetTick>
 80081b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80081c6:	e042      	b.n	800824e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081de:	d122      	bne.n	8008226 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2200      	movs	r2, #0
 80081e8:	2180      	movs	r1, #128	; 0x80
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fa5c 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e042      	b.n	8008280 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800820c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	3302      	adds	r3, #2
 800821a:	60bb      	str	r3, [r7, #8]
 800821c:	e017      	b.n	800824e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	3301      	adds	r3, #1
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	e013      	b.n	800824e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2200      	movs	r2, #0
 800822e:	2180      	movs	r1, #128	; 0x80
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 fa39 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e01f      	b.n	8008280 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	60ba      	str	r2, [r7, #8]
 8008246:	781a      	ldrb	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1b7      	bne.n	80081c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2200      	movs	r2, #0
 8008260:	2140      	movs	r1, #64	; 0x40
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 fa20 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e006      	b.n	8008280 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2220      	movs	r2, #32
 8008276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	e000      	b.n	8008280 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800827e:	2302      	movs	r3, #2
  }
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	4613      	mov	r3, r2
 8008296:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	f040 8090 	bne.w	80083ca <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_UART_Receive+0x2e>
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e088      	b.n	80083cc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_UART_Receive+0x40>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e081      	b.n	80083cc <HAL_UART_Receive+0x144>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2222      	movs	r2, #34	; 0x22
 80082da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80082de:	f7fd fdd5 	bl	8005e8c <HAL_GetTick>
 80082e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	88fa      	ldrh	r2, [r7, #6]
 80082ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80082f8:	e05c      	b.n	80083b4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082fe:	b29b      	uxth	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008310:	d12b      	bne.n	800836a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2200      	movs	r2, #0
 800831a:	2120      	movs	r1, #32
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f9c3 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e04f      	b.n	80083cc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10c      	bne.n	8008352 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008344:	b29a      	uxth	r2, r3
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	3302      	adds	r3, #2
 800834e:	60bb      	str	r3, [r7, #8]
 8008350:	e030      	b.n	80083b4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	b29b      	uxth	r3, r3
 800835a:	b2db      	uxtb	r3, r3
 800835c:	b29a      	uxth	r2, r3
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	3301      	adds	r3, #1
 8008366:	60bb      	str	r3, [r7, #8]
 8008368:	e024      	b.n	80083b4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2200      	movs	r2, #0
 8008372:	2120      	movs	r1, #32
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 f997 	bl	80086a8 <UART_WaitOnFlagUntilTimeout>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e023      	b.n	80083cc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d108      	bne.n	800839e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	60ba      	str	r2, [r7, #8]
 8008398:	b2ca      	uxtb	r2, r1
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e00a      	b.n	80083b4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	1c59      	adds	r1, r3, #1
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d19d      	bne.n	80082fa <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e000      	b.n	80083cc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80083ca:	2302      	movs	r3, #2
  }
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d140      	bne.n	8008470 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_UART_Receive_IT+0x26>
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e039      	b.n	8008472 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_UART_Receive_IT+0x38>
 8008408:	2302      	movs	r3, #2
 800840a:	e032      	b.n	8008472 <HAL_UART_Receive_IT+0x9e>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2222      	movs	r2, #34	; 0x22
 8008430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800844a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695a      	ldr	r2, [r3, #20]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0201 	orr.w	r2, r2, #1
 800845a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0220 	orr.w	r2, r2, #32
 800846a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	e000      	b.n	8008472 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008470:	2302      	movs	r3, #2
  }
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
	...

08008480 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f003 030f 	and.w	r3, r3, #15
 80084ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10d      	bne.n	80084d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	f003 0320 	and.w	r3, r3, #32
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d008      	beq.n	80084d2 <HAL_UART_IRQHandler+0x52>
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f9d6 	bl	800887c <UART_Receive_IT>
      return;
 80084d0:	e0d1      	b.n	8008676 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80b0 	beq.w	800863a <HAL_UART_IRQHandler+0x1ba>
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d105      	bne.n	80084f0 <HAL_UART_IRQHandler+0x70>
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80a5 	beq.w	800863a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_UART_IRQHandler+0x90>
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008508:	f043 0201 	orr.w	r2, r3, #1
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <HAL_UART_IRQHandler+0xb0>
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008528:	f043 0202 	orr.w	r2, r3, #2
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_UART_IRQHandler+0xd0>
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008548:	f043 0204 	orr.w	r2, r3, #4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00f      	beq.n	800857a <HAL_UART_IRQHandler+0xfa>
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <HAL_UART_IRQHandler+0xee>
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008572:	f043 0208 	orr.w	r2, r3, #8
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d078      	beq.n	8008674 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <HAL_UART_IRQHandler+0x11c>
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f970 	bl	800887c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	bf0c      	ite	eq
 80085aa:	2301      	moveq	r3, #1
 80085ac:	2300      	movne	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	f003 0308 	and.w	r3, r3, #8
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <HAL_UART_IRQHandler+0x144>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d031      	beq.n	8008628 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f8b9 	bl	800873c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d4:	2b40      	cmp	r3, #64	; 0x40
 80085d6:	d123      	bne.n	8008620 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	695a      	ldr	r2, [r3, #20]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d013      	beq.n	8008618 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f4:	4a21      	ldr	r2, [pc, #132]	; (800867c <HAL_UART_IRQHandler+0x1fc>)
 80085f6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fd fdb4 	bl	800616a <HAL_DMA_Abort_IT>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d016      	beq.n	8008636 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008612:	4610      	mov	r0, r2
 8008614:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008616:	e00e      	b.n	8008636 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f83b 	bl	8008694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861e:	e00a      	b.n	8008636 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f837 	bl	8008694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008626:	e006      	b.n	8008636 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f833 	bl	8008694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008634:	e01e      	b.n	8008674 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008636:	bf00      	nop
    return;
 8008638:	e01c      	b.n	8008674 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_UART_IRQHandler+0x1d6>
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8a6 	bl	80087a0 <UART_Transmit_IT>
    return;
 8008654:	e00f      	b.n	8008676 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00a      	beq.n	8008676 <HAL_UART_IRQHandler+0x1f6>
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d005      	beq.n	8008676 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8ee 	bl	800884c <UART_EndTransmit_IT>
    return;
 8008670:	bf00      	nop
 8008672:	e000      	b.n	8008676 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008674:	bf00      	nop
  }
}
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	08008779 	.word	0x08008779

08008680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	4613      	mov	r3, r2
 80086b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b8:	e02c      	b.n	8008714 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d028      	beq.n	8008714 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80086c8:	f7fd fbe0 	bl	8005e8c <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	69ba      	ldr	r2, [r7, #24]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d21d      	bcs.n	8008714 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0201 	bic.w	r2, r2, #1
 80086f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e00f      	b.n	8008734 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4013      	ands	r3, r2
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	bf0c      	ite	eq
 8008724:	2301      	moveq	r3, #1
 8008726:	2300      	movne	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	429a      	cmp	r2, r3
 8008730:	d0c3      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68da      	ldr	r2, [r3, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008752:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695a      	ldr	r2, [r3, #20]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0201 	bic.w	r2, r2, #1
 8008762:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff ff7e 	bl	8008694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008798:	bf00      	nop
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b21      	cmp	r3, #33	; 0x21
 80087b2:	d144      	bne.n	800883e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087bc:	d11a      	bne.n	80087f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	1c9a      	adds	r2, r3, #2
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	621a      	str	r2, [r3, #32]
 80087e6:	e00e      	b.n	8008806 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	621a      	str	r2, [r3, #32]
 80087f2:	e008      	b.n	8008806 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	1c59      	adds	r1, r3, #1
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6211      	str	r1, [r2, #32]
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800880a:	b29b      	uxth	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	b29b      	uxth	r3, r3
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4619      	mov	r1, r3
 8008814:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10f      	bne.n	800883a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008828:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008838:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	e000      	b.n	8008840 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800883e:	2302      	movs	r3, #2
  }
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008862:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff ff07 	bl	8008680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b22      	cmp	r3, #34	; 0x22
 800888e:	d171      	bne.n	8008974 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008898:	d123      	bne.n	80088e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10e      	bne.n	80088c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	1c9a      	adds	r2, r3, #2
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	629a      	str	r2, [r3, #40]	; 0x28
 80088c4:	e029      	b.n	800891a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
 80088e0:	e01b      	b.n	800891a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6858      	ldr	r0, [r3, #4]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	1c59      	adds	r1, r3, #1
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6291      	str	r1, [r2, #40]	; 0x28
 80088fa:	b2c2      	uxtb	r2, r0
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	e00c      	b.n	800891a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	1c58      	adds	r0, r3, #1
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	6288      	str	r0, [r1, #40]	; 0x28
 8008912:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800891e:	b29b      	uxth	r3, r3
 8008920:	3b01      	subs	r3, #1
 8008922:	b29b      	uxth	r3, r3
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	4619      	mov	r1, r3
 8008928:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800892a:	2b00      	cmp	r3, #0
 800892c:	d120      	bne.n	8008970 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0220 	bic.w	r2, r2, #32
 800893c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800894c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0201 	bic.w	r2, r2, #1
 800895c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7f9 fbee 	bl	8002148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e002      	b.n	8008976 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008974:	2302      	movs	r3, #2
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80089c2:	f023 030c 	bic.w	r3, r3, #12
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	68f9      	ldr	r1, [r7, #12]
 80089cc:	430b      	orrs	r3, r1
 80089ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ee:	f040 818b 	bne.w	8008d08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4ac1      	ldr	r2, [pc, #772]	; (8008cfc <UART_SetConfig+0x37c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d005      	beq.n	8008a08 <UART_SetConfig+0x88>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4abf      	ldr	r2, [pc, #764]	; (8008d00 <UART_SetConfig+0x380>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	f040 80bd 	bne.w	8008b82 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a08:	f7fe fad0 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 8008a0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	461d      	mov	r5, r3
 8008a12:	f04f 0600 	mov.w	r6, #0
 8008a16:	46a8      	mov	r8, r5
 8008a18:	46b1      	mov	r9, r6
 8008a1a:	eb18 0308 	adds.w	r3, r8, r8
 8008a1e:	eb49 0409 	adc.w	r4, r9, r9
 8008a22:	4698      	mov	r8, r3
 8008a24:	46a1      	mov	r9, r4
 8008a26:	eb18 0805 	adds.w	r8, r8, r5
 8008a2a:	eb49 0906 	adc.w	r9, r9, r6
 8008a2e:	f04f 0100 	mov.w	r1, #0
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a42:	4688      	mov	r8, r1
 8008a44:	4691      	mov	r9, r2
 8008a46:	eb18 0005 	adds.w	r0, r8, r5
 8008a4a:	eb49 0106 	adc.w	r1, r9, r6
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	461d      	mov	r5, r3
 8008a54:	f04f 0600 	mov.w	r6, #0
 8008a58:	196b      	adds	r3, r5, r5
 8008a5a:	eb46 0406 	adc.w	r4, r6, r6
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4623      	mov	r3, r4
 8008a62:	f7f8 f883 	bl	8000b6c <__aeabi_uldivmod>
 8008a66:	4603      	mov	r3, r0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4ba5      	ldr	r3, [pc, #660]	; (8008d04 <UART_SetConfig+0x384>)
 8008a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a72:	095b      	lsrs	r3, r3, #5
 8008a74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	461d      	mov	r5, r3
 8008a7c:	f04f 0600 	mov.w	r6, #0
 8008a80:	46a9      	mov	r9, r5
 8008a82:	46b2      	mov	sl, r6
 8008a84:	eb19 0309 	adds.w	r3, r9, r9
 8008a88:	eb4a 040a 	adc.w	r4, sl, sl
 8008a8c:	4699      	mov	r9, r3
 8008a8e:	46a2      	mov	sl, r4
 8008a90:	eb19 0905 	adds.w	r9, r9, r5
 8008a94:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a98:	f04f 0100 	mov.w	r1, #0
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008aa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008aac:	4689      	mov	r9, r1
 8008aae:	4692      	mov	sl, r2
 8008ab0:	eb19 0005 	adds.w	r0, r9, r5
 8008ab4:	eb4a 0106 	adc.w	r1, sl, r6
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	461d      	mov	r5, r3
 8008abe:	f04f 0600 	mov.w	r6, #0
 8008ac2:	196b      	adds	r3, r5, r5
 8008ac4:	eb46 0406 	adc.w	r4, r6, r6
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4623      	mov	r3, r4
 8008acc:	f7f8 f84e 	bl	8000b6c <__aeabi_uldivmod>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b8b      	ldr	r3, [pc, #556]	; (8008d04 <UART_SetConfig+0x384>)
 8008ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8008adc:	095b      	lsrs	r3, r3, #5
 8008ade:	2164      	movs	r1, #100	; 0x64
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	3332      	adds	r3, #50	; 0x32
 8008aea:	4a86      	ldr	r2, [pc, #536]	; (8008d04 <UART_SetConfig+0x384>)
 8008aec:	fba2 2303 	umull	r2, r3, r2, r3
 8008af0:	095b      	lsrs	r3, r3, #5
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008af8:	4498      	add	r8, r3
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	461d      	mov	r5, r3
 8008afe:	f04f 0600 	mov.w	r6, #0
 8008b02:	46a9      	mov	r9, r5
 8008b04:	46b2      	mov	sl, r6
 8008b06:	eb19 0309 	adds.w	r3, r9, r9
 8008b0a:	eb4a 040a 	adc.w	r4, sl, sl
 8008b0e:	4699      	mov	r9, r3
 8008b10:	46a2      	mov	sl, r4
 8008b12:	eb19 0905 	adds.w	r9, r9, r5
 8008b16:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b1a:	f04f 0100 	mov.w	r1, #0
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b2e:	4689      	mov	r9, r1
 8008b30:	4692      	mov	sl, r2
 8008b32:	eb19 0005 	adds.w	r0, r9, r5
 8008b36:	eb4a 0106 	adc.w	r1, sl, r6
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	461d      	mov	r5, r3
 8008b40:	f04f 0600 	mov.w	r6, #0
 8008b44:	196b      	adds	r3, r5, r5
 8008b46:	eb46 0406 	adc.w	r4, r6, r6
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	f7f8 f80d 	bl	8000b6c <__aeabi_uldivmod>
 8008b52:	4603      	mov	r3, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	461a      	mov	r2, r3
 8008b58:	4b6a      	ldr	r3, [pc, #424]	; (8008d04 <UART_SetConfig+0x384>)
 8008b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b5e:	095b      	lsrs	r3, r3, #5
 8008b60:	2164      	movs	r1, #100	; 0x64
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	3332      	adds	r3, #50	; 0x32
 8008b6c:	4a65      	ldr	r2, [pc, #404]	; (8008d04 <UART_SetConfig+0x384>)
 8008b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	f003 0207 	and.w	r2, r3, #7
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4442      	add	r2, r8
 8008b7e:	609a      	str	r2, [r3, #8]
 8008b80:	e26f      	b.n	8009062 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b82:	f7fe f9ff 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 8008b86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	461d      	mov	r5, r3
 8008b8c:	f04f 0600 	mov.w	r6, #0
 8008b90:	46a8      	mov	r8, r5
 8008b92:	46b1      	mov	r9, r6
 8008b94:	eb18 0308 	adds.w	r3, r8, r8
 8008b98:	eb49 0409 	adc.w	r4, r9, r9
 8008b9c:	4698      	mov	r8, r3
 8008b9e:	46a1      	mov	r9, r4
 8008ba0:	eb18 0805 	adds.w	r8, r8, r5
 8008ba4:	eb49 0906 	adc.w	r9, r9, r6
 8008ba8:	f04f 0100 	mov.w	r1, #0
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bbc:	4688      	mov	r8, r1
 8008bbe:	4691      	mov	r9, r2
 8008bc0:	eb18 0005 	adds.w	r0, r8, r5
 8008bc4:	eb49 0106 	adc.w	r1, r9, r6
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	461d      	mov	r5, r3
 8008bce:	f04f 0600 	mov.w	r6, #0
 8008bd2:	196b      	adds	r3, r5, r5
 8008bd4:	eb46 0406 	adc.w	r4, r6, r6
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4623      	mov	r3, r4
 8008bdc:	f7f7 ffc6 	bl	8000b6c <__aeabi_uldivmod>
 8008be0:	4603      	mov	r3, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	461a      	mov	r2, r3
 8008be6:	4b47      	ldr	r3, [pc, #284]	; (8008d04 <UART_SetConfig+0x384>)
 8008be8:	fba3 2302 	umull	r2, r3, r3, r2
 8008bec:	095b      	lsrs	r3, r3, #5
 8008bee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	461d      	mov	r5, r3
 8008bf6:	f04f 0600 	mov.w	r6, #0
 8008bfa:	46a9      	mov	r9, r5
 8008bfc:	46b2      	mov	sl, r6
 8008bfe:	eb19 0309 	adds.w	r3, r9, r9
 8008c02:	eb4a 040a 	adc.w	r4, sl, sl
 8008c06:	4699      	mov	r9, r3
 8008c08:	46a2      	mov	sl, r4
 8008c0a:	eb19 0905 	adds.w	r9, r9, r5
 8008c0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c12:	f04f 0100 	mov.w	r1, #0
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c26:	4689      	mov	r9, r1
 8008c28:	4692      	mov	sl, r2
 8008c2a:	eb19 0005 	adds.w	r0, r9, r5
 8008c2e:	eb4a 0106 	adc.w	r1, sl, r6
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	461d      	mov	r5, r3
 8008c38:	f04f 0600 	mov.w	r6, #0
 8008c3c:	196b      	adds	r3, r5, r5
 8008c3e:	eb46 0406 	adc.w	r4, r6, r6
 8008c42:	461a      	mov	r2, r3
 8008c44:	4623      	mov	r3, r4
 8008c46:	f7f7 ff91 	bl	8000b6c <__aeabi_uldivmod>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4b2c      	ldr	r3, [pc, #176]	; (8008d04 <UART_SetConfig+0x384>)
 8008c52:	fba3 1302 	umull	r1, r3, r3, r2
 8008c56:	095b      	lsrs	r3, r3, #5
 8008c58:	2164      	movs	r1, #100	; 0x64
 8008c5a:	fb01 f303 	mul.w	r3, r1, r3
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	3332      	adds	r3, #50	; 0x32
 8008c64:	4a27      	ldr	r2, [pc, #156]	; (8008d04 <UART_SetConfig+0x384>)
 8008c66:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c72:	4498      	add	r8, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	461d      	mov	r5, r3
 8008c78:	f04f 0600 	mov.w	r6, #0
 8008c7c:	46a9      	mov	r9, r5
 8008c7e:	46b2      	mov	sl, r6
 8008c80:	eb19 0309 	adds.w	r3, r9, r9
 8008c84:	eb4a 040a 	adc.w	r4, sl, sl
 8008c88:	4699      	mov	r9, r3
 8008c8a:	46a2      	mov	sl, r4
 8008c8c:	eb19 0905 	adds.w	r9, r9, r5
 8008c90:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c94:	f04f 0100 	mov.w	r1, #0
 8008c98:	f04f 0200 	mov.w	r2, #0
 8008c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ca8:	4689      	mov	r9, r1
 8008caa:	4692      	mov	sl, r2
 8008cac:	eb19 0005 	adds.w	r0, r9, r5
 8008cb0:	eb4a 0106 	adc.w	r1, sl, r6
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	461d      	mov	r5, r3
 8008cba:	f04f 0600 	mov.w	r6, #0
 8008cbe:	196b      	adds	r3, r5, r5
 8008cc0:	eb46 0406 	adc.w	r4, r6, r6
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	f7f7 ff50 	bl	8000b6c <__aeabi_uldivmod>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <UART_SetConfig+0x384>)
 8008cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	2164      	movs	r1, #100	; 0x64
 8008cdc:	fb01 f303 	mul.w	r3, r1, r3
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	3332      	adds	r3, #50	; 0x32
 8008ce6:	4a07      	ldr	r2, [pc, #28]	; (8008d04 <UART_SetConfig+0x384>)
 8008ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	f003 0207 	and.w	r2, r3, #7
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4442      	add	r2, r8
 8008cf8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008cfa:	e1b2      	b.n	8009062 <UART_SetConfig+0x6e2>
 8008cfc:	40011000 	.word	0x40011000
 8008d00:	40011400 	.word	0x40011400
 8008d04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4ad7      	ldr	r2, [pc, #860]	; (800906c <UART_SetConfig+0x6ec>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d005      	beq.n	8008d1e <UART_SetConfig+0x39e>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4ad6      	ldr	r2, [pc, #856]	; (8009070 <UART_SetConfig+0x6f0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	f040 80d1 	bne.w	8008ec0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d1e:	f7fe f945 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 8008d22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	469a      	mov	sl, r3
 8008d28:	f04f 0b00 	mov.w	fp, #0
 8008d2c:	46d0      	mov	r8, sl
 8008d2e:	46d9      	mov	r9, fp
 8008d30:	eb18 0308 	adds.w	r3, r8, r8
 8008d34:	eb49 0409 	adc.w	r4, r9, r9
 8008d38:	4698      	mov	r8, r3
 8008d3a:	46a1      	mov	r9, r4
 8008d3c:	eb18 080a 	adds.w	r8, r8, sl
 8008d40:	eb49 090b 	adc.w	r9, r9, fp
 8008d44:	f04f 0100 	mov.w	r1, #0
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d58:	4688      	mov	r8, r1
 8008d5a:	4691      	mov	r9, r2
 8008d5c:	eb1a 0508 	adds.w	r5, sl, r8
 8008d60:	eb4b 0609 	adc.w	r6, fp, r9
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	f04f 0400 	mov.w	r4, #0
 8008d76:	0094      	lsls	r4, r2, #2
 8008d78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d7c:	008b      	lsls	r3, r1, #2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4623      	mov	r3, r4
 8008d82:	4628      	mov	r0, r5
 8008d84:	4631      	mov	r1, r6
 8008d86:	f7f7 fef1 	bl	8000b6c <__aeabi_uldivmod>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4bb8      	ldr	r3, [pc, #736]	; (8009074 <UART_SetConfig+0x6f4>)
 8008d92:	fba3 2302 	umull	r2, r3, r3, r2
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	469b      	mov	fp, r3
 8008da0:	f04f 0c00 	mov.w	ip, #0
 8008da4:	46d9      	mov	r9, fp
 8008da6:	46e2      	mov	sl, ip
 8008da8:	eb19 0309 	adds.w	r3, r9, r9
 8008dac:	eb4a 040a 	adc.w	r4, sl, sl
 8008db0:	4699      	mov	r9, r3
 8008db2:	46a2      	mov	sl, r4
 8008db4:	eb19 090b 	adds.w	r9, r9, fp
 8008db8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008dbc:	f04f 0100 	mov.w	r1, #0
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dd0:	4689      	mov	r9, r1
 8008dd2:	4692      	mov	sl, r2
 8008dd4:	eb1b 0509 	adds.w	r5, fp, r9
 8008dd8:	eb4c 060a 	adc.w	r6, ip, sl
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4619      	mov	r1, r3
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	f04f 0400 	mov.w	r4, #0
 8008dee:	0094      	lsls	r4, r2, #2
 8008df0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008df4:	008b      	lsls	r3, r1, #2
 8008df6:	461a      	mov	r2, r3
 8008df8:	4623      	mov	r3, r4
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	f7f7 feb5 	bl	8000b6c <__aeabi_uldivmod>
 8008e02:	4603      	mov	r3, r0
 8008e04:	460c      	mov	r4, r1
 8008e06:	461a      	mov	r2, r3
 8008e08:	4b9a      	ldr	r3, [pc, #616]	; (8009074 <UART_SetConfig+0x6f4>)
 8008e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	2164      	movs	r1, #100	; 0x64
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	3332      	adds	r3, #50	; 0x32
 8008e1c:	4a95      	ldr	r2, [pc, #596]	; (8009074 <UART_SetConfig+0x6f4>)
 8008e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e28:	4498      	add	r8, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	469b      	mov	fp, r3
 8008e2e:	f04f 0c00 	mov.w	ip, #0
 8008e32:	46d9      	mov	r9, fp
 8008e34:	46e2      	mov	sl, ip
 8008e36:	eb19 0309 	adds.w	r3, r9, r9
 8008e3a:	eb4a 040a 	adc.w	r4, sl, sl
 8008e3e:	4699      	mov	r9, r3
 8008e40:	46a2      	mov	sl, r4
 8008e42:	eb19 090b 	adds.w	r9, r9, fp
 8008e46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e4a:	f04f 0100 	mov.w	r1, #0
 8008e4e:	f04f 0200 	mov.w	r2, #0
 8008e52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e5e:	4689      	mov	r9, r1
 8008e60:	4692      	mov	sl, r2
 8008e62:	eb1b 0509 	adds.w	r5, fp, r9
 8008e66:	eb4c 060a 	adc.w	r6, ip, sl
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	f04f 0400 	mov.w	r4, #0
 8008e7c:	0094      	lsls	r4, r2, #2
 8008e7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e82:	008b      	lsls	r3, r1, #2
 8008e84:	461a      	mov	r2, r3
 8008e86:	4623      	mov	r3, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	f7f7 fe6e 	bl	8000b6c <__aeabi_uldivmod>
 8008e90:	4603      	mov	r3, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	461a      	mov	r2, r3
 8008e96:	4b77      	ldr	r3, [pc, #476]	; (8009074 <UART_SetConfig+0x6f4>)
 8008e98:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	2164      	movs	r1, #100	; 0x64
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	3332      	adds	r3, #50	; 0x32
 8008eaa:	4a72      	ldr	r2, [pc, #456]	; (8009074 <UART_SetConfig+0x6f4>)
 8008eac:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	f003 020f 	and.w	r2, r3, #15
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4442      	add	r2, r8
 8008ebc:	609a      	str	r2, [r3, #8]
 8008ebe:	e0d0      	b.n	8009062 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ec0:	f7fe f860 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 8008ec4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	469a      	mov	sl, r3
 8008eca:	f04f 0b00 	mov.w	fp, #0
 8008ece:	46d0      	mov	r8, sl
 8008ed0:	46d9      	mov	r9, fp
 8008ed2:	eb18 0308 	adds.w	r3, r8, r8
 8008ed6:	eb49 0409 	adc.w	r4, r9, r9
 8008eda:	4698      	mov	r8, r3
 8008edc:	46a1      	mov	r9, r4
 8008ede:	eb18 080a 	adds.w	r8, r8, sl
 8008ee2:	eb49 090b 	adc.w	r9, r9, fp
 8008ee6:	f04f 0100 	mov.w	r1, #0
 8008eea:	f04f 0200 	mov.w	r2, #0
 8008eee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ef2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ef6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008efa:	4688      	mov	r8, r1
 8008efc:	4691      	mov	r9, r2
 8008efe:	eb1a 0508 	adds.w	r5, sl, r8
 8008f02:	eb4b 0609 	adc.w	r6, fp, r9
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	f04f 0400 	mov.w	r4, #0
 8008f18:	0094      	lsls	r4, r2, #2
 8008f1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f1e:	008b      	lsls	r3, r1, #2
 8008f20:	461a      	mov	r2, r3
 8008f22:	4623      	mov	r3, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	4631      	mov	r1, r6
 8008f28:	f7f7 fe20 	bl	8000b6c <__aeabi_uldivmod>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	461a      	mov	r2, r3
 8008f32:	4b50      	ldr	r3, [pc, #320]	; (8009074 <UART_SetConfig+0x6f4>)
 8008f34:	fba3 2302 	umull	r2, r3, r3, r2
 8008f38:	095b      	lsrs	r3, r3, #5
 8008f3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	469b      	mov	fp, r3
 8008f42:	f04f 0c00 	mov.w	ip, #0
 8008f46:	46d9      	mov	r9, fp
 8008f48:	46e2      	mov	sl, ip
 8008f4a:	eb19 0309 	adds.w	r3, r9, r9
 8008f4e:	eb4a 040a 	adc.w	r4, sl, sl
 8008f52:	4699      	mov	r9, r3
 8008f54:	46a2      	mov	sl, r4
 8008f56:	eb19 090b 	adds.w	r9, r9, fp
 8008f5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f5e:	f04f 0100 	mov.w	r1, #0
 8008f62:	f04f 0200 	mov.w	r2, #0
 8008f66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f72:	4689      	mov	r9, r1
 8008f74:	4692      	mov	sl, r2
 8008f76:	eb1b 0509 	adds.w	r5, fp, r9
 8008f7a:	eb4c 060a 	adc.w	r6, ip, sl
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	4619      	mov	r1, r3
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	f04f 0300 	mov.w	r3, #0
 8008f8c:	f04f 0400 	mov.w	r4, #0
 8008f90:	0094      	lsls	r4, r2, #2
 8008f92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f96:	008b      	lsls	r3, r1, #2
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	f7f7 fde4 	bl	8000b6c <__aeabi_uldivmod>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4b32      	ldr	r3, [pc, #200]	; (8009074 <UART_SetConfig+0x6f4>)
 8008fac:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb0:	095b      	lsrs	r3, r3, #5
 8008fb2:	2164      	movs	r1, #100	; 0x64
 8008fb4:	fb01 f303 	mul.w	r3, r1, r3
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	011b      	lsls	r3, r3, #4
 8008fbc:	3332      	adds	r3, #50	; 0x32
 8008fbe:	4a2d      	ldr	r2, [pc, #180]	; (8009074 <UART_SetConfig+0x6f4>)
 8008fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc4:	095b      	lsrs	r3, r3, #5
 8008fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fca:	4498      	add	r8, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	469b      	mov	fp, r3
 8008fd0:	f04f 0c00 	mov.w	ip, #0
 8008fd4:	46d9      	mov	r9, fp
 8008fd6:	46e2      	mov	sl, ip
 8008fd8:	eb19 0309 	adds.w	r3, r9, r9
 8008fdc:	eb4a 040a 	adc.w	r4, sl, sl
 8008fe0:	4699      	mov	r9, r3
 8008fe2:	46a2      	mov	sl, r4
 8008fe4:	eb19 090b 	adds.w	r9, r9, fp
 8008fe8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008fec:	f04f 0100 	mov.w	r1, #0
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ff8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ffc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009000:	4689      	mov	r9, r1
 8009002:	4692      	mov	sl, r2
 8009004:	eb1b 0509 	adds.w	r5, fp, r9
 8009008:	eb4c 060a 	adc.w	r6, ip, sl
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	4619      	mov	r1, r3
 8009012:	f04f 0200 	mov.w	r2, #0
 8009016:	f04f 0300 	mov.w	r3, #0
 800901a:	f04f 0400 	mov.w	r4, #0
 800901e:	0094      	lsls	r4, r2, #2
 8009020:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009024:	008b      	lsls	r3, r1, #2
 8009026:	461a      	mov	r2, r3
 8009028:	4623      	mov	r3, r4
 800902a:	4628      	mov	r0, r5
 800902c:	4631      	mov	r1, r6
 800902e:	f7f7 fd9d 	bl	8000b6c <__aeabi_uldivmod>
 8009032:	4603      	mov	r3, r0
 8009034:	460c      	mov	r4, r1
 8009036:	461a      	mov	r2, r3
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <UART_SetConfig+0x6f4>)
 800903a:	fba3 1302 	umull	r1, r3, r3, r2
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	2164      	movs	r1, #100	; 0x64
 8009042:	fb01 f303 	mul.w	r3, r1, r3
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	3332      	adds	r3, #50	; 0x32
 800904c:	4a09      	ldr	r2, [pc, #36]	; (8009074 <UART_SetConfig+0x6f4>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	f003 020f 	and.w	r2, r3, #15
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4442      	add	r2, r8
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	e7ff      	b.n	8009062 <UART_SetConfig+0x6e2>
 8009062:	bf00      	nop
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906c:	40011000 	.word	0x40011000
 8009070:	40011400 	.word	0x40011400
 8009074:	51eb851f 	.word	0x51eb851f

08009078 <__errno>:
 8009078:	4b01      	ldr	r3, [pc, #4]	; (8009080 <__errno+0x8>)
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20000278 	.word	0x20000278

08009084 <__libc_init_array>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	4e0d      	ldr	r6, [pc, #52]	; (80090bc <__libc_init_array+0x38>)
 8009088:	4c0d      	ldr	r4, [pc, #52]	; (80090c0 <__libc_init_array+0x3c>)
 800908a:	1ba4      	subs	r4, r4, r6
 800908c:	10a4      	asrs	r4, r4, #2
 800908e:	2500      	movs	r5, #0
 8009090:	42a5      	cmp	r5, r4
 8009092:	d109      	bne.n	80090a8 <__libc_init_array+0x24>
 8009094:	4e0b      	ldr	r6, [pc, #44]	; (80090c4 <__libc_init_array+0x40>)
 8009096:	4c0c      	ldr	r4, [pc, #48]	; (80090c8 <__libc_init_array+0x44>)
 8009098:	f001 fe76 	bl	800ad88 <_init>
 800909c:	1ba4      	subs	r4, r4, r6
 800909e:	10a4      	asrs	r4, r4, #2
 80090a0:	2500      	movs	r5, #0
 80090a2:	42a5      	cmp	r5, r4
 80090a4:	d105      	bne.n	80090b2 <__libc_init_array+0x2e>
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090ac:	4798      	blx	r3
 80090ae:	3501      	adds	r5, #1
 80090b0:	e7ee      	b.n	8009090 <__libc_init_array+0xc>
 80090b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090b6:	4798      	blx	r3
 80090b8:	3501      	adds	r5, #1
 80090ba:	e7f2      	b.n	80090a2 <__libc_init_array+0x1e>
 80090bc:	0800b5e0 	.word	0x0800b5e0
 80090c0:	0800b5e0 	.word	0x0800b5e0
 80090c4:	0800b5e0 	.word	0x0800b5e0
 80090c8:	0800b5e4 	.word	0x0800b5e4

080090cc <malloc>:
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <malloc+0xc>)
 80090ce:	4601      	mov	r1, r0
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	f000 b859 	b.w	8009188 <_malloc_r>
 80090d6:	bf00      	nop
 80090d8:	20000278 	.word	0x20000278

080090dc <memset>:
 80090dc:	4402      	add	r2, r0
 80090de:	4603      	mov	r3, r0
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d100      	bne.n	80090e6 <memset+0xa>
 80090e4:	4770      	bx	lr
 80090e6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ea:	e7f9      	b.n	80090e0 <memset+0x4>

080090ec <_free_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4605      	mov	r5, r0
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d045      	beq.n	8009180 <_free_r+0x94>
 80090f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f8:	1f0c      	subs	r4, r1, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfb8      	it	lt
 80090fe:	18e4      	addlt	r4, r4, r3
 8009100:	f000 fcba 	bl	8009a78 <__malloc_lock>
 8009104:	4a1f      	ldr	r2, [pc, #124]	; (8009184 <_free_r+0x98>)
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	4610      	mov	r0, r2
 800910a:	b933      	cbnz	r3, 800911a <_free_r+0x2e>
 800910c:	6063      	str	r3, [r4, #4]
 800910e:	6014      	str	r4, [r2, #0]
 8009110:	4628      	mov	r0, r5
 8009112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009116:	f000 bcb0 	b.w	8009a7a <__malloc_unlock>
 800911a:	42a3      	cmp	r3, r4
 800911c:	d90c      	bls.n	8009138 <_free_r+0x4c>
 800911e:	6821      	ldr	r1, [r4, #0]
 8009120:	1862      	adds	r2, r4, r1
 8009122:	4293      	cmp	r3, r2
 8009124:	bf04      	itt	eq
 8009126:	681a      	ldreq	r2, [r3, #0]
 8009128:	685b      	ldreq	r3, [r3, #4]
 800912a:	6063      	str	r3, [r4, #4]
 800912c:	bf04      	itt	eq
 800912e:	1852      	addeq	r2, r2, r1
 8009130:	6022      	streq	r2, [r4, #0]
 8009132:	6004      	str	r4, [r0, #0]
 8009134:	e7ec      	b.n	8009110 <_free_r+0x24>
 8009136:	4613      	mov	r3, r2
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	b10a      	cbz	r2, 8009140 <_free_r+0x54>
 800913c:	42a2      	cmp	r2, r4
 800913e:	d9fa      	bls.n	8009136 <_free_r+0x4a>
 8009140:	6819      	ldr	r1, [r3, #0]
 8009142:	1858      	adds	r0, r3, r1
 8009144:	42a0      	cmp	r0, r4
 8009146:	d10b      	bne.n	8009160 <_free_r+0x74>
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	4401      	add	r1, r0
 800914c:	1858      	adds	r0, r3, r1
 800914e:	4282      	cmp	r2, r0
 8009150:	6019      	str	r1, [r3, #0]
 8009152:	d1dd      	bne.n	8009110 <_free_r+0x24>
 8009154:	6810      	ldr	r0, [r2, #0]
 8009156:	6852      	ldr	r2, [r2, #4]
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	4401      	add	r1, r0
 800915c:	6019      	str	r1, [r3, #0]
 800915e:	e7d7      	b.n	8009110 <_free_r+0x24>
 8009160:	d902      	bls.n	8009168 <_free_r+0x7c>
 8009162:	230c      	movs	r3, #12
 8009164:	602b      	str	r3, [r5, #0]
 8009166:	e7d3      	b.n	8009110 <_free_r+0x24>
 8009168:	6820      	ldr	r0, [r4, #0]
 800916a:	1821      	adds	r1, r4, r0
 800916c:	428a      	cmp	r2, r1
 800916e:	bf04      	itt	eq
 8009170:	6811      	ldreq	r1, [r2, #0]
 8009172:	6852      	ldreq	r2, [r2, #4]
 8009174:	6062      	str	r2, [r4, #4]
 8009176:	bf04      	itt	eq
 8009178:	1809      	addeq	r1, r1, r0
 800917a:	6021      	streq	r1, [r4, #0]
 800917c:	605c      	str	r4, [r3, #4]
 800917e:	e7c7      	b.n	8009110 <_free_r+0x24>
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	bf00      	nop
 8009184:	200005c0 	.word	0x200005c0

08009188 <_malloc_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	1ccd      	adds	r5, r1, #3
 800918c:	f025 0503 	bic.w	r5, r5, #3
 8009190:	3508      	adds	r5, #8
 8009192:	2d0c      	cmp	r5, #12
 8009194:	bf38      	it	cc
 8009196:	250c      	movcc	r5, #12
 8009198:	2d00      	cmp	r5, #0
 800919a:	4606      	mov	r6, r0
 800919c:	db01      	blt.n	80091a2 <_malloc_r+0x1a>
 800919e:	42a9      	cmp	r1, r5
 80091a0:	d903      	bls.n	80091aa <_malloc_r+0x22>
 80091a2:	230c      	movs	r3, #12
 80091a4:	6033      	str	r3, [r6, #0]
 80091a6:	2000      	movs	r0, #0
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	f000 fc65 	bl	8009a78 <__malloc_lock>
 80091ae:	4a21      	ldr	r2, [pc, #132]	; (8009234 <_malloc_r+0xac>)
 80091b0:	6814      	ldr	r4, [r2, #0]
 80091b2:	4621      	mov	r1, r4
 80091b4:	b991      	cbnz	r1, 80091dc <_malloc_r+0x54>
 80091b6:	4c20      	ldr	r4, [pc, #128]	; (8009238 <_malloc_r+0xb0>)
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	b91b      	cbnz	r3, 80091c4 <_malloc_r+0x3c>
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 f8b9 	bl	8009334 <_sbrk_r>
 80091c2:	6020      	str	r0, [r4, #0]
 80091c4:	4629      	mov	r1, r5
 80091c6:	4630      	mov	r0, r6
 80091c8:	f000 f8b4 	bl	8009334 <_sbrk_r>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d124      	bne.n	800921a <_malloc_r+0x92>
 80091d0:	230c      	movs	r3, #12
 80091d2:	6033      	str	r3, [r6, #0]
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 fc50 	bl	8009a7a <__malloc_unlock>
 80091da:	e7e4      	b.n	80091a6 <_malloc_r+0x1e>
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	1b5b      	subs	r3, r3, r5
 80091e0:	d418      	bmi.n	8009214 <_malloc_r+0x8c>
 80091e2:	2b0b      	cmp	r3, #11
 80091e4:	d90f      	bls.n	8009206 <_malloc_r+0x7e>
 80091e6:	600b      	str	r3, [r1, #0]
 80091e8:	50cd      	str	r5, [r1, r3]
 80091ea:	18cc      	adds	r4, r1, r3
 80091ec:	4630      	mov	r0, r6
 80091ee:	f000 fc44 	bl	8009a7a <__malloc_unlock>
 80091f2:	f104 000b 	add.w	r0, r4, #11
 80091f6:	1d23      	adds	r3, r4, #4
 80091f8:	f020 0007 	bic.w	r0, r0, #7
 80091fc:	1ac3      	subs	r3, r0, r3
 80091fe:	d0d3      	beq.n	80091a8 <_malloc_r+0x20>
 8009200:	425a      	negs	r2, r3
 8009202:	50e2      	str	r2, [r4, r3]
 8009204:	e7d0      	b.n	80091a8 <_malloc_r+0x20>
 8009206:	428c      	cmp	r4, r1
 8009208:	684b      	ldr	r3, [r1, #4]
 800920a:	bf16      	itet	ne
 800920c:	6063      	strne	r3, [r4, #4]
 800920e:	6013      	streq	r3, [r2, #0]
 8009210:	460c      	movne	r4, r1
 8009212:	e7eb      	b.n	80091ec <_malloc_r+0x64>
 8009214:	460c      	mov	r4, r1
 8009216:	6849      	ldr	r1, [r1, #4]
 8009218:	e7cc      	b.n	80091b4 <_malloc_r+0x2c>
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d005      	beq.n	8009230 <_malloc_r+0xa8>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f884 	bl	8009334 <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d0cf      	beq.n	80091d0 <_malloc_r+0x48>
 8009230:	6025      	str	r5, [r4, #0]
 8009232:	e7db      	b.n	80091ec <_malloc_r+0x64>
 8009234:	200005c0 	.word	0x200005c0
 8009238:	200005c4 	.word	0x200005c4

0800923c <iprintf>:
 800923c:	b40f      	push	{r0, r1, r2, r3}
 800923e:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <iprintf+0x2c>)
 8009240:	b513      	push	{r0, r1, r4, lr}
 8009242:	681c      	ldr	r4, [r3, #0]
 8009244:	b124      	cbz	r4, 8009250 <iprintf+0x14>
 8009246:	69a3      	ldr	r3, [r4, #24]
 8009248:	b913      	cbnz	r3, 8009250 <iprintf+0x14>
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fb0a 	bl	8009864 <__sinit>
 8009250:	ab05      	add	r3, sp, #20
 8009252:	9a04      	ldr	r2, [sp, #16]
 8009254:	68a1      	ldr	r1, [r4, #8]
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fc39 	bl	8009ad0 <_vfiprintf_r>
 800925e:	b002      	add	sp, #8
 8009260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009264:	b004      	add	sp, #16
 8009266:	4770      	bx	lr
 8009268:	20000278 	.word	0x20000278

0800926c <_puts_r>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	460e      	mov	r6, r1
 8009270:	4605      	mov	r5, r0
 8009272:	b118      	cbz	r0, 800927c <_puts_r+0x10>
 8009274:	6983      	ldr	r3, [r0, #24]
 8009276:	b90b      	cbnz	r3, 800927c <_puts_r+0x10>
 8009278:	f000 faf4 	bl	8009864 <__sinit>
 800927c:	69ab      	ldr	r3, [r5, #24]
 800927e:	68ac      	ldr	r4, [r5, #8]
 8009280:	b913      	cbnz	r3, 8009288 <_puts_r+0x1c>
 8009282:	4628      	mov	r0, r5
 8009284:	f000 faee 	bl	8009864 <__sinit>
 8009288:	4b23      	ldr	r3, [pc, #140]	; (8009318 <_puts_r+0xac>)
 800928a:	429c      	cmp	r4, r3
 800928c:	d117      	bne.n	80092be <_puts_r+0x52>
 800928e:	686c      	ldr	r4, [r5, #4]
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	071b      	lsls	r3, r3, #28
 8009294:	d51d      	bpl.n	80092d2 <_puts_r+0x66>
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	b1db      	cbz	r3, 80092d2 <_puts_r+0x66>
 800929a:	3e01      	subs	r6, #1
 800929c:	68a3      	ldr	r3, [r4, #8]
 800929e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092a2:	3b01      	subs	r3, #1
 80092a4:	60a3      	str	r3, [r4, #8]
 80092a6:	b9e9      	cbnz	r1, 80092e4 <_puts_r+0x78>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	da2e      	bge.n	800930a <_puts_r+0x9e>
 80092ac:	4622      	mov	r2, r4
 80092ae:	210a      	movs	r1, #10
 80092b0:	4628      	mov	r0, r5
 80092b2:	f000 f915 	bl	80094e0 <__swbuf_r>
 80092b6:	3001      	adds	r0, #1
 80092b8:	d011      	beq.n	80092de <_puts_r+0x72>
 80092ba:	200a      	movs	r0, #10
 80092bc:	e011      	b.n	80092e2 <_puts_r+0x76>
 80092be:	4b17      	ldr	r3, [pc, #92]	; (800931c <_puts_r+0xb0>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	d101      	bne.n	80092c8 <_puts_r+0x5c>
 80092c4:	68ac      	ldr	r4, [r5, #8]
 80092c6:	e7e3      	b.n	8009290 <_puts_r+0x24>
 80092c8:	4b15      	ldr	r3, [pc, #84]	; (8009320 <_puts_r+0xb4>)
 80092ca:	429c      	cmp	r4, r3
 80092cc:	bf08      	it	eq
 80092ce:	68ec      	ldreq	r4, [r5, #12]
 80092d0:	e7de      	b.n	8009290 <_puts_r+0x24>
 80092d2:	4621      	mov	r1, r4
 80092d4:	4628      	mov	r0, r5
 80092d6:	f000 f955 	bl	8009584 <__swsetup_r>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d0dd      	beq.n	800929a <_puts_r+0x2e>
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da04      	bge.n	80092f2 <_puts_r+0x86>
 80092e8:	69a2      	ldr	r2, [r4, #24]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	dc06      	bgt.n	80092fc <_puts_r+0x90>
 80092ee:	290a      	cmp	r1, #10
 80092f0:	d004      	beq.n	80092fc <_puts_r+0x90>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	6022      	str	r2, [r4, #0]
 80092f8:	7019      	strb	r1, [r3, #0]
 80092fa:	e7cf      	b.n	800929c <_puts_r+0x30>
 80092fc:	4622      	mov	r2, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f8ee 	bl	80094e0 <__swbuf_r>
 8009304:	3001      	adds	r0, #1
 8009306:	d1c9      	bne.n	800929c <_puts_r+0x30>
 8009308:	e7e9      	b.n	80092de <_puts_r+0x72>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	200a      	movs	r0, #10
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	6022      	str	r2, [r4, #0]
 8009312:	7018      	strb	r0, [r3, #0]
 8009314:	e7e5      	b.n	80092e2 <_puts_r+0x76>
 8009316:	bf00      	nop
 8009318:	0800b43c 	.word	0x0800b43c
 800931c:	0800b45c 	.word	0x0800b45c
 8009320:	0800b41c 	.word	0x0800b41c

08009324 <puts>:
 8009324:	4b02      	ldr	r3, [pc, #8]	; (8009330 <puts+0xc>)
 8009326:	4601      	mov	r1, r0
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	f7ff bf9f 	b.w	800926c <_puts_r>
 800932e:	bf00      	nop
 8009330:	20000278 	.word	0x20000278

08009334 <_sbrk_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4c06      	ldr	r4, [pc, #24]	; (8009350 <_sbrk_r+0x1c>)
 8009338:	2300      	movs	r3, #0
 800933a:	4605      	mov	r5, r0
 800933c:	4608      	mov	r0, r1
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	f7f9 fa00 	bl	8002744 <_sbrk>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d102      	bne.n	800934e <_sbrk_r+0x1a>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	b103      	cbz	r3, 800934e <_sbrk_r+0x1a>
 800934c:	602b      	str	r3, [r5, #0]
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	20000760 	.word	0x20000760

08009354 <iscanf>:
 8009354:	b40f      	push	{r0, r1, r2, r3}
 8009356:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <iscanf+0x2c>)
 8009358:	b513      	push	{r0, r1, r4, lr}
 800935a:	681c      	ldr	r4, [r3, #0]
 800935c:	b124      	cbz	r4, 8009368 <iscanf+0x14>
 800935e:	69a3      	ldr	r3, [r4, #24]
 8009360:	b913      	cbnz	r3, 8009368 <iscanf+0x14>
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fa7e 	bl	8009864 <__sinit>
 8009368:	ab05      	add	r3, sp, #20
 800936a:	9a04      	ldr	r2, [sp, #16]
 800936c:	6861      	ldr	r1, [r4, #4]
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	4620      	mov	r0, r4
 8009372:	f000 ff9b 	bl	800a2ac <_vfiscanf_r>
 8009376:	b002      	add	sp, #8
 8009378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800937c:	b004      	add	sp, #16
 800937e:	4770      	bx	lr
 8009380:	20000278 	.word	0x20000278

08009384 <setvbuf>:
 8009384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009388:	461d      	mov	r5, r3
 800938a:	4b51      	ldr	r3, [pc, #324]	; (80094d0 <setvbuf+0x14c>)
 800938c:	681e      	ldr	r6, [r3, #0]
 800938e:	4604      	mov	r4, r0
 8009390:	460f      	mov	r7, r1
 8009392:	4690      	mov	r8, r2
 8009394:	b126      	cbz	r6, 80093a0 <setvbuf+0x1c>
 8009396:	69b3      	ldr	r3, [r6, #24]
 8009398:	b913      	cbnz	r3, 80093a0 <setvbuf+0x1c>
 800939a:	4630      	mov	r0, r6
 800939c:	f000 fa62 	bl	8009864 <__sinit>
 80093a0:	4b4c      	ldr	r3, [pc, #304]	; (80094d4 <setvbuf+0x150>)
 80093a2:	429c      	cmp	r4, r3
 80093a4:	d152      	bne.n	800944c <setvbuf+0xc8>
 80093a6:	6874      	ldr	r4, [r6, #4]
 80093a8:	f1b8 0f02 	cmp.w	r8, #2
 80093ac:	d006      	beq.n	80093bc <setvbuf+0x38>
 80093ae:	f1b8 0f01 	cmp.w	r8, #1
 80093b2:	f200 8089 	bhi.w	80094c8 <setvbuf+0x144>
 80093b6:	2d00      	cmp	r5, #0
 80093b8:	f2c0 8086 	blt.w	80094c8 <setvbuf+0x144>
 80093bc:	4621      	mov	r1, r4
 80093be:	4630      	mov	r0, r6
 80093c0:	f000 f9d4 	bl	800976c <_fflush_r>
 80093c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c6:	b141      	cbz	r1, 80093da <setvbuf+0x56>
 80093c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093cc:	4299      	cmp	r1, r3
 80093ce:	d002      	beq.n	80093d6 <setvbuf+0x52>
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff fe8b 	bl	80090ec <_free_r>
 80093d6:	2300      	movs	r3, #0
 80093d8:	6363      	str	r3, [r4, #52]	; 0x34
 80093da:	2300      	movs	r3, #0
 80093dc:	61a3      	str	r3, [r4, #24]
 80093de:	6063      	str	r3, [r4, #4]
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	061b      	lsls	r3, r3, #24
 80093e4:	d503      	bpl.n	80093ee <setvbuf+0x6a>
 80093e6:	6921      	ldr	r1, [r4, #16]
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff fe7f 	bl	80090ec <_free_r>
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80093f4:	f023 0303 	bic.w	r3, r3, #3
 80093f8:	f1b8 0f02 	cmp.w	r8, #2
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	d05d      	beq.n	80094bc <setvbuf+0x138>
 8009400:	ab01      	add	r3, sp, #4
 8009402:	466a      	mov	r2, sp
 8009404:	4621      	mov	r1, r4
 8009406:	4630      	mov	r0, r6
 8009408:	f000 fad2 	bl	80099b0 <__swhatbuf_r>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	4318      	orrs	r0, r3
 8009410:	81a0      	strh	r0, [r4, #12]
 8009412:	bb2d      	cbnz	r5, 8009460 <setvbuf+0xdc>
 8009414:	9d00      	ldr	r5, [sp, #0]
 8009416:	4628      	mov	r0, r5
 8009418:	f7ff fe58 	bl	80090cc <malloc>
 800941c:	4607      	mov	r7, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d14e      	bne.n	80094c0 <setvbuf+0x13c>
 8009422:	f8dd 9000 	ldr.w	r9, [sp]
 8009426:	45a9      	cmp	r9, r5
 8009428:	d13c      	bne.n	80094a4 <setvbuf+0x120>
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f043 0302 	orr.w	r3, r3, #2
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	2300      	movs	r3, #0
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	2301      	movs	r3, #1
 8009444:	6163      	str	r3, [r4, #20]
 8009446:	b003      	add	sp, #12
 8009448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800944c:	4b22      	ldr	r3, [pc, #136]	; (80094d8 <setvbuf+0x154>)
 800944e:	429c      	cmp	r4, r3
 8009450:	d101      	bne.n	8009456 <setvbuf+0xd2>
 8009452:	68b4      	ldr	r4, [r6, #8]
 8009454:	e7a8      	b.n	80093a8 <setvbuf+0x24>
 8009456:	4b21      	ldr	r3, [pc, #132]	; (80094dc <setvbuf+0x158>)
 8009458:	429c      	cmp	r4, r3
 800945a:	bf08      	it	eq
 800945c:	68f4      	ldreq	r4, [r6, #12]
 800945e:	e7a3      	b.n	80093a8 <setvbuf+0x24>
 8009460:	2f00      	cmp	r7, #0
 8009462:	d0d8      	beq.n	8009416 <setvbuf+0x92>
 8009464:	69b3      	ldr	r3, [r6, #24]
 8009466:	b913      	cbnz	r3, 800946e <setvbuf+0xea>
 8009468:	4630      	mov	r0, r6
 800946a:	f000 f9fb 	bl	8009864 <__sinit>
 800946e:	f1b8 0f01 	cmp.w	r8, #1
 8009472:	bf08      	it	eq
 8009474:	89a3      	ldrheq	r3, [r4, #12]
 8009476:	6027      	str	r7, [r4, #0]
 8009478:	bf04      	itt	eq
 800947a:	f043 0301 	orreq.w	r3, r3, #1
 800947e:	81a3      	strheq	r3, [r4, #12]
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f013 0008 	ands.w	r0, r3, #8
 8009486:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800948a:	d01b      	beq.n	80094c4 <setvbuf+0x140>
 800948c:	f013 0001 	ands.w	r0, r3, #1
 8009490:	bf18      	it	ne
 8009492:	426d      	negne	r5, r5
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	bf1d      	ittte	ne
 800949a:	60a3      	strne	r3, [r4, #8]
 800949c:	61a5      	strne	r5, [r4, #24]
 800949e:	4618      	movne	r0, r3
 80094a0:	60a5      	streq	r5, [r4, #8]
 80094a2:	e7d0      	b.n	8009446 <setvbuf+0xc2>
 80094a4:	4648      	mov	r0, r9
 80094a6:	f7ff fe11 	bl	80090cc <malloc>
 80094aa:	4607      	mov	r7, r0
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d0bc      	beq.n	800942a <setvbuf+0xa6>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	464d      	mov	r5, r9
 80094ba:	e7d3      	b.n	8009464 <setvbuf+0xe0>
 80094bc:	2000      	movs	r0, #0
 80094be:	e7b6      	b.n	800942e <setvbuf+0xaa>
 80094c0:	46a9      	mov	r9, r5
 80094c2:	e7f5      	b.n	80094b0 <setvbuf+0x12c>
 80094c4:	60a0      	str	r0, [r4, #8]
 80094c6:	e7be      	b.n	8009446 <setvbuf+0xc2>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295
 80094cc:	e7bb      	b.n	8009446 <setvbuf+0xc2>
 80094ce:	bf00      	nop
 80094d0:	20000278 	.word	0x20000278
 80094d4:	0800b43c 	.word	0x0800b43c
 80094d8:	0800b45c 	.word	0x0800b45c
 80094dc:	0800b41c 	.word	0x0800b41c

080094e0 <__swbuf_r>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	460e      	mov	r6, r1
 80094e4:	4614      	mov	r4, r2
 80094e6:	4605      	mov	r5, r0
 80094e8:	b118      	cbz	r0, 80094f2 <__swbuf_r+0x12>
 80094ea:	6983      	ldr	r3, [r0, #24]
 80094ec:	b90b      	cbnz	r3, 80094f2 <__swbuf_r+0x12>
 80094ee:	f000 f9b9 	bl	8009864 <__sinit>
 80094f2:	4b21      	ldr	r3, [pc, #132]	; (8009578 <__swbuf_r+0x98>)
 80094f4:	429c      	cmp	r4, r3
 80094f6:	d12a      	bne.n	800954e <__swbuf_r+0x6e>
 80094f8:	686c      	ldr	r4, [r5, #4]
 80094fa:	69a3      	ldr	r3, [r4, #24]
 80094fc:	60a3      	str	r3, [r4, #8]
 80094fe:	89a3      	ldrh	r3, [r4, #12]
 8009500:	071a      	lsls	r2, r3, #28
 8009502:	d52e      	bpl.n	8009562 <__swbuf_r+0x82>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	b363      	cbz	r3, 8009562 <__swbuf_r+0x82>
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	6820      	ldr	r0, [r4, #0]
 800950c:	1ac0      	subs	r0, r0, r3
 800950e:	6963      	ldr	r3, [r4, #20]
 8009510:	b2f6      	uxtb	r6, r6
 8009512:	4283      	cmp	r3, r0
 8009514:	4637      	mov	r7, r6
 8009516:	dc04      	bgt.n	8009522 <__swbuf_r+0x42>
 8009518:	4621      	mov	r1, r4
 800951a:	4628      	mov	r0, r5
 800951c:	f000 f926 	bl	800976c <_fflush_r>
 8009520:	bb28      	cbnz	r0, 800956e <__swbuf_r+0x8e>
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	3b01      	subs	r3, #1
 8009526:	60a3      	str	r3, [r4, #8]
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	6022      	str	r2, [r4, #0]
 800952e:	701e      	strb	r6, [r3, #0]
 8009530:	6963      	ldr	r3, [r4, #20]
 8009532:	3001      	adds	r0, #1
 8009534:	4283      	cmp	r3, r0
 8009536:	d004      	beq.n	8009542 <__swbuf_r+0x62>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	07db      	lsls	r3, r3, #31
 800953c:	d519      	bpl.n	8009572 <__swbuf_r+0x92>
 800953e:	2e0a      	cmp	r6, #10
 8009540:	d117      	bne.n	8009572 <__swbuf_r+0x92>
 8009542:	4621      	mov	r1, r4
 8009544:	4628      	mov	r0, r5
 8009546:	f000 f911 	bl	800976c <_fflush_r>
 800954a:	b190      	cbz	r0, 8009572 <__swbuf_r+0x92>
 800954c:	e00f      	b.n	800956e <__swbuf_r+0x8e>
 800954e:	4b0b      	ldr	r3, [pc, #44]	; (800957c <__swbuf_r+0x9c>)
 8009550:	429c      	cmp	r4, r3
 8009552:	d101      	bne.n	8009558 <__swbuf_r+0x78>
 8009554:	68ac      	ldr	r4, [r5, #8]
 8009556:	e7d0      	b.n	80094fa <__swbuf_r+0x1a>
 8009558:	4b09      	ldr	r3, [pc, #36]	; (8009580 <__swbuf_r+0xa0>)
 800955a:	429c      	cmp	r4, r3
 800955c:	bf08      	it	eq
 800955e:	68ec      	ldreq	r4, [r5, #12]
 8009560:	e7cb      	b.n	80094fa <__swbuf_r+0x1a>
 8009562:	4621      	mov	r1, r4
 8009564:	4628      	mov	r0, r5
 8009566:	f000 f80d 	bl	8009584 <__swsetup_r>
 800956a:	2800      	cmp	r0, #0
 800956c:	d0cc      	beq.n	8009508 <__swbuf_r+0x28>
 800956e:	f04f 37ff 	mov.w	r7, #4294967295
 8009572:	4638      	mov	r0, r7
 8009574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009576:	bf00      	nop
 8009578:	0800b43c 	.word	0x0800b43c
 800957c:	0800b45c 	.word	0x0800b45c
 8009580:	0800b41c 	.word	0x0800b41c

08009584 <__swsetup_r>:
 8009584:	4b32      	ldr	r3, [pc, #200]	; (8009650 <__swsetup_r+0xcc>)
 8009586:	b570      	push	{r4, r5, r6, lr}
 8009588:	681d      	ldr	r5, [r3, #0]
 800958a:	4606      	mov	r6, r0
 800958c:	460c      	mov	r4, r1
 800958e:	b125      	cbz	r5, 800959a <__swsetup_r+0x16>
 8009590:	69ab      	ldr	r3, [r5, #24]
 8009592:	b913      	cbnz	r3, 800959a <__swsetup_r+0x16>
 8009594:	4628      	mov	r0, r5
 8009596:	f000 f965 	bl	8009864 <__sinit>
 800959a:	4b2e      	ldr	r3, [pc, #184]	; (8009654 <__swsetup_r+0xd0>)
 800959c:	429c      	cmp	r4, r3
 800959e:	d10f      	bne.n	80095c0 <__swsetup_r+0x3c>
 80095a0:	686c      	ldr	r4, [r5, #4]
 80095a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	0715      	lsls	r5, r2, #28
 80095aa:	d42c      	bmi.n	8009606 <__swsetup_r+0x82>
 80095ac:	06d0      	lsls	r0, r2, #27
 80095ae:	d411      	bmi.n	80095d4 <__swsetup_r+0x50>
 80095b0:	2209      	movs	r2, #9
 80095b2:	6032      	str	r2, [r6, #0]
 80095b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	f04f 30ff 	mov.w	r0, #4294967295
 80095be:	e03e      	b.n	800963e <__swsetup_r+0xba>
 80095c0:	4b25      	ldr	r3, [pc, #148]	; (8009658 <__swsetup_r+0xd4>)
 80095c2:	429c      	cmp	r4, r3
 80095c4:	d101      	bne.n	80095ca <__swsetup_r+0x46>
 80095c6:	68ac      	ldr	r4, [r5, #8]
 80095c8:	e7eb      	b.n	80095a2 <__swsetup_r+0x1e>
 80095ca:	4b24      	ldr	r3, [pc, #144]	; (800965c <__swsetup_r+0xd8>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	bf08      	it	eq
 80095d0:	68ec      	ldreq	r4, [r5, #12]
 80095d2:	e7e6      	b.n	80095a2 <__swsetup_r+0x1e>
 80095d4:	0751      	lsls	r1, r2, #29
 80095d6:	d512      	bpl.n	80095fe <__swsetup_r+0x7a>
 80095d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095da:	b141      	cbz	r1, 80095ee <__swsetup_r+0x6a>
 80095dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e0:	4299      	cmp	r1, r3
 80095e2:	d002      	beq.n	80095ea <__swsetup_r+0x66>
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7ff fd81 	bl	80090ec <_free_r>
 80095ea:	2300      	movs	r3, #0
 80095ec:	6363      	str	r3, [r4, #52]	; 0x34
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	2300      	movs	r3, #0
 80095f8:	6063      	str	r3, [r4, #4]
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f043 0308 	orr.w	r3, r3, #8
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	b94b      	cbnz	r3, 800961e <__swsetup_r+0x9a>
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009614:	d003      	beq.n	800961e <__swsetup_r+0x9a>
 8009616:	4621      	mov	r1, r4
 8009618:	4630      	mov	r0, r6
 800961a:	f000 f9ed 	bl	80099f8 <__smakebuf_r>
 800961e:	89a2      	ldrh	r2, [r4, #12]
 8009620:	f012 0301 	ands.w	r3, r2, #1
 8009624:	d00c      	beq.n	8009640 <__swsetup_r+0xbc>
 8009626:	2300      	movs	r3, #0
 8009628:	60a3      	str	r3, [r4, #8]
 800962a:	6963      	ldr	r3, [r4, #20]
 800962c:	425b      	negs	r3, r3
 800962e:	61a3      	str	r3, [r4, #24]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	b953      	cbnz	r3, 800964a <__swsetup_r+0xc6>
 8009634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800963c:	d1ba      	bne.n	80095b4 <__swsetup_r+0x30>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	0792      	lsls	r2, r2, #30
 8009642:	bf58      	it	pl
 8009644:	6963      	ldrpl	r3, [r4, #20]
 8009646:	60a3      	str	r3, [r4, #8]
 8009648:	e7f2      	b.n	8009630 <__swsetup_r+0xac>
 800964a:	2000      	movs	r0, #0
 800964c:	e7f7      	b.n	800963e <__swsetup_r+0xba>
 800964e:	bf00      	nop
 8009650:	20000278 	.word	0x20000278
 8009654:	0800b43c 	.word	0x0800b43c
 8009658:	0800b45c 	.word	0x0800b45c
 800965c:	0800b41c 	.word	0x0800b41c

08009660 <__sflush_r>:
 8009660:	898a      	ldrh	r2, [r1, #12]
 8009662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009666:	4605      	mov	r5, r0
 8009668:	0710      	lsls	r0, r2, #28
 800966a:	460c      	mov	r4, r1
 800966c:	d458      	bmi.n	8009720 <__sflush_r+0xc0>
 800966e:	684b      	ldr	r3, [r1, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	dc05      	bgt.n	8009680 <__sflush_r+0x20>
 8009674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	dc02      	bgt.n	8009680 <__sflush_r+0x20>
 800967a:	2000      	movs	r0, #0
 800967c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009682:	2e00      	cmp	r6, #0
 8009684:	d0f9      	beq.n	800967a <__sflush_r+0x1a>
 8009686:	2300      	movs	r3, #0
 8009688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800968c:	682f      	ldr	r7, [r5, #0]
 800968e:	6a21      	ldr	r1, [r4, #32]
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	d032      	beq.n	80096fa <__sflush_r+0x9a>
 8009694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	075a      	lsls	r2, r3, #29
 800969a:	d505      	bpl.n	80096a8 <__sflush_r+0x48>
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	1ac0      	subs	r0, r0, r3
 80096a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096a2:	b10b      	cbz	r3, 80096a8 <__sflush_r+0x48>
 80096a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096a6:	1ac0      	subs	r0, r0, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	4602      	mov	r2, r0
 80096ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ae:	6a21      	ldr	r1, [r4, #32]
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b0      	blx	r6
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	d106      	bne.n	80096c8 <__sflush_r+0x68>
 80096ba:	6829      	ldr	r1, [r5, #0]
 80096bc:	291d      	cmp	r1, #29
 80096be:	d848      	bhi.n	8009752 <__sflush_r+0xf2>
 80096c0:	4a29      	ldr	r2, [pc, #164]	; (8009768 <__sflush_r+0x108>)
 80096c2:	40ca      	lsrs	r2, r1
 80096c4:	07d6      	lsls	r6, r2, #31
 80096c6:	d544      	bpl.n	8009752 <__sflush_r+0xf2>
 80096c8:	2200      	movs	r2, #0
 80096ca:	6062      	str	r2, [r4, #4]
 80096cc:	04d9      	lsls	r1, r3, #19
 80096ce:	6922      	ldr	r2, [r4, #16]
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	d504      	bpl.n	80096de <__sflush_r+0x7e>
 80096d4:	1c42      	adds	r2, r0, #1
 80096d6:	d101      	bne.n	80096dc <__sflush_r+0x7c>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b903      	cbnz	r3, 80096de <__sflush_r+0x7e>
 80096dc:	6560      	str	r0, [r4, #84]	; 0x54
 80096de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e0:	602f      	str	r7, [r5, #0]
 80096e2:	2900      	cmp	r1, #0
 80096e4:	d0c9      	beq.n	800967a <__sflush_r+0x1a>
 80096e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ea:	4299      	cmp	r1, r3
 80096ec:	d002      	beq.n	80096f4 <__sflush_r+0x94>
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7ff fcfc 	bl	80090ec <_free_r>
 80096f4:	2000      	movs	r0, #0
 80096f6:	6360      	str	r0, [r4, #52]	; 0x34
 80096f8:	e7c0      	b.n	800967c <__sflush_r+0x1c>
 80096fa:	2301      	movs	r3, #1
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b0      	blx	r6
 8009700:	1c41      	adds	r1, r0, #1
 8009702:	d1c8      	bne.n	8009696 <__sflush_r+0x36>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0c5      	beq.n	8009696 <__sflush_r+0x36>
 800970a:	2b1d      	cmp	r3, #29
 800970c:	d001      	beq.n	8009712 <__sflush_r+0xb2>
 800970e:	2b16      	cmp	r3, #22
 8009710:	d101      	bne.n	8009716 <__sflush_r+0xb6>
 8009712:	602f      	str	r7, [r5, #0]
 8009714:	e7b1      	b.n	800967a <__sflush_r+0x1a>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800971c:	81a3      	strh	r3, [r4, #12]
 800971e:	e7ad      	b.n	800967c <__sflush_r+0x1c>
 8009720:	690f      	ldr	r7, [r1, #16]
 8009722:	2f00      	cmp	r7, #0
 8009724:	d0a9      	beq.n	800967a <__sflush_r+0x1a>
 8009726:	0793      	lsls	r3, r2, #30
 8009728:	680e      	ldr	r6, [r1, #0]
 800972a:	bf08      	it	eq
 800972c:	694b      	ldreq	r3, [r1, #20]
 800972e:	600f      	str	r7, [r1, #0]
 8009730:	bf18      	it	ne
 8009732:	2300      	movne	r3, #0
 8009734:	eba6 0807 	sub.w	r8, r6, r7
 8009738:	608b      	str	r3, [r1, #8]
 800973a:	f1b8 0f00 	cmp.w	r8, #0
 800973e:	dd9c      	ble.n	800967a <__sflush_r+0x1a>
 8009740:	4643      	mov	r3, r8
 8009742:	463a      	mov	r2, r7
 8009744:	6a21      	ldr	r1, [r4, #32]
 8009746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009748:	4628      	mov	r0, r5
 800974a:	47b0      	blx	r6
 800974c:	2800      	cmp	r0, #0
 800974e:	dc06      	bgt.n	800975e <__sflush_r+0xfe>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e78e      	b.n	800967c <__sflush_r+0x1c>
 800975e:	4407      	add	r7, r0
 8009760:	eba8 0800 	sub.w	r8, r8, r0
 8009764:	e7e9      	b.n	800973a <__sflush_r+0xda>
 8009766:	bf00      	nop
 8009768:	20400001 	.word	0x20400001

0800976c <_fflush_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	690b      	ldr	r3, [r1, #16]
 8009770:	4605      	mov	r5, r0
 8009772:	460c      	mov	r4, r1
 8009774:	b1db      	cbz	r3, 80097ae <_fflush_r+0x42>
 8009776:	b118      	cbz	r0, 8009780 <_fflush_r+0x14>
 8009778:	6983      	ldr	r3, [r0, #24]
 800977a:	b90b      	cbnz	r3, 8009780 <_fflush_r+0x14>
 800977c:	f000 f872 	bl	8009864 <__sinit>
 8009780:	4b0c      	ldr	r3, [pc, #48]	; (80097b4 <_fflush_r+0x48>)
 8009782:	429c      	cmp	r4, r3
 8009784:	d109      	bne.n	800979a <_fflush_r+0x2e>
 8009786:	686c      	ldr	r4, [r5, #4]
 8009788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978c:	b17b      	cbz	r3, 80097ae <_fflush_r+0x42>
 800978e:	4621      	mov	r1, r4
 8009790:	4628      	mov	r0, r5
 8009792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009796:	f7ff bf63 	b.w	8009660 <__sflush_r>
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <_fflush_r+0x4c>)
 800979c:	429c      	cmp	r4, r3
 800979e:	d101      	bne.n	80097a4 <_fflush_r+0x38>
 80097a0:	68ac      	ldr	r4, [r5, #8]
 80097a2:	e7f1      	b.n	8009788 <_fflush_r+0x1c>
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <_fflush_r+0x50>)
 80097a6:	429c      	cmp	r4, r3
 80097a8:	bf08      	it	eq
 80097aa:	68ec      	ldreq	r4, [r5, #12]
 80097ac:	e7ec      	b.n	8009788 <_fflush_r+0x1c>
 80097ae:	2000      	movs	r0, #0
 80097b0:	bd38      	pop	{r3, r4, r5, pc}
 80097b2:	bf00      	nop
 80097b4:	0800b43c 	.word	0x0800b43c
 80097b8:	0800b45c 	.word	0x0800b45c
 80097bc:	0800b41c 	.word	0x0800b41c

080097c0 <fflush>:
 80097c0:	4601      	mov	r1, r0
 80097c2:	b920      	cbnz	r0, 80097ce <fflush+0xe>
 80097c4:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <fflush+0x18>)
 80097c6:	4905      	ldr	r1, [pc, #20]	; (80097dc <fflush+0x1c>)
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	f000 b8d3 	b.w	8009974 <_fwalk_reent>
 80097ce:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <fflush+0x20>)
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	f7ff bfcb 	b.w	800976c <_fflush_r>
 80097d6:	bf00      	nop
 80097d8:	0800b418 	.word	0x0800b418
 80097dc:	0800976d 	.word	0x0800976d
 80097e0:	20000278 	.word	0x20000278

080097e4 <std>:
 80097e4:	2300      	movs	r3, #0
 80097e6:	b510      	push	{r4, lr}
 80097e8:	4604      	mov	r4, r0
 80097ea:	e9c0 3300 	strd	r3, r3, [r0]
 80097ee:	6083      	str	r3, [r0, #8]
 80097f0:	8181      	strh	r1, [r0, #12]
 80097f2:	6643      	str	r3, [r0, #100]	; 0x64
 80097f4:	81c2      	strh	r2, [r0, #14]
 80097f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097fa:	6183      	str	r3, [r0, #24]
 80097fc:	4619      	mov	r1, r3
 80097fe:	2208      	movs	r2, #8
 8009800:	305c      	adds	r0, #92	; 0x5c
 8009802:	f7ff fc6b 	bl	80090dc <memset>
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <std+0x38>)
 8009808:	6263      	str	r3, [r4, #36]	; 0x24
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <std+0x3c>)
 800980c:	62a3      	str	r3, [r4, #40]	; 0x28
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <std+0x40>)
 8009810:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009812:	4b05      	ldr	r3, [pc, #20]	; (8009828 <std+0x44>)
 8009814:	6224      	str	r4, [r4, #32]
 8009816:	6323      	str	r3, [r4, #48]	; 0x30
 8009818:	bd10      	pop	{r4, pc}
 800981a:	bf00      	nop
 800981c:	0800a73d 	.word	0x0800a73d
 8009820:	0800a75f 	.word	0x0800a75f
 8009824:	0800a797 	.word	0x0800a797
 8009828:	0800a7bb 	.word	0x0800a7bb

0800982c <_cleanup_r>:
 800982c:	4901      	ldr	r1, [pc, #4]	; (8009834 <_cleanup_r+0x8>)
 800982e:	f000 b8a1 	b.w	8009974 <_fwalk_reent>
 8009832:	bf00      	nop
 8009834:	0800976d 	.word	0x0800976d

08009838 <__sfmoreglue>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	1e4a      	subs	r2, r1, #1
 800983c:	2568      	movs	r5, #104	; 0x68
 800983e:	4355      	muls	r5, r2
 8009840:	460e      	mov	r6, r1
 8009842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009846:	f7ff fc9f 	bl	8009188 <_malloc_r>
 800984a:	4604      	mov	r4, r0
 800984c:	b140      	cbz	r0, 8009860 <__sfmoreglue+0x28>
 800984e:	2100      	movs	r1, #0
 8009850:	e9c0 1600 	strd	r1, r6, [r0]
 8009854:	300c      	adds	r0, #12
 8009856:	60a0      	str	r0, [r4, #8]
 8009858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800985c:	f7ff fc3e 	bl	80090dc <memset>
 8009860:	4620      	mov	r0, r4
 8009862:	bd70      	pop	{r4, r5, r6, pc}

08009864 <__sinit>:
 8009864:	6983      	ldr	r3, [r0, #24]
 8009866:	b510      	push	{r4, lr}
 8009868:	4604      	mov	r4, r0
 800986a:	bb33      	cbnz	r3, 80098ba <__sinit+0x56>
 800986c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009870:	6503      	str	r3, [r0, #80]	; 0x50
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <__sinit+0x58>)
 8009874:	4a12      	ldr	r2, [pc, #72]	; (80098c0 <__sinit+0x5c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6282      	str	r2, [r0, #40]	; 0x28
 800987a:	4298      	cmp	r0, r3
 800987c:	bf04      	itt	eq
 800987e:	2301      	moveq	r3, #1
 8009880:	6183      	streq	r3, [r0, #24]
 8009882:	f000 f81f 	bl	80098c4 <__sfp>
 8009886:	6060      	str	r0, [r4, #4]
 8009888:	4620      	mov	r0, r4
 800988a:	f000 f81b 	bl	80098c4 <__sfp>
 800988e:	60a0      	str	r0, [r4, #8]
 8009890:	4620      	mov	r0, r4
 8009892:	f000 f817 	bl	80098c4 <__sfp>
 8009896:	2200      	movs	r2, #0
 8009898:	60e0      	str	r0, [r4, #12]
 800989a:	2104      	movs	r1, #4
 800989c:	6860      	ldr	r0, [r4, #4]
 800989e:	f7ff ffa1 	bl	80097e4 <std>
 80098a2:	2201      	movs	r2, #1
 80098a4:	2109      	movs	r1, #9
 80098a6:	68a0      	ldr	r0, [r4, #8]
 80098a8:	f7ff ff9c 	bl	80097e4 <std>
 80098ac:	2202      	movs	r2, #2
 80098ae:	2112      	movs	r1, #18
 80098b0:	68e0      	ldr	r0, [r4, #12]
 80098b2:	f7ff ff97 	bl	80097e4 <std>
 80098b6:	2301      	movs	r3, #1
 80098b8:	61a3      	str	r3, [r4, #24]
 80098ba:	bd10      	pop	{r4, pc}
 80098bc:	0800b418 	.word	0x0800b418
 80098c0:	0800982d 	.word	0x0800982d

080098c4 <__sfp>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	4b1b      	ldr	r3, [pc, #108]	; (8009934 <__sfp+0x70>)
 80098c8:	681e      	ldr	r6, [r3, #0]
 80098ca:	69b3      	ldr	r3, [r6, #24]
 80098cc:	4607      	mov	r7, r0
 80098ce:	b913      	cbnz	r3, 80098d6 <__sfp+0x12>
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7ff ffc7 	bl	8009864 <__sinit>
 80098d6:	3648      	adds	r6, #72	; 0x48
 80098d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098dc:	3b01      	subs	r3, #1
 80098de:	d503      	bpl.n	80098e8 <__sfp+0x24>
 80098e0:	6833      	ldr	r3, [r6, #0]
 80098e2:	b133      	cbz	r3, 80098f2 <__sfp+0x2e>
 80098e4:	6836      	ldr	r6, [r6, #0]
 80098e6:	e7f7      	b.n	80098d8 <__sfp+0x14>
 80098e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098ec:	b16d      	cbz	r5, 800990a <__sfp+0x46>
 80098ee:	3468      	adds	r4, #104	; 0x68
 80098f0:	e7f4      	b.n	80098dc <__sfp+0x18>
 80098f2:	2104      	movs	r1, #4
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7ff ff9f 	bl	8009838 <__sfmoreglue>
 80098fa:	6030      	str	r0, [r6, #0]
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d1f1      	bne.n	80098e4 <__sfp+0x20>
 8009900:	230c      	movs	r3, #12
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	4604      	mov	r4, r0
 8009906:	4620      	mov	r0, r4
 8009908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990a:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <__sfp+0x74>)
 800990c:	6665      	str	r5, [r4, #100]	; 0x64
 800990e:	e9c4 5500 	strd	r5, r5, [r4]
 8009912:	60a5      	str	r5, [r4, #8]
 8009914:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009918:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800991c:	2208      	movs	r2, #8
 800991e:	4629      	mov	r1, r5
 8009920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009924:	f7ff fbda 	bl	80090dc <memset>
 8009928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800992c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009930:	e7e9      	b.n	8009906 <__sfp+0x42>
 8009932:	bf00      	nop
 8009934:	0800b418 	.word	0x0800b418
 8009938:	ffff0001 	.word	0xffff0001

0800993c <_fwalk>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	4688      	mov	r8, r1
 8009942:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009946:	2600      	movs	r6, #0
 8009948:	b914      	cbnz	r4, 8009950 <_fwalk+0x14>
 800994a:	4630      	mov	r0, r6
 800994c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009950:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009954:	3f01      	subs	r7, #1
 8009956:	d501      	bpl.n	800995c <_fwalk+0x20>
 8009958:	6824      	ldr	r4, [r4, #0]
 800995a:	e7f5      	b.n	8009948 <_fwalk+0xc>
 800995c:	89ab      	ldrh	r3, [r5, #12]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d906      	bls.n	8009970 <_fwalk+0x34>
 8009962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009966:	3301      	adds	r3, #1
 8009968:	d002      	beq.n	8009970 <_fwalk+0x34>
 800996a:	4628      	mov	r0, r5
 800996c:	47c0      	blx	r8
 800996e:	4306      	orrs	r6, r0
 8009970:	3568      	adds	r5, #104	; 0x68
 8009972:	e7ef      	b.n	8009954 <_fwalk+0x18>

08009974 <_fwalk_reent>:
 8009974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009978:	4680      	mov	r8, r0
 800997a:	4689      	mov	r9, r1
 800997c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009980:	2600      	movs	r6, #0
 8009982:	b914      	cbnz	r4, 800998a <_fwalk_reent+0x16>
 8009984:	4630      	mov	r0, r6
 8009986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800998e:	3f01      	subs	r7, #1
 8009990:	d501      	bpl.n	8009996 <_fwalk_reent+0x22>
 8009992:	6824      	ldr	r4, [r4, #0]
 8009994:	e7f5      	b.n	8009982 <_fwalk_reent+0xe>
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d907      	bls.n	80099ac <_fwalk_reent+0x38>
 800999c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099a0:	3301      	adds	r3, #1
 80099a2:	d003      	beq.n	80099ac <_fwalk_reent+0x38>
 80099a4:	4629      	mov	r1, r5
 80099a6:	4640      	mov	r0, r8
 80099a8:	47c8      	blx	r9
 80099aa:	4306      	orrs	r6, r0
 80099ac:	3568      	adds	r5, #104	; 0x68
 80099ae:	e7ee      	b.n	800998e <_fwalk_reent+0x1a>

080099b0 <__swhatbuf_r>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	460e      	mov	r6, r1
 80099b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b8:	2900      	cmp	r1, #0
 80099ba:	b096      	sub	sp, #88	; 0x58
 80099bc:	4614      	mov	r4, r2
 80099be:	461d      	mov	r5, r3
 80099c0:	da07      	bge.n	80099d2 <__swhatbuf_r+0x22>
 80099c2:	2300      	movs	r3, #0
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	89b3      	ldrh	r3, [r6, #12]
 80099c8:	061a      	lsls	r2, r3, #24
 80099ca:	d410      	bmi.n	80099ee <__swhatbuf_r+0x3e>
 80099cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099d0:	e00e      	b.n	80099f0 <__swhatbuf_r+0x40>
 80099d2:	466a      	mov	r2, sp
 80099d4:	f001 f8dc 	bl	800ab90 <_fstat_r>
 80099d8:	2800      	cmp	r0, #0
 80099da:	dbf2      	blt.n	80099c2 <__swhatbuf_r+0x12>
 80099dc:	9a01      	ldr	r2, [sp, #4]
 80099de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e6:	425a      	negs	r2, r3
 80099e8:	415a      	adcs	r2, r3
 80099ea:	602a      	str	r2, [r5, #0]
 80099ec:	e7ee      	b.n	80099cc <__swhatbuf_r+0x1c>
 80099ee:	2340      	movs	r3, #64	; 0x40
 80099f0:	2000      	movs	r0, #0
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	b016      	add	sp, #88	; 0x58
 80099f6:	bd70      	pop	{r4, r5, r6, pc}

080099f8 <__smakebuf_r>:
 80099f8:	898b      	ldrh	r3, [r1, #12]
 80099fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099fc:	079d      	lsls	r5, r3, #30
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d507      	bpl.n	8009a14 <__smakebuf_r+0x1c>
 8009a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	b002      	add	sp, #8
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	ab01      	add	r3, sp, #4
 8009a16:	466a      	mov	r2, sp
 8009a18:	f7ff ffca 	bl	80099b0 <__swhatbuf_r>
 8009a1c:	9900      	ldr	r1, [sp, #0]
 8009a1e:	4605      	mov	r5, r0
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff fbb1 	bl	8009188 <_malloc_r>
 8009a26:	b948      	cbnz	r0, 8009a3c <__smakebuf_r+0x44>
 8009a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2c:	059a      	lsls	r2, r3, #22
 8009a2e:	d4ef      	bmi.n	8009a10 <__smakebuf_r+0x18>
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	f043 0302 	orr.w	r3, r3, #2
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e7e3      	b.n	8009a04 <__smakebuf_r+0xc>
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <__smakebuf_r+0x7c>)
 8009a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	6020      	str	r0, [r4, #0]
 8009a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	9b00      	ldr	r3, [sp, #0]
 8009a4c:	6163      	str	r3, [r4, #20]
 8009a4e:	9b01      	ldr	r3, [sp, #4]
 8009a50:	6120      	str	r0, [r4, #16]
 8009a52:	b15b      	cbz	r3, 8009a6c <__smakebuf_r+0x74>
 8009a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f001 f8ab 	bl	800abb4 <_isatty_r>
 8009a5e:	b128      	cbz	r0, 8009a6c <__smakebuf_r+0x74>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	431d      	orrs	r5, r3
 8009a70:	81a5      	strh	r5, [r4, #12]
 8009a72:	e7cd      	b.n	8009a10 <__smakebuf_r+0x18>
 8009a74:	0800982d 	.word	0x0800982d

08009a78 <__malloc_lock>:
 8009a78:	4770      	bx	lr

08009a7a <__malloc_unlock>:
 8009a7a:	4770      	bx	lr

08009a7c <__sfputc_r>:
 8009a7c:	6893      	ldr	r3, [r2, #8]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	b410      	push	{r4}
 8009a84:	6093      	str	r3, [r2, #8]
 8009a86:	da08      	bge.n	8009a9a <__sfputc_r+0x1e>
 8009a88:	6994      	ldr	r4, [r2, #24]
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	db01      	blt.n	8009a92 <__sfputc_r+0x16>
 8009a8e:	290a      	cmp	r1, #10
 8009a90:	d103      	bne.n	8009a9a <__sfputc_r+0x1e>
 8009a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a96:	f7ff bd23 	b.w	80094e0 <__swbuf_r>
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	1c58      	adds	r0, r3, #1
 8009a9e:	6010      	str	r0, [r2, #0]
 8009aa0:	7019      	strb	r1, [r3, #0]
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <__sfputs_r>:
 8009aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aac:	4606      	mov	r6, r0
 8009aae:	460f      	mov	r7, r1
 8009ab0:	4614      	mov	r4, r2
 8009ab2:	18d5      	adds	r5, r2, r3
 8009ab4:	42ac      	cmp	r4, r5
 8009ab6:	d101      	bne.n	8009abc <__sfputs_r+0x12>
 8009ab8:	2000      	movs	r0, #0
 8009aba:	e007      	b.n	8009acc <__sfputs_r+0x22>
 8009abc:	463a      	mov	r2, r7
 8009abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ffda 	bl	8009a7c <__sfputc_r>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d1f3      	bne.n	8009ab4 <__sfputs_r+0xa>
 8009acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ad0 <_vfiprintf_r>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	b09d      	sub	sp, #116	; 0x74
 8009ad8:	4617      	mov	r7, r2
 8009ada:	461d      	mov	r5, r3
 8009adc:	4606      	mov	r6, r0
 8009ade:	b118      	cbz	r0, 8009ae8 <_vfiprintf_r+0x18>
 8009ae0:	6983      	ldr	r3, [r0, #24]
 8009ae2:	b90b      	cbnz	r3, 8009ae8 <_vfiprintf_r+0x18>
 8009ae4:	f7ff febe 	bl	8009864 <__sinit>
 8009ae8:	4b7c      	ldr	r3, [pc, #496]	; (8009cdc <_vfiprintf_r+0x20c>)
 8009aea:	429c      	cmp	r4, r3
 8009aec:	d158      	bne.n	8009ba0 <_vfiprintf_r+0xd0>
 8009aee:	6874      	ldr	r4, [r6, #4]
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	0718      	lsls	r0, r3, #28
 8009af4:	d55e      	bpl.n	8009bb4 <_vfiprintf_r+0xe4>
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d05b      	beq.n	8009bb4 <_vfiprintf_r+0xe4>
 8009afc:	2300      	movs	r3, #0
 8009afe:	9309      	str	r3, [sp, #36]	; 0x24
 8009b00:	2320      	movs	r3, #32
 8009b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b06:	2330      	movs	r3, #48	; 0x30
 8009b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b0c:	9503      	str	r5, [sp, #12]
 8009b0e:	f04f 0b01 	mov.w	fp, #1
 8009b12:	46b8      	mov	r8, r7
 8009b14:	4645      	mov	r5, r8
 8009b16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b1a:	b10b      	cbz	r3, 8009b20 <_vfiprintf_r+0x50>
 8009b1c:	2b25      	cmp	r3, #37	; 0x25
 8009b1e:	d154      	bne.n	8009bca <_vfiprintf_r+0xfa>
 8009b20:	ebb8 0a07 	subs.w	sl, r8, r7
 8009b24:	d00b      	beq.n	8009b3e <_vfiprintf_r+0x6e>
 8009b26:	4653      	mov	r3, sl
 8009b28:	463a      	mov	r2, r7
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff ffbc 	bl	8009aaa <__sfputs_r>
 8009b32:	3001      	adds	r0, #1
 8009b34:	f000 80c2 	beq.w	8009cbc <_vfiprintf_r+0x1ec>
 8009b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3a:	4453      	add	r3, sl
 8009b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3e:	f898 3000 	ldrb.w	r3, [r8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 80ba 	beq.w	8009cbc <_vfiprintf_r+0x1ec>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b5c:	46a8      	mov	r8, r5
 8009b5e:	2205      	movs	r2, #5
 8009b60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009b64:	485e      	ldr	r0, [pc, #376]	; (8009ce0 <_vfiprintf_r+0x210>)
 8009b66:	f7f6 fb3b 	bl	80001e0 <memchr>
 8009b6a:	9b04      	ldr	r3, [sp, #16]
 8009b6c:	bb78      	cbnz	r0, 8009bce <_vfiprintf_r+0xfe>
 8009b6e:	06d9      	lsls	r1, r3, #27
 8009b70:	bf44      	itt	mi
 8009b72:	2220      	movmi	r2, #32
 8009b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b78:	071a      	lsls	r2, r3, #28
 8009b7a:	bf44      	itt	mi
 8009b7c:	222b      	movmi	r2, #43	; 0x2b
 8009b7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b82:	782a      	ldrb	r2, [r5, #0]
 8009b84:	2a2a      	cmp	r2, #42	; 0x2a
 8009b86:	d02a      	beq.n	8009bde <_vfiprintf_r+0x10e>
 8009b88:	9a07      	ldr	r2, [sp, #28]
 8009b8a:	46a8      	mov	r8, r5
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	250a      	movs	r5, #10
 8009b90:	4641      	mov	r1, r8
 8009b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b96:	3b30      	subs	r3, #48	; 0x30
 8009b98:	2b09      	cmp	r3, #9
 8009b9a:	d969      	bls.n	8009c70 <_vfiprintf_r+0x1a0>
 8009b9c:	b360      	cbz	r0, 8009bf8 <_vfiprintf_r+0x128>
 8009b9e:	e024      	b.n	8009bea <_vfiprintf_r+0x11a>
 8009ba0:	4b50      	ldr	r3, [pc, #320]	; (8009ce4 <_vfiprintf_r+0x214>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d101      	bne.n	8009baa <_vfiprintf_r+0xda>
 8009ba6:	68b4      	ldr	r4, [r6, #8]
 8009ba8:	e7a2      	b.n	8009af0 <_vfiprintf_r+0x20>
 8009baa:	4b4f      	ldr	r3, [pc, #316]	; (8009ce8 <_vfiprintf_r+0x218>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	bf08      	it	eq
 8009bb0:	68f4      	ldreq	r4, [r6, #12]
 8009bb2:	e79d      	b.n	8009af0 <_vfiprintf_r+0x20>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f7ff fce4 	bl	8009584 <__swsetup_r>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d09d      	beq.n	8009afc <_vfiprintf_r+0x2c>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	b01d      	add	sp, #116	; 0x74
 8009bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	46a8      	mov	r8, r5
 8009bcc:	e7a2      	b.n	8009b14 <_vfiprintf_r+0x44>
 8009bce:	4a44      	ldr	r2, [pc, #272]	; (8009ce0 <_vfiprintf_r+0x210>)
 8009bd0:	1a80      	subs	r0, r0, r2
 8009bd2:	fa0b f000 	lsl.w	r0, fp, r0
 8009bd6:	4318      	orrs	r0, r3
 8009bd8:	9004      	str	r0, [sp, #16]
 8009bda:	4645      	mov	r5, r8
 8009bdc:	e7be      	b.n	8009b5c <_vfiprintf_r+0x8c>
 8009bde:	9a03      	ldr	r2, [sp, #12]
 8009be0:	1d11      	adds	r1, r2, #4
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	9103      	str	r1, [sp, #12]
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	db01      	blt.n	8009bee <_vfiprintf_r+0x11e>
 8009bea:	9207      	str	r2, [sp, #28]
 8009bec:	e004      	b.n	8009bf8 <_vfiprintf_r+0x128>
 8009bee:	4252      	negs	r2, r2
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	9207      	str	r2, [sp, #28]
 8009bf6:	9304      	str	r3, [sp, #16]
 8009bf8:	f898 3000 	ldrb.w	r3, [r8]
 8009bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8009bfe:	d10e      	bne.n	8009c1e <_vfiprintf_r+0x14e>
 8009c00:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009c04:	2b2a      	cmp	r3, #42	; 0x2a
 8009c06:	d138      	bne.n	8009c7a <_vfiprintf_r+0x1aa>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	9203      	str	r2, [sp, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bfb8      	it	lt
 8009c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c18:	f108 0802 	add.w	r8, r8, #2
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	4d33      	ldr	r5, [pc, #204]	; (8009cec <_vfiprintf_r+0x21c>)
 8009c20:	f898 1000 	ldrb.w	r1, [r8]
 8009c24:	2203      	movs	r2, #3
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7f6 fada 	bl	80001e0 <memchr>
 8009c2c:	b140      	cbz	r0, 8009c40 <_vfiprintf_r+0x170>
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	1b40      	subs	r0, r0, r5
 8009c32:	fa03 f000 	lsl.w	r0, r3, r0
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	4303      	orrs	r3, r0
 8009c3a:	f108 0801 	add.w	r8, r8, #1
 8009c3e:	9304      	str	r3, [sp, #16]
 8009c40:	f898 1000 	ldrb.w	r1, [r8]
 8009c44:	482a      	ldr	r0, [pc, #168]	; (8009cf0 <_vfiprintf_r+0x220>)
 8009c46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c4a:	2206      	movs	r2, #6
 8009c4c:	f108 0701 	add.w	r7, r8, #1
 8009c50:	f7f6 fac6 	bl	80001e0 <memchr>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d037      	beq.n	8009cc8 <_vfiprintf_r+0x1f8>
 8009c58:	4b26      	ldr	r3, [pc, #152]	; (8009cf4 <_vfiprintf_r+0x224>)
 8009c5a:	bb1b      	cbnz	r3, 8009ca4 <_vfiprintf_r+0x1d4>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	3307      	adds	r3, #7
 8009c60:	f023 0307 	bic.w	r3, r3, #7
 8009c64:	3308      	adds	r3, #8
 8009c66:	9303      	str	r3, [sp, #12]
 8009c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6a:	444b      	add	r3, r9
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	e750      	b.n	8009b12 <_vfiprintf_r+0x42>
 8009c70:	fb05 3202 	mla	r2, r5, r2, r3
 8009c74:	2001      	movs	r0, #1
 8009c76:	4688      	mov	r8, r1
 8009c78:	e78a      	b.n	8009b90 <_vfiprintf_r+0xc0>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f108 0801 	add.w	r8, r8, #1
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	4619      	mov	r1, r3
 8009c84:	250a      	movs	r5, #10
 8009c86:	4640      	mov	r0, r8
 8009c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c8c:	3a30      	subs	r2, #48	; 0x30
 8009c8e:	2a09      	cmp	r2, #9
 8009c90:	d903      	bls.n	8009c9a <_vfiprintf_r+0x1ca>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0c3      	beq.n	8009c1e <_vfiprintf_r+0x14e>
 8009c96:	9105      	str	r1, [sp, #20]
 8009c98:	e7c1      	b.n	8009c1e <_vfiprintf_r+0x14e>
 8009c9a:	fb05 2101 	mla	r1, r5, r1, r2
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	e7f0      	b.n	8009c86 <_vfiprintf_r+0x1b6>
 8009ca4:	ab03      	add	r3, sp, #12
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <_vfiprintf_r+0x228>)
 8009cac:	a904      	add	r1, sp, #16
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f3af 8000 	nop.w
 8009cb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009cb8:	4681      	mov	r9, r0
 8009cba:	d1d5      	bne.n	8009c68 <_vfiprintf_r+0x198>
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	065b      	lsls	r3, r3, #25
 8009cc0:	f53f af7e 	bmi.w	8009bc0 <_vfiprintf_r+0xf0>
 8009cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cc6:	e77d      	b.n	8009bc4 <_vfiprintf_r+0xf4>
 8009cc8:	ab03      	add	r3, sp, #12
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <_vfiprintf_r+0x228>)
 8009cd0:	a904      	add	r1, sp, #16
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f000 f888 	bl	8009de8 <_printf_i>
 8009cd8:	e7ec      	b.n	8009cb4 <_vfiprintf_r+0x1e4>
 8009cda:	bf00      	nop
 8009cdc:	0800b43c 	.word	0x0800b43c
 8009ce0:	0800b47c 	.word	0x0800b47c
 8009ce4:	0800b45c 	.word	0x0800b45c
 8009ce8:	0800b41c 	.word	0x0800b41c
 8009cec:	0800b482 	.word	0x0800b482
 8009cf0:	0800b486 	.word	0x0800b486
 8009cf4:	00000000 	.word	0x00000000
 8009cf8:	08009aab 	.word	0x08009aab

08009cfc <_printf_common>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	4691      	mov	r9, r2
 8009d02:	461f      	mov	r7, r3
 8009d04:	688a      	ldr	r2, [r1, #8]
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bfb8      	it	lt
 8009d10:	4613      	movlt	r3, r2
 8009d12:	f8c9 3000 	str.w	r3, [r9]
 8009d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	b112      	cbz	r2, 8009d26 <_printf_common+0x2a>
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c9 3000 	str.w	r3, [r9]
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	0699      	lsls	r1, r3, #26
 8009d2a:	bf42      	ittt	mi
 8009d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d30:	3302      	addmi	r3, #2
 8009d32:	f8c9 3000 	strmi.w	r3, [r9]
 8009d36:	6825      	ldr	r5, [r4, #0]
 8009d38:	f015 0506 	ands.w	r5, r5, #6
 8009d3c:	d107      	bne.n	8009d4e <_printf_common+0x52>
 8009d3e:	f104 0a19 	add.w	sl, r4, #25
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	f8d9 2000 	ldr.w	r2, [r9]
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	42ab      	cmp	r3, r5
 8009d4c:	dc28      	bgt.n	8009da0 <_printf_common+0xa4>
 8009d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	3300      	adds	r3, #0
 8009d56:	bf18      	it	ne
 8009d58:	2301      	movne	r3, #1
 8009d5a:	0692      	lsls	r2, r2, #26
 8009d5c:	d42d      	bmi.n	8009dba <_printf_common+0xbe>
 8009d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d62:	4639      	mov	r1, r7
 8009d64:	4630      	mov	r0, r6
 8009d66:	47c0      	blx	r8
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d020      	beq.n	8009dae <_printf_common+0xb2>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	68e5      	ldr	r5, [r4, #12]
 8009d70:	f8d9 2000 	ldr.w	r2, [r9]
 8009d74:	f003 0306 	and.w	r3, r3, #6
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	bf08      	it	eq
 8009d7c:	1aad      	subeq	r5, r5, r2
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	6922      	ldr	r2, [r4, #16]
 8009d82:	bf0c      	ite	eq
 8009d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d88:	2500      	movne	r5, #0
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	bfc4      	itt	gt
 8009d8e:	1a9b      	subgt	r3, r3, r2
 8009d90:	18ed      	addgt	r5, r5, r3
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	341a      	adds	r4, #26
 8009d98:	454d      	cmp	r5, r9
 8009d9a:	d11a      	bne.n	8009dd2 <_printf_common+0xd6>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e008      	b.n	8009db2 <_printf_common+0xb6>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4652      	mov	r2, sl
 8009da4:	4639      	mov	r1, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	47c0      	blx	r8
 8009daa:	3001      	adds	r0, #1
 8009dac:	d103      	bne.n	8009db6 <_printf_common+0xba>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	3501      	adds	r5, #1
 8009db8:	e7c3      	b.n	8009d42 <_printf_common+0x46>
 8009dba:	18e1      	adds	r1, r4, r3
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	2030      	movs	r0, #48	; 0x30
 8009dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dc4:	4422      	add	r2, r4
 8009dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dce:	3302      	adds	r3, #2
 8009dd0:	e7c5      	b.n	8009d5e <_printf_common+0x62>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	4630      	mov	r0, r6
 8009dda:	47c0      	blx	r8
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d0e6      	beq.n	8009dae <_printf_common+0xb2>
 8009de0:	f109 0901 	add.w	r9, r9, #1
 8009de4:	e7d8      	b.n	8009d98 <_printf_common+0x9c>
	...

08009de8 <_printf_i>:
 8009de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009df0:	460c      	mov	r4, r1
 8009df2:	7e09      	ldrb	r1, [r1, #24]
 8009df4:	b085      	sub	sp, #20
 8009df6:	296e      	cmp	r1, #110	; 0x6e
 8009df8:	4617      	mov	r7, r2
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	4698      	mov	r8, r3
 8009dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e00:	f000 80b3 	beq.w	8009f6a <_printf_i+0x182>
 8009e04:	d822      	bhi.n	8009e4c <_printf_i+0x64>
 8009e06:	2963      	cmp	r1, #99	; 0x63
 8009e08:	d036      	beq.n	8009e78 <_printf_i+0x90>
 8009e0a:	d80a      	bhi.n	8009e22 <_printf_i+0x3a>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	f000 80b9 	beq.w	8009f84 <_printf_i+0x19c>
 8009e12:	2958      	cmp	r1, #88	; 0x58
 8009e14:	f000 8083 	beq.w	8009f1e <_printf_i+0x136>
 8009e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e20:	e032      	b.n	8009e88 <_printf_i+0xa0>
 8009e22:	2964      	cmp	r1, #100	; 0x64
 8009e24:	d001      	beq.n	8009e2a <_printf_i+0x42>
 8009e26:	2969      	cmp	r1, #105	; 0x69
 8009e28:	d1f6      	bne.n	8009e18 <_printf_i+0x30>
 8009e2a:	6820      	ldr	r0, [r4, #0]
 8009e2c:	6813      	ldr	r3, [r2, #0]
 8009e2e:	0605      	lsls	r5, r0, #24
 8009e30:	f103 0104 	add.w	r1, r3, #4
 8009e34:	d52a      	bpl.n	8009e8c <_printf_i+0xa4>
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6011      	str	r1, [r2, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da03      	bge.n	8009e46 <_printf_i+0x5e>
 8009e3e:	222d      	movs	r2, #45	; 0x2d
 8009e40:	425b      	negs	r3, r3
 8009e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009e46:	486f      	ldr	r0, [pc, #444]	; (800a004 <_printf_i+0x21c>)
 8009e48:	220a      	movs	r2, #10
 8009e4a:	e039      	b.n	8009ec0 <_printf_i+0xd8>
 8009e4c:	2973      	cmp	r1, #115	; 0x73
 8009e4e:	f000 809d 	beq.w	8009f8c <_printf_i+0x1a4>
 8009e52:	d808      	bhi.n	8009e66 <_printf_i+0x7e>
 8009e54:	296f      	cmp	r1, #111	; 0x6f
 8009e56:	d020      	beq.n	8009e9a <_printf_i+0xb2>
 8009e58:	2970      	cmp	r1, #112	; 0x70
 8009e5a:	d1dd      	bne.n	8009e18 <_printf_i+0x30>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	f043 0320 	orr.w	r3, r3, #32
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	e003      	b.n	8009e6e <_printf_i+0x86>
 8009e66:	2975      	cmp	r1, #117	; 0x75
 8009e68:	d017      	beq.n	8009e9a <_printf_i+0xb2>
 8009e6a:	2978      	cmp	r1, #120	; 0x78
 8009e6c:	d1d4      	bne.n	8009e18 <_printf_i+0x30>
 8009e6e:	2378      	movs	r3, #120	; 0x78
 8009e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e74:	4864      	ldr	r0, [pc, #400]	; (800a008 <_printf_i+0x220>)
 8009e76:	e055      	b.n	8009f24 <_printf_i+0x13c>
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	1d19      	adds	r1, r3, #4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6011      	str	r1, [r2, #0]
 8009e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e08c      	b.n	8009fa6 <_printf_i+0x1be>
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6011      	str	r1, [r2, #0]
 8009e90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e94:	bf18      	it	ne
 8009e96:	b21b      	sxthne	r3, r3
 8009e98:	e7cf      	b.n	8009e3a <_printf_i+0x52>
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	6825      	ldr	r5, [r4, #0]
 8009e9e:	1d18      	adds	r0, r3, #4
 8009ea0:	6010      	str	r0, [r2, #0]
 8009ea2:	0628      	lsls	r0, r5, #24
 8009ea4:	d501      	bpl.n	8009eaa <_printf_i+0xc2>
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	e002      	b.n	8009eb0 <_printf_i+0xc8>
 8009eaa:	0668      	lsls	r0, r5, #25
 8009eac:	d5fb      	bpl.n	8009ea6 <_printf_i+0xbe>
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	4854      	ldr	r0, [pc, #336]	; (800a004 <_printf_i+0x21c>)
 8009eb2:	296f      	cmp	r1, #111	; 0x6f
 8009eb4:	bf14      	ite	ne
 8009eb6:	220a      	movne	r2, #10
 8009eb8:	2208      	moveq	r2, #8
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ec0:	6865      	ldr	r5, [r4, #4]
 8009ec2:	60a5      	str	r5, [r4, #8]
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	f2c0 8095 	blt.w	8009ff4 <_printf_i+0x20c>
 8009eca:	6821      	ldr	r1, [r4, #0]
 8009ecc:	f021 0104 	bic.w	r1, r1, #4
 8009ed0:	6021      	str	r1, [r4, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d13d      	bne.n	8009f52 <_printf_i+0x16a>
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	f040 808e 	bne.w	8009ff8 <_printf_i+0x210>
 8009edc:	4665      	mov	r5, ip
 8009ede:	2a08      	cmp	r2, #8
 8009ee0:	d10b      	bne.n	8009efa <_printf_i+0x112>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	07db      	lsls	r3, r3, #31
 8009ee6:	d508      	bpl.n	8009efa <_printf_i+0x112>
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	bfde      	ittt	le
 8009ef0:	2330      	movle	r3, #48	; 0x30
 8009ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009efa:	ebac 0305 	sub.w	r3, ip, r5
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	f8cd 8000 	str.w	r8, [sp]
 8009f04:	463b      	mov	r3, r7
 8009f06:	aa03      	add	r2, sp, #12
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff fef6 	bl	8009cfc <_printf_common>
 8009f10:	3001      	adds	r0, #1
 8009f12:	d14d      	bne.n	8009fb0 <_printf_i+0x1c8>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	b005      	add	sp, #20
 8009f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f1e:	4839      	ldr	r0, [pc, #228]	; (800a004 <_printf_i+0x21c>)
 8009f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f24:	6813      	ldr	r3, [r2, #0]
 8009f26:	6821      	ldr	r1, [r4, #0]
 8009f28:	1d1d      	adds	r5, r3, #4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6015      	str	r5, [r2, #0]
 8009f2e:	060a      	lsls	r2, r1, #24
 8009f30:	d50b      	bpl.n	8009f4a <_printf_i+0x162>
 8009f32:	07ca      	lsls	r2, r1, #31
 8009f34:	bf44      	itt	mi
 8009f36:	f041 0120 	orrmi.w	r1, r1, #32
 8009f3a:	6021      	strmi	r1, [r4, #0]
 8009f3c:	b91b      	cbnz	r3, 8009f46 <_printf_i+0x15e>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	f022 0220 	bic.w	r2, r2, #32
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	2210      	movs	r2, #16
 8009f48:	e7b7      	b.n	8009eba <_printf_i+0xd2>
 8009f4a:	064d      	lsls	r5, r1, #25
 8009f4c:	bf48      	it	mi
 8009f4e:	b29b      	uxthmi	r3, r3
 8009f50:	e7ef      	b.n	8009f32 <_printf_i+0x14a>
 8009f52:	4665      	mov	r5, ip
 8009f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f58:	fb02 3311 	mls	r3, r2, r1, r3
 8009f5c:	5cc3      	ldrb	r3, [r0, r3]
 8009f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009f62:	460b      	mov	r3, r1
 8009f64:	2900      	cmp	r1, #0
 8009f66:	d1f5      	bne.n	8009f54 <_printf_i+0x16c>
 8009f68:	e7b9      	b.n	8009ede <_printf_i+0xf6>
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	6825      	ldr	r5, [r4, #0]
 8009f6e:	6961      	ldr	r1, [r4, #20]
 8009f70:	1d18      	adds	r0, r3, #4
 8009f72:	6010      	str	r0, [r2, #0]
 8009f74:	0628      	lsls	r0, r5, #24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	d501      	bpl.n	8009f7e <_printf_i+0x196>
 8009f7a:	6019      	str	r1, [r3, #0]
 8009f7c:	e002      	b.n	8009f84 <_printf_i+0x19c>
 8009f7e:	066a      	lsls	r2, r5, #25
 8009f80:	d5fb      	bpl.n	8009f7a <_printf_i+0x192>
 8009f82:	8019      	strh	r1, [r3, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	4665      	mov	r5, ip
 8009f8a:	e7b9      	b.n	8009f00 <_printf_i+0x118>
 8009f8c:	6813      	ldr	r3, [r2, #0]
 8009f8e:	1d19      	adds	r1, r3, #4
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	681d      	ldr	r5, [r3, #0]
 8009f94:	6862      	ldr	r2, [r4, #4]
 8009f96:	2100      	movs	r1, #0
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f7f6 f921 	bl	80001e0 <memchr>
 8009f9e:	b108      	cbz	r0, 8009fa4 <_printf_i+0x1bc>
 8009fa0:	1b40      	subs	r0, r0, r5
 8009fa2:	6060      	str	r0, [r4, #4]
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fae:	e7a7      	b.n	8009f00 <_printf_i+0x118>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	47c0      	blx	r8
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d0aa      	beq.n	8009f14 <_printf_i+0x12c>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	079b      	lsls	r3, r3, #30
 8009fc2:	d413      	bmi.n	8009fec <_printf_i+0x204>
 8009fc4:	68e0      	ldr	r0, [r4, #12]
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	4298      	cmp	r0, r3
 8009fca:	bfb8      	it	lt
 8009fcc:	4618      	movlt	r0, r3
 8009fce:	e7a3      	b.n	8009f18 <_printf_i+0x130>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	464a      	mov	r2, r9
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	47c0      	blx	r8
 8009fda:	3001      	adds	r0, #1
 8009fdc:	d09a      	beq.n	8009f14 <_printf_i+0x12c>
 8009fde:	3501      	adds	r5, #1
 8009fe0:	68e3      	ldr	r3, [r4, #12]
 8009fe2:	9a03      	ldr	r2, [sp, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	42ab      	cmp	r3, r5
 8009fe8:	dcf2      	bgt.n	8009fd0 <_printf_i+0x1e8>
 8009fea:	e7eb      	b.n	8009fc4 <_printf_i+0x1dc>
 8009fec:	2500      	movs	r5, #0
 8009fee:	f104 0919 	add.w	r9, r4, #25
 8009ff2:	e7f5      	b.n	8009fe0 <_printf_i+0x1f8>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1ac      	bne.n	8009f52 <_printf_i+0x16a>
 8009ff8:	7803      	ldrb	r3, [r0, #0]
 8009ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a002:	e76c      	b.n	8009ede <_printf_i+0xf6>
 800a004:	0800b48d 	.word	0x0800b48d
 800a008:	0800b49e 	.word	0x0800b49e

0800a00c <__svfiscanf_r>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a014:	460c      	mov	r4, r1
 800a016:	2100      	movs	r1, #0
 800a018:	9144      	str	r1, [sp, #272]	; 0x110
 800a01a:	9145      	str	r1, [sp, #276]	; 0x114
 800a01c:	499f      	ldr	r1, [pc, #636]	; (800a29c <__svfiscanf_r+0x290>)
 800a01e:	91a0      	str	r1, [sp, #640]	; 0x280
 800a020:	f10d 0804 	add.w	r8, sp, #4
 800a024:	499e      	ldr	r1, [pc, #632]	; (800a2a0 <__svfiscanf_r+0x294>)
 800a026:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800a2a4 <__svfiscanf_r+0x298>
 800a02a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a02e:	4606      	mov	r6, r0
 800a030:	4692      	mov	sl, r2
 800a032:	91a1      	str	r1, [sp, #644]	; 0x284
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	270a      	movs	r7, #10
 800a038:	f89a 3000 	ldrb.w	r3, [sl]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 812a 	beq.w	800a296 <__svfiscanf_r+0x28a>
 800a042:	4655      	mov	r5, sl
 800a044:	f000 fdca 	bl	800abdc <__locale_ctype_ptr>
 800a048:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a04c:	4458      	add	r0, fp
 800a04e:	7843      	ldrb	r3, [r0, #1]
 800a050:	f013 0308 	ands.w	r3, r3, #8
 800a054:	d01c      	beq.n	800a090 <__svfiscanf_r+0x84>
 800a056:	6863      	ldr	r3, [r4, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd12      	ble.n	800a082 <__svfiscanf_r+0x76>
 800a05c:	f000 fdbe 	bl	800abdc <__locale_ctype_ptr>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	4410      	add	r0, r2
 800a066:	7842      	ldrb	r2, [r0, #1]
 800a068:	0712      	lsls	r2, r2, #28
 800a06a:	d401      	bmi.n	800a070 <__svfiscanf_r+0x64>
 800a06c:	46aa      	mov	sl, r5
 800a06e:	e7e3      	b.n	800a038 <__svfiscanf_r+0x2c>
 800a070:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a072:	3201      	adds	r2, #1
 800a074:	9245      	str	r2, [sp, #276]	; 0x114
 800a076:	6862      	ldr	r2, [r4, #4]
 800a078:	3301      	adds	r3, #1
 800a07a:	3a01      	subs	r2, #1
 800a07c:	6062      	str	r2, [r4, #4]
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	e7e9      	b.n	800a056 <__svfiscanf_r+0x4a>
 800a082:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a084:	4621      	mov	r1, r4
 800a086:	4630      	mov	r0, r6
 800a088:	4798      	blx	r3
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d0e6      	beq.n	800a05c <__svfiscanf_r+0x50>
 800a08e:	e7ed      	b.n	800a06c <__svfiscanf_r+0x60>
 800a090:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a094:	f040 8082 	bne.w	800a19c <__svfiscanf_r+0x190>
 800a098:	9343      	str	r3, [sp, #268]	; 0x10c
 800a09a:	9341      	str	r3, [sp, #260]	; 0x104
 800a09c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a2:	d103      	bne.n	800a0ac <__svfiscanf_r+0xa0>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	9341      	str	r3, [sp, #260]	; 0x104
 800a0a8:	f10a 0502 	add.w	r5, sl, #2
 800a0ac:	46aa      	mov	sl, r5
 800a0ae:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a0b2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a0b6:	2a09      	cmp	r2, #9
 800a0b8:	d922      	bls.n	800a100 <__svfiscanf_r+0xf4>
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	4879      	ldr	r0, [pc, #484]	; (800a2a4 <__svfiscanf_r+0x298>)
 800a0be:	f7f6 f88f 	bl	80001e0 <memchr>
 800a0c2:	b138      	cbz	r0, 800a0d4 <__svfiscanf_r+0xc8>
 800a0c4:	eba0 0309 	sub.w	r3, r0, r9
 800a0c8:	2001      	movs	r0, #1
 800a0ca:	4098      	lsls	r0, r3
 800a0cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a0ce:	4318      	orrs	r0, r3
 800a0d0:	9041      	str	r0, [sp, #260]	; 0x104
 800a0d2:	46aa      	mov	sl, r5
 800a0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d8:	2b67      	cmp	r3, #103	; 0x67
 800a0da:	f10a 0501 	add.w	r5, sl, #1
 800a0de:	d82b      	bhi.n	800a138 <__svfiscanf_r+0x12c>
 800a0e0:	2b65      	cmp	r3, #101	; 0x65
 800a0e2:	f080 809f 	bcs.w	800a224 <__svfiscanf_r+0x218>
 800a0e6:	2b47      	cmp	r3, #71	; 0x47
 800a0e8:	d810      	bhi.n	800a10c <__svfiscanf_r+0x100>
 800a0ea:	2b45      	cmp	r3, #69	; 0x45
 800a0ec:	f080 809a 	bcs.w	800a224 <__svfiscanf_r+0x218>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d06c      	beq.n	800a1ce <__svfiscanf_r+0x1c2>
 800a0f4:	2b25      	cmp	r3, #37	; 0x25
 800a0f6:	d051      	beq.n	800a19c <__svfiscanf_r+0x190>
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	9347      	str	r3, [sp, #284]	; 0x11c
 800a0fc:	9742      	str	r7, [sp, #264]	; 0x108
 800a0fe:	e027      	b.n	800a150 <__svfiscanf_r+0x144>
 800a100:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a102:	fb07 1303 	mla	r3, r7, r3, r1
 800a106:	3b30      	subs	r3, #48	; 0x30
 800a108:	9343      	str	r3, [sp, #268]	; 0x10c
 800a10a:	e7cf      	b.n	800a0ac <__svfiscanf_r+0xa0>
 800a10c:	2b5b      	cmp	r3, #91	; 0x5b
 800a10e:	d06a      	beq.n	800a1e6 <__svfiscanf_r+0x1da>
 800a110:	d80c      	bhi.n	800a12c <__svfiscanf_r+0x120>
 800a112:	2b58      	cmp	r3, #88	; 0x58
 800a114:	d1f0      	bne.n	800a0f8 <__svfiscanf_r+0xec>
 800a116:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a11c:	9241      	str	r2, [sp, #260]	; 0x104
 800a11e:	2210      	movs	r2, #16
 800a120:	9242      	str	r2, [sp, #264]	; 0x108
 800a122:	2b6e      	cmp	r3, #110	; 0x6e
 800a124:	bf8c      	ite	hi
 800a126:	2304      	movhi	r3, #4
 800a128:	2303      	movls	r3, #3
 800a12a:	e010      	b.n	800a14e <__svfiscanf_r+0x142>
 800a12c:	2b63      	cmp	r3, #99	; 0x63
 800a12e:	d065      	beq.n	800a1fc <__svfiscanf_r+0x1f0>
 800a130:	2b64      	cmp	r3, #100	; 0x64
 800a132:	d1e1      	bne.n	800a0f8 <__svfiscanf_r+0xec>
 800a134:	9742      	str	r7, [sp, #264]	; 0x108
 800a136:	e7f4      	b.n	800a122 <__svfiscanf_r+0x116>
 800a138:	2b70      	cmp	r3, #112	; 0x70
 800a13a:	d04b      	beq.n	800a1d4 <__svfiscanf_r+0x1c8>
 800a13c:	d826      	bhi.n	800a18c <__svfiscanf_r+0x180>
 800a13e:	2b6e      	cmp	r3, #110	; 0x6e
 800a140:	d062      	beq.n	800a208 <__svfiscanf_r+0x1fc>
 800a142:	d84c      	bhi.n	800a1de <__svfiscanf_r+0x1d2>
 800a144:	2b69      	cmp	r3, #105	; 0x69
 800a146:	d1d7      	bne.n	800a0f8 <__svfiscanf_r+0xec>
 800a148:	2300      	movs	r3, #0
 800a14a:	9342      	str	r3, [sp, #264]	; 0x108
 800a14c:	2303      	movs	r3, #3
 800a14e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dd68      	ble.n	800a228 <__svfiscanf_r+0x21c>
 800a156:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a158:	0659      	lsls	r1, r3, #25
 800a15a:	d407      	bmi.n	800a16c <__svfiscanf_r+0x160>
 800a15c:	f000 fd3e 	bl	800abdc <__locale_ctype_ptr>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	4410      	add	r0, r2
 800a166:	7842      	ldrb	r2, [r0, #1]
 800a168:	0712      	lsls	r2, r2, #28
 800a16a:	d464      	bmi.n	800a236 <__svfiscanf_r+0x22a>
 800a16c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a16e:	2b02      	cmp	r3, #2
 800a170:	dc73      	bgt.n	800a25a <__svfiscanf_r+0x24e>
 800a172:	466b      	mov	r3, sp
 800a174:	4622      	mov	r2, r4
 800a176:	a941      	add	r1, sp, #260	; 0x104
 800a178:	4630      	mov	r0, r6
 800a17a:	f000 f8bf 	bl	800a2fc <_scanf_chars>
 800a17e:	2801      	cmp	r0, #1
 800a180:	f000 8089 	beq.w	800a296 <__svfiscanf_r+0x28a>
 800a184:	2802      	cmp	r0, #2
 800a186:	f47f af71 	bne.w	800a06c <__svfiscanf_r+0x60>
 800a18a:	e01d      	b.n	800a1c8 <__svfiscanf_r+0x1bc>
 800a18c:	2b75      	cmp	r3, #117	; 0x75
 800a18e:	d0d1      	beq.n	800a134 <__svfiscanf_r+0x128>
 800a190:	2b78      	cmp	r3, #120	; 0x78
 800a192:	d0c0      	beq.n	800a116 <__svfiscanf_r+0x10a>
 800a194:	2b73      	cmp	r3, #115	; 0x73
 800a196:	d1af      	bne.n	800a0f8 <__svfiscanf_r+0xec>
 800a198:	2302      	movs	r3, #2
 800a19a:	e7d8      	b.n	800a14e <__svfiscanf_r+0x142>
 800a19c:	6863      	ldr	r3, [r4, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	dd0c      	ble.n	800a1bc <__svfiscanf_r+0x1b0>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	781a      	ldrb	r2, [r3, #0]
 800a1a6:	455a      	cmp	r2, fp
 800a1a8:	d175      	bne.n	800a296 <__svfiscanf_r+0x28a>
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	6862      	ldr	r2, [r4, #4]
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a1b2:	3a01      	subs	r2, #1
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	6062      	str	r2, [r4, #4]
 800a1b8:	9345      	str	r3, [sp, #276]	; 0x114
 800a1ba:	e757      	b.n	800a06c <__svfiscanf_r+0x60>
 800a1bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4798      	blx	r3
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d0ec      	beq.n	800a1a2 <__svfiscanf_r+0x196>
 800a1c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d159      	bne.n	800a282 <__svfiscanf_r+0x276>
 800a1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d2:	e05c      	b.n	800a28e <__svfiscanf_r+0x282>
 800a1d4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a1d6:	f042 0220 	orr.w	r2, r2, #32
 800a1da:	9241      	str	r2, [sp, #260]	; 0x104
 800a1dc:	e79b      	b.n	800a116 <__svfiscanf_r+0x10a>
 800a1de:	2308      	movs	r3, #8
 800a1e0:	9342      	str	r3, [sp, #264]	; 0x108
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	e7b3      	b.n	800a14e <__svfiscanf_r+0x142>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	f000 fa75 	bl	800a6d8 <__sccl>
 800a1ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f4:	9341      	str	r3, [sp, #260]	; 0x104
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e7a8      	b.n	800a14e <__svfiscanf_r+0x142>
 800a1fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a202:	9341      	str	r3, [sp, #260]	; 0x104
 800a204:	2300      	movs	r3, #0
 800a206:	e7a2      	b.n	800a14e <__svfiscanf_r+0x142>
 800a208:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a20a:	06c3      	lsls	r3, r0, #27
 800a20c:	f53f af2e 	bmi.w	800a06c <__svfiscanf_r+0x60>
 800a210:	9b00      	ldr	r3, [sp, #0]
 800a212:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a214:	1d19      	adds	r1, r3, #4
 800a216:	9100      	str	r1, [sp, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	07c0      	lsls	r0, r0, #31
 800a21c:	bf4c      	ite	mi
 800a21e:	801a      	strhmi	r2, [r3, #0]
 800a220:	601a      	strpl	r2, [r3, #0]
 800a222:	e723      	b.n	800a06c <__svfiscanf_r+0x60>
 800a224:	2305      	movs	r3, #5
 800a226:	e792      	b.n	800a14e <__svfiscanf_r+0x142>
 800a228:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a22a:	4621      	mov	r1, r4
 800a22c:	4630      	mov	r0, r6
 800a22e:	4798      	blx	r3
 800a230:	2800      	cmp	r0, #0
 800a232:	d090      	beq.n	800a156 <__svfiscanf_r+0x14a>
 800a234:	e7c8      	b.n	800a1c8 <__svfiscanf_r+0x1bc>
 800a236:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a238:	3201      	adds	r2, #1
 800a23a:	9245      	str	r2, [sp, #276]	; 0x114
 800a23c:	6862      	ldr	r2, [r4, #4]
 800a23e:	3a01      	subs	r2, #1
 800a240:	2a00      	cmp	r2, #0
 800a242:	6062      	str	r2, [r4, #4]
 800a244:	dd02      	ble.n	800a24c <__svfiscanf_r+0x240>
 800a246:	3301      	adds	r3, #1
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	e787      	b.n	800a15c <__svfiscanf_r+0x150>
 800a24c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a24e:	4621      	mov	r1, r4
 800a250:	4630      	mov	r0, r6
 800a252:	4798      	blx	r3
 800a254:	2800      	cmp	r0, #0
 800a256:	d081      	beq.n	800a15c <__svfiscanf_r+0x150>
 800a258:	e7b6      	b.n	800a1c8 <__svfiscanf_r+0x1bc>
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	dc06      	bgt.n	800a26c <__svfiscanf_r+0x260>
 800a25e:	466b      	mov	r3, sp
 800a260:	4622      	mov	r2, r4
 800a262:	a941      	add	r1, sp, #260	; 0x104
 800a264:	4630      	mov	r0, r6
 800a266:	f000 f8ad 	bl	800a3c4 <_scanf_i>
 800a26a:	e788      	b.n	800a17e <__svfiscanf_r+0x172>
 800a26c:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <__svfiscanf_r+0x29c>)
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f43f aefc 	beq.w	800a06c <__svfiscanf_r+0x60>
 800a274:	466b      	mov	r3, sp
 800a276:	4622      	mov	r2, r4
 800a278:	a941      	add	r1, sp, #260	; 0x104
 800a27a:	4630      	mov	r0, r6
 800a27c:	f3af 8000 	nop.w
 800a280:	e77d      	b.n	800a17e <__svfiscanf_r+0x172>
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a288:	bf18      	it	ne
 800a28a:	f04f 30ff 	movne.w	r0, #4294967295
 800a28e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a296:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a298:	e7f9      	b.n	800a28e <__svfiscanf_r+0x282>
 800a29a:	bf00      	nop
 800a29c:	0800aa69 	.word	0x0800aa69
 800a2a0:	0800a5c1 	.word	0x0800a5c1
 800a2a4:	0800b482 	.word	0x0800b482
 800a2a8:	00000000 	.word	0x00000000

0800a2ac <_vfiscanf_r>:
 800a2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	4616      	mov	r6, r2
 800a2b4:	461f      	mov	r7, r3
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b118      	cbz	r0, 800a2c2 <_vfiscanf_r+0x16>
 800a2ba:	6983      	ldr	r3, [r0, #24]
 800a2bc:	b90b      	cbnz	r3, 800a2c2 <_vfiscanf_r+0x16>
 800a2be:	f7ff fad1 	bl	8009864 <__sinit>
 800a2c2:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <_vfiscanf_r+0x44>)
 800a2c4:	429c      	cmp	r4, r3
 800a2c6:	d108      	bne.n	800a2da <_vfiscanf_r+0x2e>
 800a2c8:	686c      	ldr	r4, [r5, #4]
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d6:	f7ff be99 	b.w	800a00c <__svfiscanf_r>
 800a2da:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <_vfiscanf_r+0x48>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d101      	bne.n	800a2e4 <_vfiscanf_r+0x38>
 800a2e0:	68ac      	ldr	r4, [r5, #8]
 800a2e2:	e7f2      	b.n	800a2ca <_vfiscanf_r+0x1e>
 800a2e4:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <_vfiscanf_r+0x4c>)
 800a2e6:	429c      	cmp	r4, r3
 800a2e8:	bf08      	it	eq
 800a2ea:	68ec      	ldreq	r4, [r5, #12]
 800a2ec:	e7ed      	b.n	800a2ca <_vfiscanf_r+0x1e>
 800a2ee:	bf00      	nop
 800a2f0:	0800b43c 	.word	0x0800b43c
 800a2f4:	0800b45c 	.word	0x0800b45c
 800a2f8:	0800b41c 	.word	0x0800b41c

0800a2fc <_scanf_chars>:
 800a2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a300:	4615      	mov	r5, r2
 800a302:	688a      	ldr	r2, [r1, #8]
 800a304:	4680      	mov	r8, r0
 800a306:	460c      	mov	r4, r1
 800a308:	b932      	cbnz	r2, 800a318 <_scanf_chars+0x1c>
 800a30a:	698a      	ldr	r2, [r1, #24]
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	bf14      	ite	ne
 800a310:	f04f 32ff 	movne.w	r2, #4294967295
 800a314:	2201      	moveq	r2, #1
 800a316:	608a      	str	r2, [r1, #8]
 800a318:	6822      	ldr	r2, [r4, #0]
 800a31a:	06d1      	lsls	r1, r2, #27
 800a31c:	bf5f      	itttt	pl
 800a31e:	681a      	ldrpl	r2, [r3, #0]
 800a320:	1d11      	addpl	r1, r2, #4
 800a322:	6019      	strpl	r1, [r3, #0]
 800a324:	6817      	ldrpl	r7, [r2, #0]
 800a326:	2600      	movs	r6, #0
 800a328:	69a3      	ldr	r3, [r4, #24]
 800a32a:	b1db      	cbz	r3, 800a364 <_scanf_chars+0x68>
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d107      	bne.n	800a340 <_scanf_chars+0x44>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	6962      	ldr	r2, [r4, #20]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	5cd3      	ldrb	r3, [r2, r3]
 800a338:	b9a3      	cbnz	r3, 800a364 <_scanf_chars+0x68>
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d132      	bne.n	800a3a4 <_scanf_chars+0xa8>
 800a33e:	e006      	b.n	800a34e <_scanf_chars+0x52>
 800a340:	2b02      	cmp	r3, #2
 800a342:	d007      	beq.n	800a354 <_scanf_chars+0x58>
 800a344:	2e00      	cmp	r6, #0
 800a346:	d12d      	bne.n	800a3a4 <_scanf_chars+0xa8>
 800a348:	69a3      	ldr	r3, [r4, #24]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d12a      	bne.n	800a3a4 <_scanf_chars+0xa8>
 800a34e:	2001      	movs	r0, #1
 800a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a354:	f000 fc42 	bl	800abdc <__locale_ctype_ptr>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	4418      	add	r0, r3
 800a35e:	7843      	ldrb	r3, [r0, #1]
 800a360:	071b      	lsls	r3, r3, #28
 800a362:	d4ef      	bmi.n	800a344 <_scanf_chars+0x48>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	06da      	lsls	r2, r3, #27
 800a368:	bf5e      	ittt	pl
 800a36a:	682b      	ldrpl	r3, [r5, #0]
 800a36c:	781b      	ldrbpl	r3, [r3, #0]
 800a36e:	703b      	strbpl	r3, [r7, #0]
 800a370:	682a      	ldr	r2, [r5, #0]
 800a372:	686b      	ldr	r3, [r5, #4]
 800a374:	f102 0201 	add.w	r2, r2, #1
 800a378:	602a      	str	r2, [r5, #0]
 800a37a:	68a2      	ldr	r2, [r4, #8]
 800a37c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a380:	f102 32ff 	add.w	r2, r2, #4294967295
 800a384:	606b      	str	r3, [r5, #4]
 800a386:	f106 0601 	add.w	r6, r6, #1
 800a38a:	bf58      	it	pl
 800a38c:	3701      	addpl	r7, #1
 800a38e:	60a2      	str	r2, [r4, #8]
 800a390:	b142      	cbz	r2, 800a3a4 <_scanf_chars+0xa8>
 800a392:	2b00      	cmp	r3, #0
 800a394:	dcc8      	bgt.n	800a328 <_scanf_chars+0x2c>
 800a396:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a39a:	4629      	mov	r1, r5
 800a39c:	4640      	mov	r0, r8
 800a39e:	4798      	blx	r3
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d0c1      	beq.n	800a328 <_scanf_chars+0x2c>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	f013 0310 	ands.w	r3, r3, #16
 800a3aa:	d105      	bne.n	800a3b8 <_scanf_chars+0xbc>
 800a3ac:	68e2      	ldr	r2, [r4, #12]
 800a3ae:	3201      	adds	r2, #1
 800a3b0:	60e2      	str	r2, [r4, #12]
 800a3b2:	69a2      	ldr	r2, [r4, #24]
 800a3b4:	b102      	cbz	r2, 800a3b8 <_scanf_chars+0xbc>
 800a3b6:	703b      	strb	r3, [r7, #0]
 800a3b8:	6923      	ldr	r3, [r4, #16]
 800a3ba:	441e      	add	r6, r3
 800a3bc:	6126      	str	r6, [r4, #16]
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e7c6      	b.n	800a350 <_scanf_chars+0x54>
	...

0800a3c4 <_scanf_i>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	469a      	mov	sl, r3
 800a3ca:	4b74      	ldr	r3, [pc, #464]	; (800a59c <_scanf_i+0x1d8>)
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	4683      	mov	fp, r0
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	ab03      	add	r3, sp, #12
 800a3da:	68a7      	ldr	r7, [r4, #8]
 800a3dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a3e0:	4b6f      	ldr	r3, [pc, #444]	; (800a5a0 <_scanf_i+0x1dc>)
 800a3e2:	69a1      	ldr	r1, [r4, #24]
 800a3e4:	4a6f      	ldr	r2, [pc, #444]	; (800a5a4 <_scanf_i+0x1e0>)
 800a3e6:	2903      	cmp	r1, #3
 800a3e8:	bf08      	it	eq
 800a3ea:	461a      	moveq	r2, r3
 800a3ec:	1e7b      	subs	r3, r7, #1
 800a3ee:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a3f2:	bf84      	itt	hi
 800a3f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a3f8:	60a3      	strhi	r3, [r4, #8]
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	9200      	str	r2, [sp, #0]
 800a3fe:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a402:	bf88      	it	hi
 800a404:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a408:	f104 091c 	add.w	r9, r4, #28
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bf8c      	ite	hi
 800a410:	197f      	addhi	r7, r7, r5
 800a412:	2700      	movls	r7, #0
 800a414:	464b      	mov	r3, r9
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	6831      	ldr	r1, [r6, #0]
 800a41e:	ab03      	add	r3, sp, #12
 800a420:	2202      	movs	r2, #2
 800a422:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a426:	7809      	ldrb	r1, [r1, #0]
 800a428:	f7f5 feda 	bl	80001e0 <memchr>
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	b330      	cbz	r0, 800a47e <_scanf_i+0xba>
 800a430:	f1b8 0f01 	cmp.w	r8, #1
 800a434:	d15a      	bne.n	800a4ec <_scanf_i+0x128>
 800a436:	6862      	ldr	r2, [r4, #4]
 800a438:	b92a      	cbnz	r2, 800a446 <_scanf_i+0x82>
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	2108      	movs	r1, #8
 800a43e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a442:	6061      	str	r1, [r4, #4]
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	6822      	ldr	r2, [r4, #0]
 800a448:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a44c:	6022      	str	r2, [r4, #0]
 800a44e:	68a2      	ldr	r2, [r4, #8]
 800a450:	1e51      	subs	r1, r2, #1
 800a452:	60a1      	str	r1, [r4, #8]
 800a454:	b19a      	cbz	r2, 800a47e <_scanf_i+0xba>
 800a456:	6832      	ldr	r2, [r6, #0]
 800a458:	1c51      	adds	r1, r2, #1
 800a45a:	6031      	str	r1, [r6, #0]
 800a45c:	7812      	ldrb	r2, [r2, #0]
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	1c5d      	adds	r5, r3, #1
 800a462:	6873      	ldr	r3, [r6, #4]
 800a464:	3b01      	subs	r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	6073      	str	r3, [r6, #4]
 800a46a:	dc07      	bgt.n	800a47c <_scanf_i+0xb8>
 800a46c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a470:	4631      	mov	r1, r6
 800a472:	4658      	mov	r0, fp
 800a474:	4798      	blx	r3
 800a476:	2800      	cmp	r0, #0
 800a478:	f040 8086 	bne.w	800a588 <_scanf_i+0x1c4>
 800a47c:	462b      	mov	r3, r5
 800a47e:	f108 0801 	add.w	r8, r8, #1
 800a482:	f1b8 0f03 	cmp.w	r8, #3
 800a486:	d1c8      	bne.n	800a41a <_scanf_i+0x56>
 800a488:	6862      	ldr	r2, [r4, #4]
 800a48a:	b90a      	cbnz	r2, 800a490 <_scanf_i+0xcc>
 800a48c:	220a      	movs	r2, #10
 800a48e:	6062      	str	r2, [r4, #4]
 800a490:	6862      	ldr	r2, [r4, #4]
 800a492:	4945      	ldr	r1, [pc, #276]	; (800a5a8 <_scanf_i+0x1e4>)
 800a494:	6960      	ldr	r0, [r4, #20]
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	1a89      	subs	r1, r1, r2
 800a49a:	f000 f91d 	bl	800a6d8 <__sccl>
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	f04f 0800 	mov.w	r8, #0
 800a4a4:	461d      	mov	r5, r3
 800a4a6:	68a3      	ldr	r3, [r4, #8]
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d03a      	beq.n	800a524 <_scanf_i+0x160>
 800a4ae:	6831      	ldr	r1, [r6, #0]
 800a4b0:	6960      	ldr	r0, [r4, #20]
 800a4b2:	f891 c000 	ldrb.w	ip, [r1]
 800a4b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d032      	beq.n	800a524 <_scanf_i+0x160>
 800a4be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a4c2:	d121      	bne.n	800a508 <_scanf_i+0x144>
 800a4c4:	0510      	lsls	r0, r2, #20
 800a4c6:	d51f      	bpl.n	800a508 <_scanf_i+0x144>
 800a4c8:	f108 0801 	add.w	r8, r8, #1
 800a4cc:	b117      	cbz	r7, 800a4d4 <_scanf_i+0x110>
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	3f01      	subs	r7, #1
 800a4d2:	60a3      	str	r3, [r4, #8]
 800a4d4:	6873      	ldr	r3, [r6, #4]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	6073      	str	r3, [r6, #4]
 800a4dc:	dd1b      	ble.n	800a516 <_scanf_i+0x152>
 800a4de:	6833      	ldr	r3, [r6, #0]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	6033      	str	r3, [r6, #0]
 800a4e4:	68a3      	ldr	r3, [r4, #8]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	e7dc      	b.n	800a4a6 <_scanf_i+0xe2>
 800a4ec:	f1b8 0f02 	cmp.w	r8, #2
 800a4f0:	d1ad      	bne.n	800a44e <_scanf_i+0x8a>
 800a4f2:	6822      	ldr	r2, [r4, #0]
 800a4f4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a4f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a4fc:	d1bf      	bne.n	800a47e <_scanf_i+0xba>
 800a4fe:	2110      	movs	r1, #16
 800a500:	6061      	str	r1, [r4, #4]
 800a502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a506:	e7a1      	b.n	800a44c <_scanf_i+0x88>
 800a508:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	780b      	ldrb	r3, [r1, #0]
 800a510:	702b      	strb	r3, [r5, #0]
 800a512:	3501      	adds	r5, #1
 800a514:	e7de      	b.n	800a4d4 <_scanf_i+0x110>
 800a516:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a51a:	4631      	mov	r1, r6
 800a51c:	4658      	mov	r0, fp
 800a51e:	4798      	blx	r3
 800a520:	2800      	cmp	r0, #0
 800a522:	d0df      	beq.n	800a4e4 <_scanf_i+0x120>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	05d9      	lsls	r1, r3, #23
 800a528:	d50c      	bpl.n	800a544 <_scanf_i+0x180>
 800a52a:	454d      	cmp	r5, r9
 800a52c:	d908      	bls.n	800a540 <_scanf_i+0x17c>
 800a52e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a536:	4632      	mov	r2, r6
 800a538:	4658      	mov	r0, fp
 800a53a:	4798      	blx	r3
 800a53c:	1e6f      	subs	r7, r5, #1
 800a53e:	463d      	mov	r5, r7
 800a540:	454d      	cmp	r5, r9
 800a542:	d029      	beq.n	800a598 <_scanf_i+0x1d4>
 800a544:	6822      	ldr	r2, [r4, #0]
 800a546:	f012 0210 	ands.w	r2, r2, #16
 800a54a:	d113      	bne.n	800a574 <_scanf_i+0x1b0>
 800a54c:	702a      	strb	r2, [r5, #0]
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	9e00      	ldr	r6, [sp, #0]
 800a552:	4649      	mov	r1, r9
 800a554:	4658      	mov	r0, fp
 800a556:	47b0      	blx	r6
 800a558:	f8da 3000 	ldr.w	r3, [sl]
 800a55c:	6821      	ldr	r1, [r4, #0]
 800a55e:	1d1a      	adds	r2, r3, #4
 800a560:	f8ca 2000 	str.w	r2, [sl]
 800a564:	f011 0f20 	tst.w	r1, #32
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	d010      	beq.n	800a58e <_scanf_i+0x1ca>
 800a56c:	6018      	str	r0, [r3, #0]
 800a56e:	68e3      	ldr	r3, [r4, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	60e3      	str	r3, [r4, #12]
 800a574:	eba5 0509 	sub.w	r5, r5, r9
 800a578:	44a8      	add	r8, r5
 800a57a:	6925      	ldr	r5, [r4, #16]
 800a57c:	4445      	add	r5, r8
 800a57e:	6125      	str	r5, [r4, #16]
 800a580:	2000      	movs	r0, #0
 800a582:	b007      	add	sp, #28
 800a584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a588:	f04f 0800 	mov.w	r8, #0
 800a58c:	e7ca      	b.n	800a524 <_scanf_i+0x160>
 800a58e:	07ca      	lsls	r2, r1, #31
 800a590:	bf4c      	ite	mi
 800a592:	8018      	strhmi	r0, [r3, #0]
 800a594:	6018      	strpl	r0, [r3, #0]
 800a596:	e7ea      	b.n	800a56e <_scanf_i+0x1aa>
 800a598:	2001      	movs	r0, #1
 800a59a:	e7f2      	b.n	800a582 <_scanf_i+0x1be>
 800a59c:	0800b250 	.word	0x0800b250
 800a5a0:	0800a8b9 	.word	0x0800a8b9
 800a5a4:	0800a9d1 	.word	0x0800a9d1
 800a5a8:	0800b4bf 	.word	0x0800b4bf

0800a5ac <lflush>:
 800a5ac:	8983      	ldrh	r3, [r0, #12]
 800a5ae:	f003 0309 	and.w	r3, r3, #9
 800a5b2:	2b09      	cmp	r3, #9
 800a5b4:	d101      	bne.n	800a5ba <lflush+0xe>
 800a5b6:	f7ff b903 	b.w	80097c0 <fflush>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <__srefill_r>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	b118      	cbz	r0, 800a5d0 <__srefill_r+0x10>
 800a5c8:	6983      	ldr	r3, [r0, #24]
 800a5ca:	b90b      	cbnz	r3, 800a5d0 <__srefill_r+0x10>
 800a5cc:	f7ff f94a 	bl	8009864 <__sinit>
 800a5d0:	4b3c      	ldr	r3, [pc, #240]	; (800a6c4 <__srefill_r+0x104>)
 800a5d2:	429c      	cmp	r4, r3
 800a5d4:	d10a      	bne.n	800a5ec <__srefill_r+0x2c>
 800a5d6:	686c      	ldr	r4, [r5, #4]
 800a5d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6063      	str	r3, [r4, #4]
 800a5e0:	b293      	uxth	r3, r2
 800a5e2:	069e      	lsls	r6, r3, #26
 800a5e4:	d50c      	bpl.n	800a600 <__srefill_r+0x40>
 800a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ea:	e067      	b.n	800a6bc <__srefill_r+0xfc>
 800a5ec:	4b36      	ldr	r3, [pc, #216]	; (800a6c8 <__srefill_r+0x108>)
 800a5ee:	429c      	cmp	r4, r3
 800a5f0:	d101      	bne.n	800a5f6 <__srefill_r+0x36>
 800a5f2:	68ac      	ldr	r4, [r5, #8]
 800a5f4:	e7f0      	b.n	800a5d8 <__srefill_r+0x18>
 800a5f6:	4b35      	ldr	r3, [pc, #212]	; (800a6cc <__srefill_r+0x10c>)
 800a5f8:	429c      	cmp	r4, r3
 800a5fa:	bf08      	it	eq
 800a5fc:	68ec      	ldreq	r4, [r5, #12]
 800a5fe:	e7eb      	b.n	800a5d8 <__srefill_r+0x18>
 800a600:	0758      	lsls	r0, r3, #29
 800a602:	d449      	bmi.n	800a698 <__srefill_r+0xd8>
 800a604:	06d9      	lsls	r1, r3, #27
 800a606:	d405      	bmi.n	800a614 <__srefill_r+0x54>
 800a608:	2309      	movs	r3, #9
 800a60a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	81a2      	strh	r2, [r4, #12]
 800a612:	e7e8      	b.n	800a5e6 <__srefill_r+0x26>
 800a614:	071a      	lsls	r2, r3, #28
 800a616:	d50b      	bpl.n	800a630 <__srefill_r+0x70>
 800a618:	4621      	mov	r1, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	f7ff f8a6 	bl	800976c <_fflush_r>
 800a620:	2800      	cmp	r0, #0
 800a622:	d1e0      	bne.n	800a5e6 <__srefill_r+0x26>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	60a0      	str	r0, [r4, #8]
 800a628:	f023 0308 	bic.w	r3, r3, #8
 800a62c:	81a3      	strh	r3, [r4, #12]
 800a62e:	61a0      	str	r0, [r4, #24]
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	f043 0304 	orr.w	r3, r3, #4
 800a636:	81a3      	strh	r3, [r4, #12]
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	b91b      	cbnz	r3, 800a644 <__srefill_r+0x84>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f7ff f9da 	bl	80099f8 <__smakebuf_r>
 800a644:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a648:	b2be      	uxth	r6, r7
 800a64a:	07b3      	lsls	r3, r6, #30
 800a64c:	d00f      	beq.n	800a66e <__srefill_r+0xae>
 800a64e:	2301      	movs	r3, #1
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	4b1f      	ldr	r3, [pc, #124]	; (800a6d0 <__srefill_r+0x110>)
 800a654:	491f      	ldr	r1, [pc, #124]	; (800a6d4 <__srefill_r+0x114>)
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	f006 0609 	and.w	r6, r6, #9
 800a65c:	f7ff f96e 	bl	800993c <_fwalk>
 800a660:	2e09      	cmp	r6, #9
 800a662:	81a7      	strh	r7, [r4, #12]
 800a664:	d103      	bne.n	800a66e <__srefill_r+0xae>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f7fe fff9 	bl	8009660 <__sflush_r>
 800a66e:	6922      	ldr	r2, [r4, #16]
 800a670:	6022      	str	r2, [r4, #0]
 800a672:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a674:	6963      	ldr	r3, [r4, #20]
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	4628      	mov	r0, r5
 800a67a:	47b0      	blx	r6
 800a67c:	2800      	cmp	r0, #0
 800a67e:	6060      	str	r0, [r4, #4]
 800a680:	dc1d      	bgt.n	800a6be <__srefill_r+0xfe>
 800a682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a686:	bf17      	itett	ne
 800a688:	2200      	movne	r2, #0
 800a68a:	f043 0320 	orreq.w	r3, r3, #32
 800a68e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a692:	6062      	strne	r2, [r4, #4]
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	e7a6      	b.n	800a5e6 <__srefill_r+0x26>
 800a698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69a:	2900      	cmp	r1, #0
 800a69c:	d0cc      	beq.n	800a638 <__srefill_r+0x78>
 800a69e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a2:	4299      	cmp	r1, r3
 800a6a4:	d002      	beq.n	800a6ac <__srefill_r+0xec>
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f7fe fd20 	bl	80090ec <_free_r>
 800a6ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0bf      	beq.n	800a638 <__srefill_r+0x78>
 800a6b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6be:	2000      	movs	r0, #0
 800a6c0:	e7fc      	b.n	800a6bc <__srefill_r+0xfc>
 800a6c2:	bf00      	nop
 800a6c4:	0800b43c 	.word	0x0800b43c
 800a6c8:	0800b45c 	.word	0x0800b45c
 800a6cc:	0800b41c 	.word	0x0800b41c
 800a6d0:	0800b418 	.word	0x0800b418
 800a6d4:	0800a5ad 	.word	0x0800a5ad

0800a6d8 <__sccl>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	780b      	ldrb	r3, [r1, #0]
 800a6dc:	2b5e      	cmp	r3, #94	; 0x5e
 800a6de:	bf13      	iteet	ne
 800a6e0:	1c4a      	addne	r2, r1, #1
 800a6e2:	1c8a      	addeq	r2, r1, #2
 800a6e4:	784b      	ldrbeq	r3, [r1, #1]
 800a6e6:	2100      	movne	r1, #0
 800a6e8:	bf08      	it	eq
 800a6ea:	2101      	moveq	r1, #1
 800a6ec:	1e44      	subs	r4, r0, #1
 800a6ee:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a6f2:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a6f6:	42ac      	cmp	r4, r5
 800a6f8:	d1fb      	bne.n	800a6f2 <__sccl+0x1a>
 800a6fa:	b913      	cbnz	r3, 800a702 <__sccl+0x2a>
 800a6fc:	3a01      	subs	r2, #1
 800a6fe:	4610      	mov	r0, r2
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	f081 0401 	eor.w	r4, r1, #1
 800a706:	54c4      	strb	r4, [r0, r3]
 800a708:	1c51      	adds	r1, r2, #1
 800a70a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a70e:	2d2d      	cmp	r5, #45	; 0x2d
 800a710:	f101 36ff 	add.w	r6, r1, #4294967295
 800a714:	460a      	mov	r2, r1
 800a716:	d006      	beq.n	800a726 <__sccl+0x4e>
 800a718:	2d5d      	cmp	r5, #93	; 0x5d
 800a71a:	d0f0      	beq.n	800a6fe <__sccl+0x26>
 800a71c:	b90d      	cbnz	r5, 800a722 <__sccl+0x4a>
 800a71e:	4632      	mov	r2, r6
 800a720:	e7ed      	b.n	800a6fe <__sccl+0x26>
 800a722:	462b      	mov	r3, r5
 800a724:	e7ef      	b.n	800a706 <__sccl+0x2e>
 800a726:	780e      	ldrb	r6, [r1, #0]
 800a728:	2e5d      	cmp	r6, #93	; 0x5d
 800a72a:	d0fa      	beq.n	800a722 <__sccl+0x4a>
 800a72c:	42b3      	cmp	r3, r6
 800a72e:	dcf8      	bgt.n	800a722 <__sccl+0x4a>
 800a730:	3301      	adds	r3, #1
 800a732:	429e      	cmp	r6, r3
 800a734:	54c4      	strb	r4, [r0, r3]
 800a736:	dcfb      	bgt.n	800a730 <__sccl+0x58>
 800a738:	3102      	adds	r1, #2
 800a73a:	e7e6      	b.n	800a70a <__sccl+0x32>

0800a73c <__sread>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	460c      	mov	r4, r1
 800a740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a744:	f000 faae 	bl	800aca4 <_read_r>
 800a748:	2800      	cmp	r0, #0
 800a74a:	bfab      	itete	ge
 800a74c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a74e:	89a3      	ldrhlt	r3, [r4, #12]
 800a750:	181b      	addge	r3, r3, r0
 800a752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a756:	bfac      	ite	ge
 800a758:	6563      	strge	r3, [r4, #84]	; 0x54
 800a75a:	81a3      	strhlt	r3, [r4, #12]
 800a75c:	bd10      	pop	{r4, pc}

0800a75e <__swrite>:
 800a75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a762:	461f      	mov	r7, r3
 800a764:	898b      	ldrh	r3, [r1, #12]
 800a766:	05db      	lsls	r3, r3, #23
 800a768:	4605      	mov	r5, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	4616      	mov	r6, r2
 800a76e:	d505      	bpl.n	800a77c <__swrite+0x1e>
 800a770:	2302      	movs	r3, #2
 800a772:	2200      	movs	r2, #0
 800a774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a778:	f000 fa3e 	bl	800abf8 <_lseek_r>
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a786:	81a3      	strh	r3, [r4, #12]
 800a788:	4632      	mov	r2, r6
 800a78a:	463b      	mov	r3, r7
 800a78c:	4628      	mov	r0, r5
 800a78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a792:	f000 b9db 	b.w	800ab4c <_write_r>

0800a796 <__sseek>:
 800a796:	b510      	push	{r4, lr}
 800a798:	460c      	mov	r4, r1
 800a79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79e:	f000 fa2b 	bl	800abf8 <_lseek_r>
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	bf15      	itete	ne
 800a7a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7b2:	81a3      	strheq	r3, [r4, #12]
 800a7b4:	bf18      	it	ne
 800a7b6:	81a3      	strhne	r3, [r4, #12]
 800a7b8:	bd10      	pop	{r4, pc}

0800a7ba <__sclose>:
 800a7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7be:	f000 b9d7 	b.w	800ab70 <_close_r>

0800a7c2 <_strtol_l.isra.0>:
 800a7c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c6:	4680      	mov	r8, r0
 800a7c8:	4689      	mov	r9, r1
 800a7ca:	4692      	mov	sl, r2
 800a7cc:	461e      	mov	r6, r3
 800a7ce:	460f      	mov	r7, r1
 800a7d0:	463d      	mov	r5, r7
 800a7d2:	9808      	ldr	r0, [sp, #32]
 800a7d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d8:	f000 f9fc 	bl	800abd4 <__locale_ctype_ptr_l>
 800a7dc:	4420      	add	r0, r4
 800a7de:	7843      	ldrb	r3, [r0, #1]
 800a7e0:	f013 0308 	ands.w	r3, r3, #8
 800a7e4:	d132      	bne.n	800a84c <_strtol_l.isra.0+0x8a>
 800a7e6:	2c2d      	cmp	r4, #45	; 0x2d
 800a7e8:	d132      	bne.n	800a850 <_strtol_l.isra.0+0x8e>
 800a7ea:	787c      	ldrb	r4, [r7, #1]
 800a7ec:	1cbd      	adds	r5, r7, #2
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	2e00      	cmp	r6, #0
 800a7f2:	d05d      	beq.n	800a8b0 <_strtol_l.isra.0+0xee>
 800a7f4:	2e10      	cmp	r6, #16
 800a7f6:	d109      	bne.n	800a80c <_strtol_l.isra.0+0x4a>
 800a7f8:	2c30      	cmp	r4, #48	; 0x30
 800a7fa:	d107      	bne.n	800a80c <_strtol_l.isra.0+0x4a>
 800a7fc:	782b      	ldrb	r3, [r5, #0]
 800a7fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a802:	2b58      	cmp	r3, #88	; 0x58
 800a804:	d14f      	bne.n	800a8a6 <_strtol_l.isra.0+0xe4>
 800a806:	786c      	ldrb	r4, [r5, #1]
 800a808:	2610      	movs	r6, #16
 800a80a:	3502      	adds	r5, #2
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	bf14      	ite	ne
 800a810:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a814:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a818:	2700      	movs	r7, #0
 800a81a:	fbb1 fcf6 	udiv	ip, r1, r6
 800a81e:	4638      	mov	r0, r7
 800a820:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a824:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a828:	2b09      	cmp	r3, #9
 800a82a:	d817      	bhi.n	800a85c <_strtol_l.isra.0+0x9a>
 800a82c:	461c      	mov	r4, r3
 800a82e:	42a6      	cmp	r6, r4
 800a830:	dd23      	ble.n	800a87a <_strtol_l.isra.0+0xb8>
 800a832:	1c7b      	adds	r3, r7, #1
 800a834:	d007      	beq.n	800a846 <_strtol_l.isra.0+0x84>
 800a836:	4584      	cmp	ip, r0
 800a838:	d31c      	bcc.n	800a874 <_strtol_l.isra.0+0xb2>
 800a83a:	d101      	bne.n	800a840 <_strtol_l.isra.0+0x7e>
 800a83c:	45a6      	cmp	lr, r4
 800a83e:	db19      	blt.n	800a874 <_strtol_l.isra.0+0xb2>
 800a840:	fb00 4006 	mla	r0, r0, r6, r4
 800a844:	2701      	movs	r7, #1
 800a846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a84a:	e7eb      	b.n	800a824 <_strtol_l.isra.0+0x62>
 800a84c:	462f      	mov	r7, r5
 800a84e:	e7bf      	b.n	800a7d0 <_strtol_l.isra.0+0xe>
 800a850:	2c2b      	cmp	r4, #43	; 0x2b
 800a852:	bf04      	itt	eq
 800a854:	1cbd      	addeq	r5, r7, #2
 800a856:	787c      	ldrbeq	r4, [r7, #1]
 800a858:	461a      	mov	r2, r3
 800a85a:	e7c9      	b.n	800a7f0 <_strtol_l.isra.0+0x2e>
 800a85c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a860:	2b19      	cmp	r3, #25
 800a862:	d801      	bhi.n	800a868 <_strtol_l.isra.0+0xa6>
 800a864:	3c37      	subs	r4, #55	; 0x37
 800a866:	e7e2      	b.n	800a82e <_strtol_l.isra.0+0x6c>
 800a868:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a86c:	2b19      	cmp	r3, #25
 800a86e:	d804      	bhi.n	800a87a <_strtol_l.isra.0+0xb8>
 800a870:	3c57      	subs	r4, #87	; 0x57
 800a872:	e7dc      	b.n	800a82e <_strtol_l.isra.0+0x6c>
 800a874:	f04f 37ff 	mov.w	r7, #4294967295
 800a878:	e7e5      	b.n	800a846 <_strtol_l.isra.0+0x84>
 800a87a:	1c7b      	adds	r3, r7, #1
 800a87c:	d108      	bne.n	800a890 <_strtol_l.isra.0+0xce>
 800a87e:	2322      	movs	r3, #34	; 0x22
 800a880:	f8c8 3000 	str.w	r3, [r8]
 800a884:	4608      	mov	r0, r1
 800a886:	f1ba 0f00 	cmp.w	sl, #0
 800a88a:	d107      	bne.n	800a89c <_strtol_l.isra.0+0xda>
 800a88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a890:	b102      	cbz	r2, 800a894 <_strtol_l.isra.0+0xd2>
 800a892:	4240      	negs	r0, r0
 800a894:	f1ba 0f00 	cmp.w	sl, #0
 800a898:	d0f8      	beq.n	800a88c <_strtol_l.isra.0+0xca>
 800a89a:	b10f      	cbz	r7, 800a8a0 <_strtol_l.isra.0+0xde>
 800a89c:	f105 39ff 	add.w	r9, r5, #4294967295
 800a8a0:	f8ca 9000 	str.w	r9, [sl]
 800a8a4:	e7f2      	b.n	800a88c <_strtol_l.isra.0+0xca>
 800a8a6:	2430      	movs	r4, #48	; 0x30
 800a8a8:	2e00      	cmp	r6, #0
 800a8aa:	d1af      	bne.n	800a80c <_strtol_l.isra.0+0x4a>
 800a8ac:	2608      	movs	r6, #8
 800a8ae:	e7ad      	b.n	800a80c <_strtol_l.isra.0+0x4a>
 800a8b0:	2c30      	cmp	r4, #48	; 0x30
 800a8b2:	d0a3      	beq.n	800a7fc <_strtol_l.isra.0+0x3a>
 800a8b4:	260a      	movs	r6, #10
 800a8b6:	e7a9      	b.n	800a80c <_strtol_l.isra.0+0x4a>

0800a8b8 <_strtol_r>:
 800a8b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ba:	4c06      	ldr	r4, [pc, #24]	; (800a8d4 <_strtol_r+0x1c>)
 800a8bc:	4d06      	ldr	r5, [pc, #24]	; (800a8d8 <_strtol_r+0x20>)
 800a8be:	6824      	ldr	r4, [r4, #0]
 800a8c0:	6a24      	ldr	r4, [r4, #32]
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	bf08      	it	eq
 800a8c6:	462c      	moveq	r4, r5
 800a8c8:	9400      	str	r4, [sp, #0]
 800a8ca:	f7ff ff7a 	bl	800a7c2 <_strtol_l.isra.0>
 800a8ce:	b003      	add	sp, #12
 800a8d0:	bd30      	pop	{r4, r5, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000278 	.word	0x20000278
 800a8d8:	200002dc 	.word	0x200002dc

0800a8dc <_strtoul_l.isra.0>:
 800a8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	4689      	mov	r9, r1
 800a8e4:	4692      	mov	sl, r2
 800a8e6:	461e      	mov	r6, r3
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	463d      	mov	r5, r7
 800a8ec:	9808      	ldr	r0, [sp, #32]
 800a8ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8f2:	f000 f96f 	bl	800abd4 <__locale_ctype_ptr_l>
 800a8f6:	4420      	add	r0, r4
 800a8f8:	7843      	ldrb	r3, [r0, #1]
 800a8fa:	f013 0308 	ands.w	r3, r3, #8
 800a8fe:	d130      	bne.n	800a962 <_strtoul_l.isra.0+0x86>
 800a900:	2c2d      	cmp	r4, #45	; 0x2d
 800a902:	d130      	bne.n	800a966 <_strtoul_l.isra.0+0x8a>
 800a904:	787c      	ldrb	r4, [r7, #1]
 800a906:	1cbd      	adds	r5, r7, #2
 800a908:	2101      	movs	r1, #1
 800a90a:	2e00      	cmp	r6, #0
 800a90c:	d05c      	beq.n	800a9c8 <_strtoul_l.isra.0+0xec>
 800a90e:	2e10      	cmp	r6, #16
 800a910:	d109      	bne.n	800a926 <_strtoul_l.isra.0+0x4a>
 800a912:	2c30      	cmp	r4, #48	; 0x30
 800a914:	d107      	bne.n	800a926 <_strtoul_l.isra.0+0x4a>
 800a916:	782b      	ldrb	r3, [r5, #0]
 800a918:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a91c:	2b58      	cmp	r3, #88	; 0x58
 800a91e:	d14e      	bne.n	800a9be <_strtoul_l.isra.0+0xe2>
 800a920:	786c      	ldrb	r4, [r5, #1]
 800a922:	2610      	movs	r6, #16
 800a924:	3502      	adds	r5, #2
 800a926:	f04f 32ff 	mov.w	r2, #4294967295
 800a92a:	2300      	movs	r3, #0
 800a92c:	fbb2 f2f6 	udiv	r2, r2, r6
 800a930:	fb06 fc02 	mul.w	ip, r6, r2
 800a934:	ea6f 0c0c 	mvn.w	ip, ip
 800a938:	4618      	mov	r0, r3
 800a93a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a93e:	2f09      	cmp	r7, #9
 800a940:	d817      	bhi.n	800a972 <_strtoul_l.isra.0+0x96>
 800a942:	463c      	mov	r4, r7
 800a944:	42a6      	cmp	r6, r4
 800a946:	dd23      	ble.n	800a990 <_strtoul_l.isra.0+0xb4>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	db1e      	blt.n	800a98a <_strtoul_l.isra.0+0xae>
 800a94c:	4282      	cmp	r2, r0
 800a94e:	d31c      	bcc.n	800a98a <_strtoul_l.isra.0+0xae>
 800a950:	d101      	bne.n	800a956 <_strtoul_l.isra.0+0x7a>
 800a952:	45a4      	cmp	ip, r4
 800a954:	db19      	blt.n	800a98a <_strtoul_l.isra.0+0xae>
 800a956:	fb00 4006 	mla	r0, r0, r6, r4
 800a95a:	2301      	movs	r3, #1
 800a95c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a960:	e7eb      	b.n	800a93a <_strtoul_l.isra.0+0x5e>
 800a962:	462f      	mov	r7, r5
 800a964:	e7c1      	b.n	800a8ea <_strtoul_l.isra.0+0xe>
 800a966:	2c2b      	cmp	r4, #43	; 0x2b
 800a968:	bf04      	itt	eq
 800a96a:	1cbd      	addeq	r5, r7, #2
 800a96c:	787c      	ldrbeq	r4, [r7, #1]
 800a96e:	4619      	mov	r1, r3
 800a970:	e7cb      	b.n	800a90a <_strtoul_l.isra.0+0x2e>
 800a972:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a976:	2f19      	cmp	r7, #25
 800a978:	d801      	bhi.n	800a97e <_strtoul_l.isra.0+0xa2>
 800a97a:	3c37      	subs	r4, #55	; 0x37
 800a97c:	e7e2      	b.n	800a944 <_strtoul_l.isra.0+0x68>
 800a97e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a982:	2f19      	cmp	r7, #25
 800a984:	d804      	bhi.n	800a990 <_strtoul_l.isra.0+0xb4>
 800a986:	3c57      	subs	r4, #87	; 0x57
 800a988:	e7dc      	b.n	800a944 <_strtoul_l.isra.0+0x68>
 800a98a:	f04f 33ff 	mov.w	r3, #4294967295
 800a98e:	e7e5      	b.n	800a95c <_strtoul_l.isra.0+0x80>
 800a990:	2b00      	cmp	r3, #0
 800a992:	da09      	bge.n	800a9a8 <_strtoul_l.isra.0+0xcc>
 800a994:	2322      	movs	r3, #34	; 0x22
 800a996:	f8c8 3000 	str.w	r3, [r8]
 800a99a:	f04f 30ff 	mov.w	r0, #4294967295
 800a99e:	f1ba 0f00 	cmp.w	sl, #0
 800a9a2:	d107      	bne.n	800a9b4 <_strtoul_l.isra.0+0xd8>
 800a9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a8:	b101      	cbz	r1, 800a9ac <_strtoul_l.isra.0+0xd0>
 800a9aa:	4240      	negs	r0, r0
 800a9ac:	f1ba 0f00 	cmp.w	sl, #0
 800a9b0:	d0f8      	beq.n	800a9a4 <_strtoul_l.isra.0+0xc8>
 800a9b2:	b10b      	cbz	r3, 800a9b8 <_strtoul_l.isra.0+0xdc>
 800a9b4:	f105 39ff 	add.w	r9, r5, #4294967295
 800a9b8:	f8ca 9000 	str.w	r9, [sl]
 800a9bc:	e7f2      	b.n	800a9a4 <_strtoul_l.isra.0+0xc8>
 800a9be:	2430      	movs	r4, #48	; 0x30
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	d1b0      	bne.n	800a926 <_strtoul_l.isra.0+0x4a>
 800a9c4:	2608      	movs	r6, #8
 800a9c6:	e7ae      	b.n	800a926 <_strtoul_l.isra.0+0x4a>
 800a9c8:	2c30      	cmp	r4, #48	; 0x30
 800a9ca:	d0a4      	beq.n	800a916 <_strtoul_l.isra.0+0x3a>
 800a9cc:	260a      	movs	r6, #10
 800a9ce:	e7aa      	b.n	800a926 <_strtoul_l.isra.0+0x4a>

0800a9d0 <_strtoul_r>:
 800a9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9d2:	4c06      	ldr	r4, [pc, #24]	; (800a9ec <_strtoul_r+0x1c>)
 800a9d4:	4d06      	ldr	r5, [pc, #24]	; (800a9f0 <_strtoul_r+0x20>)
 800a9d6:	6824      	ldr	r4, [r4, #0]
 800a9d8:	6a24      	ldr	r4, [r4, #32]
 800a9da:	2c00      	cmp	r4, #0
 800a9dc:	bf08      	it	eq
 800a9de:	462c      	moveq	r4, r5
 800a9e0:	9400      	str	r4, [sp, #0]
 800a9e2:	f7ff ff7b 	bl	800a8dc <_strtoul_l.isra.0>
 800a9e6:	b003      	add	sp, #12
 800a9e8:	bd30      	pop	{r4, r5, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000278 	.word	0x20000278
 800a9f0:	200002dc 	.word	0x200002dc

0800a9f4 <__submore>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a9fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa00:	4299      	cmp	r1, r3
 800aa02:	d11d      	bne.n	800aa40 <__submore+0x4c>
 800aa04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aa08:	f7fe fbbe 	bl	8009188 <_malloc_r>
 800aa0c:	b918      	cbnz	r0, 800aa16 <__submore+0x22>
 800aa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa1a:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aa20:	6360      	str	r0, [r4, #52]	; 0x34
 800aa22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aa26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aa2a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800aa2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aa32:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aa36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aa3a:	6020      	str	r0, [r4, #0]
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	e7e8      	b.n	800aa12 <__submore+0x1e>
 800aa40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aa42:	0077      	lsls	r7, r6, #1
 800aa44:	463a      	mov	r2, r7
 800aa46:	f000 f906 	bl	800ac56 <_realloc_r>
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d0de      	beq.n	800aa0e <__submore+0x1a>
 800aa50:	eb00 0806 	add.w	r8, r0, r6
 800aa54:	4601      	mov	r1, r0
 800aa56:	4632      	mov	r2, r6
 800aa58:	4640      	mov	r0, r8
 800aa5a:	f000 f8f1 	bl	800ac40 <memcpy>
 800aa5e:	f8c4 8000 	str.w	r8, [r4]
 800aa62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aa66:	e7e9      	b.n	800aa3c <__submore+0x48>

0800aa68 <_ungetc_r>:
 800aa68:	1c4b      	adds	r3, r1, #1
 800aa6a:	b570      	push	{r4, r5, r6, lr}
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	4614      	mov	r4, r2
 800aa72:	d103      	bne.n	800aa7c <_ungetc_r+0x14>
 800aa74:	f04f 35ff 	mov.w	r5, #4294967295
 800aa78:	4628      	mov	r0, r5
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	b118      	cbz	r0, 800aa86 <_ungetc_r+0x1e>
 800aa7e:	6983      	ldr	r3, [r0, #24]
 800aa80:	b90b      	cbnz	r3, 800aa86 <_ungetc_r+0x1e>
 800aa82:	f7fe feef 	bl	8009864 <__sinit>
 800aa86:	4b2e      	ldr	r3, [pc, #184]	; (800ab40 <_ungetc_r+0xd8>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	d12c      	bne.n	800aae6 <_ungetc_r+0x7e>
 800aa8c:	6874      	ldr	r4, [r6, #4]
 800aa8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa92:	f023 0320 	bic.w	r3, r3, #32
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	0759      	lsls	r1, r3, #29
 800aa9c:	d413      	bmi.n	800aac6 <_ungetc_r+0x5e>
 800aa9e:	06da      	lsls	r2, r3, #27
 800aaa0:	d5e8      	bpl.n	800aa74 <_ungetc_r+0xc>
 800aaa2:	071b      	lsls	r3, r3, #28
 800aaa4:	d50b      	bpl.n	800aabe <_ungetc_r+0x56>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7fe fe5f 	bl	800976c <_fflush_r>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d1e0      	bne.n	800aa74 <_ungetc_r+0xc>
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	60a0      	str	r0, [r4, #8]
 800aab6:	f023 0308 	bic.w	r3, r3, #8
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	61a0      	str	r0, [r4, #24]
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f043 0304 	orr.w	r3, r3, #4
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aac8:	6862      	ldr	r2, [r4, #4]
 800aaca:	b2ed      	uxtb	r5, r5
 800aacc:	b1e3      	cbz	r3, 800ab08 <_ungetc_r+0xa0>
 800aace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aad0:	4293      	cmp	r3, r2
 800aad2:	dd12      	ble.n	800aafa <_ungetc_r+0x92>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	1e5a      	subs	r2, r3, #1
 800aad8:	6022      	str	r2, [r4, #0]
 800aada:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	3301      	adds	r3, #1
 800aae2:	6063      	str	r3, [r4, #4]
 800aae4:	e7c8      	b.n	800aa78 <_ungetc_r+0x10>
 800aae6:	4b17      	ldr	r3, [pc, #92]	; (800ab44 <_ungetc_r+0xdc>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	d101      	bne.n	800aaf0 <_ungetc_r+0x88>
 800aaec:	68b4      	ldr	r4, [r6, #8]
 800aaee:	e7ce      	b.n	800aa8e <_ungetc_r+0x26>
 800aaf0:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <_ungetc_r+0xe0>)
 800aaf2:	429c      	cmp	r4, r3
 800aaf4:	bf08      	it	eq
 800aaf6:	68f4      	ldreq	r4, [r6, #12]
 800aaf8:	e7c9      	b.n	800aa8e <_ungetc_r+0x26>
 800aafa:	4621      	mov	r1, r4
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff ff79 	bl	800a9f4 <__submore>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0e6      	beq.n	800aad4 <_ungetc_r+0x6c>
 800ab06:	e7b5      	b.n	800aa74 <_ungetc_r+0xc>
 800ab08:	6921      	ldr	r1, [r4, #16]
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	b151      	cbz	r1, 800ab24 <_ungetc_r+0xbc>
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	d208      	bcs.n	800ab24 <_ungetc_r+0xbc>
 800ab12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ab16:	42a9      	cmp	r1, r5
 800ab18:	d104      	bne.n	800ab24 <_ungetc_r+0xbc>
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	3201      	adds	r2, #1
 800ab1e:	6023      	str	r3, [r4, #0]
 800ab20:	6062      	str	r2, [r4, #4]
 800ab22:	e7a9      	b.n	800aa78 <_ungetc_r+0x10>
 800ab24:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ab28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab2c:	6363      	str	r3, [r4, #52]	; 0x34
 800ab2e:	2303      	movs	r3, #3
 800ab30:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab32:	4623      	mov	r3, r4
 800ab34:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e7d1      	b.n	800aae2 <_ungetc_r+0x7a>
 800ab3e:	bf00      	nop
 800ab40:	0800b43c 	.word	0x0800b43c
 800ab44:	0800b45c 	.word	0x0800b45c
 800ab48:	0800b41c 	.word	0x0800b41c

0800ab4c <_write_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4c07      	ldr	r4, [pc, #28]	; (800ab6c <_write_r+0x20>)
 800ab50:	4605      	mov	r5, r0
 800ab52:	4608      	mov	r0, r1
 800ab54:	4611      	mov	r1, r2
 800ab56:	2200      	movs	r2, #0
 800ab58:	6022      	str	r2, [r4, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f7f7 fbdc 	bl	8002318 <_write>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_write_r+0x1e>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_write_r+0x1e>
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	20000760 	.word	0x20000760

0800ab70 <_close_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4c06      	ldr	r4, [pc, #24]	; (800ab8c <_close_r+0x1c>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4605      	mov	r5, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	f7f7 fbf8 	bl	8002370 <_close>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_close_r+0x1a>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_close_r+0x1a>
 800ab88:	602b      	str	r3, [r5, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	20000760 	.word	0x20000760

0800ab90 <_fstat_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4c07      	ldr	r4, [pc, #28]	; (800abb0 <_fstat_r+0x20>)
 800ab94:	2300      	movs	r3, #0
 800ab96:	4605      	mov	r5, r0
 800ab98:	4608      	mov	r0, r1
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	f7f7 fc37 	bl	8002410 <_fstat>
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	d102      	bne.n	800abac <_fstat_r+0x1c>
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	b103      	cbz	r3, 800abac <_fstat_r+0x1c>
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	bd38      	pop	{r3, r4, r5, pc}
 800abae:	bf00      	nop
 800abb0:	20000760 	.word	0x20000760

0800abb4 <_isatty_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4c06      	ldr	r4, [pc, #24]	; (800abd0 <_isatty_r+0x1c>)
 800abb8:	2300      	movs	r3, #0
 800abba:	4605      	mov	r5, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	f7f7 fb94 	bl	80022ec <_isatty>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d102      	bne.n	800abce <_isatty_r+0x1a>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	b103      	cbz	r3, 800abce <_isatty_r+0x1a>
 800abcc:	602b      	str	r3, [r5, #0]
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	20000760 	.word	0x20000760

0800abd4 <__locale_ctype_ptr_l>:
 800abd4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800abd8:	4770      	bx	lr
	...

0800abdc <__locale_ctype_ptr>:
 800abdc:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <__locale_ctype_ptr+0x14>)
 800abde:	4a05      	ldr	r2, [pc, #20]	; (800abf4 <__locale_ctype_ptr+0x18>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bf08      	it	eq
 800abe8:	4613      	moveq	r3, r2
 800abea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800abee:	4770      	bx	lr
 800abf0:	20000278 	.word	0x20000278
 800abf4:	200002dc 	.word	0x200002dc

0800abf8 <_lseek_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4c07      	ldr	r4, [pc, #28]	; (800ac18 <_lseek_r+0x20>)
 800abfc:	4605      	mov	r5, r0
 800abfe:	4608      	mov	r0, r1
 800ac00:	4611      	mov	r1, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	6022      	str	r2, [r4, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f7f7 fbc9 	bl	800239e <_lseek>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_lseek_r+0x1e>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_lseek_r+0x1e>
 800ac14:	602b      	str	r3, [r5, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	20000760 	.word	0x20000760

0800ac1c <__ascii_mbtowc>:
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	b901      	cbnz	r1, 800ac22 <__ascii_mbtowc+0x6>
 800ac20:	a901      	add	r1, sp, #4
 800ac22:	b142      	cbz	r2, 800ac36 <__ascii_mbtowc+0x1a>
 800ac24:	b14b      	cbz	r3, 800ac3a <__ascii_mbtowc+0x1e>
 800ac26:	7813      	ldrb	r3, [r2, #0]
 800ac28:	600b      	str	r3, [r1, #0]
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	1c10      	adds	r0, r2, #0
 800ac2e:	bf18      	it	ne
 800ac30:	2001      	movne	r0, #1
 800ac32:	b002      	add	sp, #8
 800ac34:	4770      	bx	lr
 800ac36:	4610      	mov	r0, r2
 800ac38:	e7fb      	b.n	800ac32 <__ascii_mbtowc+0x16>
 800ac3a:	f06f 0001 	mvn.w	r0, #1
 800ac3e:	e7f8      	b.n	800ac32 <__ascii_mbtowc+0x16>

0800ac40 <memcpy>:
 800ac40:	b510      	push	{r4, lr}
 800ac42:	1e43      	subs	r3, r0, #1
 800ac44:	440a      	add	r2, r1
 800ac46:	4291      	cmp	r1, r2
 800ac48:	d100      	bne.n	800ac4c <memcpy+0xc>
 800ac4a:	bd10      	pop	{r4, pc}
 800ac4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac54:	e7f7      	b.n	800ac46 <memcpy+0x6>

0800ac56 <_realloc_r>:
 800ac56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac58:	4607      	mov	r7, r0
 800ac5a:	4614      	mov	r4, r2
 800ac5c:	460e      	mov	r6, r1
 800ac5e:	b921      	cbnz	r1, 800ac6a <_realloc_r+0x14>
 800ac60:	4611      	mov	r1, r2
 800ac62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac66:	f7fe ba8f 	b.w	8009188 <_malloc_r>
 800ac6a:	b922      	cbnz	r2, 800ac76 <_realloc_r+0x20>
 800ac6c:	f7fe fa3e 	bl	80090ec <_free_r>
 800ac70:	4625      	mov	r5, r4
 800ac72:	4628      	mov	r0, r5
 800ac74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac76:	f000 f834 	bl	800ace2 <_malloc_usable_size_r>
 800ac7a:	42a0      	cmp	r0, r4
 800ac7c:	d20f      	bcs.n	800ac9e <_realloc_r+0x48>
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7fe fa81 	bl	8009188 <_malloc_r>
 800ac86:	4605      	mov	r5, r0
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d0f2      	beq.n	800ac72 <_realloc_r+0x1c>
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4622      	mov	r2, r4
 800ac90:	f7ff ffd6 	bl	800ac40 <memcpy>
 800ac94:	4631      	mov	r1, r6
 800ac96:	4638      	mov	r0, r7
 800ac98:	f7fe fa28 	bl	80090ec <_free_r>
 800ac9c:	e7e9      	b.n	800ac72 <_realloc_r+0x1c>
 800ac9e:	4635      	mov	r5, r6
 800aca0:	e7e7      	b.n	800ac72 <_realloc_r+0x1c>
	...

0800aca4 <_read_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4c07      	ldr	r4, [pc, #28]	; (800acc4 <_read_r+0x20>)
 800aca8:	4605      	mov	r5, r0
 800acaa:	4608      	mov	r0, r1
 800acac:	4611      	mov	r1, r2
 800acae:	2200      	movs	r2, #0
 800acb0:	6022      	str	r2, [r4, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	f7f7 fb84 	bl	80023c0 <_read>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_read_r+0x1e>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_read_r+0x1e>
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	20000760 	.word	0x20000760

0800acc8 <__ascii_wctomb>:
 800acc8:	b149      	cbz	r1, 800acde <__ascii_wctomb+0x16>
 800acca:	2aff      	cmp	r2, #255	; 0xff
 800accc:	bf85      	ittet	hi
 800acce:	238a      	movhi	r3, #138	; 0x8a
 800acd0:	6003      	strhi	r3, [r0, #0]
 800acd2:	700a      	strbls	r2, [r1, #0]
 800acd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800acd8:	bf98      	it	ls
 800acda:	2001      	movls	r0, #1
 800acdc:	4770      	bx	lr
 800acde:	4608      	mov	r0, r1
 800ace0:	4770      	bx	lr

0800ace2 <_malloc_usable_size_r>:
 800ace2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace6:	1f18      	subs	r0, r3, #4
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfbc      	itt	lt
 800acec:	580b      	ldrlt	r3, [r1, r0]
 800acee:	18c0      	addlt	r0, r0, r3
 800acf0:	4770      	bx	lr
	...

0800acf4 <round>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	ec57 6b10 	vmov	r6, r7, d0
 800acfa:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800acfe:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800ad02:	2c13      	cmp	r4, #19
 800ad04:	463b      	mov	r3, r7
 800ad06:	463d      	mov	r5, r7
 800ad08:	dc17      	bgt.n	800ad3a <round+0x46>
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	da09      	bge.n	800ad22 <round+0x2e>
 800ad0e:	3401      	adds	r4, #1
 800ad10:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800ad14:	d103      	bne.n	800ad1e <round+0x2a>
 800ad16:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ad1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad1e:	2100      	movs	r1, #0
 800ad20:	e02c      	b.n	800ad7c <round+0x88>
 800ad22:	4a18      	ldr	r2, [pc, #96]	; (800ad84 <round+0x90>)
 800ad24:	4122      	asrs	r2, r4
 800ad26:	4217      	tst	r7, r2
 800ad28:	d100      	bne.n	800ad2c <round+0x38>
 800ad2a:	b19e      	cbz	r6, 800ad54 <round+0x60>
 800ad2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad30:	4123      	asrs	r3, r4
 800ad32:	442b      	add	r3, r5
 800ad34:	ea23 0302 	bic.w	r3, r3, r2
 800ad38:	e7f1      	b.n	800ad1e <round+0x2a>
 800ad3a:	2c33      	cmp	r4, #51	; 0x33
 800ad3c:	dd0d      	ble.n	800ad5a <round+0x66>
 800ad3e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ad42:	d107      	bne.n	800ad54 <round+0x60>
 800ad44:	4630      	mov	r0, r6
 800ad46:	4639      	mov	r1, r7
 800ad48:	ee10 2a10 	vmov	r2, s0
 800ad4c:	f7f5 fa9e 	bl	800028c <__adddf3>
 800ad50:	4606      	mov	r6, r0
 800ad52:	460f      	mov	r7, r1
 800ad54:	ec47 6b10 	vmov	d0, r6, r7
 800ad58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad5a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800ad5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad62:	40d0      	lsrs	r0, r2
 800ad64:	4206      	tst	r6, r0
 800ad66:	d0f5      	beq.n	800ad54 <round+0x60>
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ad6e:	fa02 f404 	lsl.w	r4, r2, r4
 800ad72:	1931      	adds	r1, r6, r4
 800ad74:	bf28      	it	cs
 800ad76:	189b      	addcs	r3, r3, r2
 800ad78:	ea21 0100 	bic.w	r1, r1, r0
 800ad7c:	461f      	mov	r7, r3
 800ad7e:	460e      	mov	r6, r1
 800ad80:	e7e8      	b.n	800ad54 <round+0x60>
 800ad82:	bf00      	nop
 800ad84:	000fffff 	.word	0x000fffff

0800ad88 <_init>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr

0800ad94 <_fini>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr
