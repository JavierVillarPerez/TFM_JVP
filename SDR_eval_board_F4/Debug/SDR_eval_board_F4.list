
SDR_eval_board_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e04  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800816c  0800816c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800816c  0800816c  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008174  08008174  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008178  08008178  00018178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800817c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001e0  0800835c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800835c  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021efb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b31  00000000  00000000  0004210b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b70  00000000  00000000  00046c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001948  00000000  00000000  000487b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c6dc  00000000  00000000  0004a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e57  00000000  00000000  000667d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a109b  00000000  00000000  0007b62b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c6c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007358  00000000  00000000  0011c744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e0 	.word	0x200001e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f84 	.word	0x08007f84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e4 	.word	0x200001e4
 80001d4:	08007f84 	.word	0x08007f84

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b972 	b.w	8000dc0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	4688      	mov	r8, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14b      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4615      	mov	r5, r2
 8000b06:	d967      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0720 	rsb	r7, r2, #32
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	ea47 0803 	orr.w	r8, r7, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b2c:	fa1f fc85 	uxth.w	ip, r5
 8000b30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b38:	fb07 f10c 	mul.w	r1, r7, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b46:	f080 811b 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8118 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b50:	3f02      	subs	r7, #2
 8000b52:	442b      	add	r3, r5
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b68:	45a4      	cmp	ip, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8107 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	f240 8104 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	442c      	add	r4, r5
 8000b80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b84:	eba4 040c 	sub.w	r4, r4, ip
 8000b88:	2700      	movs	r7, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xbe>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80eb 	beq.w	8000d7a <__udivmoddi4+0x286>
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e9c6 0100 	strd	r0, r1, [r6]
 8000baa:	4638      	mov	r0, r7
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f783 	clz	r7, r3
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d147      	bne.n	8000c4a <__udivmoddi4+0x156>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd0>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80fa 	bhi.w	8000db8 <__udivmoddi4+0x2c4>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000bd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xe8>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 808f 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be6:	1b49      	subs	r1, r1, r5
 8000be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bec:	fa1f f885 	uxth.w	r8, r5
 8000bf0:	2701      	movs	r7, #1
 8000bf2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb08 f10c 	mul.w	r1, r8, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4299      	cmp	r1, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x14c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x14a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80b6 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e79f      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4e:	40bb      	lsls	r3, r7
 8000c50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c58:	fa01 f407 	lsl.w	r4, r1, r7
 8000c5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c68:	4325      	orrs	r5, r4
 8000c6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6e:	0c2c      	lsrs	r4, r5, #16
 8000c70:	fb08 3319 	mls	r3, r8, r9, r3
 8000c74:	fa1f fa8e 	uxth.w	sl, lr
 8000c78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c80:	429c      	cmp	r4, r3
 8000c82:	fa02 f207 	lsl.w	r2, r2, r7
 8000c86:	fa00 f107 	lsl.w	r1, r0, r7
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c94:	f080 8087 	bcs.w	8000da6 <__udivmoddi4+0x2b2>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f240 8084 	bls.w	8000da6 <__udivmoddi4+0x2b2>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4473      	add	r3, lr
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb8:	45a2      	cmp	sl, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	d26b      	bcs.n	8000d9e <__udivmoddi4+0x2aa>
 8000cc6:	45a2      	cmp	sl, r4
 8000cc8:	d969      	bls.n	8000d9e <__udivmoddi4+0x2aa>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4474      	add	r4, lr
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd6:	eba4 040a 	sub.w	r4, r4, sl
 8000cda:	454c      	cmp	r4, r9
 8000cdc:	46c2      	mov	sl, r8
 8000cde:	464b      	mov	r3, r9
 8000ce0:	d354      	bcc.n	8000d8c <__udivmoddi4+0x298>
 8000ce2:	d051      	beq.n	8000d88 <__udivmoddi4+0x294>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d069      	beq.n	8000dbc <__udivmoddi4+0x2c8>
 8000ce8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cec:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	40fc      	lsrs	r4, r7
 8000cf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000d00:	2700      	movs	r7, #0
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f703 	lsr.w	r7, r0, r3
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	4338      	orrs	r0, r7
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d22:	fa1f f885 	uxth.w	r8, r5
 8000d26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2e:	fb07 f308 	mul.w	r3, r7, r8
 8000d32:	428b      	cmp	r3, r1
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x256>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d40:	d22f      	bcs.n	8000da2 <__udivmoddi4+0x2ae>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d92d      	bls.n	8000da2 <__udivmoddi4+0x2ae>
 8000d46:	3f02      	subs	r7, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	b281      	uxth	r1, r0
 8000d4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb00 f308 	mul.w	r3, r0, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x27e>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d68:	d217      	bcs.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d915      	bls.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1ac9      	subs	r1, r1, r3
 8000d74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d78:	e73b      	b.n	8000bf2 <__udivmoddi4+0xfe>
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e709      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d80:	4607      	mov	r7, r0
 8000d82:	e6e7      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d84:	4618      	mov	r0, r3
 8000d86:	e6fb      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d88:	4541      	cmp	r1, r8
 8000d8a:	d2ab      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d90:	eb69 020e 	sbc.w	r2, r9, lr
 8000d94:	3801      	subs	r0, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	e7a4      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9a:	4660      	mov	r0, ip
 8000d9c:	e7e9      	b.n	8000d72 <__udivmoddi4+0x27e>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	e795      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da2:	4667      	mov	r7, ip
 8000da4:	e7d1      	b.n	8000d4a <__udivmoddi4+0x256>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e77c      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000daa:	3802      	subs	r0, #2
 8000dac:	442c      	add	r4, r5
 8000dae:	e747      	b.n	8000c40 <__udivmoddi4+0x14c>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	e72f      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db8:	4638      	mov	r0, r7
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xda>
 8000dbc:	4637      	mov	r7, r6
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0xa0>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000dcc:	2008      	movs	r0, #8
 8000dce:	f007 f813 	bl	8007df8 <malloc>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 f805 	bl	8000de8 <fsm_init>
  return this;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e01c      	b.n	8000e56 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d113      	bne.n	8000e50 <fsm_fire+0x44>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00c      	beq.n	8000e50 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <fsm_fire+0x54>
        t->out(this);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
      break;
 8000e4e:	e007      	b.n	8000e60 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3310      	adds	r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dade      	bge.n	8000e1c <fsm_fire+0x10>
    }
  }
}
 8000e5e:	e000      	b.n	8000e62 <fsm_fire+0x56>
      break;
 8000e60:	bf00      	nop
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f004 fa72 	bl	8005358 <HAL_Init>

  /* USER CODE BEGIN Init */
  Clock_Enable();
 8000e74:	f000 f9d8 	bl	8001228 <Clock_Enable>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f81c 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 f930 	bl	80010e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e80:	f000 f904 	bl	800108c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e84:	f000 f880 	bl	8000f88 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e88:	f000 f8b4 	bl	8000ff4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize LEDs*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  RadioShieldLedInit(RADIO_SHIELD_LED);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f003 fe41 	bl	8004b14 <RadioShieldLedInit>
#endif
  BSP_LED_Init(LED2);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f003 fd28 	bl	80048e8 <BSP_LED_Init>
  HAL_Radio_Init();
 8000e98:	f000 fc04 	bl	80016a4 <HAL_Radio_Init>
  P2P_Init();
 8000e9c:	f000 fca6 	bl	80017ec <P2P_Init>
  HAL_TIM_OC_Start_IT(&htim2,0);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <main+0x44>)
 8000ea4:	f005 ff88 	bl	8006db8 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	P2P_Process();
 8000ea8:	f000 fc0c 	bl	80016c4 <P2P_Process>
 8000eac:	e7fc      	b.n	8000ea8 <main+0x3c>
 8000eae:	bf00      	nop
 8000eb0:	20000354 	.word	0x20000354

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2230      	movs	r2, #48	; 0x30
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f006 ffa0 	bl	8007e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <SystemClock_Config+0xcc>)
 8000ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <SystemClock_Config+0xcc>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <SystemClock_Config+0xd0>)
 8000f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <SystemClock_Config+0xd0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000f2c:	2378      	movs	r3, #120	; 0x78
 8000f2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000f30:	2306      	movs	r3, #6
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f34:	2304      	movs	r3, #4
 8000f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fe91 	bl	8005c64 <HAL_RCC_OscConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f48:	f000 f9e4 	bl	8001314 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f50:	2302      	movs	r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2101      	movs	r1, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 f8ec 	bl	8006144 <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f72:	f000 f9cf 	bl	8001314 <Error_Handler>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3750      	adds	r7, #80	; 0x50
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000

08000f88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_SPI1_Init+0x64>)
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <MX_SPI1_Init+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_SPI1_Init+0x64>)
 8000f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_SPI1_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fda:	f005 faa5 	bl	8006528 <HAL_SPI_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe4:	f000 f996 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002fc 	.word	0x200002fc
 8000ff0:	40013000 	.word	0x40013000

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM2_Init+0x94>)
 8001012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM2_Init+0x94>)
 800101a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_TIM2_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM2_Init+0x94>)
 8001028:	2263      	movs	r2, #99	; 0x63
 800102a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_TIM2_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM2_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_TIM2_Init+0x94>)
 800103a:	f005 fe91 	bl	8006d60 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001044:	f000 f966 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM2_Init+0x94>)
 8001056:	f006 f82f 	bl	80070b8 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 f958 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM2_Init+0x94>)
 8001072:	f006 fa4b 	bl	800750c <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 f94a 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000354 	.word	0x20000354

0800108c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_USART2_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010c4:	f006 faa4 	bl	8007610 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f921 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000394 	.word	0x20000394
 80010dc:	40004400 	.word	0x40004400

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b46      	ldr	r3, [pc, #280]	; (8001214 <MX_GPIO_Init+0x134>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a45      	ldr	r2, [pc, #276]	; (8001214 <MX_GPIO_Init+0x134>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b43      	ldr	r3, [pc, #268]	; (8001214 <MX_GPIO_Init+0x134>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <MX_GPIO_Init+0x134>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <MX_GPIO_Init+0x134>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <MX_GPIO_Init+0x134>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <MX_GPIO_Init+0x134>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a37      	ldr	r2, [pc, #220]	; (8001214 <MX_GPIO_Init+0x134>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_GPIO_Init+0x134>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <MX_GPIO_Init+0x134>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <MX_GPIO_Init+0x134>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <MX_GPIO_Init+0x134>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NUCLEO_LED1_PIN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800116c:	482a      	ldr	r0, [pc, #168]	; (8001218 <MX_GPIO_Init+0x138>)
 800116e:	f004 fd2d 	bl	8005bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_S_CS_Pin|SPI1_H_CS_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2160      	movs	r1, #96	; 0x60
 8001176:	4829      	ldr	r0, [pc, #164]	; (800121c <MX_GPIO_Init+0x13c>)
 8001178:	f004 fd28 	bl	8005bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_Pin PC7 */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|GPIO_PIN_7;
 800117c:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <MX_GPIO_Init+0x140>)
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4824      	ldr	r0, [pc, #144]	; (8001224 <MX_GPIO_Init+0x144>)
 8001192:	f004 fab7 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pin : NUCLEO_LED1_PIN_Pin */
  GPIO_InitStruct.Pin = NUCLEO_LED1_PIN_Pin;
 8001196:	2320      	movs	r3, #32
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NUCLEO_LED1_PIN_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <MX_GPIO_Init+0x138>)
 80011ae:	f004 faa9 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <MX_GPIO_Init+0x138>)
 80011cc:	f004 fa9a 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_S_CS_Pin SPI1_H_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_S_CS_Pin|SPI1_H_CS_Pin;
 80011d0:	2360      	movs	r3, #96	; 0x60
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_GPIO_Init+0x13c>)
 80011e8:	f004 fa8c 	bl	8005704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2017      	movs	r0, #23
 80011f2:	f004 fa42 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011f6:	2017      	movs	r0, #23
 80011f8:	f004 fa5b 	bl	80056b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2028      	movs	r0, #40	; 0x28
 8001202:	f004 fa3a 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001206:	2028      	movs	r0, #40	; 0x28
 8001208:	f004 fa53 	bl	80056b2 <HAL_NVIC_EnableIRQ>

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	10210000 	.word	0x10210000
 8001224:	40020800 	.word	0x40020800

08001228 <Clock_Enable>:

/* USER CODE BEGIN 4 */
void Clock_Enable(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
  __GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <Clock_Enable+0x84>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <Clock_Enable+0x84>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <Clock_Enable+0x84>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <Clock_Enable+0x84>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <Clock_Enable+0x84>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <Clock_Enable+0x84>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <Clock_Enable+0x84>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <Clock_Enable+0x84>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <Clock_Enable+0x84>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __GPIOD_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <Clock_Enable+0x84>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <Clock_Enable+0x84>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <Clock_Enable+0x84>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <handle_TIM2>:

void handle_TIM2(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	Rx_count++;
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <handle_TIM2+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <handle_TIM2+0x18>)
 80012bc:	6013      	str	r3, [r2, #0]
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	200003d4 	.word	0x200003d4

080012cc <check_Rx_count>:

FlagStatus check_Rx_count(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
	FlagStatus retval = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]
	if(Rx_count >= 100) //Debug value 100 for 10 secs. Final value 10000 for 10 secs.
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <check_Rx_count+0x2c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b63      	cmp	r3, #99	; 0x63
 80012dc:	d904      	bls.n	80012e8 <check_Rx_count+0x1c>
	{
		retval = SET;
 80012de:	2301      	movs	r3, #1
 80012e0:	71fb      	strb	r3, [r7, #7]
		Rx_count = 0;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <check_Rx_count+0x2c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
	}
	return retval;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200003d4 	.word	0x200003d4

080012fc <reset_RX_count>:

void reset_RX_count(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	Rx_count = 0;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <reset_RX_count+0x14>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	200003d4 	.word	0x200003d4

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <time_out_rx>:

radio_select_t selectedBand;

/* Private function prototypes -----------------------------------------------*/
static int time_out_rx(fsm_t* this)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

	return ((Spirit1_RX_timeout)||(check_Rx_count()));
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <time_out_rx+0x2c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <time_out_rx+0x1c>
 8001336:	f7ff ffc9 	bl	80012cc <check_Rx_count>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <time_out_rx+0x20>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <time_out_rx+0x22>
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000262 	.word	0x20000262

08001354 <tx_flag>:

static int tx_flag(fsm_t* this)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	return tx_value;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <tx_flag+0x18>)
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000263 	.word	0x20000263

08001370 <rx_flag>:

static int rx_flag(fsm_t* this)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	return xRxDoneFlag;
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <rx_flag+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000260 	.word	0x20000260

08001390 <data_received>:


static int data_received(fsm_t* this)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if(xRxFrame.Cmd == LED_TOGGLE) return 1;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <data_received+0x24>)
 800139a:	78db      	ldrb	r3, [r3, #3]
 800139c:	2bff      	cmp	r3, #255	; 0xff
 800139e:	d101      	bne.n	80013a4 <data_received+0x14>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <data_received+0x16>
	else return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000270 	.word	0x20000270

080013b8 <ack_received>:

static int ack_received(fsm_t* this)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    if(xRxFrame.Cmd == ACK_OK) return 1;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <ack_received+0x24>)
 80013c2:	78db      	ldrb	r3, [r3, #3]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <ack_received+0x14>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <ack_received+0x16>
    else return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000270 	.word	0x20000270

080013e0 <multicast>:

static int multicast(fsm_t* this)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

	if ((dest_addr == MULTICAST_ADDRESS) || (dest_addr == BROADCAST_ADDRESS)) return 1;
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <multicast+0x2c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2bee      	cmp	r3, #238	; 0xee
 80013ee:	d003      	beq.n	80013f8 <multicast+0x18>
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <multicast+0x2c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2bff      	cmp	r3, #255	; 0xff
 80013f6:	d101      	bne.n	80013fc <multicast+0x1c>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <multicast+0x1e>
	else return 0;
 80013fc:	2300      	movs	r3, #0

}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200003e0 	.word	0x200003e0

08001410 <address_known>:

static int address_known(fsm_t* this)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	if ((dest_addr != MULTICAST_ADDRESS) && (dest_addr != BROADCAST_ADDRESS)) return 1;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <address_known+0x2c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2bee      	cmp	r3, #238	; 0xee
 800141e:	d005      	beq.n	800142c <address_known+0x1c>
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <address_known+0x2c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2bff      	cmp	r3, #255	; 0xff
 8001426:	d001      	beq.n	800142c <address_known+0x1c>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <address_known+0x1e>
	else return 0;
 800142c:	2300      	movs	r3, #0

}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200003e0 	.word	0x200003e0

08001440 <tx_done>:

static int tx_done(fsm_t* this)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	return xTxDoneFlag;
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <tx_done+0x1c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000261 	.word	0x20000261

08001460 <ACK_confirm>:


static int ACK_confirm (fsm_t* this)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	return ACK_Process;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <ACK_confirm+0x18>)
 800146a:	781b      	ldrb	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	200003e2 	.word	0x200003e2

0800147c <EN_Rx>:

void EN_Rx(fsm_t* this)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    AppliReceiveBuff(aReceiveBuffer, RxLength);
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <EN_Rx+0x44>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <EN_Rx+0x48>)
 800148c:	f000 f980 	bl	8001790 <AppliReceiveBuff>
    Spirit1_RX_timeout = RESET;
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <EN_Rx+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
    reset_RX_count();
 8001496:	f7ff ff31 	bl	80012fc <reset_RX_count>
    BSP_LED_Toggle(LED2);
 800149a:	2000      	movs	r0, #0
 800149c:	f003 fa72 	bl	8004984 <BSP_LED_Toggle>

	xTxDoneFlag = RESET;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <EN_Rx+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f003 fb76 	bl	8004b98 <RadioShieldLedOff>
#endif
    ACK_Process = RESET;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <EN_Rx+0x54>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
    IDLE_Process = SET;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <EN_Rx+0x58>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]

}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200001fc 	.word	0x200001fc
 80014c4:	20000200 	.word	0x20000200
 80014c8:	20000262 	.word	0x20000262
 80014cc:	20000261 	.word	0x20000261
 80014d0:	200003e2 	.word	0x200003e2
 80014d4:	200003f4 	.word	0x200003f4

080014d8 <send_data>:

void send_data(fsm_t* this)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	tx_value = RESET;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <send_data+0x54>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
	xTxFrame.Cmd = LED_TOGGLE;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <send_data+0x58>)
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	70da      	strb	r2, [r3, #3]
	xTxFrame.CmdLen = 0x01;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <send_data+0x58>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	709a      	strb	r2, [r3, #2]
	xTxFrame.Cmdtag = txCounter++;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <send_data+0x5c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	b291      	uxth	r1, r2
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <send_data+0x5c>)
 80014fc:	8011      	strh	r1, [r2, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <send_data+0x58>)
 8001502:	701a      	strb	r2, [r3, #0]
	xTxFrame.CmdType = APPLI_CMD;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <send_data+0x58>)
 8001506:	2211      	movs	r2, #17
 8001508:	705a      	strb	r2, [r3, #1]
	xTxFrame.DataBuff = aTransmitBuffer;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <send_data+0x58>)
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <send_data+0x60>)
 800150e:	609a      	str	r2, [r3, #8]
	xTxFrame.DataLen = TxLength;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <send_data+0x64>)
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <send_data+0x58>)
 8001516:	711a      	strb	r2, [r3, #4]
	AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <send_data+0x58>)
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	4619      	mov	r1, r3
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <send_data+0x58>)
 8001520:	f000 f8dc 	bl	80016dc <AppliSendBuff>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000263 	.word	0x20000263
 8001530:	20000264 	.word	0x20000264
 8001534:	200002de 	.word	0x200002de
 8001538:	20000088 	.word	0x20000088
 800153c:	20000084 	.word	0x20000084

08001540 <read_RX_Data>:

void read_RX_Data(fsm_t* this)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	xRxDoneFlag = RESET;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <read_RX_Data+0x70>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]

	Spirit1GetRxPacket(aReceiveBuffer,&RxLength);
 800154e:	4919      	ldr	r1, [pc, #100]	; (80015b4 <read_RX_Data+0x74>)
 8001550:	4819      	ldr	r0, [pc, #100]	; (80015b8 <read_RX_Data+0x78>)
 8001552:	f003 f971 	bl	8004838 <Spirit1GetRxPacket>
	/*rRSSIValue = Spirit1GetRssiTH();*/
	/*rRSSIValue = S2LPGetRssiTH();*/
	xRxFrame.Cmd = aReceiveBuffer[0];
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <read_RX_Data+0x78>)
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <read_RX_Data+0x7c>)
 800155c:	70da      	strb	r2, [r3, #3]
	xRxFrame.CmdLen = aReceiveBuffer[1];
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <read_RX_Data+0x78>)
 8001560:	785a      	ldrb	r2, [r3, #1]
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <read_RX_Data+0x7c>)
 8001564:	709a      	strb	r2, [r3, #2]
	xRxFrame.Cmdtag = aReceiveBuffer[2];
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <read_RX_Data+0x78>)
 8001568:	789a      	ldrb	r2, [r3, #2]
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <read_RX_Data+0x7c>)
 800156c:	701a      	strb	r2, [r3, #0]
	xRxFrame.CmdType = aReceiveBuffer[3];
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <read_RX_Data+0x78>)
 8001570:	78da      	ldrb	r2, [r3, #3]
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <read_RX_Data+0x7c>)
 8001574:	705a      	strb	r2, [r3, #1]
	xRxFrame.DataLen = aReceiveBuffer[4];
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <read_RX_Data+0x78>)
 8001578:	791a      	ldrb	r2, [r3, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <read_RX_Data+0x7c>)
 800157c:	711a      	strb	r2, [r3, #4]

	/*FIXED BUG IN DATA RECEPTION*/
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 800157e:	2305      	movs	r3, #5
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e008      	b.n	8001596 <read_RX_Data+0x56>
	{
	  temp_DataBuff[xIndex] = aReceiveBuffer[xIndex];
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	490b      	ldr	r1, [pc, #44]	; (80015b8 <read_RX_Data+0x78>)
 800158a:	5c89      	ldrb	r1, [r1, r2]
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <read_RX_Data+0x80>)
 800158e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t xIndex = 5; xIndex < RxLength; xIndex++)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	3301      	adds	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <read_RX_Data+0x74>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3f1      	bcc.n	8001584 <read_RX_Data+0x44>
	}

	xRxFrame.DataBuff= temp_DataBuff;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <read_RX_Data+0x7c>)
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <read_RX_Data+0x80>)
 80015a4:	609a      	str	r2, [r3, #8]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000260 	.word	0x20000260
 80015b4:	200001fc 	.word	0x200001fc
 80015b8:	20000200 	.word	0x20000200
 80015bc:	20000270 	.word	0x20000270
 80015c0:	200002e0 	.word	0x200002e0

080015c4 <LED_ON>:

void LED_ON(fsm_t* this)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOn(RADIO_SHIELD_LED);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f003 facf 	bl	8004b70 <RadioShieldLedOn>
#endif
    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 80015d2:	f001 fae7 	bl	8002ba4 <SpiritPktCommonGetReceivedDestAddress>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <LED_ON+0x24>)
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200003e0 	.word	0x200003e0

080015ec <LED_Toggle>:

void LED_Toggle(fsm_t* this)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uint8_t ledToggleCtr = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

    dest_addr = SpiritPktCommonGetReceivedDestAddress();
 80015f8:	f001 fad4 	bl	8002ba4 <SpiritPktCommonGetReceivedDestAddress>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <LED_Toggle+0x54>)
 8001602:	701a      	strb	r2, [r3, #0]

#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
	HAL_Delay(DELAY_TX_LED_GLOW);
 8001604:	20c8      	movs	r0, #200	; 0xc8
 8001606:	f003 ff19 	bl	800543c <HAL_Delay>
#endif
	for(; ledToggleCtr<5; ledToggleCtr++)
 800160a:	e008      	b.n	800161e <LED_Toggle+0x32>
	{
		/*IT WILL BE NECESSARY CHANGE IT TO PCB LED*/
		#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
		RadioShieldLedToggle(RADIO_SHIELD_LED);
 800160c:	2000      	movs	r0, #0
 800160e:	f003 fad7 	bl	8004bc0 <RadioShieldLedToggle>
		#endif
		HAL_Delay(DELAY_RX_LED_TOGGLE);
 8001612:	2064      	movs	r0, #100	; 0x64
 8001614:	f003 ff12 	bl	800543c <HAL_Delay>
	for(; ledToggleCtr<5; ledToggleCtr++)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3301      	adds	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d9f3      	bls.n	800160c <LED_Toggle+0x20>
	}
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
    RadioShieldLedOff(RADIO_SHIELD_LED);
 8001624:	2000      	movs	r0, #0
 8001626:	f003 fab7 	bl	8004b98 <RadioShieldLedOff>
#endif
    BSP_LED_Off(LED2);
 800162a:	2000      	movs	r0, #0
 800162c:	f003 f996 	bl	800495c <BSP_LED_Off>

    ACK_Process = SET;
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <LED_Toggle+0x58>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200003e0 	.word	0x200003e0
 8001644:	200003e2 	.word	0x200003e2

08001648 <send_ACK>:

void send_ACK(fsm_t* this)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	  xTxFrame.Cmd = ACK_OK;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <send_ACK+0x4c>)
 8001652:	2201      	movs	r2, #1
 8001654:	70da      	strb	r2, [r3, #3]
	  xTxFrame.CmdLen = 0x01;
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <send_ACK+0x4c>)
 8001658:	2201      	movs	r2, #1
 800165a:	709a      	strb	r2, [r3, #2]
	  xTxFrame.Cmdtag = xRxFrame.Cmdtag;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <send_ACK+0x50>)
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <send_ACK+0x4c>)
 8001662:	701a      	strb	r2, [r3, #0]
	  xTxFrame.CmdType = APPLI_CMD;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <send_ACK+0x4c>)
 8001666:	2211      	movs	r2, #17
 8001668:	705a      	strb	r2, [r3, #1]
	  xTxFrame.DataBuff = aTransmitBuffer;
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <send_ACK+0x4c>)
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <send_ACK+0x54>)
 800166e:	609a      	str	r2, [r3, #8]
	  xTxFrame.DataLen = TxLength;
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <send_ACK+0x58>)
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <send_ACK+0x4c>)
 8001676:	711a      	strb	r2, [r3, #4]
	  HAL_Delay(DELAY_TX_LED_GLOW);
 8001678:	20c8      	movs	r0, #200	; 0xc8
 800167a:	f003 fedf 	bl	800543c <HAL_Delay>

	  AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <send_ACK+0x4c>)
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	4619      	mov	r1, r3
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <send_ACK+0x4c>)
 8001686:	f000 f829 	bl	80016dc <AppliSendBuff>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000264 	.word	0x20000264
 8001698:	20000270 	.word	0x20000270
 800169c:	20000088 	.word	0x20000088
 80016a0:	20000084 	.word	0x20000084

080016a4 <HAL_Radio_Init>:
* @brief  Initializes RF Transceiver's HAL.
* @param  None
* @retval None.
*/
void HAL_Radio_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  pRadioDriver = &radio_cb;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_Radio_Init+0x18>)
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_Radio_Init+0x1c>)
 80016ac:	601a      	str	r2, [r3, #0]
  pRadioDriver->Init( ); 
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_Radio_Init+0x18>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4798      	blx	r3
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003e8 	.word	0x200003e8
 80016c0:	20000000 	.word	0x20000000

080016c4 <P2P_Process>:
*         uint8_t* pRxBuff = Pointer to aReceiveBuffer
*         uint8_t cRxlen= length of aReceiveBuffer
* @retval None.
*/
void P2P_Process(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	fsm_fire(radio_fsm);
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <P2P_Process+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb9d 	bl	8000e0c <fsm_fire>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200003f0 	.word	0x200003f0

080016dc <AppliSendBuff>:
* @param  AppliFrame_t *xTxFrame = Pointer to AppliFrame_t structure 
*         uint8_t cTxlen = Length of aTransmitBuffer
* @retval None
*/
void AppliSendBuff(AppliFrame_t *xTxFrame, uint8_t cTxlen)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
  uint8_t xIndex = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint8_t trxLength = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73bb      	strb	r3, [r7, #14]
  
#ifdef USE_BASIC_PROTOCOL
  SpiritPktBasicAddressesInit(&xAddressInit);
 80016f0:	4823      	ldr	r0, [pc, #140]	; (8001780 <AppliSendBuff+0xa4>)
 80016f2:	f001 f923 	bl	800293c <SpiritPktBasicAddressesInit>
#endif  
  
  TxFrameBuff[0] = xTxFrame->Cmd;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	78da      	ldrb	r2, [r3, #3]
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <AppliSendBuff+0xa8>)
 80016fc:	701a      	strb	r2, [r3, #0]
  TxFrameBuff[1] = xTxFrame->CmdLen;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	789a      	ldrb	r2, [r3, #2]
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <AppliSendBuff+0xa8>)
 8001704:	705a      	strb	r2, [r3, #1]
  TxFrameBuff[2] = xTxFrame->Cmdtag;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <AppliSendBuff+0xa8>)
 800170c:	709a      	strb	r2, [r3, #2]
  TxFrameBuff[3] = xTxFrame->CmdType;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	785a      	ldrb	r2, [r3, #1]
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <AppliSendBuff+0xa8>)
 8001714:	70da      	strb	r2, [r3, #3]
  TxFrameBuff[4] = xTxFrame->DataLen;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	791a      	ldrb	r2, [r3, #4]
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <AppliSendBuff+0xa8>)
 800171c:	711a      	strb	r2, [r3, #4]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 800171e:	e00b      	b.n	8001738 <AppliSendBuff+0x5c>
  {
    TxFrameBuff[xIndex+5] =  xTxFrame->DataBuff[xIndex];
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	441a      	add	r2, r3
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3305      	adds	r3, #5
 800172c:	7811      	ldrb	r1, [r2, #0]
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <AppliSendBuff+0xa8>)
 8001730:	54d1      	strb	r1, [r2, r3]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	3301      	adds	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	791b      	ldrb	r3, [r3, #4]
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3ee      	bcc.n	8001720 <AppliSendBuff+0x44>
  }

  trxLength = (xIndex+5);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3305      	adds	r3, #5
 8001746:	73bb      	strb	r3, [r7, #14]

  /* Spirit IRQs disable */
  Spirit1DisableIrq();
 8001748:	f003 f823 	bl	8004792 <Spirit1DisableIrq>
  /* Spirit IRQs enable */
  Spirit1EnableTxIrq();
 800174c:	f003 f808 	bl	8004760 <Spirit1EnableTxIrq>
  /* payload length config */
  Spirit1SetPayloadlength(trxLength);
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	4618      	mov	r0, r3
 8001754:	f002 ffe9 	bl	800472a <Spirit1SetPayloadlength>
  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 8001758:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001788 <AppliSendBuff+0xac>
 800175c:	f003 f820 	bl	80047a0 <Spirit1SetRxTimeout>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 8001760:	f003 f8bc 	bl	80048dc <Spirit1ClearIRQ>
  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <AppliSendBuff+0xb0>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f002 ffec 	bl	8004746 <Spirit1SetDestinationAddress>
  /* send the TX command */
  Spirit1StartTx(TxFrameBuff, trxLength);
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	4619      	mov	r1, r3
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <AppliSendBuff+0xa8>)
 8001774:	f003 f87c 	bl	8004870 <Spirit1StartTx>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000074 	.word	0x20000074
 8001784:	2000027c 	.word	0x2000027c
 8001788:	00000000 	.word	0x00000000
 800178c:	200003e1 	.word	0x200003e1

08001790 <AppliReceiveBuff>:
* @param  uint8_t *RxFrameBuff = Pointer to ReceiveBuffer
*         uint8_t cRxlen = length of ReceiveBuffer
* @retval None
*/
void AppliReceiveBuff(uint8_t *RxFrameBuff, uint8_t cRxlen)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  /*float rRSSIValue = 0;*/
//  SW_RX_timeout = SET;
  exitCounter = TIME_TO_EXIT_RX;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <AppliReceiveBuff+0x4c>)
 800179e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017a2:	801a      	strh	r2, [r3, #0]
  SpiritPktBasicAddressesInit(&xAddressInit);
 80017a4:	480e      	ldr	r0, [pc, #56]	; (80017e0 <AppliReceiveBuff+0x50>)
 80017a6:	f001 f8c9 	bl	800293c <SpiritPktBasicAddressesInit>

  Spirit1DisableIrq();
 80017aa:	f002 fff2 	bl	8004792 <Spirit1DisableIrq>
  Spirit1EnableRxIrq();
 80017ae:	f002 ffdf 	bl	8004770 <Spirit1EnableRxIrq>

  /* payload length config */
  Spirit1SetPayloadlength(PAYLOAD_LEN);
 80017b2:	2019      	movs	r0, #25
 80017b4:	f002 ffb9 	bl	800472a <Spirit1SetPayloadlength>

  /* rx timeout config */
  Spirit1SetRxTimeout(RECEIVE_TIMEOUT);
 80017b8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80017e4 <AppliReceiveBuff+0x54>
 80017bc:	f002 fff0 	bl	80047a0 <Spirit1SetRxTimeout>

  /* destination address */
  Spirit1SetDestinationAddress(DestinationAddr);
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <AppliReceiveBuff+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 ffbe 	bl	8004746 <Spirit1SetDestinationAddress>
  /* IRQ registers blanking */
  Spirit1ClearIRQ();
 80017ca:	f003 f887 	bl	80048dc <Spirit1ClearIRQ>
  /* RX command */ 
  Spirit1StartRx();
 80017ce:	f003 f81d 	bl	800480c <Spirit1StartRx>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002dc 	.word	0x200002dc
 80017e0:	20000074 	.word	0x20000074
 80017e4:	00000000 	.word	0x00000000
 80017e8:	200003e1 	.word	0x200003e1

080017ec <P2P_Init>:
* communication
* @param  None
* @retval None
*/
void P2P_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  DestinationAddr = DESTINATION_ADDRESS;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <P2P_Init+0x5c>)
 80017f2:	2244      	movs	r2, #68	; 0x44
 80017f4:	701a      	strb	r2, [r3, #0]
  pRadioDriver->GpioIrq(&xGpioIRQ);
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <P2P_Init+0x60>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4814      	ldr	r0, [pc, #80]	; (8001850 <P2P_Init+0x64>)
 80017fe:	4798      	blx	r3

  /*Configure 868 transceiver*/
  selectedBand.conf_868 = SET;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <P2P_Init+0x68>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
  selectedBand.conf_433 = RESET;
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <P2P_Init+0x68>)
 8001808:	2200      	movs	r2, #0
 800180a:	705a      	strb	r2, [r3, #1]
  Spirit1RadioInit(&xRadioInit);
 800180c:	4812      	ldr	r0, [pc, #72]	; (8001858 <P2P_Init+0x6c>)
 800180e:	f002 ff66 	bl	80046de <Spirit1RadioInit>
  Spirit1SetPower(POWER_INDEX, POWER_DBM);
 8001812:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800185c <P2P_Init+0x70>
 8001816:	2007      	movs	r0, #7
 8001818:	f002 ff6c 	bl	80046f4 <Spirit1SetPower>
  Spirit1PacketConfig();
 800181c:	f002 ff7f 	bl	800471e <Spirit1PacketConfig>
  Spirit1EnableSQI();
 8001820:	f002 ffe9 	bl	80047f6 <Spirit1EnableSQI>
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001824:	f06f 0081 	mvn.w	r0, #129	; 0x81
 8001828:	f001 fa40 	bl	8002cac <SpiritQiSetRssiThresholddBm>
//  Spirit1PacketConfig();
//  Spirit1EnableSQI();
//  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);


  radio_fsm = fsm_new (radio_states);
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <P2P_Init+0x74>)
 800182e:	f7ff fac9 	bl	8000dc4 <fsm_new>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <P2P_Init+0x78>)
 8001836:	601a      	str	r2, [r3, #0]

  /*868MHz band as predetermined band*/
  selectedBand.conf_433 = RESET;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <P2P_Init+0x68>)
 800183a:	2200      	movs	r2, #0
 800183c:	705a      	strb	r2, [r3, #1]
  selectedBand.conf_868 = SET;
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <P2P_Init+0x68>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200003e1 	.word	0x200003e1
 800184c:	200003e8 	.word	0x200003e8
 8001850:	20000044 	.word	0x20000044
 8001854:	200003ec 	.word	0x200003ec
 8001858:	20000048 	.word	0x20000048
 800185c:	4139999a 	.word	0x4139999a
 8001860:	2000009c 	.word	0x2000009c
 8001864:	200003f0 	.word	0x200003f0

08001868 <BasicProtocolInit>:
* @brief  This function initializes the BASIC Packet handler of S2LP
* @param  None
* @retval None
*/
void BasicProtocolInit(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* RAdio Packet config */
	SpiritPktBasicInit(&xBasicInit);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <BasicProtocolInit+0x10>)
 800186e:	f000 ff8d 	bl	800278c <SpiritPktBasicInit>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000064 	.word	0x20000064

0800187c <bandSelect>:

radio_select_t bandSelect(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
	return selectedBand;
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <bandSelect+0x28>)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	2300      	movs	r3, #0
 800188c:	793a      	ldrb	r2, [r7, #4]
 800188e:	f362 0307 	bfi	r3, r2, #0, #8
 8001892:	797a      	ldrb	r2, [r7, #5]
 8001894:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	200003ec 	.word	0x200003ec

080018a8 <P2PInterruptHandler>:
*         to manage the S2LP IRQ configured to be notified on the S2LP GPIO_3.
* @param  None
* @retval None
*/
void P2PInterruptHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	SpiritIrqGetStatus(&xIrqStatus);
 80018ac:	4828      	ldr	r0, [pc, #160]	; (8001950 <P2PInterruptHandler+0xa8>)
 80018ae:	f000 fcdd 	bl	800226c <SpiritIrqGetStatus>
  
  
  /* Check the SPIRIT1 TX_DATA_SENT IRQ flag */
  if(
     (xIrqStatus.IRQ_TX_DATA_SENT) 
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <P2PInterruptHandler+0xa8>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	b2db      	uxtb	r3, r3
  if(
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <P2PInterruptHandler+0x26>
       
#ifdef CSMA_ENABLE
       ||(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <P2PInterruptHandler+0xa8>)
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d019      	beq.n	8001902 <P2PInterruptHandler+0x5a>
#endif
         )
  {
#ifdef CSMA_ENABLE
	SpiritCsma(S_DISABLE);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 fbb2 	bl	8002038 <SpiritCsma>
	SpiritRadioPersistenRx(S_ENABLE);	/*To comeback to RX state*/
 80018d4:	2001      	movs	r0, #1
 80018d6:	f002 fb5b 	bl	8003f90 <SpiritRadioPersistenRx>
	SpiritRadioCsBlanking(S_ENABLE);
 80018da:	2001      	movs	r0, #1
 80018dc:	f002 fb28 	bl	8003f30 <SpiritRadioCsBlanking>
    
    if(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <P2PInterruptHandler+0xa8>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <P2PInterruptHandler+0x4c>
    {
    	SpiritCmdStrobeSabort();
 80018ee:	2067      	movs	r0, #103	; 0x67
 80018f0:	f000 fb26 	bl	8001f40 <SpiritCmdStrobeCommand>
    }
    SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80018f4:	f06f 0081 	mvn.w	r0, #129	; 0x81
 80018f8:	f001 f9d8 	bl	8002cac <SpiritQiSetRssiThresholddBm>
    
    
#endif
    
    xTxDoneFlag = SET;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <P2PInterruptHandler+0xac>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check the S2LP RX_DATA_READY IRQ flag */
  if((xIrqStatus.IRQ_RX_DATA_READY))
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <P2PInterruptHandler+0xa8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <P2PInterruptHandler+0x6e>
  {
    xRxDoneFlag = SET;   
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <P2PInterruptHandler+0xb0>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
  }
  
  /* Restart receive after receive timeout*/
  if (xIrqStatus.IRQ_RX_TIMEOUT)
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <P2PInterruptHandler+0xa8>)
 8001918:	78db      	ldrb	r3, [r3, #3]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <P2PInterruptHandler+0x8c>
  {
    Spirit1_RX_timeout = SET; 
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <P2PInterruptHandler+0xb4>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeRx();
 800192a:	f000 feff 	bl	800272c <SpiritManagementWaCmdStrobeRx>
 800192e:	2061      	movs	r0, #97	; 0x61
 8001930:	f000 fb06 	bl	8001f40 <SpiritCmdStrobeCommand>
    
  }
  
  /* Check the S2LP RX_DATA_DISC IRQ flag */
  if(xIrqStatus.IRQ_RX_DATA_DISC)
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <P2PInterruptHandler+0xa8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <P2PInterruptHandler+0xa4>
  {      
    /* RX command - to ensure the device will be ready for the next reception */
	  SpiritCmdStrobeRx();
 8001942:	f000 fef3 	bl	800272c <SpiritManagementWaCmdStrobeRx>
 8001946:	2061      	movs	r0, #97	; 0x61
 8001948:	f000 fafa 	bl	8001f40 <SpiritCmdStrobeCommand>
    
  }  
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200003d8 	.word	0x200003d8
 8001954:	20000261 	.word	0x20000261
 8001958:	20000260 	.word	0x20000260
 800195c:	20000262 	.word	0x20000262

08001960 <HAL_GPIO_EXTI_Callback>:
* @param uint16_t GPIO_Pin
* @retval None
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  PushButtonStatusData = RESET;
  wakeupCounter = LPM_WAKEUP_TIME; 
  dataSendCounter = DATA_SEND_TIME;
  dataSendCounter++;
#endif
  if(GPIO_Pin==USER_BUTTON_PIN)
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001970:	d110      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x34>
  {

	/*It will be an USB interrupt, not a button*/
	tx_value = SET;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]

	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 8001978:	e008      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2c>
	{
		aTransmitBuffer[i] = i*2;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	0052      	lsls	r2, r2, #1
 8001980:	b2d1      	uxtb	r1, r2
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001984:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i; i<TX_BUFFER_SIZE; i++)
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	3301      	adds	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b13      	cmp	r3, #19
 8001990:	d9f3      	bls.n	800197a <HAL_GPIO_EXTI_Callback+0x1a>
      P2PInterruptHandler();
    }
  
#endif
  
}
 8001992:	e004      	b.n	800199e <HAL_GPIO_EXTI_Callback+0x3e>
    if(GPIO_Pin==RADIO_GPIO_3_EXTI_LINE)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	2b80      	cmp	r3, #128	; 0x80
 8001998:	d101      	bne.n	800199e <HAL_GPIO_EXTI_Callback+0x3e>
      P2PInterruptHandler();
 800199a:	f7ff ff85 	bl	80018a8 <P2PInterruptHandler>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000263 	.word	0x20000263
 80019ac:	20000088 	.word	0x20000088

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ee:	2007      	movs	r0, #7
 80019f0:	f003 fe38 	bl	8005664 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <HAL_SPI_MspInit+0xc0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d149      	bne.n	8001ab6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
//////
  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_SPI_MspInit+0xc4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23c0      	movs	r3, #192	; 0xc0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <HAL_SPI_MspInit+0xc8>)
 8001a92:	f003 fe37 	bl	8005704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a96:	2308      	movs	r3, #8
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4806      	ldr	r0, [pc, #24]	; (8001acc <HAL_SPI_MspInit+0xcc>)
 8001ab2:	f003 fe27 	bl	8005704 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */
//////
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40013000 	.word	0x40013000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400

08001ad0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_SPI_MspDeInit+0x38>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10d      	bne.n	8001afe <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_SPI_MspDeInit+0x3c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_SPI_MspDeInit+0x3c>)
 8001ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001aee:	21c0      	movs	r1, #192	; 0xc0
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <HAL_SPI_MspDeInit+0x40>)
 8001af2:	f003 ff89 	bl	8005a08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8001af6:	2108      	movs	r1, #8
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <HAL_SPI_MspDeInit+0x44>)
 8001afa:	f003 ff85 	bl	8005a08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40013000 	.word	0x40013000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d115      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_TIM_Base_MspInit+0x48>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_TIM_Base_MspInit+0x48>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_TIM_Base_MspInit+0x48>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f003 fd95 	bl	800567a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b50:	201c      	movs	r0, #28
 8001b52:	f003 fdae 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_UART_MspInit+0x84>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12b      	bne.n	8001bde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_UART_MspInit+0x88>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_UART_MspInit+0x88>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0x88>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_UART_MspInit+0x88>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_UART_MspInit+0x88>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_UART_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bce:	2307      	movs	r3, #7
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_UART_MspInit+0x8c>)
 8001bda:	f003 fd93 	bl	8005704 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40004400 	.word	0x40004400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f003 fbd8 	bl	80053fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c54:	2080      	movs	r0, #128	; 0x80
 8001c56:	f003 ffed 	bl	8005c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <TIM2_IRQHandler+0x14>)
 8001c66:	f005 f91f 	bl	8006ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  handle_TIM2();
 8001c6a:	f7ff fb21 	bl	80012b0 <handle_TIM2>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000354 	.word	0x20000354

08001c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c80:	f003 ffd8 	bl	8005c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f006 f874 	bl	8007da4 <__errno>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20018000 	.word	0x20018000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	200002e4 	.word	0x200002e4
 8001cf0:	20000460 	.word	0x20000460

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <SystemInit+0x28>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <SystemInit+0x28>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SystemInit+0x28>)
 8001d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
  ldr  r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff ffd3 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f006 f82f 	bl	8007db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7ff f88b 	bl	8000e6c <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d58:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001d5c:	0800817c 	.word	0x0800817c
  ldr  r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d64:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001d68:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001d6c:	2000045c 	.word	0x2000045c

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001d7e:	f107 030f 	add.w	r3, r7, #15
 8001d82:	461a      	mov	r2, r3
 8001d84:	2101      	movs	r1, #1
 8001d86:	2050      	movs	r0, #80	; 0x50
 8001d88:	f003 f844 	bl	8004e14 <RadioSpiReadRegisters>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <SpiritCalibrationVco+0x6c>)
 8001d90:	b212      	sxth	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	7019      	strb	r1, [r3, #0]
 8001d96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d9a:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e004      	b.n	8001db8 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001db8:	f107 030f 	add.w	r3, r7, #15
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2050      	movs	r0, #80	; 0x50
 8001dc2:	f002 ff7b 	bl	8004cbc <RadioSpiWriteRegisters>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SpiritCalibrationVco+0x6c>)
 8001dca:	b212      	sxth	r2, r2
 8001dcc:	4611      	mov	r1, r2
 8001dce:	7019      	strb	r1, [r3, #0]
 8001dd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dd4:	705a      	strb	r2, [r3, #1]

}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200003f8 	.word	0x200003f8

08001de4 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	461a      	mov	r2, r3
 8001dee:	2101      	movs	r1, #1
 8001df0:	20e5      	movs	r0, #229	; 0xe5
 8001df2:	f003 f80f 	bl	8004e14 <RadioSpiReadRegisters>
 8001df6:	4602      	mov	r2, r0
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <SpiritCalibrationGetVcoCalData+0x34>)
 8001dfa:	b212      	sxth	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	7019      	strb	r1, [r3, #0]
 8001e00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e04:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0c:	b2db      	uxtb	r3, r3

}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200003f8 	.word	0x200003f8

08001e1c <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001e26:	f107 030f 	add.w	r3, r7, #15
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	206e      	movs	r0, #110	; 0x6e
 8001e30:	f002 fff0 	bl	8004e14 <RadioSpiReadRegisters>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001e38:	b212      	sxth	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	7019      	strb	r1, [r3, #0]
 8001e3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e42:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001e58:	f107 030f 	add.w	r3, r7, #15
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2101      	movs	r1, #1
 8001e60:	206e      	movs	r0, #110	; 0x6e
 8001e62:	f002 ff2b 	bl	8004cbc <RadioSpiWriteRegisters>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001e6a:	b212      	sxth	r2, r2
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	7019      	strb	r1, [r3, #0]
 8001e70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e74:	705a      	strb	r2, [r3, #1]

}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200003f8 	.word	0x200003f8

08001e84 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001e8e:	f107 030f 	add.w	r3, r7, #15
 8001e92:	461a      	mov	r2, r3
 8001e94:	2101      	movs	r1, #1
 8001e96:	206f      	movs	r0, #111	; 0x6f
 8001e98:	f002 ffbc 	bl	8004e14 <RadioSpiReadRegisters>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001ea0:	b212      	sxth	r2, r2
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	7019      	strb	r1, [r3, #0]
 8001ea6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001eaa:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001ec0:	f107 030f 	add.w	r3, r7, #15
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	206f      	movs	r0, #111	; 0x6f
 8001eca:	f002 fef7 	bl	8004cbc <RadioSpiWriteRegisters>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001ed2:	b212      	sxth	r2, r2
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	7019      	strb	r1, [r3, #0]
 8001ed8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001edc:	705a      	strb	r2, [r3, #1]

}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200003f8 	.word	0x200003f8

08001eec <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001ef6:	f107 030f 	add.w	r3, r7, #15
 8001efa:	461a      	mov	r2, r3
 8001efc:	2101      	movs	r1, #1
 8001efe:	209e      	movs	r0, #158	; 0x9e
 8001f00:	f002 ff88 	bl	8004e14 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	f023 0306 	bic.w	r3, r3, #6
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e004      	b.n	8001f2a <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001f2a:	f107 030f 	add.w	r3, r7, #15
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2101      	movs	r1, #1
 8001f32:	209e      	movs	r0, #158	; 0x9e
 8001f34:	f002 fec2 	bl	8004cbc <RadioSpiWriteRegisters>
  
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f813 	bl	8004f78 <RadioSpiCommandStrobes>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SpiritCmdStrobeCommand+0x2c>)
 8001f56:	b212      	sxth	r2, r2
 8001f58:	4611      	mov	r1, r2
 8001f5a:	7019      	strb	r1, [r3, #0]
 8001f5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f60:	705a      	strb	r2, [r3, #1]
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200003f8 	.word	0x200003f8

08001f70 <SpiritCsmaInit>:
 * @param  pxCsmaInit Csma init structure.
 *         This parameter is a pointer to @ref CsmaInit.
 * @retval None.
 */
void SpiritCsmaInit(CsmaInit* pxCsmaInit)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_BU_COUNTER_SEED(pxCsmaInit->nBuCounterSeed));
  s_assert_param(IS_BU_PRESCALER(pxCsmaInit->cBuPrescaler));
  s_assert_param(IS_CMAX_NB(pxCsmaInit->cMaxNb));

  /* CSMA BU counter seed (MSB) config */
  tempRegValue[0] = (uint8_t)(pxCsmaInit->nBuCounterSeed >> 8);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	889b      	ldrh	r3, [r3, #4]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	723b      	strb	r3, [r7, #8]

  /* CSMA BU counter seed (LSB) config */
  tempRegValue[1] = (uint8_t) pxCsmaInit->nBuCounterSeed;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	727b      	strb	r3, [r7, #9]

  /* CSMA BU prescaler config and CCA period config */
  tempRegValue[2] = (pxCsmaInit->cBuPrescaler << 2) | pxCsmaInit->xMultiplierTbit;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	799b      	ldrb	r3, [r3, #6]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	b25a      	sxtb	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	72bb      	strb	r3, [r7, #10]

  /* CSMA CCA length config and max number of back-off */
  tempRegValue[3] = (pxCsmaInit->xCcaLength | pxCsmaInit->cMaxNb);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	789a      	ldrb	r2, [r3, #2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	72fb      	strb	r3, [r7, #11]

  /* Reads the PROTOCOL1_BASE register value, to write the SEED_RELOAD and CSMA_PERS_ON fields */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2101      	movs	r1, #1
 8001fba:	2051      	movs	r0, #81	; 0x51
 8001fbc:	f002 ff2a 	bl	8004e14 <RadioSpiReadRegisters>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <SpiritCsmaInit+0xc4>)
 8001fc4:	b212      	sxth	r2, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	7019      	strb	r1, [r3, #0]
 8001fca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fce:	705a      	strb	r2, [r3, #1]

  /* Writes the new value for persistent mode */
  if(pxCsmaInit->xCsmaPersistentMode==S_ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <SpiritCsmaInit+0x74>
  {
    tempRegValue[4] |= PROTOCOL1_CSMA_PERS_ON_MASK;
 8001fd8:	7b3b      	ldrb	r3, [r7, #12]
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	733b      	strb	r3, [r7, #12]
 8001fe2:	e004      	b.n	8001fee <SpiritCsmaInit+0x7e>
  }
  else
  {
    tempRegValue[4] &= ~PROTOCOL1_CSMA_PERS_ON_MASK;
 8001fe4:	7b3b      	ldrb	r3, [r7, #12]
 8001fe6:	f023 0302 	bic.w	r3, r3, #2
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	733b      	strb	r3, [r7, #12]
  }

  /* Writes PROTOCOL1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2051      	movs	r0, #81	; 0x51
 8001ffa:	f002 fe5f 	bl	8004cbc <RadioSpiWriteRegisters>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <SpiritCsmaInit+0xc4>)
 8002002:	b212      	sxth	r2, r2
 8002004:	4611      	mov	r1, r2
 8002006:	7019      	strb	r1, [r3, #0]
 8002008:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800200c:	705a      	strb	r2, [r3, #1]

  /* Writes CSMA_CONFIGx_BASE registers */
  g_xStatus = SpiritSpiWriteRegisters(CSMA_CONFIG3_BASE, 4, tempRegValue);
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	461a      	mov	r2, r3
 8002014:	2104      	movs	r1, #4
 8002016:	2064      	movs	r0, #100	; 0x64
 8002018:	f002 fe50 	bl	8004cbc <RadioSpiWriteRegisters>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SpiritCsmaInit+0xc4>)
 8002020:	b212      	sxth	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	7019      	strb	r1, [r3, #0]
 8002026:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800202a:	705a      	strb	r2, [r3, #1]

}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200003f8 	.word	0x200003f8

08002038 <SpiritCsma>:
 * @param  xNewState the state of the CSMA mode.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCsma(SpiritFunctionalState xNewState)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PROTOCOL1 register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8002042:	f107 030f 	add.w	r3, r7, #15
 8002046:	461a      	mov	r2, r3
 8002048:	2101      	movs	r1, #1
 800204a:	2051      	movs	r0, #81	; 0x51
 800204c:	f002 fee2 	bl	8004e14 <RadioSpiReadRegisters>
 8002050:	4602      	mov	r2, r0
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <SpiritCsma+0x6c>)
 8002054:	b212      	sxth	r2, r2
 8002056:	4611      	mov	r1, r2
 8002058:	7019      	strb	r1, [r3, #0]
 800205a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800205e:	705a      	strb	r2, [r3, #1]

  /* Sets or resets the CSMA enable bit */
  if(xNewState==S_ENABLE)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <SpiritCsma+0x3a>
  {
    tempRegValue |= PROTOCOL1_CSMA_ON_MASK;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e004      	b.n	800207c <SpiritCsma+0x44>
  }
  else
  {
    tempRegValue &= ~PROTOCOL1_CSMA_ON_MASK;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	b2db      	uxtb	r3, r3
 800207a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the new value on the PROTOCOL1 register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 800207c:	f107 030f 	add.w	r3, r7, #15
 8002080:	461a      	mov	r2, r3
 8002082:	2101      	movs	r1, #1
 8002084:	2051      	movs	r0, #81	; 0x51
 8002086:	f002 fe19 	bl	8004cbc <RadioSpiWriteRegisters>
 800208a:	4602      	mov	r2, r0
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SpiritCsma+0x6c>)
 800208e:	b212      	sxth	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	7019      	strb	r1, [r3, #0]
 8002094:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002098:	705a      	strb	r2, [r3, #1]

}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200003f8 	.word	0x200003f8

080020a8 <SpiritGeneralSetExtRef>:
 * @param  xExtMode new state for the external reference.
 *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
 * @retval None.
 */
void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_MODE_EXT(xExtMode));

  /* Reads the ANA_FUNC_CONF0_BASE register value */
  SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	461a      	mov	r2, r3
 80020b8:	2101      	movs	r1, #1
 80020ba:	2001      	movs	r0, #1
 80020bc:	f002 feaa 	bl	8004e14 <RadioSpiReadRegisters>

  /* Build the value to write */
  if(xExtMode == MODE_EXT_XO)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <SpiritGeneralSetExtRef+0x2a>
  {
    tempRegValue &= ~EXT_REF_MASK;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	f023 0310 	bic.w	r3, r3, #16
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e004      	b.n	80020dc <SpiritGeneralSetExtRef+0x34>
  }
  else
  {
    tempRegValue |= EXT_REF_MASK;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80020dc:	f107 030f 	add.w	r3, r7, #15
 80020e0:	461a      	mov	r2, r3
 80020e2:	2101      	movs	r1, #1
 80020e4:	2001      	movs	r0, #1
 80020e6:	f002 fde9 	bl	8004cbc <RadioSpiWriteRegisters>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SpiritGeneralSetExtRef+0x5c>)
 80020ee:	b212      	sxth	r2, r2
 80020f0:	4611      	mov	r1, r2
 80020f2:	7019      	strb	r1, [r3, #0]
 80020f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020f8:	705a      	strb	r2, [r3, #1]

}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200003f8 	.word	0x200003f8

08002108 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	785a      	ldrb	r2, [r3, #1]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	789b      	ldrb	r3, [r3, #2]
 800211c:	4313      	orrs	r3, r2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f107 020f 	add.w	r2, r7, #15
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fdc5 	bl	8004cbc <RadioSpiWriteRegisters>
 8002132:	4602      	mov	r2, r0
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <SpiritGpioInit+0x44>)
 8002136:	b212      	sxth	r2, r2
 8002138:	4611      	mov	r1, r2
 800213a:	7019      	strb	r1, [r3, #0]
 800213c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002140:	705a      	strb	r2, [r3, #1]

}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200003f8 	.word	0x200003f8

08002150 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <SpiritIrqDeInit+0x20>
  {
    uint32_t tempValue = 0x00000000;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
    
    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8002166:	f107 0308 	add.w	r3, r7, #8
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6013      	str	r3, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	461a      	mov	r2, r3
 8002176:	2104      	movs	r1, #4
 8002178:	2090      	movs	r0, #144	; 0x90
 800217a:	f002 fd9f 	bl	8004cbc <RadioSpiWriteRegisters>
 800217e:	4602      	mov	r2, r0
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SpiritIrqDeInit+0x48>)
 8002182:	b212      	sxth	r2, r2
 8002184:	4611      	mov	r1, r2
 8002186:	7019      	strb	r1, [r3, #0]
 8002188:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800218c:	705a      	strb	r2, [r3, #1]
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003f8 	.word	0x200003f8

0800219c <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	461a      	mov	r2, r3
 80021b2:	2104      	movs	r1, #4
 80021b4:	2090      	movs	r0, #144	; 0x90
 80021b6:	f002 fe2d 	bl	8004e14 <RadioSpiReadRegisters>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <SpiritIrq+0xcc>)
 80021be:	b212      	sxth	r2, r2
 80021c0:	4611      	mov	r1, r2
 80021c2:	7019      	strb	r1, [r3, #0]
 80021c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021c8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	74fb      	strb	r3, [r7, #19]
 80021ce:	e012      	b.n	80021f6 <SpiritIrq+0x5a>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	f107 0218 	add.w	r2, r7, #24
 80021d6:	4413      	add	r3, r2
 80021d8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80021dc:	461a      	mov	r2, r3
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	f1c3 0303 	rsb	r3, r3, #3
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	3301      	adds	r3, #1
 80021f4:	74fb      	strb	r3, [r7, #19]
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d9e9      	bls.n	80021d0 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <SpiritIrq+0x72>
  {
    tempValue &= (~xIrq);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	43db      	mvns	r3, r3
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e003      	b.n	8002216 <SpiritIrq+0x7a>
  }
  else
  {
    tempValue |= (xIrq);
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002216:	2300      	movs	r3, #0
 8002218:	74bb      	strb	r3, [r7, #18]
 800221a:	e00f      	b.n	800223c <SpiritIrq+0xa0>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 800221c:	7cbb      	ldrb	r3, [r7, #18]
 800221e:	f1c3 0303 	rsb	r3, r3, #3
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	40da      	lsrs	r2, r3
 8002228:	7cbb      	ldrb	r3, [r7, #18]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f107 0118 	add.w	r1, r7, #24
 8002230:	440b      	add	r3, r1
 8002232:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002236:	7cbb      	ldrb	r3, [r7, #18]
 8002238:	3301      	adds	r3, #1
 800223a:	74bb      	strb	r3, [r7, #18]
 800223c:	7cbb      	ldrb	r3, [r7, #18]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d9ec      	bls.n	800221c <SpiritIrq+0x80>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	461a      	mov	r2, r3
 8002248:	2104      	movs	r1, #4
 800224a:	2090      	movs	r0, #144	; 0x90
 800224c:	f002 fd36 	bl	8004cbc <RadioSpiWriteRegisters>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SpiritIrq+0xcc>)
 8002254:	b212      	sxth	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	7019      	strb	r1, [r3, #0]
 800225a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800225e:	705a      	strb	r2, [r3, #1]

}
 8002260:	bf00      	nop
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200003f8 	.word	0x200003f8

0800226c <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	461a      	mov	r2, r3
 800227e:	2104      	movs	r1, #4
 8002280:	20fa      	movs	r0, #250	; 0xfa
 8002282:	f002 fdc7 	bl	8004e14 <RadioSpiReadRegisters>
 8002286:	4602      	mov	r2, r0
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <SpiritIrqGetStatus+0x60>)
 800228a:	b212      	sxth	r2, r2
 800228c:	4611      	mov	r1, r2
 800228e:	7019      	strb	r1, [r3, #0]
 8002290:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002294:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	74fb      	strb	r3, [r7, #19]
 800229a:	e00f      	b.n	80022bc <SpiritIrqGetStatus+0x50>
  {
    *pIrqPointer = tempRegValue[3-i];
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	f1c3 0303 	rsb	r3, r3, #3
 80022a2:	f107 0218 	add.w	r2, r7, #24
 80022a6:	4413      	add	r3, r2
 80022a8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	3301      	adds	r3, #1
 80022ba:	74fb      	strb	r3, [r7, #19]
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d9ec      	bls.n	800229c <SpiritIrqGetStatus+0x30>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200003f8 	.word	0x200003f8

080022d0 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	461a      	mov	r2, r3
 80022da:	2104      	movs	r1, #4
 80022dc:	20fa      	movs	r0, #250	; 0xfa
 80022de:	f002 fd99 	bl	8004e14 <RadioSpiReadRegisters>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SpiritIrqClearStatus+0x2c>)
 80022e6:	b212      	sxth	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	7019      	strb	r1, [r3, #0]
 80022ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022f0:	705a      	strb	r2, [r3, #1]

}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200003f8 	.word	0x200003f8

08002300 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	461a      	mov	r2, r3
 800230a:	2101      	movs	r1, #1
 800230c:	20e7      	movs	r0, #231	; 0xe7
 800230e:	f002 fd81 	bl	8004e14 <RadioSpiReadRegisters>
 8002312:	4602      	mov	r2, r0
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8002316:	b212      	sxth	r2, r2
 8002318:	4611      	mov	r1, r2
 800231a:	7019      	strb	r1, [r3, #0]
 800231c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002320:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002328:	b2db      	uxtb	r3, r3

}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200003f8 	.word	0x200003f8

08002338 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800233c:	b08a      	sub	sp, #40	; 0x28
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a70      	ldr	r2, [pc, #448]	; (8002508 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d907      	bls.n	800235a <SpiritManagementSetFrequencyBase+0x22>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a6f      	ldr	r2, [pc, #444]	; (800250c <SpiritManagementSetFrequencyBase+0x1d4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d803      	bhi.n	800235a <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002358:	e01a      	b.n	8002390 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a6c      	ldr	r2, [pc, #432]	; (8002510 <SpiritManagementSetFrequencyBase+0x1d8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d907      	bls.n	8002372 <SpiritManagementSetFrequencyBase+0x3a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a6b      	ldr	r2, [pc, #428]	; (8002514 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d803      	bhi.n	8002372 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002370:	e00e      	b.n	8002390 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a68      	ldr	r2, [pc, #416]	; (8002518 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d907      	bls.n	800238a <SpiritManagementSetFrequencyBase+0x52>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a67      	ldr	r2, [pc, #412]	; (800251c <SpiritManagementSetFrequencyBase+0x1e4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d803      	bhi.n	800238a <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002382:	2302      	movs	r3, #2
 8002384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002388:	e002      	b.n	8002390 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800238a:	2303      	movs	r3, #3
 800238c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002390:	f001 f808 	bl	80033a4 <SpiritRadioGetFrequencyOffset>
 8002394:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002396:	f000 ffe5 	bl	8003364 <SpiritRadioGetChannelSpace>
 800239a:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800239c:	f000 ffca 	bl	8003334 <SpiritRadioGetChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80023a4:	6a3a      	ldr	r2, [r7, #32]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	441a      	add	r2, r3
 80023aa:	7efb      	ldrb	r3, [r7, #27]
 80023ac:	69f9      	ldr	r1, [r7, #28]
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80023b6:	f001 fe4b 	bl	8004050 <SpiritRadioGetRefDiv>
 80023ba:	4603      	mov	r3, r0
 80023bc:	3301      	adds	r3, #1
 80023be:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80023c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d83a      	bhi.n	800243e <SpiritManagementSetFrequencyBase+0x106>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <SpiritManagementSetFrequencyBase+0x98>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	08002429 	.word	0x08002429
 80023d4:	08002411 	.word	0x08002411
 80023d8:	080023f9 	.word	0x080023f9
 80023dc:	080023e1 	.word	0x080023e1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <SpiritManagementSetFrequencyBase+0x1e8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d803      	bhi.n	80023f0 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff fd7f 	bl	8001eec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80023ee:	e026      	b.n	800243e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff fd7b 	bl	8001eec <SpiritCalibrationSelectVco>
    break;
 80023f6:	e022      	b.n	800243e <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4a4a      	ldr	r2, [pc, #296]	; (8002524 <SpiritManagementSetFrequencyBase+0x1ec>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d803      	bhi.n	8002408 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fd73 	bl	8001eec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002406:	e01a      	b.n	800243e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002408:	2001      	movs	r0, #1
 800240a:	f7ff fd6f 	bl	8001eec <SpiritCalibrationSelectVco>
    break;
 800240e:	e016      	b.n	800243e <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4a45      	ldr	r2, [pc, #276]	; (8002528 <SpiritManagementSetFrequencyBase+0x1f0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d803      	bhi.n	8002420 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff fd67 	bl	8001eec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800241e:	e00e      	b.n	800243e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002420:	2001      	movs	r0, #1
 8002422:	f7ff fd63 	bl	8001eec <SpiritCalibrationSelectVco>
    break;
 8002426:	e00a      	b.n	800243e <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4a40      	ldr	r2, [pc, #256]	; (800252c <SpiritManagementSetFrequencyBase+0x1f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d803      	bhi.n	8002438 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fd5b 	bl	8001eec <SpiritCalibrationSelectVco>
 8002436:	e002      	b.n	800243e <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002438:	2001      	movs	r0, #1
 800243a:	f7ff fd57 	bl	8001eec <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f000 fe90 	bl	8003164 <SpiritRadioSearchWCP>
 8002444:	4603      	mov	r3, r0
 8002446:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe f807 	bl	800045c <__aeabi_ui2d>
 800244e:	4604      	mov	r4, r0
 8002450:	460d      	mov	r5, r1
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	049b      	lsls	r3, r3, #18
 8002456:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800245a:	4935      	ldr	r1, [pc, #212]	; (8002530 <SpiritManagementSetFrequencyBase+0x1f8>)
 800245c:	5c8a      	ldrb	r2, [r1, r2]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f80a 	bl	800047c <__aeabi_i2d>
 8002468:	4680      	mov	r8, r0
 800246a:	4689      	mov	r9, r1
 800246c:	f001 fe64 	bl	8004138 <SpiritRadioGetXtalFrequency>
 8002470:	4603      	mov	r3, r0
 8002472:	4618      	mov	r0, r3
 8002474:	f7fd fff2 	bl	800045c <__aeabi_ui2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4640      	mov	r0, r8
 800247e:	4649      	mov	r1, r9
 8002480:	f7fe f990 	bl	80007a4 <__aeabi_ddiv>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fe f860 	bl	8000550 <__aeabi_dmul>
 8002490:	4603      	mov	r3, r0
 8002492:	460c      	mov	r4, r1
 8002494:	4618      	mov	r0, r3
 8002496:	4621      	mov	r1, r4
 8002498:	f7fe faf4 	bl	8000a84 <__aeabi_d2uiz>
 800249c:	4603      	mov	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0d5b      	lsrs	r3, r3, #21
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	7cbb      	ldrb	r3, [r7, #18]
 80024ae:	015b      	lsls	r3, r3, #5
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	0b5b      	lsrs	r3, r3, #13
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d4:	4917      	ldr	r1, [pc, #92]	; (8002534 <SpiritManagementSetFrequencyBase+0x1fc>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	4313      	orrs	r3, r2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	461a      	mov	r2, r3
 80024e4:	2104      	movs	r1, #4
 80024e6:	2008      	movs	r0, #8
 80024e8:	f002 fbe8 	bl	8004cbc <RadioSpiWriteRegisters>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <SpiritManagementSetFrequencyBase+0x200>)
 80024f0:	b212      	sxth	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	7019      	strb	r1, [r3, #0]
 80024f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024fa:	705a      	strb	r2, [r3, #1]
}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	; 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002506:	bf00      	nop
 8002508:	2e5f567f 	.word	0x2e5f567f
 800250c:	390c2fe0 	.word	0x390c2fe0
 8002510:	1701e47f 	.word	0x1701e47f
 8002514:	1c146a60 	.word	0x1c146a60
 8002518:	11d260bf 	.word	0x11d260bf
 800251c:	14ced7e0 	.word	0x14ced7e0
 8002520:	099cf4e1 	.word	0x099cf4e1
 8002524:	1339e9c3 	.word	0x1339e9c3
 8002528:	19a28d05 	.word	0x19a28d05
 800252c:	33451a0a 	.word	0x33451a0a
 8002530:	08007fcc 	.word	0x08007fcc
 8002534:	08007fc8 	.word	0x08007fc8
 8002538:	200003f8 	.word	0x200003f8

0800253c <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800254a:	f001 fdf5 	bl	8004138 <SpiritRadioGetXtalFrequency>
 800254e:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002550:	2300      	movs	r3, #0
 8002552:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <SpiritManagementWaVcoCalibration+0x178>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d90f      	bls.n	800257c <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 800255c:	f001 fd78 	bl	8004050 <SpiritRadioGetRefDiv>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10a      	bne.n	800257c <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800256a:	f001 f87d 	bl	8003668 <SpiritRadioGetFrequencyBase>
 800256e:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002570:	2001      	movs	r0, #1
 8002572:	f001 fd3d 	bl	8003ff0 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fede 	bl	8002338 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 800257c:	f001 f874 	bl	8003668 <SpiritRadioGetFrequencyBase>
 8002580:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002582:	2325      	movs	r3, #37	; 0x25
 8002584:	707b      	strb	r3, [r7, #1]
 8002586:	1c7b      	adds	r3, r7, #1
 8002588:	461a      	mov	r2, r3
 800258a:	2101      	movs	r1, #1
 800258c:	20a1      	movs	r0, #161	; 0xa1
 800258e:	f002 fb95 	bl	8004cbc <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002592:	2001      	movs	r0, #1
 8002594:	f7ff fbee 	bl	8001d74 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002598:	f001 ffa6 	bl	80044e8 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d10d      	bne.n	80025c6 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80025ae:	2062      	movs	r0, #98	; 0x62
 80025b0:	f7ff fcc6 	bl	8001f40 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80025b4:	f001 ff98 	bl	80044e8 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d1f6      	bne.n	80025b4 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80025c6:	2066      	movs	r0, #102	; 0x66
 80025c8:	f7ff fcba 	bl	8001f40 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80025d0:	f001 ff8a 	bl	80044e8 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80025d4:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b13      	cmp	r3, #19
 80025e0:	d106      	bne.n	80025f0 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80025e2:	7b7b      	ldrb	r3, [r7, #13]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	737a      	strb	r2, [r7, #13]
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d101      	bne.n	80025f0 <SpiritManagementWaVcoCalibration+0xb4>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e05d      	b.n	80026ac <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80025f0:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	d1e8      	bne.n	80025d0 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80025fe:	f7ff fbf1 	bl	8001de4 <SpiritCalibrationGetVcoCalData>
 8002602:	4603      	mov	r3, r0
 8002604:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002606:	2062      	movs	r0, #98	; 0x62
 8002608:	f7ff fc9a 	bl	8001f40 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 800260c:	f001 ff6c 	bl	80044e8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002610:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d1f6      	bne.n	800260c <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800261e:	2065      	movs	r0, #101	; 0x65
 8002620:	f7ff fc8e 	bl	8001f40 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002624:	2300      	movs	r3, #0
 8002626:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002628:	f001 ff5e 	bl	80044e8 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800262c:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b13      	cmp	r3, #19
 8002638:	d106      	bne.n	8002648 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	737a      	strb	r2, [r7, #13]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d101      	bne.n	8002648 <SpiritManagementWaVcoCalibration+0x10c>
 8002644:	2301      	movs	r3, #1
 8002646:	e031      	b.n	80026ac <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d1e8      	bne.n	8002628 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002656:	f7ff fbc5 	bl	8001de4 <SpiritCalibrationGetVcoCalData>
 800265a:	4603      	mov	r3, r0
 800265c:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800265e:	2062      	movs	r0, #98	; 0x62
 8002660:	f7ff fc6e 	bl	8001f40 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002664:	f001 ff40 	bl	80044e8 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <SpiritManagementWaVcoCalibration+0x17c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b03      	cmp	r3, #3
 8002674:	d1f6      	bne.n	8002664 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002676:	7bbb      	ldrb	r3, [r7, #14]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 800267c:	2063      	movs	r0, #99	; 0x63
 800267e:	f7ff fc5f 	bl	8001f40 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002682:	2000      	movs	r0, #0
 8002684:	f7ff fb76 	bl	8001d74 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800268e:	2000      	movs	r0, #0
 8002690:	f001 fcae 	bl	8003ff0 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fe4f 	bl	8002338 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fbbd 	bl	8001e1c <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80026a2:	78bb      	ldrb	r3, [r7, #2]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fbed 	bl	8001e84 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	01c9c380 	.word	0x01c9c380
 80026b8:	200003f8 	.word	0x200003f8

080026bc <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <SpiritManagementWaCmdStrobeTx+0x60>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d023      	beq.n	8002714 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <SpiritManagementWaCmdStrobeTx+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <SpiritManagementWaCmdStrobeTx+0x68>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d908      	bls.n	80026e8 <SpiritManagementWaCmdStrobeTx+0x2c>
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <SpiritManagementWaCmdStrobeTx+0x64>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d803      	bhi.n	80026e8 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80026e0:	20c0      	movs	r0, #192	; 0xc0
 80026e2:	f001 fb9b 	bl	8003e1c <SpiritRadioSetPACwc>
 80026e6:	e002      	b.n	80026ee <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f001 fb97 	bl	8003e1c <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80026ee:	2311      	movs	r3, #17
 80026f0:	71fb      	strb	r3, [r7, #7]
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	461a      	mov	r2, r3
 80026f6:	2101      	movs	r1, #1
 80026f8:	20a9      	movs	r0, #169	; 0xa9
 80026fa:	f002 fadf 	bl	8004cbc <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80026fe:	2320      	movs	r3, #32
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	461a      	mov	r2, r3
 8002706:	2101      	movs	r1, #1
 8002708:	20a5      	movs	r0, #165	; 0xa5
 800270a:	f002 fad7 	bl	8004cbc <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <SpiritManagementWaCmdStrobeTx+0x60>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
  }
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000150 	.word	0x20000150
 8002720:	200002e8 	.word	0x200002e8
 8002724:	08f0d17f 	.word	0x08f0d17f
 8002728:	1c03a180 	.word	0x1c03a180

0800272c <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d00d      	beq.n	8002758 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 800273c:	2398      	movs	r3, #152	; 0x98
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	461a      	mov	r2, r3
 8002744:	2101      	movs	r1, #1
 8002746:	20a5      	movs	r0, #165	; 0xa5
 8002748:	f002 fab8 	bl	8004cbc <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 800274c:	2000      	movs	r0, #0
 800274e:	f001 fb65 	bl	8003e1c <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002752:	4b03      	ldr	r3, [pc, #12]	; (8002760 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
  }
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000150 	.word	0x20000150

08002764 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SpiritManagementWaTRxFcMem+0x20>)
 800276e:	2202      	movs	r2, #2
 8002770:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <SpiritManagementWaTRxFcMem+0x24>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	20000150 	.word	0x20000150
 8002788:	200002e8 	.word	0x200002e8

0800278c <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	461a      	mov	r2, r3
 800279a:	2101      	movs	r1, #1
 800279c:	2051      	movs	r0, #81	; 0x51
 800279e:	f002 fb39 	bl	8004e14 <RadioSpiReadRegisters>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <SpiritPktBasicInit+0x1ac>)
 80027a6:	b212      	sxth	r2, r2
 80027a8:	4611      	mov	r1, r2
 80027aa:	7019      	strb	r1, [r3, #0]
 80027ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027b0:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 80027b2:	7a3b      	ldrb	r3, [r7, #8]
 80027b4:	f023 0320 	bic.w	r3, r3, #32
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 80027bc:	7a3b      	ldrb	r3, [r7, #8]
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	461a      	mov	r2, r3
 80027cc:	2101      	movs	r1, #1
 80027ce:	2051      	movs	r0, #81	; 0x51
 80027d0:	f002 fa74 	bl	8004cbc <RadioSpiWriteRegisters>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b58      	ldr	r3, [pc, #352]	; (8002938 <SpiritPktBasicInit+0x1ac>)
 80027d8:	b212      	sxth	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	7019      	strb	r1, [r3, #0]
 80027de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027e2:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	461a      	mov	r2, r3
 80027ea:	2101      	movs	r1, #1
 80027ec:	204f      	movs	r0, #79	; 0x4f
 80027ee:	f002 fb11 	bl	8004e14 <RadioSpiReadRegisters>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <SpiritPktBasicInit+0x1ac>)
 80027f6:	b212      	sxth	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	7019      	strb	r1, [r3, #0]
 80027fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002800:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002802:	7a3b      	ldrb	r3, [r7, #8]
 8002804:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002808:	b2db      	uxtb	r3, r3
 800280a:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	461a      	mov	r2, r3
 8002812:	2101      	movs	r1, #1
 8002814:	204f      	movs	r0, #79	; 0x4f
 8002816:	f002 fa51 	bl	8004cbc <RadioSpiWriteRegisters>
 800281a:	4602      	mov	r2, r0
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <SpiritPktBasicInit+0x1ac>)
 800281e:	b212      	sxth	r2, r2
 8002820:	4611      	mov	r1, r2
 8002822:	7019      	strb	r1, [r3, #0]
 8002824:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002828:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7b1b      	ldrb	r3, [r3, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d102      	bne.n	8002838 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 8002832:	2308      	movs	r3, #8
 8002834:	723b      	strb	r3, [r7, #8]
 8002836:	e001      	b.n	800283c <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 8002838:	2300      	movs	r3, #0
 800283a:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 800283c:	7a3a      	ldrb	r2, [r7, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7adb      	ldrb	r3, [r3, #11]
 8002842:	4313      	orrs	r3, r2
 8002844:	b2db      	uxtb	r3, r3
 8002846:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7a5b      	ldrb	r3, [r3, #9]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <SpiritPktBasicInit+0xca>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7a5b      	ldrb	r3, [r3, #9]
 800285a:	3b01      	subs	r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	4313      	orrs	r3, r2
 800286a:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002870:	4313      	orrs	r3, r2
 8002872:	b2db      	uxtb	r3, r3
 8002874:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7a9b      	ldrb	r3, [r3, #10]
 800287a:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7b9b      	ldrb	r3, [r3, #14]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d104      	bne.n	800288e <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002884:	7afb      	ldrb	r3, [r7, #11]
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	b2db      	uxtb	r3, r3
 800288c:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7b5b      	ldrb	r3, [r3, #13]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d104      	bne.n	80028a0 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	461a      	mov	r2, r3
 80028a6:	2104      	movs	r1, #4
 80028a8:	2030      	movs	r0, #48	; 0x30
 80028aa:	f002 fa07 	bl	8004cbc <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	e01f      	b.n	80028f4 <SpiritPktBasicInit+0x168>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f1c3 0303 	rsb	r3, r3, #3
 80028c2:	429a      	cmp	r2, r3
 80028c4:	da07      	bge.n	80028d6 <SpiritPktBasicInit+0x14a>
    {
      tempRegValue[i]=0;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f107 0210 	add.w	r2, r7, #16
 80028cc:	4413      	add	r3, r2
 80028ce:	2200      	movs	r2, #0
 80028d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028d4:	e00b      	b.n	80028ee <SpiritPktBasicInit+0x162>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	40da      	lsrs	r2, r3
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f107 0110 	add.w	r1, r7, #16
 80028e8:	440b      	add	r3, r1
 80028ea:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	3301      	adds	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d9dc      	bls.n	80028b4 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7a9b      	ldrb	r3, [r3, #10]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <SpiritPktBasicInit+0x17e>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8002902:	2000      	movs	r0, #0
 8002904:	f000 f8fc 	bl	8002b00 <SpiritPktCommonFilterOnCrc>
 8002908:	e002      	b.n	8002910 <SpiritPktBasicInit+0x184>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 800290a:	2001      	movs	r0, #1
 800290c:	f000 f8f8 	bl	8002b00 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	461a      	mov	r2, r3
 8002916:	2104      	movs	r1, #4
 8002918:	2036      	movs	r0, #54	; 0x36
 800291a:	f002 f9cf 	bl	8004cbc <RadioSpiWriteRegisters>
 800291e:	4602      	mov	r2, r0
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SpiritPktBasicInit+0x1ac>)
 8002922:	b212      	sxth	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	7019      	strb	r1, [r3, #0]
 8002928:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800292c:	705a      	strb	r2, [r3, #1]

}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200003f8 	.word	0x200003f8

0800293c <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	461a      	mov	r2, r3
 800294a:	2101      	movs	r1, #1
 800294c:	204f      	movs	r0, #79	; 0x4f
 800294e:	f002 fa61 	bl	8004e14 <RadioSpiReadRegisters>
 8002952:	4602      	mov	r2, r0
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <SpiritPktBasicAddressesInit+0xd8>)
 8002956:	b212      	sxth	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	7019      	strb	r1, [r3, #0]
 800295c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002960:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 800296a:	7b3b      	ldrb	r3, [r7, #12]
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	b2db      	uxtb	r3, r3
 8002972:	733b      	strb	r3, [r7, #12]
 8002974:	e004      	b.n	8002980 <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002976:	7b3b      	ldrb	r3, [r7, #12]
 8002978:	f023 0308 	bic.w	r3, r3, #8
 800297c:	b2db      	uxtb	r3, r3
 800297e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002988:	7b3b      	ldrb	r3, [r7, #12]
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	b2db      	uxtb	r3, r3
 8002990:	733b      	strb	r3, [r7, #12]
 8002992:	e004      	b.n	800299e <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002994:	7b3b      	ldrb	r3, [r7, #12]
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	b2db      	uxtb	r3, r3
 800299c:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	791b      	ldrb	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80029a6:	7b3b      	ldrb	r3, [r7, #12]
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	733b      	strb	r3, [r7, #12]
 80029b0:	e004      	b.n	80029bc <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80029b2:	7b3b      	ldrb	r3, [r7, #12]
 80029b4:	f023 0302 	bic.w	r3, r3, #2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	461a      	mov	r2, r3
 80029c2:	2101      	movs	r1, #1
 80029c4:	204f      	movs	r0, #79	; 0x4f
 80029c6:	f002 f979 	bl	8004cbc <RadioSpiWriteRegisters>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <SpiritPktBasicAddressesInit+0xd8>)
 80029ce:	b212      	sxth	r2, r2
 80029d0:	4611      	mov	r1, r2
 80029d2:	7019      	strb	r1, [r3, #0]
 80029d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029d8:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	795b      	ldrb	r3, [r3, #5]
 80029de:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	78db      	ldrb	r3, [r3, #3]
 80029e4:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	461a      	mov	r2, r3
 80029f2:	2103      	movs	r1, #3
 80029f4:	204c      	movs	r0, #76	; 0x4c
 80029f6:	f002 f961 	bl	8004cbc <RadioSpiWriteRegisters>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SpiritPktBasicAddressesInit+0xd8>)
 80029fe:	b212      	sxth	r2, r2
 8002a00:	4611      	mov	r1, r2
 8002a02:	7019      	strb	r1, [r3, #0]
 8002a04:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a08:	705a      	strb	r2, [r3, #1]
  
  
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200003f8 	.word	0x200003f8

08002a18 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002a1e:	1dfb      	adds	r3, r7, #7
 8002a20:	461a      	mov	r2, r3
 8002a22:	2101      	movs	r1, #1
 8002a24:	2030      	movs	r0, #48	; 0x30
 8002a26:	f002 f9f5 	bl	8004e14 <RadioSpiReadRegisters>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <SpiritPktBasicGetAddressField+0x3c>)
 8002a2e:	b212      	sxth	r2, r2
 8002a30:	4611      	mov	r1, r2
 8002a32:	7019      	strb	r1, [r3, #0]
 8002a34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a38:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 0318 	and.w	r3, r3, #24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8002a48:	2300      	movs	r3, #0
  }

}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200003f8 	.word	0x200003f8

08002a58 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8002a66:	f7ff ffd7 	bl	8002a18 <SpiritPktBasicGetAddressField>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8002a74:	f000 f828 	bl	8002ac8 <SpiritPktCommonGetControlLength>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	4413      	add	r3, r2
 8002a80:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	4413      	add	r3, r2
 8002a96:	121b      	asrs	r3, r3, #8
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	2034      	movs	r0, #52	; 0x34
 8002aa6:	f002 f909 	bl	8004cbc <RadioSpiWriteRegisters>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <SpiritPktBasicSetPayloadLength+0x6c>)
 8002aae:	b212      	sxth	r2, r2
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	7019      	strb	r1, [r3, #0]
 8002ab4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ab8:	705a      	strb	r2, [r3, #1]

}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200003f8 	.word	0x200003f8

08002ac8 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2030      	movs	r0, #48	; 0x30
 8002ad6:	f002 f99d 	bl	8004e14 <RadioSpiReadRegisters>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <SpiritPktCommonGetControlLength+0x34>)
 8002ade:	b212      	sxth	r2, r2
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	7019      	strb	r1, [r3, #0]
 8002ae4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae8:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	b2db      	uxtb	r3, r3

}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200003f8 	.word	0x200003f8

08002b00 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002b0a:	f107 030f 	add.w	r3, r7, #15
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2101      	movs	r1, #1
 8002b12:	204f      	movs	r0, #79	; 0x4f
 8002b14:	f002 f97e 	bl	8004e14 <RadioSpiReadRegisters>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <SpiritPktCommonFilterOnCrc+0x6c>)
 8002b1c:	b212      	sxth	r2, r2
 8002b1e:	4611      	mov	r1, r2
 8002b20:	7019      	strb	r1, [r3, #0]
 8002b22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b26:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e004      	b.n	8002b44 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002b44:	f107 030f 	add.w	r3, r7, #15
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	204f      	movs	r0, #79	; 0x4f
 8002b4e:	f002 f8b5 	bl	8004cbc <RadioSpiWriteRegisters>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SpiritPktCommonFilterOnCrc+0x6c>)
 8002b56:	b212      	sxth	r2, r2
 8002b58:	4611      	mov	r1, r2
 8002b5a:	7019      	strb	r1, [r3, #0]
 8002b5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b60:	705a      	strb	r2, [r3, #1]

}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200003f8 	.word	0x200003f8

08002b70 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2101      	movs	r1, #1
 8002b80:	204b      	movs	r0, #75	; 0x4b
 8002b82:	f002 f89b 	bl	8004cbc <RadioSpiWriteRegisters>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002b8a:	b212      	sxth	r2, r2
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	7019      	strb	r1, [r3, #0]
 8002b90:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b94:	705a      	strb	r2, [r3, #1]

}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200003f8 	.word	0x200003f8

08002ba4 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	461a      	mov	r2, r3
 8002bae:	2101      	movs	r1, #1
 8002bb0:	20d3      	movs	r0, #211	; 0xd3
 8002bb2:	f002 f92f 	bl	8004e14 <RadioSpiReadRegisters>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8002bba:	b212      	sxth	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	7019      	strb	r1, [r3, #0]
 8002bc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bc4:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002bc6:	79fb      	ldrb	r3, [r7, #7]

}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200003f8 	.word	0x200003f8

08002bd4 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002bde:	f107 030f 	add.w	r3, r7, #15
 8002be2:	461a      	mov	r2, r3
 8002be4:	2101      	movs	r1, #1
 8002be6:	203a      	movs	r0, #58	; 0x3a
 8002be8:	f002 f914 	bl	8004e14 <RadioSpiReadRegisters>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <SpiritQiSqiCheck+0x6c>)
 8002bf0:	b212      	sxth	r2, r2
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	7019      	strb	r1, [r3, #0]
 8002bf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bfa:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e004      	b.n	8002c18 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	f023 0302 	bic.w	r3, r3, #2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002c18:	f107 030f 	add.w	r3, r7, #15
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2101      	movs	r1, #1
 8002c20:	203a      	movs	r0, #58	; 0x3a
 8002c22:	f002 f84b 	bl	8004cbc <RadioSpiWriteRegisters>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SpiritQiSqiCheck+0x6c>)
 8002c2a:	b212      	sxth	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	7019      	strb	r1, [r3, #0]
 8002c30:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c34:	705a      	strb	r2, [r3, #1]

}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200003f8 	.word	0x200003f8

08002c44 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002c4e:	f107 030f 	add.w	r3, r7, #15
 8002c52:	461a      	mov	r2, r3
 8002c54:	2101      	movs	r1, #1
 8002c56:	203a      	movs	r0, #58	; 0x3a
 8002c58:	f002 f8dc 	bl	8004e14 <RadioSpiReadRegisters>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <SpiritQiSetSqiThreshold+0x64>)
 8002c60:	b212      	sxth	r2, r2
 8002c62:	4611      	mov	r1, r2
 8002c64:	7019      	strb	r1, [r3, #0]
 8002c66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c6a:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002c80:	f107 030f 	add.w	r3, r7, #15
 8002c84:	461a      	mov	r2, r3
 8002c86:	2101      	movs	r1, #1
 8002c88:	203a      	movs	r0, #58	; 0x3a
 8002c8a:	f002 f817 	bl	8004cbc <RadioSpiWriteRegisters>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SpiritQiSetSqiThreshold+0x64>)
 8002c92:	b212      	sxth	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	7019      	strb	r1, [r3, #0]
 8002c98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c9c:	705a      	strb	r2, [r3, #1]

}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200003f8 	.word	0x200003f8

08002cac <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3382      	adds	r3, #130	; 0x82
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002cc0:	f107 030f 	add.w	r3, r7, #15
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	2022      	movs	r0, #34	; 0x22
 8002cca:	f001 fff7 	bl	8004cbc <RadioSpiWriteRegisters>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002cd2:	b212      	sxth	r2, r2
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	7019      	strb	r1, [r3, #0]
 8002cd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cdc:	705a      	strb	r2, [r3, #1]

}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200003f8 	.word	0x200003f8
 8002cec:	00000000 	.word	0x00000000

08002cf0 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b08d      	sub	sp, #52	; 0x34
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002cf8:	23a0      	movs	r3, #160	; 0xa0
 8002cfa:	747b      	strb	r3, [r7, #17]
 8002cfc:	f107 0311 	add.w	r3, r7, #17
 8002d00:	461a      	mov	r2, r3
 8002d02:	2101      	movs	r1, #1
 8002d04:	209f      	movs	r0, #159	; 0x9f
 8002d06:	f001 ffd9 	bl	8004cbc <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d28:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8003008 <SpiritRadioInit+0x318>
 8002d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d34:	ee17 3a90 	vmov	r3, s15
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002d3a:	2063      	movs	r0, #99	; 0x63
 8002d3c:	f002 f91c 	bl	8004f78 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002d40:	2300      	movs	r3, #0
 8002d42:	73bb      	strb	r3, [r7, #14]
 8002d44:	e004      	b.n	8002d50 <SpiritRadioInit+0x60>
 8002d46:	7bbb      	ldrb	r3, [r7, #14]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	73bb      	strb	r3, [r7, #14]
 8002d50:	7bbb      	ldrb	r3, [r7, #14]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2bff      	cmp	r3, #255	; 0xff
 8002d56:	d1f6      	bne.n	8002d46 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002d58:	f001 fbc6 	bl	80044e8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002d5c:	4bab      	ldr	r3, [pc, #684]	; (800300c <SpiritRadioInit+0x31c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d1ea      	bne.n	8002d40 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002d6a:	4ba9      	ldr	r3, [pc, #676]	; (8003010 <SpiritRadioInit+0x320>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4aa9      	ldr	r2, [pc, #676]	; (8003014 <SpiritRadioInit+0x324>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d803      	bhi.n	8002d7c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f001 f98d 	bl	8004094 <SpiritRadioSetDigDiv>
 8002d7a:	e002      	b.n	8002d82 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f001 f989 	bl	8004094 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002d82:	2062      	movs	r0, #98	; 0x62
 8002d84:	f002 f8f8 	bl	8004f78 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	737b      	strb	r3, [r7, #13]
 8002d8c:	e004      	b.n	8002d98 <SpiritRadioInit+0xa8>
 8002d8e:	7b7b      	ldrb	r3, [r7, #13]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	737b      	strb	r3, [r7, #13]
 8002d98:	7b7b      	ldrb	r3, [r7, #13]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2bff      	cmp	r3, #255	; 0xff
 8002d9e:	d1f6      	bne.n	8002d8e <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002da0:	f001 fba2 	bl	80044e8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002da4:	4b99      	ldr	r3, [pc, #612]	; (800300c <SpiritRadioInit+0x31c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d1ea      	bne.n	8002d88 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	ee07 3a90 	vmov	s15, r3
 8002db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dbc:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8003018 <SpiritRadioInit+0x328>
 8002dc0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002dc4:	4b92      	ldr	r3, [pc, #584]	; (8003010 <SpiritRadioInit+0x320>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd8:	ee17 3a90 	vmov	r3, s15
 8002ddc:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002dde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002dee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	025a      	lsls	r2, r3, #9
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <SpiritRadioInit+0x320>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fca7 	bl	8002764 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	20a3      	movs	r0, #163	; 0xa3
 8002e20:	f001 fff8 	bl	8004e14 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002e24:	7c3b      	ldrb	r3, [r7, #16]
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	743b      	strb	r3, [r7, #16]
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	461a      	mov	r2, r3
 8002e34:	2101      	movs	r1, #1
 8002e36:	20a3      	movs	r0, #163	; 0xa3
 8002e38:	f001 ff40 	bl	8004cbc <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f107 0216 	add.w	r2, r7, #22
 8002e44:	f107 0117 	add.w	r1, r7, #23
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fc59 	bl	8003700 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7b5a      	ldrb	r2, [r3, #13]
 8002e56:	7dbb      	ldrb	r3, [r7, #22]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	461a      	mov	r2, r3
 8002e64:	2101      	movs	r1, #1
 8002e66:	201c      	movs	r0, #28
 8002e68:	f001 ffd4 	bl	8004e14 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f107 0214 	add.w	r2, r7, #20
 8002e74:	f107 0115 	add.w	r1, r7, #21
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fde1 	bl	8003a40 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002e7e:	7d3b      	ldrb	r3, [r7, #20]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	b25a      	sxtb	r2, r3
 8002e84:	7c3b      	ldrb	r3, [r7, #16]
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b25a      	sxtb	r2, r3
 8002e92:	7d7b      	ldrb	r3, [r7, #21]
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f107 0212 	add.w	r2, r7, #18
 8002ea6:	f107 0113 	add.w	r1, r7, #19
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fcdc 	bl	8003868 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	b25a      	sxtb	r2, r3
 8002eb6:	7cbb      	ldrb	r3, [r7, #18]
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002ec2:	4b53      	ldr	r3, [pc, #332]	; (8003010 <SpiritRadioInit+0x320>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0b1b      	lsrs	r3, r3, #12
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ed0:	eddf 6a52 	vldr	s13, [pc, #328]	; 800301c <SpiritRadioInit+0x32c>
 8002ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed8:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003020 <SpiritRadioInit+0x330>
 8002edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ee0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002ee4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f04:	dd0a      	ble.n	8002f1c <SpiritRadioInit+0x22c>
 8002f06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0e:	edc7 7a00 	vstr	s15, [r7]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e007      	b.n	8002f2c <SpiritRadioInit+0x23c>
 8002f1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f24:	edc7 7a00 	vstr	s15, [r7]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002f2e:	4b38      	ldr	r3, [pc, #224]	; (8003010 <SpiritRadioInit+0x320>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a38      	ldr	r2, [pc, #224]	; (8003014 <SpiritRadioInit+0x324>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d802      	bhi.n	8002f3e <SpiritRadioInit+0x24e>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	777b      	strb	r3, [r7, #29]
 8002f3c:	e035      	b.n	8002faa <SpiritRadioInit+0x2ba>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002f3e:	4b34      	ldr	r3, [pc, #208]	; (8003010 <SpiritRadioInit+0x320>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0b5b      	lsrs	r3, r3, #13
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f4c:	eddf 6a33 	vldr	s13, [pc, #204]	; 800301c <SpiritRadioInit+0x32c>
 8002f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f54:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003020 <SpiritRadioInit+0x330>
 8002f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002f60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	dd0a      	ble.n	8002f98 <SpiritRadioInit+0x2a8>
 8002f82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f8a:	edc7 7a00 	vstr	s15, [r7]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e007      	b.n	8002fa8 <SpiritRadioInit+0x2b8>
 8002f98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa0:	edc7 7a00 	vstr	s15, [r7]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002faa:	f107 030f 	add.w	r3, r7, #15
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2007      	movs	r0, #7
 8002fb4:	f001 fe82 	bl	8004cbc <RadioSpiWriteRegisters>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <SpiritRadioInit+0x31c>)
 8002fbc:	b212      	sxth	r2, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	7019      	strb	r1, [r3, #0]
 8002fc2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fc6:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <SpiritRadioInit+0x320>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <SpiritRadioInit+0x334>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d92a      	bls.n	8003028 <SpiritRadioInit+0x338>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <SpiritRadioInit+0x320>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fa3f 	bl	800045c <__aeabi_ui2d>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	a307      	add	r3, pc, #28	; (adr r3, 8003000 <SpiritRadioInit+0x310>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f7fd fd38 	bl	8000a5c <__aeabi_dcmpge>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <SpiritRadioInit+0x306>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	b2e3      	uxtb	r3, r4
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f879 	bl	80030f0 <SpiritRadioSetXtalFlag>
 8002ffe:	e028      	b.n	8003052 <SpiritRadioInit+0x362>
 8003000:	00000000 	.word	0x00000000
 8003004:	4177d784 	.word	0x4177d784
 8003008:	49742400 	.word	0x49742400
 800300c:	200003f8 	.word	0x200003f8
 8003010:	200002ec 	.word	0x200002ec
 8003014:	01c9c37f 	.word	0x01c9c37f
 8003018:	48800000 	.word	0x48800000
 800301c:	49afd520 	.word	0x49afd520
 8003020:	42800000 	.word	0x42800000
 8003024:	01c9c380 	.word	0x01c9c380
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003028:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <SpiritRadioInit+0x3f8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fa15 	bl	800045c <__aeabi_ui2d>
 8003032:	2301      	movs	r3, #1
 8003034:	461c      	mov	r4, r3
 8003036:	a32a      	add	r3, pc, #168	; (adr r3, 80030e0 <SpiritRadioInit+0x3f0>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fd0e 	bl	8000a5c <__aeabi_dcmpge>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <SpiritRadioInit+0x35a>
 8003046:	2300      	movs	r3, #0
 8003048:	461c      	mov	r4, r3
 800304a:	b2e3      	uxtb	r3, r4
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f84f 	bl	80030f0 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	330c      	adds	r3, #12
 8003056:	461a      	mov	r2, r3
 8003058:	2101      	movs	r1, #1
 800305a:	206c      	movs	r0, #108	; 0x6c
 800305c:	f001 fe2e 	bl	8004cbc <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	461a      	mov	r2, r3
 8003066:	2104      	movs	r1, #4
 8003068:	200c      	movs	r0, #12
 800306a:	f001 fe27 	bl	8004cbc <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 800306e:	f107 0318 	add.w	r3, r7, #24
 8003072:	461a      	mov	r2, r3
 8003074:	2104      	movs	r1, #4
 8003076:	201a      	movs	r0, #26
 8003078:	f001 fe20 	bl	8004cbc <RadioSpiWriteRegisters>
 800307c:	4602      	mov	r2, r0
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <SpiritRadioInit+0x3fc>)
 8003080:	b212      	sxth	r2, r2
 8003082:	4611      	mov	r1, r2
 8003084:	7019      	strb	r1, [r3, #0]
 8003086:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800308a:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 800308c:	2001      	movs	r0, #1
 800308e:	f000 ff1d 	bl	8003ecc <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8003096:	23e3      	movs	r3, #227	; 0xe3
 8003098:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	461a      	mov	r2, r3
 80030a0:	2102      	movs	r1, #2
 80030a2:	2099      	movs	r0, #153	; 0x99
 80030a4:	f001 fe0a 	bl	8004cbc <RadioSpiWriteRegisters>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <SpiritRadioInit+0x3fc>)
 80030ac:	b212      	sxth	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	7019      	strb	r1, [r3, #0]
 80030b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030b6:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80030b8:	2322      	movs	r3, #34	; 0x22
 80030ba:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	461a      	mov	r2, r3
 80030c2:	2101      	movs	r1, #1
 80030c4:	20bc      	movs	r0, #188	; 0xbc
 80030c6:	f001 fdf9 	bl	8004cbc <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f9ac 	bl	800342c <SpiritRadioSetFrequencyBase>
 80030d4:	4603      	mov	r3, r0
  
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3734      	adds	r7, #52	; 0x34
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd90      	pop	{r4, r7, pc}
 80030de:	bf00      	nop
 80030e0:	00000000 	.word	0x00000000
 80030e4:	4177d784 	.word	0x4177d784
 80030e8:	200002ec 	.word	0x200002ec
 80030ec:	200003f8 	.word	0x200003f8

080030f0 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80030fe:	f107 030f 	add.w	r3, r7, #15
 8003102:	461a      	mov	r2, r3
 8003104:	2101      	movs	r1, #1
 8003106:	2001      	movs	r0, #1
 8003108:	f001 fe84 	bl	8004e14 <RadioSpiReadRegisters>
 800310c:	4602      	mov	r2, r0
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <SpiritRadioSetXtalFlag+0x70>)
 8003110:	b212      	sxth	r2, r2
 8003112:	4611      	mov	r1, r2
 8003114:	7019      	strb	r1, [r3, #0]
 8003116:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800311a:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003128:	b2db      	uxtb	r3, r3
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e004      	b.n	8003138 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003134:	b2db      	uxtb	r3, r3
 8003136:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003138:	f107 030f 	add.w	r3, r7, #15
 800313c:	461a      	mov	r2, r3
 800313e:	2101      	movs	r1, #1
 8003140:	2001      	movs	r0, #1
 8003142:	f001 fdbb 	bl	8004cbc <RadioSpiWriteRegisters>
 8003146:	4602      	mov	r2, r0
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <SpiritRadioSetXtalFlag+0x70>)
 800314a:	b212      	sxth	r2, r2
 800314c:	4611      	mov	r1, r2
 800314e:	7019      	strb	r1, [r3, #0]
 8003150:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003154:	705a      	strb	r2, [r3, #1]
  
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200003f8 	.word	0x200003f8

08003164 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8003174:	2300      	movs	r3, #0
 8003176:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <SpiritRadioSearchWCP+0x100>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d906      	bls.n	800318e <SpiritRadioSearchWCP+0x2a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a39      	ldr	r2, [pc, #228]	; (8003268 <SpiritRadioSearchWCP+0x104>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d802      	bhi.n	800318e <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003188:	2306      	movs	r3, #6
 800318a:	73bb      	strb	r3, [r7, #14]
 800318c:	e01f      	b.n	80031ce <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a36      	ldr	r2, [pc, #216]	; (800326c <SpiritRadioSearchWCP+0x108>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d906      	bls.n	80031a4 <SpiritRadioSearchWCP+0x40>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a35      	ldr	r2, [pc, #212]	; (8003270 <SpiritRadioSearchWCP+0x10c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 800319e:	230c      	movs	r3, #12
 80031a0:	73bb      	strb	r3, [r7, #14]
 80031a2:	e014      	b.n	80031ce <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a33      	ldr	r2, [pc, #204]	; (8003274 <SpiritRadioSearchWCP+0x110>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d906      	bls.n	80031ba <SpiritRadioSearchWCP+0x56>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a32      	ldr	r2, [pc, #200]	; (8003278 <SpiritRadioSearchWCP+0x114>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d802      	bhi.n	80031ba <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80031b4:	2310      	movs	r3, #16
 80031b6:	73bb      	strb	r3, [r7, #14]
 80031b8:	e009      	b.n	80031ce <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2f      	ldr	r2, [pc, #188]	; (800327c <SpiritRadioSearchWCP+0x118>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d905      	bls.n	80031ce <SpiritRadioSearchWCP+0x6a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2e      	ldr	r2, [pc, #184]	; (8003280 <SpiritRadioSearchWCP+0x11c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d801      	bhi.n	80031ce <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80031ca:	2320      	movs	r3, #32
 80031cc:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <SpiritRadioSearchWCP+0x120>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	7bba      	ldrb	r2, [r7, #14]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80031e0:	f241 631f 	movw	r3, #5663	; 0x161f
 80031e4:	461a      	mov	r2, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	fb03 f302 	mul.w	r3, r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80031f4:	230f      	movs	r3, #15
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e023      	b.n	8003242 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	e005      	b.n	800320c <SpiritRadioSearchWCP+0xa8>
 8003200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003210:	2b0e      	cmp	r3, #14
 8003212:	dc0c      	bgt.n	800322e <SpiritRadioSearchWCP+0xca>
 8003214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003218:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <SpiritRadioSearchWCP+0x124>)
 800321a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800321e:	461a      	mov	r2, r3
 8003220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003224:	fb03 f302 	mul.w	r3, r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d8e8      	bhi.n	8003200 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 800322e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <SpiritRadioSearchWCP+0xde>
      i--;
 8003236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	425a      	negs	r2, r3
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	f002 0207 	and.w	r2, r2, #7
 8003250:	bf58      	it	pl
 8003252:	4253      	negpl	r3, r2
 8003254:	b25b      	sxtb	r3, r3
 8003256:	b2db      	uxtb	r3, r3
  
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	2e5f567f 	.word	0x2e5f567f
 8003268:	390c2fe0 	.word	0x390c2fe0
 800326c:	1701e47f 	.word	0x1701e47f
 8003270:	1c146a60 	.word	0x1c146a60
 8003274:	11d260bf 	.word	0x11d260bf
 8003278:	14ced7e0 	.word	0x14ced7e0
 800327c:	08e18f3f 	.word	0x08e18f3f
 8003280:	0a6fd060 	.word	0x0a6fd060
 8003284:	10624dd3 	.word	0x10624dd3
 8003288:	0800808c 	.word	0x0800808c

0800328c <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	461a      	mov	r2, r3
 8003296:	2104      	movs	r1, #4
 8003298:	2008      	movs	r0, #8
 800329a:	f001 fdbb 	bl	8004e14 <RadioSpiReadRegisters>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <SpiritRadioGetSynthWord+0x48>)
 80032a2:	b212      	sxth	r2, r2
 80032a4:	4611      	mov	r1, r2
 80032a6:	7019      	strb	r1, [r3, #0]
 80032a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032ac:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80032ae:	793b      	ldrb	r3, [r7, #4]
 80032b0:	055b      	lsls	r3, r3, #21
 80032b2:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80032b6:	797b      	ldrb	r3, [r7, #5]
 80032b8:	035b      	lsls	r3, r3, #13
 80032ba:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80032bc:	79bb      	ldrb	r3, [r7, #6]
 80032be:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80032c0:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80032c2:	79fa      	ldrb	r2, [r7, #7]
 80032c4:	08d2      	lsrs	r2, r2, #3
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	4413      	add	r3, r2
  
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200003f8 	.word	0x200003f8

080032d8 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	461a      	mov	r2, r3
 80032e2:	2101      	movs	r1, #1
 80032e4:	200b      	movs	r0, #11
 80032e6:	f001 fd95 	bl	8004e14 <RadioSpiReadRegisters>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <SpiritRadioGetBand+0x58>)
 80032ee:	b212      	sxth	r2, r2
 80032f0:	4611      	mov	r1, r2
 80032f2:	7019      	strb	r1, [r3, #0]
 80032f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032f8:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003304:	2300      	movs	r3, #0
 8003306:	e00e      	b.n	8003326 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	2b03      	cmp	r3, #3
 8003310:	d101      	bne.n	8003316 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003312:	2301      	movs	r3, #1
 8003314:	e007      	b.n	8003326 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b04      	cmp	r3, #4
 800331e:	d101      	bne.n	8003324 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003320:	2302      	movs	r3, #2
 8003322:	e000      	b.n	8003326 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003324:	2303      	movs	r3, #3
  }
  
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200003f8 	.word	0x200003f8

08003334 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	461a      	mov	r2, r3
 800333e:	2101      	movs	r1, #1
 8003340:	206c      	movs	r0, #108	; 0x6c
 8003342:	f001 fd67 	bl	8004e14 <RadioSpiReadRegisters>
 8003346:	4602      	mov	r2, r0
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SpiritRadioGetChannel+0x2c>)
 800334a:	b212      	sxth	r2, r2
 800334c:	4611      	mov	r1, r2
 800334e:	7019      	strb	r1, [r3, #0]
 8003350:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003354:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8003356:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200003f8 	.word	0x200003f8

08003364 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	461a      	mov	r2, r3
 800336e:	2101      	movs	r1, #1
 8003370:	200c      	movs	r0, #12
 8003372:	f001 fd4f 	bl	8004e14 <RadioSpiReadRegisters>
 8003376:	4602      	mov	r2, r0
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <SpiritRadioGetChannelSpace+0x38>)
 800337a:	b212      	sxth	r2, r2
 800337c:	4611      	mov	r1, r2
 800337e:	7019      	strb	r1, [r3, #0]
 8003380:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003384:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	461a      	mov	r2, r3
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SpiritRadioGetChannelSpace+0x3c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	fb03 f302 	mul.w	r3, r3, r2
 8003392:	0bdb      	lsrs	r3, r3, #15
  
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200003f8 	.word	0x200003f8
 80033a0:	200002ec 	.word	0x200002ec

080033a4 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	461a      	mov	r2, r3
 80033ae:	2102      	movs	r1, #2
 80033b0:	200e      	movs	r0, #14
 80033b2:	f001 fd2f 	bl	8004e14 <RadioSpiReadRegisters>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <SpiritRadioGetFrequencyOffset+0x80>)
 80033ba:	b212      	sxth	r2, r2
 80033bc:	4611      	mov	r1, r2
 80033be:	7019      	strb	r1, [r3, #0]
 80033c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80033c4:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80033c6:	793b      	ldrb	r3, [r7, #4]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	797b      	ldrb	r3, [r7, #5]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80033e2:	887b      	ldrh	r3, [r7, #2]
 80033e4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80033e8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	e004      	b.n	80033fc <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80033fc:	1cbb      	adds	r3, r7, #2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <SpiritRadioGetFrequencyOffset+0x84>)
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	da03      	bge.n	800341a <SpiritRadioGetFrequencyOffset+0x76>
 8003412:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003416:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800341a:	149b      	asrs	r3, r3, #18
  
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200003f8 	.word	0x200003f8
 8003428:	200002ec 	.word	0x200002ec

0800342c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 800342c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003430:	b08a      	sub	sp, #40	; 0x28
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003436:	2300      	movs	r3, #0
 8003438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a79      	ldr	r2, [pc, #484]	; (8003624 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d907      	bls.n	8003454 <SpiritRadioSetFrequencyBase+0x28>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a78      	ldr	r2, [pc, #480]	; (8003628 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d803      	bhi.n	8003454 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003452:	e022      	b.n	800349a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a75      	ldr	r2, [pc, #468]	; (800362c <SpiritRadioSetFrequencyBase+0x200>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d907      	bls.n	800346c <SpiritRadioSetFrequencyBase+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a74      	ldr	r2, [pc, #464]	; (8003630 <SpiritRadioSetFrequencyBase+0x204>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d803      	bhi.n	800346c <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800346a:	e016      	b.n	800349a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a71      	ldr	r2, [pc, #452]	; (8003634 <SpiritRadioSetFrequencyBase+0x208>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d907      	bls.n	8003484 <SpiritRadioSetFrequencyBase+0x58>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a70      	ldr	r2, [pc, #448]	; (8003638 <SpiritRadioSetFrequencyBase+0x20c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d803      	bhi.n	8003484 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 800347c:	2302      	movs	r3, #2
 800347e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003482:	e00a      	b.n	800349a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a6d      	ldr	r2, [pc, #436]	; (800363c <SpiritRadioSetFrequencyBase+0x210>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d906      	bls.n	800349a <SpiritRadioSetFrequencyBase+0x6e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a6c      	ldr	r2, [pc, #432]	; (8003640 <SpiritRadioSetFrequencyBase+0x214>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d802      	bhi.n	800349a <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8003494:	2303      	movs	r3, #3
 8003496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800349a:	f7ff ff83 	bl	80033a4 <SpiritRadioGetFrequencyOffset>
 800349e:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80034a0:	f7ff ff60 	bl	8003364 <SpiritRadioGetChannelSpace>
 80034a4:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80034a6:	f7ff ff45 	bl	8003334 <SpiritRadioGetChannel>
 80034aa:	4603      	mov	r3, r0
 80034ac:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	441a      	add	r2, r3
 80034b4:	7efb      	ldrb	r3, [r7, #27]
 80034b6:	69f9      	ldr	r1, [r7, #28]
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80034c0:	f000 fdc6 	bl	8004050 <SpiritRadioGetRefDiv>
 80034c4:	4603      	mov	r3, r0
 80034c6:	3301      	adds	r3, #1
 80034c8:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80034ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d839      	bhi.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <SpiritRadioSetFrequencyBase+0xac>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003519 	.word	0x08003519
 80034e0:	08003501 	.word	0x08003501
 80034e4:	080034e9 	.word	0x080034e9
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4a56      	ldr	r2, [pc, #344]	; (8003644 <SpiritRadioSetFrequencyBase+0x218>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d803      	bhi.n	80034f8 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fe fcfb 	bl	8001eec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80034f6:	e026      	b.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7fe fcf7 	bl	8001eec <SpiritCalibrationSelectVco>
    break;
 80034fe:	e022      	b.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	4a51      	ldr	r2, [pc, #324]	; (8003648 <SpiritRadioSetFrequencyBase+0x21c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d803      	bhi.n	8003510 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003508:	2000      	movs	r0, #0
 800350a:	f7fe fcef 	bl	8001eec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800350e:	e01a      	b.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003510:	2001      	movs	r0, #1
 8003512:	f7fe fceb 	bl	8001eec <SpiritCalibrationSelectVco>
    break;
 8003516:	e016      	b.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4a4c      	ldr	r2, [pc, #304]	; (800364c <SpiritRadioSetFrequencyBase+0x220>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d803      	bhi.n	8003528 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fe fce3 	bl	8001eec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003526:	e00e      	b.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003528:	2001      	movs	r0, #1
 800352a:	f7fe fcdf 	bl	8001eec <SpiritCalibrationSelectVco>
    break;
 800352e:	e00a      	b.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4a47      	ldr	r2, [pc, #284]	; (8003650 <SpiritRadioSetFrequencyBase+0x224>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d803      	bhi.n	8003540 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fe fcd7 	bl	8001eec <SpiritCalibrationSelectVco>
 800353e:	e002      	b.n	8003546 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003540:	2001      	movs	r0, #1
 8003542:	f7fe fcd3 	bl	8001eec <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff fe0c 	bl	8003164 <SpiritRadioSearchWCP>
 800354c:	4603      	mov	r3, r0
 800354e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003554:	4a3f      	ldr	r2, [pc, #252]	; (8003654 <SpiritRadioSetFrequencyBase+0x228>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	fb03 f302 	mul.w	r3, r3, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc ff7b 	bl	800045c <__aeabi_ui2d>
 8003566:	4604      	mov	r4, r0
 8003568:	460d      	mov	r5, r1
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	049b      	lsls	r3, r3, #18
 800356e:	4618      	mov	r0, r3
 8003570:	f7fc ff84 	bl	800047c <__aeabi_i2d>
 8003574:	4680      	mov	r8, r0
 8003576:	4689      	mov	r9, r1
 8003578:	4b37      	ldr	r3, [pc, #220]	; (8003658 <SpiritRadioSetFrequencyBase+0x22c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ff6d 	bl	800045c <__aeabi_ui2d>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4640      	mov	r0, r8
 8003588:	4649      	mov	r1, r9
 800358a:	f7fd f90b 	bl	80007a4 <__aeabi_ddiv>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4620      	mov	r0, r4
 8003594:	4629      	mov	r1, r5
 8003596:	f7fc ffdb 	bl	8000550 <__aeabi_dmul>
 800359a:	4603      	mov	r3, r0
 800359c:	460c      	mov	r4, r1
 800359e:	4618      	mov	r0, r3
 80035a0:	4621      	mov	r1, r4
 80035a2:	f7fd fa6f 	bl	8000a84 <__aeabi_d2uiz>
 80035a6:	4603      	mov	r3, r0
 80035a8:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0d5b      	lsrs	r3, r3, #21
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	7cbb      	ldrb	r3, [r7, #18]
 80035b8:	015b      	lsls	r3, r3, #5
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4313      	orrs	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	0b5b      	lsrs	r3, r3, #13
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035de:	491f      	ldr	r1, [pc, #124]	; (800365c <SpiritRadioSetFrequencyBase+0x230>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80035e8:	f107 0308 	add.w	r3, r7, #8
 80035ec:	461a      	mov	r2, r3
 80035ee:	2104      	movs	r1, #4
 80035f0:	2008      	movs	r0, #8
 80035f2:	f001 fb63 	bl	8004cbc <RadioSpiWriteRegisters>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <SpiritRadioSetFrequencyBase+0x234>)
 80035fa:	b212      	sxth	r2, r2
 80035fc:	4611      	mov	r1, r2
 80035fe:	7019      	strb	r1, [r3, #0]
 8003600:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003604:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <SpiritRadioSetFrequencyBase+0x238>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d103      	bne.n	8003616 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 800360e:	f7fe ff95 	bl	800253c <SpiritManagementWaVcoCalibration>
 8003612:	4603      	mov	r3, r0
 8003614:	e000      	b.n	8003618 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003622:	bf00      	nop
 8003624:	2e5f567f 	.word	0x2e5f567f
 8003628:	390c2fe0 	.word	0x390c2fe0
 800362c:	1701e47f 	.word	0x1701e47f
 8003630:	1c146a60 	.word	0x1c146a60
 8003634:	11d260bf 	.word	0x11d260bf
 8003638:	14ced7e0 	.word	0x14ced7e0
 800363c:	08e18f3f 	.word	0x08e18f3f
 8003640:	0a6fd060 	.word	0x0a6fd060
 8003644:	099cf4e1 	.word	0x099cf4e1
 8003648:	1339e9c3 	.word	0x1339e9c3
 800364c:	19a28d05 	.word	0x19a28d05
 8003650:	33451a0a 	.word	0x33451a0a
 8003654:	08007fd0 	.word	0x08007fd0
 8003658:	200002ec 	.word	0x200002ec
 800365c:	08007fd4 	.word	0x08007fd4
 8003660:	200003f8 	.word	0x200003f8
 8003664:	20000151 	.word	0x20000151

08003668 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003670:	f7ff fe0c 	bl	800328c <SpiritRadioGetSynthWord>
 8003674:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003676:	f7ff fe2f 	bl	80032d8 <SpiritRadioGetBand>
 800367a:	4603      	mov	r3, r0
 800367c:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 800367e:	f000 fce7 	bl	8004050 <SpiritRadioGetRefDiv>
 8003682:	4603      	mov	r3, r0
 8003684:	3301      	adds	r3, #1
 8003686:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fc fee7 	bl	800045c <__aeabi_ui2d>
 800368e:	4604      	mov	r4, r0
 8003690:	460d      	mov	r5, r1
 8003692:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <SpiritRadioGetFrequencyBase+0x90>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fee0 	bl	800045c <__aeabi_ui2d>
 800369c:	4680      	mov	r8, r0
 800369e:	4689      	mov	r9, r1
 80036a0:	78bb      	ldrb	r3, [r7, #2]
 80036a2:	049b      	lsls	r3, r3, #18
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	4915      	ldr	r1, [pc, #84]	; (80036fc <SpiritRadioGetFrequencyBase+0x94>)
 80036a8:	5c8a      	ldrb	r2, [r1, r2]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc fee4 	bl	800047c <__aeabi_i2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4640      	mov	r0, r8
 80036ba:	4649      	mov	r1, r9
 80036bc:	f7fd f872 	bl	80007a4 <__aeabi_ddiv>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4620      	mov	r0, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	f7fc ff42 	bl	8000550 <__aeabi_dmul>
 80036cc:	4603      	mov	r3, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	ec44 3b17 	vmov	d7, r3, r4
 80036d4:	eeb0 0a47 	vmov.f32	s0, s14
 80036d8:	eef0 0a67 	vmov.f32	s1, s15
 80036dc:	f004 fc08 	bl	8007ef0 <round>
 80036e0:	ec54 3b10 	vmov	r3, r4, d0
 80036e4:	4618      	mov	r0, r3
 80036e6:	4621      	mov	r1, r4
 80036e8:	f7fd f9cc 	bl	8000a84 <__aeabi_d2uiz>
 80036ec:	4603      	mov	r3, r0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036f8:	200002ec 	.word	0x200002ec
 80036fc:	08007fd0 	.word	0x08007fd0

08003700 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 800370c:	2300      	movs	r3, #0
 800370e:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003710:	230f      	movs	r3, #15
 8003712:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003718:	f000 fcec 	bl	80040f4 <SpiritRadioGetDigDiv>
 800371c:	4603      	mov	r3, r0
 800371e:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003720:	e015      	b.n	800374e <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003722:	4b50      	ldr	r3, [pc, #320]	; (8003864 <SpiritRadioSearchDatarateME+0x164>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800372a:	f1c3 0114 	rsb	r1, r3, #20
 800372e:	7ebb      	ldrb	r3, [r7, #26]
 8003730:	440b      	add	r3, r1
 8003732:	fa22 f303 	lsr.w	r3, r2, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 800373c:	2301      	movs	r3, #1
 800373e:	763b      	strb	r3, [r7, #24]
 8003740:	e005      	b.n	800374e <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 800374e:	7e3b      	ldrb	r3, [r7, #24]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <SpiritRadioSearchDatarateME+0x5e>
 8003756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800375a:	2b00      	cmp	r3, #0
 800375c:	dae1      	bge.n	8003722 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 800375e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da01      	bge.n	800376a <SpiritRadioSearchDatarateME+0x6a>
 8003766:	2300      	movs	r3, #0
 8003768:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 800376a:	7ffa      	ldrb	r2, [r7, #31]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003774:	f1c3 0317 	rsb	r3, r3, #23
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	409a      	lsls	r2, r3
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <SpiritRadioSearchDatarateME+0x164>)
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	7ebb      	ldrb	r3, [r7, #26]
 8003782:	3305      	adds	r3, #5
 8003784:	fa21 f303 	lsr.w	r3, r1, r3
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 800378e:	2300      	movs	r3, #0
 8003790:	77bb      	strb	r3, [r7, #30]
 8003792:	e033      	b.n	80037fc <SpiritRadioSearchDatarateME+0xfc>
  {
    if((cMantissaTmp+j-1))
 8003794:	7e7a      	ldrb	r2, [r7, #25]
 8003796:	7fbb      	ldrb	r3, [r7, #30]
 8003798:	4413      	add	r3, r2
 800379a:	2b01      	cmp	r3, #1
 800379c:	d022      	beq.n	80037e4 <SpiritRadioSearchDatarateME+0xe4>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	7e7b      	ldrb	r3, [r7, #25]
 80037a4:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80037a8:	7fbb      	ldrb	r3, [r7, #30]
 80037aa:	440b      	add	r3, r1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <SpiritRadioSearchDatarateME+0x164>)
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	7ebb      	ldrb	r3, [r7, #26]
 80037b6:	3305      	adds	r3, #5
 80037b8:	fa21 f303 	lsr.w	r3, r1, r3
 80037bc:	fb03 f100 	mul.w	r1, r3, r0
 80037c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037c4:	f1c3 0317 	rsb	r3, r3, #23
 80037c8:	fa21 f303 	lsr.w	r3, r1, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	7fbb      	ldrb	r3, [r7, #30]
 80037d4:	b212      	sxth	r2, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f107 0120 	add.w	r1, r7, #32
 80037dc:	440b      	add	r3, r1
 80037de:	f823 2c10 	strh.w	r2, [r3, #-16]
 80037e2:	e008      	b.n	80037f6 <SpiritRadioSearchDatarateME+0xf6>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80037e4:	7fbb      	ldrb	r3, [r7, #30]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	f107 0220 	add.w	r2, r7, #32
 80037ec:	4413      	add	r3, r2
 80037ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037f2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80037f6:	7fbb      	ldrb	r3, [r7, #30]
 80037f8:	3301      	adds	r3, #1
 80037fa:	77bb      	strb	r3, [r7, #30]
 80037fc:	7fbb      	ldrb	r3, [r7, #30]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d9c8      	bls.n	8003794 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003806:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003808:	2300      	movs	r3, #0
 800380a:	76fb      	strb	r3, [r7, #27]
 800380c:	e023      	b.n	8003856 <SpiritRadioSearchDatarateME+0x156>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 800380e:	7efb      	ldrb	r3, [r7, #27]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	f107 0220 	add.w	r2, r7, #32
 8003816:	4413      	add	r3, r2
 8003818:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800381c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003820:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003824:	8bbb      	ldrh	r3, [r7, #28]
 8003826:	429a      	cmp	r2, r3
 8003828:	da12      	bge.n	8003850 <SpiritRadioSearchDatarateME+0x150>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 800382a:	7efb      	ldrb	r3, [r7, #27]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	f107 0220 	add.w	r2, r7, #32
 8003832:	4413      	add	r3, r2
 8003834:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	bfb8      	it	lt
 800383c:	425b      	neglt	r3, r3
 800383e:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003840:	7e7a      	ldrb	r2, [r7, #25]
 8003842:	7efb      	ldrb	r3, [r7, #27]
 8003844:	4413      	add	r3, r2
 8003846:	b2db      	uxtb	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003850:	7efb      	ldrb	r3, [r7, #27]
 8003852:	3301      	adds	r3, #1
 8003854:	76fb      	strb	r3, [r7, #27]
 8003856:	7efb      	ldrb	r3, [r7, #27]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d9d8      	bls.n	800380e <SpiritRadioSearchDatarateME+0x10e>
    }
  }
  
}
 800385c:	bf00      	nop
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200002ec 	.word	0x200002ec

08003868 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 800387a:	f000 fc3b 	bl	80040f4 <SpiritRadioGetDigDiv>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003884:	2302      	movs	r3, #2
 8003886:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800388a:	e002      	b.n	8003892 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003892:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <SpiritRadioSearchChannelBwME+0x1c4>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <SpiritRadioSearchChannelBwME+0x1c8>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038ae:	e006      	b.n	80038be <SpiritRadioSearchChannelBwME+0x56>
 80038b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038c2:	2b59      	cmp	r3, #89	; 0x59
 80038c4:	dc0f      	bgt.n	80038e6 <SpiritRadioSearchChannelBwME+0x7e>
 80038c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038ca:	4a5a      	ldr	r2, [pc, #360]	; (8003a34 <SpiritRadioSearchChannelBwME+0x1cc>)
 80038cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038d0:	461a      	mov	r2, r3
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fb03 f302 	mul.w	r3, r3, r2
 80038d8:	4a57      	ldr	r2, [pc, #348]	; (8003a38 <SpiritRadioSearchChannelBwME+0x1d0>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0adb      	lsrs	r3, r3, #11
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d3e4      	bcc.n	80038b0 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80038e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d07d      	beq.n	80039ea <SpiritRadioSearchChannelBwME+0x182>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80038ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038f2:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80038fa:	e03e      	b.n	800397a <SpiritRadioSearchChannelBwME+0x112>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80038fc:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003900:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003904:	4413      	add	r3, r2
 8003906:	3b01      	subs	r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	da07      	bge.n	800391c <SpiritRadioSearchChannelBwME+0xb4>
 800390c:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003914:	4413      	add	r3, r2
 8003916:	3b01      	subs	r3, #1
 8003918:	2b59      	cmp	r3, #89	; 0x59
 800391a:	dc1f      	bgt.n	800395c <SpiritRadioSearchChannelBwME+0xf4>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	b29a      	uxth	r2, r3
 8003920:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003924:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003928:	440b      	add	r3, r1
 800392a:	3b01      	subs	r3, #1
 800392c:	4941      	ldr	r1, [pc, #260]	; (8003a34 <SpiritRadioSearchChannelBwME+0x1cc>)
 800392e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003932:	4619      	mov	r1, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	fb03 f301 	mul.w	r3, r3, r1
 800393a:	493f      	ldr	r1, [pc, #252]	; (8003a38 <SpiritRadioSearchChannelBwME+0x1d0>)
 800393c:	fba1 1303 	umull	r1, r3, r1, r3
 8003940:	0adb      	lsrs	r3, r3, #11
 8003942:	b29b      	uxth	r3, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	b29a      	uxth	r2, r3
 8003948:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800394c:	b212      	sxth	r2, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003954:	440b      	add	r3, r1
 8003956:	f823 2c14 	strh.w	r2, [r3, #-20]
 800395a:	e009      	b.n	8003970 <SpiritRadioSearchChannelBwME+0x108>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800395c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003966:	4413      	add	r3, r2
 8003968:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800396c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003970:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003974:	3301      	adds	r3, #1
 8003976:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800397a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800397e:	2b02      	cmp	r3, #2
 8003980:	d9bc      	bls.n	80038fc <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003986:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800398e:	e028      	b.n	80039e2 <SpiritRadioSearchChannelBwME+0x17a>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003990:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800399a:	4413      	add	r3, r2
 800399c:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80039a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80039a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80039a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039aa:	429a      	cmp	r2, r3
 80039ac:	da14      	bge.n	80039d8 <SpiritRadioSearchChannelBwME+0x170>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 80039ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039b8:	4413      	add	r3, r2
 80039ba:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bfb8      	it	lt
 80039c2:	425b      	neglt	r3, r3
 80039c4:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 80039c6:	7efa      	ldrb	r2, [r7, #27]
 80039c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80039cc:	4413      	add	r3, r2
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 80039d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80039dc:	3301      	adds	r3, #1
 80039de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80039e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d9d2      	bls.n	8003990 <SpiritRadioSearchChannelBwME+0x128>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80039ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <SpiritRadioSearchChannelBwME+0x1d4>)
 80039f0:	fb82 1203 	smull	r1, r2, r2, r3
 80039f4:	1052      	asrs	r2, r2, #1
 80039f6:	17db      	asrs	r3, r3, #31
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003a02:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <SpiritRadioSearchChannelBwME+0x1d4>)
 8003a08:	fb83 1302 	smull	r1, r3, r3, r2
 8003a0c:	1059      	asrs	r1, r3, #1
 8003a0e:	17d3      	asrs	r3, r2, #31
 8003a10:	1ac9      	subs	r1, r1, r3
 8003a12:	460b      	mov	r3, r1
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	b25b      	sxtb	r3, r3
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	701a      	strb	r2, [r3, #0]
  
}
 8003a22:	bf00      	nop
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200002ec 	.word	0x200002ec
 8003a30:	51eb851f 	.word	0x51eb851f
 8003a34:	08007fd8 	.word	0x08007fd8
 8003a38:	c9a633fd 	.word	0xc9a633fd
 8003a3c:	38e38e39 	.word	0x38e38e39

08003a40 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <SpiritRadioSearchFreqDevME+0x160>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a5c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003ba4 <SpiritRadioSearchFreqDevME+0x164>
 8003a60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a64:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a6e:	e028      	b.n	8003ac2 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a74:	2201      	movs	r2, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fc fcfe 	bl	800047c <__aeabi_i2d>
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	4b48      	ldr	r3, [pc, #288]	; (8003ba8 <SpiritRadioSearchFreqDevME+0x168>)
 8003a86:	f7fc fd63 	bl	8000550 <__aeabi_dmul>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4621      	mov	r1, r4
 8003a92:	f7fc fff7 	bl	8000a84 <__aeabi_d2uiz>
 8003a96:	ee07 0a90 	vmov	s15, r0
 8003a9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aaa:	ee17 3a90 	vmov	r3, s15
 8003aae:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d309      	bcc.n	8003acc <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003abc:	3301      	adds	r3, #1
 8003abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d9d2      	bls.n	8003a70 <SpiritRadioSearchFreqDevME+0x30>
 8003aca:	e000      	b.n	8003ace <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003acc:	bf00      	nop
  }
  (*pcE) = i;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ad4:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003adc:	e043      	b.n	8003b66 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fc fcc8 	bl	800047c <__aeabi_i2d>
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <SpiritRadioSearchFreqDevME+0x16c>)
 8003af2:	f7fc fb77 	bl	80001e4 <__adddf3>
 8003af6:	4603      	mov	r3, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	4618      	mov	r0, r3
 8003afc:	4621      	mov	r1, r4
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b06:	f7fc fe4d 	bl	80007a4 <__aeabi_ddiv>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	4625      	mov	r5, r4
 8003b10:	461c      	mov	r4, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	2301      	movs	r3, #1
 8003b1a:	4093      	lsls	r3, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fcad 	bl	800047c <__aeabi_i2d>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc fd11 	bl	8000550 <__aeabi_dmul>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	4618      	mov	r0, r3
 8003b34:	4621      	mov	r1, r4
 8003b36:	f7fc ffa5 	bl	8000a84 <__aeabi_d2uiz>
 8003b3a:	ee07 0a90 	vmov	s15, r0
 8003b3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4e:	ee17 3a90 	vmov	r3, s15
 8003b52:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d309      	bcc.n	8003b70 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b60:	3301      	adds	r3, #1
 8003b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b6a:	2b07      	cmp	r3, #7
 8003b6c:	d9b7      	bls.n	8003ade <SpiritRadioSearchFreqDevME+0x9e>
 8003b6e:	e000      	b.n	8003b72 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003b70:	bf00      	nop
  }
  
  (*pcM)=i;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b78:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	69f9      	ldr	r1, [r7, #28]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1acb      	subs	r3, r1, r3
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d205      	bcs.n	8003b96 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	701a      	strb	r2, [r3, #0]
  
}
 8003b96:	bf00      	nop
 8003b98:	3728      	adds	r7, #40	; 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200002ec 	.word	0x200002ec
 8003ba4:	48800000 	.word	0x48800000
 8003ba8:	401e0000 	.word	0x401e0000
 8003bac:	40200000 	.word	0x40200000

08003bb0 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i;
  uint8_t j=0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a74      	ldr	r2, [pc, #464]	; (8003d94 <SpiritRadioGetdBm2Reg+0x1e4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d90c      	bls.n	8003be2 <SpiritRadioGetdBm2Reg+0x32>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a73      	ldr	r2, [pc, #460]	; (8003d98 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d808      	bhi.n	8003be2 <SpiritRadioGetdBm2Reg+0x32>
  {
    i=0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a71      	ldr	r2, [pc, #452]	; (8003d9c <SpiritRadioGetdBm2Reg+0x1ec>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d822      	bhi.n	8003c22 <SpiritRadioGetdBm2Reg+0x72>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
 8003be0:	e01f      	b.n	8003c22 <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a6e      	ldr	r2, [pc, #440]	; (8003da0 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d906      	bls.n	8003bf8 <SpiritRadioGetdBm2Reg+0x48>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a6d      	ldr	r2, [pc, #436]	; (8003da4 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d802      	bhi.n	8003bf8 <SpiritRadioGetdBm2Reg+0x48>
  {
    i=2;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	75fb      	strb	r3, [r7, #23]
 8003bf6:	e014      	b.n	8003c22 <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a6b      	ldr	r2, [pc, #428]	; (8003da8 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d906      	bls.n	8003c0e <SpiritRadioGetdBm2Reg+0x5e>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a6a      	ldr	r2, [pc, #424]	; (8003dac <SpiritRadioGetdBm2Reg+0x1fc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d802      	bhi.n	8003c0e <SpiritRadioGetdBm2Reg+0x5e>
  {
    i=3;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	75fb      	strb	r3, [r7, #23]
 8003c0c:	e009      	b.n	8003c22 <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a67      	ldr	r2, [pc, #412]	; (8003db0 <SpiritRadioGetdBm2Reg+0x200>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d905      	bls.n	8003c22 <SpiritRadioGetdBm2Reg+0x72>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a66      	ldr	r2, [pc, #408]	; (8003db4 <SpiritRadioGetdBm2Reg+0x204>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d801      	bhi.n	8003c22 <SpiritRadioGetdBm2Reg+0x72>
  {
    i=4;
 8003c1e:	2304      	movs	r3, #4
 8003c20:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	dd2f      	ble.n	8003c94 <SpiritRadioGetdBm2Reg+0xe4>
 8003c34:	7dfa      	ldrb	r2, [r7, #23]
 8003c36:	4960      	ldr	r1, [pc, #384]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	3308      	adds	r3, #8
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c50:	7dfa      	ldrb	r2, [r7, #23]
 8003c52:	4959      	ldr	r1, [pc, #356]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	330c      	adds	r3, #12
 8003c60:	ed93 6a00 	vldr	s12, [r3]
 8003c64:	7dfa      	ldrb	r2, [r7, #23]
 8003c66:	4954      	ldr	r1, [pc, #336]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	3308      	adds	r3, #8
 8003c74:	edd3 6a00 	vldr	s13, [r3]
 8003c78:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c80:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	dd02      	ble.n	8003c94 <SpiritRadioGetdBm2Reg+0xe4>
      j=0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75bb      	strb	r3, [r7, #22]
 8003c92:	e035      	b.n	8003d00 <SpiritRadioGetdBm2Reg+0x150>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca0:	d82e      	bhi.n	8003d00 <SpiritRadioGetdBm2Reg+0x150>
 8003ca2:	7dfa      	ldrb	r2, [r7, #23]
 8003ca4:	4944      	ldr	r1, [pc, #272]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	440b      	add	r3, r1
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	edd3 7a00 	vldr	s15, [r3]
 8003cb6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003dbc <SpiritRadioGetdBm2Reg+0x20c>
 8003cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cbe:	7dfa      	ldrb	r2, [r7, #23]
 8003cc0:	493d      	ldr	r1, [pc, #244]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	440b      	add	r3, r1
 8003ccc:	330c      	adds	r3, #12
 8003cce:	ed93 6a00 	vldr	s12, [r3]
 8003cd2:	7dfa      	ldrb	r2, [r7, #23]
 8003cd4:	4938      	ldr	r1, [pc, #224]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	edd3 6a00 	vldr	s13, [r3]
 8003ce6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cee:	ed97 7a02 	vldr	s14, [r7, #8]
 8003cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	d501      	bpl.n	8003d00 <SpiritRadioGetdBm2Reg+0x150>
      j=2;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003d00:	7dfa      	ldrb	r2, [r7, #23]
 8003d02:	7dbb      	ldrb	r3, [r7, #22]
 8003d04:	0059      	lsls	r1, r3, #1
 8003d06:	482c      	ldr	r0, [pc, #176]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	440b      	add	r3, r1
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	ed93 7a00 	vldr	s14, [r3]
 8003d1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d22:	7dfa      	ldrb	r2, [r7, #23]
 8003d24:	7dbb      	ldrb	r3, [r7, #22]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	1c59      	adds	r1, r3, #1
 8003d2a:	4823      	ldr	r0, [pc, #140]	; (8003db8 <SpiritRadioGetdBm2Reg+0x208>)
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	440b      	add	r3, r1
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d42:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003d46:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d56:	d503      	bpl.n	8003d60 <SpiritRadioGetdBm2Reg+0x1b0>
    fReg=1;
 8003d58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	e00a      	b.n	8003d76 <SpiritRadioGetdBm2Reg+0x1c6>
  else if(fReg>90) 
 8003d60:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d64:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003dc0 <SpiritRadioGetdBm2Reg+0x210>
 8003d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d70:	dd01      	ble.n	8003d76 <SpiritRadioGetdBm2Reg+0x1c6>
    fReg=90;
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <SpiritRadioGetdBm2Reg+0x214>)
 8003d74:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003d76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d82:	793b      	ldrb	r3, [r7, #4]
 8003d84:	b2db      	uxtb	r3, r3
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	2e5f567f 	.word	0x2e5f567f
 8003d98:	390c2fe0 	.word	0x390c2fe0
 8003d9c:	35a4e8ff 	.word	0x35a4e8ff
 8003da0:	1701e47f 	.word	0x1701e47f
 8003da4:	1c146a60 	.word	0x1c146a60
 8003da8:	11d260bf 	.word	0x11d260bf
 8003dac:	14ced7e0 	.word	0x14ced7e0
 8003db0:	08e18f3f 	.word	0x08e18f3f
 8003db4:	0a6fd060 	.word	0x0a6fd060
 8003db8:	080080ac 	.word	0x080080ac
 8003dbc:	42200000 	.word	0x42200000
 8003dc0:	42b40000 	.word	0x42b40000
 8003dc4:	42b40000 	.word	0x42b40000

08003dc8 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	ed87 0a00 	vstr	s0, [r7]
 8003dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003dd6:	f7ff fc47 	bl	8003668 <SpiritRadioGetFrequencyBase>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	ed97 0a00 	vldr	s0, [r7]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fee5 	bl	8003bb0 <SpiritRadioGetdBm2Reg>
 8003de6:	4603      	mov	r3, r0
 8003de8:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f1c3 0317 	rsb	r3, r3, #23
 8003df0:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003df2:	f107 020e 	add.w	r2, r7, #14
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 ff5e 	bl	8004cbc <RadioSpiWriteRegisters>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <SpiritRadioSetPALeveldBm+0x50>)
 8003e04:	b212      	sxth	r2, r2
 8003e06:	4611      	mov	r1, r2
 8003e08:	7019      	strb	r1, [r3, #0]
 8003e0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e0e:	705a      	strb	r2, [r3, #1]
  
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200003f8 	.word	0x200003f8

08003e1c <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003e26:	f107 030f 	add.w	r3, r7, #15
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2018      	movs	r0, #24
 8003e30:	f000 fff0 	bl	8004e14 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003e48:	f107 030f 	add.w	r3, r7, #15
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2101      	movs	r1, #1
 8003e50:	2018      	movs	r0, #24
 8003e52:	f000 ff33 	bl	8004cbc <RadioSpiWriteRegisters>
 8003e56:	4602      	mov	r2, r0
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <SpiritRadioSetPACwc+0x54>)
 8003e5a:	b212      	sxth	r2, r2
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	7019      	strb	r1, [r3, #0]
 8003e60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e64:	705a      	strb	r2, [r3, #1]
  
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200003f8 	.word	0x200003f8

08003e74 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003e7e:	f107 030f 	add.w	r3, r7, #15
 8003e82:	461a      	mov	r2, r3
 8003e84:	2101      	movs	r1, #1
 8003e86:	2018      	movs	r0, #24
 8003e88:	f000 ffc4 	bl	8004e14 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	f023 0307 	bic.w	r3, r3, #7
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003ea0:	f107 030f 	add.w	r3, r7, #15
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	2018      	movs	r0, #24
 8003eaa:	f000 ff07 	bl	8004cbc <RadioSpiWriteRegisters>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003eb2:	b212      	sxth	r2, r2
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	7019      	strb	r1, [r3, #0]
 8003eb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ebc:	705a      	strb	r2, [r3, #1]
  
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200003f8 	.word	0x200003f8

08003ecc <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003eda:	f107 030f 	add.w	r3, r7, #15
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	201e      	movs	r0, #30
 8003ee4:	f000 ff96 	bl	8004e14 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e004      	b.n	8003f04 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003f04:	f107 030f 	add.w	r3, r7, #15
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	201e      	movs	r0, #30
 8003f0e:	f000 fed5 	bl	8004cbc <RadioSpiWriteRegisters>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <SpiritRadioAFCFreezeOnSync+0x60>)
 8003f16:	b212      	sxth	r2, r2
 8003f18:	4611      	mov	r1, r2
 8003f1a:	7019      	strb	r1, [r3, #0]
 8003f1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f20:	705a      	strb	r2, [r3, #1]
  
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200003f8 	.word	0x200003f8

08003f30 <SpiritRadioCsBlanking>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the ANT_SELECT_CONF_BASE and mask the CS_BLANKING BIT field */
  SpiritSpiReadRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8003f3a:	f107 030f 	add.w	r3, r7, #15
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2101      	movs	r1, #1
 8003f42:	2027      	movs	r0, #39	; 0x27
 8003f44:	f000 ff66 	bl	8004e14 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d105      	bne.n	8003f5a <SpiritRadioCsBlanking+0x2a>
  {
    tempRegValue |= ANT_SELECT_CS_BLANKING_MASK;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	e004      	b.n	8003f64 <SpiritRadioCsBlanking+0x34>
  }
  else
  {
    tempRegValue &= (~ANT_SELECT_CS_BLANKING_MASK);
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	f023 0310 	bic.w	r3, r3, #16
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the ANT_SELECT_CONF register */
  g_xStatus = SpiritSpiWriteRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 8003f64:	f107 030f 	add.w	r3, r7, #15
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	2027      	movs	r0, #39	; 0x27
 8003f6e:	f000 fea5 	bl	8004cbc <RadioSpiWriteRegisters>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <SpiritRadioCsBlanking+0x5c>)
 8003f76:	b212      	sxth	r2, r2
 8003f78:	4611      	mov	r1, r2
 8003f7a:	7019      	strb	r1, [r3, #0]
 8003f7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f80:	705a      	strb	r2, [r3, #1]
  
  
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200003f8 	.word	0x200003f8

08003f90 <SpiritRadioPersistenRx>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the PROTOCOL0_BASE and mask the PROTOCOL0_PERS_RX_MASK bitfield */
  SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8003f9a:	f107 030f 	add.w	r3, r7, #15
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	2052      	movs	r0, #82	; 0x52
 8003fa4:	f000 ff36 	bl	8004e14 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <SpiritRadioPersistenRx+0x2a>
  {
    tempRegValue |= PROTOCOL0_PERS_RX_MASK;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	f043 0302 	orr.w	r3, r3, #2
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e004      	b.n	8003fc4 <SpiritRadioPersistenRx+0x34>
  }
  else
  {
    tempRegValue &= (~PROTOCOL0_PERS_RX_MASK);
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	f023 0302 	bic.w	r3, r3, #2
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the PROTOCOL0_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8003fc4:	f107 030f 	add.w	r3, r7, #15
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2101      	movs	r1, #1
 8003fcc:	2052      	movs	r0, #82	; 0x52
 8003fce:	f000 fe75 	bl	8004cbc <RadioSpiWriteRegisters>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <SpiritRadioPersistenRx+0x5c>)
 8003fd6:	b212      	sxth	r2, r2
 8003fd8:	4611      	mov	r1, r2
 8003fda:	7019      	strb	r1, [r3, #0]
 8003fdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fe0:	705a      	strb	r2, [r3, #1]
  
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200003f8 	.word	0x200003f8

08003ff0 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003ffa:	f107 030f 	add.w	r3, r7, #15
 8003ffe:	461a      	mov	r2, r3
 8004000:	2101      	movs	r1, #1
 8004002:	209e      	movs	r0, #158	; 0x9e
 8004004:	f000 ff06 	bl	8004e14 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004014:	b2db      	uxtb	r3, r3
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e004      	b.n	8004024 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004020:	b2db      	uxtb	r3, r3
 8004022:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004024:	f107 030f 	add.w	r3, r7, #15
 8004028:	461a      	mov	r2, r3
 800402a:	2101      	movs	r1, #1
 800402c:	209e      	movs	r0, #158	; 0x9e
 800402e:	f000 fe45 	bl	8004cbc <RadioSpiWriteRegisters>
 8004032:	4602      	mov	r2, r0
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <SpiritRadioSetRefDiv+0x5c>)
 8004036:	b212      	sxth	r2, r2
 8004038:	4611      	mov	r1, r2
 800403a:	7019      	strb	r1, [r3, #0]
 800403c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004040:	705a      	strb	r2, [r3, #1]
  
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200003f8 	.word	0x200003f8

08004050 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004056:	1dfb      	adds	r3, r7, #7
 8004058:	461a      	mov	r2, r3
 800405a:	2101      	movs	r1, #1
 800405c:	209e      	movs	r0, #158	; 0x9e
 800405e:	f000 fed9 	bl	8004e14 <RadioSpiReadRegisters>
 8004062:	4602      	mov	r2, r0
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <SpiritRadioGetRefDiv+0x40>)
 8004066:	b212      	sxth	r2, r2
 8004068:	4611      	mov	r1, r2
 800406a:	7019      	strb	r1, [r3, #0]
 800406c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004070:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	09db      	lsrs	r3, r3, #7
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8004084:	2300      	movs	r3, #0
  }
  
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200003f8 	.word	0x200003f8

08004094 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800409e:	f107 030f 	add.w	r3, r7, #15
 80040a2:	461a      	mov	r2, r3
 80040a4:	2101      	movs	r1, #1
 80040a6:	20b4      	movs	r0, #180	; 0xb4
 80040a8:	f000 feb4 	bl	8004e14 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	f023 0308 	bic.w	r3, r3, #8
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e004      	b.n	80040c8 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80040c8:	f107 030f 	add.w	r3, r7, #15
 80040cc:	461a      	mov	r2, r3
 80040ce:	2101      	movs	r1, #1
 80040d0:	20b4      	movs	r0, #180	; 0xb4
 80040d2:	f000 fdf3 	bl	8004cbc <RadioSpiWriteRegisters>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <SpiritRadioSetDigDiv+0x5c>)
 80040da:	b212      	sxth	r2, r2
 80040dc:	4611      	mov	r1, r2
 80040de:	7019      	strb	r1, [r3, #0]
 80040e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040e4:	705a      	strb	r2, [r3, #1]
  
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200003f8 	.word	0x200003f8

080040f4 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80040fa:	1dfb      	adds	r3, r7, #7
 80040fc:	461a      	mov	r2, r3
 80040fe:	2101      	movs	r1, #1
 8004100:	20b4      	movs	r0, #180	; 0xb4
 8004102:	f000 fe87 	bl	8004e14 <RadioSpiReadRegisters>
 8004106:	4602      	mov	r2, r0
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <SpiritRadioGetDigDiv+0x40>)
 800410a:	b212      	sxth	r2, r2
 800410c:	4611      	mov	r1, r2
 800410e:	7019      	strb	r1, [r3, #0]
 8004110:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004114:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	08db      	lsrs	r3, r3, #3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8004128:	2301      	movs	r3, #1
  }
  
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	200003f8 	.word	0x200003f8

08004138 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <SpiritRadioGetXtalFrequency+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	200002ec 	.word	0x200002ec

08004150 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <SpiritRadioSetXtalFrequency+0x1c>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	200002ec 	.word	0x200002ec

08004170 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 800417a:	f107 020c 	add.w	r2, r7, #12
 800417e:	f107 030c 	add.w	r3, r7, #12
 8004182:	3301      	adds	r3, #1
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	ed97 0a01 	vldr	s0, [r7, #4]
 800418c:	f000 f830 	bl	80041f0 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8004190:	f107 030c 	add.w	r3, r7, #12
 8004194:	461a      	mov	r2, r3
 8004196:	2102      	movs	r1, #2
 8004198:	2053      	movs	r0, #83	; 0x53
 800419a:	f000 fd8f 	bl	8004cbc <RadioSpiWriteRegisters>
 800419e:	4602      	mov	r2, r0
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <SpiritTimerSetRxTimeoutMs+0x48>)
 80041a2:	b212      	sxth	r2, r2
 80041a4:	4611      	mov	r1, r2
 80041a6:	7019      	strb	r1, [r3, #0]
 80041a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041ac:	705a      	strb	r2, [r3, #1]

}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200003f8 	.word	0x200003f8

080041bc <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 80041c6:	1dfb      	adds	r3, r7, #7
 80041c8:	461a      	mov	r2, r3
 80041ca:	2101      	movs	r1, #1
 80041cc:	2054      	movs	r0, #84	; 0x54
 80041ce:	f000 fd75 	bl	8004cbc <RadioSpiWriteRegisters>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <SpiritTimerSetRxTimeoutCounter+0x30>)
 80041d6:	b212      	sxth	r2, r2
 80041d8:	4611      	mov	r1, r2
 80041da:	7019      	strb	r1, [r3, #0]
 80041dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041e0:	705a      	strb	r2, [r3, #1]

}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200003f8 	.word	0x200003f8

080041f0 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80041fa:	60b8      	str	r0, [r7, #8]
 80041fc:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 80041fe:	f7ff ff9b 	bl	8004138 <SpiritRadioGetXtalFrequency>
 8004202:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4a91      	ldr	r2, [pc, #580]	; (800444c <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d902      	bls.n	8004212 <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800421c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004224:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004450 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800422c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004230:	ee17 3a90 	vmov	r3, s15
 8004234:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f64f 5201 	movw	r2, #64769	; 0xfd01
 800423c:	4293      	cmp	r3, r2
 800423e:	d906      	bls.n	800424e <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	22ff      	movs	r2, #255	; 0xff
 8004244:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	22ff      	movs	r2, #255	; 0xff
 800424a:	701a      	strb	r2, [r3, #0]
    return;
 800424c:	e0fa      	b.n	8004444 <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4a80      	ldr	r2, [pc, #512]	; (8004454 <SpiritTimerComputeRxTimeoutValues+0x264>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	09db      	lsrs	r3, r3, #7
 8004258:	b2db      	uxtb	r3, r3
 800425a:	3302      	adds	r3, #2
 800425c:	b2da      	uxtb	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	fbb3 f3f2 	udiv	r3, r3, r2
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	ee07 3a90 	vmov	s15, r3
 8004288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800428c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004290:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004450 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004294:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80042aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b6:	dd1d      	ble.n	80042f4 <SpiritTimerComputeRxTimeoutValues+0x104>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004450 <SpiritTimerComputeRxTimeoutValues+0x260>
 80042d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80042ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f2:	e01e      	b.n	8004332 <SpiritTimerComputeRxTimeoutValues+0x142>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	ee07 3a90 	vmov	s15, r3
 80042fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004310:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004450 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004314:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004326:	edd7 7a03 	vldr	s15, [r7, #12]
 800432a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800432e:	eef1 7a67 	vneg.f32	s15, s15
 8004332:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2bff      	cmp	r3, #255	; 0xff
 800433c:	d06e      	beq.n	800441c <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004450 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004360:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	edd7 7a03 	vldr	s15, [r7, #12]
 8004376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800437a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004382:	dd1e      	ble.n	80043c2 <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004450 <SpiritTimerComputeRxTimeoutValues+0x260>
 80043a6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80043bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c0:	e01f      	b.n	8004402 <SpiritTimerComputeRxTimeoutValues+0x212>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004450 <SpiritTimerComputeRxTimeoutValues+0x260>
 80043e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80043fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043fe:	eef1 7a67 	vneg.f32	s15, s15
 8004402:	ed97 7a05 	vldr	s14, [r7, #20]
 8004406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	d505      	bpl.n	800441c <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d906      	bls.n	800443e <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	3b01      	subs	r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	e002      	b.n	8004444 <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
}
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	01c9c380 	.word	0x01c9c380
 8004450:	4993b480 	.word	0x4993b480
 8004454:	80808081 	.word	0x80808081

08004458 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004462:	f107 030c 	add.w	r3, r7, #12
 8004466:	461a      	mov	r2, r3
 8004468:	2102      	movs	r1, #2
 800446a:	204f      	movs	r0, #79	; 0x4f
 800446c:	f000 fcd2 	bl	8004e14 <RadioSpiReadRegisters>
 8004470:	4602      	mov	r2, r0
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004474:	b212      	sxth	r2, r2
 8004476:	4611      	mov	r1, r2
 8004478:	7019      	strb	r1, [r3, #0]
 800447a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800447e:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004480:	7b3b      	ldrb	r3, [r7, #12]
 8004482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004486:	b2db      	uxtb	r3, r3
 8004488:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 800448a:	7b3b      	ldrb	r3, [r7, #12]
 800448c:	b25a      	sxtb	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	b25b      	sxtb	r3, r3
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	b25b      	sxtb	r3, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	b25b      	sxtb	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 80044a2:	7b7b      	ldrb	r3, [r7, #13]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 80044ac:	7b7b      	ldrb	r3, [r7, #13]
 80044ae:	b25a      	sxtb	r2, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	015b      	lsls	r3, r3, #5
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	4313      	orrs	r3, r2
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80044be:	f107 030c 	add.w	r3, r7, #12
 80044c2:	461a      	mov	r2, r3
 80044c4:	2102      	movs	r1, #2
 80044c6:	204f      	movs	r0, #79	; 0x4f
 80044c8:	f000 fbf8 	bl	8004cbc <RadioSpiWriteRegisters>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80044d0:	b212      	sxth	r2, r2
 80044d2:	4611      	mov	r1, r2
 80044d4:	7019      	strb	r1, [r3, #0]
 80044d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044da:	705a      	strb	r2, [r3, #1]

}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200003f8 	.word	0x200003f8

080044e8 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80044ee:	1d3b      	adds	r3, r7, #4
 80044f0:	461a      	mov	r2, r3
 80044f2:	2102      	movs	r1, #2
 80044f4:	20c0      	movs	r0, #192	; 0xc0
 80044f6:	f000 fc8d 	bl	8004e14 <RadioSpiReadRegisters>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <SpiritRefreshStatus+0x44>)
 80044fe:	b212      	sxth	r2, r2
 8004500:	4611      	mov	r1, r2
 8004502:	7019      	strb	r1, [r3, #0]
 8004504:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004508:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <SpiritRefreshStatus+0x44>)
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8004510:	429a      	cmp	r2, r3
 8004512:	d1ec      	bne.n	80044ee <SpiritRefreshStatus+0x6>
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <SpiritRefreshStatus+0x48>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800451e:	4293      	cmp	r3, r2
 8004520:	d1e5      	bne.n	80044ee <SpiritRefreshStatus+0x6>

}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200003f8 	.word	0x200003f8
 8004530:	200003f9 	.word	0x200003f9

08004534 <Spirit1InterfaceInit>:
* @brief  Read the status register.
* @param  None
* @retval Status
*/
void Spirit1InterfaceInit(void)
{ 
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Initialize the SDN pin micro side */
  RadioGpioInit(RADIO_GPIO_SDN,RADIO_MODE_GPIO_OUT);
 8004538:	2102      	movs	r1, #2
 800453a:	2004      	movs	r0, #4
 800453c:	f000 fa36 	bl	80049ac <RadioGpioInit>

  SpiritSpiInit();
 8004540:	f000 fb52 	bl	8004be8 <RadioSpiInit>
     
  /* Board management */   
//  SpiritEnterShutdown();
//  SpiritExitShutdown();
//
  SpiritManagementIdentificationRFBoard();
 8004544:	f000 f814 	bl	8004570 <SpiritManagementIdentificationRFBoard>
    
  /* Initialize the signals to drive the range extender application board */
  SpiritManagementRangeExtInit(); 
 8004548:	f000 f836 	bl	80045b8 <SpiritManagementRangeExtInit>
  
  /* Micro EXTI config */      
  RadioGpioInit(RADIO_GPIO_3,RADIO_MODE_EXTI_IN);
 800454c:	2101      	movs	r1, #1
 800454e:	2003      	movs	r0, #3
 8004550:	f000 fa2c 	bl	80049ac <RadioGpioInit>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,DISABLE); 
 8004554:	2300      	movs	r3, #0
 8004556:	2204      	movs	r2, #4
 8004558:	2104      	movs	r1, #4
 800455a:	2003      	movs	r0, #3
 800455c:	f000 faaa 	bl	8004ab4 <RadioGpioInterruptCmd>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,ENABLE);
 8004560:	2301      	movs	r3, #1
 8004562:	2204      	movs	r2, #4
 8004564:	2104      	movs	r1, #4
 8004566:	2003      	movs	r0, #3
 8004568:	f000 faa4 	bl	8004ab4 <RadioGpioInterruptCmd>
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}

08004570 <SpiritManagementIdentificationRFBoard>:
* @brief  Identifies the SPIRIT1 Xtal frequency and version.
* @param  None
* @retval Status
*/
void SpiritManagementIdentificationRFBoard(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8004576:	2300      	movs	r3, #0
 8004578:	71fb      	strb	r3, [r7, #7]
 800457a:	e004      	b.n	8004586 <SpiritManagementIdentificationRFBoard+0x16>
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	71fb      	strb	r3, [r7, #7]
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2bff      	cmp	r3, #255	; 0xff
 800458c:	d1f6      	bne.n	800457c <SpiritManagementIdentificationRFBoard+0xc>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 800458e:	f7ff ffab 	bl	80044e8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <SpiritManagementIdentificationRFBoard+0x40>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b03      	cmp	r3, #3
 800459e:	d1ea      	bne.n	8004576 <SpiritManagementIdentificationRFBoard+0x6>

    SpiritRadioSetXtalFrequency(XTAL_FREQUENCY);        
 80045a0:	4804      	ldr	r0, [pc, #16]	; (80045b4 <SpiritManagementIdentificationRFBoard+0x44>)
 80045a2:	f7ff fdd5 	bl	8004150 <SpiritRadioSetXtalFrequency>
    //SpiritGeneralSetSpiritVersion(SPIRIT_VERSION); 
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	200003f8 	.word	0x200003f8
 80045b4:	02faf080 	.word	0x02faf080

080045b8 <SpiritManagementRangeExtInit>:
/**
* @defgroup RANGE_EXT_MANAGEMENT_FUNCTIONS              SDK SPIRIT Management Range Extender Functions
* @{
*/
void SpiritManagementRangeExtInit(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
  RangeExtType range_type = SpiritManagementGetRangeExtender();
 80045be:	f000 f877 	bl	80046b0 <SpiritManagementGetRangeExtender>
 80045c2:	4603      	mov	r3, r0
 80045c4:	77fb      	strb	r3, [r7, #31]
  
  if(range_type==RANGE_EXT_SKYWORKS_169) {
 80045c6:	7ffb      	ldrb	r3, [r7, #31]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d135      	bne.n	8004638 <SpiritManagementRangeExtInit+0x80>
    /* TCXO optimization power consumption */
    SpiritGeneralSetExtRef(MODE_EXT_XIN);
 80045cc:	2001      	movs	r0, #1
 80045ce:	f7fd fd6b 	bl	80020a8 <SpiritGeneralSetExtRef>
    uint8_t tmp = 0x01; SpiritSpiWriteRegisters(0xB6,1,&tmp);
 80045d2:	2301      	movs	r3, #1
 80045d4:	71fb      	strb	r3, [r7, #7]
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	461a      	mov	r2, r3
 80045da:	2101      	movs	r1, #1
 80045dc:	20b6      	movs	r0, #182	; 0xb6
 80045de:	f000 fb6d 	bl	8004cbc <RadioSpiWriteRegisters>
    
    /* CSD control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 80045e2:	4a2e      	ldr	r2, [pc, #184]	; (800469c <SpiritManagementRangeExtInit+0xe4>)
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	4611      	mov	r1, r2
 80045ec:	8019      	strh	r1, [r3, #0]
 80045ee:	3302      	adds	r3, #2
 80045f0:	0c12      	lsrs	r2, r2, #16
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	f107 0308 	add.w	r3, r7, #8
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fd fd85 	bl	8002108 <SpiritGpioInit>
    
    /* CTX/BYP control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 80045fe:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <SpiritManagementRangeExtInit+0xe8>)
 8004600:	f107 030c 	add.w	r3, r7, #12
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	4611      	mov	r1, r2
 8004608:	8019      	strh	r1, [r3, #0]
 800460a:	3302      	adds	r3, #2
 800460c:	0c12      	lsrs	r2, r2, #16
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fd77 	bl	8002108 <SpiritGpioInit>
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <SpiritManagementRangeExtInit+0xec>)
 800461c:	f107 0310 	add.w	r3, r7, #16
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	4611      	mov	r1, r2
 8004624:	8019      	strh	r1, [r3, #0]
 8004626:	3302      	adds	r3, #2
 8004628:	0c12      	lsrs	r2, r2, #16
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	f107 0310 	add.w	r3, r7, #16
 8004630:	4618      	mov	r0, r3
 8004632:	f7fd fd69 	bl	8002108 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
  }
}
 8004636:	e02c      	b.n	8004692 <SpiritManagementRangeExtInit+0xda>
  else if(range_type==RANGE_EXT_SKYWORKS_868) {   
 8004638:	7ffb      	ldrb	r3, [r7, #31]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d129      	bne.n	8004692 <SpiritManagementRangeExtInit+0xda>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <SpiritManagementRangeExtInit+0xe4>)
 8004640:	f107 0314 	add.w	r3, r7, #20
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	4611      	mov	r1, r2
 8004648:	8019      	strh	r1, [r3, #0]
 800464a:	3302      	adds	r3, #2
 800464c:	0c12      	lsrs	r2, r2, #16
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	f107 0314 	add.w	r3, r7, #20
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd fd57 	bl	8002108 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <SpiritManagementRangeExtInit+0xf0>)
 800465c:	f107 0318 	add.w	r3, r7, #24
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	4611      	mov	r1, r2
 8004664:	8019      	strh	r1, [r3, #0]
 8004666:	3302      	adds	r3, #2
 8004668:	0c12      	lsrs	r2, r2, #16
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	f107 0318 	add.w	r3, r7, #24
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd fd49 	bl	8002108 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 8004676:	4a0d      	ldr	r2, [pc, #52]	; (80046ac <SpiritManagementRangeExtInit+0xf4>)
 8004678:	f107 031c 	add.w	r3, r7, #28
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	4611      	mov	r1, r2
 8004680:	8019      	strh	r1, [r3, #0]
 8004682:	3302      	adds	r3, #2
 8004684:	0c12      	lsrs	r2, r2, #16
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	f107 031c 	add.w	r3, r7, #28
 800468c:	4618      	mov	r0, r3
 800468e:	f7fd fd3b 	bl	8002108 <SpiritGpioInit>
}
 8004692:	bf00      	nop
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	08007f9c 	.word	0x08007f9c
 80046a0:	08007fa0 	.word	0x08007fa0
 80046a4:	08007fa4 	.word	0x08007fa4
 80046a8:	08007fa8 	.word	0x08007fa8
 80046ac:	08007fac 	.word	0x08007fac

080046b0 <SpiritManagementGetRangeExtender>:
* @brief  returns the spirit1 range extender type
* @param  None
* @retval RangeExtType
*/
RangeExtType SpiritManagementGetRangeExtender(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return xRangeExtType;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <SpiritManagementGetRangeExtender+0x14>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	200002f0 	.word	0x200002f0

080046c8 <Spirit1GpioIrqInit>:
* @brief  this function intializes the spirit1 gpio irq for TX and Rx
* @param  None
* @retval None
*/
void Spirit1GpioIrqInit(SGpioInit *pGpioIRQ)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Spirit IRQ config */
  SpiritGpioInit(pGpioIRQ);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7fd fd19 	bl	8002108 <SpiritGpioInit>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <Spirit1RadioInit>:
* @brief  this function used to receive RX packet
* @param  None
* @retval None
*/
void Spirit1RadioInit(SRadioInit *pRadioInit)
{    
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Spirit Radio config */
  SpiritRadioInit(pRadioInit);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fe fb02 	bl	8002cf0 <SpiritRadioInit>

}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <Spirit1SetPower>:
* @brief  this function sets the radio power
* @param  uint8_t cIndex, float fPowerdBm
* @retval None
*/
void Spirit1SetPower(uint8_t cIndex, float fPowerdBm)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	ed87 0a00 	vstr	s0, [r7]
 8004700:	71fb      	strb	r3, [r7, #7]
  /* Spirit Radio set power */
  SpiritRadioSetPALeveldBm(cIndex,fPowerdBm);
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	ed97 0a00 	vldr	s0, [r7]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fb5d 	bl	8003dc8 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(cIndex);
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fbaf 	bl	8003e74 <SpiritRadioSetPALevelMaxIndex>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <Spirit1PacketConfig>:
* @brief  this function sets the packet configuration according to the protocol used
* @param  None
* @retval None
*/
void Spirit1PacketConfig(void)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	af00      	add	r7, sp, #0
  
  STackProtocolInit();
   
#elif defined(USE_BASIC_PROTOCOL)
  
  BasicProtocolInit();
 8004722:	f7fd f8a1 	bl	8001868 <BasicProtocolInit>
  
#endif
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}

0800472a <Spirit1SetPayloadlength>:
* @brief  this function sets the payload length
* @param  uint8_t length
* @retval None
*/
void Spirit1SetPayloadlength(uint8_t length)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	71fb      	strb	r3, [r7, #7]
    /* Payload length config */
  SpiritPktStackSetPayloadLength(length);
  
#elif defined(USE_BASIC_PROTOCOL)
  /* payload length config */
  SpiritPktBasicSetPayloadLength(length);
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	b29b      	uxth	r3, r3
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe f98d 	bl	8002a58 <SpiritPktBasicSetPayloadLength>
#endif
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <Spirit1SetDestinationAddress>:
* @brief  this function sets the destination address
* @param  uint8_t adress
* @retval None
*/
void Spirit1SetDestinationAddress(uint8_t address)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	71fb      	strb	r3, [r7, #7]
#if defined(USE_STack_PROTOCOL)
  /* Destination address */
  SpiritPktStackSetDestinationAddress(address);
#elif defined(USE_BASIC_PROTOCOL)
  /* destination address */
  SpiritPktBasicSetDestinationAddress(address);
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe fa0c 	bl	8002b70 <SpiritPktCommonSetDestinationAddress>
#endif
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <Spirit1EnableTxIrq>:
* @brief  this function enables the Tx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableTxIrq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrq(TX_DATA_SENT, S_ENABLE); 
 8004764:	2101      	movs	r1, #1
 8004766:	2004      	movs	r0, #4
 8004768:	f7fd fd18 	bl	800219c <SpiritIrq>
#if defined(USE_STack_LLP)
  SpiritIrq(MAX_RE_TX_REACH, S_ENABLE);
#endif  
}
 800476c:	bf00      	nop
 800476e:	bd80      	pop	{r7, pc}

08004770 <Spirit1EnableRxIrq>:
* @brief  this function enables the Rx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableRxIrq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
    /* Spirit IRQs enable */
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8004774:	2101      	movs	r1, #1
 8004776:	2001      	movs	r0, #1
 8004778:	f7fd fd10 	bl	800219c <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE); 
 800477c:	2101      	movs	r1, #1
 800477e:	2002      	movs	r0, #2
 8004780:	f7fd fd0c 	bl	800219c <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8004784:	2101      	movs	r1, #1
 8004786:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800478a:	f7fd fd07 	bl	800219c <SpiritIrq>
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}

08004792 <Spirit1DisableIrq>:
* @brief  this function disable IRQs
* @param  None
* @retval None
*/
void Spirit1DisableIrq(void)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrqDeInit(NULL);
 8004796:	2000      	movs	r0, #0
 8004798:	f7fd fcda 	bl	8002150 <SpiritIrqDeInit>
}
 800479c:	bf00      	nop
 800479e:	bd80      	pop	{r7, pc}

080047a0 <Spirit1SetRxTimeout>:
* @brief  this function set the receive timeout period
* @param  None
* @retval None
*/
void Spirit1SetRxTimeout(float cRxTimeOut)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	ed87 0a01 	vstr	s0, [r7, #4]
  if(cRxTimeOut == 0)
 80047aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d106      	bne.n	80047c6 <Spirit1SetRxTimeout+0x26>
  {
    /* rx timeout config */
    SET_INFINITE_RX_TIMEOUT();
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7ff fcff 	bl	80041bc <SpiritTimerSetRxTimeoutCounter>
    SpiritTimerSetRxTimeoutStopCondition(ANY_ABOVE_THRESHOLD);
 80047be:	200f      	movs	r0, #15
 80047c0:	f7ff fe4a 	bl	8004458 <SpiritTimerSetRxTimeoutStopCondition>
    /* RX timeout config */
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
    Spirit1EnableSQI();
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
  }
}
 80047c4:	e008      	b.n	80047d8 <Spirit1SetRxTimeout+0x38>
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
 80047c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80047ca:	f7ff fcd1 	bl	8004170 <SpiritTimerSetRxTimeoutMs>
    Spirit1EnableSQI();
 80047ce:	f000 f812 	bl	80047f6 <Spirit1EnableSQI>
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
 80047d2:	2006      	movs	r0, #6
 80047d4:	f7ff fe40 	bl	8004458 <SpiritTimerSetRxTimeoutStopCondition>
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <Spirit1SetRssiTH>:
* @brief  this function sets the RSSI threshold
* @param  int dbmValue
* @retval None
*/
void Spirit1SetRssiTH(int dbmValue)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  SpiritQiSetRssiThresholddBm(dbmValue);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fe fa5f 	bl	8002cac <SpiritQiSetRssiThresholddBm>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <Spirit1EnableSQI>:
* @brief  this function enables SQI check
* @param  None
* @retval None
*/
void Spirit1EnableSQI(void)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	af00      	add	r7, sp, #0
  /* enable SQI check */
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80047fa:	2000      	movs	r0, #0
 80047fc:	f7fe fa22 	bl	8002c44 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8004800:	2001      	movs	r0, #1
 8004802:	f7fe f9e7 	bl	8002bd4 <SpiritQiSqiCheck>
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <Spirit1StartRx>:
* @brief  this function starts the RX process
* @param  None
* @retval None
*/
void Spirit1StartRx(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <Spirit1StartRx+0x28>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b33      	cmp	r3, #51	; 0x33
 800481c:	d102      	bne.n	8004824 <Spirit1StartRx+0x18>
  {
    SpiritCmdStrobeSabort();
 800481e:	2067      	movs	r0, #103	; 0x67
 8004820:	f7fd fb8e 	bl	8001f40 <SpiritCmdStrobeCommand>
  }
  /* RX command */
  SpiritCmdStrobeRx();
 8004824:	f7fd ff82 	bl	800272c <SpiritManagementWaCmdStrobeRx>
 8004828:	2061      	movs	r0, #97	; 0x61
 800482a:	f7fd fb89 	bl	8001f40 <SpiritCmdStrobeCommand>
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200003f8 	.word	0x200003f8

08004838 <Spirit1GetRxPacket>:
* @brief  this function receives the data
* @param  None
* @retval None
*/
void Spirit1GetRxPacket(uint8_t *buffer, uint8_t *cRxData )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint8_t noofbytes = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	73fb      	strb	r3, [r7, #15]
  /* when rx data ready read the number of received bytes */
  *cRxData=SpiritLinearFifoReadNumElementsRxFifo();
 8004846:	f7fd fd5b 	bl	8002300 <SpiritLinearFifoReadNumElementsRxFifo>
 800484a:	4603      	mov	r3, r0
 800484c:	461a      	mov	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	701a      	strb	r2, [r3, #0]
  noofbytes = *cRxData;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	73fb      	strb	r3, [r7, #15]
    /* read the RX FIFO */
  SpiritSpiReadLinearFifo(noofbytes, buffer);
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fccd 	bl	80051fc <RadioSpiReadFifo>
  
  SpiritCmdStrobeFlushRxFifo();
 8004862:	2071      	movs	r0, #113	; 0x71
 8004864:	f7fd fb6c 	bl	8001f40 <SpiritCmdStrobeCommand>
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <Spirit1StartTx>:
* @brief  this function starts the TX process
* @param  None
* @retval None
*/
void Spirit1StartTx(uint8_t *buffer, uint8_t size )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <Spirit1StartTx+0x64>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b33      	cmp	r3, #51	; 0x33
 8004888:	d102      	bne.n	8004890 <Spirit1StartTx+0x20>
  {
    SpiritCmdStrobeSabort();
 800488a:	2067      	movs	r0, #103	; 0x67
 800488c:	f7fd fb58 	bl	8001f40 <SpiritCmdStrobeCommand>
  }
  
#ifdef CSMA_ENABLE
  
    /* Enable CSMA */
    SpiritRadioPersistenRx(S_DISABLE);
 8004890:	2000      	movs	r0, #0
 8004892:	f7ff fb7d 	bl	8003f90 <SpiritRadioPersistenRx>
    SpiritRadioCsBlanking(S_DISABLE);
 8004896:	2000      	movs	r0, #0
 8004898:	f7ff fb4a 	bl	8003f30 <SpiritRadioCsBlanking>

    SpiritCsmaInit(&xCsmaInit);
 800489c:	480e      	ldr	r0, [pc, #56]	; (80048d8 <Spirit1StartTx+0x68>)
 800489e:	f7fd fb67 	bl	8001f70 <SpiritCsmaInit>
    SpiritCsma(S_ENABLE);
 80048a2:	2001      	movs	r0, #1
 80048a4:	f7fd fbc8 	bl	8002038 <SpiritCsma>
    SpiritQiSetRssiThresholddBm(CSMA_RSSI_THRESHOLD);
 80048a8:	f06f 0069 	mvn.w	r0, #105	; 0x69
 80048ac:	f7fe f9fe 	bl	8002cac <SpiritQiSetRssiThresholddBm>
    
#endif 
  
  /* fit the TX FIFO */
  SpiritCmdStrobeFlushTxFifo();
 80048b0:	2072      	movs	r0, #114	; 0x72
 80048b2:	f7fd fb45 	bl	8001f40 <SpiritCmdStrobeCommand>
  
  SpiritSpiWriteLinearFifo(size, buffer);
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fbf4 	bl	80050a8 <RadioSpiWriteFifo>
  
  /* send the TX command */
  SpiritCmdStrobeTx();
 80048c0:	f7fd fefc 	bl	80026bc <SpiritManagementWaCmdStrobeTx>
 80048c4:	2060      	movs	r0, #96	; 0x60
 80048c6:	f7fd fb3b 	bl	8001f40 <SpiritCmdStrobeCommand>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	200003f8 	.word	0x200003f8
 80048d8:	2000007c 	.word	0x2000007c

080048dc <Spirit1ClearIRQ>:
* @brief  this function clear the IRQ status
* @param  None
* @retval None
*/
void Spirit1ClearIRQ(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  SpiritIrqClearStatus();
 80048e0:	f7fd fcf6 	bl	80022d0 <SpiritIrqClearStatus>
}
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <BSP_LED_Init+0x2c>
 80048f8:	2300      	movs	r3, #0
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	4b15      	ldr	r3, [pc, #84]	; (8004954 <BSP_LED_Init+0x6c>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <BSP_LED_Init+0x6c>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6313      	str	r3, [r2, #48]	; 0x30
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <BSP_LED_Init+0x6c>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 8004914:	2320      	movs	r3, #32
 8004916:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004920:	2303      	movs	r3, #3
 8004922:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <BSP_LED_Init+0x70>)
 8004928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492c:	f107 020c 	add.w	r2, r7, #12
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fee6 	bl	8005704 <HAL_GPIO_Init>

  /* Reset PIN to switch off the LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	4a07      	ldr	r2, [pc, #28]	; (8004958 <BSP_LED_Init+0x70>)
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	2120      	movs	r1, #32
 8004942:	2200      	movs	r2, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f941 	bl	8005bcc <HAL_GPIO_WritePin>
}
 800494a:	bf00      	nop
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	20000154 	.word	0x20000154

0800495c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	4a05      	ldr	r2, [pc, #20]	; (8004980 <BSP_LED_Off+0x24>)
 800496a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496e:	2120      	movs	r1, #32
 8004970:	2200      	movs	r2, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f92a 	bl	8005bcc <HAL_GPIO_WritePin>
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000154 	.word	0x20000154

08004984 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <BSP_LED_Toggle+0x24>)
 8004992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004996:	2220      	movs	r2, #32
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f92f 	bl	8005bfe <HAL_GPIO_TogglePin>
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20000154 	.word	0x20000154

080049ac <RadioGpioInit>:
*         @arg RADIO_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
*         generation capability.
* @retval None.
*/
void RadioGpioInit(RadioGpioPin xGpio, RadioGpioMode xGpioMode)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	460a      	mov	r2, r1
 80049b6:	71fb      	strb	r3, [r7, #7]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RADIO_GPIO_PIN(xGpio));
  assert_param(IS_RADIO_GPIO_MODE(xGpioMode));
  
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <RadioGpioInit+0xf0>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <RadioGpioInit+0xf0>)
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	6313      	str	r3, [r2, #48]	; 0x30
 80049cc:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <RadioGpioInit+0xf0>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	693b      	ldr	r3, [r7, #16]
  __GPIOC_CLK_ENABLE();
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <RadioGpioInit+0xf0>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	4a2e      	ldr	r2, [pc, #184]	; (8004a9c <RadioGpioInit+0xf0>)
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6313      	str	r3, [r2, #48]	; 0x30
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <RadioGpioInit+0xf0>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
  __GPIOB_CLK_ENABLE();
 80049f4:	2300      	movs	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	4b28      	ldr	r3, [pc, #160]	; (8004a9c <RadioGpioInit+0xf0>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <RadioGpioInit+0xf0>)
 80049fe:	f043 0302 	orr.w	r3, r3, #2
 8004a02:	6313      	str	r3, [r2, #48]	; 0x30
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <RadioGpioInit+0xf0>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
  
  /* Configures MCU GPIO */
  if (xGpioMode == RADIO_MODE_GPIO_OUT)
 8004a10:	79bb      	ldrb	r3, [r7, #6]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d102      	bne.n	8004a1c <RadioGpioInit+0x70>
  {
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e001      	b.n	8004a20 <RadioGpioInit+0x74>
  }
  else
  {
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
  }
  
  GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <RadioGpioInit+0xf4>)
 8004a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <RadioGpioInit+0xf8>)
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <RadioGpioInit+0xfc>)
 8004a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4a1a      	ldr	r2, [pc, #104]	; (8004aac <RadioGpioInit+0x100>)
 8004a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a46:	f107 0214 	add.w	r2, r7, #20
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fe59 	bl	8005704 <HAL_GPIO_Init>
  
  if (xGpioMode == RADIO_MODE_EXTI_IN)
 8004a52:	79bb      	ldrb	r3, [r7, #6]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d11d      	bne.n	8004a94 <RadioGpioInit+0xe8>
  {
    GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <RadioGpioInit+0xf4>)
 8004a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <RadioGpioInit+0xf8>)
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	4a0e      	ldr	r2, [pc, #56]	; (8004aa8 <RadioGpioInit+0xfc>)
 8004a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = aRADIO_GPIO_EXTI_MODE[xGpio];
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <RadioGpioInit+0x104>)
 8004a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <RadioGpioInit+0x100>)
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	f107 0214 	add.w	r2, r7, #20
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fe38 	bl	8005704 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    /*  NVIC_SetPriority((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]), 0x02); */
    /*  HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));     */
  } 
}
 8004a94:	bf00      	nop
 8004a96:	3728      	adds	r7, #40	; 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	08008124 	.word	0x08008124
 8004aa4:	08008144 	.word	0x08008144
 8004aa8:	08008130 	.word	0x08008130
 8004aac:	20000158 	.word	0x20000158
 8004ab0:	08008158 	.word	0x08008158

08004ab4 <RadioGpioInterruptCmd>:
*         @arg ENABLE: Interrupt is enabled
*         @arg DISABLE: Interrupt is disabled
* @retval None.
*/
void RadioGpioInterruptCmd(RadioGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, FunctionalState xNewState)
{
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	71fb      	strb	r3, [r7, #7]
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71bb      	strb	r3, [r7, #6]
 8004aca:	460b      	mov	r3, r1
 8004acc:	717b      	strb	r3, [r7, #5]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	713b      	strb	r3, [r7, #4]
  HAL_NVIC_SetPriority((IRQn_Type) (aRADIO_GPIO_IRQn[xGpio]), nPreemption, nSubpriority);
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <RadioGpioInterruptCmd+0x5c>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	79b9      	ldrb	r1, [r7, #6]
 8004adc:	797a      	ldrb	r2, [r7, #5]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fdcb 	bl	800567a <HAL_NVIC_SetPriority>
  if (!xNewState)
 8004ae4:	793b      	ldrb	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <RadioGpioInterruptCmd+0x46>
  {
    HAL_NVIC_DisableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio])); 
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <RadioGpioInterruptCmd+0x5c>)
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fdeb 	bl	80056ce <HAL_NVIC_DisableIRQ>
  }
  else
  {
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
  }
}
 8004af8:	e006      	b.n	8004b08 <RadioGpioInterruptCmd+0x54>
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <RadioGpioInterruptCmd+0x5c>)
 8004afe:	5cd3      	ldrb	r3, [r2, r3]
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fdd5 	bl	80056b2 <HAL_NVIC_EnableIRQ>
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}
 8004b10:	08008168 	.word	0x08008168

08004b14 <RadioShieldLedInit>:
*   This parameter can be one of the following values:
* @arg    Led_t Led
* @retval None
*/
void RadioShieldLedInit(Led_t Led)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  RADIO_SHIELD_LED_GPIO_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <RadioShieldLedInit+0x54>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <RadioShieldLedInit+0x54>)
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <RadioShieldLedInit+0x54>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = aLED_GPIO_PIN[Led];
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b42:	2301      	movs	r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004b46:	2303      	movs	r3, #3
 8004b48:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(aLED_GPIO_PORT[Led], &GPIO_InitStruct);
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <RadioShieldLedInit+0x58>)
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	f107 020c 	add.w	r2, r7, #12
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fdd3 	bl	8005704 <HAL_GPIO_Init>
}
 8004b5e:	bf00      	nop
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	2000016c 	.word	0x2000016c

08004b70 <RadioShieldLedOn>:
*   This parameter can be one of following parameters:
* @arg  Led_t Led
* @retval None
*/
void RadioShieldLedOn(Led_t Led)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_SET); 
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <RadioShieldLedOn+0x24>)
 8004b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b82:	2110      	movs	r1, #16
 8004b84:	2201      	movs	r2, #1
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 f820 	bl	8005bcc <HAL_GPIO_WritePin>
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2000016c 	.word	0x2000016c

08004b98 <RadioShieldLedOff>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedOff(Led_t Led)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	4a05      	ldr	r2, [pc, #20]	; (8004bbc <RadioShieldLedOff+0x24>)
 8004ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004baa:	2110      	movs	r1, #16
 8004bac:	2200      	movs	r2, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 f80c 	bl	8005bcc <HAL_GPIO_WritePin>
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2000016c 	.word	0x2000016c

08004bc0 <RadioShieldLedToggle>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedToggle(Led_t Led)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led]);
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <RadioShieldLedToggle+0x24>)
 8004bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 f811 	bl	8005bfe <HAL_GPIO_TogglePin>
}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	2000016c 	.word	0x2000016c

08004be8 <RadioSpiInit>:
* @brief  Initializes SPI HAL.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&pSpiHandle) == HAL_SPI_STATE_RESET)
 8004bec:	4818      	ldr	r0, [pc, #96]	; (8004c50 <RadioSpiInit+0x68>)
 8004bee:	f001 fffd 	bl	8006bec <HAL_SPI_GetState>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d128      	bne.n	8004c4a <RadioSpiInit+0x62>
  {
    /* SPI Config */
    pSpiHandle.Instance               = RADIO_SPI;
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <RadioSpiInit+0x68>)
 8004bfa:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <RadioSpiInit+0x6c>)
 8004bfc:	601a      	str	r2, [r3, #0]
    pSpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <RadioSpiInit+0x68>)
 8004c00:	2208      	movs	r2, #8
 8004c02:	61da      	str	r2, [r3, #28]
    pSpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8004c04:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <RadioSpiInit+0x68>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
    pSpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004c0a:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <RadioSpiInit+0x68>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	615a      	str	r2, [r3, #20]
    pSpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <RadioSpiInit+0x68>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	611a      	str	r2, [r3, #16]
    pSpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <RadioSpiInit+0x68>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
    pSpiHandle.Init.CRCPolynomial     = 7;
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <RadioSpiInit+0x68>)
 8004c1e:	2207      	movs	r2, #7
 8004c20:	62da      	str	r2, [r3, #44]	; 0x2c
    pSpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <RadioSpiInit+0x68>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	60da      	str	r2, [r3, #12]
    pSpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <RadioSpiInit+0x68>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	621a      	str	r2, [r3, #32]
    pSpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <RadioSpiInit+0x68>)
 8004c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c34:	619a      	str	r2, [r3, #24]
    pSpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <RadioSpiInit+0x68>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
    pSpiHandle.Init.Mode              = SPI_MODE_MASTER;
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <RadioSpiInit+0x68>)
 8004c3e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c42:	605a      	str	r2, [r3, #4]

    //HAL_SPI_MspInit(&pSpiHandle);
    HAL_SPI_Init(&pSpiHandle);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <RadioSpiInit+0x68>)
 8004c46:	f001 fc6f 	bl	8006528 <HAL_SPI_Init>
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200003fc 	.word	0x200003fc
 8004c54:	40013000 	.word	0x40013000

08004c58 <SPI_Write>:
* @brief  SPI Write a byte to device
* @param  Value: value to be written
* @retval None
*/
static void SPI_Write(uint8_t Value)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
  
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004c66:	bf00      	nop
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <SPI_Write+0x44>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d1f8      	bne.n	8004c68 <SPI_Write+0x10>
  status = HAL_SPI_Transmit(&pSpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <SPI_Write+0x48>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1df9      	adds	r1, r7, #7
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4807      	ldr	r0, [pc, #28]	; (8004c9c <SPI_Write+0x44>)
 8004c80:	f001 fcde 	bl	8006640 <HAL_SPI_Transmit>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if (status != HAL_OK)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <SPI_Write+0x3a>
  {
    /* Execute user timeout callback */
    SPI_Error();
 8004c8e:	f000 f809 	bl	8004ca4 <SPI_Error>
  }
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200003fc 	.word	0x200003fc
 8004ca0:	20000170 	.word	0x20000170

08004ca4 <SPI_Error>:
* @brief  SPI error treatment function
* @param  None
* @retval None
*/
static void SPI_Error(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&pSpiHandle);
 8004ca8:	4803      	ldr	r0, [pc, #12]	; (8004cb8 <SPI_Error+0x14>)
 8004caa:	f001 fca1 	bl	80065f0 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  RadioSpiInit();
 8004cae:	f7ff ff9b 	bl	8004be8 <RadioSpiInit>
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200003fc 	.word	0x200003fc

08004cbc <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	603a      	str	r2, [r7, #0]
 8004cc6:	71fb      	strb	r3, [r7, #7]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	71bb      	strb	r3, [r7, #6]
  uint8_t aHeader[2] = {0};
 8004ccc:	2300      	movs	r3, #0
 8004cce:	823b      	strh	r3, [r7, #16]
  uint16_t tmpstatus = 0x0000;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	81fb      	strh	r3, [r7, #14]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus=(StatusBytes *)&tmpstatus;
 8004cd4:	f107 030e 	add.w	r3, r7, #14
 8004cd8:	61bb      	str	r3, [r7, #24]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	743b      	strb	r3, [r7, #16]
  aHeader[1] = cRegAddress;
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	2003      	movs	r0, #3
 8004cea:	f7ff fee3 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004cee:	f7fc fdc5 	bl	800187c <bandSelect>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	81bb      	strh	r3, [r7, #12]
  if(selectedBand.conf_868 == SET)
 8004cf6:	7b3b      	ldrb	r3, [r7, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10a      	bne.n	8004d12 <RadioSpiWriteRegisters+0x56>
  {
	  RadioSpiHCSLow();
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2140      	movs	r1, #64	; 0x40
 8004d00:	4841      	ldr	r0, [pc, #260]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004d02:	f000 ff63 	bl	8005bcc <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004d06:	2201      	movs	r2, #1
 8004d08:	2120      	movs	r1, #32
 8004d0a:	483f      	ldr	r0, [pc, #252]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004d0c:	f000 ff5e 	bl	8005bcc <HAL_GPIO_WritePin>
 8004d10:	e017      	b.n	8004d42 <RadioSpiWriteRegisters+0x86>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004d12:	7b7b      	ldrb	r3, [r7, #13]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10a      	bne.n	8004d2e <RadioSpiWriteRegisters+0x72>
	  {
		  RadioSpiHCSHigh();
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2140      	movs	r1, #64	; 0x40
 8004d1c:	483a      	ldr	r0, [pc, #232]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004d1e:	f000 ff55 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004d22:	2200      	movs	r2, #0
 8004d24:	2120      	movs	r1, #32
 8004d26:	4838      	ldr	r0, [pc, #224]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004d28:	f000 ff50 	bl	8005bcc <HAL_GPIO_WritePin>
 8004d2c:	e009      	b.n	8004d42 <RadioSpiWriteRegisters+0x86>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	4835      	ldr	r0, [pc, #212]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004d34:	f000 ff4a 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	4832      	ldr	r0, [pc, #200]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004d3e:	f000 ff45 	bl	8005bcc <HAL_GPIO_WritePin>
	  }
  }
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004d42:	2300      	movs	r3, #0
 8004d44:	817b      	strh	r3, [r7, #10]
 8004d46:	e004      	b.n	8004d52 <RadioSpiWriteRegisters+0x96>
 8004d48:	897b      	ldrh	r3, [r7, #10]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	817b      	strh	r3, [r7, #10]
 8004d52:	897b      	ldrh	r3, [r7, #10]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5a:	d3f5      	bcc.n	8004d48 <RadioSpiWriteRegisters+0x8c>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <RadioSpiWriteRegisters+0x150>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f107 020e 	add.w	r2, r7, #14
 8004d64:	f107 0110 	add.w	r1, r7, #16
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4828      	ldr	r0, [pc, #160]	; (8004e10 <RadioSpiWriteRegisters+0x154>)
 8004d6e:	f001 fd9b 	bl	80068a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8004d72:	89fb      	ldrh	r3, [r7, #14]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	81fb      	strh	r3, [r7, #14]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <RadioSpiWriteRegisters+0x150>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f107 000e 	add.w	r0, r7, #14
 8004d82:	f107 0210 	add.w	r2, r7, #16
 8004d86:	1c51      	adds	r1, r2, #1
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4820      	ldr	r0, [pc, #128]	; (8004e10 <RadioSpiWriteRegisters+0x154>)
 8004d90:	f001 fd8a 	bl	80068a8 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e009      	b.n	8004dae <RadioSpiWriteRegisters+0xf2>
  {
    SPI_Write(pcBuffer[index]);
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff ff58 	bl	8004c58 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	79bb      	ldrb	r3, [r7, #6]
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	dbf1      	blt.n	8004d9a <RadioSpiWriteRegisters+0xde>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004db6:	bf00      	nop
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <RadioSpiWriteRegisters+0x154>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d1f8      	bne.n	8004db8 <RadioSpiWriteRegisters+0xfc>
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	480f      	ldr	r0, [pc, #60]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004dcc:	f000 fefe 	bl	8005bcc <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	2120      	movs	r1, #32
 8004dd4:	480c      	ldr	r0, [pc, #48]	; (8004e08 <RadioSpiWriteRegisters+0x14c>)
 8004dd6:	f000 fef9 	bl	8005bcc <HAL_GPIO_WritePin>

  
  SPI_EXIT_CRITICAL();
 8004dda:	2301      	movs	r3, #1
 8004ddc:	2204      	movs	r2, #4
 8004dde:	2104      	movs	r1, #4
 8004de0:	2003      	movs	r0, #3
 8004de2:	f7ff fe67 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	2300      	movs	r3, #0
 8004df2:	7d3a      	ldrb	r2, [r7, #20]
 8004df4:	f362 0307 	bfi	r3, r2, #0, #8
 8004df8:	7d7a      	ldrb	r2, [r7, #21]
 8004dfa:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40020400 	.word	0x40020400
 8004e0c:	20000170 	.word	0x20000170
 8004e10:	200003fc 	.word	0x200003fc

08004e14 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval StatusBytes
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	603a      	str	r2, [r7, #0]
 8004e1e:	71fb      	strb	r3, [r7, #7]
 8004e20:	460b      	mov	r3, r1
 8004e22:	71bb      	strb	r3, [r7, #6]
  uint16_t tmpstatus = 0x00;
 8004e24:	2300      	movs	r3, #0
 8004e26:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004e28:	f107 0312 	add.w	r3, r7, #18
 8004e2c:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8004e2e:	2300      	movs	r3, #0
 8004e30:	81bb      	strh	r3, [r7, #12]
  uint8_t dummy = 0xFF;
 8004e32:	23ff      	movs	r3, #255	; 0xff
 8004e34:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0] = READ_HEADER;
 8004e36:	2301      	movs	r3, #1
 8004e38:	733b      	strb	r3, [r7, #12]
  aHeader[1] = cRegAddress;
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2204      	movs	r2, #4
 8004e42:	2104      	movs	r1, #4
 8004e44:	2003      	movs	r0, #3
 8004e46:	f7ff fe35 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004e4a:	f7fc fd17 	bl	800187c <bandSelect>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004e52:	7c3b      	ldrb	r3, [r7, #16]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10a      	bne.n	8004e6e <RadioSpiReadRegisters+0x5a>
  {
	  RadioSpiHCSLow();
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2140      	movs	r1, #64	; 0x40
 8004e5c:	4843      	ldr	r0, [pc, #268]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004e5e:	f000 feb5 	bl	8005bcc <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004e62:	2201      	movs	r2, #1
 8004e64:	2120      	movs	r1, #32
 8004e66:	4841      	ldr	r0, [pc, #260]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004e68:	f000 feb0 	bl	8005bcc <HAL_GPIO_WritePin>
 8004e6c:	e017      	b.n	8004e9e <RadioSpiReadRegisters+0x8a>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004e6e:	7c7b      	ldrb	r3, [r7, #17]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d10a      	bne.n	8004e8a <RadioSpiReadRegisters+0x76>
	  {
		  RadioSpiHCSHigh();
 8004e74:	2201      	movs	r2, #1
 8004e76:	2140      	movs	r1, #64	; 0x40
 8004e78:	483c      	ldr	r0, [pc, #240]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004e7a:	f000 fea7 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2120      	movs	r1, #32
 8004e82:	483a      	ldr	r0, [pc, #232]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004e84:	f000 fea2 	bl	8005bcc <HAL_GPIO_WritePin>
 8004e88:	e009      	b.n	8004e9e <RadioSpiReadRegisters+0x8a>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2140      	movs	r1, #64	; 0x40
 8004e8e:	4837      	ldr	r0, [pc, #220]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004e90:	f000 fe9c 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004e94:	2201      	movs	r2, #1
 8004e96:	2120      	movs	r1, #32
 8004e98:	4834      	ldr	r0, [pc, #208]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004e9a:	f000 fe97 	bl	8005bcc <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	e004      	b.n	8004eae <RadioSpiReadRegisters+0x9a>
 8004ea4:	893b      	ldrh	r3, [r7, #8]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	813b      	strh	r3, [r7, #8]
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb6:	d3f5      	bcc.n	8004ea4 <RadioSpiReadRegisters+0x90>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8004eb8:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <RadioSpiReadRegisters+0x15c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f107 0212 	add.w	r2, r7, #18
 8004ec0:	f107 010c 	add.w	r1, r7, #12
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	482a      	ldr	r0, [pc, #168]	; (8004f74 <RadioSpiReadRegisters+0x160>)
 8004eca:	f001 fced 	bl	80068a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8004ece:	8a7b      	ldrh	r3, [r7, #18]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004ed6:	4b26      	ldr	r3, [pc, #152]	; (8004f70 <RadioSpiReadRegisters+0x15c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f107 0012 	add.w	r0, r7, #18
 8004ede:	f107 020c 	add.w	r2, r7, #12
 8004ee2:	1c51      	adds	r1, r2, #1
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4822      	ldr	r0, [pc, #136]	; (8004f74 <RadioSpiReadRegisters+0x160>)
 8004eec:	f001 fcdc 	bl	80068a8 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e00e      	b.n	8004f14 <RadioSpiReadRegisters+0x100>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&(pcBuffer)[index], 1, SpiTimeout);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	441a      	add	r2, r3
 8004efc:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <RadioSpiReadRegisters+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f107 010b 	add.w	r1, r7, #11
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2301      	movs	r3, #1
 8004f08:	481a      	ldr	r0, [pc, #104]	; (8004f74 <RadioSpiReadRegisters+0x160>)
 8004f0a:	f001 fccd 	bl	80068a8 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3301      	adds	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	79bb      	ldrb	r3, [r7, #6]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	dbec      	blt.n	8004ef6 <RadioSpiReadRegisters+0xe2>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004f1c:	bf00      	nop
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <RadioSpiReadRegisters+0x160>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d1f8      	bne.n	8004f1e <RadioSpiReadRegisters+0x10a>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2140      	movs	r1, #64	; 0x40
 8004f30:	480e      	ldr	r0, [pc, #56]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004f32:	f000 fe4b 	bl	8005bcc <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8004f36:	2201      	movs	r2, #1
 8004f38:	2120      	movs	r1, #32
 8004f3a:	480c      	ldr	r0, [pc, #48]	; (8004f6c <RadioSpiReadRegisters+0x158>)
 8004f3c:	f000 fe46 	bl	8005bcc <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8004f40:	2301      	movs	r3, #1
 8004f42:	2204      	movs	r2, #4
 8004f44:	2104      	movs	r1, #4
 8004f46:	2003      	movs	r0, #3
 8004f48:	f7ff fdb4 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	8812      	ldrh	r2, [r2, #0]
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	7d3a      	ldrb	r2, [r7, #20]
 8004f5a:	f362 0307 	bfi	r3, r2, #0, #8
 8004f5e:	7d7a      	ldrb	r2, [r7, #21]
 8004f60:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40020400 	.word	0x40020400
 8004f70:	20000170 	.word	0x20000170
 8004f74:	200003fc 	.word	0x200003fc

08004f78 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval StatusBytes
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
  uint8_t aHeader[2] = {0};
 8004f82:	2300      	movs	r3, #0
 8004f84:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpstatus = 0x0000;
 8004f86:	2300      	movs	r3, #0
 8004f88:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004f8a:	f107 0312 	add.w	r3, r7, #18
 8004f8e:	61fb      	str	r3, [r7, #28]
  
  /* Built the aHeader bytes */
  aHeader[0] = COMMAND_HEADER;
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	753b      	strb	r3, [r7, #20]
  aHeader[1] = cCommandCode;
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	757b      	strb	r3, [r7, #21]
  
  SPI_ENTER_CRITICAL();
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	2104      	movs	r1, #4
 8004f9e:	2003      	movs	r0, #3
 8004fa0:	f7ff fd88 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 8004fa4:	f7fc fc6a 	bl	800187c <bandSelect>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8004fac:	7c3b      	ldrb	r3, [r7, #16]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10a      	bne.n	8004fc8 <RadioSpiCommandStrobes+0x50>
  {
	  RadioSpiHCSLow();
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2140      	movs	r1, #64	; 0x40
 8004fb6:	4839      	ldr	r0, [pc, #228]	; (800509c <RadioSpiCommandStrobes+0x124>)
 8004fb8:	f000 fe08 	bl	8005bcc <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	2120      	movs	r1, #32
 8004fc0:	4836      	ldr	r0, [pc, #216]	; (800509c <RadioSpiCommandStrobes+0x124>)
 8004fc2:	f000 fe03 	bl	8005bcc <HAL_GPIO_WritePin>
 8004fc6:	e017      	b.n	8004ff8 <RadioSpiCommandStrobes+0x80>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 8004fc8:	7c7b      	ldrb	r3, [r7, #17]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10a      	bne.n	8004fe4 <RadioSpiCommandStrobes+0x6c>
	  {
		  RadioSpiHCSHigh();
 8004fce:	2201      	movs	r2, #1
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	4832      	ldr	r0, [pc, #200]	; (800509c <RadioSpiCommandStrobes+0x124>)
 8004fd4:	f000 fdfa 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2120      	movs	r1, #32
 8004fdc:	482f      	ldr	r0, [pc, #188]	; (800509c <RadioSpiCommandStrobes+0x124>)
 8004fde:	f000 fdf5 	bl	8005bcc <HAL_GPIO_WritePin>
 8004fe2:	e009      	b.n	8004ff8 <RadioSpiCommandStrobes+0x80>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2140      	movs	r1, #64	; 0x40
 8004fe8:	482c      	ldr	r0, [pc, #176]	; (800509c <RadioSpiCommandStrobes+0x124>)
 8004fea:	f000 fdef 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8004fee:	2201      	movs	r2, #1
 8004ff0:	2120      	movs	r1, #32
 8004ff2:	482a      	ldr	r0, [pc, #168]	; (800509c <RadioSpiCommandStrobes+0x124>)
 8004ff4:	f000 fdea 	bl	8005bcc <HAL_GPIO_WritePin>
	  }
  }

  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	81fb      	strh	r3, [r7, #14]
 8004ffc:	e004      	b.n	8005008 <RadioSpiCommandStrobes+0x90>
 8004ffe:	89fb      	ldrh	r3, [r7, #14]
 8005000:	b29b      	uxth	r3, r3
 8005002:	3301      	adds	r3, #1
 8005004:	b29b      	uxth	r3, r3
 8005006:	81fb      	strh	r3, [r7, #14]
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005010:	d3f5      	bcc.n	8004ffe <RadioSpiCommandStrobes+0x86>
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005012:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <RadioSpiCommandStrobes+0x128>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f107 0212 	add.w	r2, r7, #18
 800501a:	f107 0114 	add.w	r1, r7, #20
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2301      	movs	r3, #1
 8005022:	4820      	ldr	r0, [pc, #128]	; (80050a4 <RadioSpiCommandStrobes+0x12c>)
 8005024:	f001 fc40 	bl	80068a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8005028:	8a7b      	ldrh	r3, [r7, #18]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	b29b      	uxth	r3, r3
 800502e:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <RadioSpiCommandStrobes+0x128>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f107 0012 	add.w	r0, r7, #18
 8005038:	f107 0214 	add.w	r2, r7, #20
 800503c:	1c51      	adds	r1, r2, #1
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2301      	movs	r3, #1
 8005042:	4602      	mov	r2, r0
 8005044:	4817      	ldr	r0, [pc, #92]	; (80050a4 <RadioSpiCommandStrobes+0x12c>)
 8005046:	f001 fc2f 	bl	80068a8 <HAL_SPI_TransmitReceive>
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 800504a:	bf00      	nop
 800504c:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <RadioSpiCommandStrobes+0x12c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d1f8      	bne.n	800504c <RadioSpiCommandStrobes+0xd4>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 800505a:	2201      	movs	r2, #1
 800505c:	2140      	movs	r1, #64	; 0x40
 800505e:	480f      	ldr	r0, [pc, #60]	; (800509c <RadioSpiCommandStrobes+0x124>)
 8005060:	f000 fdb4 	bl	8005bcc <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8005064:	2201      	movs	r2, #1
 8005066:	2120      	movs	r1, #32
 8005068:	480c      	ldr	r0, [pc, #48]	; (800509c <RadioSpiCommandStrobes+0x124>)
 800506a:	f000 fdaf 	bl	8005bcc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800506e:	2301      	movs	r3, #1
 8005070:	2204      	movs	r2, #4
 8005072:	2104      	movs	r1, #4
 8005074:	2003      	movs	r0, #3
 8005076:	f7ff fd1d 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  return *pStatus;
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	f107 0318 	add.w	r3, r7, #24
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	7e3a      	ldrb	r2, [r7, #24]
 8005088:	f362 0307 	bfi	r3, r2, #0, #8
 800508c:	7e7a      	ldrb	r2, [r7, #25]
 800508e:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40020400 	.word	0x40020400
 80050a0:	20000170 	.word	0x20000170
 80050a4:	200003fc 	.word	0x200003fc

080050a8 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	4603      	mov	r3, r0
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 80050b4:	2300      	movs	r3, #0
 80050b6:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;

  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 80050b8:	f107 0312 	add.w	r3, r7, #18
 80050bc:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 80050be:	2300      	movs	r3, #0
 80050c0:	81bb      	strh	r3, [r7, #12]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 80050c2:	2300      	movs	r3, #0
 80050c4:	733b      	strb	r3, [r7, #12]
  aHeader[1] = LINEAR_FIFO_ADDRESS;
 80050c6:	23ff      	movs	r3, #255	; 0xff
 80050c8:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 80050ca:	2300      	movs	r3, #0
 80050cc:	2204      	movs	r2, #4
 80050ce:	2104      	movs	r1, #4
 80050d0:	2003      	movs	r0, #3
 80050d2:	f7ff fcef 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 80050d6:	f7fc fbd1 	bl	800187c <bandSelect>
 80050da:	4603      	mov	r3, r0
 80050dc:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 80050de:	7c3b      	ldrb	r3, [r7, #16]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d10a      	bne.n	80050fa <RadioSpiWriteFifo+0x52>
  {
	  RadioSpiHCSLow();
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	; 0x40
 80050e8:	4841      	ldr	r0, [pc, #260]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 80050ea:	f000 fd6f 	bl	8005bcc <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 80050ee:	2201      	movs	r2, #1
 80050f0:	2120      	movs	r1, #32
 80050f2:	483f      	ldr	r0, [pc, #252]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 80050f4:	f000 fd6a 	bl	8005bcc <HAL_GPIO_WritePin>
 80050f8:	e017      	b.n	800512a <RadioSpiWriteFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 80050fa:	7c7b      	ldrb	r3, [r7, #17]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10a      	bne.n	8005116 <RadioSpiWriteFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 8005100:	2201      	movs	r2, #1
 8005102:	2140      	movs	r1, #64	; 0x40
 8005104:	483a      	ldr	r0, [pc, #232]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 8005106:	f000 fd61 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 800510a:	2200      	movs	r2, #0
 800510c:	2120      	movs	r1, #32
 800510e:	4838      	ldr	r0, [pc, #224]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 8005110:	f000 fd5c 	bl	8005bcc <HAL_GPIO_WritePin>
 8005114:	e009      	b.n	800512a <RadioSpiWriteFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 8005116:	2200      	movs	r2, #0
 8005118:	2140      	movs	r1, #64	; 0x40
 800511a:	4835      	ldr	r0, [pc, #212]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 800511c:	f000 fd56 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8005120:	2201      	movs	r2, #1
 8005122:	2120      	movs	r1, #32
 8005124:	4832      	ldr	r0, [pc, #200]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 8005126:	f000 fd51 	bl	8005bcc <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 800512a:	2300      	movs	r3, #0
 800512c:	817b      	strh	r3, [r7, #10]
 800512e:	e004      	b.n	800513a <RadioSpiWriteFifo+0x92>
 8005130:	897b      	ldrh	r3, [r7, #10]
 8005132:	b29b      	uxth	r3, r3
 8005134:	3301      	adds	r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	817b      	strh	r3, [r7, #10]
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005142:	d3f5      	bcc.n	8005130 <RadioSpiWriteFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005144:	4b2b      	ldr	r3, [pc, #172]	; (80051f4 <RadioSpiWriteFifo+0x14c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f107 0212 	add.w	r2, r7, #18
 800514c:	f107 010c 	add.w	r1, r7, #12
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	2301      	movs	r3, #1
 8005154:	4828      	ldr	r0, [pc, #160]	; (80051f8 <RadioSpiWriteFifo+0x150>)
 8005156:	f001 fba7 	bl	80068a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 800515a:	8a7b      	ldrh	r3, [r7, #18]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	b29b      	uxth	r3, r3
 8005160:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <RadioSpiWriteFifo+0x14c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f107 0012 	add.w	r0, r7, #18
 800516a:	f107 020c 	add.w	r2, r7, #12
 800516e:	1c51      	adds	r1, r2, #1
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2301      	movs	r3, #1
 8005174:	4602      	mov	r2, r0
 8005176:	4820      	ldr	r0, [pc, #128]	; (80051f8 <RadioSpiWriteFifo+0x150>)
 8005178:	f001 fb96 	bl	80068a8 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	e009      	b.n	8005196 <RadioSpiWriteFifo+0xee>
  {
    SPI_Write(pcBuffer[index]);
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	4413      	add	r3, r2
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fd64 	bl	8004c58 <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	429a      	cmp	r2, r3
 800519c:	dbf1      	blt.n	8005182 <RadioSpiWriteFifo+0xda>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET); 
 800519e:	bf00      	nop
 80051a0:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <RadioSpiWriteFifo+0x150>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d1f8      	bne.n	80051a0 <RadioSpiWriteFifo+0xf8>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 80051ae:	2201      	movs	r2, #1
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	480f      	ldr	r0, [pc, #60]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 80051b4:	f000 fd0a 	bl	8005bcc <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 80051b8:	2201      	movs	r2, #1
 80051ba:	2120      	movs	r1, #32
 80051bc:	480c      	ldr	r0, [pc, #48]	; (80051f0 <RadioSpiWriteFifo+0x148>)
 80051be:	f000 fd05 	bl	8005bcc <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80051c2:	2301      	movs	r3, #1
 80051c4:	2204      	movs	r2, #4
 80051c6:	2104      	movs	r1, #4
 80051c8:	2003      	movs	r0, #3
 80051ca:	f7ff fc73 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  return *pStatus; 
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	2300      	movs	r3, #0
 80051da:	7d3a      	ldrb	r2, [r7, #20]
 80051dc:	f362 0307 	bfi	r3, r2, #0, #8
 80051e0:	7d7a      	ldrb	r2, [r7, #21]
 80051e2:	f362 230f 	bfi	r3, r2, #8, #8
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40020400 	.word	0x40020400
 80051f4:	20000170 	.word	0x20000170
 80051f8:	200003fc 	.word	0x200003fc

080051fc <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval StatusBytes
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af02      	add	r7, sp, #8
 8005202:	4603      	mov	r3, r0
 8005204:	6039      	str	r1, [r7, #0]
 8005206:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 8005208:	2300      	movs	r3, #0
 800520a:	827b      	strh	r3, [r7, #18]
  radio_select_t selectedBand;
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 800520c:	f107 0312 	add.w	r3, r7, #18
 8005210:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2];
  uint8_t dummy=0xFF;
 8005212:	23ff      	movs	r3, #255	; 0xff
 8005214:	72fb      	strb	r3, [r7, #11]
  
  /* Built the aHeader bytes */
  aHeader[0]=READ_HEADER;
 8005216:	2301      	movs	r3, #1
 8005218:	733b      	strb	r3, [r7, #12]
  aHeader[1]=LINEAR_FIFO_ADDRESS;
 800521a:	23ff      	movs	r3, #255	; 0xff
 800521c:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 800521e:	2300      	movs	r3, #0
 8005220:	2204      	movs	r2, #4
 8005222:	2104      	movs	r1, #4
 8005224:	2003      	movs	r0, #3
 8005226:	f7ff fc45 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  selectedBand = bandSelect();
 800522a:	f7fc fb27 	bl	800187c <bandSelect>
 800522e:	4603      	mov	r3, r0
 8005230:	823b      	strh	r3, [r7, #16]
  if(selectedBand.conf_868 == SET)
 8005232:	7c3b      	ldrb	r3, [r7, #16]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10a      	bne.n	800524e <RadioSpiReadFifo+0x52>
  {
	  RadioSpiHCSLow();
 8005238:	2200      	movs	r2, #0
 800523a:	2140      	movs	r1, #64	; 0x40
 800523c:	4843      	ldr	r0, [pc, #268]	; (800534c <RadioSpiReadFifo+0x150>)
 800523e:	f000 fcc5 	bl	8005bcc <HAL_GPIO_WritePin>
	  RadioSpiSCSHigh();
 8005242:	2201      	movs	r2, #1
 8005244:	2120      	movs	r1, #32
 8005246:	4841      	ldr	r0, [pc, #260]	; (800534c <RadioSpiReadFifo+0x150>)
 8005248:	f000 fcc0 	bl	8005bcc <HAL_GPIO_WritePin>
 800524c:	e017      	b.n	800527e <RadioSpiReadFifo+0x82>
  }
  else
  {
	  if (selectedBand.conf_433 == SET)
 800524e:	7c7b      	ldrb	r3, [r7, #17]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10a      	bne.n	800526a <RadioSpiReadFifo+0x6e>
	  {
		  RadioSpiHCSHigh();
 8005254:	2201      	movs	r2, #1
 8005256:	2140      	movs	r1, #64	; 0x40
 8005258:	483c      	ldr	r0, [pc, #240]	; (800534c <RadioSpiReadFifo+0x150>)
 800525a:	f000 fcb7 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSLow();
 800525e:	2200      	movs	r2, #0
 8005260:	2120      	movs	r1, #32
 8005262:	483a      	ldr	r0, [pc, #232]	; (800534c <RadioSpiReadFifo+0x150>)
 8005264:	f000 fcb2 	bl	8005bcc <HAL_GPIO_WritePin>
 8005268:	e009      	b.n	800527e <RadioSpiReadFifo+0x82>
	  }
	  else /*ERROR FLAG*/
	  {
		  RadioSpiHCSLow();
 800526a:	2200      	movs	r2, #0
 800526c:	2140      	movs	r1, #64	; 0x40
 800526e:	4837      	ldr	r0, [pc, #220]	; (800534c <RadioSpiReadFifo+0x150>)
 8005270:	f000 fcac 	bl	8005bcc <HAL_GPIO_WritePin>
		  RadioSpiSCSHigh();
 8005274:	2201      	movs	r2, #1
 8005276:	2120      	movs	r1, #32
 8005278:	4834      	ldr	r0, [pc, #208]	; (800534c <RadioSpiReadFifo+0x150>)
 800527a:	f000 fca7 	bl	8005bcc <HAL_GPIO_WritePin>
	  }
  }

  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 800527e:	2300      	movs	r3, #0
 8005280:	813b      	strh	r3, [r7, #8]
 8005282:	e004      	b.n	800528e <RadioSpiReadFifo+0x92>
 8005284:	893b      	ldrh	r3, [r7, #8]
 8005286:	b29b      	uxth	r3, r3
 8005288:	3301      	adds	r3, #1
 800528a:	b29b      	uxth	r3, r3
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	893b      	ldrh	r3, [r7, #8]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005296:	d3f5      	bcc.n	8005284 <RadioSpiReadFifo+0x88>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8005298:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <RadioSpiReadFifo+0x154>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f107 0212 	add.w	r2, r7, #18
 80052a0:	f107 010c 	add.w	r1, r7, #12
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2301      	movs	r3, #1
 80052a8:	482a      	ldr	r0, [pc, #168]	; (8005354 <RadioSpiReadFifo+0x158>)
 80052aa:	f001 fafd 	bl	80068a8 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 80052ae:	8a7b      	ldrh	r3, [r7, #18]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 80052b6:	4b26      	ldr	r3, [pc, #152]	; (8005350 <RadioSpiReadFifo+0x154>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f107 0012 	add.w	r0, r7, #18
 80052be:	f107 020c 	add.w	r2, r7, #12
 80052c2:	1c51      	adds	r1, r2, #1
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	2301      	movs	r3, #1
 80052c8:	4602      	mov	r2, r0
 80052ca:	4822      	ldr	r0, [pc, #136]	; (8005354 <RadioSpiReadFifo+0x158>)
 80052cc:	f001 faec 	bl	80068a8 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e00e      	b.n	80052f4 <RadioSpiReadFifo+0xf8>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&pcBuffer[index], 1, SpiTimeout);
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	441a      	add	r2, r3
 80052dc:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <RadioSpiReadFifo+0x154>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f107 010b 	add.w	r1, r7, #11
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	2301      	movs	r3, #1
 80052e8:	481a      	ldr	r0, [pc, #104]	; (8005354 <RadioSpiReadFifo+0x158>)
 80052ea:	f001 fadd 	bl	80068a8 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3301      	adds	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	dbec      	blt.n	80052d6 <RadioSpiReadFifo+0xda>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while(__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 80052fc:	bf00      	nop
 80052fe:	4b15      	ldr	r3, [pc, #84]	; (8005354 <RadioSpiReadFifo+0x158>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d1f8      	bne.n	80052fe <RadioSpiReadFifo+0x102>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiHCSHigh();
 800530c:	2201      	movs	r2, #1
 800530e:	2140      	movs	r1, #64	; 0x40
 8005310:	480e      	ldr	r0, [pc, #56]	; (800534c <RadioSpiReadFifo+0x150>)
 8005312:	f000 fc5b 	bl	8005bcc <HAL_GPIO_WritePin>
  RadioSpiSCSHigh();
 8005316:	2201      	movs	r2, #1
 8005318:	2120      	movs	r1, #32
 800531a:	480c      	ldr	r0, [pc, #48]	; (800534c <RadioSpiReadFifo+0x150>)
 800531c:	f000 fc56 	bl	8005bcc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8005320:	2301      	movs	r3, #1
 8005322:	2204      	movs	r2, #4
 8005324:	2104      	movs	r1, #4
 8005326:	2003      	movs	r0, #3
 8005328:	f7ff fbc4 	bl	8004ab4 <RadioGpioInterruptCmd>
  
  return *pStatus;  
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	f107 0314 	add.w	r3, r7, #20
 8005332:	8812      	ldrh	r2, [r2, #0]
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	7d3a      	ldrb	r2, [r7, #20]
 800533a:	f362 0307 	bfi	r3, r2, #0, #8
 800533e:	7d7a      	ldrb	r2, [r7, #21]
 8005340:	f362 230f 	bfi	r3, r2, #8, #8
}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40020400 	.word	0x40020400
 8005350:	20000170 	.word	0x20000170
 8005354:	200003fc 	.word	0x200003fc

08005358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_Init+0x40>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <HAL_Init+0x40>)
 8005362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_Init+0x40>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <HAL_Init+0x40>)
 800536e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_Init+0x40>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_Init+0x40>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005380:	2003      	movs	r0, #3
 8005382:	f000 f96f 	bl	8005664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005386:	2000      	movs	r0, #0
 8005388:	f000 f808 	bl	800539c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800538c:	f7fc fb10 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023c00 	.word	0x40023c00

0800539c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_InitTick+0x54>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_InitTick+0x58>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f995 	bl	80056ea <HAL_SYSTICK_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00e      	b.n	80053e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d80a      	bhi.n	80053e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053d0:	2200      	movs	r2, #0
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	f000 f94f 	bl	800567a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <HAL_InitTick+0x5c>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000014c 	.word	0x2000014c
 80053f4:	20000178 	.word	0x20000178
 80053f8:	20000174 	.word	0x20000174

080053fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_IncTick+0x20>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <HAL_IncTick+0x24>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4413      	add	r3, r2
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <HAL_IncTick+0x24>)
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000178 	.word	0x20000178
 8005420:	20000454 	.word	0x20000454

08005424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return uwTick;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_GetTick+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000454 	.word	0x20000454

0800543c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005444:	f7ff ffee 	bl	8005424 <HAL_GetTick>
 8005448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d005      	beq.n	8005462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <HAL_Delay+0x40>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005462:	bf00      	nop
 8005464:	f7ff ffde 	bl	8005424 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d8f7      	bhi.n	8005464 <HAL_Delay+0x28>
  {
  }
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000178 	.word	0x20000178

08005480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800549c:	4013      	ands	r3, r2
 800549e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054b2:	4a04      	ldr	r2, [pc, #16]	; (80054c4 <__NVIC_SetPriorityGrouping+0x44>)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	60d3      	str	r3, [r2, #12]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	e000ed00 	.word	0xe000ed00

080054c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <__NVIC_GetPriorityGrouping+0x18>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	f003 0307 	and.w	r3, r3, #7
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000ed00 	.word	0xe000ed00

080054e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	db0b      	blt.n	800550e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	f003 021f 	and.w	r2, r3, #31
 80054fc:	4907      	ldr	r1, [pc, #28]	; (800551c <__NVIC_EnableIRQ+0x38>)
 80054fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	2001      	movs	r0, #1
 8005506:	fa00 f202 	lsl.w	r2, r0, r2
 800550a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	e000e100 	.word	0xe000e100

08005520 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	2b00      	cmp	r3, #0
 8005530:	db10      	blt.n	8005554 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	f003 021f 	and.w	r2, r3, #31
 8005538:	4909      	ldr	r1, [pc, #36]	; (8005560 <__NVIC_DisableIRQ+0x40>)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	2001      	movs	r0, #1
 8005542:	fa00 f202 	lsl.w	r2, r0, r2
 8005546:	3320      	adds	r3, #32
 8005548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800554c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005550:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	e000e100 	.word	0xe000e100

08005564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	6039      	str	r1, [r7, #0]
 800556e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005574:	2b00      	cmp	r3, #0
 8005576:	db0a      	blt.n	800558e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	b2da      	uxtb	r2, r3
 800557c:	490c      	ldr	r1, [pc, #48]	; (80055b0 <__NVIC_SetPriority+0x4c>)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	0112      	lsls	r2, r2, #4
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	440b      	add	r3, r1
 8005588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800558c:	e00a      	b.n	80055a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	4908      	ldr	r1, [pc, #32]	; (80055b4 <__NVIC_SetPriority+0x50>)
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	3b04      	subs	r3, #4
 800559c:	0112      	lsls	r2, r2, #4
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	440b      	add	r3, r1
 80055a2:	761a      	strb	r2, [r3, #24]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	e000e100 	.word	0xe000e100
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	; 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f1c3 0307 	rsb	r3, r3, #7
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	bf28      	it	cs
 80055d6:	2304      	movcs	r3, #4
 80055d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	3304      	adds	r3, #4
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d902      	bls.n	80055e8 <NVIC_EncodePriority+0x30>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3b03      	subs	r3, #3
 80055e6:	e000      	b.n	80055ea <NVIC_EncodePriority+0x32>
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055ec:	f04f 32ff 	mov.w	r2, #4294967295
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43da      	mvns	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	401a      	ands	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005600:	f04f 31ff 	mov.w	r1, #4294967295
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	43d9      	mvns	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005610:	4313      	orrs	r3, r2
         );
}
 8005612:	4618      	mov	r0, r3
 8005614:	3724      	adds	r7, #36	; 0x24
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005630:	d301      	bcc.n	8005636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005632:	2301      	movs	r3, #1
 8005634:	e00f      	b.n	8005656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005636:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <SysTick_Config+0x40>)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3b01      	subs	r3, #1
 800563c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800563e:	210f      	movs	r1, #15
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	f7ff ff8e 	bl	8005564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <SysTick_Config+0x40>)
 800564a:	2200      	movs	r2, #0
 800564c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <SysTick_Config+0x40>)
 8005650:	2207      	movs	r2, #7
 8005652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	e000e010 	.word	0xe000e010

08005664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff07 	bl	8005480 <__NVIC_SetPriorityGrouping>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	4603      	mov	r3, r0
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800568c:	f7ff ff1c 	bl	80054c8 <__NVIC_GetPriorityGrouping>
 8005690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f7ff ff8e 	bl	80055b8 <NVIC_EncodePriority>
 800569c:	4602      	mov	r2, r0
 800569e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff5d 	bl	8005564 <__NVIC_SetPriority>
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	4603      	mov	r3, r0
 80056ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff0f 	bl	80054e4 <__NVIC_EnableIRQ>
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	4603      	mov	r3, r0
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80056d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ff1f 	bl	8005520 <__NVIC_DisableIRQ>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ff94 	bl	8005620 <SysTick_Config>
 80056f8:	4603      	mov	r3, r0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e159      	b.n	80059d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005720:	2201      	movs	r2, #1
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	429a      	cmp	r2, r3
 800573a:	f040 8148 	bne.w	80059ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d00b      	beq.n	800575e <HAL_GPIO_Init+0x5a>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d007      	beq.n	800575e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005752:	2b11      	cmp	r3, #17
 8005754:	d003      	beq.n	800575e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b12      	cmp	r3, #18
 800575c:	d130      	bne.n	80057c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	2203      	movs	r2, #3
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005794:	2201      	movs	r2, #1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4013      	ands	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 0201 	and.w	r2, r3, #1
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	2203      	movs	r2, #3
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0xfc>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b12      	cmp	r3, #18
 80057fe:	d123      	bne.n	8005848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	08da      	lsrs	r2, r3, #3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3208      	adds	r2, #8
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	220f      	movs	r2, #15
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	08da      	lsrs	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3208      	adds	r2, #8
 8005842:	69b9      	ldr	r1, [r7, #24]
 8005844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	2203      	movs	r2, #3
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0203 	and.w	r2, r3, #3
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80a2 	beq.w	80059ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4b56      	ldr	r3, [pc, #344]	; (80059e8 <HAL_GPIO_Init+0x2e4>)
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	4a55      	ldr	r2, [pc, #340]	; (80059e8 <HAL_GPIO_Init+0x2e4>)
 8005894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005898:	6453      	str	r3, [r2, #68]	; 0x44
 800589a:	4b53      	ldr	r3, [pc, #332]	; (80059e8 <HAL_GPIO_Init+0x2e4>)
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a6:	4a51      	ldr	r2, [pc, #324]	; (80059ec <HAL_GPIO_Init+0x2e8>)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	3302      	adds	r3, #2
 80058ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	220f      	movs	r2, #15
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a48      	ldr	r2, [pc, #288]	; (80059f0 <HAL_GPIO_Init+0x2ec>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d019      	beq.n	8005906 <HAL_GPIO_Init+0x202>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a47      	ldr	r2, [pc, #284]	; (80059f4 <HAL_GPIO_Init+0x2f0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_GPIO_Init+0x1fe>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a46      	ldr	r2, [pc, #280]	; (80059f8 <HAL_GPIO_Init+0x2f4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00d      	beq.n	80058fe <HAL_GPIO_Init+0x1fa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a45      	ldr	r2, [pc, #276]	; (80059fc <HAL_GPIO_Init+0x2f8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <HAL_GPIO_Init+0x1f6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a44      	ldr	r2, [pc, #272]	; (8005a00 <HAL_GPIO_Init+0x2fc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <HAL_GPIO_Init+0x1f2>
 80058f2:	2304      	movs	r3, #4
 80058f4:	e008      	b.n	8005908 <HAL_GPIO_Init+0x204>
 80058f6:	2307      	movs	r3, #7
 80058f8:	e006      	b.n	8005908 <HAL_GPIO_Init+0x204>
 80058fa:	2303      	movs	r3, #3
 80058fc:	e004      	b.n	8005908 <HAL_GPIO_Init+0x204>
 80058fe:	2302      	movs	r3, #2
 8005900:	e002      	b.n	8005908 <HAL_GPIO_Init+0x204>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_GPIO_Init+0x204>
 8005906:	2300      	movs	r3, #0
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	f002 0203 	and.w	r2, r2, #3
 800590e:	0092      	lsls	r2, r2, #2
 8005910:	4093      	lsls	r3, r2
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005918:	4934      	ldr	r1, [pc, #208]	; (80059ec <HAL_GPIO_Init+0x2e8>)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	089b      	lsrs	r3, r3, #2
 800591e:	3302      	adds	r3, #2
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005926:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <HAL_GPIO_Init+0x300>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800594a:	4a2e      	ldr	r2, [pc, #184]	; (8005a04 <HAL_GPIO_Init+0x300>)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005950:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <HAL_GPIO_Init+0x300>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005974:	4a23      	ldr	r2, [pc, #140]	; (8005a04 <HAL_GPIO_Init+0x300>)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800597a:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <HAL_GPIO_Init+0x300>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	43db      	mvns	r3, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4013      	ands	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800599e:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <HAL_GPIO_Init+0x300>)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059a4:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <HAL_GPIO_Init+0x300>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059c8:	4a0e      	ldr	r2, [pc, #56]	; (8005a04 <HAL_GPIO_Init+0x300>)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	f67f aea2 	bls.w	8005720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059dc:	bf00      	nop
 80059de:	3724      	adds	r7, #36	; 0x24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40013800 	.word	0x40013800
 80059f0:	40020000 	.word	0x40020000
 80059f4:	40020400 	.word	0x40020400
 80059f8:	40020800 	.word	0x40020800
 80059fc:	40020c00 	.word	0x40020c00
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40013c00 	.word	0x40013c00

08005a08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e0bb      	b.n	8005b9c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a24:	2201      	movs	r2, #1
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4013      	ands	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	f040 80ab 	bne.w	8005b96 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005a40:	4a5b      	ldr	r2, [pc, #364]	; (8005bb0 <HAL_GPIO_DeInit+0x1a8>)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	3302      	adds	r3, #2
 8005a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	220f      	movs	r2, #15
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a53      	ldr	r2, [pc, #332]	; (8005bb4 <HAL_GPIO_DeInit+0x1ac>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d019      	beq.n	8005a9e <HAL_GPIO_DeInit+0x96>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a52      	ldr	r2, [pc, #328]	; (8005bb8 <HAL_GPIO_DeInit+0x1b0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_GPIO_DeInit+0x92>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a51      	ldr	r2, [pc, #324]	; (8005bbc <HAL_GPIO_DeInit+0x1b4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00d      	beq.n	8005a96 <HAL_GPIO_DeInit+0x8e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a50      	ldr	r2, [pc, #320]	; (8005bc0 <HAL_GPIO_DeInit+0x1b8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <HAL_GPIO_DeInit+0x8a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a4f      	ldr	r2, [pc, #316]	; (8005bc4 <HAL_GPIO_DeInit+0x1bc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_GPIO_DeInit+0x86>
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	e008      	b.n	8005aa0 <HAL_GPIO_DeInit+0x98>
 8005a8e:	2307      	movs	r3, #7
 8005a90:	e006      	b.n	8005aa0 <HAL_GPIO_DeInit+0x98>
 8005a92:	2303      	movs	r3, #3
 8005a94:	e004      	b.n	8005aa0 <HAL_GPIO_DeInit+0x98>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e002      	b.n	8005aa0 <HAL_GPIO_DeInit+0x98>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <HAL_GPIO_DeInit+0x98>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	f002 0203 	and.w	r2, r2, #3
 8005aa6:	0092      	lsls	r2, r2, #2
 8005aa8:	4093      	lsls	r3, r2
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d132      	bne.n	8005b16 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ab0:	4b45      	ldr	r3, [pc, #276]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	4943      	ldr	r1, [pc, #268]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005abe:	4b42      	ldr	r3, [pc, #264]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	4940      	ldr	r1, [pc, #256]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	493c      	ldr	r1, [pc, #240]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ada:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	4939      	ldr	r1, [pc, #228]	; (8005bc8 <HAL_GPIO_DeInit+0x1c0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	220f      	movs	r2, #15
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005af8:	4a2d      	ldr	r2, [pc, #180]	; (8005bb0 <HAL_GPIO_DeInit+0x1a8>)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	089b      	lsrs	r3, r3, #2
 8005afe:	3302      	adds	r3, #2
 8005b00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	43da      	mvns	r2, r3
 8005b08:	4829      	ldr	r0, [pc, #164]	; (8005bb0 <HAL_GPIO_DeInit+0x1a8>)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	089b      	lsrs	r3, r3, #2
 8005b0e:	400a      	ands	r2, r1
 8005b10:	3302      	adds	r3, #2
 8005b12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	2103      	movs	r1, #3
 8005b20:	fa01 f303 	lsl.w	r3, r1, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	401a      	ands	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	08da      	lsrs	r2, r3, #3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3208      	adds	r2, #8
 8005b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	220f      	movs	r2, #15
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43db      	mvns	r3, r3
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	08d2      	lsrs	r2, r2, #3
 8005b4c:	4019      	ands	r1, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3208      	adds	r2, #8
 8005b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	2103      	movs	r1, #3
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	401a      	ands	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	2101      	movs	r1, #1
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	2103      	movs	r1, #3
 8005b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	401a      	ands	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b0f      	cmp	r3, #15
 8005ba0:	f67f af40 	bls.w	8005a24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40020000 	.word	0x40020000
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	40020800 	.word	0x40020800
 8005bc0:	40020c00 	.word	0x40020c00
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40013c00 	.word	0x40013c00

08005bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bdc:	787b      	ldrb	r3, [r7, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005be8:	e003      	b.n	8005bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	041a      	lsls	r2, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	619a      	str	r2, [r3, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	887b      	ldrh	r3, [r7, #2]
 8005c10:	401a      	ands	r2, r3
 8005c12:	887b      	ldrh	r3, [r7, #2]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d104      	bne.n	8005c22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	041a      	lsls	r2, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005c20:	e002      	b.n	8005c28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005c22:	887a      	ldrh	r2, [r7, #2]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c3e:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d006      	beq.n	8005c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c4a:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fb fe84 	bl	8001960 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40013c00 	.word	0x40013c00

08005c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e25b      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d075      	beq.n	8005d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c82:	4ba3      	ldr	r3, [pc, #652]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c8e:	4ba0      	ldr	r3, [pc, #640]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d112      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9a:	4b9d      	ldr	r3, [pc, #628]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	4b99      	ldr	r3, [pc, #612]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05b      	beq.n	8005d6c <HAL_RCC_OscConfig+0x108>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d157      	bne.n	8005d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e236      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x74>
 8005cca:	4b91      	ldr	r3, [pc, #580]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a90      	ldr	r2, [pc, #576]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e01d      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x98>
 8005ce2:	4b8b      	ldr	r3, [pc, #556]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a8a      	ldr	r2, [pc, #552]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b88      	ldr	r3, [pc, #544]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a87      	ldr	r2, [pc, #540]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e00b      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	4b84      	ldr	r3, [pc, #528]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a83      	ldr	r2, [pc, #524]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4b81      	ldr	r3, [pc, #516]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a80      	ldr	r2, [pc, #512]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7ff fb82 	bl	8005424 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d24:	f7ff fb7e 	bl	8005424 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e1fb      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	4b76      	ldr	r3, [pc, #472]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0xc0>
 8005d42:	e014      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7ff fb6e 	bl	8005424 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d4c:	f7ff fb6a 	bl	8005424 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b64      	cmp	r3, #100	; 0x64
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e1e7      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	4b6c      	ldr	r3, [pc, #432]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0xe8>
 8005d6a:	e000      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d063      	beq.n	8005e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d7a:	4b65      	ldr	r3, [pc, #404]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d86:	4b62      	ldr	r3, [pc, #392]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d11c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d92:	4b5f      	ldr	r3, [pc, #380]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d116      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9e:	4b5c      	ldr	r3, [pc, #368]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e1bb      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db6:	4b56      	ldr	r3, [pc, #344]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4952      	ldr	r1, [pc, #328]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dca:	e03a      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d020      	beq.n	8005e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd4:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <HAL_RCC_OscConfig+0x2b0>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7ff fb23 	bl	8005424 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de2:	f7ff fb1f 	bl	8005424 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e19c      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	4b46      	ldr	r3, [pc, #280]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e00:	4b43      	ldr	r3, [pc, #268]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4940      	ldr	r1, [pc, #256]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]
 8005e14:	e015      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e16:	4b3f      	ldr	r3, [pc, #252]	; (8005f14 <HAL_RCC_OscConfig+0x2b0>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7ff fb02 	bl	8005424 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e24:	f7ff fafe 	bl	8005424 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e17b      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	4b36      	ldr	r3, [pc, #216]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d030      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d016      	beq.n	8005e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e56:	4b30      	ldr	r3, [pc, #192]	; (8005f18 <HAL_RCC_OscConfig+0x2b4>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7ff fae2 	bl	8005424 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e64:	f7ff fade 	bl	8005424 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e15b      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0x200>
 8005e82:	e015      	b.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e84:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <HAL_RCC_OscConfig+0x2b4>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7ff facb 	bl	8005424 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e92:	f7ff fac7 	bl	8005424 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e144      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80a0 	beq.w	8005ffe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	4a0e      	ldr	r2, [pc, #56]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005edc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	60bb      	str	r3, [r7, #8]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eee:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_RCC_OscConfig+0x2b8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d121      	bne.n	8005f3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005efa:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <HAL_RCC_OscConfig+0x2b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a07      	ldr	r2, [pc, #28]	; (8005f1c <HAL_RCC_OscConfig+0x2b8>)
 8005f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f06:	f7ff fa8d 	bl	8005424 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0c:	e011      	b.n	8005f32 <HAL_RCC_OscConfig+0x2ce>
 8005f0e:	bf00      	nop
 8005f10:	40023800 	.word	0x40023800
 8005f14:	42470000 	.word	0x42470000
 8005f18:	42470e80 	.word	0x42470e80
 8005f1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f20:	f7ff fa80 	bl	8005424 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e0fd      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f32:	4b81      	ldr	r3, [pc, #516]	; (8006138 <HAL_RCC_OscConfig+0x4d4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f0      	beq.n	8005f20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d106      	bne.n	8005f54 <HAL_RCC_OscConfig+0x2f0>
 8005f46:	4b7d      	ldr	r3, [pc, #500]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	4a7c      	ldr	r2, [pc, #496]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6713      	str	r3, [r2, #112]	; 0x70
 8005f52:	e01c      	b.n	8005f8e <HAL_RCC_OscConfig+0x32a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d10c      	bne.n	8005f76 <HAL_RCC_OscConfig+0x312>
 8005f5c:	4b77      	ldr	r3, [pc, #476]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f60:	4a76      	ldr	r2, [pc, #472]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f62:	f043 0304 	orr.w	r3, r3, #4
 8005f66:	6713      	str	r3, [r2, #112]	; 0x70
 8005f68:	4b74      	ldr	r3, [pc, #464]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	4a73      	ldr	r2, [pc, #460]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	6713      	str	r3, [r2, #112]	; 0x70
 8005f74:	e00b      	b.n	8005f8e <HAL_RCC_OscConfig+0x32a>
 8005f76:	4b71      	ldr	r3, [pc, #452]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	4a70      	ldr	r2, [pc, #448]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	6713      	str	r3, [r2, #112]	; 0x70
 8005f82:	4b6e      	ldr	r3, [pc, #440]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a6d      	ldr	r2, [pc, #436]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005f88:	f023 0304 	bic.w	r3, r3, #4
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d015      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f96:	f7ff fa45 	bl	8005424 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f7ff fa41 	bl	8005424 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e0bc      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb4:	4b61      	ldr	r3, [pc, #388]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0ee      	beq.n	8005f9e <HAL_RCC_OscConfig+0x33a>
 8005fc0:	e014      	b.n	8005fec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fc2:	f7ff fa2f 	bl	8005424 <HAL_GetTick>
 8005fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc8:	e00a      	b.n	8005fe0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fca:	f7ff fa2b 	bl	8005424 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e0a6      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe0:	4b56      	ldr	r3, [pc, #344]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1ee      	bne.n	8005fca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff2:	4b52      	ldr	r3, [pc, #328]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	4a51      	ldr	r2, [pc, #324]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8005ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8092 	beq.w	800612c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006008:	4b4c      	ldr	r3, [pc, #304]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 030c 	and.w	r3, r3, #12
 8006010:	2b08      	cmp	r3, #8
 8006012:	d05c      	beq.n	80060ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d141      	bne.n	80060a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601c:	4b48      	ldr	r3, [pc, #288]	; (8006140 <HAL_RCC_OscConfig+0x4dc>)
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006022:	f7ff f9ff 	bl	8005424 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602a:	f7ff f9fb 	bl	8005424 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e078      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800603c:	4b3f      	ldr	r3, [pc, #252]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f0      	bne.n	800602a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	019b      	lsls	r3, r3, #6
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	3b01      	subs	r3, #1
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	061b      	lsls	r3, r3, #24
 800606c:	4933      	ldr	r1, [pc, #204]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 800606e:	4313      	orrs	r3, r2
 8006070:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006072:	4b33      	ldr	r3, [pc, #204]	; (8006140 <HAL_RCC_OscConfig+0x4dc>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006078:	f7ff f9d4 	bl	8005424 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006080:	f7ff f9d0 	bl	8005424 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e04d      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006092:	4b2a      	ldr	r3, [pc, #168]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0x41c>
 800609e:	e045      	b.n	800612c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <HAL_RCC_OscConfig+0x4dc>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a6:	f7ff f9bd 	bl	8005424 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ae:	f7ff f9b9 	bl	8005424 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e036      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c0:	4b1e      	ldr	r3, [pc, #120]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f0      	bne.n	80060ae <HAL_RCC_OscConfig+0x44a>
 80060cc:	e02e      	b.n	800612c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e029      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060da:	4b18      	ldr	r3, [pc, #96]	; (800613c <HAL_RCC_OscConfig+0x4d8>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d11c      	bne.n	8006128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d115      	bne.n	8006128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006102:	4013      	ands	r3, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006108:	4293      	cmp	r3, r2
 800610a:	d10d      	bne.n	8006128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d106      	bne.n	8006128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d001      	beq.n	800612c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40007000 	.word	0x40007000
 800613c:	40023800 	.word	0x40023800
 8006140:	42470060 	.word	0x42470060

08006144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0cc      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006158:	4b68      	ldr	r3, [pc, #416]	; (80062fc <HAL_RCC_ClockConfig+0x1b8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d90c      	bls.n	8006180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006166:	4b65      	ldr	r3, [pc, #404]	; (80062fc <HAL_RCC_ClockConfig+0x1b8>)
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	4b63      	ldr	r3, [pc, #396]	; (80062fc <HAL_RCC_ClockConfig+0x1b8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d001      	beq.n	8006180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0b8      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d020      	beq.n	80061ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006198:	4b59      	ldr	r3, [pc, #356]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	4a58      	ldr	r2, [pc, #352]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061b0:	4b53      	ldr	r3, [pc, #332]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	4a52      	ldr	r2, [pc, #328]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061bc:	4b50      	ldr	r3, [pc, #320]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	494d      	ldr	r1, [pc, #308]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d044      	beq.n	8006264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d107      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e2:	4b47      	ldr	r3, [pc, #284]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d119      	bne.n	8006222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e07f      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d003      	beq.n	8006202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d107      	bne.n	8006212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006202:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e06f      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006212:	4b3b      	ldr	r3, [pc, #236]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e067      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006222:	4b37      	ldr	r3, [pc, #220]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f023 0203 	bic.w	r2, r3, #3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	4934      	ldr	r1, [pc, #208]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	4313      	orrs	r3, r2
 8006232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006234:	f7ff f8f6 	bl	8005424 <HAL_GetTick>
 8006238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623a:	e00a      	b.n	8006252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800623c:	f7ff f8f2 	bl	8005424 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f241 3288 	movw	r2, #5000	; 0x1388
 800624a:	4293      	cmp	r3, r2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e04f      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006252:	4b2b      	ldr	r3, [pc, #172]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 020c 	and.w	r2, r3, #12
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	429a      	cmp	r2, r3
 8006262:	d1eb      	bne.n	800623c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006264:	4b25      	ldr	r3, [pc, #148]	; (80062fc <HAL_RCC_ClockConfig+0x1b8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d20c      	bcs.n	800628c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006272:	4b22      	ldr	r3, [pc, #136]	; (80062fc <HAL_RCC_ClockConfig+0x1b8>)
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	4b20      	ldr	r3, [pc, #128]	; (80062fc <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e032      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006298:	4b19      	ldr	r3, [pc, #100]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4916      	ldr	r1, [pc, #88]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	490e      	ldr	r1, [pc, #56]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062ca:	f000 f821 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 80062ce:	4601      	mov	r1, r0
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	4a0a      	ldr	r2, [pc, #40]	; (8006304 <HAL_RCC_ClockConfig+0x1c0>)
 80062dc:	5cd3      	ldrb	r3, [r2, r3]
 80062de:	fa21 f303 	lsr.w	r3, r1, r3
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <HAL_RCC_ClockConfig+0x1c4>)
 80062e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <HAL_RCC_ClockConfig+0x1c8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff f856 	bl	800539c <HAL_InitTick>

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40023c00 	.word	0x40023c00
 8006300:	40023800 	.word	0x40023800
 8006304:	08007fb0 	.word	0x08007fb0
 8006308:	2000014c 	.word	0x2000014c
 800630c:	20000174 	.word	0x20000174

08006310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	2300      	movs	r3, #0
 8006320:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006326:	4b63      	ldr	r3, [pc, #396]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
 800632e:	2b04      	cmp	r3, #4
 8006330:	d007      	beq.n	8006342 <HAL_RCC_GetSysClockFreq+0x32>
 8006332:	2b08      	cmp	r3, #8
 8006334:	d008      	beq.n	8006348 <HAL_RCC_GetSysClockFreq+0x38>
 8006336:	2b00      	cmp	r3, #0
 8006338:	f040 80b4 	bne.w	80064a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800633c:	4b5e      	ldr	r3, [pc, #376]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800633e:	60bb      	str	r3, [r7, #8]
       break;
 8006340:	e0b3      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006342:	4b5e      	ldr	r3, [pc, #376]	; (80064bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006344:	60bb      	str	r3, [r7, #8]
      break;
 8006346:	e0b0      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006348:	4b5a      	ldr	r3, [pc, #360]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006350:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006352:	4b58      	ldr	r3, [pc, #352]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d04a      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800635e:	4b55      	ldr	r3, [pc, #340]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	099b      	lsrs	r3, r3, #6
 8006364:	f04f 0400 	mov.w	r4, #0
 8006368:	f240 11ff 	movw	r1, #511	; 0x1ff
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	ea03 0501 	and.w	r5, r3, r1
 8006374:	ea04 0602 	and.w	r6, r4, r2
 8006378:	4629      	mov	r1, r5
 800637a:	4632      	mov	r2, r6
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	f04f 0400 	mov.w	r4, #0
 8006384:	0154      	lsls	r4, r2, #5
 8006386:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800638a:	014b      	lsls	r3, r1, #5
 800638c:	4619      	mov	r1, r3
 800638e:	4622      	mov	r2, r4
 8006390:	1b49      	subs	r1, r1, r5
 8006392:	eb62 0206 	sbc.w	r2, r2, r6
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	f04f 0400 	mov.w	r4, #0
 800639e:	0194      	lsls	r4, r2, #6
 80063a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063a4:	018b      	lsls	r3, r1, #6
 80063a6:	1a5b      	subs	r3, r3, r1
 80063a8:	eb64 0402 	sbc.w	r4, r4, r2
 80063ac:	f04f 0100 	mov.w	r1, #0
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	00e2      	lsls	r2, r4, #3
 80063b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063ba:	00d9      	lsls	r1, r3, #3
 80063bc:	460b      	mov	r3, r1
 80063be:	4614      	mov	r4, r2
 80063c0:	195b      	adds	r3, r3, r5
 80063c2:	eb44 0406 	adc.w	r4, r4, r6
 80063c6:	f04f 0100 	mov.w	r1, #0
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	0262      	lsls	r2, r4, #9
 80063d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80063d4:	0259      	lsls	r1, r3, #9
 80063d6:	460b      	mov	r3, r1
 80063d8:	4614      	mov	r4, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	4621      	mov	r1, r4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f04f 0400 	mov.w	r4, #0
 80063e4:	461a      	mov	r2, r3
 80063e6:	4623      	mov	r3, r4
 80063e8:	f7fa fb6c 	bl	8000ac4 <__aeabi_uldivmod>
 80063ec:	4603      	mov	r3, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e049      	b.n	8006488 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063f4:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	099b      	lsrs	r3, r3, #6
 80063fa:	f04f 0400 	mov.w	r4, #0
 80063fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	ea03 0501 	and.w	r5, r3, r1
 800640a:	ea04 0602 	and.w	r6, r4, r2
 800640e:	4629      	mov	r1, r5
 8006410:	4632      	mov	r2, r6
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	f04f 0400 	mov.w	r4, #0
 800641a:	0154      	lsls	r4, r2, #5
 800641c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006420:	014b      	lsls	r3, r1, #5
 8006422:	4619      	mov	r1, r3
 8006424:	4622      	mov	r2, r4
 8006426:	1b49      	subs	r1, r1, r5
 8006428:	eb62 0206 	sbc.w	r2, r2, r6
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	0194      	lsls	r4, r2, #6
 8006436:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800643a:	018b      	lsls	r3, r1, #6
 800643c:	1a5b      	subs	r3, r3, r1
 800643e:	eb64 0402 	sbc.w	r4, r4, r2
 8006442:	f04f 0100 	mov.w	r1, #0
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	00e2      	lsls	r2, r4, #3
 800644c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006450:	00d9      	lsls	r1, r3, #3
 8006452:	460b      	mov	r3, r1
 8006454:	4614      	mov	r4, r2
 8006456:	195b      	adds	r3, r3, r5
 8006458:	eb44 0406 	adc.w	r4, r4, r6
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	02a2      	lsls	r2, r4, #10
 8006466:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800646a:	0299      	lsls	r1, r3, #10
 800646c:	460b      	mov	r3, r1
 800646e:	4614      	mov	r4, r2
 8006470:	4618      	mov	r0, r3
 8006472:	4621      	mov	r1, r4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f04f 0400 	mov.w	r4, #0
 800647a:	461a      	mov	r2, r3
 800647c:	4623      	mov	r3, r4
 800647e:	f7fa fb21 	bl	8000ac4 <__aeabi_uldivmod>
 8006482:	4603      	mov	r3, r0
 8006484:	460c      	mov	r4, r1
 8006486:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	3301      	adds	r3, #1
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	60bb      	str	r3, [r7, #8]
      break;
 80064a2:	e002      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80064a6:	60bb      	str	r3, [r7, #8]
      break;
 80064a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064aa:	68bb      	ldr	r3, [r7, #8]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b4:	40023800 	.word	0x40023800
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	2000014c 	.word	0x2000014c

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4601      	mov	r1, r0
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a9b      	lsrs	r3, r3, #10
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4a03      	ldr	r2, [pc, #12]	; (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ee:	5cd3      	ldrb	r3, [r2, r3]
 80064f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40023800 	.word	0x40023800
 80064fc:	08007fc0 	.word	0x08007fc0

08006500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006504:	f7ff ffdc 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8006508:	4601      	mov	r1, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0b5b      	lsrs	r3, r3, #13
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4a03      	ldr	r2, [pc, #12]	; (8006524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006516:	5cd3      	ldrb	r3, [r2, r3]
 8006518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	08007fc0 	.word	0x08007fc0

08006528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e056      	b.n	80065e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fb fa53 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006570:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	ea42 0103 	orr.w	r1, r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	0c1b      	lsrs	r3, r3, #16
 80065b8:	f003 0104 	and.w	r1, r3, #4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e01a      	b.n	8006638 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006618:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fa58 	bl	8001ad0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	4613      	mov	r3, r2
 800664e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800665a:	2b01      	cmp	r3, #1
 800665c:	d101      	bne.n	8006662 <HAL_SPI_Transmit+0x22>
 800665e:	2302      	movs	r3, #2
 8006660:	e11e      	b.n	80068a0 <HAL_SPI_Transmit+0x260>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800666a:	f7fe fedb 	bl	8005424 <HAL_GetTick>
 800666e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d002      	beq.n	8006686 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006680:	2302      	movs	r3, #2
 8006682:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006684:	e103      	b.n	800688e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_SPI_Transmit+0x52>
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d102      	bne.n	8006698 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006696:	e0fa      	b.n	800688e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2203      	movs	r2, #3
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066de:	d107      	bne.n	80066f0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d007      	beq.n	800670e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006716:	d14b      	bne.n	80067b0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_SPI_Transmit+0xe6>
 8006720:	8afb      	ldrh	r3, [r7, #22]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d13e      	bne.n	80067a4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	881a      	ldrh	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	1c9a      	adds	r2, r3, #2
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800674a:	e02b      	b.n	80067a4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b02      	cmp	r3, #2
 8006758:	d112      	bne.n	8006780 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	86da      	strh	r2, [r3, #54]	; 0x36
 800677e:	e011      	b.n	80067a4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006780:	f7fe fe50 	bl	8005424 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d803      	bhi.n	8006798 <HAL_SPI_Transmit+0x158>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d102      	bne.n	800679e <HAL_SPI_Transmit+0x15e>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067a2:	e074      	b.n	800688e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1ce      	bne.n	800674c <HAL_SPI_Transmit+0x10c>
 80067ae:	e04c      	b.n	800684a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_SPI_Transmit+0x17e>
 80067b8:	8afb      	ldrh	r3, [r7, #22]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d140      	bne.n	8006840 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	7812      	ldrb	r2, [r2, #0]
 80067ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067e4:	e02c      	b.n	8006840 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d113      	bne.n	800681c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	7812      	ldrb	r2, [r2, #0]
 8006800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	86da      	strh	r2, [r3, #54]	; 0x36
 800681a:	e011      	b.n	8006840 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800681c:	f7fe fe02 	bl	8005424 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d803      	bhi.n	8006834 <HAL_SPI_Transmit+0x1f4>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d102      	bne.n	800683a <HAL_SPI_Transmit+0x1fa>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800683e:	e026      	b.n	800688e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1cd      	bne.n	80067e6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fa44 	bl	8006cdc <SPI_EndRxTxTransaction>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006868:	2300      	movs	r3, #0
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e000      	b.n	800688e <HAL_SPI_Transmit+0x24e>
  }

error:
 800688c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800689e:	7ffb      	ldrb	r3, [r7, #31]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	; 0x30
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068b6:	2301      	movs	r3, #1
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x26>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e18a      	b.n	8006be4 <HAL_SPI_TransmitReceive+0x33c>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d6:	f7fe fda5 	bl	8005424 <HAL_GetTick>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d00f      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x70>
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068fe:	d107      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d103      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x68>
 8006908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800690c:	2b04      	cmp	r3, #4
 800690e:	d003      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006910:	2302      	movs	r3, #2
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006916:	e15b      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_SPI_TransmitReceive+0x82>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_SPI_TransmitReceive+0x82>
 8006924:	887b      	ldrh	r3, [r7, #2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006930:	e14e      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b04      	cmp	r3, #4
 800693c:	d003      	beq.n	8006946 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2205      	movs	r2, #5
 8006942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	887a      	ldrh	r2, [r7, #2]
 8006956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	887a      	ldrh	r2, [r7, #2]
 800695c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	887a      	ldrh	r2, [r7, #2]
 8006968:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	887a      	ldrh	r2, [r7, #2]
 800696e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d007      	beq.n	800699a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a2:	d178      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x10a>
 80069ac:	8b7b      	ldrh	r3, [r7, #26]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d166      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069d6:	e053      	b.n	8006a80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d11b      	bne.n	8006a1e <HAL_SPI_TransmitReceive+0x176>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d016      	beq.n	8006a1e <HAL_SPI_TransmitReceive+0x176>
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d113      	bne.n	8006a1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	881a      	ldrh	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	1c9a      	adds	r2, r3, #2
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d119      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x1b8>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d014      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	b292      	uxth	r2, r2
 8006a42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a60:	f7fe fce0 	bl	8005424 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d807      	bhi.n	8006a80 <HAL_SPI_TransmitReceive+0x1d8>
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d003      	beq.n	8006a80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a7e:	e0a7      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1a6      	bne.n	80069d8 <HAL_SPI_TransmitReceive+0x130>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1a1      	bne.n	80069d8 <HAL_SPI_TransmitReceive+0x130>
 8006a94:	e07c      	b.n	8006b90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_TransmitReceive+0x1fc>
 8006a9e:	8b7b      	ldrh	r3, [r7, #26]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d16b      	bne.n	8006b7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	7812      	ldrb	r2, [r2, #0]
 8006ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aca:	e057      	b.n	8006b7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d11c      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x26c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d017      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x26c>
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d114      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d119      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x2ae>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d014      	beq.n	8006b56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b52:	2301      	movs	r3, #1
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b56:	f7fe fc65 	bl	8005424 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d803      	bhi.n	8006b6e <HAL_SPI_TransmitReceive+0x2c6>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d102      	bne.n	8006b74 <HAL_SPI_TransmitReceive+0x2cc>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d103      	bne.n	8006b7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b7a:	e029      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1a2      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x224>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d19d      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f8a1 	bl	8006cdc <SPI_EndRxTxTransaction>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d006      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006bac:	e010      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	e000      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3730      	adds	r7, #48	; 0x30
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bfa:	b2db      	uxtb	r3, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c18:	e04c      	b.n	8006cb4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c20:	d048      	beq.n	8006cb4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006c22:	f7fe fbff 	bl	8005424 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d902      	bls.n	8006c38 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d13d      	bne.n	8006cb4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c50:	d111      	bne.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5a:	d004      	beq.n	8006c66 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c64:	d107      	bne.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7e:	d10f      	bne.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e00f      	b.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	bf0c      	ite	eq
 8006cc4:	2301      	moveq	r3, #1
 8006cc6:	2300      	movne	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d1a3      	bne.n	8006c1a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <SPI_EndRxTxTransaction+0x7c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1b      	ldr	r2, [pc, #108]	; (8006d5c <SPI_EndRxTxTransaction+0x80>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	0d5b      	lsrs	r3, r3, #21
 8006cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d06:	d112      	bne.n	8006d2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2180      	movs	r1, #128	; 0x80
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff ff78 	bl	8006c08 <SPI_WaitFlagStateUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d016      	beq.n	8006d4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d22:	f043 0220 	orr.w	r2, r3, #32
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e00f      	b.n	8006d4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d44:	2b80      	cmp	r3, #128	; 0x80
 8006d46:	d0f2      	beq.n	8006d2e <SPI_EndRxTxTransaction+0x52>
 8006d48:	e000      	b.n	8006d4c <SPI_EndRxTxTransaction+0x70>
        break;
 8006d4a:	bf00      	nop
  }

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	2000014c 	.word	0x2000014c
 8006d5c:	165e9f81 	.word	0x165e9f81

08006d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e01d      	b.n	8006dae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fa fec6 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f000 fa74 	bl	800728c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	d841      	bhi.n	8006e4c <HAL_TIM_OC_Start_IT+0x94>
 8006dc8:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <HAL_TIM_OC_Start_IT+0x18>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006e05 	.word	0x08006e05
 8006dd4:	08006e4d 	.word	0x08006e4d
 8006dd8:	08006e4d 	.word	0x08006e4d
 8006ddc:	08006e4d 	.word	0x08006e4d
 8006de0:	08006e17 	.word	0x08006e17
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006e4d 	.word	0x08006e4d
 8006dec:	08006e4d 	.word	0x08006e4d
 8006df0:	08006e29 	.word	0x08006e29
 8006df4:	08006e4d 	.word	0x08006e4d
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006e4d 	.word	0x08006e4d
 8006e00:	08006e3b 	.word	0x08006e3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0202 	orr.w	r2, r2, #2
 8006e12:	60da      	str	r2, [r3, #12]
      break;
 8006e14:	e01b      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0204 	orr.w	r2, r2, #4
 8006e24:	60da      	str	r2, [r3, #12]
      break;
 8006e26:	e012      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0208 	orr.w	r2, r2, #8
 8006e36:	60da      	str	r2, [r3, #12]
      break;
 8006e38:	e009      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0210 	orr.w	r2, r2, #16
 8006e48:	60da      	str	r2, [r3, #12]
      break;
 8006e4a:	e000      	b.n	8006e4e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8006e4c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2201      	movs	r2, #1
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fb32 	bl	80074c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a10      	ldr	r2, [pc, #64]	; (8006ea4 <HAL_TIM_OC_Start_IT+0xec>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d107      	bne.n	8006e76 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b06      	cmp	r3, #6
 8006e86:	d007      	beq.n	8006e98 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40010000 	.word	0x40010000

08006ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0202 	mvn.w	r2, #2
 8006ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9af 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f9a1 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f9b2 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d122      	bne.n	8006f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d11b      	bne.n	8006f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0204 	mvn.w	r2, #4
 8006f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f985 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 8006f44:	e005      	b.n	8006f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f977 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f988 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d122      	bne.n	8006fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0208 	mvn.w	r2, #8
 8006f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2204      	movs	r2, #4
 8006f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f95b 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f94d 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f95e 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d122      	bne.n	8007000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d11b      	bne.n	8007000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0210 	mvn.w	r2, #16
 8006fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f931 	bl	800724e <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f923 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f934 	bl	8007262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b01      	cmp	r3, #1
 800700c:	d10e      	bne.n	800702c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b01      	cmp	r3, #1
 800701a:	d107      	bne.n	800702c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0201 	mvn.w	r2, #1
 8007024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8fd 	bl	8007226 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007036:	2b80      	cmp	r3, #128	; 0x80
 8007038:	d10e      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d107      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fad2 	bl	80075fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007062:	2b40      	cmp	r3, #64	; 0x40
 8007064:	d10e      	bne.n	8007084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d107      	bne.n	8007084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f8f9 	bl	8007276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b20      	cmp	r3, #32
 8007090:	d10e      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b20      	cmp	r3, #32
 800709e:	d107      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0220 	mvn.w	r2, #32
 80070a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa9c 	bl	80075e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_TIM_ConfigClockSource+0x18>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e0a6      	b.n	800721e <HAL_TIM_ConfigClockSource+0x166>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d067      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0x120>
 8007108:	2b40      	cmp	r3, #64	; 0x40
 800710a:	d80b      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x6c>
 800710c:	2b10      	cmp	r3, #16
 800710e:	d073      	beq.n	80071f8 <HAL_TIM_ConfigClockSource+0x140>
 8007110:	2b10      	cmp	r3, #16
 8007112:	d802      	bhi.n	800711a <HAL_TIM_ConfigClockSource+0x62>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d06f      	beq.n	80071f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007118:	e078      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800711a:	2b20      	cmp	r3, #32
 800711c:	d06c      	beq.n	80071f8 <HAL_TIM_ConfigClockSource+0x140>
 800711e:	2b30      	cmp	r3, #48	; 0x30
 8007120:	d06a      	beq.n	80071f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007122:	e073      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007124:	2b70      	cmp	r3, #112	; 0x70
 8007126:	d00d      	beq.n	8007144 <HAL_TIM_ConfigClockSource+0x8c>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d804      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x7e>
 800712c:	2b50      	cmp	r3, #80	; 0x50
 800712e:	d033      	beq.n	8007198 <HAL_TIM_ConfigClockSource+0xe0>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d041      	beq.n	80071b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007134:	e06a      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713a:	d066      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x152>
 800713c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007140:	d017      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007142:	e063      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	6899      	ldr	r1, [r3, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f000 f994 	bl	8007480 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007166:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	609a      	str	r2, [r3, #8]
      break;
 8007170:	e04c      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6899      	ldr	r1, [r3, #8]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f000 f97d 	bl	8007480 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007194:	609a      	str	r2, [r3, #8]
      break;
 8007196:	e039      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6859      	ldr	r1, [r3, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	461a      	mov	r2, r3
 80071a6:	f000 f8f1 	bl	800738c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2150      	movs	r1, #80	; 0x50
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f94a 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 80071b6:	e029      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	6859      	ldr	r1, [r3, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	461a      	mov	r2, r3
 80071c6:	f000 f910 	bl	80073ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2160      	movs	r1, #96	; 0x60
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f93a 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 80071d6:	e019      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	6859      	ldr	r1, [r3, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	461a      	mov	r2, r3
 80071e6:	f000 f8d1 	bl	800738c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2140      	movs	r1, #64	; 0x40
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f92a 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 80071f6:	e009      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f000 f921 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8007208:	e000      	b.n	800720c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800720a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a34      	ldr	r2, [pc, #208]	; (8007370 <TIM_Base_SetConfig+0xe4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00f      	beq.n	80072c4 <TIM_Base_SetConfig+0x38>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072aa:	d00b      	beq.n	80072c4 <TIM_Base_SetConfig+0x38>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a31      	ldr	r2, [pc, #196]	; (8007374 <TIM_Base_SetConfig+0xe8>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d007      	beq.n	80072c4 <TIM_Base_SetConfig+0x38>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a30      	ldr	r2, [pc, #192]	; (8007378 <TIM_Base_SetConfig+0xec>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_Base_SetConfig+0x38>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a2f      	ldr	r2, [pc, #188]	; (800737c <TIM_Base_SetConfig+0xf0>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d108      	bne.n	80072d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a25      	ldr	r2, [pc, #148]	; (8007370 <TIM_Base_SetConfig+0xe4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01b      	beq.n	8007316 <TIM_Base_SetConfig+0x8a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e4:	d017      	beq.n	8007316 <TIM_Base_SetConfig+0x8a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a22      	ldr	r2, [pc, #136]	; (8007374 <TIM_Base_SetConfig+0xe8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d013      	beq.n	8007316 <TIM_Base_SetConfig+0x8a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a21      	ldr	r2, [pc, #132]	; (8007378 <TIM_Base_SetConfig+0xec>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00f      	beq.n	8007316 <TIM_Base_SetConfig+0x8a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a20      	ldr	r2, [pc, #128]	; (800737c <TIM_Base_SetConfig+0xf0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00b      	beq.n	8007316 <TIM_Base_SetConfig+0x8a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a1f      	ldr	r2, [pc, #124]	; (8007380 <TIM_Base_SetConfig+0xf4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d007      	beq.n	8007316 <TIM_Base_SetConfig+0x8a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a1e      	ldr	r2, [pc, #120]	; (8007384 <TIM_Base_SetConfig+0xf8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d003      	beq.n	8007316 <TIM_Base_SetConfig+0x8a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <TIM_Base_SetConfig+0xfc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d108      	bne.n	8007328 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a08      	ldr	r2, [pc, #32]	; (8007370 <TIM_Base_SetConfig+0xe4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d103      	bne.n	800735c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	615a      	str	r2, [r3, #20]
}
 8007362:	bf00      	nop
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40010000 	.word	0x40010000
 8007374:	40000400 	.word	0x40000400
 8007378:	40000800 	.word	0x40000800
 800737c:	40000c00 	.word	0x40000c00
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800

0800738c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f023 030a 	bic.w	r3, r3, #10
 80073c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	621a      	str	r2, [r3, #32]
}
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0210 	bic.w	r2, r3, #16
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	031b      	lsls	r3, r3, #12
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	f043 0307 	orr.w	r3, r3, #7
 800746c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	609a      	str	r2, [r3, #8]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800749a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	021a      	lsls	r2, r3, #8
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	609a      	str	r2, [r3, #8]
}
 80074b4:	bf00      	nop
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	2201      	movs	r2, #1
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	43db      	mvns	r3, r3
 80074e2:	401a      	ands	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	fa01 f303 	lsl.w	r3, r1, r3
 80074f8:	431a      	orrs	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	621a      	str	r2, [r3, #32]
}
 80074fe:	bf00      	nop
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007520:	2302      	movs	r3, #2
 8007522:	e050      	b.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1c      	ldr	r2, [pc, #112]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007570:	d013      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10c      	bne.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40014000 	.word	0x40014000

080075e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e03f      	b.n	80076a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fa fa94 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2224      	movs	r2, #36	; 0x24
 8007640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f829 	bl	80076ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80076ee:	f023 030c 	bic.w	r3, r3, #12
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	430b      	orrs	r3, r1
 80076fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771a:	f040 818b 	bne.w	8007a34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4ac1      	ldr	r2, [pc, #772]	; (8007a28 <UART_SetConfig+0x37c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d005      	beq.n	8007734 <UART_SetConfig+0x88>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4abf      	ldr	r2, [pc, #764]	; (8007a2c <UART_SetConfig+0x380>)
 800772e:	4293      	cmp	r3, r2
 8007730:	f040 80bd 	bne.w	80078ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007734:	f7fe fee4 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 8007738:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	461d      	mov	r5, r3
 800773e:	f04f 0600 	mov.w	r6, #0
 8007742:	46a8      	mov	r8, r5
 8007744:	46b1      	mov	r9, r6
 8007746:	eb18 0308 	adds.w	r3, r8, r8
 800774a:	eb49 0409 	adc.w	r4, r9, r9
 800774e:	4698      	mov	r8, r3
 8007750:	46a1      	mov	r9, r4
 8007752:	eb18 0805 	adds.w	r8, r8, r5
 8007756:	eb49 0906 	adc.w	r9, r9, r6
 800775a:	f04f 0100 	mov.w	r1, #0
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007766:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800776a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800776e:	4688      	mov	r8, r1
 8007770:	4691      	mov	r9, r2
 8007772:	eb18 0005 	adds.w	r0, r8, r5
 8007776:	eb49 0106 	adc.w	r1, r9, r6
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	461d      	mov	r5, r3
 8007780:	f04f 0600 	mov.w	r6, #0
 8007784:	196b      	adds	r3, r5, r5
 8007786:	eb46 0406 	adc.w	r4, r6, r6
 800778a:	461a      	mov	r2, r3
 800778c:	4623      	mov	r3, r4
 800778e:	f7f9 f999 	bl	8000ac4 <__aeabi_uldivmod>
 8007792:	4603      	mov	r3, r0
 8007794:	460c      	mov	r4, r1
 8007796:	461a      	mov	r2, r3
 8007798:	4ba5      	ldr	r3, [pc, #660]	; (8007a30 <UART_SetConfig+0x384>)
 800779a:	fba3 2302 	umull	r2, r3, r3, r2
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	461d      	mov	r5, r3
 80077a8:	f04f 0600 	mov.w	r6, #0
 80077ac:	46a9      	mov	r9, r5
 80077ae:	46b2      	mov	sl, r6
 80077b0:	eb19 0309 	adds.w	r3, r9, r9
 80077b4:	eb4a 040a 	adc.w	r4, sl, sl
 80077b8:	4699      	mov	r9, r3
 80077ba:	46a2      	mov	sl, r4
 80077bc:	eb19 0905 	adds.w	r9, r9, r5
 80077c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80077c4:	f04f 0100 	mov.w	r1, #0
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077d8:	4689      	mov	r9, r1
 80077da:	4692      	mov	sl, r2
 80077dc:	eb19 0005 	adds.w	r0, r9, r5
 80077e0:	eb4a 0106 	adc.w	r1, sl, r6
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	461d      	mov	r5, r3
 80077ea:	f04f 0600 	mov.w	r6, #0
 80077ee:	196b      	adds	r3, r5, r5
 80077f0:	eb46 0406 	adc.w	r4, r6, r6
 80077f4:	461a      	mov	r2, r3
 80077f6:	4623      	mov	r3, r4
 80077f8:	f7f9 f964 	bl	8000ac4 <__aeabi_uldivmod>
 80077fc:	4603      	mov	r3, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	461a      	mov	r2, r3
 8007802:	4b8b      	ldr	r3, [pc, #556]	; (8007a30 <UART_SetConfig+0x384>)
 8007804:	fba3 1302 	umull	r1, r3, r3, r2
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	2164      	movs	r1, #100	; 0x64
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	3332      	adds	r3, #50	; 0x32
 8007816:	4a86      	ldr	r2, [pc, #536]	; (8007a30 <UART_SetConfig+0x384>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007824:	4498      	add	r8, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	461d      	mov	r5, r3
 800782a:	f04f 0600 	mov.w	r6, #0
 800782e:	46a9      	mov	r9, r5
 8007830:	46b2      	mov	sl, r6
 8007832:	eb19 0309 	adds.w	r3, r9, r9
 8007836:	eb4a 040a 	adc.w	r4, sl, sl
 800783a:	4699      	mov	r9, r3
 800783c:	46a2      	mov	sl, r4
 800783e:	eb19 0905 	adds.w	r9, r9, r5
 8007842:	eb4a 0a06 	adc.w	sl, sl, r6
 8007846:	f04f 0100 	mov.w	r1, #0
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007852:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007856:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800785a:	4689      	mov	r9, r1
 800785c:	4692      	mov	sl, r2
 800785e:	eb19 0005 	adds.w	r0, r9, r5
 8007862:	eb4a 0106 	adc.w	r1, sl, r6
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	461d      	mov	r5, r3
 800786c:	f04f 0600 	mov.w	r6, #0
 8007870:	196b      	adds	r3, r5, r5
 8007872:	eb46 0406 	adc.w	r4, r6, r6
 8007876:	461a      	mov	r2, r3
 8007878:	4623      	mov	r3, r4
 800787a:	f7f9 f923 	bl	8000ac4 <__aeabi_uldivmod>
 800787e:	4603      	mov	r3, r0
 8007880:	460c      	mov	r4, r1
 8007882:	461a      	mov	r2, r3
 8007884:	4b6a      	ldr	r3, [pc, #424]	; (8007a30 <UART_SetConfig+0x384>)
 8007886:	fba3 1302 	umull	r1, r3, r3, r2
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	2164      	movs	r1, #100	; 0x64
 800788e:	fb01 f303 	mul.w	r3, r1, r3
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	3332      	adds	r3, #50	; 0x32
 8007898:	4a65      	ldr	r2, [pc, #404]	; (8007a30 <UART_SetConfig+0x384>)
 800789a:	fba2 2303 	umull	r2, r3, r2, r3
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	f003 0207 	and.w	r2, r3, #7
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4442      	add	r2, r8
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	e26f      	b.n	8007d8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ae:	f7fe fe13 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80078b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	461d      	mov	r5, r3
 80078b8:	f04f 0600 	mov.w	r6, #0
 80078bc:	46a8      	mov	r8, r5
 80078be:	46b1      	mov	r9, r6
 80078c0:	eb18 0308 	adds.w	r3, r8, r8
 80078c4:	eb49 0409 	adc.w	r4, r9, r9
 80078c8:	4698      	mov	r8, r3
 80078ca:	46a1      	mov	r9, r4
 80078cc:	eb18 0805 	adds.w	r8, r8, r5
 80078d0:	eb49 0906 	adc.w	r9, r9, r6
 80078d4:	f04f 0100 	mov.w	r1, #0
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078e8:	4688      	mov	r8, r1
 80078ea:	4691      	mov	r9, r2
 80078ec:	eb18 0005 	adds.w	r0, r8, r5
 80078f0:	eb49 0106 	adc.w	r1, r9, r6
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	461d      	mov	r5, r3
 80078fa:	f04f 0600 	mov.w	r6, #0
 80078fe:	196b      	adds	r3, r5, r5
 8007900:	eb46 0406 	adc.w	r4, r6, r6
 8007904:	461a      	mov	r2, r3
 8007906:	4623      	mov	r3, r4
 8007908:	f7f9 f8dc 	bl	8000ac4 <__aeabi_uldivmod>
 800790c:	4603      	mov	r3, r0
 800790e:	460c      	mov	r4, r1
 8007910:	461a      	mov	r2, r3
 8007912:	4b47      	ldr	r3, [pc, #284]	; (8007a30 <UART_SetConfig+0x384>)
 8007914:	fba3 2302 	umull	r2, r3, r3, r2
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	461d      	mov	r5, r3
 8007922:	f04f 0600 	mov.w	r6, #0
 8007926:	46a9      	mov	r9, r5
 8007928:	46b2      	mov	sl, r6
 800792a:	eb19 0309 	adds.w	r3, r9, r9
 800792e:	eb4a 040a 	adc.w	r4, sl, sl
 8007932:	4699      	mov	r9, r3
 8007934:	46a2      	mov	sl, r4
 8007936:	eb19 0905 	adds.w	r9, r9, r5
 800793a:	eb4a 0a06 	adc.w	sl, sl, r6
 800793e:	f04f 0100 	mov.w	r1, #0
 8007942:	f04f 0200 	mov.w	r2, #0
 8007946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800794a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800794e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007952:	4689      	mov	r9, r1
 8007954:	4692      	mov	sl, r2
 8007956:	eb19 0005 	adds.w	r0, r9, r5
 800795a:	eb4a 0106 	adc.w	r1, sl, r6
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	461d      	mov	r5, r3
 8007964:	f04f 0600 	mov.w	r6, #0
 8007968:	196b      	adds	r3, r5, r5
 800796a:	eb46 0406 	adc.w	r4, r6, r6
 800796e:	461a      	mov	r2, r3
 8007970:	4623      	mov	r3, r4
 8007972:	f7f9 f8a7 	bl	8000ac4 <__aeabi_uldivmod>
 8007976:	4603      	mov	r3, r0
 8007978:	460c      	mov	r4, r1
 800797a:	461a      	mov	r2, r3
 800797c:	4b2c      	ldr	r3, [pc, #176]	; (8007a30 <UART_SetConfig+0x384>)
 800797e:	fba3 1302 	umull	r1, r3, r3, r2
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	2164      	movs	r1, #100	; 0x64
 8007986:	fb01 f303 	mul.w	r3, r1, r3
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	3332      	adds	r3, #50	; 0x32
 8007990:	4a27      	ldr	r2, [pc, #156]	; (8007a30 <UART_SetConfig+0x384>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	095b      	lsrs	r3, r3, #5
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800799e:	4498      	add	r8, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	461d      	mov	r5, r3
 80079a4:	f04f 0600 	mov.w	r6, #0
 80079a8:	46a9      	mov	r9, r5
 80079aa:	46b2      	mov	sl, r6
 80079ac:	eb19 0309 	adds.w	r3, r9, r9
 80079b0:	eb4a 040a 	adc.w	r4, sl, sl
 80079b4:	4699      	mov	r9, r3
 80079b6:	46a2      	mov	sl, r4
 80079b8:	eb19 0905 	adds.w	r9, r9, r5
 80079bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80079c0:	f04f 0100 	mov.w	r1, #0
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079d4:	4689      	mov	r9, r1
 80079d6:	4692      	mov	sl, r2
 80079d8:	eb19 0005 	adds.w	r0, r9, r5
 80079dc:	eb4a 0106 	adc.w	r1, sl, r6
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	461d      	mov	r5, r3
 80079e6:	f04f 0600 	mov.w	r6, #0
 80079ea:	196b      	adds	r3, r5, r5
 80079ec:	eb46 0406 	adc.w	r4, r6, r6
 80079f0:	461a      	mov	r2, r3
 80079f2:	4623      	mov	r3, r4
 80079f4:	f7f9 f866 	bl	8000ac4 <__aeabi_uldivmod>
 80079f8:	4603      	mov	r3, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	461a      	mov	r2, r3
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <UART_SetConfig+0x384>)
 8007a00:	fba3 1302 	umull	r1, r3, r3, r2
 8007a04:	095b      	lsrs	r3, r3, #5
 8007a06:	2164      	movs	r1, #100	; 0x64
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	3332      	adds	r3, #50	; 0x32
 8007a12:	4a07      	ldr	r2, [pc, #28]	; (8007a30 <UART_SetConfig+0x384>)
 8007a14:	fba2 2303 	umull	r2, r3, r2, r3
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	f003 0207 	and.w	r2, r3, #7
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4442      	add	r2, r8
 8007a24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007a26:	e1b2      	b.n	8007d8e <UART_SetConfig+0x6e2>
 8007a28:	40011000 	.word	0x40011000
 8007a2c:	40011400 	.word	0x40011400
 8007a30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4ad7      	ldr	r2, [pc, #860]	; (8007d98 <UART_SetConfig+0x6ec>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d005      	beq.n	8007a4a <UART_SetConfig+0x39e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4ad6      	ldr	r2, [pc, #856]	; (8007d9c <UART_SetConfig+0x6f0>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	f040 80d1 	bne.w	8007bec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a4a:	f7fe fd59 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 8007a4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	469a      	mov	sl, r3
 8007a54:	f04f 0b00 	mov.w	fp, #0
 8007a58:	46d0      	mov	r8, sl
 8007a5a:	46d9      	mov	r9, fp
 8007a5c:	eb18 0308 	adds.w	r3, r8, r8
 8007a60:	eb49 0409 	adc.w	r4, r9, r9
 8007a64:	4698      	mov	r8, r3
 8007a66:	46a1      	mov	r9, r4
 8007a68:	eb18 080a 	adds.w	r8, r8, sl
 8007a6c:	eb49 090b 	adc.w	r9, r9, fp
 8007a70:	f04f 0100 	mov.w	r1, #0
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a84:	4688      	mov	r8, r1
 8007a86:	4691      	mov	r9, r2
 8007a88:	eb1a 0508 	adds.w	r5, sl, r8
 8007a8c:	eb4b 0609 	adc.w	r6, fp, r9
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4619      	mov	r1, r3
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	f04f 0400 	mov.w	r4, #0
 8007aa2:	0094      	lsls	r4, r2, #2
 8007aa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007aa8:	008b      	lsls	r3, r1, #2
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4623      	mov	r3, r4
 8007aae:	4628      	mov	r0, r5
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	f7f9 f807 	bl	8000ac4 <__aeabi_uldivmod>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	461a      	mov	r2, r3
 8007abc:	4bb8      	ldr	r3, [pc, #736]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007abe:	fba3 2302 	umull	r2, r3, r3, r2
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	469b      	mov	fp, r3
 8007acc:	f04f 0c00 	mov.w	ip, #0
 8007ad0:	46d9      	mov	r9, fp
 8007ad2:	46e2      	mov	sl, ip
 8007ad4:	eb19 0309 	adds.w	r3, r9, r9
 8007ad8:	eb4a 040a 	adc.w	r4, sl, sl
 8007adc:	4699      	mov	r9, r3
 8007ade:	46a2      	mov	sl, r4
 8007ae0:	eb19 090b 	adds.w	r9, r9, fp
 8007ae4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007af4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007af8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007afc:	4689      	mov	r9, r1
 8007afe:	4692      	mov	sl, r2
 8007b00:	eb1b 0509 	adds.w	r5, fp, r9
 8007b04:	eb4c 060a 	adc.w	r6, ip, sl
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	f04f 0400 	mov.w	r4, #0
 8007b1a:	0094      	lsls	r4, r2, #2
 8007b1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b20:	008b      	lsls	r3, r1, #2
 8007b22:	461a      	mov	r2, r3
 8007b24:	4623      	mov	r3, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	4631      	mov	r1, r6
 8007b2a:	f7f8 ffcb 	bl	8000ac4 <__aeabi_uldivmod>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	461a      	mov	r2, r3
 8007b34:	4b9a      	ldr	r3, [pc, #616]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007b36:	fba3 1302 	umull	r1, r3, r3, r2
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	2164      	movs	r1, #100	; 0x64
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	3332      	adds	r3, #50	; 0x32
 8007b48:	4a95      	ldr	r2, [pc, #596]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b54:	4498      	add	r8, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	469b      	mov	fp, r3
 8007b5a:	f04f 0c00 	mov.w	ip, #0
 8007b5e:	46d9      	mov	r9, fp
 8007b60:	46e2      	mov	sl, ip
 8007b62:	eb19 0309 	adds.w	r3, r9, r9
 8007b66:	eb4a 040a 	adc.w	r4, sl, sl
 8007b6a:	4699      	mov	r9, r3
 8007b6c:	46a2      	mov	sl, r4
 8007b6e:	eb19 090b 	adds.w	r9, r9, fp
 8007b72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b76:	f04f 0100 	mov.w	r1, #0
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b8a:	4689      	mov	r9, r1
 8007b8c:	4692      	mov	sl, r2
 8007b8e:	eb1b 0509 	adds.w	r5, fp, r9
 8007b92:	eb4c 060a 	adc.w	r6, ip, sl
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	f04f 0300 	mov.w	r3, #0
 8007ba4:	f04f 0400 	mov.w	r4, #0
 8007ba8:	0094      	lsls	r4, r2, #2
 8007baa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bae:	008b      	lsls	r3, r1, #2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	f7f8 ff84 	bl	8000ac4 <__aeabi_uldivmod>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4b77      	ldr	r3, [pc, #476]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	2164      	movs	r1, #100	; 0x64
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	3332      	adds	r3, #50	; 0x32
 8007bd6:	4a72      	ldr	r2, [pc, #456]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	f003 020f 	and.w	r2, r3, #15
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4442      	add	r2, r8
 8007be8:	609a      	str	r2, [r3, #8]
 8007bea:	e0d0      	b.n	8007d8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bec:	f7fe fc74 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8007bf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	469a      	mov	sl, r3
 8007bf6:	f04f 0b00 	mov.w	fp, #0
 8007bfa:	46d0      	mov	r8, sl
 8007bfc:	46d9      	mov	r9, fp
 8007bfe:	eb18 0308 	adds.w	r3, r8, r8
 8007c02:	eb49 0409 	adc.w	r4, r9, r9
 8007c06:	4698      	mov	r8, r3
 8007c08:	46a1      	mov	r9, r4
 8007c0a:	eb18 080a 	adds.w	r8, r8, sl
 8007c0e:	eb49 090b 	adc.w	r9, r9, fp
 8007c12:	f04f 0100 	mov.w	r1, #0
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c26:	4688      	mov	r8, r1
 8007c28:	4691      	mov	r9, r2
 8007c2a:	eb1a 0508 	adds.w	r5, sl, r8
 8007c2e:	eb4b 0609 	adc.w	r6, fp, r9
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	4619      	mov	r1, r3
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	0094      	lsls	r4, r2, #2
 8007c46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c4a:	008b      	lsls	r3, r1, #2
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4623      	mov	r3, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	4631      	mov	r1, r6
 8007c54:	f7f8 ff36 	bl	8000ac4 <__aeabi_uldivmod>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4b50      	ldr	r3, [pc, #320]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007c60:	fba3 2302 	umull	r2, r3, r3, r2
 8007c64:	095b      	lsrs	r3, r3, #5
 8007c66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	469b      	mov	fp, r3
 8007c6e:	f04f 0c00 	mov.w	ip, #0
 8007c72:	46d9      	mov	r9, fp
 8007c74:	46e2      	mov	sl, ip
 8007c76:	eb19 0309 	adds.w	r3, r9, r9
 8007c7a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c7e:	4699      	mov	r9, r3
 8007c80:	46a2      	mov	sl, r4
 8007c82:	eb19 090b 	adds.w	r9, r9, fp
 8007c86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c8a:	f04f 0100 	mov.w	r1, #0
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	4692      	mov	sl, r2
 8007ca2:	eb1b 0509 	adds.w	r5, fp, r9
 8007ca6:	eb4c 060a 	adc.w	r6, ip, sl
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	f04f 0300 	mov.w	r3, #0
 8007cb8:	f04f 0400 	mov.w	r4, #0
 8007cbc:	0094      	lsls	r4, r2, #2
 8007cbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cc2:	008b      	lsls	r3, r1, #2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	4631      	mov	r1, r6
 8007ccc:	f7f8 fefa 	bl	8000ac4 <__aeabi_uldivmod>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b32      	ldr	r3, [pc, #200]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	2164      	movs	r1, #100	; 0x64
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	3332      	adds	r3, #50	; 0x32
 8007cea:	4a2d      	ldr	r2, [pc, #180]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007cec:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cf6:	4498      	add	r8, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	469b      	mov	fp, r3
 8007cfc:	f04f 0c00 	mov.w	ip, #0
 8007d00:	46d9      	mov	r9, fp
 8007d02:	46e2      	mov	sl, ip
 8007d04:	eb19 0309 	adds.w	r3, r9, r9
 8007d08:	eb4a 040a 	adc.w	r4, sl, sl
 8007d0c:	4699      	mov	r9, r3
 8007d0e:	46a2      	mov	sl, r4
 8007d10:	eb19 090b 	adds.w	r9, r9, fp
 8007d14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d18:	f04f 0100 	mov.w	r1, #0
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	4692      	mov	sl, r2
 8007d30:	eb1b 0509 	adds.w	r5, fp, r9
 8007d34:	eb4c 060a 	adc.w	r6, ip, sl
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	f04f 0400 	mov.w	r4, #0
 8007d4a:	0094      	lsls	r4, r2, #2
 8007d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d50:	008b      	lsls	r3, r1, #2
 8007d52:	461a      	mov	r2, r3
 8007d54:	4623      	mov	r3, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	4631      	mov	r1, r6
 8007d5a:	f7f8 feb3 	bl	8000ac4 <__aeabi_uldivmod>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	461a      	mov	r2, r3
 8007d64:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007d66:	fba3 1302 	umull	r1, r3, r3, r2
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	2164      	movs	r1, #100	; 0x64
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	3332      	adds	r3, #50	; 0x32
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <UART_SetConfig+0x6f4>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	f003 020f 	and.w	r2, r3, #15
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4442      	add	r2, r8
 8007d8a:	609a      	str	r2, [r3, #8]
}
 8007d8c:	e7ff      	b.n	8007d8e <UART_SetConfig+0x6e2>
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	40011000 	.word	0x40011000
 8007d9c:	40011400 	.word	0x40011400
 8007da0:	51eb851f 	.word	0x51eb851f

08007da4 <__errno>:
 8007da4:	4b01      	ldr	r3, [pc, #4]	; (8007dac <__errno+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	2000017c 	.word	0x2000017c

08007db0 <__libc_init_array>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4e0d      	ldr	r6, [pc, #52]	; (8007de8 <__libc_init_array+0x38>)
 8007db4:	4c0d      	ldr	r4, [pc, #52]	; (8007dec <__libc_init_array+0x3c>)
 8007db6:	1ba4      	subs	r4, r4, r6
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	2500      	movs	r5, #0
 8007dbc:	42a5      	cmp	r5, r4
 8007dbe:	d109      	bne.n	8007dd4 <__libc_init_array+0x24>
 8007dc0:	4e0b      	ldr	r6, [pc, #44]	; (8007df0 <__libc_init_array+0x40>)
 8007dc2:	4c0c      	ldr	r4, [pc, #48]	; (8007df4 <__libc_init_array+0x44>)
 8007dc4:	f000 f8de 	bl	8007f84 <_init>
 8007dc8:	1ba4      	subs	r4, r4, r6
 8007dca:	10a4      	asrs	r4, r4, #2
 8007dcc:	2500      	movs	r5, #0
 8007dce:	42a5      	cmp	r5, r4
 8007dd0:	d105      	bne.n	8007dde <__libc_init_array+0x2e>
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dd8:	4798      	blx	r3
 8007dda:	3501      	adds	r5, #1
 8007ddc:	e7ee      	b.n	8007dbc <__libc_init_array+0xc>
 8007dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007de2:	4798      	blx	r3
 8007de4:	3501      	adds	r5, #1
 8007de6:	e7f2      	b.n	8007dce <__libc_init_array+0x1e>
 8007de8:	08008174 	.word	0x08008174
 8007dec:	08008174 	.word	0x08008174
 8007df0:	08008174 	.word	0x08008174
 8007df4:	08008178 	.word	0x08008178

08007df8 <malloc>:
 8007df8:	4b02      	ldr	r3, [pc, #8]	; (8007e04 <malloc+0xc>)
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	f000 b80b 	b.w	8007e18 <_malloc_r>
 8007e02:	bf00      	nop
 8007e04:	2000017c 	.word	0x2000017c

08007e08 <memset>:
 8007e08:	4402      	add	r2, r0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d100      	bne.n	8007e12 <memset+0xa>
 8007e10:	4770      	bx	lr
 8007e12:	f803 1b01 	strb.w	r1, [r3], #1
 8007e16:	e7f9      	b.n	8007e0c <memset+0x4>

08007e18 <_malloc_r>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	1ccd      	adds	r5, r1, #3
 8007e1c:	f025 0503 	bic.w	r5, r5, #3
 8007e20:	3508      	adds	r5, #8
 8007e22:	2d0c      	cmp	r5, #12
 8007e24:	bf38      	it	cc
 8007e26:	250c      	movcc	r5, #12
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	db01      	blt.n	8007e32 <_malloc_r+0x1a>
 8007e2e:	42a9      	cmp	r1, r5
 8007e30:	d903      	bls.n	8007e3a <_malloc_r+0x22>
 8007e32:	230c      	movs	r3, #12
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	2000      	movs	r0, #0
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	f000 f857 	bl	8007eec <__malloc_lock>
 8007e3e:	4a21      	ldr	r2, [pc, #132]	; (8007ec4 <_malloc_r+0xac>)
 8007e40:	6814      	ldr	r4, [r2, #0]
 8007e42:	4621      	mov	r1, r4
 8007e44:	b991      	cbnz	r1, 8007e6c <_malloc_r+0x54>
 8007e46:	4c20      	ldr	r4, [pc, #128]	; (8007ec8 <_malloc_r+0xb0>)
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	b91b      	cbnz	r3, 8007e54 <_malloc_r+0x3c>
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f000 f83d 	bl	8007ecc <_sbrk_r>
 8007e52:	6020      	str	r0, [r4, #0]
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f000 f838 	bl	8007ecc <_sbrk_r>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d124      	bne.n	8007eaa <_malloc_r+0x92>
 8007e60:	230c      	movs	r3, #12
 8007e62:	6033      	str	r3, [r6, #0]
 8007e64:	4630      	mov	r0, r6
 8007e66:	f000 f842 	bl	8007eee <__malloc_unlock>
 8007e6a:	e7e4      	b.n	8007e36 <_malloc_r+0x1e>
 8007e6c:	680b      	ldr	r3, [r1, #0]
 8007e6e:	1b5b      	subs	r3, r3, r5
 8007e70:	d418      	bmi.n	8007ea4 <_malloc_r+0x8c>
 8007e72:	2b0b      	cmp	r3, #11
 8007e74:	d90f      	bls.n	8007e96 <_malloc_r+0x7e>
 8007e76:	600b      	str	r3, [r1, #0]
 8007e78:	50cd      	str	r5, [r1, r3]
 8007e7a:	18cc      	adds	r4, r1, r3
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f000 f836 	bl	8007eee <__malloc_unlock>
 8007e82:	f104 000b 	add.w	r0, r4, #11
 8007e86:	1d23      	adds	r3, r4, #4
 8007e88:	f020 0007 	bic.w	r0, r0, #7
 8007e8c:	1ac3      	subs	r3, r0, r3
 8007e8e:	d0d3      	beq.n	8007e38 <_malloc_r+0x20>
 8007e90:	425a      	negs	r2, r3
 8007e92:	50e2      	str	r2, [r4, r3]
 8007e94:	e7d0      	b.n	8007e38 <_malloc_r+0x20>
 8007e96:	428c      	cmp	r4, r1
 8007e98:	684b      	ldr	r3, [r1, #4]
 8007e9a:	bf16      	itet	ne
 8007e9c:	6063      	strne	r3, [r4, #4]
 8007e9e:	6013      	streq	r3, [r2, #0]
 8007ea0:	460c      	movne	r4, r1
 8007ea2:	e7eb      	b.n	8007e7c <_malloc_r+0x64>
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	6849      	ldr	r1, [r1, #4]
 8007ea8:	e7cc      	b.n	8007e44 <_malloc_r+0x2c>
 8007eaa:	1cc4      	adds	r4, r0, #3
 8007eac:	f024 0403 	bic.w	r4, r4, #3
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d005      	beq.n	8007ec0 <_malloc_r+0xa8>
 8007eb4:	1a21      	subs	r1, r4, r0
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 f808 	bl	8007ecc <_sbrk_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d0cf      	beq.n	8007e60 <_malloc_r+0x48>
 8007ec0:	6025      	str	r5, [r4, #0]
 8007ec2:	e7db      	b.n	8007e7c <_malloc_r+0x64>
 8007ec4:	200002f4 	.word	0x200002f4
 8007ec8:	200002f8 	.word	0x200002f8

08007ecc <_sbrk_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4c06      	ldr	r4, [pc, #24]	; (8007ee8 <_sbrk_r+0x1c>)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	f7f9 fed6 	bl	8001c88 <_sbrk>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d102      	bne.n	8007ee6 <_sbrk_r+0x1a>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	b103      	cbz	r3, 8007ee6 <_sbrk_r+0x1a>
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	20000458 	.word	0x20000458

08007eec <__malloc_lock>:
 8007eec:	4770      	bx	lr

08007eee <__malloc_unlock>:
 8007eee:	4770      	bx	lr

08007ef0 <round>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	ec57 6b10 	vmov	r6, r7, d0
 8007ef6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007efa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007efe:	2c13      	cmp	r4, #19
 8007f00:	463b      	mov	r3, r7
 8007f02:	463d      	mov	r5, r7
 8007f04:	dc17      	bgt.n	8007f36 <round+0x46>
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	da09      	bge.n	8007f1e <round+0x2e>
 8007f0a:	3401      	adds	r4, #1
 8007f0c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007f10:	d103      	bne.n	8007f1a <round+0x2a>
 8007f12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	e02c      	b.n	8007f78 <round+0x88>
 8007f1e:	4a18      	ldr	r2, [pc, #96]	; (8007f80 <round+0x90>)
 8007f20:	4122      	asrs	r2, r4
 8007f22:	4217      	tst	r7, r2
 8007f24:	d100      	bne.n	8007f28 <round+0x38>
 8007f26:	b19e      	cbz	r6, 8007f50 <round+0x60>
 8007f28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f2c:	4123      	asrs	r3, r4
 8007f2e:	442b      	add	r3, r5
 8007f30:	ea23 0302 	bic.w	r3, r3, r2
 8007f34:	e7f1      	b.n	8007f1a <round+0x2a>
 8007f36:	2c33      	cmp	r4, #51	; 0x33
 8007f38:	dd0d      	ble.n	8007f56 <round+0x66>
 8007f3a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007f3e:	d107      	bne.n	8007f50 <round+0x60>
 8007f40:	4630      	mov	r0, r6
 8007f42:	4639      	mov	r1, r7
 8007f44:	ee10 2a10 	vmov	r2, s0
 8007f48:	f7f8 f94c 	bl	80001e4 <__adddf3>
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	460f      	mov	r7, r1
 8007f50:	ec47 6b10 	vmov	d0, r6, r7
 8007f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f56:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8007f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5e:	40d0      	lsrs	r0, r2
 8007f60:	4206      	tst	r6, r0
 8007f62:	d0f5      	beq.n	8007f50 <round+0x60>
 8007f64:	2201      	movs	r2, #1
 8007f66:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007f6a:	fa02 f404 	lsl.w	r4, r2, r4
 8007f6e:	1931      	adds	r1, r6, r4
 8007f70:	bf28      	it	cs
 8007f72:	189b      	addcs	r3, r3, r2
 8007f74:	ea21 0100 	bic.w	r1, r1, r0
 8007f78:	461f      	mov	r7, r3
 8007f7a:	460e      	mov	r6, r1
 8007f7c:	e7e8      	b.n	8007f50 <round+0x60>
 8007f7e:	bf00      	nop
 8007f80:	000fffff 	.word	0x000fffff

08007f84 <_init>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr

08007f90 <_fini>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	bf00      	nop
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr
